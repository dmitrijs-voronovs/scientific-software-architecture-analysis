id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/doc/v632/namespaceROOT_1_1Detail.html:3318,Integrability,adapter,adapter,3318,"pr bool HasCallOp (char);  ; template<typename T > ; constexpr auto HasCallOp (int) -> decltype(&T::operator(), true);  ; template<class ArrayL , class ArrayR > ; bool operator_equal_impl (ArrayL const &lhs, size_t const lhs_size, ArrayR const &rhs, size_t const rhs_size);  . Detailed Description; Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. . Typedef Documentation. ◆ make_indices. template<size_t Start, size_t Last, size_t Step = 1> . using ROOT::Detail::make_indices = typedef typename make_indices_< Start, Last, Step >::type. Definition at line 148 of file span.hxx. ◆ TRangeStaticCast. template<typename T > . using ROOT::Detail::TRangeStaticCast = typedef TRangeCast<T, false>. TRangeStaticCast is an adapter class that allows the typed iteration through a TCollection. ; This requires the collection to contain elements of the type requested (or a derived class). Any deviation from this expectation will only be caught/reported by an assert in debug builds.; This is best used with a TClonesArray, for other cases prefered TRangeDynCast.; The typical use is: for(auto bcl : TRangeStaticCast<TBaseClass>( *tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; for(auto bcl : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; a#define a(i)Definition RSha256.hxx:99; ROOT::Detail::TRangeCastDefinition TCollection.h:311; TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; Template Parameters. TThe new type to convert to. . Definition at line 337 of file TCollection.h. Function Documentation. ◆ HasBeenDeleted(). R__ALWAYS_INLINE bool ROOT::Detail::HasBeenDeleted ; (; const TObject * ; obj). Check if the TObject's me",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Detail.html
https://root.cern/doc/v632/namespaceROOT_1_1Detail.html:309,Modifiability,inherit,inherits,309,". ROOT: ROOT::Detail Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Functions ; ROOT::Detail Namespace Reference. Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ; More... Namespaces; namespace  Internal;  ; namespace  RDF;  ; namespace  VecOps;  . Classes; struct  CallableTraitsImpl;  Extract types from the signature of a callable object. See CallableTraits. More...;  ; struct  CallableTraitsImpl< R(*)(Args...), false >;  ; struct  CallableTraitsImpl< R(Args...), false >;  ; struct  CallableTraitsImpl< R(T::*)(Args...) const, false >;  ; struct  CallableTraitsImpl< R(T::*)(Args...), false >;  ; struct  CallableTraitsImpl< T, true >;  ; struct  indices;  ; struct  is_array_class;  ; struct  is_array_class< std::array< T, N > >;  ; struct  is_array_class< std::initializer_list< T > >;  ; struct  is_array_class< std::vector< T > >;  ; struct  make_indices_;  ; struct  make_indices_impl;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N > 1 &&N % 2==0)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N > 1 &&N % 2==1)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N==0)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N==1)>::type >;  ; struct  make_indices_next;  ; struct  make_indices_next2;  ; struct  make_indices_next2< indices< Indices... >, Next, Tail >;  ; struct  make_indices_next< indices< Indices... >, Next >;  ; class  TBranchProxy;  Base class for all the proxy object. More...;  ; class  TCollectionProxyInfo;  ; class  TRangeCast;  ; class  TSchemaRuleSet;  ; class  TStatusBitsChecker;  . Typedefs; template<size_t Start, size_t Last, size_t Step = 1> ; using make_indices = typename make_indices_< Start, Last, Step",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Detail.html
https://root.cern/doc/v632/namespaceROOT_1_1Detail.html:2111,Modifiability,adapt,adapter,2111,"; struct  is_array_class< std::vector< T > >;  ; struct  make_indices_;  ; struct  make_indices_impl;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N > 1 &&N % 2==0)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N > 1 &&N % 2==1)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N==0)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N==1)>::type >;  ; struct  make_indices_next;  ; struct  make_indices_next2;  ; struct  make_indices_next2< indices< Indices... >, Next, Tail >;  ; struct  make_indices_next< indices< Indices... >, Next >;  ; class  TBranchProxy;  Base class for all the proxy object. More...;  ; class  TCollectionProxyInfo;  ; class  TRangeCast;  ; class  TSchemaRuleSet;  ; class  TStatusBitsChecker;  . Typedefs; template<size_t Start, size_t Last, size_t Step = 1> ; using make_indices = typename make_indices_< Start, Last, Step >::type;  ; template<typename T > ; using TRangeStaticCast = TRangeCast< T, false >;  TRangeStaticCast is an adapter class that allows the typed iteration through a TCollection. ;  . Functions; R__ALWAYS_INLINE bool HasBeenDeleted (const TObject *obj);  Check if the TObject's memory has been deleted. ;  ; template<typename T > ; constexpr bool HasCallOp (char);  ; template<typename T > ; constexpr auto HasCallOp (int) -> decltype(&T::operator(), true);  ; template<class ArrayL , class ArrayR > ; bool operator_equal_impl (ArrayL const &lhs, size_t const lhs_size, ArrayR const &rhs, size_t const rhs_size);  . Detailed Description; Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. . Typedef Documentation. ◆ make_indices. template<size_t Start, size_t Last",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Detail.html
https://root.cern/doc/v632/namespaceROOT_1_1Detail.html:2743,Modifiability,inherit,inherits,2743,"class for all the proxy object. More...;  ; class  TCollectionProxyInfo;  ; class  TRangeCast;  ; class  TSchemaRuleSet;  ; class  TStatusBitsChecker;  . Typedefs; template<size_t Start, size_t Last, size_t Step = 1> ; using make_indices = typename make_indices_< Start, Last, Step >::type;  ; template<typename T > ; using TRangeStaticCast = TRangeCast< T, false >;  TRangeStaticCast is an adapter class that allows the typed iteration through a TCollection. ;  . Functions; R__ALWAYS_INLINE bool HasBeenDeleted (const TObject *obj);  Check if the TObject's memory has been deleted. ;  ; template<typename T > ; constexpr bool HasCallOp (char);  ; template<typename T > ; constexpr auto HasCallOp (int) -> decltype(&T::operator(), true);  ; template<class ArrayL , class ArrayR > ; bool operator_equal_impl (ArrayL const &lhs, size_t const lhs_size, ArrayR const &rhs, size_t const rhs_size);  . Detailed Description; Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. . Typedef Documentation. ◆ make_indices. template<size_t Start, size_t Last, size_t Step = 1> . using ROOT::Detail::make_indices = typedef typename make_indices_< Start, Last, Step >::type. Definition at line 148 of file span.hxx. ◆ TRangeStaticCast. template<typename T > . using ROOT::Detail::TRangeStaticCast = typedef TRangeCast<T, false>. TRangeStaticCast is an adapter class that allows the typed iteration through a TCollection. ; This requires the collection to contain elements of the type requested (or a derived class). Any deviation from this expectation will only be caught/reported by an assert in debug builds.; This is best used with a TClonesArray, for other cases prefered TRangeDynCast.; The typical use is: for(auto bcl : TRangeStaticCast<TBaseClass>",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Detail.html
https://root.cern/doc/v632/namespaceROOT_1_1Detail.html:3318,Modifiability,adapt,adapter,3318,"pr bool HasCallOp (char);  ; template<typename T > ; constexpr auto HasCallOp (int) -> decltype(&T::operator(), true);  ; template<class ArrayL , class ArrayR > ; bool operator_equal_impl (ArrayL const &lhs, size_t const lhs_size, ArrayR const &rhs, size_t const rhs_size);  . Detailed Description; Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. . Typedef Documentation. ◆ make_indices. template<size_t Start, size_t Last, size_t Step = 1> . using ROOT::Detail::make_indices = typedef typename make_indices_< Start, Last, Step >::type. Definition at line 148 of file span.hxx. ◆ TRangeStaticCast. template<typename T > . using ROOT::Detail::TRangeStaticCast = typedef TRangeCast<T, false>. TRangeStaticCast is an adapter class that allows the typed iteration through a TCollection. ; This requires the collection to contain elements of the type requested (or a derived class). Any deviation from this expectation will only be caught/reported by an assert in debug builds.; This is best used with a TClonesArray, for other cases prefered TRangeDynCast.; The typical use is: for(auto bcl : TRangeStaticCast<TBaseClass>( *tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; for(auto bcl : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; a#define a(i)Definition RSha256.hxx:99; ROOT::Detail::TRangeCastDefinition TCollection.h:311; TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; Template Parameters. TThe new type to convert to. . Definition at line 337 of file TCollection.h. Function Documentation. ◆ HasBeenDeleted(). R__ALWAYS_INLINE bool ROOT::Detail::HasBeenDeleted ; (; const TObject * ; obj). Check if the TObject's me",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Detail.html
https://root.cern/doc/v632/namespaceROOT_1_1Detail.html:4811,Safety,detect,detected,4811,"l : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; a#define a(i)Definition RSha256.hxx:99; ROOT::Detail::TRangeCastDefinition TCollection.h:311; TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; Template Parameters. TThe new type to convert to. . Definition at line 337 of file TCollection.h. Function Documentation. ◆ HasBeenDeleted(). R__ALWAYS_INLINE bool ROOT::Detail::HasBeenDeleted ; (; const TObject * ; obj). Check if the TObject's memory has been deleted. ; WarningThis should be only used for error mitigation as the answer is only sometimes correct. It actually just checks whether the object has been deleted, so this will falsely return true for an object that has been destructed but its memory has not been deleted. This will return an undefined value if the memory is re-used between the deletion and the check. i.e. This is useful to prevent a segmentation fault in case where the problem can be detected when the deletion and the usage are 'close-by' . In enviroment where delete taints (changes) the memory, this function always returns false as the marker left by ~TObject will be overwritten. ; Parameters. objThe memory to check . Returnstrue if the object has been destructed and it can be inferred that it has been deleted ; Definition at line 402 of file TObject.h. ◆ HasCallOp() [1/2]. template<typename T > . constexpr bool ROOT::Detail::HasCallOp ; (; char ; ). constexpr . Definition at line 32 of file TypeTraits.hxx. ◆ HasCallOp() [2/2]. template<typename T > . constexpr auto ROOT::Detail::HasCallOp ; (; int ; ); -> decltype(&T::operator(), true) . constexpr . Definition at line 31 of file TypeTraits.hxx. ◆ operator_equal_impl(). template<class ArrayL , class ArrayR > . bool ROOT::Detail::operator_equal_impl ; (; ArrayL const & ; lhs, . size_t const ; lhs_size, . ArrayR const & ; rhs, . size_t const ; rhs_size . ). inline . Definition at line 456 of file span.hx",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Detail.html
https://root.cern/doc/v632/namespaceROOT_1_1Detail.html:3553,Testability,assert,assert,3553,"(ArrayL const &lhs, size_t const lhs_size, ArrayR const &rhs, size_t const rhs_size);  . Detailed Description; Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. . Typedef Documentation. ◆ make_indices. template<size_t Start, size_t Last, size_t Step = 1> . using ROOT::Detail::make_indices = typedef typename make_indices_< Start, Last, Step >::type. Definition at line 148 of file span.hxx. ◆ TRangeStaticCast. template<typename T > . using ROOT::Detail::TRangeStaticCast = typedef TRangeCast<T, false>. TRangeStaticCast is an adapter class that allows the typed iteration through a TCollection. ; This requires the collection to contain elements of the type requested (or a derived class). Any deviation from this expectation will only be caught/reported by an assert in debug builds.; This is best used with a TClonesArray, for other cases prefered TRangeDynCast.; The typical use is: for(auto bcl : TRangeStaticCast<TBaseClass>( *tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; for(auto bcl : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; a#define a(i)Definition RSha256.hxx:99; ROOT::Detail::TRangeCastDefinition TCollection.h:311; TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; Template Parameters. TThe new type to convert to. . Definition at line 337 of file TCollection.h. Function Documentation. ◆ HasBeenDeleted(). R__ALWAYS_INLINE bool ROOT::Detail::HasBeenDeleted ; (; const TObject * ; obj). Check if the TObject's memory has been deleted. ; WarningThis should be only used for error mitigation as the answer is only sometimes correct. It actually just checks whether the object has been deleted, so this w",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Detail.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:5706,Availability,error,error,5706,"ent for display of RHistStat, required to avoid sending histogram to the client. More...;  ; class  RDisplayItem;  Base class for painting data for JS. More...;  ; class  RDrawable;  Base class for drawable entities: objects that can be painted on a RPad. More...;  ; class  RDrawableDisplayItem;  Generic display item for RDrawable, just reference drawable itself. More...;  ; class  RDrawableExecRequest;  Request execution of method of referenced drawable, no reply. More...;  ; class  RDrawableMenuRequest;  Request menu items for the drawable object. More...;  ; class  RDrawableReply;  Base class for replies on RDrawableRequest. More...;  ; class  RDrawableRequest;  Base class for requests which can be submitted from the clients. More...;  ; class  REntry;  The REntry is a collection of values in an ntuple corresponding to a complete row in the data set. More...;  ; class  REnumField;  The field for an unscoped or scoped enum with dictionary. More...;  ; class  RError;  Captures diagnostics related to a ROOT runtime error. More...;  ; class  REve3DProjection;  ; class  REveAunt;  ; class  REveAuntAsList;  ; class  REveBox;  ; class  REveBoxProjected;  ; class  REveBoxSet;  ; class  REveCalo2D;  ; class  REveCalo3D;  ; class  REveCaloData;  ; class  REveCaloDataHist;  ; class  REveCaloDataSelector;  ; class  REveCaloDataSliceSelector;  ; class  REveCaloDataVec;  ; class  REveCaloLego;  ; class  REveCaloViz;  ; class  REveChunkManager;  ; class  REveChunkVector;  ; class  REveClient;  ; class  REveCluster;  REveCluster Reconstructed cluster (also used in VSD). More...;  ; class  REveCollectionCompound;  ; class  REveCompound;  ; class  REveCompoundProjected;  ; class  REveDataCollection;  ; class  REveDataColumn;  ; class  REveDataItem;  ; class  REveDataItemList;  ; class  REveDataProxyBuilderBase;  ; class  REveDataSimpleProxyBuilder;  ; class  REveDataSimpleProxyBuilderTemplate;  ; class  REveDataTable;  ; class  REveDigitSet;  ; class  REveElement;  ; class  REveEl",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:15920,Availability,failure,failures,15920,"xBase;  Base class for histogram statistic box, provides graphics attributes and virtual method for fill statistic. More...;  ; class  RHistStatContent;  Basic histogram statistics, keeping track of the bin content and the total number of calls to Fill(). More...;  ; class  RHistStatRuntime;  Interface implementing a pure virtual functions DoFill(), DoFillN(). More...;  ; class  RHistStatTotalSumOfSquaredWeights;  Keeps track of the histogram's total sum of squared weights. More...;  ; class  RHistStatTotalSumOfWeights;  Keeps track of the histogram's total sum of weights. More...;  ; class  RHistStatUncertainty;  Histogram statistics to keep track of the Poisson uncertainty per bin. More...;  ; class  RHistView;  A view on a histogram, selecting a range on a subset of dimensions. More...;  ; struct  RHistViewOutOfRange;  ; class  RIndirectDisplayItem;  Extract (reference) only basic attributes from drawable, but not drawable itself. More...;  ; class  RInvalidField;  Used in RFieldBase::Check() to record field creation failures. More...;  ; class  RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  ; class  RMapField;  The generic field for a std::map<KeyType, ValueTy",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:16060,Availability,error,errors,16060,"istogram statistics, keeping track of the bin content and the total number of calls to Fill(). More...;  ; class  RHistStatRuntime;  Interface implementing a pure virtual functions DoFill(), DoFillN(). More...;  ; class  RHistStatTotalSumOfSquaredWeights;  Keeps track of the histogram's total sum of squared weights. More...;  ; class  RHistStatTotalSumOfWeights;  Keeps track of the histogram's total sum of weights. More...;  ; class  RHistStatUncertainty;  Histogram statistics to keep track of the Poisson uncertainty per bin. More...;  ; class  RHistView;  A view on a histogram, selecting a range on a subset of dimensions. More...;  ; struct  RHistViewOutOfRange;  ; class  RIndirectDisplayItem;  Extract (reference) only basic attributes from drawable, but not drawable itself. More...;  ; class  RInvalidField;  Used in RFieldBase::Check() to record field creation failures. More...;  ; class  RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  ; class  RMapField;  The generic field for a std::map<KeyType, ValueType> and std::unordered_map<KeyType, ValueType> More...;  ; class  RMenuItems;  List of items for object context menu. More...;  ; class  RNTuple;  Representation",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:16567,Availability,error,errors,16567,"inty per bin. More...;  ; class  RHistView;  A view on a histogram, selecting a range on a subset of dimensions. More...;  ; struct  RHistViewOutOfRange;  ; class  RIndirectDisplayItem;  Extract (reference) only basic attributes from drawable, but not drawable itself. More...;  ; class  RInvalidField;  Used in RFieldBase::Check() to record field creation failures. More...;  ; class  RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  ; class  RMapField;  The generic field for a std::map<KeyType, ValueType> and std::unordered_map<KeyType, ValueType> More...;  ; class  RMenuItems;  List of items for object context menu. More...;  ; class  RNTuple;  Representation of an RNTuple data set in a ROOT file. More...;  ; struct  RNTupleCardinality;  Helper types to present an offset column as array of collection sizes. More...;  ; class  RNTupleClusterRange;  Used to loop over entries of collections in a single cluster. More...;  ; class  RNTupleCollectionView;  A view for a collection, that can itself generate new ntuple views for its nested fields. More...;  ; class  RNTupleCollectionWriter;  A virtual ntuple used for writing untyped collections that can be used to some extent",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:21196,Availability,error,error,21196,"re...;  ; class  RPave;  Base class for paves with text, statistic, legends, placed relative to RFrame position and adjustable height. More...;  ; class  RPrepareVisitor;  Visitor used for a pre-processing run to collect information needed by another visitor class. More...;  ; class  RPrintSchemaVisitor;  Contains settings for printing and prints a summary of an RField instance. More...;  ; class  RPrintValueVisitor;  Renders a JSON value corresponding to the field. More...;  ; class  RProxiedCollectionField;  The field for a class representing a collection of elements via TVirtualCollectionProxy. More...;  ; class  RRecordField;  The field for an untyped record. More...;  ; class  RResult;  The class is used as a return type for operations that can fail; wraps a value of type T or an RError. More...;  ; class  RResult< void >;  RResult<void> has no data member and no Inspect() method but instead a Success() factory method. More...;  ; class  RResultBase;  Common handling of the error case for RResult<T> (T != void) and RResult<void> More...;  ; class  RRVecField;  The type-erased field for a RVec<Type> More...;  ; class  RSetField;  The generic field for a std::set<Type> and std::unordered_set<Type> More...;  ; class  RStyle;  A set of defaults for graphics attributes, e.g. More...;  ; class  RTupleField;  The generic field for std::tuple<Ts...> types. More...;  ; class  RUniquePtrField;  ; class  RVariantField;  The generic field for std::variant types. More...;  ; class  RVectorField;  The generic field for a (nested) std::vector<Type> except for std::vector<bool> More...;  ; class  TObjectDisplayItem;  Display item for TObject with drawing options. More...;  ; class  TObjectDrawable;  Provides v7 drawing facilities for TObject types (TGraph, TH1, TH2, etc). More...;  ; class  TTaskGroup;  A class to manage the asynchronous execution of work items. More...;  ; class  TTreeReaderFast;  ; class  TTreeReaderValueFast;  ; class  TTreeReaderValueFast< bool >;  ; class",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:40630,Availability,error,error,40630,"., 4., target: 0., 0.1, 0.2, 0.3, 0.4 . Definition at line 859 of file RAxis.hxx. ◆ EColumnType. enum class ROOT::Experimental::EColumnType. strong . EnumeratorkUnknown ; kIndex64 ; kIndex32 ; kSwitch ; kByte ; kChar ; kBit ; kReal64 ; kReal32 ; kReal16 ; kInt64 ; kUInt64 ; kInt32 ; kUInt32 ; kInt16 ; kUInt16 ; kInt8 ; kUInt8 ; kSplitIndex64 ; kSplitIndex32 ; kSplitReal64 ; kSplitReal32 ; kSplitInt64 ; kSplitUInt64 ; kSplitInt32 ; kSplitUInt32 ; kSplitInt16 ; kSplitUInt16 ; kMax . Definition at line 43 of file RColumnModel.hxx. ◆ EIOFeatures. enum class ROOT::Experimental::EIOFeatures. strong . EnumeratorkGenerateOffsetMap ; kSupported . Definition at line 52 of file TIOFeatures.hxx. ◆ EIOUnsupportedFeatures. enum class ROOT::Experimental::EIOUnsupportedFeatures. strong . EnumeratorkUnsupported . Definition at line 61 of file TIOFeatures.hxx. ◆ ELogLevel. enum class ROOT::Experimental::ELogLevel : unsigned char. strong . Kinds of diagnostics. . EnumeratorkUnset ; kFatal An error which causes further processing to be unreliable. . kError An error. . kWarning Warnings about likely unexpected behavior. . kInfo Informational messages; used for instance for tracing. . kDebug Debug information; only useful for developers; can have added verbosity up to 255-kDebug. . Definition at line 36 of file RLogger.hxx. ◆ ENTupleInfo. enum class ROOT::Experimental::ENTupleInfo. strong . Listing of the different options that can be printed by RNTupleReader::GetInfo() . EnumeratorkSummary ; kStorageDetails ; kMetrics . Definition at line 43 of file RNTupleReader.hxx. ◆ ENTupleInspectorHist. enum class ROOT::Experimental::ENTupleInspectorHist. strong . EnumeratorkCount ; kNElems ; kCompressedSize ; kUncompressedSize . Definition at line 43 of file RNTupleInspector.hxx. ◆ ENTupleInspectorPrintFormat. enum class ROOT::Experimental::ENTupleInspectorPrintFormat. strong . EnumeratorkTable ; kCSV . Definition at line 42 of file RNTupleInspector.hxx. ◆ ENTupleStructure. enum ROOT::Experimental:",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:40698,Availability,error,error,40698, line 859 of file RAxis.hxx. ◆ EColumnType. enum class ROOT::Experimental::EColumnType. strong . EnumeratorkUnknown ; kIndex64 ; kIndex32 ; kSwitch ; kByte ; kChar ; kBit ; kReal64 ; kReal32 ; kReal16 ; kInt64 ; kUInt64 ; kInt32 ; kUInt32 ; kInt16 ; kUInt16 ; kInt8 ; kUInt8 ; kSplitIndex64 ; kSplitIndex32 ; kSplitReal64 ; kSplitReal32 ; kSplitInt64 ; kSplitUInt64 ; kSplitInt32 ; kSplitUInt32 ; kSplitInt16 ; kSplitUInt16 ; kMax . Definition at line 43 of file RColumnModel.hxx. ◆ EIOFeatures. enum class ROOT::Experimental::EIOFeatures. strong . EnumeratorkGenerateOffsetMap ; kSupported . Definition at line 52 of file TIOFeatures.hxx. ◆ EIOUnsupportedFeatures. enum class ROOT::Experimental::EIOUnsupportedFeatures. strong . EnumeratorkUnsupported . Definition at line 61 of file TIOFeatures.hxx. ◆ ELogLevel. enum class ROOT::Experimental::ELogLevel : unsigned char. strong . Kinds of diagnostics. . EnumeratorkUnset ; kFatal An error which causes further processing to be unreliable. . kError An error. . kWarning Warnings about likely unexpected behavior. . kInfo Informational messages; used for instance for tracing. . kDebug Debug information; only useful for developers; can have added verbosity up to 255-kDebug. . Definition at line 36 of file RLogger.hxx. ◆ ENTupleInfo. enum class ROOT::Experimental::ENTupleInfo. strong . Listing of the different options that can be printed by RNTupleReader::GetInfo() . EnumeratorkSummary ; kStorageDetails ; kMetrics . Definition at line 43 of file RNTupleReader.hxx. ◆ ENTupleInspectorHist. enum class ROOT::Experimental::ENTupleInspectorHist. strong . EnumeratorkCount ; kNElems ; kCompressedSize ; kUncompressedSize . Definition at line 43 of file RNTupleInspector.hxx. ◆ ENTupleInspectorPrintFormat. enum class ROOT::Experimental::ENTupleInspectorPrintFormat. strong . EnumeratorkTable ; kCSV . Definition at line 42 of file RNTupleInspector.hxx. ◆ ENTupleStructure. enum ROOT::Experimental::ENTupleStructure. The fields in the ntuple model tre,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:42811,Availability,error,error,42811,"em. ; Leaf fields contain just data, collection fields resolve to offset columns, record fields have no materialization on the primitive column layer. . EnumeratorkLeaf ; kCollection ; kRecord ; kVariant ; kReference ; kInvalid . Definition at line 38 of file RNTupleUtil.hxx. Function Documentation. ◆ Add(). template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT_TO, template< int D_, class P_ > class... STAT_FROM> . void ROOT::Experimental::Add ; (; RHist< DIMENSIONS, PRECISION, STAT_TO... > & ; to, . const RHist< DIMENSIONS, PRECISION, STAT_FROM... > & ; from . ). Add two histograms. ; This operation may currently only be performed if the two histograms have the same axis configuration, use the same precision, and if from records at least the same statistics as to (recording more stats is fine).; Adding histograms with incompatible axis binning will be reported at runtime with an std::runtime_error. Insufficient statistics in the source histogram will be detected at compile-time and result in a compiler error.; In the future, we may either adopt a more relaxed definition of histogram addition or provide a mechanism to convert from one histogram type to another. We currently favor the latter path. ; Definition at line 342 of file RHist.hxx. ◆ CanMap(). ROOT::Experimental::EAxisCompatibility ROOT::Experimental::CanMap ; (; const RAxisEquidistant & ; target, . const RAxisEquidistant & ; source . ). noexcept . Whether (and how) the source axis can be merged into the target axis. ; Definition at line 126 of file RAxis.cxx. ◆ FitPanelLog(). ROOT::Experimental::RLogChannel & ROOT::Experimental::FitPanelLog ; (; ). Log channel for FitPanel diagnostics. ; Definition at line 22 of file RFitPanelModel.cxx. ◆ FitTo(). template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT> . RFitResult ROOT::Experimental::FitTo ; (; const RHist< DIMENSIONS, PRECISION, STAT... > & ; hist, . const RFunction< DIMENSIONS > & ; func, . st",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:15969,Deployability,configurat,configuration,15969,"tual method for fill statistic. More...;  ; class  RHistStatContent;  Basic histogram statistics, keeping track of the bin content and the total number of calls to Fill(). More...;  ; class  RHistStatRuntime;  Interface implementing a pure virtual functions DoFill(), DoFillN(). More...;  ; class  RHistStatTotalSumOfSquaredWeights;  Keeps track of the histogram's total sum of squared weights. More...;  ; class  RHistStatTotalSumOfWeights;  Keeps track of the histogram's total sum of weights. More...;  ; class  RHistStatUncertainty;  Histogram statistics to keep track of the Poisson uncertainty per bin. More...;  ; class  RHistView;  A view on a histogram, selecting a range on a subset of dimensions. More...;  ; struct  RHistViewOutOfRange;  ; class  RIndirectDisplayItem;  Extract (reference) only basic attributes from drawable, but not drawable itself. More...;  ; class  RInvalidField;  Used in RFieldBase::Check() to record field creation failures. More...;  ; class  RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  ; class  RMapField;  The generic field for a std::map<KeyType, ValueType> and std::unordered_map<KeyType, ValueType> More...;  ; class  RMenuItems;  List o",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:42473,Deployability,configurat,configuration,42473,"InspectorPrintFormat. strong . EnumeratorkTable ; kCSV . Definition at line 42 of file RNTupleInspector.hxx. ◆ ENTupleStructure. enum ROOT::Experimental::ENTupleStructure. The fields in the ntuple model tree can carry different structural information about the type system. ; Leaf fields contain just data, collection fields resolve to offset columns, record fields have no materialization on the primitive column layer. . EnumeratorkLeaf ; kCollection ; kRecord ; kVariant ; kReference ; kInvalid . Definition at line 38 of file RNTupleUtil.hxx. Function Documentation. ◆ Add(). template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT_TO, template< int D_, class P_ > class... STAT_FROM> . void ROOT::Experimental::Add ; (; RHist< DIMENSIONS, PRECISION, STAT_TO... > & ; to, . const RHist< DIMENSIONS, PRECISION, STAT_FROM... > & ; from . ). Add two histograms. ; This operation may currently only be performed if the two histograms have the same axis configuration, use the same precision, and if from records at least the same statistics as to (recording more stats is fine).; Adding histograms with incompatible axis binning will be reported at runtime with an std::runtime_error. Insufficient statistics in the source histogram will be detected at compile-time and result in a compiler error.; In the future, we may either adopt a more relaxed definition of histogram addition or provide a mechanism to convert from one histogram type to another. We currently favor the latter path. ; Definition at line 342 of file RHist.hxx. ◆ CanMap(). ROOT::Experimental::EAxisCompatibility ROOT::Experimental::CanMap ; (; const RAxisEquidistant & ; target, . const RAxisEquidistant & ; source . ). noexcept . Whether (and how) the source axis can be merged into the target axis. ; Definition at line 126 of file RAxis.cxx. ◆ FitPanelLog(). ROOT::Experimental::RLogChannel & ROOT::Experimental::FitPanelLog ; (; ). Log channel for FitPanel diagnostics. ; Definition at line 22 o",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:56301,Energy Efficiency,efficient,efficient,56301,">(). template<> . const RAttrMap::Value_t * ROOT::Experimental::RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, RColor > ; (; const Value_t * ; rec). ◆ RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, RPadLength >(). template<> . const RAttrMap::Value_t * ROOT::Experimental::RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, RPadLength > ; (; const Value_t * ; rec). ◆ RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, void >(). template<> . const RAttrMap::Value_t * ROOT::Experimental::RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, void > ; (; const Value_t * ; rec). ◆ REveLog(). REX::RLogChannel & ROOT::Experimental::REveLog ; (; ). Log channel for Eve diagnostics. ; Definition at line 51 of file REveTypes.cxx. ◆ swap(). template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT> . void ROOT::Experimental::swap ; (; RHist< DIMENSIONS, PRECISION, STAT... > & ; a, . RHist< DIMENSIONS, PRECISION, STAT... > & ; b . ). noexcept . Swap two histograms. ; Very efficient; swaps the fImpl pointers. ; Definition at line 210 of file RHist.hxx. Variable Documentation. ◆ gEve. REveManager * ROOT::Experimental::gEve = nullptr. Definition at line 286 of file REveManager.hxx. ◆ kInvalidColumnId. constexpr ColumnId_t ROOT::Experimental::kInvalidColumnId = -1. constexpr . Definition at line 104 of file RNTupleUtil.hxx. ◆ kInvalidDescriptorId. constexpr DescriptorId_t ROOT::Experimental::kInvalidDescriptorId = std::uint64_t(-1). constexpr . Definition at line 108 of file RNTupleUtil.hxx. ◆ kInvalidNTupleIndex. constexpr NTupleSize_t ROOT::Experimental::kInvalidNTupleIndex = std::uint64_t(-1). constexpr . Definition at line 49 of file RNTupleUtil.hxx. ◆ kUnknownCompressionSettings. constexpr int ROOT::Experimental::kUnknownCompressionSettings = -1. constexpr . Definition at line 66 of file RNTupleUtil.hxx. ROOTExperimental. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:7352,Integrability,interface,interface,7352,; class  REveCompoundProjected;  ; class  REveDataCollection;  ; class  REveDataColumn;  ; class  REveDataItem;  ; class  REveDataItemList;  ; class  REveDataProxyBuilderBase;  ; class  REveDataSimpleProxyBuilder;  ; class  REveDataSimpleProxyBuilderTemplate;  ; class  REveDataTable;  ; class  REveDigitSet;  ; class  REveElement;  ; class  REveEllipsoid;  ; class  REveEllipsoidProjected;  ; class  REveException;  REveException Exception-type thrown by Eve classes. More...;  ; class  REveFrameBox;  ; class  REveGeoManagerHolder;  REveGeoManagerHolder Exception-safe global variable holders. More...;  ; class  REveGeoPolyShape;  ; class  REveGeoShape;  ; class  REveGeoShapeExtract;  ; class  REveGeoShapeProjected;  ; class  REveHit;  REveHit Monte Carlo hit (also used in VSD). More...;  ; class  REveJetCone;  ; class  REveJetConeProjected;  ; class  REveLine;  REveLine An arbitrary polyline with fixed line and marker attributes. More...;  ; class  REveLineProjected;  ; class  REveMagField;  REveMagField Abstract interface to magnetic field. More...;  ; class  REveMagFieldConst;  REveMagFieldConst Interface to constant magnetic field. More...;  ; class  REveMagFieldDuo;  REveMagFieldDuo Interface to magnetic field with two different values depending on radius. More...;  ; class  REveManager;  ; class  REveMCRecCrossRef;  REveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD). More...;  ; class  REveMCTrack;  REveMCTrack. More...;  ; class  REvePathMarkT;  Special-point on track: More...;  ; class  REvePointSelector;  REvePointSelector TSelector for direct extraction of point-like data from a Tree. More...;  ; class  REvePointSelectorConsumer;  ; class  REvePointSet;  ; class  REvePointSetArray;  ; class  REvePointSetProjected;  ; class  REvePolygonSetProjected;  ; class  REveProjectable;  ; class  REveProjected;  ; class  REveProjection;  REveProjection Base for specific classes that implement non-linear projections. More...;  ; class  REvePro,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:7583,Integrability,depend,depending,7583, class  REveDataSimpleProxyBuilderTemplate;  ; class  REveDataTable;  ; class  REveDigitSet;  ; class  REveElement;  ; class  REveEllipsoid;  ; class  REveEllipsoidProjected;  ; class  REveException;  REveException Exception-type thrown by Eve classes. More...;  ; class  REveFrameBox;  ; class  REveGeoManagerHolder;  REveGeoManagerHolder Exception-safe global variable holders. More...;  ; class  REveGeoPolyShape;  ; class  REveGeoShape;  ; class  REveGeoShapeExtract;  ; class  REveGeoShapeProjected;  ; class  REveHit;  REveHit Monte Carlo hit (also used in VSD). More...;  ; class  REveJetCone;  ; class  REveJetConeProjected;  ; class  REveLine;  REveLine An arbitrary polyline with fixed line and marker attributes. More...;  ; class  REveLineProjected;  ; class  REveMagField;  REveMagField Abstract interface to magnetic field. More...;  ; class  REveMagFieldConst;  REveMagFieldConst Interface to constant magnetic field. More...;  ; class  REveMagFieldDuo;  REveMagFieldDuo Interface to magnetic field with two different values depending on radius. More...;  ; class  REveManager;  ; class  REveMCRecCrossRef;  REveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD). More...;  ; class  REveMCTrack;  REveMCTrack. More...;  ; class  REvePathMarkT;  Special-point on track: More...;  ; class  REvePointSelector;  REvePointSelector TSelector for direct extraction of point-like data from a Tree. More...;  ; class  REvePointSelectorConsumer;  ; class  REvePointSet;  ; class  REvePointSetArray;  ; class  REvePointSetProjected;  ; class  REvePolygonSetProjected;  ; class  REveProjectable;  ; class  REveProjected;  ; class  REveProjection;  REveProjection Base for specific classes that implement non-linear projections. More...;  ; class  REveProjectionManager;  REveProjectionManager Manager class for steering of projections and managing projected objects. More...;  ; class  REveRecCascade;  REveRecCascade. More...;  ; class  REveRecKink;  REveRecKink Recons,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:8872,Integrability,interface,interface,8872,ck: More...;  ; class  REvePointSelector;  REvePointSelector TSelector for direct extraction of point-like data from a Tree. More...;  ; class  REvePointSelectorConsumer;  ; class  REvePointSet;  ; class  REvePointSetArray;  ; class  REvePointSetProjected;  ; class  REvePolygonSetProjected;  ; class  REveProjectable;  ; class  REveProjected;  ; class  REveProjection;  REveProjection Base for specific classes that implement non-linear projections. More...;  ; class  REveProjectionManager;  REveProjectionManager Manager class for steering of projections and managing projected objects. More...;  ; class  REveRecCascade;  REveRecCascade. More...;  ; class  REveRecKink;  REveRecKink Reconstructed kink (also used in VSD). More...;  ; class  REveRecTrackT;  REveRecTrack Template for reconstructed track (also used in VSD). More...;  ; class  REveRecV0;  REveRecV0. More...;  ; class  REveRefBackPtr;  REveRefBackPtr reference-count with back pointers. More...;  ; class  REveRefCnt;  REveRefCnt REveRefCnt base-class (interface) More...;  ; class  REveRenderData;  ; class  REveRGBAPalette;  ; class  REveRhoZProjection;  ; class  REveRPhiProjection;  ; class  REveScalableStraightLineSet;  ; class  REveScene;  ; class  REveSceneInfo;  REveSceneInfo Scene in a viewer. More...;  ; class  REveSceneList;  ; class  REveSecondarySelectable;  ; class  REveSelection;  REveSelection Container for selected and highlighted elements. More...;  ; class  REveSelectorToEventList;  REveSelectorToEventList TSelector that stores entry numbers of matching TTree entries into an event-list. More...;  ; struct  REveServerStatus;  ; class  REveShape;  ; class  REveStraightLineSet;  REveStraightLineSet Set of straight lines with optional markers along the lines. More...;  ; class  REveStraightLineSetProjected;  REveStraightLineSetProjected Projected copy of a REveStraightLineSet. More...;  ; class  REveTableEntry;  REveTableEntry. More...;  ; class  REveTableHandle;  REveTableHandle. More...;  ; class  R,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:12938,Integrability,interface,interface,12938," > >;  ; class  RField< std::bitset< N > >;  ; class  RField< std::byte >;  ; class  RField< std::int16_t >;  ; class  RField< std::int32_t >;  ; class  RField< std::int64_t >;  ; class  RField< std::int8_t >;  ; class  RField< std::map< KeyT, ValueT > >;  ; class  RField< std::pair< T1, T2 > >;  ; class  RField< std::set< ItemT > >;  ; class  RField< std::string >;  ; class  RField< std::tuple< ItemTs... > >;  ; class  RField< std::uint16_t >;  ; class  RField< std::uint32_t >;  ; class  RField< std::uint64_t >;  ; class  RField< std::uint8_t >;  ; class  RField< std::unique_ptr< ItemT > >;  ; class  RField< std::unordered_map< KeyT, ValueT > >;  ; class  RField< std::unordered_set< ItemT > >;  ; class  RField< std::variant< ItemTs... > >;  ; class  RField< std::vector< bool > >;  ; class  RField< std::vector< ItemT > >;  ; class  RField< T, typename std::enable_if< IsCollectionProxy< T >::value >::type >;  Classes behaving as a collection of elements that can be queried via the TVirtualCollectionProxy interface The use of a collection proxy for a particular class can be enabled via: ;  ; class  RField< T, typename std::enable_if< std::is_enum_v< T > >::type >;  ; class  RField< void >;  Template specializations for concrete C++ types. More...;  ; class  RFieldBase;  A field translates read and write calls from/to underlying columns to/from tree values. More...;  ; class  RFieldDescriptor;  Meta-data stored for every field of an ntuple. More...;  ; class  RFieldZero;  The container field for an ntuple model, which itself has no physical representation. More...;  ; class  RFile;  A ROOT file. More...;  ; class  RFilePtr;  Points to an object that stores or reads objects in ROOT's binary format. More...;  ; class  RFitPanel;  ; struct  RFitPanelModel;  Data structure for the fit panel. More...;  ; class  RFitResult;  ; class  RFrame;  Holds an area where drawing on user coordinate-system can be performed. More...;  ; class  RFunction;  ; class  RHist;  Histogram class",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:14542,Integrability,synchroniz,synchronization,14542,"file. More...;  ; class  RFilePtr;  Points to an object that stores or reads objects in ROOT's binary format. More...;  ; class  RFitPanel;  ; struct  RFitPanelModel;  Data structure for the fit panel. More...;  ; class  RFitResult;  ; class  RFrame;  Holds an area where drawing on user coordinate-system can be performed. More...;  ; class  RFunction;  ; class  RHist;  Histogram class for histograms with DIMENSIONS dimensions, where each bin count is stored by a value of type PRECISION. More...;  ; class  RHist1Drawable;  ; class  RHist1StatBox;  ; class  RHist2Drawable;  ; class  RHist2StatBox;  ; class  RHist3Drawable;  ; class  RHist3StatBox;  ; class  RHist< DIMENSIONS, PRECISION >;  RHist with no STAT parameter uses RHistStatContent by default. More...;  ; class  RHistBufferedFill;  Buffers calls to Fill(). More...;  ; class  RHistConcurrentFiller;  Buffers a thread's Fill calls and submits them to the RHistConcurrentFillManager. More...;  ; class  RHistConcurrentFillManager;  Manages the synchronization of calls to FillN(). More...;  ; class  RHistDataMomentUncert;  For now do as RH1: calculate first (xw) and second (x^2w) moment. More...;  ; class  RHistDisplayItem;  ; class  RHistDrawable;  ; class  RHistDrawableBase;  ; class  RHistStatBox;  Template class for statistic box for RHist class. More...;  ; class  RHistStatBoxBase;  Base class for histogram statistic box, provides graphics attributes and virtual method for fill statistic. More...;  ; class  RHistStatContent;  Basic histogram statistics, keeping track of the bin content and the total number of calls to Fill(). More...;  ; class  RHistStatRuntime;  Interface implementing a pure virtual functions DoFill(), DoFillN(). More...;  ; class  RHistStatTotalSumOfSquaredWeights;  Keeps track of the histogram's total sum of squared weights. More...;  ; class  RHistStatTotalSumOfWeights;  Keeps track of the histogram's total sum of weights. More...;  ; class  RHistStatUncertainty;  Histogram statistics to keep",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:20968,Integrability,wrap,wraps,20968,"adPos;  A position (horizontal and vertical) in a RPad. More...;  ; class  RPairField;  The generic field for std::pair<T1, T2> types. More...;  ; class  RPalette;  A set of colors. More...;  ; class  RPaletteDrawable;  A color palette draw near the frame. More...;  ; class  RPave;  Base class for paves with text, statistic, legends, placed relative to RFrame position and adjustable height. More...;  ; class  RPrepareVisitor;  Visitor used for a pre-processing run to collect information needed by another visitor class. More...;  ; class  RPrintSchemaVisitor;  Contains settings for printing and prints a summary of an RField instance. More...;  ; class  RPrintValueVisitor;  Renders a JSON value corresponding to the field. More...;  ; class  RProxiedCollectionField;  The field for a class representing a collection of elements via TVirtualCollectionProxy. More...;  ; class  RRecordField;  The field for an untyped record. More...;  ; class  RResult;  The class is used as a return type for operations that can fail; wraps a value of type T or an RError. More...;  ; class  RResult< void >;  RResult<void> has no data member and no Inspect() method but instead a Success() factory method. More...;  ; class  RResultBase;  Common handling of the error case for RResult<T> (T != void) and RResult<void> More...;  ; class  RRVecField;  The type-erased field for a RVec<Type> More...;  ; class  RSetField;  The generic field for a std::set<Type> and std::unordered_set<Type> More...;  ; class  RStyle;  A set of defaults for graphics attributes, e.g. More...;  ; class  RTupleField;  The generic field for std::tuple<Ts...> types. More...;  ; class  RUniquePtrField;  ; class  RVariantField;  The generic field for std::variant types. More...;  ; class  RVectorField;  The generic field for a (nested) std::vector<Type> except for std::vector<bool> More...;  ; class  TObjectDisplayItem;  Display item for TObject with drawing options. More...;  ; class  TObjectDrawable;  Provides v7 drawing fac",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:40781,Integrability,message,messages,40781,. EnumeratorkUnknown ; kIndex64 ; kIndex32 ; kSwitch ; kByte ; kChar ; kBit ; kReal64 ; kReal32 ; kReal16 ; kInt64 ; kUInt64 ; kInt32 ; kUInt32 ; kInt16 ; kUInt16 ; kInt8 ; kUInt8 ; kSplitIndex64 ; kSplitIndex32 ; kSplitReal64 ; kSplitReal32 ; kSplitInt64 ; kSplitUInt64 ; kSplitInt32 ; kSplitUInt32 ; kSplitInt16 ; kSplitUInt16 ; kMax . Definition at line 43 of file RColumnModel.hxx. ◆ EIOFeatures. enum class ROOT::Experimental::EIOFeatures. strong . EnumeratorkGenerateOffsetMap ; kSupported . Definition at line 52 of file TIOFeatures.hxx. ◆ EIOUnsupportedFeatures. enum class ROOT::Experimental::EIOUnsupportedFeatures. strong . EnumeratorkUnsupported . Definition at line 61 of file TIOFeatures.hxx. ◆ ELogLevel. enum class ROOT::Experimental::ELogLevel : unsigned char. strong . Kinds of diagnostics. . EnumeratorkUnset ; kFatal An error which causes further processing to be unreliable. . kError An error. . kWarning Warnings about likely unexpected behavior. . kInfo Informational messages; used for instance for tracing. . kDebug Debug information; only useful for developers; can have added verbosity up to 255-kDebug. . Definition at line 36 of file RLogger.hxx. ◆ ENTupleInfo. enum class ROOT::Experimental::ENTupleInfo. strong . Listing of the different options that can be printed by RNTupleReader::GetInfo() . EnumeratorkSummary ; kStorageDetails ; kMetrics . Definition at line 43 of file RNTupleReader.hxx. ◆ ENTupleInspectorHist. enum class ROOT::Experimental::ENTupleInspectorHist. strong . EnumeratorkCount ; kNElems ; kCompressedSize ; kUncompressedSize . Definition at line 43 of file RNTupleInspector.hxx. ◆ ENTupleInspectorPrintFormat. enum class ROOT::Experimental::ENTupleInspectorPrintFormat. strong . EnumeratorkTable ; kCSV . Definition at line 42 of file RNTupleInspector.hxx. ◆ ENTupleStructure. enum ROOT::Experimental::ENTupleStructure. The fields in the ntuple model tree can carry different structural information about the type system. ; Leaf fields contain just ,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:2325,Modifiability,config,configure,2325,"ticks attributes. More...;  ; class  RAttrAxisTitle;  Axis title and its drawing attributes. More...;  ; class  RAttrBase;  Base class for all attributes, used with RDrawable. More...;  ; class  RAttrBorder;  Drawing line attributes for different objects. More...;  ; class  RAttrFill;  Drawing fill attributes for different objects. More...;  ; class  RAttrFont;  A font attributes, used together with text attributes. More...;  ; class  RAttrLine;  Drawing line attributes for different objects. More...;  ; class  RAttrLineEnding;  Attributes for line ending. More...;  ; class  RAttrMap;  ; class  RAttrMargins;  A margins attributes. Only relative and pixel coordinates are allowed. More...;  ; class  RAttrMarker;  A marker attributes. More...;  ; class  RAttrText;  A text attributes. More...;  ; class  RAttrValue;  Template class to access single value from drawable or other attributes. More...;  ; class  RAxisBase;  Histogram axis base class. More...;  ; class  RAxisConfig;  Objects used to configure the different axis types. More...;  ; class  RAxisDrawable;  Axis drawing. More...;  ; class  RAxisEquidistant;  Axis with equidistant bin borders. More...;  ; class  RAxisGrow;  An axis that can extend its range, keeping the number of its bins unchanged. More...;  ; class  RAxisIrregular;  An axis with non-equidistant bins (also known as ""variable binning""). More...;  ; class  RAxisLabels;  A RAxisGrow that has a label assigned to each bin and a bin width of 1. More...;  ; class  RBitsetField;  The generic field an std::bitset<N>. More...;  ; class  RCanvas;  A window's topmost RPad. More...;  ; class  RCanvasDisplayItem;  class RCanvasDisplayItem More...;  ; class  RCanvasPainter;  ; class  RCardinalityField;  An artificial field that transforms an RNTuple column that contains the offset of collections into collection sizes. More...;  ; class  RChangeAttrRequest;  ; class  RClassField;  The field for a class with dictionary. More...;  ; class  RClusterDescriptor;  Meta-d",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:2531,Modifiability,extend,extend,2531,"ne attributes for different objects. More...;  ; class  RAttrFill;  Drawing fill attributes for different objects. More...;  ; class  RAttrFont;  A font attributes, used together with text attributes. More...;  ; class  RAttrLine;  Drawing line attributes for different objects. More...;  ; class  RAttrLineEnding;  Attributes for line ending. More...;  ; class  RAttrMap;  ; class  RAttrMargins;  A margins attributes. Only relative and pixel coordinates are allowed. More...;  ; class  RAttrMarker;  A marker attributes. More...;  ; class  RAttrText;  A text attributes. More...;  ; class  RAttrValue;  Template class to access single value from drawable or other attributes. More...;  ; class  RAxisBase;  Histogram axis base class. More...;  ; class  RAxisConfig;  Objects used to configure the different axis types. More...;  ; class  RAxisDrawable;  Axis drawing. More...;  ; class  RAxisEquidistant;  Axis with equidistant bin borders. More...;  ; class  RAxisGrow;  An axis that can extend its range, keeping the number of its bins unchanged. More...;  ; class  RAxisIrregular;  An axis with non-equidistant bins (also known as ""variable binning""). More...;  ; class  RAxisLabels;  A RAxisGrow that has a label assigned to each bin and a bin width of 1. More...;  ; class  RBitsetField;  The generic field an std::bitset<N>. More...;  ; class  RCanvas;  A window's topmost RPad. More...;  ; class  RCanvasDisplayItem;  class RCanvasDisplayItem More...;  ; class  RCanvasPainter;  ; class  RCardinalityField;  An artificial field that transforms an RNTuple column that contains the offset of collections into collection sizes. More...;  ; class  RChangeAttrRequest;  ; class  RClassField;  The field for a class with dictionary. More...;  ; class  RClusterDescriptor;  Meta-data for a set of ntuple clusters. More...;  ; class  RClusterGroupDescriptor;  Clusters are bundled in cluster groups. More...;  ; class  RClusterIndex;  Addresses a column element or field item relative to a particula",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:2677,Modifiability,variab,variable,2677,"bjects. More...;  ; class  RAttrFont;  A font attributes, used together with text attributes. More...;  ; class  RAttrLine;  Drawing line attributes for different objects. More...;  ; class  RAttrLineEnding;  Attributes for line ending. More...;  ; class  RAttrMap;  ; class  RAttrMargins;  A margins attributes. Only relative and pixel coordinates are allowed. More...;  ; class  RAttrMarker;  A marker attributes. More...;  ; class  RAttrText;  A text attributes. More...;  ; class  RAttrValue;  Template class to access single value from drawable or other attributes. More...;  ; class  RAxisBase;  Histogram axis base class. More...;  ; class  RAxisConfig;  Objects used to configure the different axis types. More...;  ; class  RAxisDrawable;  Axis drawing. More...;  ; class  RAxisEquidistant;  Axis with equidistant bin borders. More...;  ; class  RAxisGrow;  An axis that can extend its range, keeping the number of its bins unchanged. More...;  ; class  RAxisIrregular;  An axis with non-equidistant bins (also known as ""variable binning""). More...;  ; class  RAxisLabels;  A RAxisGrow that has a label assigned to each bin and a bin width of 1. More...;  ; class  RBitsetField;  The generic field an std::bitset<N>. More...;  ; class  RCanvas;  A window's topmost RPad. More...;  ; class  RCanvasDisplayItem;  class RCanvasDisplayItem More...;  ; class  RCanvasPainter;  ; class  RCardinalityField;  An artificial field that transforms an RNTuple column that contains the offset of collections into collection sizes. More...;  ; class  RChangeAttrRequest;  ; class  RClassField;  The field for a class with dictionary. More...;  ; class  RClusterDescriptor;  Meta-data for a set of ntuple clusters. More...;  ; class  RClusterGroupDescriptor;  Clusters are bundled in cluster groups. More...;  ; class  RClusterIndex;  Addresses a column element or field item relative to a particular cluster, instead of a global NTupleSize_t index. More...;  ; struct  RClusterSize;  Wrap the integer in a",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:6905,Modifiability,variab,variable,6905,t;  ; class  REveCalo2D;  ; class  REveCalo3D;  ; class  REveCaloData;  ; class  REveCaloDataHist;  ; class  REveCaloDataSelector;  ; class  REveCaloDataSliceSelector;  ; class  REveCaloDataVec;  ; class  REveCaloLego;  ; class  REveCaloViz;  ; class  REveChunkManager;  ; class  REveChunkVector;  ; class  REveClient;  ; class  REveCluster;  REveCluster Reconstructed cluster (also used in VSD). More...;  ; class  REveCollectionCompound;  ; class  REveCompound;  ; class  REveCompoundProjected;  ; class  REveDataCollection;  ; class  REveDataColumn;  ; class  REveDataItem;  ; class  REveDataItemList;  ; class  REveDataProxyBuilderBase;  ; class  REveDataSimpleProxyBuilder;  ; class  REveDataSimpleProxyBuilderTemplate;  ; class  REveDataTable;  ; class  REveDigitSet;  ; class  REveElement;  ; class  REveEllipsoid;  ; class  REveEllipsoidProjected;  ; class  REveException;  REveException Exception-type thrown by Eve classes. More...;  ; class  REveFrameBox;  ; class  REveGeoManagerHolder;  REveGeoManagerHolder Exception-safe global variable holders. More...;  ; class  REveGeoPolyShape;  ; class  REveGeoShape;  ; class  REveGeoShapeExtract;  ; class  REveGeoShapeProjected;  ; class  REveHit;  REveHit Monte Carlo hit (also used in VSD). More...;  ; class  REveJetCone;  ; class  REveJetConeProjected;  ; class  REveLine;  REveLine An arbitrary polyline with fixed line and marker attributes. More...;  ; class  REveLineProjected;  ; class  REveMagField;  REveMagField Abstract interface to magnetic field. More...;  ; class  REveMagFieldConst;  REveMagFieldConst Interface to constant magnetic field. More...;  ; class  REveMagFieldDuo;  REveMagFieldDuo Interface to magnetic field with two different values depending on radius. More...;  ; class  REveManager;  ; class  REveMCRecCrossRef;  REveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD). More...;  ; class  REveMCTrack;  REveMCTrack. More...;  ; class  REvePathMarkT;  Special-point on track: More...; ,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:10766,Modifiability,inherit,inheritance,10766,"REveTableEntry;  REveTableEntry. More...;  ; class  REveTableHandle;  REveTableHandle. More...;  ; class  REveTableProxyBuilder;  ; class  REveTableViewInfo;  REveTableViewInfo. More...;  ; class  REveTrack;  REveTrack Track with given vertex, momentum and optional referece-points (path-marks) along its path. More...;  ; class  REveTrackList;  REveTrackList A list of tracks supporting change of common attributes and selection based on track parameters. More...;  ; class  REveTrackListProjected;  REveTrackListProjected Specialization of REveTrackList for holding REveTrackProjected objects. More...;  ; class  REveTrackProjected;  REveTrackProjected Projected copy of a REveTrack. More...;  ; class  REveTrackPropagator;  REveTrackPropagator Calculates path of a particle taking into account special path-marks and imposed boundaries. More...;  ; class  REveTrans;  ; class  REveUtil;  REveUtil Standard utility functions for Reve. More...;  ; class  REveVector2T;  REveVector2T A two-vector template without TObject inheritance and virtual functions. More...;  ; class  REveVector4T;  REveVector4T A four-vector template without TObject inheritance and virtual functions. More...;  ; class  REveVectorT;  REveVectorT A three-vector template without TObject inheritance and virtual functions. More...;  ; class  REveViewContext;  ; class  REveViewer;  REveViewer Reve representation of TGLViewer. More...;  ; class  REveViewerList;  REveViewerList List of Viewers providing common operations on REveViewer collections. More...;  ; class  REveVSD;  ; class  REveXZProjection;  ; class  REveYZProjection;  ; class  REveZXProjection;  ; class  REveZYProjection;  ; class  RException;  Base class for all ROOT issued exceptions. More...;  ; class  RField;  Classes with dictionaries that can be inspected by TClass. More...;  ; class  RField< bool >;  ; class  RField< char >;  ; class  RField< ClusterSize_t >;  ; class  RField< double >;  ; class  RField< float >;  ; class  RField< ItemT[N]>;  ; ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:10887,Modifiability,inherit,inheritance,10887,"Builder;  ; class  REveTableViewInfo;  REveTableViewInfo. More...;  ; class  REveTrack;  REveTrack Track with given vertex, momentum and optional referece-points (path-marks) along its path. More...;  ; class  REveTrackList;  REveTrackList A list of tracks supporting change of common attributes and selection based on track parameters. More...;  ; class  REveTrackListProjected;  REveTrackListProjected Specialization of REveTrackList for holding REveTrackProjected objects. More...;  ; class  REveTrackProjected;  REveTrackProjected Projected copy of a REveTrack. More...;  ; class  REveTrackPropagator;  REveTrackPropagator Calculates path of a particle taking into account special path-marks and imposed boundaries. More...;  ; class  REveTrans;  ; class  REveUtil;  REveUtil Standard utility functions for Reve. More...;  ; class  REveVector2T;  REveVector2T A two-vector template without TObject inheritance and virtual functions. More...;  ; class  REveVector4T;  REveVector4T A four-vector template without TObject inheritance and virtual functions. More...;  ; class  REveVectorT;  REveVectorT A three-vector template without TObject inheritance and virtual functions. More...;  ; class  REveViewContext;  ; class  REveViewer;  REveViewer Reve representation of TGLViewer. More...;  ; class  REveViewerList;  REveViewerList List of Viewers providing common operations on REveViewer collections. More...;  ; class  REveVSD;  ; class  REveXZProjection;  ; class  REveYZProjection;  ; class  REveZXProjection;  ; class  REveZYProjection;  ; class  RException;  Base class for all ROOT issued exceptions. More...;  ; class  RField;  Classes with dictionaries that can be inspected by TClass. More...;  ; class  RField< bool >;  ; class  RField< char >;  ; class  RField< ClusterSize_t >;  ; class  RField< double >;  ; class  RField< float >;  ; class  RField< ItemT[N]>;  ; class  RField< RNTupleCardinality< SizeT > >;  ; class  RField< ROOT::VecOps::RVec< ItemT > >;  ; class  RField< std::arr",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:11007,Modifiability,inherit,inheritance,11007,"x, momentum and optional referece-points (path-marks) along its path. More...;  ; class  REveTrackList;  REveTrackList A list of tracks supporting change of common attributes and selection based on track parameters. More...;  ; class  REveTrackListProjected;  REveTrackListProjected Specialization of REveTrackList for holding REveTrackProjected objects. More...;  ; class  REveTrackProjected;  REveTrackProjected Projected copy of a REveTrack. More...;  ; class  REveTrackPropagator;  REveTrackPropagator Calculates path of a particle taking into account special path-marks and imposed boundaries. More...;  ; class  REveTrans;  ; class  REveUtil;  REveUtil Standard utility functions for Reve. More...;  ; class  REveVector2T;  REveVector2T A two-vector template without TObject inheritance and virtual functions. More...;  ; class  REveVector4T;  REveVector4T A four-vector template without TObject inheritance and virtual functions. More...;  ; class  REveVectorT;  REveVectorT A three-vector template without TObject inheritance and virtual functions. More...;  ; class  REveViewContext;  ; class  REveViewer;  REveViewer Reve representation of TGLViewer. More...;  ; class  REveViewerList;  REveViewerList List of Viewers providing common operations on REveViewer collections. More...;  ; class  REveVSD;  ; class  REveXZProjection;  ; class  REveYZProjection;  ; class  REveZXProjection;  ; class  REveZYProjection;  ; class  RException;  Base class for all ROOT issued exceptions. More...;  ; class  RField;  Classes with dictionaries that can be inspected by TClass. More...;  ; class  RField< bool >;  ; class  RField< char >;  ; class  RField< ClusterSize_t >;  ; class  RField< double >;  ; class  RField< float >;  ; class  RField< ItemT[N]>;  ; class  RField< RNTupleCardinality< SizeT > >;  ; class  RField< ROOT::VecOps::RVec< ItemT > >;  ; class  RField< std::array< ItemT, N > >;  ; class  RField< std::atomic< ItemT > >;  ; class  RField< std::bitset< N > >;  ; class  RField< std:",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:15969,Modifiability,config,configuration,15969,"tual method for fill statistic. More...;  ; class  RHistStatContent;  Basic histogram statistics, keeping track of the bin content and the total number of calls to Fill(). More...;  ; class  RHistStatRuntime;  Interface implementing a pure virtual functions DoFill(), DoFillN(). More...;  ; class  RHistStatTotalSumOfSquaredWeights;  Keeps track of the histogram's total sum of squared weights. More...;  ; class  RHistStatTotalSumOfWeights;  Keeps track of the histogram's total sum of weights. More...;  ; class  RHistStatUncertainty;  Histogram statistics to keep track of the Poisson uncertainty per bin. More...;  ; class  RHistView;  A view on a histogram, selecting a range on a subset of dimensions. More...;  ; struct  RHistViewOutOfRange;  ; class  RIndirectDisplayItem;  Extract (reference) only basic attributes from drawable, but not drawable itself. More...;  ; class  RInvalidField;  Used in RFieldBase::Check() to record field creation failures. More...;  ; class  RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  ; class  RMapField;  The generic field for a std::map<KeyType, ValueType> and std::unordered_map<KeyType, ValueType> More...;  ; class  RMenuItems;  List o",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:42473,Modifiability,config,configuration,42473,"InspectorPrintFormat. strong . EnumeratorkTable ; kCSV . Definition at line 42 of file RNTupleInspector.hxx. ◆ ENTupleStructure. enum ROOT::Experimental::ENTupleStructure. The fields in the ntuple model tree can carry different structural information about the type system. ; Leaf fields contain just data, collection fields resolve to offset columns, record fields have no materialization on the primitive column layer. . EnumeratorkLeaf ; kCollection ; kRecord ; kVariant ; kReference ; kInvalid . Definition at line 38 of file RNTupleUtil.hxx. Function Documentation. ◆ Add(). template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT_TO, template< int D_, class P_ > class... STAT_FROM> . void ROOT::Experimental::Add ; (; RHist< DIMENSIONS, PRECISION, STAT_TO... > & ; to, . const RHist< DIMENSIONS, PRECISION, STAT_FROM... > & ; from . ). Add two histograms. ; This operation may currently only be performed if the two histograms have the same axis configuration, use the same precision, and if from records at least the same statistics as to (recording more stats is fine).; Adding histograms with incompatible axis binning will be reported at runtime with an std::runtime_error. Insufficient statistics in the source histogram will be detected at compile-time and result in a compiler error.; In the future, we may either adopt a more relaxed definition of histogram addition or provide a mechanism to convert from one histogram type to another. We currently favor the latter path. ; Definition at line 342 of file RHist.hxx. ◆ CanMap(). ROOT::Experimental::EAxisCompatibility ROOT::Experimental::CanMap ; (; const RAxisEquidistant & ; target, . const RAxisEquidistant & ; source . ). noexcept . Whether (and how) the source axis can be merged into the target axis. ; Definition at line 126 of file RAxis.cxx. ◆ FitPanelLog(). ROOT::Experimental::RLogChannel & ROOT::Experimental::FitPanelLog ; (; ). Log channel for FitPanel diagnostics. ; Definition at line 22 o",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:13846,Performance,perform,performed,13846,"IsCollectionProxy< T >::value >::type >;  Classes behaving as a collection of elements that can be queried via the TVirtualCollectionProxy interface The use of a collection proxy for a particular class can be enabled via: ;  ; class  RField< T, typename std::enable_if< std::is_enum_v< T > >::type >;  ; class  RField< void >;  Template specializations for concrete C++ types. More...;  ; class  RFieldBase;  A field translates read and write calls from/to underlying columns to/from tree values. More...;  ; class  RFieldDescriptor;  Meta-data stored for every field of an ntuple. More...;  ; class  RFieldZero;  The container field for an ntuple model, which itself has no physical representation. More...;  ; class  RFile;  A ROOT file. More...;  ; class  RFilePtr;  Points to an object that stores or reads objects in ROOT's binary format. More...;  ; class  RFitPanel;  ; struct  RFitPanelModel;  Data structure for the fit panel. More...;  ; class  RFitResult;  ; class  RFrame;  Holds an area where drawing on user coordinate-system can be performed. More...;  ; class  RFunction;  ; class  RHist;  Histogram class for histograms with DIMENSIONS dimensions, where each bin count is stored by a value of type PRECISION. More...;  ; class  RHist1Drawable;  ; class  RHist1StatBox;  ; class  RHist2Drawable;  ; class  RHist2StatBox;  ; class  RHist3Drawable;  ; class  RHist3StatBox;  ; class  RHist< DIMENSIONS, PRECISION >;  RHist with no STAT parameter uses RHistStatContent by default. More...;  ; class  RHistBufferedFill;  Buffers calls to Fill(). More...;  ; class  RHistConcurrentFiller;  Buffers a thread's Fill calls and submits them to the RHistConcurrentFillManager. More...;  ; class  RHistConcurrentFillManager;  Manages the synchronization of calls to FillN(). More...;  ; class  RHistDataMomentUncert;  For now do as RH1: calculate first (xw) and second (x^2w) moment. More...;  ; class  RHistDisplayItem;  ; class  RHistDrawable;  ; class  RHistDrawableBase;  ; class  RHistStatB",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:42422,Performance,perform,performed,42422,"InspectorPrintFormat. strong . EnumeratorkTable ; kCSV . Definition at line 42 of file RNTupleInspector.hxx. ◆ ENTupleStructure. enum ROOT::Experimental::ENTupleStructure. The fields in the ntuple model tree can carry different structural information about the type system. ; Leaf fields contain just data, collection fields resolve to offset columns, record fields have no materialization on the primitive column layer. . EnumeratorkLeaf ; kCollection ; kRecord ; kVariant ; kReference ; kInvalid . Definition at line 38 of file RNTupleUtil.hxx. Function Documentation. ◆ Add(). template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT_TO, template< int D_, class P_ > class... STAT_FROM> . void ROOT::Experimental::Add ; (; RHist< DIMENSIONS, PRECISION, STAT_TO... > & ; to, . const RHist< DIMENSIONS, PRECISION, STAT_FROM... > & ; from . ). Add two histograms. ; This operation may currently only be performed if the two histograms have the same axis configuration, use the same precision, and if from records at least the same statistics as to (recording more stats is fine).; Adding histograms with incompatible axis binning will be reported at runtime with an std::runtime_error. Insufficient statistics in the source histogram will be detected at compile-time and result in a compiler error.; In the future, we may either adopt a more relaxed definition of histogram addition or provide a mechanism to convert from one histogram type to another. We currently favor the latter path. ; Definition at line 342 of file RHist.hxx. ◆ CanMap(). ROOT::Experimental::EAxisCompatibility ROOT::Experimental::CanMap ; (; const RAxisEquidistant & ; target, . const RAxisEquidistant & ; source . ). noexcept . Whether (and how) the source axis can be merged into the target axis. ; Definition at line 126 of file RAxis.cxx. ◆ FitPanelLog(). ROOT::Experimental::RLogChannel & ROOT::Experimental::FitPanelLog ; (; ). Log channel for FitPanel diagnostics. ; Definition at line 22 o",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:3667,Safety,avoid,avoid,3667," (also known as ""variable binning""). More...;  ; class  RAxisLabels;  A RAxisGrow that has a label assigned to each bin and a bin width of 1. More...;  ; class  RBitsetField;  The generic field an std::bitset<N>. More...;  ; class  RCanvas;  A window's topmost RPad. More...;  ; class  RCanvasDisplayItem;  class RCanvasDisplayItem More...;  ; class  RCanvasPainter;  ; class  RCardinalityField;  An artificial field that transforms an RNTuple column that contains the offset of collections into collection sizes. More...;  ; class  RChangeAttrRequest;  ; class  RClassField;  The field for a class with dictionary. More...;  ; class  RClusterDescriptor;  Meta-data for a set of ntuple clusters. More...;  ; class  RClusterGroupDescriptor;  Clusters are bundled in cluster groups. More...;  ; class  RClusterIndex;  Addresses a column element or field item relative to a particular cluster, instead of a global NTupleSize_t index. More...;  ; struct  RClusterSize;  Wrap the integer in a struct in order to avoid template specialization clash with std::uint64_t. More...;  ; class  RCollectionField;  The collection field is only used for writing; when reading, untyped collections are projected to an std::vector. More...;  ; class  RColor;  The color class. More...;  ; class  RColumnDescriptor;  Meta-data stored for every column of an ntuple. More...;  ; class  RColumnGroupDescriptor;  Meta-data for a sets of columns; non-trivial column groups are used for sharded clusters. More...;  ; class  RColumnModel;  Holds the static meta-data of an RNTuple column. More...;  ; class  RColumnSwitch;  Holds the index and the tag of a kSwitch column. More...;  ; class  RDirectory;  Key/value store of objects. More...;  ; class  RDirectoryTypeMismatch;  Objects of this class are thrown to signal that the value known under the given name . More...;  ; class  RDirectoryUnknownKey;  Objects of this class are thrown to signal that no key with that name exists. More...;  ; class  RDisplayHistStat;  Obj",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:4717,Safety,avoid,avoid,4717,"zation clash with std::uint64_t. More...;  ; class  RCollectionField;  The collection field is only used for writing; when reading, untyped collections are projected to an std::vector. More...;  ; class  RColor;  The color class. More...;  ; class  RColumnDescriptor;  Meta-data stored for every column of an ntuple. More...;  ; class  RColumnGroupDescriptor;  Meta-data for a sets of columns; non-trivial column groups are used for sharded clusters. More...;  ; class  RColumnModel;  Holds the static meta-data of an RNTuple column. More...;  ; class  RColumnSwitch;  Holds the index and the tag of a kSwitch column. More...;  ; class  RDirectory;  Key/value store of objects. More...;  ; class  RDirectoryTypeMismatch;  Objects of this class are thrown to signal that the value known under the given name . More...;  ; class  RDirectoryUnknownKey;  Objects of this class are thrown to signal that no key with that name exists. More...;  ; class  RDisplayHistStat;  Object send to client for display of RHistStat, required to avoid sending histogram to the client. More...;  ; class  RDisplayItem;  Base class for painting data for JS. More...;  ; class  RDrawable;  Base class for drawable entities: objects that can be painted on a RPad. More...;  ; class  RDrawableDisplayItem;  Generic display item for RDrawable, just reference drawable itself. More...;  ; class  RDrawableExecRequest;  Request execution of method of referenced drawable, no reply. More...;  ; class  RDrawableMenuRequest;  Request menu items for the drawable object. More...;  ; class  RDrawableReply;  Base class for replies on RDrawableRequest. More...;  ; class  RDrawableRequest;  Base class for requests which can be submitted from the clients. More...;  ; class  REntry;  The REntry is a collection of values in an ntuple corresponding to a complete row in the data set. More...;  ; class  REnumField;  The field for an unscoped or scoped enum with dictionary. More...;  ; class  RError;  Captures diagnostics related to ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:6893,Safety,safe,safe,6893,t;  ; class  REveCalo2D;  ; class  REveCalo3D;  ; class  REveCaloData;  ; class  REveCaloDataHist;  ; class  REveCaloDataSelector;  ; class  REveCaloDataSliceSelector;  ; class  REveCaloDataVec;  ; class  REveCaloLego;  ; class  REveCaloViz;  ; class  REveChunkManager;  ; class  REveChunkVector;  ; class  REveClient;  ; class  REveCluster;  REveCluster Reconstructed cluster (also used in VSD). More...;  ; class  REveCollectionCompound;  ; class  REveCompound;  ; class  REveCompoundProjected;  ; class  REveDataCollection;  ; class  REveDataColumn;  ; class  REveDataItem;  ; class  REveDataItemList;  ; class  REveDataProxyBuilderBase;  ; class  REveDataSimpleProxyBuilder;  ; class  REveDataSimpleProxyBuilderTemplate;  ; class  REveDataTable;  ; class  REveDigitSet;  ; class  REveElement;  ; class  REveEllipsoid;  ; class  REveEllipsoidProjected;  ; class  REveException;  REveException Exception-type thrown by Eve classes. More...;  ; class  REveFrameBox;  ; class  REveGeoManagerHolder;  REveGeoManagerHolder Exception-safe global variable holders. More...;  ; class  REveGeoPolyShape;  ; class  REveGeoShape;  ; class  REveGeoShapeExtract;  ; class  REveGeoShapeProjected;  ; class  REveHit;  REveHit Monte Carlo hit (also used in VSD). More...;  ; class  REveJetCone;  ; class  REveJetConeProjected;  ; class  REveLine;  REveLine An arbitrary polyline with fixed line and marker attributes. More...;  ; class  REveLineProjected;  ; class  REveMagField;  REveMagField Abstract interface to magnetic field. More...;  ; class  REveMagFieldConst;  REveMagFieldConst Interface to constant magnetic field. More...;  ; class  REveMagFieldDuo;  REveMagFieldDuo Interface to magnetic field with two different values depending on radius. More...;  ; class  REveManager;  ; class  REveMCRecCrossRef;  REveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD). More...;  ; class  REveMCTrack;  REveMCTrack. More...;  ; class  REvePathMarkT;  Special-point on track: More...; ,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:42761,Safety,detect,detected,42761,"em. ; Leaf fields contain just data, collection fields resolve to offset columns, record fields have no materialization on the primitive column layer. . EnumeratorkLeaf ; kCollection ; kRecord ; kVariant ; kReference ; kInvalid . Definition at line 38 of file RNTupleUtil.hxx. Function Documentation. ◆ Add(). template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT_TO, template< int D_, class P_ > class... STAT_FROM> . void ROOT::Experimental::Add ; (; RHist< DIMENSIONS, PRECISION, STAT_TO... > & ; to, . const RHist< DIMENSIONS, PRECISION, STAT_FROM... > & ; from . ). Add two histograms. ; This operation may currently only be performed if the two histograms have the same axis configuration, use the same precision, and if from records at least the same statistics as to (recording more stats is fine).; Adding histograms with incompatible axis binning will be reported at runtime with an std::runtime_error. Insufficient statistics in the source histogram will be detected at compile-time and result in a compiler error.; In the future, we may either adopt a more relaxed definition of histogram addition or provide a mechanism to convert from one histogram type to another. We currently favor the latter path. ; Definition at line 342 of file RHist.hxx. ◆ CanMap(). ROOT::Experimental::EAxisCompatibility ROOT::Experimental::CanMap ; (; const RAxisEquidistant & ; target, . const RAxisEquidistant & ; source . ). noexcept . Whether (and how) the source axis can be merged into the target axis. ; Definition at line 126 of file RAxis.cxx. ◆ FitPanelLog(). ROOT::Experimental::RLogChannel & ROOT::Experimental::FitPanelLog ; (; ). Log channel for FitPanel diagnostics. ; Definition at line 22 of file RFitPanelModel.cxx. ◆ FitTo(). template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT> . RFitResult ROOT::Experimental::FitTo ; (; const RHist< DIMENSIONS, PRECISION, STAT... > & ; hist, . const RFunction< DIMENSIONS > & ; func, . st",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:2163,Security,access,access,2163," labels, title, min/max, log, reverse, ... More...;  ; class  RAttrAxisLabels;  Axis labels drawing attributes. More...;  ; class  RAttrAxisTicks;  Axis ticks attributes. More...;  ; class  RAttrAxisTitle;  Axis title and its drawing attributes. More...;  ; class  RAttrBase;  Base class for all attributes, used with RDrawable. More...;  ; class  RAttrBorder;  Drawing line attributes for different objects. More...;  ; class  RAttrFill;  Drawing fill attributes for different objects. More...;  ; class  RAttrFont;  A font attributes, used together with text attributes. More...;  ; class  RAttrLine;  Drawing line attributes for different objects. More...;  ; class  RAttrLineEnding;  Attributes for line ending. More...;  ; class  RAttrMap;  ; class  RAttrMargins;  A margins attributes. Only relative and pixel coordinates are allowed. More...;  ; class  RAttrMarker;  A marker attributes. More...;  ; class  RAttrText;  A text attributes. More...;  ; class  RAttrValue;  Template class to access single value from drawable or other attributes. More...;  ; class  RAxisBase;  Histogram axis base class. More...;  ; class  RAxisConfig;  Objects used to configure the different axis types. More...;  ; class  RAxisDrawable;  Axis drawing. More...;  ; class  RAxisEquidistant;  Axis with equidistant bin borders. More...;  ; class  RAxisGrow;  An axis that can extend its range, keeping the number of its bins unchanged. More...;  ; class  RAxisIrregular;  An axis with non-equidistant bins (also known as ""variable binning""). More...;  ; class  RAxisLabels;  A RAxisGrow that has a label assigned to each bin and a bin width of 1. More...;  ; class  RBitsetField;  The generic field an std::bitset<N>. More...;  ; class  RCanvas;  A window's topmost RPad. More...;  ; class  RCanvasDisplayItem;  class RCanvasDisplayItem More...;  ; class  RCanvasPainter;  ; class  RCardinalityField;  An artificial field that transforms an RNTuple column that contains the offset of collections into collection si",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:18920,Security,access,access,18920," for RNTupleReader::PrintInfo() and RPrintSchemaVisitor::VisitField() More...;  ; class  RNTupleGlobalRange;  Used to loop over indexes (entries or collections) between start and end. More...;  ; class  RNTupleImporter;  Converts a TTree into an RNTuple. More...;  ; class  RNTupleInspector;  Inspect on-disk and storage-related information of an RNTuple. More...;  ; struct  RNTupleLocator;  Generic information about the physical location of data. More...;  ; struct  RNTupleLocatorObject64;  RNTupleLocator payload that is common for object stores using 64bit location information. More...;  ; class  RNTupleModel;  The RNTupleModel encapulates the schema of an ntuple. More...;  ; class  RNTupleParallelWriter;  A writer to fill an RNTuple from multiple contexts. More...;  ; class  RNTupleReader;  An RNTuple that is used to read data from storage. More...;  ; class  RNTupleReadOptions;  Common user-tunable settings for reading ntuples. More...;  ; class  RNTupleView;  An RNTupleView provides read-only access to a single field of the ntuple. More...;  ; class  RNTupleView< void, UserProvidedAddress >;  ; class  RNTupleWriteOptions;  Common user-tunable settings for storing ntuples. More...;  ; class  RNTupleWriteOptionsDaos;  DAOS-specific user-tunable settings for storing ntuples. More...;  ; class  RNTupleWriter;  An RNTuple that gets filled with entries (data) and writes them to storage. More...;  ; class  RNullableField;  The field for values that may or may not be present in an entry. More...;  ; class  ROnFrameDrawable;  Base class for drawable which can be drawn on frame or on pad. More...;  ; class  RPad;  Graphic container for RDrawable-s. More...;  ; class  RPadBase;  Base class for graphic containers for RDrawable-s. More...;  ; class  RPadBaseDisplayItem;  class RPadBaseDisplayItem More...;  ; class  RPadDisplayItem;  class RPadDisplayItem More...;  ; class  RPadExtent;  An extent / size (horizontal and vertical) in a RPad. More...;  ; class  RPadLength;  A leng",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:1193,Testability,log,log,1193," Typedefs |; Enumerations |; Functions |; Variables ; ROOT::Experimental Namespace Reference. Namespaces; namespace  Detail;  ; namespace  EveGlu;  ; namespace  Hist;  ; namespace  Internal;  ; namespace  XRooFit;  xRooFit is a high-level API for RooFit. ;  . Classes; struct  HasCollectionProxyMemberType;  ; struct  HasCollectionProxyMemberType< T, typename std::enable_if< std::is_same< typename T::IsCollectionProxy, std::true_type >::value >::type >;  ; struct  IsCollectionProxy;  The point here is that we can only tell at run time if a class has an associated collection proxy. More...;  ; class  RArrayAsRVecField;  A field for fixed-size arrays that are represented as RVecs in memory. More...;  ; class  RArrayField;  The generic field for fixed size arrays, which do not need an offset column. More...;  ; class  RAtomicField;  ; class  RAttrAggregation;  Base class for attributes aggregations like lines or fill attributes. More...;  ; class  RAttrAxis;  All supported axes attributes for: line, ticks, labels, title, min/max, log, reverse, ... More...;  ; class  RAttrAxisLabels;  Axis labels drawing attributes. More...;  ; class  RAttrAxisTicks;  Axis ticks attributes. More...;  ; class  RAttrAxisTitle;  Axis title and its drawing attributes. More...;  ; class  RAttrBase;  Base class for all attributes, used with RDrawable. More...;  ; class  RAttrBorder;  Drawing line attributes for different objects. More...;  ; class  RAttrFill;  Drawing fill attributes for different objects. More...;  ; class  RAttrFont;  A font attributes, used together with text attributes. More...;  ; class  RAttrLine;  Drawing line attributes for different objects. More...;  ; class  RAttrLineEnding;  Attributes for line ending. More...;  ; class  RAttrMap;  ; class  RAttrMargins;  A margins attributes. Only relative and pixel coordinates are allowed. More...;  ; class  RAttrMarker;  A marker attributes. More...;  ; class  RAttrText;  A text attributes. More...;  ; class  RAttrValue;  Template",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:15965,Testability,log,log,15965,"tual method for fill statistic. More...;  ; class  RHistStatContent;  Basic histogram statistics, keeping track of the bin content and the total number of calls to Fill(). More...;  ; class  RHistStatRuntime;  Interface implementing a pure virtual functions DoFill(), DoFillN(). More...;  ; class  RHistStatTotalSumOfSquaredWeights;  Keeps track of the histogram's total sum of squared weights. More...;  ; class  RHistStatTotalSumOfWeights;  Keeps track of the histogram's total sum of weights. More...;  ; class  RHistStatUncertainty;  Histogram statistics to keep track of the Poisson uncertainty per bin. More...;  ; class  RHistView;  A view on a histogram, selecting a range on a subset of dimensions. More...;  ; struct  RHistViewOutOfRange;  ; class  RIndirectDisplayItem;  Extract (reference) only basic attributes from drawable, but not drawable itself. More...;  ; class  RInvalidField;  Used in RFieldBase::Check() to record field creation failures. More...;  ; class  RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  ; class  RMapField;  The generic field for a std::map<KeyType, ValueType> and std::unordered_map<KeyType, ValueType> More...;  ; class  RMenuItems;  List o",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html
https://root.cern/doc/v632/namespaceROOT_1_1Fit.html:870,Availability,error,error,870,". ROOT: ROOT::Fit Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT::Fit Namespace ReferenceMath » MathCore » Fitting and Parameter Estimation. Namespace for the fitting classes. ; More... Namespaces; namespace  FitUtil;  namespace defining utility free functions using in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the model function ;  ; namespace  HFitInterface;  . Classes; class  AreaComparer;  ; class  BasicFCN;  BasicFCN class: base class for the objective functions used in the fits It has a reference to the data and the model function used in the fit. More...;  ; class  BinData;  Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: More...;  ; class  Box;  ; class  BoxContainer;  ; class  Chi2FCN;  Chi2FCN class for binned fits using the least square methods. More...;  ; struct  DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  FcnAdapter;  ; class  FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Fit.html
https://root.cern/doc/v632/namespaceROOT_1_1Fit.html:892,Availability,error,error,892,". ROOT: ROOT::Fit Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT::Fit Namespace ReferenceMath » MathCore » Fitting and Parameter Estimation. Namespace for the fitting classes. ; More... Namespaces; namespace  FitUtil;  namespace defining utility free functions using in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the model function ;  ; namespace  HFitInterface;  . Classes; class  AreaComparer;  ; class  BasicFCN;  BasicFCN class: base class for the objective functions used in the fits It has a reference to the data and the model function used in the fit. More...;  ; class  BinData;  Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: More...;  ; class  Box;  ; class  BoxContainer;  ; class  Chi2FCN;  Chi2FCN class for binned fits using the least square methods. More...;  ; struct  DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  FcnAdapter;  ; class  FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Fit.html
https://root.cern/doc/v632/namespaceROOT_1_1Fit.html:1765,Availability,error,error,1765,"lass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: More...;  ; class  Box;  ; class  BoxContainer;  ; class  Chi2FCN;  Chi2FCN class for binned fits using the least square methods. More...;  ; struct  DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  FcnAdapter;  ; class  FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  LogLikelihoodFCN;  LogLikelihoodFCN class for likelihood fits. More...;  ; struct  ObjFuncTrait;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodFunction >;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodGradFunction >;  ; class  ParameterSettings;  Class, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters. More...;  ; class  PoissonLikelihoodFCN;  class evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case More...;  ; class  ProxyListBox;  ; class  SparseData;  SparseData class representing the data of a THNSparse histogram The data needs to be converted to a BinData class before",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Fit.html
https://root.cern/doc/v632/namespaceROOT_1_1Fit.html:4358,Availability,error,error,4358," LogLikelihoodFCN< ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction > LogLikelihoodFunction;  ; typedef LogLikelihoodFCN< ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction > LogLikelihoodGradFunction;  ; typedef PoissonLikelihoodFCN< ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction > PoissonLLFunction;  ; typedef PoissonLikelihoodFCN< ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction > PoissonLLGradFunction;  . Enumerations; enum class  EChisquareType { kNeyman = 0; , kPLikeRatio; , kPearson; };  ; enum class  EFitObjectType { kHistogram; , kGraph; };  . Functions; double Chisquare (const TGraph &h1, TF1 &f1, bool useRange);  compute the chi2 value for a graph given a function (see TGraph::Chisquare) ;  ; double Chisquare (const TH1 &h1, TF1 &f1, bool useRange, EChisquareType type);  compute the chi2 value for an histogram given a function (see TH1::Chisquare for the documentation) ;  ; void DivideBox (const vector< double > &min, const vector< double > &max, const vector< double > &bmin, const vector< double > &bmax, const unsigned int size, const unsigned int n, list< Box > &l, const double val, const double error);  ; void DoFillData (BinData &dv, const TGraph *gr, BinData::ErrorType type, TF1 *func);  ; void FillData (BinData &dv, const TGraph *gr, TF1 *func=nullptr);  fill the data vector from a TGraph. ;  ; void FillData (BinData &dv, const TGraph2D *gr, TF1 *func=nullptr);  fill the data vector from a TGraph2D. ;  ; void FillData (BinData &dv, const TH1 *hist, TF1 *func=nullptr);  fill the data vector from a TH1. ;  ; void FillData (BinData &dv, const THnBase *hist, TF1 *func=nullptr);  fill the data vector from a THnBase. ;  ; void FillData (BinData &dv, const TMultiGraph *gr, TF1 *func=nullptr);  fill the data vector from a TMultiGraph. ;  ; void FillData (SparseData &dv, const TH1 *hist, TF1 *func=nullptr);  fill the data vector from a TH1 with sparse data. ;  ; void FillData (SparseData &dv, const THn",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Fit.html
https://root.cern/doc/v632/namespaceROOT_1_1Fit.html:10505,Availability,error,error,10505,"file HFitInterface.h. ◆ EFitObjectType. enum class ROOT::Fit::EFitObjectType. strong . EnumeratorkHistogram ; kGraph . Definition at line 48 of file HFitInterface.h. Function Documentation. ◆ Chisquare() [1/2]. double ROOT::Fit::Chisquare ; (; const TGraph & ; h1, . TF1 & ; f1, . bool ; useRange . ). compute the chi2 value for a graph given a function (see TGraph::Chisquare) ; Definition at line 1031 of file HFitImpl.cxx. ◆ Chisquare() [2/2]. double ROOT::Fit::Chisquare ; (; const TH1 & ; h1, . TF1 & ; f1, . bool ; useRange, . EChisquareType ; type . ). compute the chi2 value for an histogram given a function (see TH1::Chisquare for the documentation) ; Definition at line 1027 of file HFitImpl.cxx. ◆ DivideBox(). void ROOT::Fit::DivideBox ; (; const vector< double > & ; min, . const vector< double > & ; max, . const vector< double > & ; bmin, . const vector< double > & ; bmax, . const unsigned int ; size, . const unsigned int ; n, . list< Box > & ; l, . const double ; val, . const double ; error . ). Definition at line 151 of file SparseData.cxx. ◆ DoFillData(). void ROOT::Fit::DoFillData ; (; BinData & ; dv, . const TGraph * ; gr, . BinData::ErrorType ; type, . TF1 * ; func . ). Definition at line 576 of file HFitInterface.cxx. ◆ FillData() [1/7]. void ROOT::Fit::FillData ; (; BinData & ; dv, . const TGraph * ; gr, . TF1 * ; func = nullptr . ). fill the data vector from a TGraph. ; Pass also the TF1 function which is needed in case to exclude points rejected by the function ; Definition at line 792 of file HFitInterface.cxx. ◆ FillData() [2/7]. void ROOT::Fit::FillData ; (; BinData & ; dv, . const TGraph2D * ; gr, . TF1 * ; func = nullptr . ). fill the data vector from a TGraph2D. ; Pass also the TF1 function which is needed in case of integral option and to reject points rejected by the function ; Definition at line 878 of file HFitInterface.cxx. ◆ FillData() [3/7]. void ROOT::Fit::FillData ; (; BinData & ; dv, . const TH1 * ; hist, . TF1 * ; func = nullptr . ). fi",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Fit.html
https://root.cern/doc/v632/namespaceROOT_1_1Fit.html:1422,Deployability,configurat,configuration,1422,"it method functions (chi2, likelihood, etc..) given the data and the model function ;  ; namespace  HFitInterface;  . Classes; class  AreaComparer;  ; class  BasicFCN;  BasicFCN class: base class for the objective functions used in the fits It has a reference to the data and the model function used in the fit. More...;  ; class  BinData;  Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: More...;  ; class  Box;  ; class  BoxContainer;  ; class  Chi2FCN;  Chi2FCN class for binned fits using the least square methods. More...;  ; struct  DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  FcnAdapter;  ; class  FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  LogLikelihoodFCN;  LogLikelihoodFCN class for likelihood fits. More...;  ; struct  ObjFuncTrait;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodFunction >;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodGradFunction >;  ; class  ParameterSettings;  Class, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters. More...;",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Fit.html
https://root.cern/doc/v632/namespaceROOT_1_1Fit.html:1422,Modifiability,config,configuration,1422,"it method functions (chi2, likelihood, etc..) given the data and the model function ;  ; namespace  HFitInterface;  . Classes; class  AreaComparer;  ; class  BasicFCN;  BasicFCN class: base class for the objective functions used in the fits It has a reference to the data and the model function used in the fit. More...;  ; class  BinData;  Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: More...;  ; class  Box;  ; class  BoxContainer;  ; class  Chi2FCN;  Chi2FCN class for binned fits using the least square methods. More...;  ; struct  DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  FcnAdapter;  ; class  FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  LogLikelihoodFCN;  LogLikelihoodFCN class for likelihood fits. More...;  ; struct  ObjFuncTrait;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodFunction >;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodGradFunction >;  ; class  ParameterSettings;  Class, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters. More...;",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Fit.html
https://root.cern/doc/v632/namespaceROOT_1_1Fit.html:1978,Performance,perform,performing,1978,"ifferent options: More...;  ; class  Box;  ; class  BoxContainer;  ; class  Chi2FCN;  Chi2FCN class for binned fits using the least square methods. More...;  ; struct  DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  FcnAdapter;  ; class  FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  LogLikelihoodFCN;  LogLikelihoodFCN class for likelihood fits. More...;  ; struct  ObjFuncTrait;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodFunction >;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodGradFunction >;  ; class  ParameterSettings;  Class, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters. More...;  ; class  PoissonLikelihoodFCN;  class evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case More...;  ; class  ProxyListBox;  ; class  SparseData;  SparseData class representing the data of a THNSparse histogram The data needs to be converted to a BinData class before fitting using the GetBinData functions. More...;  ; class  UnBinData;  Class describing the un-binned data sets (just x coordinates values) of any dimensions. More...;  . Typedefs; typ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Fit.html
https://root.cern/doc/v632/namespaceROOT_1_1Fit.html:2495,Testability,log,log,2495,"More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  LogLikelihoodFCN;  LogLikelihoodFCN class for likelihood fits. More...;  ; struct  ObjFuncTrait;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodFunction >;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodGradFunction >;  ; class  ParameterSettings;  Class, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters. More...;  ; class  PoissonLikelihoodFCN;  class evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case More...;  ; class  ProxyListBox;  ; class  SparseData;  SparseData class representing the data of a THNSparse histogram The data needs to be converted to a BinData class before fitting using the GetBinData functions. More...;  ; class  UnBinData;  Class describing the un-binned data sets (just x coordinates values) of any dimensions. More...;  . Typedefs; typedef Chi2FCN< ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction > Chi2Function;  ; typedef Chi2FCN< ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction > Chi2GradFunction;  ; typedef LogLikelihoodFCN< ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction > LogLikelihoodFunction;  ; typedef LogLikelihoodFCN< ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction > LogLikelihoodGradFunction;  ; typedef PoissonLikelihoodFCN< ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction > PoissonLLFunction;  ; ty",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Fit.html
https://root.cern/doc/v632/namespaceROOT_1_1Fit.html:1162,Usability,simpl,simple,1162,"unctions |; Variables ; ROOT::Fit Namespace ReferenceMath » MathCore » Fitting and Parameter Estimation. Namespace for the fitting classes. ; More... Namespaces; namespace  FitUtil;  namespace defining utility free functions using in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the model function ;  ; namespace  HFitInterface;  . Classes; class  AreaComparer;  ; class  BasicFCN;  BasicFCN class: base class for the objective functions used in the fits It has a reference to the data and the model function used in the fit. More...;  ; class  BinData;  Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: More...;  ; class  Box;  ; class  BoxContainer;  ; class  Chi2FCN;  Chi2FCN class for binned fits using the least square methods. More...;  ; struct  DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  FcnAdapter;  ; class  FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  LogLikelihoodFCN;  LogLikelihoodFCN class for likelihood fits. More...;  ; struct  ObjFuncTrait;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodFunct",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Fit.html
https://root.cern/doc/v632/namespaceROOT_1_1Fit.html:7284,Usability,simpl,simple,7284,"t::DataRange &range);  fitting function for a MultiGraph (called from TMultiGraph::Fit) ;  ; void FitOptionsMake (EFitObjectType type, const char *option, Foption_t &fitOption);  Decode list of options into fitOption. ;  ; bool GetConfidenceIntervals (const TH1 *h1, const ROOT::Fit::FitResult &r, TGraphErrors *gr, double cl=0.95);  compute confidence intervals at level cl for a fitted histogram h1 in a TGraphErrors gr ;  ; BinData::ErrorType GetDataType (const TGraph *gr, DataOptions &fitOpt);  ; BinData::ErrorType GetDataType (const TGraph2D *gr, const DataOptions &fitOpt);  ; void Init2DGaus (const ROOT::Fit::BinData &data, TF1 *f1);  compute initial parameter for 2D gaussian function given the fit data Set the sigma limits for zero top 10* initial rms values Set the initial parameter values in the TF1 ;  ; void InitExpo (const ROOT::Fit::BinData &data, TF1 *f1);  compute initial parameter for an exponential function given the fit data Set the constant and slope assuming a simple exponential going through xmin and xmax of the data set ;  ; void InitGaus (const ROOT::Fit::BinData &data, TF1 *f1);  compute initial parameter for gaussian function given the fit data Set the sigma limits for zero top 10* initial rms values Set the initial parameter values in the TF1 ;  ; bool lessRange (const std::pair< double, double > &r1, const std::pair< double, double > &r2);  ; ostream & operator<< (ostream &os, const ROOT::Fit::Box &b);  ; TFitResultPtr UnBinFit (ROOT::Fit::UnBinData *data, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption);  fit an unbin data set (from tree or from histogram buffer) using a TF1 pointer and fit options. ;  . Variables; double gDefaultErrorDef = ROOT::Math::MinimizerOptions::DefaultErrorDef();  ; const int gInitialResultStatus = -99;  . Detailed Description; Namespace for the fitting classes. ; Typedef Documentation. ◆ Chi2Function. typedef Chi2FCN<ROOT::Math::IMultiGenFunction,ROOT::Math::IParamMultiFunction> ROOT::Fit::Chi2",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Fit.html
https://root.cern/doc/v632/namespaceROOT_1_1Fit.html:16220,Usability,simpl,simple,16220,"ce.cxx. ◆ GetDataType() [1/2]. BinData::ErrorType ROOT::Fit::GetDataType ; (; const TGraph * ; gr, . DataOptions & ; fitOpt . ). Definition at line 476 of file HFitInterface.cxx. ◆ GetDataType() [2/2]. BinData::ErrorType ROOT::Fit::GetDataType ; (; const TGraph2D * ; gr, . const DataOptions & ; fitOpt . ). Definition at line 545 of file HFitInterface.cxx. ◆ Init2DGaus(). void ROOT::Fit::Init2DGaus ; (; const ROOT::Fit::BinData & ; data, . TF1 * ; f1 . ). compute initial parameter for 2D gaussian function given the fit data Set the sigma limits for zero top 10* initial rms values Set the initial parameter values in the TF1 ; Compute Initial values of parameters for a gaussian derived from function H1InitGaus defined in TH1.cxx. ; Definition at line 388 of file HFitInterface.cxx. ◆ InitExpo(). void ROOT::Fit::InitExpo ; (; const ROOT::Fit::BinData & ; data, . TF1 * ; f1 . ). compute initial parameter for an exponential function given the fit data Set the constant and slope assuming a simple exponential going through xmin and xmax of the data set ; Compute rough values of parameters for an exponential. ; Definition at line 267 of file HFitInterface.cxx. ◆ InitGaus(). void ROOT::Fit::InitGaus ; (; const ROOT::Fit::BinData & ; data, . TF1 * ; f1 . ). compute initial parameter for gaussian function given the fit data Set the sigma limits for zero top 10* initial rms values Set the initial parameter values in the TF1 ; Compute Initial values of parameters for a gaussian derived from function H1InitGaus defined in TH1.cxx. ; Definition at line 306 of file HFitInterface.cxx. ◆ lessRange(). bool ROOT::Fit::lessRange ; (; const std::pair< double, double > & ; r1, . const std::pair< double, double > & ; r2 . ). Definition at line 73 of file DataRange.cxx. ◆ operator<<(). ostream & ROOT::Fit::operator<< ; (; ostream & ; os, . const ROOT::Fit::Box & ; b . ). Definition at line 374 of file SparseData.cxx. ◆ UnBinFit(). TFitResultPtr ROOT::Fit::UnBinFit ; (; ROOT::Fit::UnBinData * ;",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Fit.html
https://root.cern/doc/v632/namespaceROOT_1_1FoundationUtils.html:666,Deployability,install,installation,666,". ROOT: ROOT::FoundationUtils Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::FoundationUtils Namespace Reference. Functions; bool CanConvertEnvValueToBool (const std::string &value);  ; bool ConvertEnvValueToBool (const std::string &value);  ; void ConvertToUnixPath (std::string &Path);  Transforms a file path by replacing its backslashes with slashes. ;  ; std::string GetCurrentDir ();  ; const char & GetEnvPathSeparator ();  ; const std::string & GetEtcDir ();  ; const std::string & GetFallbackRootSys ();  ; const std::string & GetIncludeDir ();  \ returns the include directory in the installation. ;  ; const std::string & GetPathSeparator ();  ; const std::string & GetRootSys ();  ; std::string MakePathRelative (const std::string &path, const std::string &base, bool isBuildingROOT=false);  ; static std::string str_tolower (std::string s);  . Function Documentation. ◆ CanConvertEnvValueToBool(). bool ROOT::FoundationUtils::CanConvertEnvValueToBool ; (; const std::string & ; value). Returnstrue if lowercase value is 1, on, true, 0, off, false ; Definition at line 214 of file FoundationUtils.cxx. ◆ ConvertEnvValueToBool(). bool ROOT::FoundationUtils::ConvertEnvValueToBool ; (; const std::string & ; value). Returnstrue if the lowercase string is 1, on, true; false if 0, off, false ; Definition at line 224 of file FoundationUtils.cxx. ◆ ConvertToUnixPath(). void ROOT::FoundationUtils::ConvertToUnixPath ; (; std::string & ; Path). Transforms a file path by replacing its backslashes with slashes. ; Definition at line 107 of file FoundationUtils.cxx. ◆ GetCurrentDir(). std::string ROOT::FoundationUtils::GetCurrentDir ; (; ). Returnsthe $PWD. ; Definition at line 47 of file FoundationUtils.cxx. ◆ GetEnvPathSeparator(). const char & ROOT::FoundationUtils::GetEnvPathSeparator ; (; ). inline . Returnsthe path separator for the PATH environment variable on the platform. ; Definition at line 54 of file Foun",MatchSource.WIKI,doc/v632/namespaceROOT_1_1FoundationUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1FoundationUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1FoundationUtils.html:2132,Deployability,install,installation,2132,", off, false ; Definition at line 214 of file FoundationUtils.cxx. ◆ ConvertEnvValueToBool(). bool ROOT::FoundationUtils::ConvertEnvValueToBool ; (; const std::string & ; value). Returnstrue if the lowercase string is 1, on, true; false if 0, off, false ; Definition at line 224 of file FoundationUtils.cxx. ◆ ConvertToUnixPath(). void ROOT::FoundationUtils::ConvertToUnixPath ; (; std::string & ; Path). Transforms a file path by replacing its backslashes with slashes. ; Definition at line 107 of file FoundationUtils.cxx. ◆ GetCurrentDir(). std::string ROOT::FoundationUtils::GetCurrentDir ; (; ). Returnsthe $PWD. ; Definition at line 47 of file FoundationUtils.cxx. ◆ GetEnvPathSeparator(). const char & ROOT::FoundationUtils::GetEnvPathSeparator ; (; ). inline . Returnsthe path separator for the PATH environment variable on the platform. ; Definition at line 54 of file FoundationUtils.hxx. ◆ GetEtcDir(). const std::string & ROOT::FoundationUtils::GetEtcDir ; (; ). Returnsthe sysconfig directory in the installation. ; Definition at line 195 of file FoundationUtils.cxx. ◆ GetFallbackRootSys(). const std::string & ROOT::FoundationUtils::GetFallbackRootSys ; (; ). Returnsthe fallback directory in the installation (eg. /usr/local/root/). ; Definition at line 111 of file FoundationUtils.cxx. ◆ GetIncludeDir(). const std::string & ROOT::FoundationUtils::GetIncludeDir ; (; ). \ returns the include directory in the installation. ; Definition at line 180 of file FoundationUtils.cxx. ◆ GetPathSeparator(). const std::string & ROOT::FoundationUtils::GetPathSeparator ; (; ). inline . Returnsthe path separator slash or backslash depending on the platform. ; Definition at line 43 of file FoundationUtils.hxx. ◆ GetRootSys(). const std::string & ROOT::FoundationUtils::GetRootSys ; (; ). Returnsthe rootsys directory in the installation. ; Definition at line 158 of file FoundationUtils.cxx. ◆ MakePathRelative(). std::string ROOT::FoundationUtils::MakePathRelative ; (; const std::string & ;",MatchSource.WIKI,doc/v632/namespaceROOT_1_1FoundationUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1FoundationUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1FoundationUtils.html:2331,Deployability,install,installation,2331,"ercase string is 1, on, true; false if 0, off, false ; Definition at line 224 of file FoundationUtils.cxx. ◆ ConvertToUnixPath(). void ROOT::FoundationUtils::ConvertToUnixPath ; (; std::string & ; Path). Transforms a file path by replacing its backslashes with slashes. ; Definition at line 107 of file FoundationUtils.cxx. ◆ GetCurrentDir(). std::string ROOT::FoundationUtils::GetCurrentDir ; (; ). Returnsthe $PWD. ; Definition at line 47 of file FoundationUtils.cxx. ◆ GetEnvPathSeparator(). const char & ROOT::FoundationUtils::GetEnvPathSeparator ; (; ). inline . Returnsthe path separator for the PATH environment variable on the platform. ; Definition at line 54 of file FoundationUtils.hxx. ◆ GetEtcDir(). const std::string & ROOT::FoundationUtils::GetEtcDir ; (; ). Returnsthe sysconfig directory in the installation. ; Definition at line 195 of file FoundationUtils.cxx. ◆ GetFallbackRootSys(). const std::string & ROOT::FoundationUtils::GetFallbackRootSys ; (; ). Returnsthe fallback directory in the installation (eg. /usr/local/root/). ; Definition at line 111 of file FoundationUtils.cxx. ◆ GetIncludeDir(). const std::string & ROOT::FoundationUtils::GetIncludeDir ; (; ). \ returns the include directory in the installation. ; Definition at line 180 of file FoundationUtils.cxx. ◆ GetPathSeparator(). const std::string & ROOT::FoundationUtils::GetPathSeparator ; (; ). inline . Returnsthe path separator slash or backslash depending on the platform. ; Definition at line 43 of file FoundationUtils.hxx. ◆ GetRootSys(). const std::string & ROOT::FoundationUtils::GetRootSys ; (; ). Returnsthe rootsys directory in the installation. ; Definition at line 158 of file FoundationUtils.cxx. ◆ MakePathRelative(). std::string ROOT::FoundationUtils::MakePathRelative ; (; const std::string & ; path, . const std::string & ; base, . bool ; isBuildingROOT = false . ). Returnsthe relative path of path with respect to base. For instance, for path being ""/a/b/c/d"" and base ""/a/b"", returns ""c/d"".; ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1FoundationUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1FoundationUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1FoundationUtils.html:2545,Deployability,install,installation,2545,"rms a file path by replacing its backslashes with slashes. ; Definition at line 107 of file FoundationUtils.cxx. ◆ GetCurrentDir(). std::string ROOT::FoundationUtils::GetCurrentDir ; (; ). Returnsthe $PWD. ; Definition at line 47 of file FoundationUtils.cxx. ◆ GetEnvPathSeparator(). const char & ROOT::FoundationUtils::GetEnvPathSeparator ; (; ). inline . Returnsthe path separator for the PATH environment variable on the platform. ; Definition at line 54 of file FoundationUtils.hxx. ◆ GetEtcDir(). const std::string & ROOT::FoundationUtils::GetEtcDir ; (; ). Returnsthe sysconfig directory in the installation. ; Definition at line 195 of file FoundationUtils.cxx. ◆ GetFallbackRootSys(). const std::string & ROOT::FoundationUtils::GetFallbackRootSys ; (; ). Returnsthe fallback directory in the installation (eg. /usr/local/root/). ; Definition at line 111 of file FoundationUtils.cxx. ◆ GetIncludeDir(). const std::string & ROOT::FoundationUtils::GetIncludeDir ; (; ). \ returns the include directory in the installation. ; Definition at line 180 of file FoundationUtils.cxx. ◆ GetPathSeparator(). const std::string & ROOT::FoundationUtils::GetPathSeparator ; (; ). inline . Returnsthe path separator slash or backslash depending on the platform. ; Definition at line 43 of file FoundationUtils.hxx. ◆ GetRootSys(). const std::string & ROOT::FoundationUtils::GetRootSys ; (; ). Returnsthe rootsys directory in the installation. ; Definition at line 158 of file FoundationUtils.cxx. ◆ MakePathRelative(). std::string ROOT::FoundationUtils::MakePathRelative ; (; const std::string & ; path, . const std::string & ; base, . bool ; isBuildingROOT = false . ). Returnsthe relative path of path with respect to base. For instance, for path being ""/a/b/c/d"" and base ""/a/b"", returns ""c/d"".; Parameters. path- the input path; base- the base path to be removed from path.; isBuildingROOT- if true, it converts module directories such as core/base/inc/ to include/ . Definition at line 82 of file Foundati",MatchSource.WIKI,doc/v632/namespaceROOT_1_1FoundationUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1FoundationUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1FoundationUtils.html:2951,Deployability,install,installation,2951,"r & ROOT::FoundationUtils::GetEnvPathSeparator ; (; ). inline . Returnsthe path separator for the PATH environment variable on the platform. ; Definition at line 54 of file FoundationUtils.hxx. ◆ GetEtcDir(). const std::string & ROOT::FoundationUtils::GetEtcDir ; (; ). Returnsthe sysconfig directory in the installation. ; Definition at line 195 of file FoundationUtils.cxx. ◆ GetFallbackRootSys(). const std::string & ROOT::FoundationUtils::GetFallbackRootSys ; (; ). Returnsthe fallback directory in the installation (eg. /usr/local/root/). ; Definition at line 111 of file FoundationUtils.cxx. ◆ GetIncludeDir(). const std::string & ROOT::FoundationUtils::GetIncludeDir ; (; ). \ returns the include directory in the installation. ; Definition at line 180 of file FoundationUtils.cxx. ◆ GetPathSeparator(). const std::string & ROOT::FoundationUtils::GetPathSeparator ; (; ). inline . Returnsthe path separator slash or backslash depending on the platform. ; Definition at line 43 of file FoundationUtils.hxx. ◆ GetRootSys(). const std::string & ROOT::FoundationUtils::GetRootSys ; (; ). Returnsthe rootsys directory in the installation. ; Definition at line 158 of file FoundationUtils.cxx. ◆ MakePathRelative(). std::string ROOT::FoundationUtils::MakePathRelative ; (; const std::string & ; path, . const std::string & ; base, . bool ; isBuildingROOT = false . ). Returnsthe relative path of path with respect to base. For instance, for path being ""/a/b/c/d"" and base ""/a/b"", returns ""c/d"".; Parameters. path- the input path; base- the base path to be removed from path.; isBuildingROOT- if true, it converts module directories such as core/base/inc/ to include/ . Definition at line 82 of file FoundationUtils.cxx. ◆ str_tolower(). static std::string ROOT::FoundationUtils::str_tolower ; (; std::string ; s). static . Definition at line 208 of file FoundationUtils.cxx. ROOTFoundationUtils. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1FoundationUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1FoundationUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1FoundationUtils.html:2757,Integrability,depend,depending,2757,"on at line 47 of file FoundationUtils.cxx. ◆ GetEnvPathSeparator(). const char & ROOT::FoundationUtils::GetEnvPathSeparator ; (; ). inline . Returnsthe path separator for the PATH environment variable on the platform. ; Definition at line 54 of file FoundationUtils.hxx. ◆ GetEtcDir(). const std::string & ROOT::FoundationUtils::GetEtcDir ; (; ). Returnsthe sysconfig directory in the installation. ; Definition at line 195 of file FoundationUtils.cxx. ◆ GetFallbackRootSys(). const std::string & ROOT::FoundationUtils::GetFallbackRootSys ; (; ). Returnsthe fallback directory in the installation (eg. /usr/local/root/). ; Definition at line 111 of file FoundationUtils.cxx. ◆ GetIncludeDir(). const std::string & ROOT::FoundationUtils::GetIncludeDir ; (; ). \ returns the include directory in the installation. ; Definition at line 180 of file FoundationUtils.cxx. ◆ GetPathSeparator(). const std::string & ROOT::FoundationUtils::GetPathSeparator ; (; ). inline . Returnsthe path separator slash or backslash depending on the platform. ; Definition at line 43 of file FoundationUtils.hxx. ◆ GetRootSys(). const std::string & ROOT::FoundationUtils::GetRootSys ; (; ). Returnsthe rootsys directory in the installation. ; Definition at line 158 of file FoundationUtils.cxx. ◆ MakePathRelative(). std::string ROOT::FoundationUtils::MakePathRelative ; (; const std::string & ; path, . const std::string & ; base, . bool ; isBuildingROOT = false . ). Returnsthe relative path of path with respect to base. For instance, for path being ""/a/b/c/d"" and base ""/a/b"", returns ""c/d"".; Parameters. path- the input path; base- the base path to be removed from path.; isBuildingROOT- if true, it converts module directories such as core/base/inc/ to include/ . Definition at line 82 of file FoundationUtils.cxx. ◆ str_tolower(). static std::string ROOT::FoundationUtils::str_tolower ; (; std::string ; s). static . Definition at line 208 of file FoundationUtils.cxx. ROOTFoundationUtils. ROOT v6-32 - Reference Gui",MatchSource.WIKI,doc/v632/namespaceROOT_1_1FoundationUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1FoundationUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1FoundationUtils.html:1939,Modifiability,variab,variable,1939,"  . Function Documentation. ◆ CanConvertEnvValueToBool(). bool ROOT::FoundationUtils::CanConvertEnvValueToBool ; (; const std::string & ; value). Returnstrue if lowercase value is 1, on, true, 0, off, false ; Definition at line 214 of file FoundationUtils.cxx. ◆ ConvertEnvValueToBool(). bool ROOT::FoundationUtils::ConvertEnvValueToBool ; (; const std::string & ; value). Returnstrue if the lowercase string is 1, on, true; false if 0, off, false ; Definition at line 224 of file FoundationUtils.cxx. ◆ ConvertToUnixPath(). void ROOT::FoundationUtils::ConvertToUnixPath ; (; std::string & ; Path). Transforms a file path by replacing its backslashes with slashes. ; Definition at line 107 of file FoundationUtils.cxx. ◆ GetCurrentDir(). std::string ROOT::FoundationUtils::GetCurrentDir ; (; ). Returnsthe $PWD. ; Definition at line 47 of file FoundationUtils.cxx. ◆ GetEnvPathSeparator(). const char & ROOT::FoundationUtils::GetEnvPathSeparator ; (; ). inline . Returnsthe path separator for the PATH environment variable on the platform. ; Definition at line 54 of file FoundationUtils.hxx. ◆ GetEtcDir(). const std::string & ROOT::FoundationUtils::GetEtcDir ; (; ). Returnsthe sysconfig directory in the installation. ; Definition at line 195 of file FoundationUtils.cxx. ◆ GetFallbackRootSys(). const std::string & ROOT::FoundationUtils::GetFallbackRootSys ; (; ). Returnsthe fallback directory in the installation (eg. /usr/local/root/). ; Definition at line 111 of file FoundationUtils.cxx. ◆ GetIncludeDir(). const std::string & ROOT::FoundationUtils::GetIncludeDir ; (; ). \ returns the include directory in the installation. ; Definition at line 180 of file FoundationUtils.cxx. ◆ GetPathSeparator(). const std::string & ROOT::FoundationUtils::GetPathSeparator ; (; ). inline . Returnsthe path separator slash or backslash depending on the platform. ; Definition at line 43 of file FoundationUtils.hxx. ◆ GetRootSys(). const std::string & ROOT::FoundationUtils::GetRootSys ; (; ). Returnsthe ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1FoundationUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1FoundationUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:6602,Availability,error,error,6602,". More...;  ; class  TStdBitsetHelper;  ; class  TStlArrayProxy;  Template of the Concrete Implementation of the branch proxy around an stl container of array of T. More...;  ; class  TStlImpProxy;  Template of the Concrete Implementation of the branch proxy around an stl container of T. More...;  ; class  TStlObjProxy;  ; class  TStlProxy;  Base class for the proxy around STL containers. More...;  ; class  TStlSimpleProxy;  ; class  TTreeGeneratorBase;  Base class for code generators like TTreeProxyGenerator and TTreeReaderGenerator. More...;  ; class  TTreeProxyGenerator;  ; class  TTreeReaderArrayBase;  Base class of TTreeReaderArray. More...;  ; class  TTreeReaderDescriptor;  ; class  TTreeReaderGenerator;  ; class  TTreeReaderValueBase;  Base class of TTreeReaderValue. More...;  ; class  TTreeView;  ; class  TVirtualCollectionReader;  ; class  TypedIter;  ; struct  UniqueLockRecurseCount;  ; struct  Update;  . Typedefs; using ErrorSystemMsgHandlerFunc_t = std::function< const char *()>;  Retrieves the error string associated with the last system error. ;  ; using FreeIfTMapFile_t = bool(void *);  ; using GetMapFileMapllocDesc_t = void *(void *);  ; typedef TROOT *(* GetROOTFun_t) ();  ; typedef std::map< std::string, std::string > MembersMap_t;  ; using RUidColl = std::vector< Int_t >;  ; typedef TArrayProxy< TArrayType< bool > > TArrayBoolProxy;  ; typedef TArrayProxy< TArrayType< Double32_t > > TArrayDouble32Proxy;  ; typedef TArrayProxy< TArrayType< Double_t > > TArrayDoubleProxy;  ; typedef TArrayProxy< TArrayType< Float16_t > > TArrayFloat16Proxy;  ; typedef TArrayProxy< TArrayType< Float_t > > TArrayFloatProxy;  ; typedef TArrayProxy< TArrayType< Int_t > > TArrayIntProxy;  ; typedef TArrayProxy< TArrayType< Long64_t > > TArrayLong64Proxy;  ; typedef TArrayProxy< TArrayType< Long_t > > TArrayLongProxy;  ; typedef TArrayProxy< TArrayType< UShort_t > > TArrayShortProxy;  ; typedef TArrayProxy< TArrayType< UChar_t > > TArrayUCharProxy;  ; typedef TArrayProxy< ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:6647,Availability,error,error,6647,". More...;  ; class  TStdBitsetHelper;  ; class  TStlArrayProxy;  Template of the Concrete Implementation of the branch proxy around an stl container of array of T. More...;  ; class  TStlImpProxy;  Template of the Concrete Implementation of the branch proxy around an stl container of T. More...;  ; class  TStlObjProxy;  ; class  TStlProxy;  Base class for the proxy around STL containers. More...;  ; class  TStlSimpleProxy;  ; class  TTreeGeneratorBase;  Base class for code generators like TTreeProxyGenerator and TTreeReaderGenerator. More...;  ; class  TTreeProxyGenerator;  ; class  TTreeReaderArrayBase;  Base class of TTreeReaderArray. More...;  ; class  TTreeReaderDescriptor;  ; class  TTreeReaderGenerator;  ; class  TTreeReaderValueBase;  Base class of TTreeReaderValue. More...;  ; class  TTreeView;  ; class  TVirtualCollectionReader;  ; class  TypedIter;  ; struct  UniqueLockRecurseCount;  ; struct  Update;  . Typedefs; using ErrorSystemMsgHandlerFunc_t = std::function< const char *()>;  Retrieves the error string associated with the last system error. ;  ; using FreeIfTMapFile_t = bool(void *);  ; using GetMapFileMapllocDesc_t = void *(void *);  ; typedef TROOT *(* GetROOTFun_t) ();  ; typedef std::map< std::string, std::string > MembersMap_t;  ; using RUidColl = std::vector< Int_t >;  ; typedef TArrayProxy< TArrayType< bool > > TArrayBoolProxy;  ; typedef TArrayProxy< TArrayType< Double32_t > > TArrayDouble32Proxy;  ; typedef TArrayProxy< TArrayType< Double_t > > TArrayDoubleProxy;  ; typedef TArrayProxy< TArrayType< Float16_t > > TArrayFloat16Proxy;  ; typedef TArrayProxy< TArrayType< Float_t > > TArrayFloatProxy;  ; typedef TArrayProxy< TArrayType< Int_t > > TArrayIntProxy;  ; typedef TArrayProxy< TArrayType< Long64_t > > TArrayLong64Proxy;  ; typedef TArrayProxy< TArrayType< Long_t > > TArrayLongProxy;  ; typedef TArrayProxy< TArrayType< UShort_t > > TArrayShortProxy;  ; typedef TArrayProxy< TArrayType< UChar_t > > TArrayUCharProxy;  ; typedef TArrayProxy< ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:15360,Availability,avail,available,15360,"ltype(opPtr);  Internal class used by TF1 to get the right operator() signature from a Functor with several ones. ;  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<typename T > ; constexpr auto hasBeginEnd (int) -> decltype(std::begin(std::declval< T >()), std::end(std::declval< T >()), true);  ; Bool_t HasConsistentHashMember (const char *clName);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; Bool_t HasConsistentHashMember (TClass &clRef);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; static Bool_t & IsImplicitMTEnabledImpl ();  Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ;  ; Bool_t IsParBranchProcessingEnabled ();  Returns true if parallel branch processing is enabled. ;  ; int LogicalCPUBandwidthControl ();  Returns the available number of logical cores. ;  ; void MinimalErrorHandler (Int_t level, Bool_t abort_bool, const char *location, const char *msg);  A very simple error handler that is usually replaced by the TROOT default error handler. ;  ; void NotifyDirected (Detail::TBranchProxy *x);  ; std::ostream & operator<< (std::ostream &os, const RConcurrentHashColl::HashValue &h);  ; bool operator== (const RConcurrentHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, TClass *cl);  Add the ""pragma C++ clas",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:15513,Availability,error,error,15513," typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<typename T > ; constexpr auto hasBeginEnd (int) -> decltype(std::begin(std::declval< T >()), std::end(std::declval< T >()), true);  ; Bool_t HasConsistentHashMember (const char *clName);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; Bool_t HasConsistentHashMember (TClass &clRef);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; static Bool_t & IsImplicitMTEnabledImpl ();  Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ;  ; Bool_t IsParBranchProcessingEnabled ();  Returns true if parallel branch processing is enabled. ;  ; int LogicalCPUBandwidthControl ();  Returns the available number of logical cores. ;  ; void MinimalErrorHandler (Int_t level, Bool_t abort_bool, const char *location, const char *msg);  A very simple error handler that is usually replaced by the TROOT default error handler. ;  ; void NotifyDirected (Detail::TBranchProxy *x);  ; std::ostream & operator<< (std::ostream &os, const RConcurrentHashColl::HashValue &h);  ; bool operator== (const RConcurrentHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, TClass *cl);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; void ReleaseDefaultErrorHandler ();  Destructs res",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:15573,Availability,error,error,15573," typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<typename T > ; constexpr auto hasBeginEnd (int) -> decltype(std::begin(std::declval< T >()), std::end(std::declval< T >()), true);  ; Bool_t HasConsistentHashMember (const char *clName);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; Bool_t HasConsistentHashMember (TClass &clRef);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; static Bool_t & IsImplicitMTEnabledImpl ();  Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ;  ; Bool_t IsParBranchProcessingEnabled ();  Returns true if parallel branch processing is enabled. ;  ; int LogicalCPUBandwidthControl ();  Returns the available number of logical cores. ;  ; void MinimalErrorHandler (Int_t level, Bool_t abort_bool, const char *location, const char *msg);  A very simple error handler that is usually replaced by the TROOT default error handler. ;  ; void NotifyDirected (Detail::TBranchProxy *x);  ; std::ostream & operator<< (std::ostream &os, const RConcurrentHashColl::HashValue &h);  ; bool operator== (const RConcurrentHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, TClass *cl);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; void ReleaseDefaultErrorHandler ();  Destructs res",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:16534,Availability,error,error,16534,"*msg);  A very simple error handler that is usually replaced by the TROOT default error handler. ;  ; void NotifyDirected (Detail::TBranchProxy *x);  ; std::ostream & operator<< (std::ostream &os, const RConcurrentHashColl::HashValue &h);  ; bool operator== (const RConcurrentHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, TClass *cl);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; void ReleaseDefaultErrorHandler ();  Destructs resources that are taken by using the default error handler. ;  ; Bool_t RequiresCleanup (TObject &obj);  ; void ResetReadEntry (TFriendProxy *fp);  Helper function to call SetReadEntry on all TFriendProxy. ;  ; ErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler (ErrorSystemMsgHandlerFunc_t h);  Returns the previous system error message handler. ;  ; void SetRequireCleanup (TObject &obj);  ; void Sha256 (const unsigned char *data, int len, ULong64_t *fDigest);  . Variables; R__EXTERN FreeIfTMapFile_t * gFreeIfTMapFile = nullptr;  ; R__EXTERN GetMapFileMapllocDesc_t * gGetMapFileMallocDesc = nullptr;  ; static GetROOTFun_t gGetROOT = &GetROOT1;  ; R__EXTERN void * gMmallocDesc = nullptr;  ; R__EXTERN TROOT * gROOTLocal = ROOT::GetROOT();  . Typedef Documentation. ◆ ErrorSystemMsgHandlerFunc_t. using ROOT::Internal::ErrorSystemMsgHandlerFunc_t = typedef std::function<const char *()>. Retrieves the error string associated with the last system error. ; Definition at line 59 of file TError.h.",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:16815,Availability,error,error,16815,"ntHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, TClass *cl);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; void ReleaseDefaultErrorHandler ();  Destructs resources that are taken by using the default error handler. ;  ; Bool_t RequiresCleanup (TObject &obj);  ; void ResetReadEntry (TFriendProxy *fp);  Helper function to call SetReadEntry on all TFriendProxy. ;  ; ErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler (ErrorSystemMsgHandlerFunc_t h);  Returns the previous system error message handler. ;  ; void SetRequireCleanup (TObject &obj);  ; void Sha256 (const unsigned char *data, int len, ULong64_t *fDigest);  . Variables; R__EXTERN FreeIfTMapFile_t * gFreeIfTMapFile = nullptr;  ; R__EXTERN GetMapFileMapllocDesc_t * gGetMapFileMallocDesc = nullptr;  ; static GetROOTFun_t gGetROOT = &GetROOT1;  ; R__EXTERN void * gMmallocDesc = nullptr;  ; R__EXTERN TROOT * gROOTLocal = ROOT::GetROOT();  . Typedef Documentation. ◆ ErrorSystemMsgHandlerFunc_t. using ROOT::Internal::ErrorSystemMsgHandlerFunc_t = typedef std::function<const char *()>. Retrieves the error string associated with the last system error. ; Definition at line 59 of file TError.h. ◆ FreeIfTMapFile_t. using ROOT::Internal::FreeIfTMapFile_t = typedef bool(void*). Definition at line 139 of file TStorage.h. ◆ GetMapFileMapllocDesc_t. using ROOT::Internal::GetMapFileMapllocDesc_t = typedef void *(void*). Definition at line 140 of file TStorage.h. ◆ GetRO",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:17399,Availability,error,error,17399," to not be needed. ;  ; void ReleaseDefaultErrorHandler ();  Destructs resources that are taken by using the default error handler. ;  ; Bool_t RequiresCleanup (TObject &obj);  ; void ResetReadEntry (TFriendProxy *fp);  Helper function to call SetReadEntry on all TFriendProxy. ;  ; ErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler (ErrorSystemMsgHandlerFunc_t h);  Returns the previous system error message handler. ;  ; void SetRequireCleanup (TObject &obj);  ; void Sha256 (const unsigned char *data, int len, ULong64_t *fDigest);  . Variables; R__EXTERN FreeIfTMapFile_t * gFreeIfTMapFile = nullptr;  ; R__EXTERN GetMapFileMapllocDesc_t * gGetMapFileMallocDesc = nullptr;  ; static GetROOTFun_t gGetROOT = &GetROOT1;  ; R__EXTERN void * gMmallocDesc = nullptr;  ; R__EXTERN TROOT * gROOTLocal = ROOT::GetROOT();  . Typedef Documentation. ◆ ErrorSystemMsgHandlerFunc_t. using ROOT::Internal::ErrorSystemMsgHandlerFunc_t = typedef std::function<const char *()>. Retrieves the error string associated with the last system error. ; Definition at line 59 of file TError.h. ◆ FreeIfTMapFile_t. using ROOT::Internal::FreeIfTMapFile_t = typedef bool(void*). Definition at line 139 of file TStorage.h. ◆ GetMapFileMapllocDesc_t. using ROOT::Internal::GetMapFileMapllocDesc_t = typedef void *(void*). Definition at line 140 of file TStorage.h. ◆ GetROOTFun_t. typedef TROOT *(* ROOT::Internal::GetROOTFun_t) (). Definition at line 397 of file TROOT.cxx. ◆ MembersMap_t. typedef std::map<std::string, std::string> ROOT::Internal::MembersMap_t. Definition at line 20 of file TSchemaType.h. ◆ RUidColl. using ROOT::Internal::RUidColl = typedef std::vector<Int_t>. Definition at line 25 of file RConcurrentHashColl.hxx. ◆ TArrayBoolProxy. typedef TArrayProxy<TArrayType<bool> > ROOT::Internal::TArrayBoolProxy. Definition at line 905 of file TBranchProxy.h. ◆ TArrayDouble32Proxy. typedef TArrayProxy<TArrayType<Double32_t> > ROOT::Internal::TArrayDouble32Proxy. Definition at line 892 of file TBranchProxy",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:17444,Availability,error,error,17444," to not be needed. ;  ; void ReleaseDefaultErrorHandler ();  Destructs resources that are taken by using the default error handler. ;  ; Bool_t RequiresCleanup (TObject &obj);  ; void ResetReadEntry (TFriendProxy *fp);  Helper function to call SetReadEntry on all TFriendProxy. ;  ; ErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler (ErrorSystemMsgHandlerFunc_t h);  Returns the previous system error message handler. ;  ; void SetRequireCleanup (TObject &obj);  ; void Sha256 (const unsigned char *data, int len, ULong64_t *fDigest);  . Variables; R__EXTERN FreeIfTMapFile_t * gFreeIfTMapFile = nullptr;  ; R__EXTERN GetMapFileMapllocDesc_t * gGetMapFileMallocDesc = nullptr;  ; static GetROOTFun_t gGetROOT = &GetROOT1;  ; R__EXTERN void * gMmallocDesc = nullptr;  ; R__EXTERN TROOT * gROOTLocal = ROOT::GetROOT();  . Typedef Documentation. ◆ ErrorSystemMsgHandlerFunc_t. using ROOT::Internal::ErrorSystemMsgHandlerFunc_t = typedef std::function<const char *()>. Retrieves the error string associated with the last system error. ; Definition at line 59 of file TError.h. ◆ FreeIfTMapFile_t. using ROOT::Internal::FreeIfTMapFile_t = typedef bool(void*). Definition at line 139 of file TStorage.h. ◆ GetMapFileMapllocDesc_t. using ROOT::Internal::GetMapFileMapllocDesc_t = typedef void *(void*). Definition at line 140 of file TStorage.h. ◆ GetROOTFun_t. typedef TROOT *(* ROOT::Internal::GetROOTFun_t) (). Definition at line 397 of file TROOT.cxx. ◆ MembersMap_t. typedef std::map<std::string, std::string> ROOT::Internal::MembersMap_t. Definition at line 20 of file TSchemaType.h. ◆ RUidColl. using ROOT::Internal::RUidColl = typedef std::vector<Int_t>. Definition at line 25 of file RConcurrentHashColl.hxx. ◆ TArrayBoolProxy. typedef TArrayProxy<TArrayType<bool> > ROOT::Internal::TArrayBoolProxy. Definition at line 905 of file TBranchProxy.h. ◆ TArrayDouble32Proxy. typedef TArrayProxy<TArrayType<Double32_t> > ROOT::Internal::TArrayDouble32Proxy. Definition at line 892 of file TBranchProxy",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:37188,Availability,avail,available,37188,"on at line 7345 of file TClass.cxx. ◆ HasConsistentHashMember() [2/2]. Bool_t ROOT::Internal::HasConsistentHashMember ; (; TClass & ; clRef). Return true is the Hash/RecursiveRemove setup is consistent, i.e. ; when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. ; Definition at line 7371 of file TClass.cxx. ◆ IsImplicitMTEnabledImpl(). static Bool_t & ROOT::Internal::IsImplicitMTEnabledImpl ; (; ). static . Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int ROOT::Internal::LogicalCPUBandwidthControl ; (; ). Returns the available number of logical cores. . Checks if there is CFS bandwidth control in place (linux, via cgroups, assuming standard paths); Otherwise, returns the number of logical cores provided by std::thread::hardware_concurrency() . Definition at line 50 of file RTaskArena.cxx. ◆ MinimalErrorHandler(). void ROOT::Internal::MinimalErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). A very simple error handler that is usually replaced by the TROOT default error handler. ; The minimal error handler is not serialized across threads, so that output of multi-threaded programs can get scrambled Noteabort() is only called if abort_bool is true and level >= gErrorIgnoreLevel ; Definition at line 67 of file TError.cxx. ◆ NotifyDirected(). void ROOT::Internal::NotifyDirected ; (; Detail::TBranchProxy * ; x). Definition at line 36 of file TBranchProxyDirector.cxx. ◆ operator<<(). std::ostream & ROOT::Internal::operator<< ; (; std::ostream & ; os, . const",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:37641,Availability,error,error,37641,"x. ◆ IsImplicitMTEnabledImpl(). static Bool_t & ROOT::Internal::IsImplicitMTEnabledImpl ; (; ). static . Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int ROOT::Internal::LogicalCPUBandwidthControl ; (; ). Returns the available number of logical cores. . Checks if there is CFS bandwidth control in place (linux, via cgroups, assuming standard paths); Otherwise, returns the number of logical cores provided by std::thread::hardware_concurrency() . Definition at line 50 of file RTaskArena.cxx. ◆ MinimalErrorHandler(). void ROOT::Internal::MinimalErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). A very simple error handler that is usually replaced by the TROOT default error handler. ; The minimal error handler is not serialized across threads, so that output of multi-threaded programs can get scrambled Noteabort() is only called if abort_bool is true and level >= gErrorIgnoreLevel ; Definition at line 67 of file TError.cxx. ◆ NotifyDirected(). void ROOT::Internal::NotifyDirected ; (; Detail::TBranchProxy * ; x). Definition at line 36 of file TBranchProxyDirector.cxx. ◆ operator<<(). std::ostream & ROOT::Internal::operator<< ; (; std::ostream & ; os, . const RConcurrentHashColl::HashValue & ; h . ). Definition at line 24 of file RConcurrentHashColl.cxx. ◆ operator==(). bool ROOT::Internal::operator== ; (; const RConcurrentHashColl::HashValue & ; lhs, . const RConcurrentHashColl::HashValue & ; rhs . ). inline . Definition at line 69 of file RConcurrentHashColl.hxx. ◆ ParallelReduceHelper(). template<typename T > . static T ROOT::Internal::ParallelReduceHelper ; (; const std::vector< T > & ; objs, . const std::function< T(",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:37701,Availability,error,error,37701,"x. ◆ IsImplicitMTEnabledImpl(). static Bool_t & ROOT::Internal::IsImplicitMTEnabledImpl ; (; ). static . Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int ROOT::Internal::LogicalCPUBandwidthControl ; (; ). Returns the available number of logical cores. . Checks if there is CFS bandwidth control in place (linux, via cgroups, assuming standard paths); Otherwise, returns the number of logical cores provided by std::thread::hardware_concurrency() . Definition at line 50 of file RTaskArena.cxx. ◆ MinimalErrorHandler(). void ROOT::Internal::MinimalErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). A very simple error handler that is usually replaced by the TROOT default error handler. ; The minimal error handler is not serialized across threads, so that output of multi-threaded programs can get scrambled Noteabort() is only called if abort_bool is true and level >= gErrorIgnoreLevel ; Definition at line 67 of file TError.cxx. ◆ NotifyDirected(). void ROOT::Internal::NotifyDirected ; (; Detail::TBranchProxy * ; x). Definition at line 36 of file TBranchProxyDirector.cxx. ◆ operator<<(). std::ostream & ROOT::Internal::operator<< ; (; std::ostream & ; os, . const RConcurrentHashColl::HashValue & ; h . ). Definition at line 24 of file RConcurrentHashColl.cxx. ◆ operator==(). bool ROOT::Internal::operator== ; (; const RConcurrentHashColl::HashValue & ; lhs, . const RConcurrentHashColl::HashValue & ; rhs . ). inline . Definition at line 69 of file RConcurrentHashColl.hxx. ◆ ParallelReduceHelper(). template<typename T > . static T ROOT::Internal::ParallelReduceHelper ; (; const std::vector< T > & ; objs, . const std::function< T(",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:37730,Availability,error,error,37730,"load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int ROOT::Internal::LogicalCPUBandwidthControl ; (; ). Returns the available number of logical cores. . Checks if there is CFS bandwidth control in place (linux, via cgroups, assuming standard paths); Otherwise, returns the number of logical cores provided by std::thread::hardware_concurrency() . Definition at line 50 of file RTaskArena.cxx. ◆ MinimalErrorHandler(). void ROOT::Internal::MinimalErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). A very simple error handler that is usually replaced by the TROOT default error handler. ; The minimal error handler is not serialized across threads, so that output of multi-threaded programs can get scrambled Noteabort() is only called if abort_bool is true and level >= gErrorIgnoreLevel ; Definition at line 67 of file TError.cxx. ◆ NotifyDirected(). void ROOT::Internal::NotifyDirected ; (; Detail::TBranchProxy * ; x). Definition at line 36 of file TBranchProxyDirector.cxx. ◆ operator<<(). std::ostream & ROOT::Internal::operator<< ; (; std::ostream & ; os, . const RConcurrentHashColl::HashValue & ; h . ). Definition at line 24 of file RConcurrentHashColl.cxx. ◆ operator==(). bool ROOT::Internal::operator== ; (; const RConcurrentHashColl::HashValue & ; lhs, . const RConcurrentHashColl::HashValue & ; rhs . ). inline . Definition at line 69 of file RConcurrentHashColl.hxx. ◆ ParallelReduceHelper(). template<typename T > . static T ROOT::Internal::ParallelReduceHelper ; (; const std::vector< T > & ; objs, . const std::function< T(T a, T b)> & ; redfunc . ). static . A helper function to implement the TThreadExecutor::ParallelReduce methods. ; Definition at line 122 of file TThreadExecutor.cxx",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:39789,Availability,error,error,39789,"lReduce methods. ; Definition at line 122 of file TThreadExecutor.cxx. ◆ R__AddPragmaForClass() [1/2]. static bool ROOT::Internal::R__AddPragmaForClass ; (; TTreeProxyGenerator * ; gen, . const char * ; classname . ). static . Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ; (I.e. return false if a container of this class can not have a ""pragma C++ class"" ; Definition at line 1588 of file TTreeProxyGenerator.cxx. ◆ R__AddPragmaForClass() [2/2]. static bool ROOT::Internal::R__AddPragmaForClass ; (; TTreeProxyGenerator * ; gen, . TClass * ; cl . ). static . Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ; (I.e. return false if a container of this class can not have a ""pragma C++ class"" ; Definition at line 1564 of file TTreeProxyGenerator.cxx. ◆ ReleaseDefaultErrorHandler(). void ROOT::Internal::ReleaseDefaultErrorHandler ; (; ). Destructs resources that are taken by using the default error handler. ; This function is called during the destruction of gROOT. ; Definition at line 47 of file TErrorDefaultHandler.cxx. ◆ RequiresCleanup(). Bool_t ROOT::Internal::RequiresCleanup ; (; TObject & ; obj). inline . Definition at line 386 of file TROOT.h. ◆ ResetReadEntry(). void ROOT::Internal::ResetReadEntry ; (; TFriendProxy * ; fp). Helper function to call SetReadEntry on all TFriendProxy. ; Definition at line 39 of file TBranchProxyDirector.cxx. ◆ SetErrorSystemMsgHandler(). ErrorSystemMsgHandlerFunc_t ROOT::Internal::SetErrorSystemMsgHandler ; (; ErrorSystemMsgHandlerFunc_t ; h). Returns the previous system error message handler. ; Definition at line 56 of file TError.cxx. ◆ SetRequireCleanup(). void ROOT::Internal::SetRequireCleanup ; (; TObject & ; obj). inline . Definition at line 381 of file TROOT.h. ◆ Sha256(). void ROOT::Internal::Sha256 ; (; const unsigned char * ; data, . int ; len, . ULong64_t * ; fDigest . ). Definition at line 267 of file R",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:40418,Availability,error,error,40418,"ass"" if needed and return true if it has been added or if it is known to not be needed. ; (I.e. return false if a container of this class can not have a ""pragma C++ class"" ; Definition at line 1564 of file TTreeProxyGenerator.cxx. ◆ ReleaseDefaultErrorHandler(). void ROOT::Internal::ReleaseDefaultErrorHandler ; (; ). Destructs resources that are taken by using the default error handler. ; This function is called during the destruction of gROOT. ; Definition at line 47 of file TErrorDefaultHandler.cxx. ◆ RequiresCleanup(). Bool_t ROOT::Internal::RequiresCleanup ; (; TObject & ; obj). inline . Definition at line 386 of file TROOT.h. ◆ ResetReadEntry(). void ROOT::Internal::ResetReadEntry ; (; TFriendProxy * ; fp). Helper function to call SetReadEntry on all TFriendProxy. ; Definition at line 39 of file TBranchProxyDirector.cxx. ◆ SetErrorSystemMsgHandler(). ErrorSystemMsgHandlerFunc_t ROOT::Internal::SetErrorSystemMsgHandler ; (; ErrorSystemMsgHandlerFunc_t ; h). Returns the previous system error message handler. ; Definition at line 56 of file TError.cxx. ◆ SetRequireCleanup(). void ROOT::Internal::SetRequireCleanup ; (; TObject & ; obj). inline . Definition at line 381 of file TROOT.h. ◆ Sha256(). void ROOT::Internal::Sha256 ; (; const unsigned char * ; data, . int ; len, . ULong64_t * ; fDigest . ). Definition at line 267 of file RSha256.hxx. Variable Documentation. ◆ gFreeIfTMapFile. ROOT::Internal::FreeIfTMapFile_t * ROOT::Internal::gFreeIfTMapFile = nullptr. Definition at line 141 of file TStorage.h. ◆ gGetMapFileMallocDesc. ROOT::Internal::GetMapFileMapllocDesc_t * ROOT::Internal::gGetMapFileMallocDesc = nullptr. Definition at line 142 of file TStorage.h. ◆ gGetROOT. GetROOTFun_t ROOT::Internal::gGetROOT = &GetROOT1. static . Definition at line 399 of file TROOT.cxx. ◆ gMmallocDesc. void * ROOT::Internal::gMmallocDesc = nullptr. Definition at line 143 of file TStorage.h. ◆ gROOTLocal. TROOT * ROOT::Internal::gROOTLocal = ROOT::GetROOT(). Definition at line 379 o",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:4833,Deployability,release,release,4833,"y;  Base class for the proxy around object in TClonesArray. More...;  ; struct  TClassGetClassHelper;  ; struct  TClassGetClassHelper< std::pair< F, S > >;  ; class  TDefaultInitBehavior;  ; struct  TDirectoryAtomicAdapter;  Internal class used in the implementation of gDirectory The objects of type TDirectoryAtomicAdapter should only be used inside the thread that created them. More...;  ; class  TExecutor;  This class implements the interface to execute the same task multiple times, sequentially or in parallel depending on the execution policy passed as a first parameter on construction, and possibly with different arguments every time. More...;  ; struct  TF1Builder;  Internal class used by TF1 for defining template specialization for different TF1 constructors More...;  ; struct  TF1Builder< const char * >;  TF1 building from a string used to build a TFormula based on a lambda function. More...;  ; struct  TF1Builder< Func * >;  ; class  TFriendProxy;  ; class  TFriendProxyDescriptor;  ; class  TGILRAII;  Class to acquire and release the Python GIL where it applies, i.e. More...;  ; struct  THashConsistencyHolder;  ; class  THnBaseBinIter;  Iterator over THnBase bins (internal implementation). More...;  ; class  THnBaseBrowsable;  TBrowser helper for THnBase. More...;  ; class  TImpProxy;  Template of the proxy around objects. More...;  ; class  TInitBehavior;  ; struct  TMultiArrayType;  Helper class for proxy around multi dimension array. More...;  ; class  TNamedBranchProxy;  ; class  TObjProxy;  ; class  TOperatorNewHelper;  ; class  TParBranchProcessingRAII;  ; class  TQObjectInitBehavior;  ; class  TROOTAllocator;  ; struct  TSchemaHelper;  ; class  TSchemaRuleProcessor;  ; struct  TSchemaType;  ; class  TSpinLockGuard;  A spin mutex-as-code-guard class. More...;  ; class  TStdBitsetHelper;  ; class  TStlArrayProxy;  Template of the Concrete Implementation of the branch proxy around an stl container of array of T. More...;  ; class  TStlImpProxy;  Template",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:1930,Integrability,protocol,protocol,1930,":*)(const T *, const double *)>;  ; struct  GetFunctorType< T(F::*)(T *, double *) const >;  ; struct  GetFunctorType< T(F::*)(T *, double *)>;  ; struct  InterpreterMutexRegistrationRAII;  ; struct  ParsingStateRAII;  RAII used to store Parser, Sema, Preprocessor state for recursive parsing. More...;  ; struct  RBaseType;  ; struct  RCast;  ; struct  RCast< T, false, false >;  ; struct  RCast< T, false, true >;  ; class  RConcurrentHashColl;  This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N indexes (0 to size - 1). More...;  ; struct  RSlotStackRAII;  A RAII object to pop and push slot numbers from a RSlotStack object. More...;  ; class  RStl;  ; class  RTaskArenaWrapper;  Wrapper for tbb::task_arena. More...;  ; class  TArrayCharProxy;  Concrete Implementation of the branch proxy around the data members which are array of char. More...;  ; class  TArrayProxy;  Template for concrete implementation of proxy around array of T. More...;  ; struct  TArrayType;  Helper template to be able to determine and use array dime",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:2024,Integrability,wrap,wraps,2024,"double *)>;  ; struct  InterpreterMutexRegistrationRAII;  ; struct  ParsingStateRAII;  RAII used to store Parser, Sema, Preprocessor state for recursive parsing. More...;  ; struct  RBaseType;  ; struct  RCast;  ; struct  RCast< T, false, false >;  ; struct  RCast< T, false, true >;  ; class  RConcurrentHashColl;  This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N indexes (0 to size - 1). More...;  ; struct  RSlotStackRAII;  A RAII object to pop and push slot numbers from a RSlotStack object. More...;  ; class  RStl;  ; class  RTaskArenaWrapper;  Wrapper for tbb::task_arena. More...;  ; class  TArrayCharProxy;  Concrete Implementation of the branch proxy around the data members which are array of char. More...;  ; class  TArrayProxy;  Template for concrete implementation of proxy around array of T. More...;  ; struct  TArrayType;  Helper template to be able to determine and use array dimensions. More...;  ; struct  TArrayType< T, 0 >;  Helper class for proxy around multi dimension array. More...;  ; class  TAtomicPoin",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:4226,Integrability,interface,interface,4226,"lass  TBranchProxyDirector;  ; class  TBranchProxyHelper;  String builder to be used in the constructors. More...;  ; class  TCDGIILIBase;  ; class  TCheckHashRecursiveRemoveConsistency;  ; class  TClaArrayProxy;  Template of the Concrete Implementation of the branch proxy around an TClonesArray of array of T. More...;  ; class  TClaImpProxy;  Template of the Concrete Implementation of the branch proxy around TClonesArray of T. More...;  ; class  TClaObjProxy;  ; class  TClaProxy;  Base class for the proxy around object in TClonesArray. More...;  ; struct  TClassGetClassHelper;  ; struct  TClassGetClassHelper< std::pair< F, S > >;  ; class  TDefaultInitBehavior;  ; struct  TDirectoryAtomicAdapter;  Internal class used in the implementation of gDirectory The objects of type TDirectoryAtomicAdapter should only be used inside the thread that created them. More...;  ; class  TExecutor;  This class implements the interface to execute the same task multiple times, sequentially or in parallel depending on the execution policy passed as a first parameter on construction, and possibly with different arguments every time. More...;  ; struct  TF1Builder;  Internal class used by TF1 for defining template specialization for different TF1 constructors More...;  ; struct  TF1Builder< const char * >;  TF1 building from a string used to build a TFormula based on a lambda function. More...;  ; struct  TF1Builder< Func * >;  ; class  TFriendProxy;  ; class  TFriendProxyDescriptor;  ; class  TGILRAII;  Class to acquire and release the Python GIL where it applies, i.e. More...;  ; struct  THashConsistencyHolder;  ; class  THnBaseBinIter;  Iterator over THnBase bins (internal implementation). More...;  ; class  THnBaseBrowsable;  TBrowser helper for THnBase. More...;  ; class  TImpProxy;  Template of the proxy around objects. More...;  ; class  TInitBehavior;  ; struct  TMultiArrayType;  Helper class for proxy around multi dimension array. More...;  ; class  TNamedBranchProxy;  ; class  T",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:4305,Integrability,depend,depending,4305,"lass  TBranchProxyDirector;  ; class  TBranchProxyHelper;  String builder to be used in the constructors. More...;  ; class  TCDGIILIBase;  ; class  TCheckHashRecursiveRemoveConsistency;  ; class  TClaArrayProxy;  Template of the Concrete Implementation of the branch proxy around an TClonesArray of array of T. More...;  ; class  TClaImpProxy;  Template of the Concrete Implementation of the branch proxy around TClonesArray of T. More...;  ; class  TClaObjProxy;  ; class  TClaProxy;  Base class for the proxy around object in TClonesArray. More...;  ; struct  TClassGetClassHelper;  ; struct  TClassGetClassHelper< std::pair< F, S > >;  ; class  TDefaultInitBehavior;  ; struct  TDirectoryAtomicAdapter;  Internal class used in the implementation of gDirectory The objects of type TDirectoryAtomicAdapter should only be used inside the thread that created them. More...;  ; class  TExecutor;  This class implements the interface to execute the same task multiple times, sequentially or in parallel depending on the execution policy passed as a first parameter on construction, and possibly with different arguments every time. More...;  ; struct  TF1Builder;  Internal class used by TF1 for defining template specialization for different TF1 constructors More...;  ; struct  TF1Builder< const char * >;  TF1 building from a string used to build a TFormula based on a lambda function. More...;  ; struct  TF1Builder< Func * >;  ; class  TFriendProxy;  ; class  TFriendProxyDescriptor;  ; class  TGILRAII;  Class to acquire and release the Python GIL where it applies, i.e. More...;  ; struct  THashConsistencyHolder;  ; class  THnBaseBinIter;  Iterator over THnBase bins (internal implementation). More...;  ; class  THnBaseBrowsable;  TBrowser helper for THnBase. More...;  ; class  TImpProxy;  Template of the proxy around objects. More...;  ; class  TInitBehavior;  ; struct  TMultiArrayType;  Helper class for proxy around multi dimension array. More...;  ; class  TNamedBranchProxy;  ; class  T",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:16821,Integrability,message,message,16821,"ntHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, TClass *cl);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; void ReleaseDefaultErrorHandler ();  Destructs resources that are taken by using the default error handler. ;  ; Bool_t RequiresCleanup (TObject &obj);  ; void ResetReadEntry (TFriendProxy *fp);  Helper function to call SetReadEntry on all TFriendProxy. ;  ; ErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler (ErrorSystemMsgHandlerFunc_t h);  Returns the previous system error message handler. ;  ; void SetRequireCleanup (TObject &obj);  ; void Sha256 (const unsigned char *data, int len, ULong64_t *fDigest);  . Variables; R__EXTERN FreeIfTMapFile_t * gFreeIfTMapFile = nullptr;  ; R__EXTERN GetMapFileMapllocDesc_t * gGetMapFileMallocDesc = nullptr;  ; static GetROOTFun_t gGetROOT = &GetROOT1;  ; R__EXTERN void * gMmallocDesc = nullptr;  ; R__EXTERN TROOT * gROOTLocal = ROOT::GetROOT();  . Typedef Documentation. ◆ ErrorSystemMsgHandlerFunc_t. using ROOT::Internal::ErrorSystemMsgHandlerFunc_t = typedef std::function<const char *()>. Retrieves the error string associated with the last system error. ; Definition at line 59 of file TError.h. ◆ FreeIfTMapFile_t. using ROOT::Internal::FreeIfTMapFile_t = typedef bool(void*). Definition at line 139 of file TStorage.h. ◆ GetMapFileMapllocDesc_t. using ROOT::Internal::GetMapFileMapllocDesc_t = typedef void *(void*). Definition at line 140 of file TStorage.h. ◆ GetRO",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:36072,Integrability,rout,routines,36072,"finition at line 219 of file TF1.h. ◆ gVersionCheck(). static TVersionCheck ROOT::Internal::gVersionCheck ; (; ROOT_VERSION_CODE ; ). static . ◆ hasBeginEnd() [1/2]. template<typename > . constexpr bool ROOT::Internal::hasBeginEnd ; (;  ; ...). constexpr . Definition at line 72 of file RRangeCast.hxx. ◆ hasBeginEnd() [2/2]. template<typename T > . constexpr auto ROOT::Internal::hasBeginEnd ; (; int ; ); -> decltype(std::begin(std::declval<T>()), std::end(std::declval<T>()), true). constexpr . Definition at line 66 of file RRangeCast.hxx. ◆ HasConsistentHashMember() [1/2]. Bool_t ROOT::Internal::HasConsistentHashMember ; (; const char * ; cname). Return true is the Hash/RecursiveRemove setup is consistent, i.e. ; when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. This routines is used for a small subset of the class for which we need the answer before gROOT is properly initialized. ; Definition at line 7345 of file TClass.cxx. ◆ HasConsistentHashMember() [2/2]. Bool_t ROOT::Internal::HasConsistentHashMember ; (; TClass & ; clRef). Return true is the Hash/RecursiveRemove setup is consistent, i.e. ; when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. ; Definition at line 7371 of file TClass.cxx. ◆ IsImplicitMTEnabledImpl(). static Bool_t & ROOT::Internal::IsImplicitMTEnabledImpl ; (; ). static . Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int RO",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:40424,Integrability,message,message,40424,"ass"" if needed and return true if it has been added or if it is known to not be needed. ; (I.e. return false if a container of this class can not have a ""pragma C++ class"" ; Definition at line 1564 of file TTreeProxyGenerator.cxx. ◆ ReleaseDefaultErrorHandler(). void ROOT::Internal::ReleaseDefaultErrorHandler ; (; ). Destructs resources that are taken by using the default error handler. ; This function is called during the destruction of gROOT. ; Definition at line 47 of file TErrorDefaultHandler.cxx. ◆ RequiresCleanup(). Bool_t ROOT::Internal::RequiresCleanup ; (; TObject & ; obj). inline . Definition at line 386 of file TROOT.h. ◆ ResetReadEntry(). void ROOT::Internal::ResetReadEntry ; (; TFriendProxy * ; fp). Helper function to call SetReadEntry on all TFriendProxy. ; Definition at line 39 of file TBranchProxyDirector.cxx. ◆ SetErrorSystemMsgHandler(). ErrorSystemMsgHandlerFunc_t ROOT::Internal::SetErrorSystemMsgHandler ; (; ErrorSystemMsgHandlerFunc_t ; h). Returns the previous system error message handler. ; Definition at line 56 of file TError.cxx. ◆ SetRequireCleanup(). void ROOT::Internal::SetRequireCleanup ; (; TObject & ; obj). inline . Definition at line 381 of file TROOT.h. ◆ Sha256(). void ROOT::Internal::Sha256 ; (; const unsigned char * ; data, . int ; len, . ULong64_t * ; fDigest . ). Definition at line 267 of file RSha256.hxx. Variable Documentation. ◆ gFreeIfTMapFile. ROOT::Internal::FreeIfTMapFile_t * ROOT::Internal::gFreeIfTMapFile = nullptr. Definition at line 141 of file TStorage.h. ◆ gGetMapFileMallocDesc. ROOT::Internal::GetMapFileMapllocDesc_t * ROOT::Internal::gGetMapFileMallocDesc = nullptr. Definition at line 142 of file TStorage.h. ◆ gGetROOT. GetROOTFun_t ROOT::Internal::gGetROOT = &GetROOT1. static . Definition at line 399 of file TROOT.cxx. ◆ gMmallocDesc. void * ROOT::Internal::gMmallocDesc = nullptr. Definition at line 143 of file TStorage.h. ◆ gROOTLocal. TROOT * ROOT::Internal::gROOTLocal = ROOT::GetROOT(). Definition at line 379 o",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:2244,Modifiability,portab,portable,2244," T, false, false >;  ; struct  RCast< T, false, true >;  ; class  RConcurrentHashColl;  This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N indexes (0 to size - 1). More...;  ; struct  RSlotStackRAII;  A RAII object to pop and push slot numbers from a RSlotStack object. More...;  ; class  RStl;  ; class  RTaskArenaWrapper;  Wrapper for tbb::task_arena. More...;  ; class  TArrayCharProxy;  Concrete Implementation of the branch proxy around the data members which are array of char. More...;  ; class  TArrayProxy;  Template for concrete implementation of proxy around array of T. More...;  ; struct  TArrayType;  Helper template to be able to determine and use array dimensions. More...;  ; struct  TArrayType< T, 0 >;  Helper class for proxy around multi dimension array. More...;  ; class  TAtomicPointer;  Helper class to manage atomic pointers. More...;  ; class  TBranchCacheInfo;  ; class  TBranchDescriptor;  ; class  TBranchIMTHelper;  A helper class for managing IMT work during TTree:Fill operations. More...;  ; class  TB",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:12568,Modifiability,inherit,inherits,12568,"loat_t > TStlFloatProxy;  ; typedef TStlImpProxy< Int_t > TStlIntProxy;  ; typedef TStlImpProxy< Long64_t > TStlLong64Proxy;  ; typedef TStlImpProxy< Long_t > TStlLongProxy;  ; typedef TStlImpProxy< Short_t > TStlShortProxy;  ; typedef TStlImpProxy< UChar_t > TStlUCharProxy;  ; typedef TStlImpProxy< UInt_t > TStlUIntProxy;  ; typedef TStlImpProxy< ULong64_t > TStlULong64Proxy;  ; typedef TStlImpProxy< ULong_t > TStlULongProxy;  ; typedef TStlImpProxy< UShort_t > TStlUShortProxy;  ; typedef TImpProxy< UChar_t > TUCharProxy;  ; typedef TImpProxy< UInt_t > TUIntProxy;  ; typedef TImpProxy< ULong64_t > TULong64Proxy;  ; typedef TImpProxy< ULong_t > TULongProxy;  ; typedef TImpProxy< UShort_t > TUShortProxy;  . Enumerations; enum  ELocation { kOut =0; , kClones; , kSTL; };  0 for the general case, 1 when this a split clases inside a TClonesArray, 2 when this is a split classes inside an STL container. More...;  . Functions; tbb::isolated_task_group * CastToTG (void *p);  ; bool ContaineeInheritsFrom (TClass *cl, TClass *base);  Return true if 'cl' inherits from 'base'. ;  ; void DefaultStreamer (TBuffer &R__b, const TClass *cl, void *objpointer);  Default streamer implementation used by ClassDefInline to avoid requirement to include TBuffer.h. ;  ; const TQObjectInitBehavior * DefineBehavior (TQObject *, TQObject *);  ; const TInitBehavior * DefineBehavior (void *, void *);  ; bool DeleteChangesMemory ();  ; bool DeleteChangesMemoryImpl ();  ; void DisableParBranchProcessing ();  Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ;  ; const TCollection & EmptyCollection ();  Return an empty collection for use with nullptr TRangeCast. ;  ; void EnableParBranchProcessing ();  Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ;  ; void GenericShowMembers (const char *topClassName, void *obj, TMemberInspector &R__insp, bool transientMem",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:30923,Modifiability,inherit,inherits,30923,"roxy. Definition at line 879 of file TBranchProxy.h. ◆ TULong64Proxy. typedef TImpProxy<ULong64_t> ROOT::Internal::TULong64Proxy. Definition at line 881 of file TBranchProxy.h. ◆ TULongProxy. typedef TImpProxy<ULong_t> ROOT::Internal::TULongProxy. Definition at line 880 of file TBranchProxy.h. ◆ TUShortProxy. typedef TImpProxy<UShort_t> ROOT::Internal::TUShortProxy. Definition at line 882 of file TBranchProxy.h. Enumeration Type Documentation. ◆ ELocation. enum ROOT::Internal::ELocation. 0 for the general case, 1 when this a split clases inside a TClonesArray, 2 when this is a split classes inside an STL container. . EnumeratorkOut ; kClones ; kSTL . Definition at line 38 of file TTreeReaderGenerator.h. Function Documentation. ◆ CastToTG(). tbb::isolated_task_group * ROOT::Internal::CastToTG ; (; void * ; p). Definition at line 43 of file TTaskGroup.cxx. ◆ ContaineeInheritsFrom(). bool ROOT::Internal::ContaineeInheritsFrom ; (; TClass * ; cl, . TClass * ; base . ). Return true if 'cl' inherits from 'base'. ; Definition at line 831 of file TCollection.cxx. ◆ DefaultStreamer(). void ROOT::Internal::DefaultStreamer ; (; TBuffer & ; R__b, . const TClass * ; cl, . void * ; objpointer . ). Default streamer implementation used by ClassDefInline to avoid requirement to include TBuffer.h. ; Definition at line 30 of file TBuffer.cxx. ◆ DefineBehavior() [1/2]. const TQObjectInitBehavior * ROOT::Internal::DefineBehavior ; (; TQObject * ; , . TQObject * ;  . ). inline . Definition at line 74 of file TQClass.h. ◆ DefineBehavior() [2/2]. const TInitBehavior * ROOT::Internal::DefineBehavior ; (; void * ; , . void * ;  . ). Definition at line 44 of file TGenericClassInfo.cxx. ◆ DeleteChangesMemory(). bool ROOT::Internal::DeleteChangesMemory ; (; ). Definition at line 127 of file TObject.cxx. ◆ DeleteChangesMemoryImpl(). bool ROOT::Internal::DeleteChangesMemoryImpl ; (; ). Definition at line 76 of file TObject.cxx. ◆ DisableParBranchProcessing(). void ROOT::Internal::DisableParBranch",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:13337,Performance,multi-thread,multi-threading,13337,"ase, 1 when this a split clases inside a TClonesArray, 2 when this is a split classes inside an STL container. More...;  . Functions; tbb::isolated_task_group * CastToTG (void *p);  ; bool ContaineeInheritsFrom (TClass *cl, TClass *base);  Return true if 'cl' inherits from 'base'. ;  ; void DefaultStreamer (TBuffer &R__b, const TClass *cl, void *objpointer);  Default streamer implementation used by ClassDefInline to avoid requirement to include TBuffer.h. ;  ; const TQObjectInitBehavior * DefineBehavior (TQObject *, TQObject *);  ; const TInitBehavior * DefineBehavior (void *, void *);  ; bool DeleteChangesMemory ();  ; bool DeleteChangesMemoryImpl ();  ; void DisableParBranchProcessing ();  Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ;  ; const TCollection & EmptyCollection ();  Return an empty collection for use with nullptr TRangeCast. ;  ; void EnableParBranchProcessing ();  Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ;  ; void GenericShowMembers (const char *topClassName, void *obj, TMemberInspector &R__insp, bool transientMember);  ; TString GetArrayType (TStreamerElement *element, const char *subtype, TTreeProxyGenerator::EContainer container);  ; template<typename T > ; TClass * GetClassHelper (Bool_t load, Bool_t silent, std::false_type);  ; template<typename T > ; TClass * GetClassHelper (Bool_t, Bool_t, std::true_type);  ; std::string GetDemangledTypeName (const std::type_info &t);  ; ErrorSystemMsgHandlerFunc_t GetErrorSystemMsgHandler ();  ; std::shared_ptr< ROOT::Internal::RTaskArenaWrapper > GetGlobalTaskArena (unsigned maxConcurrency=0);  Factory function returning a shared pointer to the instance of the global RTaskArenaWrapper. ;  ; TROOT * GetROOT1 ();  ; TROOT * GetROOT2 ();  ; static Func_t GetSymInLibImt (const char *funcname);  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:13692,Performance,load,load,13692," ;  ; const TQObjectInitBehavior * DefineBehavior (TQObject *, TQObject *);  ; const TInitBehavior * DefineBehavior (void *, void *);  ; bool DeleteChangesMemory ();  ; bool DeleteChangesMemoryImpl ();  ; void DisableParBranchProcessing ();  Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ;  ; const TCollection & EmptyCollection ();  Return an empty collection for use with nullptr TRangeCast. ;  ; void EnableParBranchProcessing ();  Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ;  ; void GenericShowMembers (const char *topClassName, void *obj, TMemberInspector &R__insp, bool transientMember);  ; TString GetArrayType (TStreamerElement *element, const char *subtype, TTreeProxyGenerator::EContainer container);  ; template<typename T > ; TClass * GetClassHelper (Bool_t load, Bool_t silent, std::false_type);  ; template<typename T > ; TClass * GetClassHelper (Bool_t, Bool_t, std::true_type);  ; std::string GetDemangledTypeName (const std::type_info &t);  ; ErrorSystemMsgHandlerFunc_t GetErrorSystemMsgHandler ();  ; std::shared_ptr< ROOT::Internal::RTaskArenaWrapper > GetGlobalTaskArena (unsigned maxConcurrency=0);  Factory function returning a shared pointer to the instance of the global RTaskArenaWrapper. ;  ; TROOT * GetROOT1 ();  ; TROOT * GetROOT2 ();  ; static Func_t GetSymInLibImt (const char *funcname);  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(const T *, const double *)) -> decltype(opPtr);  Internal class used by TF1 to get the right operator() signature from a Functor with several ones. ;  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<typename T > ; constexpr auto hasBeginEnd (int) -> decltype(st",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:15190,Performance,load,load,15190," TROOT * GetROOT1 ();  ; TROOT * GetROOT2 ();  ; static Func_t GetSymInLibImt (const char *funcname);  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(const T *, const double *)) -> decltype(opPtr);  Internal class used by TF1 to get the right operator() signature from a Functor with several ones. ;  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<typename T > ; constexpr auto hasBeginEnd (int) -> decltype(std::begin(std::declval< T >()), std::end(std::declval< T >()), true);  ; Bool_t HasConsistentHashMember (const char *clName);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; Bool_t HasConsistentHashMember (TClass &clRef);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; static Bool_t & IsImplicitMTEnabledImpl ();  Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ;  ; Bool_t IsParBranchProcessingEnabled ();  Returns true if parallel branch processing is enabled. ;  ; int LogicalCPUBandwidthControl ();  Returns the available number of logical cores. ;  ; void MinimalErrorHandler (Int_t level, Bool_t abort_bool, const char *location, const char *msg);  A very simple error handler that is usually replaced by the TROOT default error handler. ;  ; void NotifyDirected (Detail::TBranchProxy *x);  ; std::ostream & operator<< (std::ostream &os, const RConcurrentHashColl::HashValue &h);  ; bool operator== (const RConcurrentHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add t",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:32444,Performance,multi-thread,multi-threading,32444,"TQClass.h. ◆ DefineBehavior() [2/2]. const TInitBehavior * ROOT::Internal::DefineBehavior ; (; void * ; , . void * ;  . ). Definition at line 44 of file TGenericClassInfo.cxx. ◆ DeleteChangesMemory(). bool ROOT::Internal::DeleteChangesMemory ; (; ). Definition at line 127 of file TObject.cxx. ◆ DeleteChangesMemoryImpl(). bool ROOT::Internal::DeleteChangesMemoryImpl ; (; ). Definition at line 76 of file TObject.cxx. ◆ DisableParBranchProcessing(). void ROOT::Internal::DisableParBranchProcessing ; (; ). Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ; Definition at line 434 of file TROOT.cxx. ◆ EmptyCollection(). const TCollection & ROOT::Internal::EmptyCollection ; (; ). Return an empty collection for use with nullptr TRangeCast. ; Definition at line 822 of file TCollection.cxx. ◆ EnableParBranchProcessing(). void ROOT::Internal::EnableParBranchProcessing ; (; ). Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ; This IMT use case, implemented in TTree::GetEntry, spawns a task for each branch of the tree. Therefore, a task takes care of the reading, decompression and deserialisation of a given branch. ; Definition at line 420 of file TROOT.cxx. ◆ GenericShowMembers(). void ROOT::Internal::GenericShowMembers ; (; const char * ; topClassName, . void * ; obj, . TMemberInspector & ; R__insp, . bool ; transientMember . ). inline . Definition at line 24 of file RtypesImp.h. ◆ GetArrayType(). TString ROOT::Internal::GetArrayType ; (; TStreamerElement * ; element, . const char * ; subtype, . TTreeProxyGenerator::EContainer ; container . ). Definition at line 131 of file TTreeProxyGenerator.cxx. ◆ GetClassHelper() [1/2]. template<typename T > . TClass * ROOT::Internal::GetClassHelper ; (; Bool_t ; load, . Bool_t ; silent, . std::false_type ;  . ). Definition at line 646 of file TClass.h. ◆ GetClassHelper() [2/2]. template<typename T",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:33299,Performance,load,load,33299,".cxx. ◆ EnableParBranchProcessing(). void ROOT::Internal::EnableParBranchProcessing ; (; ). Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ; This IMT use case, implemented in TTree::GetEntry, spawns a task for each branch of the tree. Therefore, a task takes care of the reading, decompression and deserialisation of a given branch. ; Definition at line 420 of file TROOT.cxx. ◆ GenericShowMembers(). void ROOT::Internal::GenericShowMembers ; (; const char * ; topClassName, . void * ; obj, . TMemberInspector & ; R__insp, . bool ; transientMember . ). inline . Definition at line 24 of file RtypesImp.h. ◆ GetArrayType(). TString ROOT::Internal::GetArrayType ; (; TStreamerElement * ; element, . const char * ; subtype, . TTreeProxyGenerator::EContainer ; container . ). Definition at line 131 of file TTreeProxyGenerator.cxx. ◆ GetClassHelper() [1/2]. template<typename T > . TClass * ROOT::Internal::GetClassHelper ; (; Bool_t ; load, . Bool_t ; silent, . std::false_type ;  . ). Definition at line 646 of file TClass.h. ◆ GetClassHelper() [2/2]. template<typename T > . TClass * ROOT::Internal::GetClassHelper ; (; Bool_t ; , . Bool_t ; , . std::true_type ;  . ). Definition at line 624 of file TClass.h. ◆ GetDemangledTypeName(). std::string ROOT::Internal::GetDemangledTypeName ; (; const std::type_info & ; t). Definition at line 30 of file TGenericClassInfo.cxx. ◆ GetErrorSystemMsgHandler(). ErrorSystemMsgHandlerFunc_t ROOT::Internal::GetErrorSystemMsgHandler ; (; ). Definition at line 51 of file TError.cxx. ◆ GetGlobalTaskArena(). std::shared_ptr< ROOT::Internal::RTaskArenaWrapper > ROOT::Internal::GetGlobalTaskArena ; (; unsigned ; maxConcurrency = 0). Factory function returning a shared pointer to the instance of the global RTaskArenaWrapper. ; Allows for reinstantiation of the global RTaskArenaWrapper once all the references to the previous one are gone and the object destroyed. ; Defi",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:36836,Performance,load,load,36836,"eRemove setup is consistent, i.e. ; when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. This routines is used for a small subset of the class for which we need the answer before gROOT is properly initialized. ; Definition at line 7345 of file TClass.cxx. ◆ HasConsistentHashMember() [2/2]. Bool_t ROOT::Internal::HasConsistentHashMember ; (; TClass & ; clRef). Return true is the Hash/RecursiveRemove setup is consistent, i.e. ; when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. ; Definition at line 7371 of file TClass.cxx. ◆ IsImplicitMTEnabledImpl(). static Bool_t & ROOT::Internal::IsImplicitMTEnabledImpl ; (; ). static . Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int ROOT::Internal::LogicalCPUBandwidthControl ; (; ). Returns the available number of logical cores. . Checks if there is CFS bandwidth control in place (linux, via cgroups, assuming standard paths); Otherwise, returns the number of logical cores provided by std::thread::hardware_concurrency() . Definition at line 50 of file RTaskArena.cxx. ◆ MinimalErrorHandler(). void ROOT::Internal::MinimalErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). A very simple error handler that is usually replaced by the TROOT default error handler. ; The minimal error handler is not serialized across threads, so that output of multi-threaded pr",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:37796,Performance,multi-thread,multi-threaded,37796,"load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int ROOT::Internal::LogicalCPUBandwidthControl ; (; ). Returns the available number of logical cores. . Checks if there is CFS bandwidth control in place (linux, via cgroups, assuming standard paths); Otherwise, returns the number of logical cores provided by std::thread::hardware_concurrency() . Definition at line 50 of file RTaskArena.cxx. ◆ MinimalErrorHandler(). void ROOT::Internal::MinimalErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). A very simple error handler that is usually replaced by the TROOT default error handler. ; The minimal error handler is not serialized across threads, so that output of multi-threaded programs can get scrambled Noteabort() is only called if abort_bool is true and level >= gErrorIgnoreLevel ; Definition at line 67 of file TError.cxx. ◆ NotifyDirected(). void ROOT::Internal::NotifyDirected ; (; Detail::TBranchProxy * ; x). Definition at line 36 of file TBranchProxyDirector.cxx. ◆ operator<<(). std::ostream & ROOT::Internal::operator<< ; (; std::ostream & ; os, . const RConcurrentHashColl::HashValue & ; h . ). Definition at line 24 of file RConcurrentHashColl.cxx. ◆ operator==(). bool ROOT::Internal::operator== ; (; const RConcurrentHashColl::HashValue & ; lhs, . const RConcurrentHashColl::HashValue & ; rhs . ). inline . Definition at line 69 of file RConcurrentHashColl.hxx. ◆ ParallelReduceHelper(). template<typename T > . static T ROOT::Internal::ParallelReduceHelper ; (; const std::vector< T > & ; objs, . const std::function< T(T a, T b)> & ; redfunc . ). static . A helper function to implement the TThreadExecutor::ParallelReduce methods. ; Definition at line 122 of file TThreadExecutor.cxx",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:1349,Safety,safe,safe,1349," namespace  TDS;  ; namespace  TreeUtils;  Namespace hosting functions and classes to retrieve tree information for internal use. ;  ; namespace  TThreadedObjectUtils;  ; namespace  VecOps;  . Classes; class  ClassDefGenerateInitInstanceLocalInjector;  ; class  DictSelectionReader;  ; struct  GetFunctorType;  Internal class used by TF1 for obtaining the type from a functor out of the set of valid operator() signatures. More...;  ; struct  GetFunctorType< T(F::*)(const T *, const double *) const >;  ; struct  GetFunctorType< T(F::*)(const T *, const double *)>;  ; struct  GetFunctorType< T(F::*)(T *, double *) const >;  ; struct  GetFunctorType< T(F::*)(T *, double *)>;  ; struct  InterpreterMutexRegistrationRAII;  ; struct  ParsingStateRAII;  RAII used to store Parser, Sema, Preprocessor state for recursive parsing. More...;  ; struct  RBaseType;  ; struct  RCast;  ; struct  RCast< T, false, false >;  ; struct  RCast< T, false, true >;  ; class  RConcurrentHashColl;  This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:2328,Safety,safe,safe,2328,"class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N indexes (0 to size - 1). More...;  ; struct  RSlotStackRAII;  A RAII object to pop and push slot numbers from a RSlotStack object. More...;  ; class  RStl;  ; class  RTaskArenaWrapper;  Wrapper for tbb::task_arena. More...;  ; class  TArrayCharProxy;  Concrete Implementation of the branch proxy around the data members which are array of char. More...;  ; class  TArrayProxy;  Template for concrete implementation of proxy around array of T. More...;  ; struct  TArrayType;  Helper template to be able to determine and use array dimensions. More...;  ; struct  TArrayType< T, 0 >;  Helper class for proxy around multi dimension array. More...;  ; class  TAtomicPointer;  Helper class to manage atomic pointers. More...;  ; class  TBranchCacheInfo;  ; class  TBranchDescriptor;  ; class  TBranchIMTHelper;  A helper class for managing IMT work during TTree:Fill operations. More...;  ; class  TBranchProxyClassDescriptor;  ; class  TBranchProxyDescriptor;  ; class  TBranchProxyDirector;",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:12728,Safety,avoid,avoid,12728,"roxy;  ; typedef TStlImpProxy< Short_t > TStlShortProxy;  ; typedef TStlImpProxy< UChar_t > TStlUCharProxy;  ; typedef TStlImpProxy< UInt_t > TStlUIntProxy;  ; typedef TStlImpProxy< ULong64_t > TStlULong64Proxy;  ; typedef TStlImpProxy< ULong_t > TStlULongProxy;  ; typedef TStlImpProxy< UShort_t > TStlUShortProxy;  ; typedef TImpProxy< UChar_t > TUCharProxy;  ; typedef TImpProxy< UInt_t > TUIntProxy;  ; typedef TImpProxy< ULong64_t > TULong64Proxy;  ; typedef TImpProxy< ULong_t > TULongProxy;  ; typedef TImpProxy< UShort_t > TUShortProxy;  . Enumerations; enum  ELocation { kOut =0; , kClones; , kSTL; };  0 for the general case, 1 when this a split clases inside a TClonesArray, 2 when this is a split classes inside an STL container. More...;  . Functions; tbb::isolated_task_group * CastToTG (void *p);  ; bool ContaineeInheritsFrom (TClass *cl, TClass *base);  Return true if 'cl' inherits from 'base'. ;  ; void DefaultStreamer (TBuffer &R__b, const TClass *cl, void *objpointer);  Default streamer implementation used by ClassDefInline to avoid requirement to include TBuffer.h. ;  ; const TQObjectInitBehavior * DefineBehavior (TQObject *, TQObject *);  ; const TInitBehavior * DefineBehavior (void *, void *);  ; bool DeleteChangesMemory ();  ; bool DeleteChangesMemoryImpl ();  ; void DisableParBranchProcessing ();  Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ;  ; const TCollection & EmptyCollection ();  Return an empty collection for use with nullptr TRangeCast. ;  ; void EnableParBranchProcessing ();  Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ;  ; void GenericShowMembers (const char *topClassName, void *obj, TMemberInspector &R__insp, bool transientMember);  ; TString GetArrayType (TStreamerElement *element, const char *subtype, TTreeProxyGenerator::EContainer container);  ; template<typename T > ; TClass * GetClass",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:31184,Safety,avoid,avoid,31184,"finition at line 880 of file TBranchProxy.h. ◆ TUShortProxy. typedef TImpProxy<UShort_t> ROOT::Internal::TUShortProxy. Definition at line 882 of file TBranchProxy.h. Enumeration Type Documentation. ◆ ELocation. enum ROOT::Internal::ELocation. 0 for the general case, 1 when this a split clases inside a TClonesArray, 2 when this is a split classes inside an STL container. . EnumeratorkOut ; kClones ; kSTL . Definition at line 38 of file TTreeReaderGenerator.h. Function Documentation. ◆ CastToTG(). tbb::isolated_task_group * ROOT::Internal::CastToTG ; (; void * ; p). Definition at line 43 of file TTaskGroup.cxx. ◆ ContaineeInheritsFrom(). bool ROOT::Internal::ContaineeInheritsFrom ; (; TClass * ; cl, . TClass * ; base . ). Return true if 'cl' inherits from 'base'. ; Definition at line 831 of file TCollection.cxx. ◆ DefaultStreamer(). void ROOT::Internal::DefaultStreamer ; (; TBuffer & ; R__b, . const TClass * ; cl, . void * ; objpointer . ). Default streamer implementation used by ClassDefInline to avoid requirement to include TBuffer.h. ; Definition at line 30 of file TBuffer.cxx. ◆ DefineBehavior() [1/2]. const TQObjectInitBehavior * ROOT::Internal::DefineBehavior ; (; TQObject * ; , . TQObject * ;  . ). inline . Definition at line 74 of file TQClass.h. ◆ DefineBehavior() [2/2]. const TInitBehavior * ROOT::Internal::DefineBehavior ; (; void * ; , . void * ;  . ). Definition at line 44 of file TGenericClassInfo.cxx. ◆ DeleteChangesMemory(). bool ROOT::Internal::DeleteChangesMemory ; (; ). Definition at line 127 of file TObject.cxx. ◆ DeleteChangesMemoryImpl(). bool ROOT::Internal::DeleteChangesMemoryImpl ; (; ). Definition at line 76 of file TObject.cxx. ◆ DisableParBranchProcessing(). void ROOT::Internal::DisableParBranchProcessing ; (; ). Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ; Definition at line 434 of file TROOT.cxx. ◆ EmptyCollection(). const TCollection & ROOT::Internal::EmptyCollection ; (; ). Re",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:35990,Safety,safe,safe,35990," > . auto ROOT::Internal::GetTheRightOp ; (; T(F::*)(T *, double *) ; opPtr); -> decltype(opPtr); . Definition at line 219 of file TF1.h. ◆ gVersionCheck(). static TVersionCheck ROOT::Internal::gVersionCheck ; (; ROOT_VERSION_CODE ; ). static . ◆ hasBeginEnd() [1/2]. template<typename > . constexpr bool ROOT::Internal::hasBeginEnd ; (;  ; ...). constexpr . Definition at line 72 of file RRangeCast.hxx. ◆ hasBeginEnd() [2/2]. template<typename T > . constexpr auto ROOT::Internal::hasBeginEnd ; (; int ; ); -> decltype(std::begin(std::declval<T>()), std::end(std::declval<T>()), true). constexpr . Definition at line 66 of file RRangeCast.hxx. ◆ HasConsistentHashMember() [1/2]. Bool_t ROOT::Internal::HasConsistentHashMember ; (; const char * ; cname). Return true is the Hash/RecursiveRemove setup is consistent, i.e. ; when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. This routines is used for a small subset of the class for which we need the answer before gROOT is properly initialized. ; Definition at line 7345 of file TClass.cxx. ◆ HasConsistentHashMember() [2/2]. Bool_t ROOT::Internal::HasConsistentHashMember ; (; TClass & ; clRef). Return true is the Hash/RecursiveRemove setup is consistent, i.e. ; when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. ; Definition at line 7371 of file TClass.cxx. ◆ IsImplicitMTEnabledImpl(). static Bool_t & ROOT::Internal::IsImplicitMTEnabledImpl ; (; ). static . Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch pro",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:36550,Safety,safe,safe,36550,"(std::declval<T>()), true). constexpr . Definition at line 66 of file RRangeCast.hxx. ◆ HasConsistentHashMember() [1/2]. Bool_t ROOT::Internal::HasConsistentHashMember ; (; const char * ; cname). Return true is the Hash/RecursiveRemove setup is consistent, i.e. ; when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. This routines is used for a small subset of the class for which we need the answer before gROOT is properly initialized. ; Definition at line 7345 of file TClass.cxx. ◆ HasConsistentHashMember() [2/2]. Bool_t ROOT::Internal::HasConsistentHashMember ; (; TClass & ; clRef). Return true is the Hash/RecursiveRemove setup is consistent, i.e. ; when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. ; Definition at line 7371 of file TClass.cxx. ◆ IsImplicitMTEnabledImpl(). static Bool_t & ROOT::Internal::IsImplicitMTEnabledImpl ; (; ). static . Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int ROOT::Internal::LogicalCPUBandwidthControl ; (; ). Returns the available number of logical cores. . Checks if there is CFS bandwidth control in place (linux, via cgroups, assuming standard paths); Otherwise, returns the number of logical cores provided by std::thread::hardware_concurrency() . Definition at line 50 of file RTaskArena.cxx. ◆ MinimalErrorHandler(). void ROOT::Internal::MinimalErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const cha",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:1406,Security,hash,hash,1406," namespace  TDS;  ; namespace  TreeUtils;  Namespace hosting functions and classes to retrieve tree information for internal use. ;  ; namespace  TThreadedObjectUtils;  ; namespace  VecOps;  . Classes; class  ClassDefGenerateInitInstanceLocalInjector;  ; class  DictSelectionReader;  ; struct  GetFunctorType;  Internal class used by TF1 for obtaining the type from a functor out of the set of valid operator() signatures. More...;  ; struct  GetFunctorType< T(F::*)(const T *, const double *) const >;  ; struct  GetFunctorType< T(F::*)(const T *, const double *)>;  ; struct  GetFunctorType< T(F::*)(T *, double *) const >;  ; struct  GetFunctorType< T(F::*)(T *, double *)>;  ; struct  InterpreterMutexRegistrationRAII;  ; struct  ParsingStateRAII;  RAII used to store Parser, Sema, Preprocessor state for recursive parsing. More...;  ; struct  RBaseType;  ; struct  RCast;  ; struct  RCast< T, false, false >;  ; struct  RCast< T, false, true >;  ; class  RConcurrentHashColl;  This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:1665,Security,access,access,1665,"ictSelectionReader;  ; struct  GetFunctorType;  Internal class used by TF1 for obtaining the type from a functor out of the set of valid operator() signatures. More...;  ; struct  GetFunctorType< T(F::*)(const T *, const double *) const >;  ; struct  GetFunctorType< T(F::*)(const T *, const double *)>;  ; struct  GetFunctorType< T(F::*)(T *, double *) const >;  ; struct  GetFunctorType< T(F::*)(T *, double *)>;  ; struct  InterpreterMutexRegistrationRAII;  ; struct  ParsingStateRAII;  RAII used to store Parser, Sema, Preprocessor state for recursive parsing. More...;  ; struct  RBaseType;  ; struct  RCast;  ; struct  RCast< T, false, false >;  ; struct  RCast< T, false, true >;  ; class  RConcurrentHashColl;  This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N indexes (0 to size - 1). More...;  ; struct  RSlotStackRAII;  A RAII object to pop and push slot numbers from a RSlotStack object. More...;  ; class  RStl;  ; class  RTaskArenaWrapper;  Wrapper for tbb::task_arena. More...;  ; class  TArrayCharProxy;  Concrete Imp",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:1777,Security,access,access,1777,"gnatures. More...;  ; struct  GetFunctorType< T(F::*)(const T *, const double *) const >;  ; struct  GetFunctorType< T(F::*)(const T *, const double *)>;  ; struct  GetFunctorType< T(F::*)(T *, double *) const >;  ; struct  GetFunctorType< T(F::*)(T *, double *)>;  ; struct  InterpreterMutexRegistrationRAII;  ; struct  ParsingStateRAII;  RAII used to store Parser, Sema, Preprocessor state for recursive parsing. More...;  ; struct  RBaseType;  ; struct  RCast;  ; struct  RCast< T, false, false >;  ; struct  RCast< T, false, true >;  ; class  RConcurrentHashColl;  This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N indexes (0 to size - 1). More...;  ; struct  RSlotStackRAII;  A RAII object to pop and push slot numbers from a RSlotStack object. More...;  ; class  RStl;  ; class  RTaskArenaWrapper;  Wrapper for tbb::task_arena. More...;  ; class  TArrayCharProxy;  Concrete Implementation of the branch proxy around the data members which are array of char. More...;  ; class  TArrayProxy;  Template for concrete implementation",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:1890,Security,access,access,1890,":*)(const T *, const double *)>;  ; struct  GetFunctorType< T(F::*)(T *, double *) const >;  ; struct  GetFunctorType< T(F::*)(T *, double *)>;  ; struct  InterpreterMutexRegistrationRAII;  ; struct  ParsingStateRAII;  RAII used to store Parser, Sema, Preprocessor state for recursive parsing. More...;  ; struct  RBaseType;  ; struct  RCast;  ; struct  RCast< T, false, false >;  ; struct  RCast< T, false, true >;  ; class  RConcurrentHashColl;  This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N indexes (0 to size - 1). More...;  ; struct  RSlotStackRAII;  A RAII object to pop and push slot numbers from a RSlotStack object. More...;  ; class  RStl;  ; class  RTaskArenaWrapper;  Wrapper for tbb::task_arena. More...;  ; class  TArrayCharProxy;  Concrete Implementation of the branch proxy around the data members which are array of char. More...;  ; class  TArrayProxy;  Template for concrete implementation of proxy around array of T. More...;  ; struct  TArrayType;  Helper template to be able to determine and use array dime",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:15380,Testability,log,logical,15380,"ltype(opPtr);  Internal class used by TF1 to get the right operator() signature from a Functor with several ones. ;  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<typename T > ; constexpr auto hasBeginEnd (int) -> decltype(std::begin(std::declval< T >()), std::end(std::declval< T >()), true);  ; Bool_t HasConsistentHashMember (const char *clName);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; Bool_t HasConsistentHashMember (TClass &clRef);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; static Bool_t & IsImplicitMTEnabledImpl ();  Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ;  ; Bool_t IsParBranchProcessingEnabled ();  Returns true if parallel branch processing is enabled. ;  ; int LogicalCPUBandwidthControl ();  Returns the available number of logical cores. ;  ; void MinimalErrorHandler (Int_t level, Bool_t abort_bool, const char *location, const char *msg);  A very simple error handler that is usually replaced by the TROOT default error handler. ;  ; void NotifyDirected (Detail::TBranchProxy *x);  ; std::ostream & operator<< (std::ostream &os, const RConcurrentHashColl::HashValue &h);  ; bool operator== (const RConcurrentHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, TClass *cl);  Add the ""pragma C++ clas",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:37208,Testability,log,logical,37208,"on at line 7345 of file TClass.cxx. ◆ HasConsistentHashMember() [2/2]. Bool_t ROOT::Internal::HasConsistentHashMember ; (; TClass & ; clRef). Return true is the Hash/RecursiveRemove setup is consistent, i.e. ; when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. ; Definition at line 7371 of file TClass.cxx. ◆ IsImplicitMTEnabledImpl(). static Bool_t & ROOT::Internal::IsImplicitMTEnabledImpl ; (; ). static . Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int ROOT::Internal::LogicalCPUBandwidthControl ; (; ). Returns the available number of logical cores. . Checks if there is CFS bandwidth control in place (linux, via cgroups, assuming standard paths); Otherwise, returns the number of logical cores provided by std::thread::hardware_concurrency() . Definition at line 50 of file RTaskArena.cxx. ◆ MinimalErrorHandler(). void ROOT::Internal::MinimalErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). A very simple error handler that is usually replaced by the TROOT default error handler. ; The minimal error handler is not serialized across threads, so that output of multi-threaded programs can get scrambled Noteabort() is only called if abort_bool is true and level >= gErrorIgnoreLevel ; Definition at line 67 of file TError.cxx. ◆ NotifyDirected(). void ROOT::Internal::NotifyDirected ; (; Detail::TBranchProxy * ; x). Definition at line 36 of file TBranchProxyDirector.cxx. ◆ operator<<(). std::ostream & ROOT::Internal::operator<< ; (; std::ostream & ; os, . const",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:37355,Testability,log,logical,37355,"TClass & ; clRef). Return true is the Hash/RecursiveRemove setup is consistent, i.e. ; when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. ; Definition at line 7371 of file TClass.cxx. ◆ IsImplicitMTEnabledImpl(). static Bool_t & ROOT::Internal::IsImplicitMTEnabledImpl ; (; ). static . Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int ROOT::Internal::LogicalCPUBandwidthControl ; (; ). Returns the available number of logical cores. . Checks if there is CFS bandwidth control in place (linux, via cgroups, assuming standard paths); Otherwise, returns the number of logical cores provided by std::thread::hardware_concurrency() . Definition at line 50 of file RTaskArena.cxx. ◆ MinimalErrorHandler(). void ROOT::Internal::MinimalErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). A very simple error handler that is usually replaced by the TROOT default error handler. ; The minimal error handler is not serialized across threads, so that output of multi-threaded programs can get scrambled Noteabort() is only called if abort_bool is true and level >= gErrorIgnoreLevel ; Definition at line 67 of file TError.cxx. ◆ NotifyDirected(). void ROOT::Internal::NotifyDirected ; (; Detail::TBranchProxy * ; x). Definition at line 36 of file TBranchProxyDirector.cxx. ◆ operator<<(). std::ostream & ROOT::Internal::operator<< ; (; std::ostream & ; os, . const RConcurrentHashColl::HashValue & ; h . ). Definition at line 24 of file RConcurrentHashColl.cxx. ◆ operator==(). bool ROO",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:15506,Usability,simpl,simple,15506," typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<typename T > ; constexpr auto hasBeginEnd (int) -> decltype(std::begin(std::declval< T >()), std::end(std::declval< T >()), true);  ; Bool_t HasConsistentHashMember (const char *clName);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; Bool_t HasConsistentHashMember (TClass &clRef);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; static Bool_t & IsImplicitMTEnabledImpl ();  Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ;  ; Bool_t IsParBranchProcessingEnabled ();  Returns true if parallel branch processing is enabled. ;  ; int LogicalCPUBandwidthControl ();  Returns the available number of logical cores. ;  ; void MinimalErrorHandler (Int_t level, Bool_t abort_bool, const char *location, const char *msg);  A very simple error handler that is usually replaced by the TROOT default error handler. ;  ; void NotifyDirected (Detail::TBranchProxy *x);  ; std::ostream & operator<< (std::ostream &os, const RConcurrentHashColl::HashValue &h);  ; bool operator== (const RConcurrentHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, TClass *cl);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; void ReleaseDefaultErrorHandler ();  Destructs res",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:37634,Usability,simpl,simple,37634,"x. ◆ IsImplicitMTEnabledImpl(). static Bool_t & ROOT::Internal::IsImplicitMTEnabledImpl ; (; ). static . Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int ROOT::Internal::LogicalCPUBandwidthControl ; (; ). Returns the available number of logical cores. . Checks if there is CFS bandwidth control in place (linux, via cgroups, assuming standard paths); Otherwise, returns the number of logical cores provided by std::thread::hardware_concurrency() . Definition at line 50 of file RTaskArena.cxx. ◆ MinimalErrorHandler(). void ROOT::Internal::MinimalErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). A very simple error handler that is usually replaced by the TROOT default error handler. ; The minimal error handler is not serialized across threads, so that output of multi-threaded programs can get scrambled Noteabort() is only called if abort_bool is true and level >= gErrorIgnoreLevel ; Definition at line 67 of file TError.cxx. ◆ NotifyDirected(). void ROOT::Internal::NotifyDirected ; (; Detail::TBranchProxy * ; x). Definition at line 36 of file TBranchProxyDirector.cxx. ◆ operator<<(). std::ostream & ROOT::Internal::operator<< ; (; std::ostream & ; os, . const RConcurrentHashColl::HashValue & ; h . ). Definition at line 24 of file RConcurrentHashColl.cxx. ◆ operator==(). bool ROOT::Internal::operator== ; (; const RConcurrentHashColl::HashValue & ; lhs, . const RConcurrentHashColl::HashValue & ; rhs . ). inline . Definition at line 69 of file RConcurrentHashColl.hxx. ◆ ParallelReduceHelper(). template<typename T > . static T ROOT::Internal::ParallelReduceHelper ; (; const std::vector< T > & ; objs, . const std::function< T(",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:1951,Availability,error,error,1951,"ationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on a general matrix to a symmetric matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  AssignSym;  Force Expression evaluation from general to symmetric. More...;  ; class  AxisAngle;  AxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotation around that axis. More...;  ; class  BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  BasicFitMethodFunction;  FitMethodFun",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:19306,Availability,error,errors,19306,"rametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricGradFunctionMultiDimTempl;  Interface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IParametricGradFunctionOneDim;  Interface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IRootFinderMethod;  Interface for finding function roots of one-dimensional functions. More...;  ; class  KahanSum;  The Kahan summation is a compensated summation algorithm, which significantly reduces numerical errors when adding a sequence of finite-precision floating point numbers. More...;  ; class  KDTree;  ; class  LCGEngine;  ; class  LocalCoordinateSystemTag;  Tag for identifying vectors based on a local coordinate system. More...;  ; class  LorentzRotation;  Lorentz transformation class with the (4D) transformation represented by a 4x4 orthosymplectic matrix. More...;  ; class  LorentzVector;  Class describing a generic LorentzVector in the 4D space-time, using the specified coordinate system for the spatial vector part. More...;  ; class  LSResidualFunc;  LSResidualFunc class description. More...;  ; class  MathMoreLib;  ; class  MatRepStd;  Expression wrapper class for Matrix objects. More...;  ; class  MatRepSym;  MatRepSym Matrix storage representation for a symmetric matrix of dimension NxN This class is a template on the contained type and on the symmetric matrix size, N. More...;  ; class  MatrixMulOp;  Class for Matrix-Matrix multiplication. More...;  ; ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:21477,Availability,error,error,21477,"ta_col_dot< 0 >;  ; struct  meta_dot;  ; struct  meta_dot< 0 >;  ; struct  meta_mag;  ; struct  meta_mag< 0 >;  ; struct  meta_matrix_dot;  ; struct  meta_matrix_dot< 0 >;  ; struct  meta_row_dot;  ; struct  meta_row_dot< 0 >;  ; class  Minimizer;  Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. More...;  ; class  MinimizerOptions;  Minimizer options. More...;  ; class  MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  MinOp;  Subtraction Operation Class. More...;  ; class  Minus;  Unary Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineI",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:56511,Availability,error,error,56511,"ame dimensions: C(i,j) = A(i,j) / B(i,j) returning a matrix expression. ;  ; template<class T , unsigned int D> ; T Dot (const SVector< T, D > &lhs, const SVector< T, D > &rhs);  Vector dot product. ;  ; template<class A , class T , unsigned int D> ; T Dot (const SVector< T, D > &lhs, const VecExpr< A, T, D > &rhs);  ; template<class A , class T , unsigned int D> ; T Dot (const VecExpr< A, T, D > &lhs, const SVector< T, D > &rhs);  ; template<class A , class B , class T , unsigned int D> ; T Dot (const VecExpr< A, T, D > &lhs, const VecExpr< B, T, D > &rhs);  ; template<class T > ; T etaMax ();  Function providing the maximum possible value of pseudorapidity for a non-zero rho, in the Scalar type with the largest dynamic range. ;  ; long double etaMax_impl ();  The following function could be called to provide the maximum possible value of pseudorapidity for a non-zero rho. ;  ; double expm1 (double x);  exp(x) -1 with error cancellation when x is small ;  ; double exponential_cdf (double x, double lambda, double x0=0);  Cumulative distribution function of the exponential distribution (lower tail). ;  ; double exponential_cdf_c (double x, double lambda, double x0=0);  Complement of the cumulative distribution function of the exponential distribution (upper tail). ;  ; template<class A , class T , unsigned int D, unsigned int D2, class R > ; Expr< UnaryOp< Fabs< T >, Expr< A, T, D, D2, R >, T >, T, D, D2, R > fabs (const Expr< A, T, D, D2, R > &rhs);  ; template<class T , unsigned int D, unsigned int D2, class R > ; Expr< UnaryOp< Fabs< T >, SMatrix< T, D, D2, R >, T >, T, D, D2, R > fabs (const SMatrix< T, D, D2, R > &rhs);  abs of a matrix m2(i,j) = | m1(i,j) | returning a matrix epression ;  ; template<class T , unsigned int D> ; VecExpr< UnaryOp< Fabs< T >, SVector< T, D >, T >, T, D > fabs (const SVector< T, D > &rhs);  abs of a vector : v2(i) = | v1(i) | returning a vector expression ;  ; template<class A , class T , unsigned int D> ; VecExpr< UnaryOp< Fabs< T >",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:110219,Availability,error,error,110219,"ribution function of the lower tail of the normal (Gaussian) distribution (normal_cdf). ;  ; double uniform_quantile_c (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the uniform (flat) distribution (uniform_cdf_c). ;  ; double uniform_quantile (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the uniform (flat) distribution (uniform_cdf). ;  ; double landau_quantile (double z, double xi=1);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the Landau distribution (landau_cdf). ;  ; double landau_quantile_c (double z, double xi=1);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the landau distribution (landau_cdf_c). ;  ; Special Functions from MathCore; double erf (double x);  Error function encountered in integrating the normal distribution. ;  ; double erfc (double x);  Complementary error function. ;  ; double tgamma (double x);  The gamma function is defined to be the extension of the factorial to real numbers. ;  ; double lgamma (double x);  Calculates the logarithm of the gamma function. ;  ; double inc_gamma (double a, double x);  Calculates the normalized (regularized) lower incomplete gamma function (lower integral) ;  ; double inc_gamma_c (double a, double x);  Calculates the normalized (regularized) upper incomplete gamma function (upper integral) ;  ; double beta (double x, double y);  Calculates the beta function. ;  ; double inc_beta (double x, double a, double b);  Calculates the normalized (regularized) incomplete beta function. ;  ; double sinint (double x);  Calculates the sine integral. ;  ; double cosint (double x);  Calculates the real part of the cosine integral Re(Ci). ;  ; Quantile Functions from MathMore; The implementation used is that of GSL. . double tdistribution_quantile_c (double z, double r);  Inverse ( \(D^{-1}(z)\)) of",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:151357,Availability,error,error,151357," lhs, . const SVector< T, D > & ; rhs . ). inline . Definition at line 181 of file Functions.h. ◆ Dot() [3/3]. template<class A , class B , class T , unsigned int D> . T ROOT::Math::Dot ; (; const VecExpr< A, T, D > & ; lhs, . const VecExpr< B, T, D > & ; rhs . ). inline . Definition at line 190 of file Functions.h. ◆ etaMax(). template<class T > . T ROOT::Math::etaMax ; (; ). inline . Function providing the maximum possible value of pseudorapidity for a non-zero rho, in the Scalar type with the largest dynamic range. ; Definition at line 51 of file etaMax.h. ◆ etaMax_impl(). long double ROOT::Math::etaMax_impl ; (; ). inline . The following function could be called to provide the maximum possible value of pseudorapidity for a non-zero rho. ; This is log ( max/min ) where max and min are the extrema of positive values for type long double. ; Definition at line 36 of file etaMax.h. ◆ expm1(). double ROOT::Math::expm1 ; (; double ; x). inline . exp(x) -1 with error cancellation when x is small ; Definition at line 110 of file Math.h. ◆ fabs() [1/2]. template<class A , class T , unsigned int D, unsigned int D2, class R > . Expr< UnaryOp< Fabs< T >, Expr< A, T, D, D2, R >, T >, T, D, D2, R > ROOT::Math::fabs ; (; const Expr< A, T, D, D2, R > & ; rhs). inline . Definition at line 160 of file UnaryOperators.h. ◆ fabs() [2/2]. template<class A , class T , unsigned int D> . VecExpr< UnaryOp< Fabs< T >, VecExpr< A, T, D >, T >, T, D > ROOT::Math::fabs ; (; const VecExpr< A, T, D > & ; rhs). inline . Definition at line 131 of file UnaryOperators.h. ◆ gaussian_cdf(). double ROOT::Math::gaussian_cdf ; (; double ; x, . double ; sigma = 1, . double ; x0 = 0 . ). inline . Alternative name for same function. ; Definition at line 485 of file ProbFuncMathCore.h. ◆ gaussian_cdf_c(). double ROOT::Math::gaussian_cdf_c ; (; double ; x, . double ; sigma = 1, . double ; x0 = 0 . ). inline . Alternative name for same function. ; Definition at line 463 of file ProbFuncMathCore.h. ◆ getCount()",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:153674,Availability,error,error,153674,"1 of file GSLMultiRootFinder.cxx. ◆ GetGSLType(). const gsl_multiroot_fsolver_type * ROOT::Math::GetGSLType ; (; GSLMultiRootFinder::EType ; type). Definition at line 183 of file GSLMultiRootFinder.cxx. ◆ getSum(). int ROOT::Math::getSum ; (; const int * ; x, . int ; n . ). Definition at line 534 of file GoFTest.cxx. ◆ human_readable(). template<class char_t , class traits_t > . std::basic_ios< char_t, traits_t > & ROOT::Math::human_readable ; (; std::basic_ios< char_t, traits_t > & ; ios). inline . Definition at line 197 of file GenVectorIO.h. ◆ Lmag(). template<class A , class T > . T ROOT::Math::Lmag ; (; const VecExpr< A, T, 4 > & ; rhs). inline . Definition at line 308 of file Functions.h. ◆ Lmag2(). template<class A , class T > . T ROOT::Math::Lmag2 ; (; const VecExpr< A, T, 4 > & ; rhs). inline . Definition at line 284 of file Functions.h. ◆ log1p(). double ROOT::Math::log1p ; (; double ; x). inline . declarations for functions which are not implemented by some compilers ; log(1+x) with error cancelation when x is small ; Definition at line 98 of file Math.h. ◆ machine_readable(). template<class char_t , class traits_t > . std::basic_ios< char_t, traits_t > & ROOT::Math::machine_readable ; (; std::basic_ios< char_t, traits_t > & ; ios). inline . Definition at line 208 of file GenVectorIO.h. ◆ Mag(). template<class A , class T , unsigned int D> . T ROOT::Math::Mag ; (; const VecExpr< A, T, D > & ; rhs). inline . Definition at line 261 of file Functions.h. ◆ Mag2(). template<class A , class T , unsigned int D> . T ROOT::Math::Mag2 ; (; const VecExpr< A, T, D > & ; rhs). inline . Definition at line 238 of file Functions.h. ◆ minfunction(). double ROOT::Math::minfunction ; (; const std::vector< double > & ; x). function to return the function values at point x ; Definition at line 19 of file RMinimizer.cxx. ◆ mingradfunction(). TVectorD ROOT::Math::mingradfunction ; (; TVectorD ; y). function to return the gradient values at point y ; Definition at line 25 of file",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:1478,Deployability,integrat,integration,1478,"space  CholeskyDecompHelpers;  helpers for CholeskyDecomp ;  ; namespace  detail;  ; namespace  GenAlgoOptUtil;  ; namespace  GenVector;  ; namespace  GenVector_detail;  ; namespace  GSLRootHelper;  Helper functions to test convergence of Root-Finding algorithms. ;  ; namespace  GSLSimAn;  ; namespace  gv_detail;  ; namespace  Impl;  ; namespace  IntegMultiDim;  ; namespace  IntegOneDim;  ; namespace  IntegOptionsUtil;  ; namespace  Integration;  ; namespace  IntegrationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on a general matrix to a symmetric matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  Assig",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:2753,Deployability,integrat,integration,2753," based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on a general matrix to a symmetric matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  AssignSym;  Force Expression evaluation from general to symmetric. More...;  ; class  AxisAngle;  AxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotation around that axis. More...;  ; class  BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  BasicFitMethodFunction;  FitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) In addition to normal function interface provide interface for calculating each data contribution to the function which is required by some algorithm (like Fumili) More...;  ; class  BasicMinimizer;  Base Minimizer class, which defines the basic functionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transformation etc. More...;  ; class  BinaryOp;  BinaryOperation class A class representing binary operators in the parse tree. More...;  ; class  BinaryOpCopyL;  Binary Operation class with value storage for the left argument. More...;  ; class  BinaryOpCopyR;  Binary Operation class with value storage for the right argument. More...;  ; class  Boost;  Lo",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:7659,Deployability,integrat,integration,7659,eration Class. More...;  ; class  Factory;  Factory class holding static functions to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager. More...;  ; class  FastInverter;  Fast Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  FastInverter< 3 >;  3x3 direct matrix inversion using Cramer Rule use only for FastInverter More...;  ; class  FastInverter< 4 >;  4x4 matrix inversion using Cramers rule. More...;  ; class  FastInverter< 5 >;  5x5 Matrix inversion using Cramers rule. More...;  ; class  FitTransformFunction;  Internal class used by GSLNLSMinimizer to implement the transformation of the chi2 function used by GSL Non-linear Least-square fitting The class is template on the FitMethodFunction type to support both gradient and non gradient functions. More...;  ; class  Functor;  Documentation for class Functor class. More...;  ; class  Functor1D;  Functor1D class for one-dimensional functions. More...;  ; class  GaussIntegrator;  User class for performing function integration. More...;  ; class  GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  GenAlgoOptions;  class implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs More...;  ; struct  GeneralHessianCalc;  ; struct  GeneralHessianCalc< double >;  ; struct  GeneralLinearFunctionDerivation;  Auxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar. More...;  ; struct  GeneralLinearFunctionDerivation< double >;  ; class  GeneticMinimizer;  GeneticMinimizer. More...;  ; struct  GeneticMinimizerParameters;  ; class  GenVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensio,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:7752,Deployability,integrat,integration,7752,ate the interfaces like ROOT::Math::Minimizer via the Plugin Manager. More...;  ; class  FastInverter;  Fast Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  FastInverter< 3 >;  3x3 direct matrix inversion using Cramer Rule use only for FastInverter More...;  ; class  FastInverter< 4 >;  4x4 matrix inversion using Cramers rule. More...;  ; class  FastInverter< 5 >;  5x5 Matrix inversion using Cramers rule. More...;  ; class  FitTransformFunction;  Internal class used by GSLNLSMinimizer to implement the transformation of the chi2 function used by GSL Non-linear Least-square fitting The class is template on the FitMethodFunction type to support both gradient and non gradient functions. More...;  ; class  Functor;  Documentation for class Functor class. More...;  ; class  Functor1D;  Functor1D class for one-dimensional functions. More...;  ; class  GaussIntegrator;  User class for performing function integration. More...;  ; class  GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  GenAlgoOptions;  class implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs More...;  ; struct  GeneralHessianCalc;  ; struct  GeneralHessianCalc< double >;  ; struct  GeneralLinearFunctionDerivation;  Auxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar. More...;  ; struct  GeneralLinearFunctionDerivation< double >;  ; class  GeneticMinimizer;  GeneticMinimizer. More...;  ; struct  GeneticMinimizerParameters;  ; class  GenVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-di,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:9640,Deployability,integrat,integration,9640,"s for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-dimensional gradient functions. More...;  ; class  GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  GSLChebSeries;  wrapper class for C struct gsl_cheb_series More...;  ; class  GSLDerivator;  Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:10223,Deployability,integrat,integration,10223," More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization al",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:17218,Deployability,integrat,integration,17218,..;  ; class  IBaseFunctionMultiDimTempl;  Documentation for the abstract class IBaseFunctionMultiDim. More...;  ; class  IBaseFunctionOneDim;  Interface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derive,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:17306,Deployability,integrat,integration,17306,tiDim. More...;  ; class  IBaseFunctionOneDim;  Interface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IP,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:17401,Deployability,integrat,integration,17401, one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional paramet,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:17516,Deployability,integrat,integration,17516,perator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. More,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:17978,Deployability,configurat,configuration,17978,"erical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricGradFunctionMultiDimTempl;  Interface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IParametricGradFunctionOneDim;  Interface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect t",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:22252,Deployability,integrat,integration,22252," function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  MinOp;  Subtraction Operation Class. More...;  ; class  Minus;  Unary Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineImpl;  ; class  MixMaxEngineImpl< ROOT_MM_N >;  ; class  MulOp;  Multiplication (element-wise) Operation Class. More...;  ; class  MultiDimParamFunctionAdapter;  MultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parametric function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiDimParamGradFunctionAdapter;  MultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parametric gradient function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiGenFunctionFitness;  ; class  MultiNumGradFunction;  MultiNumGradFunction class to wrap a n",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:32498,Deployability,integrat,integration,32498,"seOp;  Class for Transpose Operations. More...;  ; struct  TranspPolicy;  matrix transpose policy More...;  ; struct  TranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  ; class  UnaryOp;  UnaryOperation class A class representing unary operators in the parse tree. More...;  ; class  Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  VavilovAccuratePdf;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member f",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:32674,Deployability,integrat,integration,32674," ; class  Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  VavilovAccuratePdf;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:32769,Deployability,integrat,integrator,32769," ; class  Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  VavilovAccuratePdf;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:32898,Deployability,integrat,integration,32898," ; class  Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  VavilovAccuratePdf;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:33005,Deployability,integrat,integration,33005,"f;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:33198,Deployability,integrat,integration,33198,"tribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:35804,Deployability,integrat,integration,35804,"Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunctionPtr) (double);  ; typedef double(* FreeMultiFunctionPtr) (const double *);  ; typedef double(* FreeParamMultiFunctionPtr) (const double *, const double *);  ; typedef void(* GSLFdfPointer) (double, void *, double *, double *);  ; typedef double(* GSLFuncPointer) (double, void *);  Function pointer corresponding to gsl_function signature. ;  ; typedef double(* GSLMonteFuncPointer) (double *, size_t, void *);  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ;  ; typedef void(* GSLMultiFitDfPointer) (const gsl_vector *, void *, gsl_matrix *);  ; typedef void(* GSLMultiFitFdfPointer) (const gsl_vector *, void *, gsl_vector *, gsl_matrix *);  ; typedef double(* GSLMultiFitFPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef void(* GSLMultiMinDfPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef void(* GSLMultiMinFdfPointer) (const gsl_vector *, void *, double *, gsl_vector *);  ; typedef double(* GSLMultiMinFuncPointer) (const gsl_vector *, void *);  ; typedef void(* GSLMultiRootDfPointer) (const gsl_vector *, void *, gsl_matrix *);  ; typedef void(* GSLMultiRootFdfPointer) (const gsl_vector *, void *, gsl_vector *, gsl_matrix *);  ; typedef double(* GSLMultiRootFPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef GSLRngRanLuxS1 GSLRngRanLux1;  ; typedef GSLRngRanLuxS2 GSLRngRanLux2;  ; typedef GSLRngRanLuxD",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:110138,Deployability,integrat,integrating,110138,"uble normal_quantile (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the normal (Gaussian) distribution (normal_cdf). ;  ; double uniform_quantile_c (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the uniform (flat) distribution (uniform_cdf_c). ;  ; double uniform_quantile (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the uniform (flat) distribution (uniform_cdf). ;  ; double landau_quantile (double z, double xi=1);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the Landau distribution (landau_cdf). ;  ; double landau_quantile_c (double z, double xi=1);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the landau distribution (landau_cdf_c). ;  ; Special Functions from MathCore; double erf (double x);  Error function encountered in integrating the normal distribution. ;  ; double erfc (double x);  Complementary error function. ;  ; double tgamma (double x);  The gamma function is defined to be the extension of the factorial to real numbers. ;  ; double lgamma (double x);  Calculates the logarithm of the gamma function. ;  ; double inc_gamma (double a, double x);  Calculates the normalized (regularized) lower incomplete gamma function (lower integral) ;  ; double inc_gamma_c (double a, double x);  Calculates the normalized (regularized) upper incomplete gamma function (upper integral) ;  ; double beta (double x, double y);  Calculates the beta function. ;  ; double inc_beta (double x, double a, double b);  Calculates the normalized (regularized) incomplete beta function. ;  ; double sinint (double x);  Calculates the sine integral. ;  ; double cosint (double x);  Calculates the real part of the cosine integral Re(Ci). ;  ; Quantile Functions from MathMore; The implementation used is tha",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:1458,Energy Efficiency,adapt,adaptive,1458,"space  CholeskyDecompHelpers;  helpers for CholeskyDecomp ;  ; namespace  detail;  ; namespace  GenAlgoOptUtil;  ; namespace  GenVector;  ; namespace  GenVector_detail;  ; namespace  GSLRootHelper;  Helper functions to test convergence of Root-Finding algorithms. ;  ; namespace  GSLSimAn;  ; namespace  gv_detail;  ; namespace  Impl;  ; namespace  IntegMultiDim;  ; namespace  IntegOneDim;  ; namespace  IntegOptionsUtil;  ; namespace  Integration;  ; namespace  IntegrationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on a general matrix to a symmetric matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  Assig",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:9288,Energy Efficiency,adapt,adapting,9288,"nVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-dimensional gradient functions. More...;  ; class  GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  GSLChebSeries;  wrapper class for C struct gsl_cheb_series More...;  ; class  GSLDerivator;  Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:10422,Energy Efficiency,adapt,adapting,10422,"lass  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solve",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:10915,Energy Efficiency,adapt,adapting,10915,"er for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) More...;  ; class  GSLMultiRootDerivFunctionWrapper;  wrapper to a multi-dim function with derivatives for multi roots algorithm More...;  ; class  GSLMultiRootDerivSolver;  GSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives. More...;  ; class  GSLMultiRootFinder;  Class for Multidimensional root finding algorithms bassed on GSL. More...;  ; clas",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:11983,Energy Efficiency,adapt,adapting,11983,"  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) More...;  ; class  GSLMultiRootDerivFunctionWrapper;  wrapper to a multi-dim function with derivatives for multi roots algorithm More...;  ; class  GSLMultiRootDerivSolver;  GSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives. More...;  ; class  GSLMultiRootFinder;  Class for Multidimensional root finding algorithms bassed on GSL. More...;  ; class  GSLMultiRootFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiRootFunctionWrapper;  wrapper to a multi-dim function without derivatives for multi roots algorithm More...;  ; class  GSLMultiRootSolver;  GSLMultiRootSolver, internal class for implementing GSL multi-root finders not using derivatives. More...;  ; class  GSLNLSMinimizer;  GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting. More...;  ; class  GSLPlainIntegrationWorkspace;  ; class  GSLQRngNiederreiter2;  Niederreiter generator gsl_qrng_niederreiter_2 from here More...;  ; class  GSLQRngSobol;  Sobol generator gsl_qrng_sobol from here More...;  ; class  GSLQRngWrapper;  GSLQRngWrapper class to wrap gsl_qrng structure. More...;  ; class  GSLQuasiRandomEngine;  GSLQuasiRandomEngine Base class for all GSL quasi random engines, normally user instantiate the derived classes which creates",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:19288,Energy Efficiency,reduce,reduces,19288,"rametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricGradFunctionMultiDimTempl;  Interface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IParametricGradFunctionOneDim;  Interface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IRootFinderMethod;  Interface for finding function roots of one-dimensional functions. More...;  ; class  KahanSum;  The Kahan summation is a compensated summation algorithm, which significantly reduces numerical errors when adding a sequence of finite-precision floating point numbers. More...;  ; class  KDTree;  ; class  LCGEngine;  ; class  LocalCoordinateSystemTag;  Tag for identifying vectors based on a local coordinate system. More...;  ; class  LorentzRotation;  Lorentz transformation class with the (4D) transformation represented by a 4x4 orthosymplectic matrix. More...;  ; class  LorentzVector;  Class describing a generic LorentzVector in the 4D space-time, using the specified coordinate system for the spatial vector part. More...;  ; class  LSResidualFunc;  LSResidualFunc class description. More...;  ; class  MathMoreLib;  ; class  MatRepStd;  Expression wrapper class for Matrix objects. More...;  ; class  MatRepSym;  MatRepSym Matrix storage representation for a symmetric matrix of dimension NxN This class is a template on the contained type and on the symmetric matrix size, N. More...;  ; class  MatrixMulOp;  Class for Matrix-Matrix multiplication. More...;  ; ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:26573,Energy Efficiency,energy,energy,26573,"p: A += A * B ) More...;  ; class  Polar2D;  Class describing a polar 2D coordinate system based on r and phi Phi is restricted to be in the range [-PI,PI) More...;  ; class  Polar3D;  Class describing a polar coordinate system based on r, theta and phi Phi is restricted to be in the range [-PI,PI) More...;  ; class  Polynomial;  Parametric Function class describing polynomials of order n. More...;  ; class  PositionVector2D;  Class describing a generic position vector (point) in 2 dimensions. More...;  ; class  PositionVector3D;  Class describing a generic position vector (point) in 3 dimensions. More...;  ; class  PtEtaPhiE4D;  Class describing a 4D cylindrical coordinate system using Pt , Phi, Eta and E (or rho, phi, eta , T) The metric used is (-,-,-,+). More...;  ; class  PtEtaPhiM4D;  Class describing a 4D cylindrical coordinate system using Pt , Phi, Eta and M (mass) The metric used is (-,-,-,+). More...;  ; class  PxPyPzE4D;  Class describing a 4D cartesian coordinate system (x, y, z, t coordinates) or momentum-energy vectors stored as (Px, Py, Pz, E). More...;  ; class  PxPyPzM4D;  Class describing a 4D coordinate system or momentum-energy vectors stored as (Px, Py, Pz, M). More...;  ; class  QuasiRandom;  User class for MathMore random numbers template on the Engine type. More...;  ; class  Quaternion;  Rotation class with the (3D) rotation represented by a unit quaternion (u, i, j, k). More...;  ; class  Random;  Documentation for the Random class. More...;  ; class  RandomFunctions;  ; class  RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >;  Specialized implementation of the Random functions based on the GSL library. More...;  ; class  RandomFunctionsImpl;  Definition of the generic implementation class for the RandomFunctions. More...;  ; class  RandomFunctionsImpl< TRandomEngine >;  Implementation class for the RandomFunction for all the engined that derives from TRandomEngine class, which defines an interface which has TRandomEngine::Rndm()",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:26698,Energy Efficiency,energy,energy,26698,"ange [-PI,PI) More...;  ; class  Polar3D;  Class describing a polar coordinate system based on r, theta and phi Phi is restricted to be in the range [-PI,PI) More...;  ; class  Polynomial;  Parametric Function class describing polynomials of order n. More...;  ; class  PositionVector2D;  Class describing a generic position vector (point) in 2 dimensions. More...;  ; class  PositionVector3D;  Class describing a generic position vector (point) in 3 dimensions. More...;  ; class  PtEtaPhiE4D;  Class describing a 4D cylindrical coordinate system using Pt , Phi, Eta and E (or rho, phi, eta , T) The metric used is (-,-,-,+). More...;  ; class  PtEtaPhiM4D;  Class describing a 4D cylindrical coordinate system using Pt , Phi, Eta and M (mass) The metric used is (-,-,-,+). More...;  ; class  PxPyPzE4D;  Class describing a 4D cartesian coordinate system (x, y, z, t coordinates) or momentum-energy vectors stored as (Px, Py, Pz, E). More...;  ; class  PxPyPzM4D;  Class describing a 4D coordinate system or momentum-energy vectors stored as (Px, Py, Pz, M). More...;  ; class  QuasiRandom;  User class for MathMore random numbers template on the Engine type. More...;  ; class  Quaternion;  Rotation class with the (3D) rotation represented by a unit quaternion (u, i, j, k). More...;  ; class  Random;  Documentation for the Random class. More...;  ; class  RandomFunctions;  ; class  RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >;  Specialized implementation of the Random functions based on the GSL library. More...;  ; class  RandomFunctionsImpl;  Definition of the generic implementation class for the RandomFunctions. More...;  ; class  RandomFunctionsImpl< TRandomEngine >;  Implementation class for the RandomFunction for all the engined that derives from TRandomEngine class, which defines an interface which has TRandomEngine::Rndm() In this way we can have a common implementation for the RandomFunctions. More...;  ; class  RanluxppCompatEngineGslRanlxd;  Compatibility engi",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:35711,Energy Efficiency,adapt,adapting,35711,"Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunctionPtr) (double);  ; typedef double(* FreeMultiFunctionPtr) (const double *);  ; typedef double(* FreeParamMultiFunctionPtr) (const double *, const double *);  ; typedef void(* GSLFdfPointer) (double, void *, double *, double *);  ; typedef double(* GSLFuncPointer) (double, void *);  Function pointer corresponding to gsl_function signature. ;  ; typedef double(* GSLMonteFuncPointer) (double *, size_t, void *);  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ;  ; typedef void(* GSLMultiFitDfPointer) (const gsl_vector *, void *, gsl_matrix *);  ; typedef void(* GSLMultiFitFdfPointer) (const gsl_vector *, void *, gsl_vector *, gsl_matrix *);  ; typedef double(* GSLMultiFitFPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef void(* GSLMultiMinDfPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef void(* GSLMultiMinFdfPointer) (const gsl_vector *, void *, double *, gsl_vector *);  ; typedef double(* GSLMultiMinFuncPointer) (const gsl_vector *, void *);  ; typedef void(* GSLMultiRootDfPointer) (const gsl_vector *, void *, gsl_matrix *);  ; typedef void(* GSLMultiRootFdfPointer) (const gsl_vector *, void *, gsl_vector *, gsl_matrix *);  ; typedef double(* GSLMultiRootFPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef GSLRngRanLuxS1 GSLRngRanLux1;  ; typedef GSLRngRanLuxS2 GSLRngRanLux2;  ; typedef GSLRngRanLuxD",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:1478,Integrability,integrat,integration,1478,"space  CholeskyDecompHelpers;  helpers for CholeskyDecomp ;  ; namespace  detail;  ; namespace  GenAlgoOptUtil;  ; namespace  GenVector;  ; namespace  GenVector_detail;  ; namespace  GSLRootHelper;  Helper functions to test convergence of Root-Finding algorithms. ;  ; namespace  GSLSimAn;  ; namespace  gv_detail;  ; namespace  Impl;  ; namespace  IntegMultiDim;  ; namespace  IntegOneDim;  ; namespace  IntegOptionsUtil;  ; namespace  Integration;  ; namespace  IntegrationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on a general matrix to a symmetric matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  Assig",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:2753,Integrability,integrat,integration,2753," based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on a general matrix to a symmetric matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  AssignSym;  Force Expression evaluation from general to symmetric. More...;  ; class  AxisAngle;  AxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotation around that axis. More...;  ; class  BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  BasicFitMethodFunction;  FitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) In addition to normal function interface provide interface for calculating each data contribution to the function which is required by some algorithm (like Fumili) More...;  ; class  BasicMinimizer;  Base Minimizer class, which defines the basic functionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transformation etc. More...;  ; class  BinaryOp;  BinaryOperation class A class representing binary operators in the parse tree. More...;  ; class  BinaryOpCopyL;  Binary Operation class with value storage for the left argument. More...;  ; class  BinaryOpCopyR;  Binary Operation class with value storage for the right argument. More...;  ; class  Boost;  Lo",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:3060,Integrability,interface,interface,3060,"re...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  AssignSym;  Force Expression evaluation from general to symmetric. More...;  ; class  AxisAngle;  AxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotation around that axis. More...;  ; class  BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  BasicFitMethodFunction;  FitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) In addition to normal function interface provide interface for calculating each data contribution to the function which is required by some algorithm (like Fumili) More...;  ; class  BasicMinimizer;  Base Minimizer class, which defines the basic functionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transformation etc. More...;  ; class  BinaryOp;  BinaryOperation class A class representing binary operators in the parse tree. More...;  ; class  BinaryOpCopyL;  Binary Operation class with value storage for the left argument. More...;  ; class  BinaryOpCopyR;  Binary Operation class with value storage for the right argument. More...;  ; class  Boost;  Lorentz boost class with the (4D) transformation represented internally by a 4x4 orthosymplectic matrix. More...;  ; class  BoostX;  Class representing a Lorentz Boost along the X axis, by beta. More...;  ; class  BoostY;  Class representing a Lorentz Boost a",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:3078,Integrability,interface,interface,3078,"re...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  AssignSym;  Force Expression evaluation from general to symmetric. More...;  ; class  AxisAngle;  AxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotation around that axis. More...;  ; class  BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  BasicFitMethodFunction;  FitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) In addition to normal function interface provide interface for calculating each data contribution to the function which is required by some algorithm (like Fumili) More...;  ; class  BasicMinimizer;  Base Minimizer class, which defines the basic functionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transformation etc. More...;  ; class  BinaryOp;  BinaryOperation class A class representing binary operators in the parse tree. More...;  ; class  BinaryOpCopyL;  Binary Operation class with value storage for the left argument. More...;  ; class  BinaryOpCopyR;  Binary Operation class with value storage for the right argument. More...;  ; class  Boost;  Lorentz boost class with the (4D) transformation represented internally by a 4x4 orthosymplectic matrix. More...;  ; class  BoostX;  Class representing a Lorentz Boost along the X axis, by beta. More...;  ; class  BoostY;  Class representing a Lorentz Boost a",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:6729,Integrability,interface,interfaces,6729,"numerical derivative of a function. More...;  ; class  Determinant;  Detrminant for a general squared matrix Function to compute the determinant from a square matrix ( \( \det(A)\)) of dimension idim and order n. More...;  ; class  DisplacementVector2D;  Class describing a generic displacement vector in 2 dimensions. More...;  ; class  DisplacementVector3D;  Class describing a generic displacement vector in 3 dimensions. More...;  ; class  DistSampler;  Interface class for generic sampling of a distribution, i.e. More...;  ; class  DistSamplerOptions;  DistSampler options class. More...;  ; class  DivOp;  Division (element-wise) Operation Class. More...;  ; class  EulerAngles;  EulerAngles class describing rotation as three angles (Euler Angles). More...;  ; struct  EvaluatorOneDim;  ; struct  EvaluatorOneDim< const ROOT::Math::IParamMultiFunction & >;  ; class  Expr;  ; class  Fabs;  Unary abs Operation Class. More...;  ; class  Factory;  Factory class holding static functions to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager. More...;  ; class  FastInverter;  Fast Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  FastInverter< 3 >;  3x3 direct matrix inversion using Cramer Rule use only for FastInverter More...;  ; class  FastInverter< 4 >;  4x4 matrix inversion using Cramers rule. More...;  ; class  FastInverter< 5 >;  5x5 Matrix inversion using Cramers rule. More...;  ; class  FitTransformFunction;  Internal class used by GSLNLSMinimizer to implement the transformation of the chi2 function used by GSL Non-linear Least-square fitting The class is template on the FitMethodFunction type to support both gradient and non gradient functions. More...;  ; class  Functor;  Documentation for class Functor class. More...;  ; class  Functor1D;  Functor1D class for one-dimensional functions. More...;  ; class  GaussIntegrator;  User class for performing function integration. More...;  ; class  GaussLegendreIntegrator;  User ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:7659,Integrability,integrat,integration,7659,eration Class. More...;  ; class  Factory;  Factory class holding static functions to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager. More...;  ; class  FastInverter;  Fast Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  FastInverter< 3 >;  3x3 direct matrix inversion using Cramer Rule use only for FastInverter More...;  ; class  FastInverter< 4 >;  4x4 matrix inversion using Cramers rule. More...;  ; class  FastInverter< 5 >;  5x5 Matrix inversion using Cramers rule. More...;  ; class  FitTransformFunction;  Internal class used by GSLNLSMinimizer to implement the transformation of the chi2 function used by GSL Non-linear Least-square fitting The class is template on the FitMethodFunction type to support both gradient and non gradient functions. More...;  ; class  Functor;  Documentation for class Functor class. More...;  ; class  Functor1D;  Functor1D class for one-dimensional functions. More...;  ; class  GaussIntegrator;  User class for performing function integration. More...;  ; class  GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  GenAlgoOptions;  class implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs More...;  ; struct  GeneralHessianCalc;  ; struct  GeneralHessianCalc< double >;  ; struct  GeneralLinearFunctionDerivation;  Auxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar. More...;  ; struct  GeneralLinearFunctionDerivation< double >;  ; class  GeneticMinimizer;  GeneticMinimizer. More...;  ; struct  GeneticMinimizerParameters;  ; class  GenVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensio,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:7752,Integrability,integrat,integration,7752,ate the interfaces like ROOT::Math::Minimizer via the Plugin Manager. More...;  ; class  FastInverter;  Fast Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  FastInverter< 3 >;  3x3 direct matrix inversion using Cramer Rule use only for FastInverter More...;  ; class  FastInverter< 4 >;  4x4 matrix inversion using Cramers rule. More...;  ; class  FastInverter< 5 >;  5x5 Matrix inversion using Cramers rule. More...;  ; class  FitTransformFunction;  Internal class used by GSLNLSMinimizer to implement the transformation of the chi2 function used by GSL Non-linear Least-square fitting The class is template on the FitMethodFunction type to support both gradient and non gradient functions. More...;  ; class  Functor;  Documentation for class Functor class. More...;  ; class  Functor1D;  Functor1D class for one-dimensional functions. More...;  ; class  GaussIntegrator;  User class for performing function integration. More...;  ; class  GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  GenAlgoOptions;  class implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs More...;  ; struct  GeneralHessianCalc;  ; struct  GeneralHessianCalc< double >;  ; struct  GeneralLinearFunctionDerivation;  Auxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar. More...;  ; struct  GeneralLinearFunctionDerivation< double >;  ; class  GeneticMinimizer;  GeneticMinimizer. More...;  ; struct  GeneticMinimizerParameters;  ; class  GenVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-di,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:8795,Integrability,wrap,wrapper,8795,ass implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs More...;  ; struct  GeneralHessianCalc;  ; struct  GeneralHessianCalc< double >;  ; struct  GeneralLinearFunctionDerivation;  Auxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar. More...;  ; struct  GeneralLinearFunctionDerivation< double >;  ; class  GeneticMinimizer;  GeneticMinimizer. More...;  ; struct  GeneticMinimizerParameters;  ; class  GenVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-dimensional gradient functions. More...;  ; class  GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  GSLChebSeries;  wrapper class for C struct gsl_cheb_series More...;  ; class  GSLDerivator;  Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMC,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:8877,Integrability,wrap,wrapper,8877, a map of string-value pairs More...;  ; struct  GeneralHessianCalc;  ; struct  GeneralHessianCalc< double >;  ; struct  GeneralLinearFunctionDerivation;  Auxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar. More...;  ; struct  GeneralLinearFunctionDerivation< double >;  ; class  GeneticMinimizer;  GeneticMinimizer. More...;  ; struct  GeneticMinimizerParameters;  ; class  GenVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-dimensional gradient functions. More...;  ; class  GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  GSLChebSeries;  wrapper class for C struct gsl_cheb_series More...;  ; class  GSLDerivator;  Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimiz,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:9409,Integrability,wrap,wrap,9409,"ate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-dimensional gradient functions. More...;  ; class  GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  GSLChebSeries;  wrapper class for C struct gsl_cheb_series More...;  ; class  GSLDerivator;  Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:9640,Integrability,integrat,integration,9640,"s for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-dimensional gradient functions. More...;  ; class  GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  GSLChebSeries;  wrapper class for C struct gsl_cheb_series More...;  ; class  GSLDerivator;  Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:10136,Integrability,wrap,wrapper,10136," More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization al",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:10223,Integrability,integrat,integration,10223," More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization al",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:10602,Integrability,wrap,wrapper,10602,"erical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) More...;  ; class  GSLMultiRootDerivFunctionWrapper;  wrapper to a multi-dim function wi",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:11066,Integrability,wrap,wrapper,11066,"r;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) More...;  ; class  GSLMultiRootDerivFunctionWrapper;  wrapper to a multi-dim function with derivatives for multi roots algorithm More...;  ; class  GSLMultiRootDerivSolver;  GSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives. More...;  ; class  GSLMultiRootFinder;  Class for Multidimensional root finding algorithms bassed on GSL. More...;  ; class  GSLMultiRootFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function cla",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:11599,Integrability,wrap,wrapper,11599,"multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) More...;  ; class  GSLMultiRootDerivFunctionWrapper;  wrapper to a multi-dim function with derivatives for multi roots algorithm More...;  ; class  GSLMultiRootDerivSolver;  GSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives. More...;  ; class  GSLMultiRootFinder;  Class for Multidimensional root finding algorithms bassed on GSL. More...;  ; class  GSLMultiRootFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiRootFunctionWrapper;  wrapper to a multi-dim function without derivatives for multi roots algorithm More...;  ; class  GSLMultiRootSolver;  GSLMultiRootSolver, internal class for implementing GSL multi-root finders not using derivatives. More...;  ; class  GSLNLSMinimizer;  GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting. More...;  ; class  GSLPlainIntegrationWorkspace;  ; clas",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:12165,Integrability,wrap,wrapper,12165,"LMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) More...;  ; class  GSLMultiRootDerivFunctionWrapper;  wrapper to a multi-dim function with derivatives for multi roots algorithm More...;  ; class  GSLMultiRootDerivSolver;  GSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives. More...;  ; class  GSLMultiRootFinder;  Class for Multidimensional root finding algorithms bassed on GSL. More...;  ; class  GSLMultiRootFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiRootFunctionWrapper;  wrapper to a multi-dim function without derivatives for multi roots algorithm More...;  ; class  GSLMultiRootSolver;  GSLMultiRootSolver, internal class for implementing GSL multi-root finders not using derivatives. More...;  ; class  GSLNLSMinimizer;  GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting. More...;  ; class  GSLPlainIntegrationWorkspace;  ; class  GSLQRngNiederreiter2;  Niederreiter generator gsl_qrng_niederreiter_2 from here More...;  ; class  GSLQRngSobol;  Sobol generator gsl_qrng_sobol from here More...;  ; class  GSLQRngWrapper;  GSLQRngWrapper class to wrap gsl_qrng structure. More...;  ; class  GSLQuasiRandomEngine;  GSLQuasiRandomEngine Base class for all GSL quasi random engines, normally user instantiate the derived classes which creates internally the generator and uses the class ROOT::Math::QuasiRandom. More...;  ; class  GSLRandomEngine;  GSLRandomEngine Base class for all GSL random engines",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:12834,Integrability,wrap,wrap,12834,"ore...;  ; class  GSLMultiRootFinder;  Class for Multidimensional root finding algorithms bassed on GSL. More...;  ; class  GSLMultiRootFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiRootFunctionWrapper;  wrapper to a multi-dim function without derivatives for multi roots algorithm More...;  ; class  GSLMultiRootSolver;  GSLMultiRootSolver, internal class for implementing GSL multi-root finders not using derivatives. More...;  ; class  GSLNLSMinimizer;  GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting. More...;  ; class  GSLPlainIntegrationWorkspace;  ; class  GSLQRngNiederreiter2;  Niederreiter generator gsl_qrng_niederreiter_2 from here More...;  ; class  GSLQRngSobol;  Sobol generator gsl_qrng_sobol from here More...;  ; class  GSLQRngWrapper;  GSLQRngWrapper class to wrap gsl_qrng structure. More...;  ; class  GSLQuasiRandomEngine;  GSLQuasiRandomEngine Base class for all GSL quasi random engines, normally user instantiate the derived classes which creates internally the generator and uses the class ROOT::Math::QuasiRandom. More...;  ; class  GSLRandomEngine;  GSLRandomEngine Base class for all GSL random engines, normally user instantiate the derived classes which creates internally the generator. More...;  ; class  GSLRngCMRG;  Combined multiple recursive generator (L'Ecuyer) see here More...;  ; class  GSLRngGFSR4;  Lagged Fibonacci generator by Ziff see here More...;  ; class  GSLRngMinStd;  MINSTD generator (Park and Miller) see here More...;  ; class  GSLRngMixMax;  MixMax generator based on ROOT::Math::MixMaxEngine of N=240. More...;  ; class  GSLRngMRG;  5-th order multiple recursive generator (L'Ecuyer, Blouin and Coutre) see here More...;  ; class  GSLRngMT;  Mersenne-Twister generator gsl_rng_mt19937 from here More...;  ; c",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:14889,Integrability,wrap,wrapping,14889,"er) (default luxury level, p = 223) (This is eequivalent to TRandom1 with default luxury level) see here More...;  ; class  GSLRngRanLuxD1;  Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 1 (It throws away 202 value for every 12 used) see here More...;  ; class  GSLRngRanLuxD2;  Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 2 (It throws away 397 value for every 12 used) see here More...;  ; class  GSLRngRanLuxS1;  Second generation of Ranlux generator for single precision with luxury level of 1 (It throws away 202 values for every 12 used) see here More...;  ; class  GSLRngRanLuxS2;  Second generation of Ranlux generator for Single precision with luxury level of 2 (It throws away 397 value for every 12 used) see here More...;  ; class  GSLRngRanMar;  RANMAR generator see here More...;  ; struct  GSLRngROOTWrapper;  class for wrapping ROOT Engines in gsl_rng types which can be used as extra GSL random number generators For this we need to implement functions which will be called by gsl_rng. More...;  ; class  GSLRngTaus;  Tausworthe generator by L'Ecuyer see here More...;  ; class  GSLRngWrapper;  GSLRngWrapper class to wrap gsl_rng structure. More...;  ; class  GSLRootFdFSolver;  Root-Finder with derivatives implementation class using GSL. More...;  ; class  GSLRootFinder;  Base class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives. More...;  ; class  GSLRootFinderDeriv;  Base class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives. More...;  ; class  GSLRootFSolver;  Root-Finder implementation class using GSL. More...;  ; class  GSLSimAnFunc;  GSLSimAnFunc class description. More...;  ; class  GSLSimAnMinimizer;  GSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL. More...;  ; class  GSLSimAnnealing;  GSLSimAnnealing class for pe",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:15189,Integrability,wrap,wrap,15189,xury level of 1 (It throws away 202 value for every 12 used) see here More...;  ; class  GSLRngRanLuxD2;  Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 2 (It throws away 397 value for every 12 used) see here More...;  ; class  GSLRngRanLuxS1;  Second generation of Ranlux generator for single precision with luxury level of 1 (It throws away 202 values for every 12 used) see here More...;  ; class  GSLRngRanLuxS2;  Second generation of Ranlux generator for Single precision with luxury level of 2 (It throws away 397 value for every 12 used) see here More...;  ; class  GSLRngRanMar;  RANMAR generator see here More...;  ; struct  GSLRngROOTWrapper;  class for wrapping ROOT Engines in gsl_rng types which can be used as extra GSL random number generators For this we need to implement functions which will be called by gsl_rng. More...;  ; class  GSLRngTaus;  Tausworthe generator by L'Ecuyer see here More...;  ; class  GSLRngWrapper;  GSLRngWrapper class to wrap gsl_rng structure. More...;  ; class  GSLRootFdFSolver;  Root-Finder with derivatives implementation class using GSL. More...;  ; class  GSLRootFinder;  Base class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives. More...;  ; class  GSLRootFinderDeriv;  Base class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives. More...;  ; class  GSLRootFSolver;  Root-Finder implementation class using GSL. More...;  ; class  GSLSimAnFunc;  GSLSimAnFunc class description. More...;  ; class  GSLSimAnMinimizer;  GSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL. More...;  ; class  GSLSimAnnealing;  GSLSimAnnealing class for performing a simulated annealing search of a multidimensional function. More...;  ; struct  GSLSimAnParams;  structure holding the simulated annealing parameters More...;  ; class  GSLVegasIntegrationWorkspace;  workspace for ,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:17218,Integrability,integrat,integration,17218,..;  ; class  IBaseFunctionMultiDimTempl;  Documentation for the abstract class IBaseFunctionMultiDim. More...;  ; class  IBaseFunctionOneDim;  Interface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derive,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:17306,Integrability,integrat,integration,17306,tiDim. More...;  ; class  IBaseFunctionOneDim;  Interface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IP,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:17401,Integrability,integrat,integration,17401, one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional paramet,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:17516,Integrability,integrat,integration,17516,perator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. More,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:17955,Integrability,interface,interface,17955,"erical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricGradFunctionMultiDimTempl;  Interface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IParametricGradFunctionOneDim;  Interface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect t",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:18095,Integrability,interface,interface,18095," class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricGradFunctionMultiDimTempl;  Interface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IParametricGradFunctionOneDim;  Interface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IRootFinderMethod;  Interface for finding function roo",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:18335,Integrability,interface,interface,18335,"r performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricGradFunctionMultiDimTempl;  Interface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IParametricGradFunctionOneDim;  Interface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IRootFinderMethod;  Interface for finding function roots of one-dimensional functions. More...;  ; class  KahanSum;  The Kahan summation is a compensated summation algorithm, which significantly reduces numerical errors when adding a sequence of finite-precision floating point numbers.",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:19969,Integrability,wrap,wrapper,19969,"tion with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IRootFinderMethod;  Interface for finding function roots of one-dimensional functions. More...;  ; class  KahanSum;  The Kahan summation is a compensated summation algorithm, which significantly reduces numerical errors when adding a sequence of finite-precision floating point numbers. More...;  ; class  KDTree;  ; class  LCGEngine;  ; class  LocalCoordinateSystemTag;  Tag for identifying vectors based on a local coordinate system. More...;  ; class  LorentzRotation;  Lorentz transformation class with the (4D) transformation represented by a 4x4 orthosymplectic matrix. More...;  ; class  LorentzVector;  Class describing a generic LorentzVector in the 4D space-time, using the specified coordinate system for the spatial vector part. More...;  ; class  LSResidualFunc;  LSResidualFunc class description. More...;  ; class  MathMoreLib;  ; class  MatRepStd;  Expression wrapper class for Matrix objects. More...;  ; class  MatRepSym;  MatRepSym Matrix storage representation for a symmetric matrix of dimension NxN This class is a template on the contained type and on the symmetric matrix size, N. More...;  ; class  MatrixMulOp;  Class for Matrix-Matrix multiplication. More...;  ; class  MersenneTwisterEngine;  Random number generator class based on M. More...;  ; struct  meta_col_dot;  ; struct  meta_col_dot< 0 >;  ; struct  meta_dot;  ; struct  meta_dot< 0 >;  ; struct  meta_mag;  ; struct  meta_mag< 0 >;  ; struct  meta_matrix_dot;  ; struct  meta_matrix_dot< 0 >;  ; struct  meta_row_dot;  ; struct  meta_row_dot< 0 >;  ; class  Minimizer;  Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. More...;  ; class  MinimizerOptions;  Minimizer options. More...;  ; class  MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to d",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:20691,Integrability,interface,interface,20691,"on;  Lorentz transformation class with the (4D) transformation represented by a 4x4 orthosymplectic matrix. More...;  ; class  LorentzVector;  Class describing a generic LorentzVector in the 4D space-time, using the specified coordinate system for the spatial vector part. More...;  ; class  LSResidualFunc;  LSResidualFunc class description. More...;  ; class  MathMoreLib;  ; class  MatRepStd;  Expression wrapper class for Matrix objects. More...;  ; class  MatRepSym;  MatRepSym Matrix storage representation for a symmetric matrix of dimension NxN This class is a template on the contained type and on the symmetric matrix size, N. More...;  ; class  MatrixMulOp;  Class for Matrix-Matrix multiplication. More...;  ; class  MersenneTwisterEngine;  Random number generator class based on M. More...;  ; struct  meta_col_dot;  ; struct  meta_col_dot< 0 >;  ; struct  meta_dot;  ; struct  meta_dot< 0 >;  ; struct  meta_mag;  ; struct  meta_mag< 0 >;  ; struct  meta_matrix_dot;  ; struct  meta_matrix_dot< 0 >;  ; struct  meta_row_dot;  ; struct  meta_row_dot< 0 >;  ; class  Minimizer;  Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. More...;  ; class  MinimizerOptions;  Minimizer options. More...;  ; class  MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:22252,Integrability,integrat,integration,22252," function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  MinOp;  Subtraction Operation Class. More...;  ; class  Minus;  Unary Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineImpl;  ; class  MixMaxEngineImpl< ROOT_MM_N >;  ; class  MulOp;  Multiplication (element-wise) Operation Class. More...;  ; class  MultiDimParamFunctionAdapter;  MultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parametric function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiDimParamGradFunctionAdapter;  MultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parametric gradient function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiGenFunctionFitness;  ; class  MultiNumGradFunction;  MultiNumGradFunction class to wrap a n",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:22317,Integrability,wrap,wrapper,22317,"formation of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  MinOp;  Subtraction Operation Class. More...;  ; class  Minus;  Unary Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineImpl;  ; class  MixMaxEngineImpl< ROOT_MM_N >;  ; class  MulOp;  Multiplication (element-wise) Operation Class. More...;  ; class  MultiDimParamFunctionAdapter;  MultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parametric function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiDimParamGradFunctionAdapter;  MultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parametric gradient function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiGenFunctionFitness;  ; class  MultiNumGradFunction;  MultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:22602,Integrability,wrap,wrap,22602," Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineImpl;  ; class  MixMaxEngineImpl< ROOT_MM_N >;  ; class  MulOp;  Multiplication (element-wise) Operation Class. More...;  ; class  MultiDimParamFunctionAdapter;  MultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parametric function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiDimParamGradFunctionAdapter;  MultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parametric gradient function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiGenFunctionFitness;  ; class  MultiNumGradFunction;  MultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) More...;  ; struct  MultPolicy;  matrix-matrix multiplication policy More...;  ; struct  NullTypeFunc1D;  ; class  OneDimMultiFunctionAdapter;  OneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one. More...;  ; class  OneDimParamFunctionAdapter;  OneDimParamFunct",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:22688,Integrability,interface,interface,22688," Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineImpl;  ; class  MixMaxEngineImpl< ROOT_MM_N >;  ; class  MulOp;  Multiplication (element-wise) Operation Class. More...;  ; class  MultiDimParamFunctionAdapter;  MultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parametric function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiDimParamGradFunctionAdapter;  MultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parametric gradient function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiGenFunctionFitness;  ; class  MultiNumGradFunction;  MultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) More...;  ; struct  MultPolicy;  matrix-matrix multiplication policy More...;  ; struct  NullTypeFunc1D;  ; class  OneDimMultiFunctionAdapter;  OneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one. More...;  ; class  OneDimParamFunctionAdapter;  OneDimParamFunct",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:22889,Integrability,wrap,wrap,22889,"D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineImpl;  ; class  MixMaxEngineImpl< ROOT_MM_N >;  ; class  MulOp;  Multiplication (element-wise) Operation Class. More...;  ; class  MultiDimParamFunctionAdapter;  MultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parametric function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiDimParamGradFunctionAdapter;  MultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parametric gradient function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiGenFunctionFitness;  ; class  MultiNumGradFunction;  MultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) More...;  ; struct  MultPolicy;  matrix-matrix multiplication policy More...;  ; struct  NullTypeFunc1D;  ; class  OneDimMultiFunctionAdapter;  OneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one. More...;  ; class  OneDimParamFunctionAdapter;  OneDimParamFunctionAdapter class to wrap a multi-dim parametric function in one dimensional one. More...;  ; class  ParamFunction;  Base template class for all Parametric Functions. More...;  ; class  ParamFunctionBase;  class defining the signature for multi-dim parametric functions More...;  ; class  Para",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:22993,Integrability,interface,interface,22993,"D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineImpl;  ; class  MixMaxEngineImpl< ROOT_MM_N >;  ; class  MulOp;  Multiplication (element-wise) Operation Class. More...;  ; class  MultiDimParamFunctionAdapter;  MultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parametric function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiDimParamGradFunctionAdapter;  MultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parametric gradient function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiGenFunctionFitness;  ; class  MultiNumGradFunction;  MultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) More...;  ; struct  MultPolicy;  matrix-matrix multiplication policy More...;  ; struct  NullTypeFunc1D;  ; class  OneDimMultiFunctionAdapter;  OneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one. More...;  ; class  OneDimParamFunctionAdapter;  OneDimParamFunctionAdapter class to wrap a multi-dim parametric function in one dimensional one. More...;  ; class  ParamFunction;  Base template class for all Parametric Functions. More...;  ; class  ParamFunctionBase;  class defining the signature for multi-dim parametric functions More...;  ; class  Para",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:23205,Integrability,wrap,wrap,23205,R multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineImpl;  ; class  MixMaxEngineImpl< ROOT_MM_N >;  ; class  MulOp;  Multiplication (element-wise) Operation Class. More...;  ; class  MultiDimParamFunctionAdapter;  MultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parametric function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiDimParamGradFunctionAdapter;  MultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parametric gradient function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiGenFunctionFitness;  ; class  MultiNumGradFunction;  MultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) More...;  ; struct  MultPolicy;  matrix-matrix multiplication policy More...;  ; struct  NullTypeFunc1D;  ; class  OneDimMultiFunctionAdapter;  OneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one. More...;  ; class  OneDimParamFunctionAdapter;  OneDimParamFunctionAdapter class to wrap a multi-dim parametric function in one dimensional one. More...;  ; class  ParamFunction;  Base template class for all Parametric Functions. More...;  ; class  ParamFunctionBase;  class defining the signature for multi-dim parametric functions More...;  ; class  ParamFunctorHandler;  ParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions. More...;  ; class  ParamFunctorTempl;  Param Functor class for Multidimensional functions. More...;  ; class  ParamMemFunHandler;  ParamFunctor Handler to Wrap ,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:23536,Integrability,wrap,wrap,23536,". More...;  ; class  MultiDimParamFunctionAdapter;  MultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parametric function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiDimParamGradFunctionAdapter;  MultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parametric gradient function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiGenFunctionFitness;  ; class  MultiNumGradFunction;  MultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) More...;  ; struct  MultPolicy;  matrix-matrix multiplication policy More...;  ; struct  NullTypeFunc1D;  ; class  OneDimMultiFunctionAdapter;  OneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one. More...;  ; class  OneDimParamFunctionAdapter;  OneDimParamFunctionAdapter class to wrap a multi-dim parametric function in one dimensional one. More...;  ; class  ParamFunction;  Base template class for all Parametric Functions. More...;  ; class  ParamFunctionBase;  class defining the signature for multi-dim parametric functions More...;  ; class  ParamFunctorHandler;  ParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions. More...;  ; class  ParamFunctorTempl;  Param Functor class for Multidimensional functions. More...;  ; class  ParamMemFunHandler;  ParamFunctor Handler to Wrap pointers to member functions. More...;  ; class  PDFIntegral;  ; struct  PlaceExpr;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  ; struct  PlaceMat",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:23677,Integrability,wrap,wrap,23677,"parametric function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiDimParamGradFunctionAdapter;  MultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parametric gradient function interface This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiGenFunctionFitness;  ; class  MultiNumGradFunction;  MultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) More...;  ; struct  MultPolicy;  matrix-matrix multiplication policy More...;  ; struct  NullTypeFunc1D;  ; class  OneDimMultiFunctionAdapter;  OneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one. More...;  ; class  OneDimParamFunctionAdapter;  OneDimParamFunctionAdapter class to wrap a multi-dim parametric function in one dimensional one. More...;  ; class  ParamFunction;  Base template class for all Parametric Functions. More...;  ; class  ParamFunctionBase;  class defining the signature for multi-dim parametric functions More...;  ; class  ParamFunctorHandler;  ParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions. More...;  ; class  ParamFunctorTempl;  Param Functor class for Multidimensional functions. More...;  ; class  ParamMemFunHandler;  ParamFunctor Handler to Wrap pointers to member functions. More...;  ; class  PDFIntegral;  ; struct  PlaceExpr;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  ; struct  PlaceMatrix;  Structure to deal when a submatrix is placed in a matrix. More...;  ; struct  PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:24013,Integrability,wrap,wrapping,24013," This is used typically in fitting where internally the function is stored as multidimensional. More...;  ; class  MultiGenFunctionFitness;  ; class  MultiNumGradFunction;  MultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) More...;  ; struct  MultPolicy;  matrix-matrix multiplication policy More...;  ; struct  NullTypeFunc1D;  ; class  OneDimMultiFunctionAdapter;  OneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one. More...;  ; class  OneDimParamFunctionAdapter;  OneDimParamFunctionAdapter class to wrap a multi-dim parametric function in one dimensional one. More...;  ; class  ParamFunction;  Base template class for all Parametric Functions. More...;  ; class  ParamFunctionBase;  class defining the signature for multi-dim parametric functions More...;  ; class  ParamFunctorHandler;  ParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions. More...;  ; class  ParamFunctorTempl;  Param Functor class for Multidimensional functions. More...;  ; class  ParamMemFunHandler;  ParamFunctor Handler to Wrap pointers to member functions. More...;  ; class  PDFIntegral;  ; struct  PlaceExpr;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  ; struct  PlaceMatrix;  Structure to deal when a submatrix is placed in a matrix. More...;  ; struct  PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  ; struct  PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  ; struct  PlainParameters;  ; struct  PlusEquals;  Evaluate the expression performing a += operation Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) More...;  ; struct  PlusEquals< T, D1, ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:27497,Integrability,interface,interface,27497,"lass  PxPyPzE4D;  Class describing a 4D cartesian coordinate system (x, y, z, t coordinates) or momentum-energy vectors stored as (Px, Py, Pz, E). More...;  ; class  PxPyPzM4D;  Class describing a 4D coordinate system or momentum-energy vectors stored as (Px, Py, Pz, M). More...;  ; class  QuasiRandom;  User class for MathMore random numbers template on the Engine type. More...;  ; class  Quaternion;  Rotation class with the (3D) rotation represented by a unit quaternion (u, i, j, k). More...;  ; class  Random;  Documentation for the Random class. More...;  ; class  RandomFunctions;  ; class  RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >;  Specialized implementation of the Random functions based on the GSL library. More...;  ; class  RandomFunctionsImpl;  Definition of the generic implementation class for the RandomFunctions. More...;  ; class  RandomFunctionsImpl< TRandomEngine >;  Implementation class for the RandomFunction for all the engined that derives from TRandomEngine class, which defines an interface which has TRandomEngine::Rndm() In this way we can have a common implementation for the RandomFunctions. More...;  ; class  RanluxppCompatEngineGslRanlxd;  Compatibility engine for gsl_rng_ranlxd* from the GNU Scientific Library. More...;  ; class  RanluxppCompatEngineGslRanlxs;  Compatibility engine for gsl_rng_ranlxs* from the GNU Scientific Library. More...;  ; class  RanluxppCompatEngineJames;  ; class  RanluxppCompatEngineLuescherImpl;  ; class  RanluxppCompatEngineLuescherRanlxd;  Compatibility engine for Lüscher's ranlxd implementation written in C. More...;  ; class  RanluxppCompatEngineLuescherRanlxs;  Compatibility engine for Lüscher's ranlxs implementation written in C. More...;  ; class  RanluxppCompatEngineStdRanlux24;  Compatibility engine for std::ranlux24 from the C++ standard. More...;  ; class  RanluxppCompatEngineStdRanlux48;  Compatibility engine for std::ranlux48 from the C++ standard. More...;  ; class  RanluxppEngine;  Implem",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:30764,Integrability,wrap,wrap,30764,"y a third rotation of an angle psi (roll) about the X axis. More...;  ; struct  RowOffsets;  Static structure to keep the conversion from (i,j) to offsets in the storage data for a symmetric matrix. More...;  ; class  SDeterminant;  Dsfact. More...;  ; class  SinVariableTransformation;  Sin Transformation class for dealing with double bounded variables. More...;  ; class  SInverter;  Dsinv. More...;  ; struct  SkipFunction;  ; struct  SkipFunction< 0 >;  ; class  SMatrix;  SMatrix: a generic fixed size D1 x D2 Matrix class. More...;  ; struct  SMatrixIdentity;  ; struct  SMatrixNoInit;  ; class  Sqr;  Unary Square Operation Class. More...;  ; class  Sqrt;  Unary Square Root Operation Class. More...;  ; class  SqrtLowVariableTransformation;  Sqrt Transformation class for dealing with lower bounded variables. More...;  ; class  SqrtUpVariableTransformation;  Sqrt Transformation class for dealing with upper bounded variables. More...;  ; class  StdEngine;  Class to wrap engines from the C++ standard random library in the ROOT Random interface. More...;  ; struct  StdEngineType;  ; struct  StdEngineType< std::knuth_b >;  ; struct  StdEngineType< std::minstd_rand >;  ; struct  StdEngineType< std::mt19937 >;  ; struct  StdEngineType< std::mt19937_64 >;  ; struct  StdEngineType< std::random_device >;  ; struct  StdEngineType< std::ranlux24 >;  ; struct  StdEngineType< std::ranlux48 >;  ; class  StdRandomEngine;  ; class  SVector;  SVector: a generic fixed size Vector class. More...;  ; class  TDataPoint;  ; class  TDataPointN;  ; class  TensorMulOp;  Class for Tensor Multiplication (outer product) of two vectors giving a matrix. More...;  ; class  TRandomEngine;  ; class  TransposeOp;  Class for Transpose Operations. More...;  ; struct  TranspPolicy;  matrix transpose policy More...;  ; struct  TranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  ; class  UnaryOp;  UnaryOperation class A class representing unary operators in the parse tree. More...;  ; class  Vavilov;  Base cla",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:30833,Integrability,interface,interface,30833,"y a third rotation of an angle psi (roll) about the X axis. More...;  ; struct  RowOffsets;  Static structure to keep the conversion from (i,j) to offsets in the storage data for a symmetric matrix. More...;  ; class  SDeterminant;  Dsfact. More...;  ; class  SinVariableTransformation;  Sin Transformation class for dealing with double bounded variables. More...;  ; class  SInverter;  Dsinv. More...;  ; struct  SkipFunction;  ; struct  SkipFunction< 0 >;  ; class  SMatrix;  SMatrix: a generic fixed size D1 x D2 Matrix class. More...;  ; struct  SMatrixIdentity;  ; struct  SMatrixNoInit;  ; class  Sqr;  Unary Square Operation Class. More...;  ; class  Sqrt;  Unary Square Root Operation Class. More...;  ; class  SqrtLowVariableTransformation;  Sqrt Transformation class for dealing with lower bounded variables. More...;  ; class  SqrtUpVariableTransformation;  Sqrt Transformation class for dealing with upper bounded variables. More...;  ; class  StdEngine;  Class to wrap engines from the C++ standard random library in the ROOT Random interface. More...;  ; struct  StdEngineType;  ; struct  StdEngineType< std::knuth_b >;  ; struct  StdEngineType< std::minstd_rand >;  ; struct  StdEngineType< std::mt19937 >;  ; struct  StdEngineType< std::mt19937_64 >;  ; struct  StdEngineType< std::random_device >;  ; struct  StdEngineType< std::ranlux24 >;  ; struct  StdEngineType< std::ranlux48 >;  ; class  StdRandomEngine;  ; class  SVector;  SVector: a generic fixed size Vector class. More...;  ; class  TDataPoint;  ; class  TDataPointN;  ; class  TensorMulOp;  Class for Tensor Multiplication (outer product) of two vectors giving a matrix. More...;  ; class  TRandomEngine;  ; class  TransposeOp;  Class for Transpose Operations. More...;  ; struct  TranspPolicy;  matrix transpose policy More...;  ; struct  TranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  ; class  UnaryOp;  UnaryOperation class A class representing unary operators in the parse tree. More...;  ; class  Vavilov;  Base cla",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:32258,Integrability,wrap,wrapper,32258,"d size Vector class. More...;  ; class  TDataPoint;  ; class  TDataPointN;  ; class  TensorMulOp;  Class for Tensor Multiplication (outer product) of two vectors giving a matrix. More...;  ; class  TRandomEngine;  ; class  TransposeOp;  Class for Transpose Operations. More...;  ; struct  TranspPolicy;  matrix transpose policy More...;  ; struct  TranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  ; class  UnaryOp;  UnaryOperation class A class representing unary operators in the parse tree. More...;  ; class  Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  VavilovAccuratePdf;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrato",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:32498,Integrability,integrat,integration,32498,"seOp;  Class for Transpose Operations. More...;  ; struct  TranspPolicy;  matrix transpose policy More...;  ; struct  TranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  ; class  UnaryOp;  UnaryOperation class A class representing unary operators in the parse tree. More...;  ; class  Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  VavilovAccuratePdf;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member f",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:32674,Integrability,integrat,integration,32674," ; class  Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  VavilovAccuratePdf;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:32769,Integrability,integrat,integrator,32769," ; class  Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  VavilovAccuratePdf;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:32898,Integrability,integrat,integration,32898," ; class  Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  VavilovAccuratePdf;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:33005,Integrability,integrat,integration,33005,"f;  Class describing the Vavilov pdf. More...;  ; class  VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  VavilovFast;  Class describing a Vavilov distribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:33198,Integrability,integrat,integration,33198,"tribution. More...;  ; class  VecExpr;  Expression wrapper class for Vector objects. More...;  ; class  VectorMatrixColOp;  Class for Vector-Matrix multiplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:33355,Integrability,wrap,wrap,33355,"iplication. More...;  ; class  VectorMatrixRowOp;  ; struct  VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:33472,Integrability,wrap,wrap,33472,"tegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:33564,Integrability,interface,interface,33564,"tegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:33658,Integrability,wrap,wrapped,33658,"tegrationWorkspace.h. More...;  ; class  VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:33836,Integrability,wrap,wrap,33836,"orOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numeric",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:33940,Integrability,interface,interface,33940,"orOneDim defines the methods for one-dimensional integration. More...;  ; class  VirtualIntegratorMultiDim;  Interface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numeric",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:34065,Integrability,interface,interface,34065,"rete Integrator classes like ROOT::Math::GSLMCIntegrator. More...;  ; class  VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:34217,Integrability,wrap,wrap,34217,"ntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunction",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:34330,Integrability,interface,interface-like,34330,"ntegrator. More...;  ; class  WrappedFunction;  Template class to wrap any C++ callable object which takes one argument i.e. More...;  ; class  WrappedMemFunction;  Template class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunction",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:34505,Integrability,wrap,wrap,34505,"tion interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunctionPtr) (double);  ; typedef double(* FreeMultiFunctionPtr) (const double *);  ; typedef double(* FreeParamMultiFunctionPtr) (const double *, const double *);  ; typedef void(* GSLFdfPointer) (double, void *, double *, double *);  ; typedef double(* GSLFuncPointer) (double,",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:34592,Integrability,interface,interface-like,34592,"tion interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunctionPtr) (double);  ; typedef double(* FreeMultiFunctionPtr) (const double *);  ; typedef double(* FreeParamMultiFunctionPtr) (const double *, const double *);  ; typedef void(* GSLFdfPointer) (double, void *, double *, double *);  ; typedef double(* GSLFuncPointer) (double,",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:34785,Integrability,interface,interface,34785,"s to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunctionPtr) (double);  ; typedef double(* FreeMultiFunctionPtr) (const double *);  ; typedef double(* FreeParamMultiFunctionPtr) (const double *, const double *);  ; typedef void(* GSLFdfPointer) (double, void *, double *, double *);  ; typedef double(* GSLFuncPointer) (double, void *);  Function pointer corresponding to gsl_function signature. ;  ; typedef double(* GSLMonteFuncPointer) (double *, size_t, void *);  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ;  ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:34867,Integrability,wrap,wrapper,34867,"s to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunctionPtr) (double);  ; typedef double(* FreeMultiFunctionPtr) (const double *);  ; typedef double(* FreeParamMultiFunctionPtr) (const double *, const double *);  ; typedef void(* GSLFdfPointer) (double, void *, double *, double *);  ; typedef double(* GSLFuncPointer) (double, void *);  Function pointer corresponding to gsl_function signature. ;  ; typedef double(* GSLMonteFuncPointer) (double *, size_t, void *);  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ;  ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:34952,Integrability,wrap,wrapper,34952,"s to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunctionPtr) (double);  ; typedef double(* FreeMultiFunctionPtr) (const double *);  ; typedef double(* FreeParamMultiFunctionPtr) (const double *, const double *);  ; typedef void(* GSLFdfPointer) (double, void *, double *, double *);  ; typedef double(* GSLFuncPointer) (double, void *);  Function pointer corresponding to gsl_function signature. ;  ; typedef double(* GSLMonteFuncPointer) (double *, size_t, void *);  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ;  ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:35804,Integrability,integrat,integration,35804,"Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunctionPtr) (double);  ; typedef double(* FreeMultiFunctionPtr) (const double *);  ; typedef double(* FreeParamMultiFunctionPtr) (const double *, const double *);  ; typedef void(* GSLFdfPointer) (double, void *, double *, double *);  ; typedef double(* GSLFuncPointer) (double, void *);  Function pointer corresponding to gsl_function signature. ;  ; typedef double(* GSLMonteFuncPointer) (double *, size_t, void *);  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ;  ; typedef void(* GSLMultiFitDfPointer) (const gsl_vector *, void *, gsl_matrix *);  ; typedef void(* GSLMultiFitFdfPointer) (const gsl_vector *, void *, gsl_vector *, gsl_matrix *);  ; typedef double(* GSLMultiFitFPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef void(* GSLMultiMinDfPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef void(* GSLMultiMinFdfPointer) (const gsl_vector *, void *, double *, gsl_vector *);  ; typedef double(* GSLMultiMinFuncPointer) (const gsl_vector *, void *);  ; typedef void(* GSLMultiRootDfPointer) (const gsl_vector *, void *, gsl_matrix *);  ; typedef void(* GSLMultiRootFdfPointer) (const gsl_vector *, void *, gsl_vector *, gsl_matrix *);  ; typedef double(* GSLMultiRootFPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef GSLRngRanLuxS1 GSLRngRanLux1;  ; typedef GSLRngRanLuxS2 GSLRngRanLux2;  ; typedef GSLRngRanLuxD",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:110138,Integrability,integrat,integrating,110138,"uble normal_quantile (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the normal (Gaussian) distribution (normal_cdf). ;  ; double uniform_quantile_c (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the uniform (flat) distribution (uniform_cdf_c). ;  ; double uniform_quantile (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the uniform (flat) distribution (uniform_cdf). ;  ; double landau_quantile (double z, double xi=1);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the Landau distribution (landau_cdf). ;  ; double landau_quantile_c (double z, double xi=1);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the landau distribution (landau_cdf_c). ;  ; Special Functions from MathCore; double erf (double x);  Error function encountered in integrating the normal distribution. ;  ; double erfc (double x);  Complementary error function. ;  ; double tgamma (double x);  The gamma function is defined to be the extension of the factorial to real numbers. ;  ; double lgamma (double x);  Calculates the logarithm of the gamma function. ;  ; double inc_gamma (double a, double x);  Calculates the normalized (regularized) lower incomplete gamma function (lower integral) ;  ; double inc_gamma_c (double a, double x);  Calculates the normalized (regularized) upper incomplete gamma function (upper integral) ;  ; double beta (double x, double y);  Calculates the beta function. ;  ; double inc_beta (double x, double a, double b);  Calculates the normalized (regularized) incomplete beta function. ;  ; double sinint (double x);  Calculates the sine integral. ;  ; double cosint (double x);  Calculates the real part of the cosine integral Re(Ci). ;  ; Quantile Functions from MathMore; The implementation used is tha",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:114473,Integrability,depend,dependence,114473,". ;  ; double ellint_3 (double n, double k, double phi);  Calculates the complete elliptic integral of the third kind. ;  ; double expint (double x);  Calculates the exponential integral. ;  ; double expint_n (int n, double x);  ; double hyperg (double a, double b, double c, double x);  Calculates Gauss' hypergeometric function. ;  ; double laguerre (unsigned n, double x);  Calculates the Laguerre polynomials. ;  ; double lambert_W0 (double x);  Calculates the Lambert W function on branch 0. ;  ; double lambert_Wm1 (double x);  Calculates the Lambert W function on branch -1. ;  ; double legendre (unsigned l, double x);  Calculates the Legendre polynomials. ;  ; double riemann_zeta (double x);  Calculates the Riemann zeta function. ;  ; double sph_bessel (unsigned n, double x);  Calculates the spherical Bessel functions of the first kind (also called regular spherical Bessel functions). ;  ; double sph_legendre (unsigned l, unsigned m, double theta);  Computes the spherical (normalized) associated Legendre polynomials, or spherical harmonic without azimuthal dependence ( \(e^(im\phi)\)). ;  ; double sph_neumann (unsigned n, double x);  Calculates the spherical Bessel functions of the second kind (also called irregular spherical Bessel functions or spherical Neumann functions). ;  ; double airy_Ai (double x);  Calculates the Airy function Ai. ;  ; double airy_Bi (double x);  Calculates the Airy function Bi. ;  ; double airy_Ai_deriv (double x);  Calculates the derivative of the Airy function Ai. ;  ; double airy_Bi_deriv (double x);  Calculates the derivative of the Airy function Bi. ;  ; double airy_zero_Ai (unsigned int s);  Calculates the zeroes of the Airy function Ai. ;  ; double airy_zero_Bi (unsigned int s);  Calculates the zeroes of the Airy function Bi. ;  ; double airy_zero_Ai_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy function Ai. ;  ; double airy_zero_Bi_deriv (unsigned int s);  Calculates the zeroes of the derivative of th",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:116268,Integrability,wrap,wrapper,116268,"he zeroes of the derivative of the Airy function Bi. ;  ; double wigner_3j (int two_ja, int two_jb, int two_jc, int two_ma, int two_mb, int two_mc);  Calculates the Wigner 3j coupling coefficients. ;  ; double wigner_6j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf);  Calculates the Wigner 6j coupling coefficients. ;  ; double wigner_9j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf, int two_jg, int two_jh, int two_ji);  Calculates the Wigner 9j coupling coefficients. ;  . Variables; static const double eu = 0.577215664901532860606;  ; double gDefaultAbsTolerance = 1.E-6;  ; int gDefaultMaxIter = 100;  ; static int gDefaultNpx = 100;  ; static int gDefaultNpx = 100;  ; static int gDefaultNSearch = 10;  ; static int gDefaultNSearch = 10;  ; double gDefaultRelTolerance = 1.E-10;  ; const ROOT::Math::IMultiGenFunction * gFunction;  function wrapper for the function to be minimized ;  ; const ROOT::Math::IMultiGradFunction * gGradFunction;  function wrapper for the gradient of the function to be minimized ;  ; int gNCalls = 0;  integer for the number of function calls ;  ; static const double kSqrt2 = 1.41421356237309515;  . Typedef Documentation. ◆ FitMethodFunction. typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > ROOT::Math::FitMethodFunction. Definition at line 43 of file Fitter.h. ◆ FitMethodGradFunction. typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > ROOT::Math::FitMethodGradFunction. Definition at line 44 of file Fitter.h. ◆ FreeFunctionPtr. typedef double(* ROOT::Math::FreeFunctionPtr) (double). Definition at line 28 of file WrappedFunction.h. ◆ FreeMultiFunctionPtr. typedef double(* ROOT::Math::FreeMultiFunctionPtr)(const double *). Definition at line 30 of file WrappedFunction.h. ◆ FreeParamMultiFunctionPtr. typedef double(* ROOT::Math::FreeParamMultiFunctionPtr) (const double *, const double *). Definition at line 32 of file WrappedParamFunction.h. ◆ GSLFdfPointer. typedef void",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:116378,Integrability,wrap,wrapper,116378,"he zeroes of the derivative of the Airy function Bi. ;  ; double wigner_3j (int two_ja, int two_jb, int two_jc, int two_ma, int two_mb, int two_mc);  Calculates the Wigner 3j coupling coefficients. ;  ; double wigner_6j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf);  Calculates the Wigner 6j coupling coefficients. ;  ; double wigner_9j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf, int two_jg, int two_jh, int two_ji);  Calculates the Wigner 9j coupling coefficients. ;  . Variables; static const double eu = 0.577215664901532860606;  ; double gDefaultAbsTolerance = 1.E-6;  ; int gDefaultMaxIter = 100;  ; static int gDefaultNpx = 100;  ; static int gDefaultNpx = 100;  ; static int gDefaultNSearch = 10;  ; static int gDefaultNSearch = 10;  ; double gDefaultRelTolerance = 1.E-10;  ; const ROOT::Math::IMultiGenFunction * gFunction;  function wrapper for the function to be minimized ;  ; const ROOT::Math::IMultiGradFunction * gGradFunction;  function wrapper for the gradient of the function to be minimized ;  ; int gNCalls = 0;  integer for the number of function calls ;  ; static const double kSqrt2 = 1.41421356237309515;  . Typedef Documentation. ◆ FitMethodFunction. typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > ROOT::Math::FitMethodFunction. Definition at line 43 of file Fitter.h. ◆ FitMethodGradFunction. typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > ROOT::Math::FitMethodGradFunction. Definition at line 44 of file Fitter.h. ◆ FreeFunctionPtr. typedef double(* ROOT::Math::FreeFunctionPtr) (double). Definition at line 28 of file WrappedFunction.h. ◆ FreeMultiFunctionPtr. typedef double(* ROOT::Math::FreeMultiFunctionPtr)(const double *). Definition at line 30 of file WrappedFunction.h. ◆ FreeParamMultiFunctionPtr. typedef double(* ROOT::Math::FreeParamMultiFunctionPtr) (const double *, const double *). Definition at line 32 of file WrappedParamFunction.h. ◆ GSLFdfPointer. typedef void",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:146637,Integrability,rout,routine,146637," 93 of file ChebyshevPol.h. ◆ Cross() [1/3]. template<class T , class A > . SVector< T, 3 > ROOT::Math::Cross ; (; const SVector< T, 3 > & ; lhs, . const VecExpr< A, T, 3 > & ; rhs . ). inline . Definition at line 349 of file Functions.h. ◆ Cross() [2/3]. template<class A , class T > . SVector< T, 3 > ROOT::Math::Cross ; (; const VecExpr< A, T, 3 > & ; lhs, . const SVector< T, 3 > & ; rhs . ). inline . Definition at line 336 of file Functions.h. ◆ Cross() [3/3]. template<class A , class B , class T > . SVector< T, 3 > ROOT::Math::Cross ; (; const VecExpr< A, T, 3 > & ; lhs, . const VecExpr< B, T, 3 > & ; rhs . ). inline . Definition at line 362 of file Functions.h. ◆ Dfactir(). template<class Matrix , unsigned int n, unsigned int idim> . bool ROOT::Math::Dfactir ; (; Matrix & ; rhs, . typename Matrix::value_type & ; det, . unsigned int * ; ir . ). Dfactir. ; Function to compute the determinant from a square matrix, Det(A) of dimension idim and order n. A working area ir is returned which is needed by the Dfinv routine.; AuthorT. Glebe ; Definition at line 46 of file Dfactir.h. ◆ Dfinv(). template<class Matrix , unsigned int n, unsigned int idim> . bool ROOT::Math::Dfinv ; (; Matrix & ; rhs, . unsigned int * ; ir . ). Dfinv. ; Function to compute the inverse of a square matrix ( \(A^{-1}\)) of dimension \(idim\) and order \(n\). The routine Dfactir must be called before Dfinv!; AuthorT. Glebe ; Definition at line 47 of file Dfinv.h. ◆ Distance() [1/8]. template<class R > . AxisAngle::Scalar ROOT::Math::Distance ; (; const AxisAngle & ; r1, . const R & ; r2 . ). inline . Distance between two rotations. ; Definition at line 321 of file AxisAngle.h. ◆ Distance() [2/8]. template<class R > . EulerAngles::Scalar ROOT::Math::Distance ; (; const EulerAngles & ; r1, . const R & ; r2 . ). inline . Distance between two rotations. ; Definition at line 358 of file EulerAngles.h. ◆ Distance() [3/8]. template<class R > . Quaternion::Scalar ROOT::Math::Distance ; (; const Quaternion",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:146965,Integrability,rout,routine,146965,", 3 > & ; rhs . ). inline . Definition at line 336 of file Functions.h. ◆ Cross() [3/3]. template<class A , class B , class T > . SVector< T, 3 > ROOT::Math::Cross ; (; const VecExpr< A, T, 3 > & ; lhs, . const VecExpr< B, T, 3 > & ; rhs . ). inline . Definition at line 362 of file Functions.h. ◆ Dfactir(). template<class Matrix , unsigned int n, unsigned int idim> . bool ROOT::Math::Dfactir ; (; Matrix & ; rhs, . typename Matrix::value_type & ; det, . unsigned int * ; ir . ). Dfactir. ; Function to compute the determinant from a square matrix, Det(A) of dimension idim and order n. A working area ir is returned which is needed by the Dfinv routine.; AuthorT. Glebe ; Definition at line 46 of file Dfactir.h. ◆ Dfinv(). template<class Matrix , unsigned int n, unsigned int idim> . bool ROOT::Math::Dfinv ; (; Matrix & ; rhs, . unsigned int * ; ir . ). Dfinv. ; Function to compute the inverse of a square matrix ( \(A^{-1}\)) of dimension \(idim\) and order \(n\). The routine Dfactir must be called before Dfinv!; AuthorT. Glebe ; Definition at line 47 of file Dfinv.h. ◆ Distance() [1/8]. template<class R > . AxisAngle::Scalar ROOT::Math::Distance ; (; const AxisAngle & ; r1, . const R & ; r2 . ). inline . Distance between two rotations. ; Definition at line 321 of file AxisAngle.h. ◆ Distance() [2/8]. template<class R > . EulerAngles::Scalar ROOT::Math::Distance ; (; const EulerAngles & ; r1, . const R & ; r2 . ). inline . Distance between two rotations. ; Definition at line 358 of file EulerAngles.h. ◆ Distance() [3/8]. template<class R > . Quaternion::Scalar ROOT::Math::Distance ; (; const Quaternion & ; r1, . const R & ; r2 . ). inline . Distance between two rotations. ; Definition at line 330 of file Quaternion.h. ◆ Distance() [4/8]. template<class R > . Rotation3D::Scalar ROOT::Math::Distance ; (; const Rotation3D & ; r1, . const R & ; r2 . ). inline . Distance between two rotations. ; Definition at line 492 of file Rotation3D.h. ◆ Distance() [5/8]. template<class R > ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:199036,Integrability,wrap,wrapper,199036,"onst Expr< A, T, D1, D2, R > & ; rhs). inline . Definition at line 551 of file MatrixFunctions.h. ◆ Unit(). template<class A , class T , unsigned int D> . SVector< T, D > ROOT::Math::Unit ; (; const VecExpr< A, T, D > & ; rhs). inline . Definition at line 390 of file Functions.h. Variable Documentation. ◆ eu. const double ROOT::Math::eu = 0.577215664901532860606. static . Definition at line 44 of file Vavilov.cxx. ◆ gDefaultAbsTolerance. double ROOT::Math::gDefaultAbsTolerance = 1.E-6. Definition at line 53 of file GSLMultiRootFinder.cxx. ◆ gDefaultMaxIter. int ROOT::Math::gDefaultMaxIter = 100. Definition at line 52 of file GSLMultiRootFinder.cxx. ◆ gDefaultNpx [1/2]. int ROOT::Math::gDefaultNpx = 100. static . Definition at line 29 of file BrentMinimizer1D.cxx. ◆ gDefaultNpx [2/2]. int ROOT::Math::gDefaultNpx = 100. static . Definition at line 25 of file BrentRootFinder.cxx. ◆ gDefaultNSearch [1/2]. int ROOT::Math::gDefaultNSearch = 10. static . Definition at line 30 of file BrentMinimizer1D.cxx. ◆ gDefaultNSearch [2/2]. int ROOT::Math::gDefaultNSearch = 10. static . Definition at line 26 of file BrentRootFinder.cxx. ◆ gDefaultRelTolerance. double ROOT::Math::gDefaultRelTolerance = 1.E-10. Definition at line 54 of file GSLMultiRootFinder.cxx. ◆ gFunction. const ROOT::Math::IMultiGenFunction* ROOT::Math::gFunction. function wrapper for the function to be minimized ; Definition at line 12 of file RMinimizer.cxx. ◆ gGradFunction. const ROOT::Math::IMultiGradFunction* ROOT::Math::gGradFunction. function wrapper for the gradient of the function to be minimized ; Definition at line 14 of file RMinimizer.cxx. ◆ gNCalls. int ROOT::Math::gNCalls = 0. integer for the number of function calls ; Definition at line 16 of file RMinimizer.cxx. ◆ kSqrt2. const double ROOT::Math::kSqrt2 = 1.41421356237309515. static . Definition at line 18 of file ProbFuncMathCore.cxx. ROOTMath. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:56 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:199216,Integrability,wrap,wrapper,199216,"onst Expr< A, T, D1, D2, R > & ; rhs). inline . Definition at line 551 of file MatrixFunctions.h. ◆ Unit(). template<class A , class T , unsigned int D> . SVector< T, D > ROOT::Math::Unit ; (; const VecExpr< A, T, D > & ; rhs). inline . Definition at line 390 of file Functions.h. Variable Documentation. ◆ eu. const double ROOT::Math::eu = 0.577215664901532860606. static . Definition at line 44 of file Vavilov.cxx. ◆ gDefaultAbsTolerance. double ROOT::Math::gDefaultAbsTolerance = 1.E-6. Definition at line 53 of file GSLMultiRootFinder.cxx. ◆ gDefaultMaxIter. int ROOT::Math::gDefaultMaxIter = 100. Definition at line 52 of file GSLMultiRootFinder.cxx. ◆ gDefaultNpx [1/2]. int ROOT::Math::gDefaultNpx = 100. static . Definition at line 29 of file BrentMinimizer1D.cxx. ◆ gDefaultNpx [2/2]. int ROOT::Math::gDefaultNpx = 100. static . Definition at line 25 of file BrentRootFinder.cxx. ◆ gDefaultNSearch [1/2]. int ROOT::Math::gDefaultNSearch = 10. static . Definition at line 30 of file BrentMinimizer1D.cxx. ◆ gDefaultNSearch [2/2]. int ROOT::Math::gDefaultNSearch = 10. static . Definition at line 26 of file BrentRootFinder.cxx. ◆ gDefaultRelTolerance. double ROOT::Math::gDefaultRelTolerance = 1.E-10. Definition at line 54 of file GSLMultiRootFinder.cxx. ◆ gFunction. const ROOT::Math::IMultiGenFunction* ROOT::Math::gFunction. function wrapper for the function to be minimized ; Definition at line 12 of file RMinimizer.cxx. ◆ gGradFunction. const ROOT::Math::IMultiGradFunction* ROOT::Math::gGradFunction. function wrapper for the gradient of the function to be minimized ; Definition at line 14 of file RMinimizer.cxx. ◆ gNCalls. int ROOT::Math::gNCalls = 0. integer for the number of function calls ; Definition at line 16 of file RMinimizer.cxx. ◆ kSqrt2. const double ROOT::Math::kSqrt2 = 1.41421356237309515. static . Definition at line 18 of file ProbFuncMathCore.cxx. ROOTMath. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:56 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:1458,Modifiability,adapt,adaptive,1458,"space  CholeskyDecompHelpers;  helpers for CholeskyDecomp ;  ; namespace  detail;  ; namespace  GenAlgoOptUtil;  ; namespace  GenVector;  ; namespace  GenVector_detail;  ; namespace  GSLRootHelper;  Helper functions to test convergence of Root-Finding algorithms. ;  ; namespace  GSLSimAn;  ; namespace  gv_detail;  ; namespace  Impl;  ; namespace  IntegMultiDim;  ; namespace  IntegOneDim;  ; namespace  IntegOptionsUtil;  ; namespace  Integration;  ; namespace  IntegrationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on a general matrix to a symmetric matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  Assig",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:9288,Modifiability,adapt,adapting,9288,"nVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-dimensional gradient functions. More...;  ; class  GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  GSLChebSeries;  wrapper class for C struct gsl_cheb_series More...;  ; class  GSLDerivator;  Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:10422,Modifiability,adapt,adapting,10422,"lass  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solve",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:10915,Modifiability,adapt,adapting,10915,"er for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) More...;  ; class  GSLMultiRootDerivFunctionWrapper;  wrapper to a multi-dim function with derivatives for multi roots algorithm More...;  ; class  GSLMultiRootDerivSolver;  GSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives. More...;  ; class  GSLMultiRootFinder;  Class for Multidimensional root finding algorithms bassed on GSL. More...;  ; clas",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:11983,Modifiability,adapt,adapting,11983,"  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) More...;  ; class  GSLMultiRootDerivFunctionWrapper;  wrapper to a multi-dim function with derivatives for multi roots algorithm More...;  ; class  GSLMultiRootDerivSolver;  GSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives. More...;  ; class  GSLMultiRootFinder;  Class for Multidimensional root finding algorithms bassed on GSL. More...;  ; class  GSLMultiRootFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiRootFunctionWrapper;  wrapper to a multi-dim function without derivatives for multi roots algorithm More...;  ; class  GSLMultiRootSolver;  GSLMultiRootSolver, internal class for implementing GSL multi-root finders not using derivatives. More...;  ; class  GSLNLSMinimizer;  GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting. More...;  ; class  GSLPlainIntegrationWorkspace;  ; class  GSLQRngNiederreiter2;  Niederreiter generator gsl_qrng_niederreiter_2 from here More...;  ; class  GSLQRngSobol;  Sobol generator gsl_qrng_sobol from here More...;  ; class  GSLQRngWrapper;  GSLQRngWrapper class to wrap gsl_qrng structure. More...;  ; class  GSLQuasiRandomEngine;  GSLQuasiRandomEngine Base class for all GSL quasi random engines, normally user instantiate the derived classes which creates",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:17978,Modifiability,config,configuration,17978,"erical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricGradFunctionMultiDimTempl;  Interface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IParametricGradFunctionOneDim;  Interface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect t",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:21095,Modifiability,variab,variables,21095,"N This class is a template on the contained type and on the symmetric matrix size, N. More...;  ; class  MatrixMulOp;  Class for Matrix-Matrix multiplication. More...;  ; class  MersenneTwisterEngine;  Random number generator class based on M. More...;  ; struct  meta_col_dot;  ; struct  meta_col_dot< 0 >;  ; struct  meta_dot;  ; struct  meta_dot< 0 >;  ; struct  meta_mag;  ; struct  meta_mag< 0 >;  ; struct  meta_matrix_dot;  ; struct  meta_matrix_dot< 0 >;  ; struct  meta_row_dot;  ; struct  meta_row_dot< 0 >;  ; class  Minimizer;  Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. More...;  ; class  MinimizerOptions;  Minimizer options. More...;  ; class  MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  MinOp;  Subtraction Operation Class. More...;  ; class  Minus;  Unary Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:21135,Modifiability,variab,variables,21135,"N This class is a template on the contained type and on the symmetric matrix size, N. More...;  ; class  MatrixMulOp;  Class for Matrix-Matrix multiplication. More...;  ; class  MersenneTwisterEngine;  Random number generator class based on M. More...;  ; struct  meta_col_dot;  ; struct  meta_col_dot< 0 >;  ; struct  meta_dot;  ; struct  meta_dot< 0 >;  ; struct  meta_mag;  ; struct  meta_mag< 0 >;  ; struct  meta_matrix_dot;  ; struct  meta_matrix_dot< 0 >;  ; struct  meta_row_dot;  ; struct  meta_row_dot< 0 >;  ; class  Minimizer;  Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. More...;  ; class  MinimizerOptions;  Minimizer options. More...;  ; class  MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  MinOp;  Subtraction Operation Class. More...;  ; class  Minus;  Unary Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:21338,Modifiability,variab,variables,21338,"ta_col_dot< 0 >;  ; struct  meta_dot;  ; struct  meta_dot< 0 >;  ; struct  meta_mag;  ; struct  meta_mag< 0 >;  ; struct  meta_matrix_dot;  ; struct  meta_matrix_dot< 0 >;  ; struct  meta_row_dot;  ; struct  meta_row_dot< 0 >;  ; class  Minimizer;  Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. More...;  ; class  MinimizerOptions;  Minimizer options. More...;  ; class  MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  MinOp;  Subtraction Operation Class. More...;  ; class  Minus;  Unary Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineI",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:21411,Modifiability,variab,variable,21411,"ta_col_dot< 0 >;  ; struct  meta_dot;  ; struct  meta_dot< 0 >;  ; struct  meta_mag;  ; struct  meta_mag< 0 >;  ; struct  meta_matrix_dot;  ; struct  meta_matrix_dot< 0 >;  ; struct  meta_row_dot;  ; struct  meta_row_dot< 0 >;  ; class  Minimizer;  Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. More...;  ; class  MinimizerOptions;  Minimizer options. More...;  ; class  MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  MinOp;  Subtraction Operation Class. More...;  ; class  Minus;  Unary Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineI",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:21491,Modifiability,variab,variable,21491,"ta_col_dot< 0 >;  ; struct  meta_dot;  ; struct  meta_dot< 0 >;  ; struct  meta_mag;  ; struct  meta_mag< 0 >;  ; struct  meta_matrix_dot;  ; struct  meta_matrix_dot< 0 >;  ; struct  meta_row_dot;  ; struct  meta_row_dot< 0 >;  ; class  Minimizer;  Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. More...;  ; class  MinimizerOptions;  Minimizer options. More...;  ; class  MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  MinOp;  Subtraction Operation Class. More...;  ; class  Minus;  Unary Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineI",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:30132,Modifiability,variab,variables,30132,"s. More...;  ; class  Rotation3D;  Rotation class with the (3D) rotation represented by a 3x3 orthogonal matrix. More...;  ; class  RotationX;  Rotation class representing a 3D rotation about the X axis by the angle of rotation. More...;  ; class  RotationY;  Rotation class representing a 3D rotation about the Y axis by the angle of rotation. More...;  ; class  RotationZ;  Rotation class representing a 3D rotation about the Z axis by the angle of rotation. More...;  ; class  RotationZYX;  Rotation class with the (3D) rotation represented by angles describing first a rotation of an angle phi (yaw) about the Z axis, followed by a rotation of an angle theta (pitch) about the Y axis, followed by a third rotation of an angle psi (roll) about the X axis. More...;  ; struct  RowOffsets;  Static structure to keep the conversion from (i,j) to offsets in the storage data for a symmetric matrix. More...;  ; class  SDeterminant;  Dsfact. More...;  ; class  SinVariableTransformation;  Sin Transformation class for dealing with double bounded variables. More...;  ; class  SInverter;  Dsinv. More...;  ; struct  SkipFunction;  ; struct  SkipFunction< 0 >;  ; class  SMatrix;  SMatrix: a generic fixed size D1 x D2 Matrix class. More...;  ; struct  SMatrixIdentity;  ; struct  SMatrixNoInit;  ; class  Sqr;  Unary Square Operation Class. More...;  ; class  Sqrt;  Unary Square Root Operation Class. More...;  ; class  SqrtLowVariableTransformation;  Sqrt Transformation class for dealing with lower bounded variables. More...;  ; class  SqrtUpVariableTransformation;  Sqrt Transformation class for dealing with upper bounded variables. More...;  ; class  StdEngine;  Class to wrap engines from the C++ standard random library in the ROOT Random interface. More...;  ; struct  StdEngineType;  ; struct  StdEngineType< std::knuth_b >;  ; struct  StdEngineType< std::minstd_rand >;  ; struct  StdEngineType< std::mt19937 >;  ; struct  StdEngineType< std::mt19937_64 >;  ; struct  StdEngineType< std::rand",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:30595,Modifiability,variab,variables,30595,"More...;  ; class  RotationZYX;  Rotation class with the (3D) rotation represented by angles describing first a rotation of an angle phi (yaw) about the Z axis, followed by a rotation of an angle theta (pitch) about the Y axis, followed by a third rotation of an angle psi (roll) about the X axis. More...;  ; struct  RowOffsets;  Static structure to keep the conversion from (i,j) to offsets in the storage data for a symmetric matrix. More...;  ; class  SDeterminant;  Dsfact. More...;  ; class  SinVariableTransformation;  Sin Transformation class for dealing with double bounded variables. More...;  ; class  SInverter;  Dsinv. More...;  ; struct  SkipFunction;  ; struct  SkipFunction< 0 >;  ; class  SMatrix;  SMatrix: a generic fixed size D1 x D2 Matrix class. More...;  ; struct  SMatrixIdentity;  ; struct  SMatrixNoInit;  ; class  Sqr;  Unary Square Operation Class. More...;  ; class  Sqrt;  Unary Square Root Operation Class. More...;  ; class  SqrtLowVariableTransformation;  Sqrt Transformation class for dealing with lower bounded variables. More...;  ; class  SqrtUpVariableTransformation;  Sqrt Transformation class for dealing with upper bounded variables. More...;  ; class  StdEngine;  Class to wrap engines from the C++ standard random library in the ROOT Random interface. More...;  ; struct  StdEngineType;  ; struct  StdEngineType< std::knuth_b >;  ; struct  StdEngineType< std::minstd_rand >;  ; struct  StdEngineType< std::mt19937 >;  ; struct  StdEngineType< std::mt19937_64 >;  ; struct  StdEngineType< std::random_device >;  ; struct  StdEngineType< std::ranlux24 >;  ; struct  StdEngineType< std::ranlux48 >;  ; class  StdRandomEngine;  ; class  SVector;  SVector: a generic fixed size Vector class. More...;  ; class  TDataPoint;  ; class  TDataPointN;  ; class  TensorMulOp;  Class for Tensor Multiplication (outer product) of two vectors giving a matrix. More...;  ; class  TRandomEngine;  ; class  TransposeOp;  Class for Transpose Operations. More...;  ; struct  Tra",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:30713,Modifiability,variab,variables,30713,"n of an angle phi (yaw) about the Z axis, followed by a rotation of an angle theta (pitch) about the Y axis, followed by a third rotation of an angle psi (roll) about the X axis. More...;  ; struct  RowOffsets;  Static structure to keep the conversion from (i,j) to offsets in the storage data for a symmetric matrix. More...;  ; class  SDeterminant;  Dsfact. More...;  ; class  SinVariableTransformation;  Sin Transformation class for dealing with double bounded variables. More...;  ; class  SInverter;  Dsinv. More...;  ; struct  SkipFunction;  ; struct  SkipFunction< 0 >;  ; class  SMatrix;  SMatrix: a generic fixed size D1 x D2 Matrix class. More...;  ; struct  SMatrixIdentity;  ; struct  SMatrixNoInit;  ; class  Sqr;  Unary Square Operation Class. More...;  ; class  Sqrt;  Unary Square Root Operation Class. More...;  ; class  SqrtLowVariableTransformation;  Sqrt Transformation class for dealing with lower bounded variables. More...;  ; class  SqrtUpVariableTransformation;  Sqrt Transformation class for dealing with upper bounded variables. More...;  ; class  StdEngine;  Class to wrap engines from the C++ standard random library in the ROOT Random interface. More...;  ; struct  StdEngineType;  ; struct  StdEngineType< std::knuth_b >;  ; struct  StdEngineType< std::minstd_rand >;  ; struct  StdEngineType< std::mt19937 >;  ; struct  StdEngineType< std::mt19937_64 >;  ; struct  StdEngineType< std::random_device >;  ; struct  StdEngineType< std::ranlux24 >;  ; struct  StdEngineType< std::ranlux48 >;  ; class  StdRandomEngine;  ; class  SVector;  SVector: a generic fixed size Vector class. More...;  ; class  TDataPoint;  ; class  TDataPointN;  ; class  TensorMulOp;  Class for Tensor Multiplication (outer product) of two vectors giving a matrix. More...;  ; class  TRandomEngine;  ; class  TransposeOp;  Class for Transpose Operations. More...;  ; struct  TranspPolicy;  matrix transpose policy More...;  ; struct  TranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  ; class  Unary",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:34645,Modifiability,variab,variables,34645,"tion interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f;. More...;  ; class  WrappedMemMultiFunction;  ; class  WrappedMultiFunction;  Template class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface. More...;  ; class  WrappedMultiTF1Templ;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  WrappedParamFunction;  WrappedParamFunction class to wrap any multi-dimensional function object implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values. More...;  ; class  WrappedParamFunctionGen;  WrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters. More...;  ; class  WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunctionPtr) (double);  ; typedef double(* FreeMultiFunctionPtr) (const double *);  ; typedef double(* FreeParamMultiFunctionPtr) (const double *, const double *);  ; typedef void(* GSLFdfPointer) (double, void *, double *, double *);  ; typedef double(* GSLFuncPointer) (double,",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:35711,Modifiability,adapt,adapting,35711,"Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . Typedefs; typedef TRandomEngine DefaultEngineType;  Documentation for the RandomFunction class. ;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunction;  ; typedef double(* FreeFunctionPtr) (double);  ; typedef double(* FreeMultiFunctionPtr) (const double *);  ; typedef double(* FreeParamMultiFunctionPtr) (const double *, const double *);  ; typedef void(* GSLFdfPointer) (double, void *, double *, double *);  ; typedef double(* GSLFuncPointer) (double, void *);  Function pointer corresponding to gsl_function signature. ;  ; typedef double(* GSLMonteFuncPointer) (double *, size_t, void *);  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ;  ; typedef void(* GSLMultiFitDfPointer) (const gsl_vector *, void *, gsl_matrix *);  ; typedef void(* GSLMultiFitFdfPointer) (const gsl_vector *, void *, gsl_vector *, gsl_matrix *);  ; typedef double(* GSLMultiFitFPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef void(* GSLMultiMinDfPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef void(* GSLMultiMinFdfPointer) (const gsl_vector *, void *, double *, gsl_vector *);  ; typedef double(* GSLMultiMinFuncPointer) (const gsl_vector *, void *);  ; typedef void(* GSLMultiRootDfPointer) (const gsl_vector *, void *, gsl_matrix *);  ; typedef void(* GSLMultiRootFdfPointer) (const gsl_vector *, void *, gsl_vector *, gsl_matrix *);  ; typedef double(* GSLMultiRootFPointer) (const gsl_vector *, void *, gsl_vector *);  ; typedef GSLRngRanLuxS1 GSLRngRanLux1;  ; typedef GSLRngRanLuxS2 GSLRngRanLux2;  ; typedef GSLRngRanLuxD",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:48589,Modifiability,variab,variable,48589,"ector;  LorentzVector based on x,y,x,t (or px,py,pz,E) coordinates in double precision with metric (-,-,-,+) ;  ; typedef LorentzVector< PxPyPzE4D< float > > XYZTVectorF;  LorentzVector based on x,y,x,t (or px,py,pz,E) coordinates in float precision with metric (-,-,-,+) ;  ; typedef DisplacementVector3D< Cartesian3D< double >, DefaultCoordinateSystemTag > XYZVector;  3D Vector based on the cartesian coordinates x,y,z in double precision ;  ; typedef XYZVector XYZVectorD;  ; typedef DisplacementVector3D< Cartesian3D< float >, DefaultCoordinateSystemTag > XYZVectorF;  3D Vector based on the cartesian coordinates x,y,z in single precision ;  . Enumerations; enum  EGSLMinimizerType { ;   kConjugateFR; , kConjugatePR; , kVectorBFGS; , kVectorBFGS2; , ;   kSteepestDescent. };  enumeration specifying the types of GSL minimizers More...;  ; enum  EMinimVariableType { ;   kDefault; , kFix; , kBounds; , kLowBound; , ;   kUpBound. };  Enumeration describing the status of the variable The enumeration are used in the minimizer classes to categorize the variables. More...;  ; enum  ERotation3DMatrixIndex { ;   kXX = 0; , kXY = 1; , kXZ = 2; , kYX = 3; , ;   kYY = 4; , kYZ = 5; , kZX = 6; , kZY = 7; , ;   kZZ = 8. };  . Functions; void adkTestStat (double *adk, const std::vector< std::vector< double > > &samples, const std::vector< double > &zstar);  ; double beta_cdf (double x, double a, double b);  Cumulative distribution function of the beta distribution Upper tail of the integral of the beta_pdf. ;  ; double beta_cdf_c (double x, double a, double b);  Complement of the cumulative distribution function of the beta distribution. ;  ; double binomial_cdf (unsigned int k, double p, unsigned int n);  Cumulative distribution function of the Binomial distribution Lower tail of the integral of the binomial_pdf. ;  ; double binomial_cdf_c (unsigned int k, double p, unsigned int n);  Complement of the cumulative distribution function of the Binomial distribution. ;  ; double breitwigner",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:48666,Modifiability,variab,variables,48666,"ector;  LorentzVector based on x,y,x,t (or px,py,pz,E) coordinates in double precision with metric (-,-,-,+) ;  ; typedef LorentzVector< PxPyPzE4D< float > > XYZTVectorF;  LorentzVector based on x,y,x,t (or px,py,pz,E) coordinates in float precision with metric (-,-,-,+) ;  ; typedef DisplacementVector3D< Cartesian3D< double >, DefaultCoordinateSystemTag > XYZVector;  3D Vector based on the cartesian coordinates x,y,z in double precision ;  ; typedef XYZVector XYZVectorD;  ; typedef DisplacementVector3D< Cartesian3D< float >, DefaultCoordinateSystemTag > XYZVectorF;  3D Vector based on the cartesian coordinates x,y,z in single precision ;  . Enumerations; enum  EGSLMinimizerType { ;   kConjugateFR; , kConjugatePR; , kVectorBFGS; , kVectorBFGS2; , ;   kSteepestDescent. };  enumeration specifying the types of GSL minimizers More...;  ; enum  EMinimVariableType { ;   kDefault; , kFix; , kBounds; , kLowBound; , ;   kUpBound. };  Enumeration describing the status of the variable The enumeration are used in the minimizer classes to categorize the variables. More...;  ; enum  ERotation3DMatrixIndex { ;   kXX = 0; , kXY = 1; , kXZ = 2; , kYX = 3; , ;   kYY = 4; , kYZ = 5; , kZX = 6; , kZY = 7; , ;   kZZ = 8. };  . Functions; void adkTestStat (double *adk, const std::vector< std::vector< double > > &samples, const std::vector< double > &zstar);  ; double beta_cdf (double x, double a, double b);  Cumulative distribution function of the beta distribution Upper tail of the integral of the beta_pdf. ;  ; double beta_cdf_c (double x, double a, double b);  Complement of the cumulative distribution function of the beta distribution. ;  ; double binomial_cdf (unsigned int k, double p, unsigned int n);  Cumulative distribution function of the Binomial distribution Lower tail of the integral of the binomial_pdf. ;  ; double binomial_cdf_c (unsigned int k, double p, unsigned int n);  Complement of the cumulative distribution function of the Binomial distribution. ;  ; double breitwigner",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:115542,Modifiability,coupling,coupling,115542,"im\phi)\)). ;  ; double sph_neumann (unsigned n, double x);  Calculates the spherical Bessel functions of the second kind (also called irregular spherical Bessel functions or spherical Neumann functions). ;  ; double airy_Ai (double x);  Calculates the Airy function Ai. ;  ; double airy_Bi (double x);  Calculates the Airy function Bi. ;  ; double airy_Ai_deriv (double x);  Calculates the derivative of the Airy function Ai. ;  ; double airy_Bi_deriv (double x);  Calculates the derivative of the Airy function Bi. ;  ; double airy_zero_Ai (unsigned int s);  Calculates the zeroes of the Airy function Ai. ;  ; double airy_zero_Bi (unsigned int s);  Calculates the zeroes of the Airy function Bi. ;  ; double airy_zero_Ai_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy function Ai. ;  ; double airy_zero_Bi_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy function Bi. ;  ; double wigner_3j (int two_ja, int two_jb, int two_jc, int two_ma, int two_mb, int two_mc);  Calculates the Wigner 3j coupling coefficients. ;  ; double wigner_6j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf);  Calculates the Wigner 6j coupling coefficients. ;  ; double wigner_9j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf, int two_jg, int two_jh, int two_ji);  Calculates the Wigner 9j coupling coefficients. ;  . Variables; static const double eu = 0.577215664901532860606;  ; double gDefaultAbsTolerance = 1.E-6;  ; int gDefaultMaxIter = 100;  ; static int gDefaultNpx = 100;  ; static int gDefaultNpx = 100;  ; static int gDefaultNSearch = 10;  ; static int gDefaultNSearch = 10;  ; double gDefaultRelTolerance = 1.E-10;  ; const ROOT::Math::IMultiGenFunction * gFunction;  function wrapper for the function to be minimized ;  ; const ROOT::Math::IMultiGradFunction * gGradFunction;  function wrapper for the gradient of the function to be minimized ;  ; int gNCalls = 0;  integer for the number of function",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:115687,Modifiability,coupling,coupling,115687,"spherical Bessel functions or spherical Neumann functions). ;  ; double airy_Ai (double x);  Calculates the Airy function Ai. ;  ; double airy_Bi (double x);  Calculates the Airy function Bi. ;  ; double airy_Ai_deriv (double x);  Calculates the derivative of the Airy function Ai. ;  ; double airy_Bi_deriv (double x);  Calculates the derivative of the Airy function Bi. ;  ; double airy_zero_Ai (unsigned int s);  Calculates the zeroes of the Airy function Ai. ;  ; double airy_zero_Bi (unsigned int s);  Calculates the zeroes of the Airy function Bi. ;  ; double airy_zero_Ai_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy function Ai. ;  ; double airy_zero_Bi_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy function Bi. ;  ; double wigner_3j (int two_ja, int two_jb, int two_jc, int two_ma, int two_mb, int two_mc);  Calculates the Wigner 3j coupling coefficients. ;  ; double wigner_6j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf);  Calculates the Wigner 6j coupling coefficients. ;  ; double wigner_9j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf, int two_jg, int two_jh, int two_ji);  Calculates the Wigner 9j coupling coefficients. ;  . Variables; static const double eu = 0.577215664901532860606;  ; double gDefaultAbsTolerance = 1.E-6;  ; int gDefaultMaxIter = 100;  ; static int gDefaultNpx = 100;  ; static int gDefaultNpx = 100;  ; static int gDefaultNSearch = 10;  ; static int gDefaultNSearch = 10;  ; double gDefaultRelTolerance = 1.E-10;  ; const ROOT::Math::IMultiGenFunction * gFunction;  function wrapper for the function to be minimized ;  ; const ROOT::Math::IMultiGradFunction * gGradFunction;  function wrapper for the gradient of the function to be minimized ;  ; int gNCalls = 0;  integer for the number of function calls ;  ; static const double kSqrt2 = 1.41421356237309515;  . Typedef Documentation. ◆ FitMethodFunction. typedef BasicFitMethodFunction< ROOT",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:115868,Modifiability,coupling,coupling,115868,"ulates the Airy function Bi. ;  ; double airy_Ai_deriv (double x);  Calculates the derivative of the Airy function Ai. ;  ; double airy_Bi_deriv (double x);  Calculates the derivative of the Airy function Bi. ;  ; double airy_zero_Ai (unsigned int s);  Calculates the zeroes of the Airy function Ai. ;  ; double airy_zero_Bi (unsigned int s);  Calculates the zeroes of the Airy function Bi. ;  ; double airy_zero_Ai_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy function Ai. ;  ; double airy_zero_Bi_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy function Bi. ;  ; double wigner_3j (int two_ja, int two_jb, int two_jc, int two_ma, int two_mb, int two_mc);  Calculates the Wigner 3j coupling coefficients. ;  ; double wigner_6j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf);  Calculates the Wigner 6j coupling coefficients. ;  ; double wigner_9j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf, int two_jg, int two_jh, int two_ji);  Calculates the Wigner 9j coupling coefficients. ;  . Variables; static const double eu = 0.577215664901532860606;  ; double gDefaultAbsTolerance = 1.E-6;  ; int gDefaultMaxIter = 100;  ; static int gDefaultNpx = 100;  ; static int gDefaultNpx = 100;  ; static int gDefaultNSearch = 10;  ; static int gDefaultNSearch = 10;  ; double gDefaultRelTolerance = 1.E-10;  ; const ROOT::Math::IMultiGenFunction * gFunction;  function wrapper for the function to be minimized ;  ; const ROOT::Math::IMultiGradFunction * gGradFunction;  function wrapper for the gradient of the function to be minimized ;  ; int gNCalls = 0;  integer for the number of function calls ;  ; static const double kSqrt2 = 1.41421356237309515;  . Typedef Documentation. ◆ FitMethodFunction. typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > ROOT::Math::FitMethodFunction. Definition at line 43 of file Fitter.h. ◆ FitMethodGradFunction. typedef BasicFitMethodFunction< ROOT::M",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:142399,Modifiability,variab,variable,142399," LorentzVector page. ; Definition at line 58 of file Vector4Dfwd.h. ◆ XYZVector. typedef DisplacementVector3D< Cartesian3D<double>, DefaultCoordinateSystemTag > ROOT::Math::XYZVector. 3D Vector based on the cartesian coordinates x,y,z in double precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 44 of file Vector3Dfwd.h. ◆ XYZVectorD. typedef XYZVector ROOT::Math::XYZVectorD. Definition at line 53 of file Vector3Dfwd.h. ◆ XYZVectorF. typedef DisplacementVector3D< Cartesian3D<float>, DefaultCoordinateSystemTag > ROOT::Math::XYZVectorF. 3D Vector based on the cartesian coordinates x,y,z in single precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 52 of file Vector3Dfwd.h. Enumeration Type Documentation. ◆ EMinimVariableType. enum ROOT::Math::EMinimVariableType. Enumeration describing the status of the variable The enumeration are used in the minimizer classes to categorize the variables. . EnumeratorkDefault free variable (unlimited) . kFix fixed variable . kBounds variable has two bounds . kLowBound variable has a lower bound . kUpBound variable has an upper bounds . Definition at line 27 of file MinimTransformVariable.h. ◆ ERotation3DMatrixIndex. enum ROOT::Math::ERotation3DMatrixIndex. EnumeratorkXX ; kXY ; kXZ ; kYX ; kYY ; kYZ ; kZX ; kZY ; kZZ . Definition at line 64 of file AxisAngle.cxx. Function Documentation. ◆ adkTestStat(). void ROOT::Math::adkTestStat ; (; double * ; adk, . const std::vector< std::vector< double > > & ; samples, . const std::vector< double > & ; zstar . ). Definition at line 546 of file GoFTest.cxx. ◆ Chebyshev0(). double ROOT::Math::Chebyshev0 ; (; double ; , . double ; c0 . ). inline . Definition at line 57 of file ChebyshevPol.h. ◆ Chebyshev1(). double ROOT::Math::Chebyshev1 ; (; double ; x, . double ; c0, . double ; c1 . ). inline . Definition at line 60 of file Chebyshev",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:142476,Modifiability,variab,variables,142476," LorentzVector page. ; Definition at line 58 of file Vector4Dfwd.h. ◆ XYZVector. typedef DisplacementVector3D< Cartesian3D<double>, DefaultCoordinateSystemTag > ROOT::Math::XYZVector. 3D Vector based on the cartesian coordinates x,y,z in double precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 44 of file Vector3Dfwd.h. ◆ XYZVectorD. typedef XYZVector ROOT::Math::XYZVectorD. Definition at line 53 of file Vector3Dfwd.h. ◆ XYZVectorF. typedef DisplacementVector3D< Cartesian3D<float>, DefaultCoordinateSystemTag > ROOT::Math::XYZVectorF. 3D Vector based on the cartesian coordinates x,y,z in single precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 52 of file Vector3Dfwd.h. Enumeration Type Documentation. ◆ EMinimVariableType. enum ROOT::Math::EMinimVariableType. Enumeration describing the status of the variable The enumeration are used in the minimizer classes to categorize the variables. . EnumeratorkDefault free variable (unlimited) . kFix fixed variable . kBounds variable has two bounds . kLowBound variable has a lower bound . kUpBound variable has an upper bounds . Definition at line 27 of file MinimTransformVariable.h. ◆ ERotation3DMatrixIndex. enum ROOT::Math::ERotation3DMatrixIndex. EnumeratorkXX ; kXY ; kXZ ; kYX ; kYY ; kYZ ; kZX ; kZY ; kZZ . Definition at line 64 of file AxisAngle.cxx. Function Documentation. ◆ adkTestStat(). void ROOT::Math::adkTestStat ; (; double * ; adk, . const std::vector< std::vector< double > > & ; samples, . const std::vector< double > & ; zstar . ). Definition at line 546 of file GoFTest.cxx. ◆ Chebyshev0(). double ROOT::Math::Chebyshev0 ; (; double ; , . double ; c0 . ). inline . Definition at line 57 of file ChebyshevPol.h. ◆ Chebyshev1(). double ROOT::Math::Chebyshev1 ; (; double ; x, . double ; c0, . double ; c1 . ). inline . Definition at line 60 of file Chebyshev",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:142513,Modifiability,variab,variable,142513,"isplacementVector3D< Cartesian3D<double>, DefaultCoordinateSystemTag > ROOT::Math::XYZVector. 3D Vector based on the cartesian coordinates x,y,z in double precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 44 of file Vector3Dfwd.h. ◆ XYZVectorD. typedef XYZVector ROOT::Math::XYZVectorD. Definition at line 53 of file Vector3Dfwd.h. ◆ XYZVectorF. typedef DisplacementVector3D< Cartesian3D<float>, DefaultCoordinateSystemTag > ROOT::Math::XYZVectorF. 3D Vector based on the cartesian coordinates x,y,z in single precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 52 of file Vector3Dfwd.h. Enumeration Type Documentation. ◆ EMinimVariableType. enum ROOT::Math::EMinimVariableType. Enumeration describing the status of the variable The enumeration are used in the minimizer classes to categorize the variables. . EnumeratorkDefault free variable (unlimited) . kFix fixed variable . kBounds variable has two bounds . kLowBound variable has a lower bound . kUpBound variable has an upper bounds . Definition at line 27 of file MinimTransformVariable.h. ◆ ERotation3DMatrixIndex. enum ROOT::Math::ERotation3DMatrixIndex. EnumeratorkXX ; kXY ; kXZ ; kYX ; kYY ; kYZ ; kZX ; kZY ; kZZ . Definition at line 64 of file AxisAngle.cxx. Function Documentation. ◆ adkTestStat(). void ROOT::Math::adkTestStat ; (; double * ; adk, . const std::vector< std::vector< double > > & ; samples, . const std::vector< double > & ; zstar . ). Definition at line 546 of file GoFTest.cxx. ◆ Chebyshev0(). double ROOT::Math::Chebyshev0 ; (; double ; , . double ; c0 . ). inline . Definition at line 57 of file ChebyshevPol.h. ◆ Chebyshev1(). double ROOT::Math::Chebyshev1 ; (; double ; x, . double ; c0, . double ; c1 . ). inline . Definition at line 60 of file ChebyshevPol.h. ◆ Chebyshev10(). double ROOT::Math::Chebyshev10 ; (; double ; x, . double ; c0, . d",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:142547,Modifiability,variab,variable,142547,"uble>, DefaultCoordinateSystemTag > ROOT::Math::XYZVector. 3D Vector based on the cartesian coordinates x,y,z in double precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 44 of file Vector3Dfwd.h. ◆ XYZVectorD. typedef XYZVector ROOT::Math::XYZVectorD. Definition at line 53 of file Vector3Dfwd.h. ◆ XYZVectorF. typedef DisplacementVector3D< Cartesian3D<float>, DefaultCoordinateSystemTag > ROOT::Math::XYZVectorF. 3D Vector based on the cartesian coordinates x,y,z in single precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 52 of file Vector3Dfwd.h. Enumeration Type Documentation. ◆ EMinimVariableType. enum ROOT::Math::EMinimVariableType. Enumeration describing the status of the variable The enumeration are used in the minimizer classes to categorize the variables. . EnumeratorkDefault free variable (unlimited) . kFix fixed variable . kBounds variable has two bounds . kLowBound variable has a lower bound . kUpBound variable has an upper bounds . Definition at line 27 of file MinimTransformVariable.h. ◆ ERotation3DMatrixIndex. enum ROOT::Math::ERotation3DMatrixIndex. EnumeratorkXX ; kXY ; kXZ ; kYX ; kYY ; kYZ ; kZX ; kZY ; kZZ . Definition at line 64 of file AxisAngle.cxx. Function Documentation. ◆ adkTestStat(). void ROOT::Math::adkTestStat ; (; double * ; adk, . const std::vector< std::vector< double > > & ; samples, . const std::vector< double > & ; zstar . ). Definition at line 546 of file GoFTest.cxx. ◆ Chebyshev0(). double ROOT::Math::Chebyshev0 ; (; double ; , . double ; c0 . ). inline . Definition at line 57 of file ChebyshevPol.h. ◆ Chebyshev1(). double ROOT::Math::Chebyshev1 ; (; double ; x, . double ; c0, . double ; c1 . ). inline . Definition at line 60 of file ChebyshevPol.h. ◆ Chebyshev10(). double ROOT::Math::Chebyshev10 ; (; double ; x, . double ; c0, . double ; c1, . double ; c2, . doubl",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:142566,Modifiability,variab,variable,142566,"emTag > ROOT::Math::XYZVector. 3D Vector based on the cartesian coordinates x,y,z in double precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 44 of file Vector3Dfwd.h. ◆ XYZVectorD. typedef XYZVector ROOT::Math::XYZVectorD. Definition at line 53 of file Vector3Dfwd.h. ◆ XYZVectorF. typedef DisplacementVector3D< Cartesian3D<float>, DefaultCoordinateSystemTag > ROOT::Math::XYZVectorF. 3D Vector based on the cartesian coordinates x,y,z in single precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 52 of file Vector3Dfwd.h. Enumeration Type Documentation. ◆ EMinimVariableType. enum ROOT::Math::EMinimVariableType. Enumeration describing the status of the variable The enumeration are used in the minimizer classes to categorize the variables. . EnumeratorkDefault free variable (unlimited) . kFix fixed variable . kBounds variable has two bounds . kLowBound variable has a lower bound . kUpBound variable has an upper bounds . Definition at line 27 of file MinimTransformVariable.h. ◆ ERotation3DMatrixIndex. enum ROOT::Math::ERotation3DMatrixIndex. EnumeratorkXX ; kXY ; kXZ ; kYX ; kYY ; kYZ ; kZX ; kZY ; kZZ . Definition at line 64 of file AxisAngle.cxx. Function Documentation. ◆ adkTestStat(). void ROOT::Math::adkTestStat ; (; double * ; adk, . const std::vector< std::vector< double > > & ; samples, . const std::vector< double > & ; zstar . ). Definition at line 546 of file GoFTest.cxx. ◆ Chebyshev0(). double ROOT::Math::Chebyshev0 ; (; double ; , . double ; c0 . ). inline . Definition at line 57 of file ChebyshevPol.h. ◆ Chebyshev1(). double ROOT::Math::Chebyshev1 ; (; double ; x, . double ; c0, . double ; c1 . ). inline . Definition at line 60 of file ChebyshevPol.h. ◆ Chebyshev10(). double ROOT::Math::Chebyshev10 ; (; double ; x, . double ; c0, . double ; c1, . double ; c2, . double ; c3, . double ; c4, . dou",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:142602,Modifiability,variab,variable,142602,"ctor based on the cartesian coordinates x,y,z in double precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 44 of file Vector3Dfwd.h. ◆ XYZVectorD. typedef XYZVector ROOT::Math::XYZVectorD. Definition at line 53 of file Vector3Dfwd.h. ◆ XYZVectorF. typedef DisplacementVector3D< Cartesian3D<float>, DefaultCoordinateSystemTag > ROOT::Math::XYZVectorF. 3D Vector based on the cartesian coordinates x,y,z in single precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 52 of file Vector3Dfwd.h. Enumeration Type Documentation. ◆ EMinimVariableType. enum ROOT::Math::EMinimVariableType. Enumeration describing the status of the variable The enumeration are used in the minimizer classes to categorize the variables. . EnumeratorkDefault free variable (unlimited) . kFix fixed variable . kBounds variable has two bounds . kLowBound variable has a lower bound . kUpBound variable has an upper bounds . Definition at line 27 of file MinimTransformVariable.h. ◆ ERotation3DMatrixIndex. enum ROOT::Math::ERotation3DMatrixIndex. EnumeratorkXX ; kXY ; kXZ ; kYX ; kYY ; kYZ ; kZX ; kZY ; kZZ . Definition at line 64 of file AxisAngle.cxx. Function Documentation. ◆ adkTestStat(). void ROOT::Math::adkTestStat ; (; double * ; adk, . const std::vector< std::vector< double > > & ; samples, . const std::vector< double > & ; zstar . ). Definition at line 546 of file GoFTest.cxx. ◆ Chebyshev0(). double ROOT::Math::Chebyshev0 ; (; double ; , . double ; c0 . ). inline . Definition at line 57 of file ChebyshevPol.h. ◆ Chebyshev1(). double ROOT::Math::Chebyshev1 ; (; double ; x, . double ; c0, . double ; c1 . ). inline . Definition at line 60 of file ChebyshevPol.h. ◆ Chebyshev10(). double ROOT::Math::Chebyshev10 ; (; double ; x, . double ; c0, . double ; c1, . double ; c2, . double ; c3, . double ; c4, . double ; c5, . double ; c6, . double ; c",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:142640,Modifiability,variab,variable,142640,"x,y,z in double precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 44 of file Vector3Dfwd.h. ◆ XYZVectorD. typedef XYZVector ROOT::Math::XYZVectorD. Definition at line 53 of file Vector3Dfwd.h. ◆ XYZVectorF. typedef DisplacementVector3D< Cartesian3D<float>, DefaultCoordinateSystemTag > ROOT::Math::XYZVectorF. 3D Vector based on the cartesian coordinates x,y,z in single precision ; To use it add the line #include <Vector3D.h>; See the documentation on the DisplacementVector3D page. ; Definition at line 52 of file Vector3Dfwd.h. Enumeration Type Documentation. ◆ EMinimVariableType. enum ROOT::Math::EMinimVariableType. Enumeration describing the status of the variable The enumeration are used in the minimizer classes to categorize the variables. . EnumeratorkDefault free variable (unlimited) . kFix fixed variable . kBounds variable has two bounds . kLowBound variable has a lower bound . kUpBound variable has an upper bounds . Definition at line 27 of file MinimTransformVariable.h. ◆ ERotation3DMatrixIndex. enum ROOT::Math::ERotation3DMatrixIndex. EnumeratorkXX ; kXY ; kXZ ; kYX ; kYY ; kYZ ; kZX ; kZY ; kZZ . Definition at line 64 of file AxisAngle.cxx. Function Documentation. ◆ adkTestStat(). void ROOT::Math::adkTestStat ; (; double * ; adk, . const std::vector< std::vector< double > > & ; samples, . const std::vector< double > & ; zstar . ). Definition at line 546 of file GoFTest.cxx. ◆ Chebyshev0(). double ROOT::Math::Chebyshev0 ; (; double ; , . double ; c0 . ). inline . Definition at line 57 of file ChebyshevPol.h. ◆ Chebyshev1(). double ROOT::Math::Chebyshev1 ; (; double ; x, . double ; c0, . double ; c1 . ). inline . Definition at line 60 of file ChebyshevPol.h. ◆ Chebyshev10(). double ROOT::Math::Chebyshev10 ; (; double ; x, . double ; c0, . double ; c1, . double ; c2, . double ; c3, . double ; c4, . double ; c5, . double ; c6, . double ; c7, . double ; c8, . double ; c9, . doub",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:4214,Performance,perform,performing,4214,"ass  BasicMinimizer;  Base Minimizer class, which defines the basic functionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transformation etc. More...;  ; class  BinaryOp;  BinaryOperation class A class representing binary operators in the parse tree. More...;  ; class  BinaryOpCopyL;  Binary Operation class with value storage for the left argument. More...;  ; class  BinaryOpCopyR;  Binary Operation class with value storage for the right argument. More...;  ; class  Boost;  Lorentz boost class with the (4D) transformation represented internally by a 4x4 orthosymplectic matrix. More...;  ; class  BoostX;  Class representing a Lorentz Boost along the X axis, by beta. More...;  ; class  BoostY;  Class representing a Lorentz Boost along the Y axis, by beta. More...;  ; class  BoostZ;  Class representing a Lorentz Boost along the Z axis, by beta. More...;  ; class  BrentMinimizer1D;  User class for performing function minimization. More...;  ; class  BrentRootFinder;  Class for finding the root of a one dimensional function using the Brent algorithm. More...;  ; class  Cartesian2D;  Class describing a 2D cartesian coordinate system (x, y coordinates) More...;  ; class  Cartesian3D;  Class describing a 3D cartesian coordinate system (x, y, z coordinates) More...;  ; struct  CDFWrapper;  ; class  ChebyshevApprox;  Class describing a Chebyshev series which can be used to approximate a function in a defined range [a,b] using Chebyshev polynomials. More...;  ; class  ChebyshevPol;  ; class  CholeskyDecomp;  class to compute the Cholesky decomposition of a matrix More...;  ; class  CholeskyDecompGenDim;  class to compute the Cholesky decomposition of a matrix More...;  ; class  CholInverter;  ; struct  CompileTimeChecker;  ; struct  CompileTimeChecker< false >;  ; class  Constant;  Constant expression class A class representing constant expressions (literals) in the parse tree. M",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:7639,Performance,perform,performing,7639,eration Class. More...;  ; class  Factory;  Factory class holding static functions to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager. More...;  ; class  FastInverter;  Fast Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  FastInverter< 3 >;  3x3 direct matrix inversion using Cramer Rule use only for FastInverter More...;  ; class  FastInverter< 4 >;  4x4 matrix inversion using Cramers rule. More...;  ; class  FastInverter< 5 >;  5x5 Matrix inversion using Cramers rule. More...;  ; class  FitTransformFunction;  Internal class used by GSLNLSMinimizer to implement the transformation of the chi2 function used by GSL Non-linear Least-square fitting The class is template on the FitMethodFunction type to support both gradient and non gradient functions. More...;  ; class  Functor;  Documentation for class Functor class. More...;  ; class  Functor1D;  Functor1D class for one-dimensional functions. More...;  ; class  GaussIntegrator;  User class for performing function integration. More...;  ; class  GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  GenAlgoOptions;  class implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs More...;  ; struct  GeneralHessianCalc;  ; struct  GeneralHessianCalc< double >;  ; struct  GeneralLinearFunctionDerivation;  Auxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar. More...;  ; struct  GeneralLinearFunctionDerivation< double >;  ; class  GeneticMinimizer;  GeneticMinimizer. More...;  ; struct  GeneticMinimizerParameters;  ; class  GenVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensio,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:7732,Performance,perform,performing,7732,ate the interfaces like ROOT::Math::Minimizer via the Plugin Manager. More...;  ; class  FastInverter;  Fast Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  FastInverter< 3 >;  3x3 direct matrix inversion using Cramer Rule use only for FastInverter More...;  ; class  FastInverter< 4 >;  4x4 matrix inversion using Cramers rule. More...;  ; class  FastInverter< 5 >;  5x5 Matrix inversion using Cramers rule. More...;  ; class  FitTransformFunction;  Internal class used by GSLNLSMinimizer to implement the transformation of the chi2 function used by GSL Non-linear Least-square fitting The class is template on the FitMethodFunction type to support both gradient and non gradient functions. More...;  ; class  Functor;  Documentation for class Functor class. More...;  ; class  Functor1D;  Functor1D class for one-dimensional functions. More...;  ; class  GaussIntegrator;  User class for performing function integration. More...;  ; class  GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  GenAlgoOptions;  class implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs More...;  ; struct  GeneralHessianCalc;  ; struct  GeneralHessianCalc< double >;  ; struct  GeneralLinearFunctionDerivation;  Auxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar. More...;  ; struct  GeneralLinearFunctionDerivation< double >;  ; class  GeneticMinimizer;  GeneticMinimizer. More...;  ; struct  GeneticMinimizerParameters;  ; class  GenVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-di,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:9619,Performance,perform,performing,9619,"s for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-dimensional gradient functions. More...;  ; class  GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  GSLChebSeries;  wrapper class for C struct gsl_cheb_series More...;  ; class  GSLDerivator;  Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:15949,Performance,perform,performing,15949,SL random number generators For this we need to implement functions which will be called by gsl_rng. More...;  ; class  GSLRngTaus;  Tausworthe generator by L'Ecuyer see here More...;  ; class  GSLRngWrapper;  GSLRngWrapper class to wrap gsl_rng structure. More...;  ; class  GSLRootFdFSolver;  Root-Finder with derivatives implementation class using GSL. More...;  ; class  GSLRootFinder;  Base class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives. More...;  ; class  GSLRootFinderDeriv;  Base class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives. More...;  ; class  GSLRootFSolver;  Root-Finder implementation class using GSL. More...;  ; class  GSLSimAnFunc;  GSLSimAnFunc class description. More...;  ; class  GSLSimAnMinimizer;  GSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL. More...;  ; class  GSLSimAnnealing;  GSLSimAnnealing class for performing a simulated annealing search of a multidimensional function. More...;  ; struct  GSLSimAnParams;  structure holding the simulated annealing parameters More...;  ; class  GSLVegasIntegrationWorkspace;  workspace for VEGAS More...;  ; class  IBaseFunctionMultiDimTempl;  Documentation for the abstract class IBaseFunctionMultiDim. More...;  ; class  IBaseFunctionOneDim;  Interface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interf,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:17190,Performance,perform,performing,17190,..;  ; class  IBaseFunctionMultiDimTempl;  Documentation for the abstract class IBaseFunctionMultiDim. More...;  ; class  IBaseFunctionOneDim;  Interface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derive,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:17380,Performance,perform,performing,17380, one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional paramet,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:17581,Performance,perform,performing,17581,class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  Interpolator;  Class for performing function interpolation of points. More...;  ; class  Inverter;  Matrix Inverter class Class to specialize calls to Dinv. More...;  ; class  Inverter< 0 >;  Inverter<0>. More...;  ; class  Inverter< 1 >;  1x1 matrix inversion \(a_{11} \to 1/a_{11}\) More...;  ; class  Inverter< 2 >;  2x2 matrix inversion using Cramers rule. More...;  ; class  IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  ; class  IParametricFunctionMultiDimTempl;  IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricGradFunctionMultiDimTempl;  Interface (abstract class) for parame,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:21062,Performance,perform,perform,21062,"N This class is a template on the contained type and on the symmetric matrix size, N. More...;  ; class  MatrixMulOp;  Class for Matrix-Matrix multiplication. More...;  ; class  MersenneTwisterEngine;  Random number generator class based on M. More...;  ; struct  meta_col_dot;  ; struct  meta_col_dot< 0 >;  ; struct  meta_dot;  ; struct  meta_dot< 0 >;  ; struct  meta_mag;  ; struct  meta_mag< 0 >;  ; struct  meta_matrix_dot;  ; struct  meta_matrix_dot< 0 >;  ; struct  meta_row_dot;  ; struct  meta_row_dot< 0 >;  ; class  Minimizer;  Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. More...;  ; class  MinimizerOptions;  Minimizer options. More...;  ; class  MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  MinOp;  Subtraction Operation Class. More...;  ; class  Minus;  Unary Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:21738,Performance,perform,performing,21738,"  ; class  MinimizerOptions;  Minimizer options. More...;  ; class  MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  MinOp;  Subtraction Operation Class. More...;  ; class  Minus;  Unary Minus Operation Class. More...;  ; struct  MinusEquals;  Evaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix -= general : NOT Allowed operation. More...;  ; struct  MinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices. More...;  ; struct  MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; class  MixMaxEngine;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  MixMaxEngineImpl;  ; class  MixMaxEngineImpl< ROOT_MM_N >;  ; class  MulOp;  Multiplication (element-wise) Operation Class. More...;  ; class  MultiDimParamFunctionAdapter;  MultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parametric function interface This is used typically in fitting where internally the function is stored as multi",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:24835,Performance,perform,performing,24835,"e template class for all Parametric Functions. More...;  ; class  ParamFunctionBase;  class defining the signature for multi-dim parametric functions More...;  ; class  ParamFunctorHandler;  ParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions. More...;  ; class  ParamFunctorTempl;  Param Functor class for Multidimensional functions. More...;  ; class  ParamMemFunHandler;  ParamFunctor Handler to Wrap pointers to member functions. More...;  ; class  PDFIntegral;  ; struct  PlaceExpr;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  ; struct  PlaceMatrix;  Structure to deal when a submatrix is placed in a matrix. More...;  ; struct  PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  ; struct  PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  ; struct  PlainParameters;  ; struct  PlusEquals;  Evaluate the expression performing a += operation Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) More...;  ; struct  PlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix += general : NOT Allowed operation. More...;  ; struct  PlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices Evaluate the expression performing a += operation for symmetric matrices Need to have a separate functions to avoid to modify two times the off-diagonal elements (i.e applying two times the expression) Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) More...;  ; class  Polar2D;  Class describing a polar 2D coordinate system based on r and phi Phi is restricted to be in the range [-PI,PI) More...;  ; class  Polar3D;  Class describing a polar coordinate system based on r",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:25273,Performance,perform,performing,25273,"  ; class  PDFIntegral;  ; struct  PlaceExpr;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  ; struct  PlaceMatrix;  Structure to deal when a submatrix is placed in a matrix. More...;  ; struct  PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  ; struct  PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  ; struct  PlainParameters;  ; struct  PlusEquals;  Evaluate the expression performing a += operation Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) More...;  ; struct  PlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix += general : NOT Allowed operation. More...;  ; struct  PlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices Evaluate the expression performing a += operation for symmetric matrices Need to have a separate functions to avoid to modify two times the off-diagonal elements (i.e applying two times the expression) Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) More...;  ; class  Polar2D;  Class describing a polar 2D coordinate system based on r and phi Phi is restricted to be in the range [-PI,PI) More...;  ; class  Polar3D;  Class describing a polar coordinate system based on r, theta and phi Phi is restricted to be in the range [-PI,PI) More...;  ; class  Polynomial;  Parametric Function class describing polynomials of order n. More...;  ; class  PositionVector2D;  Class describing a generic position vector (point) in 2 dimensions. More...;  ; class  PositionVector3D;  Class describing a generic position vector (point) in 3 dimensions. More...;  ; class  PtEtaPhiE4D;  Class describing a 4D cylindrical coordinate system using Pt , Phi, Eta and E (or rho, phi, eta ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:1960,Safety,avoid,avoid,1960,"ationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on a general matrix to a symmetric matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  AssignSym;  Force Expression evaluation from general to symmetric. More...;  ; class  AxisAngle;  AxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotation around that axis. More...;  ; class  BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  BasicFitMethodFunction;  FitMethodFun",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:25359,Safety,avoid,avoid,25359,"  ; class  PDFIntegral;  ; struct  PlaceExpr;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  ; struct  PlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  ; struct  PlaceMatrix;  Structure to deal when a submatrix is placed in a matrix. More...;  ; struct  PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  ; struct  PlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  ; struct  PlainParameters;  ; struct  PlusEquals;  Evaluate the expression performing a += operation Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) More...;  ; struct  PlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Specialization for symmetrix += general : NOT Allowed operation. More...;  ; struct  PlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Specialization for symmetric matrices Evaluate the expression performing a += operation for symmetric matrices Need to have a separate functions to avoid to modify two times the off-diagonal elements (i.e applying two times the expression) Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) More...;  ; class  Polar2D;  Class describing a polar 2D coordinate system based on r and phi Phi is restricted to be in the range [-PI,PI) More...;  ; class  Polar3D;  Class describing a polar coordinate system based on r, theta and phi Phi is restricted to be in the range [-PI,PI) More...;  ; class  Polynomial;  Parametric Function class describing polynomials of order n. More...;  ; class  PositionVector2D;  Class describing a generic position vector (point) in 2 dimensions. More...;  ; class  PositionVector3D;  Class describing a generic position vector (point) in 3 dimensions. More...;  ; class  PtEtaPhiE4D;  Class describing a 4D cylindrical coordinate system using Pt , Phi, Eta and E (or rho, phi, eta ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:688,Testability,test,test,688,". ROOT: ROOT::Math Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT::Math Namespace Reference. Namespaces; namespace  Blas;  ; namespace  BrentMethods;  ; namespace  Cephes;  ; namespace  Chebyshev;  template recursive functions for defining evaluation of Chebyshev polynomials T_n(x) and the series S(x) = Sum_i c_i* T_i(x) ;  ; namespace  CholeskyDecompHelpers;  helpers for CholeskyDecomp ;  ; namespace  detail;  ; namespace  GenAlgoOptUtil;  ; namespace  GenVector;  ; namespace  GenVector_detail;  ; namespace  GSLRootHelper;  Helper functions to test convergence of Root-Finding algorithms. ;  ; namespace  GSLSimAn;  ; namespace  gv_detail;  ; namespace  Impl;  ; namespace  IntegMultiDim;  ; namespace  IntegOneDim;  ; namespace  IntegOptionsUtil;  ; namespace  Integration;  ; namespace  IntegrationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:8519,Testability,test,tests,8519,nctor class. More...;  ; class  Functor1D;  Functor1D class for one-dimensional functions. More...;  ; class  GaussIntegrator;  User class for performing function integration. More...;  ; class  GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  GenAlgoOptions;  class implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs More...;  ; struct  GeneralHessianCalc;  ; struct  GeneralHessianCalc< double >;  ; struct  GeneralLinearFunctionDerivation;  Auxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar. More...;  ; struct  GeneralLinearFunctionDerivation< double >;  ; class  GeneticMinimizer;  GeneticMinimizer. More...;  ; struct  GeneticMinimizerParameters;  ; class  GenVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-dimensional gradient functions. More...;  ; class  GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  GSLChebSeries;  wrapper class for C struct gsl_cheb_series More...;  ; class  GSLDerivator;  Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrap,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:60192,Testability,log,lognormal,60192,", double xi=1, double x0=0);  Complement of the distribution function of the Landau distribution (upper tail). ;  ; double landau_xm1 (double x, double xi=1, double x0=0);  First moment (mean) of the truncated Landau distribution. ;  ; double landau_xm2 (double x, double xi=1, double x0=0);  Second moment of the truncated Landau distribution. ;  ; template<class T > ; T Lmag (const SVector< T, 4 > &rhs);  Lmag: Minkowski Lorentz-Vector norm (only for 4-dim vectors) Length of a vector Lorentz-Vector: \( |\vec{v}| = \sqrt{v_0^2 - v_1^2 - v_2^2 -v_3^2} \). ;  ; template<class A , class T > ; T Lmag (const VecExpr< A, T, 4 > &rhs);  ; template<class T > ; T Lmag2 (const SVector< T, 4 > &rhs);  Lmag2: Square of Minkowski Lorentz-Vector norm (only for 4D Vectors) Template to compute \( |\vec{v}|^2 = v_0^2 - v_1^2 - v_2^2 -v_3^2 \). ;  ; template<class A , class T > ; T Lmag2 (const VecExpr< A, T, 4 > &rhs);  ; double log1p (double x);  declarations for functions which are not implemented by some compilers ;  ; double lognormal_cdf (double x, double m, double s, double x0=0);  Cumulative distribution function of the lognormal distribution (lower tail). ;  ; double lognormal_cdf_c (double x, double m, double s, double x0=0);  Complement of the cumulative distribution function of the lognormal distribution (upper tail). ;  ; template<class char_t , class traits_t > ; std::basic_ios< char_t, traits_t > & machine_readable (std::basic_ios< char_t, traits_t > &ios);  ; template<class T , unsigned int D> ; T Mag (const SVector< T, D > &rhs);  Vector magnitude (Euclidean norm) Compute : \( |\vec{v}| = \sqrt{\sum_iv_i^2} \). ;  ; template<class A , class T , unsigned int D> ; T Mag (const VecExpr< A, T, D > &rhs);  ; template<class T , unsigned int D> ; T Mag2 (const SVector< T, D > &rhs);  Vector magnitude square Template to compute \(|\vec{v}|^2 = \sum_iv_i^2 \). ;  ; template<class A , class T , unsigned int D> ; T Mag2 (const VecExpr< A, T, D > &rhs);  ; template<class T > ; co",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:60361,Testability,log,lognormal,60361,"au_xm2 (double x, double xi=1, double x0=0);  Second moment of the truncated Landau distribution. ;  ; template<class T > ; T Lmag (const SVector< T, 4 > &rhs);  Lmag: Minkowski Lorentz-Vector norm (only for 4-dim vectors) Length of a vector Lorentz-Vector: \( |\vec{v}| = \sqrt{v_0^2 - v_1^2 - v_2^2 -v_3^2} \). ;  ; template<class A , class T > ; T Lmag (const VecExpr< A, T, 4 > &rhs);  ; template<class T > ; T Lmag2 (const SVector< T, 4 > &rhs);  Lmag2: Square of Minkowski Lorentz-Vector norm (only for 4D Vectors) Template to compute \( |\vec{v}|^2 = v_0^2 - v_1^2 - v_2^2 -v_3^2 \). ;  ; template<class A , class T > ; T Lmag2 (const VecExpr< A, T, 4 > &rhs);  ; double log1p (double x);  declarations for functions which are not implemented by some compilers ;  ; double lognormal_cdf (double x, double m, double s, double x0=0);  Cumulative distribution function of the lognormal distribution (lower tail). ;  ; double lognormal_cdf_c (double x, double m, double s, double x0=0);  Complement of the cumulative distribution function of the lognormal distribution (upper tail). ;  ; template<class char_t , class traits_t > ; std::basic_ios< char_t, traits_t > & machine_readable (std::basic_ios< char_t, traits_t > &ios);  ; template<class T , unsigned int D> ; T Mag (const SVector< T, D > &rhs);  Vector magnitude (Euclidean norm) Compute : \( |\vec{v}| = \sqrt{\sum_iv_i^2} \). ;  ; template<class A , class T , unsigned int D> ; T Mag (const VecExpr< A, T, D > &rhs);  ; template<class T , unsigned int D> ; T Mag2 (const SVector< T, D > &rhs);  Vector magnitude square Template to compute \(|\vec{v}|^2 = \sum_iv_i^2 \). ;  ; template<class A , class T , unsigned int D> ; T Mag2 (const VecExpr< A, T, D > &rhs);  ; template<class T > ; const T Maximum (const T &lhs, const T &rhs);  maximum. ;  ; double minfunction (const std::vector< double > &x);  function to return the function values at point x ;  ; TVectorD mingradfunction (TVectorD y);  function to return the gradient values a",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:104549,Testability,log,lognormal,104549,"le alpha, double n, double sigma, double mean=0);  pdf definition of the crystal_ball which is defined only for n > 1 otherwise integral is diverging ;  ; double exponential_pdf (double x, double lambda, double x0=0);  Probability density function of the exponential distribution. ;  ; double fdistribution_pdf (double x, double n, double m, double x0=0);  Probability density function of the F-distribution. ;  ; double gamma_pdf (double x, double alpha, double theta, double x0=0);  Probability density function of the gamma distribution. ;  ; double gaussian_pdf (double x, double sigma=1, double x0=0);  Probability density function of the normal (Gaussian) distribution. ;  ; double bigaussian_pdf (double x, double y, double sigmax=1, double sigmay=1, double rho=0, double x0=0, double y0=0);  Probability density function of the bi-dimensional (Gaussian) distribution. ;  ; double landau_pdf (double x, double xi=1, double x0=0);  Probability density function of the Landau distribution: ;  ; double lognormal_pdf (double x, double m, double s, double x0=0);  Probability density function of the lognormal distribution. ;  ; double normal_pdf (double x, double sigma=1, double x0=0);  Probability density function of the normal (Gaussian) distribution. ;  ; double poisson_pdf (unsigned int n, double mu);  Probability density function of the Poisson distribution. ;  ; double tdistribution_pdf (double x, double r, double x0=0);  Probability density function of Student's t-distribution. ;  ; double uniform_pdf (double x, double a, double b, double x0=0);  Probability density function of the uniform (flat) distribution. ;  ; Quantile Functions from MathCore; The implementation is provided in MathCore and for the majority of the function comes from Cephes. . double beta_quantile (double x, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the beta distribution (beta_cdf_c). ;  ; double beta_quantile_c (double x, double a, doubl",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:108672,Testability,log,lognormal,108672,"verse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the f distribution (fdistribution_cdf_c). ;  ; double gamma_quantile_c (double z, double alpha, double theta);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the gamma distribution (gamma_cdf_c). ;  ; double gamma_quantile (double z, double alpha, double theta);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the gamma distribution (gamma_cdf). ;  ; double gaussian_quantile_c (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the normal (Gaussian) distribution (gaussian_cdf_c). ;  ; double gaussian_quantile (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the normal (Gaussian) distribution (gaussian_cdf). ;  ; double lognormal_quantile_c (double x, double m, double s);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the lognormal distribution (lognormal_cdf_c). ;  ; double lognormal_quantile (double x, double m, double s);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the lognormal distribution (lognormal_cdf). ;  ; double normal_quantile_c (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the normal (Gaussian) distribution (normal_cdf_c). ;  ; double normal_quantile (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the normal (Gaussian) distribution (normal_cdf). ;  ; double uniform_quantile_c (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the uniform (flat) distribution (uniform_cdf_c). ;  ; double uniform_quantile (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution funct",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:108868,Testability,log,lognormal,108868,"Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the gamma distribution (gamma_cdf_c). ;  ; double gamma_quantile (double z, double alpha, double theta);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the gamma distribution (gamma_cdf). ;  ; double gaussian_quantile_c (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the normal (Gaussian) distribution (gaussian_cdf_c). ;  ; double gaussian_quantile (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the normal (Gaussian) distribution (gaussian_cdf). ;  ; double lognormal_quantile_c (double x, double m, double s);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the lognormal distribution (lognormal_cdf_c). ;  ; double lognormal_quantile (double x, double m, double s);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the lognormal distribution (lognormal_cdf). ;  ; double normal_quantile_c (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the normal (Gaussian) distribution (normal_cdf_c). ;  ; double normal_quantile (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the normal (Gaussian) distribution (normal_cdf). ;  ; double uniform_quantile_c (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the uniform (flat) distribution (uniform_cdf_c). ;  ; double uniform_quantile (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the uniform (flat) distribution (uniform_cdf). ;  ; double landau_quantile (double z, double xi=1);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of th",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:110398,Testability,log,logarithm,110398,"mulative distribution function of the upper tail of the uniform (flat) distribution (uniform_cdf_c). ;  ; double uniform_quantile (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the uniform (flat) distribution (uniform_cdf). ;  ; double landau_quantile (double z, double xi=1);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the Landau distribution (landau_cdf). ;  ; double landau_quantile_c (double z, double xi=1);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the landau distribution (landau_cdf_c). ;  ; Special Functions from MathCore; double erf (double x);  Error function encountered in integrating the normal distribution. ;  ; double erfc (double x);  Complementary error function. ;  ; double tgamma (double x);  The gamma function is defined to be the extension of the factorial to real numbers. ;  ; double lgamma (double x);  Calculates the logarithm of the gamma function. ;  ; double inc_gamma (double a, double x);  Calculates the normalized (regularized) lower incomplete gamma function (lower integral) ;  ; double inc_gamma_c (double a, double x);  Calculates the normalized (regularized) upper incomplete gamma function (upper integral) ;  ; double beta (double x, double y);  Calculates the beta function. ;  ; double inc_beta (double x, double a, double b);  Calculates the normalized (regularized) incomplete beta function. ;  ; double sinint (double x);  Calculates the sine integral. ;  ; double cosint (double x);  Calculates the real part of the cosine integral Re(Ci). ;  ; Quantile Functions from MathMore; The implementation used is that of GSL. . double tdistribution_quantile_c (double z, double r);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of Student's t-distribution (tdistribution_cdf_c). ;  ; double tdistribution_quantile (double z, double r);  Inverse ( \(D^{-1}(z)",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:151146,Testability,log,log,151146,"t VecExpr< A, T, D > & ; rhs . ). inline . Definition at line 173 of file Functions.h. ◆ Dot() [2/3]. template<class A , class T , unsigned int D> . T ROOT::Math::Dot ; (; const VecExpr< A, T, D > & ; lhs, . const SVector< T, D > & ; rhs . ). inline . Definition at line 181 of file Functions.h. ◆ Dot() [3/3]. template<class A , class B , class T , unsigned int D> . T ROOT::Math::Dot ; (; const VecExpr< A, T, D > & ; lhs, . const VecExpr< B, T, D > & ; rhs . ). inline . Definition at line 190 of file Functions.h. ◆ etaMax(). template<class T > . T ROOT::Math::etaMax ; (; ). inline . Function providing the maximum possible value of pseudorapidity for a non-zero rho, in the Scalar type with the largest dynamic range. ; Definition at line 51 of file etaMax.h. ◆ etaMax_impl(). long double ROOT::Math::etaMax_impl ; (; ). inline . The following function could be called to provide the maximum possible value of pseudorapidity for a non-zero rho. ; This is log ( max/min ) where max and min are the extrema of positive values for type long double. ; Definition at line 36 of file etaMax.h. ◆ expm1(). double ROOT::Math::expm1 ; (; double ; x). inline . exp(x) -1 with error cancellation when x is small ; Definition at line 110 of file Math.h. ◆ fabs() [1/2]. template<class A , class T , unsigned int D, unsigned int D2, class R > . Expr< UnaryOp< Fabs< T >, Expr< A, T, D, D2, R >, T >, T, D, D2, R > ROOT::Math::fabs ; (; const Expr< A, T, D, D2, R > & ; rhs). inline . Definition at line 160 of file UnaryOperators.h. ◆ fabs() [2/2]. template<class A , class T , unsigned int D> . VecExpr< UnaryOp< Fabs< T >, VecExpr< A, T, D >, T >, T, D > ROOT::Math::fabs ; (; const VecExpr< A, T, D > & ; rhs). inline . Definition at line 131 of file UnaryOperators.h. ◆ gaussian_cdf(). double ROOT::Math::gaussian_cdf ; (; double ; x, . double ; sigma = 1, . double ; x0 = 0 . ). inline . Alternative name for same function. ; Definition at line 485 of file ProbFuncMathCore.h. ◆ gaussian_cdf_c(). double",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:153660,Testability,log,log,153660,"1 of file GSLMultiRootFinder.cxx. ◆ GetGSLType(). const gsl_multiroot_fsolver_type * ROOT::Math::GetGSLType ; (; GSLMultiRootFinder::EType ; type). Definition at line 183 of file GSLMultiRootFinder.cxx. ◆ getSum(). int ROOT::Math::getSum ; (; const int * ; x, . int ; n . ). Definition at line 534 of file GoFTest.cxx. ◆ human_readable(). template<class char_t , class traits_t > . std::basic_ios< char_t, traits_t > & ROOT::Math::human_readable ; (; std::basic_ios< char_t, traits_t > & ; ios). inline . Definition at line 197 of file GenVectorIO.h. ◆ Lmag(). template<class A , class T > . T ROOT::Math::Lmag ; (; const VecExpr< A, T, 4 > & ; rhs). inline . Definition at line 308 of file Functions.h. ◆ Lmag2(). template<class A , class T > . T ROOT::Math::Lmag2 ; (; const VecExpr< A, T, 4 > & ; rhs). inline . Definition at line 284 of file Functions.h. ◆ log1p(). double ROOT::Math::log1p ; (; double ; x). inline . declarations for functions which are not implemented by some compilers ; log(1+x) with error cancelation when x is small ; Definition at line 98 of file Math.h. ◆ machine_readable(). template<class char_t , class traits_t > . std::basic_ios< char_t, traits_t > & ROOT::Math::machine_readable ; (; std::basic_ios< char_t, traits_t > & ; ios). inline . Definition at line 208 of file GenVectorIO.h. ◆ Mag(). template<class A , class T , unsigned int D> . T ROOT::Math::Mag ; (; const VecExpr< A, T, D > & ; rhs). inline . Definition at line 261 of file Functions.h. ◆ Mag2(). template<class A , class T , unsigned int D> . T ROOT::Math::Mag2 ; (; const VecExpr< A, T, D > & ; rhs). inline . Definition at line 238 of file Functions.h. ◆ minfunction(). double ROOT::Math::minfunction ; (; const std::vector< double > & ; x). function to return the function values at point x ; Definition at line 19 of file RMinimizer.cxx. ◆ mingradfunction(). TVectorD ROOT::Math::mingradfunction ; (; TVectorD ; y). function to return the gradient values at point y ; Definition at line 25 of file",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Math.html:16462,Usability,simpl,simple,16462,l functions which do not use function derivatives. More...;  ; class  GSLRootFinderDeriv;  Base class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives. More...;  ; class  GSLRootFSolver;  Root-Finder implementation class using GSL. More...;  ; class  GSLSimAnFunc;  GSLSimAnFunc class description. More...;  ; class  GSLSimAnMinimizer;  GSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL. More...;  ; class  GSLSimAnnealing;  GSLSimAnnealing class for performing a simulated annealing search of a multidimensional function. More...;  ; struct  GSLSimAnParams;  structure holding the simulated annealing parameters More...;  ; class  GSLVegasIntegrationWorkspace;  workspace for VEGAS More...;  ; class  IBaseFunctionMultiDimTempl;  Documentation for the abstract class IBaseFunctionMultiDim. More...;  ; class  IBaseFunctionOneDim;  Interface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integra,MatchSource.WIKI,doc/v632/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:3996,Availability,avail,available,3996,"er;  Instantiates the seed generator and Minimum builder for the Fumili minimization method. More...;  ; class  FumiliStandardChi2FCN;  Class implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; class  FumiliStandardMaximumLikelihoodFCN;  Class implementing the Elements member function for the standard maximum likelihood method. More...;  ; class  FunctionGradient;  ; class  FunctionMinimizer;  base class for function minimizers; user may give FCN or FCN with Gradient, Parameter starting values and initial Error guess (sigma) (or ""step size""), or Parameter starting values and initial covariance matrix; covariance matrix is stored in Upper triangular packed storage format, e.g. More...;  ; class  FunctionMinimum;  class holding the full result of the minimization; both internal and external (MnUserParameterState) representation available for the parameters at the Minimum More...;  ; class  gen;  ; class  GenericFunction;  Class from which all the other classes, representing functions, inherit. More...;  ; class  GradientCalculator;  interface class for gradient calculators More...;  ; class  HessianGradientCalculator;  HessianGradientCalculator: class to calculate Gradient for Hessian. More...;  ; class  InitialGradientCalculator;  Class to calculate an initial estimate of the gradient. More...;  ; class  LASquareMatrix;  ; class  LASymMatrix;  Class describing a symmetric matrix of size n. More...;  ; class  LAVector;  ; class  MatrixInverse;  ; class  MatrixInverse< vec, M, T >;  ; class  MinimumBuilder;  ; class  MinimumError;  MinimumError keeps the inv. More...;  ; class  MinimumErrorUpdator;  ; class  MinimumParameters;  ; class  MinimumSeed;  ; class  MinimumSeedGenerator;  base class for seed generators (starting values); the seed generator prepares init",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:5708,Availability,error,error,5708,"AVector;  ; class  MatrixInverse;  ; class  MatrixInverse< vec, M, T >;  ; class  MinimumBuilder;  ; class  MinimumError;  MinimumError keeps the inv. More...;  ; class  MinimumErrorUpdator;  ; class  MinimumParameters;  ; class  MinimumSeed;  ; class  MinimumSeedGenerator;  base class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; More...;  ; class  MinimumState;  MinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder). More...;  ; class  MinosError;  Class holding the result of Minos (lower and upper values) for a specific parameter. More...;  ; class  Minuit2Minimizer;  Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. More...;  ; class  MinuitParameter;  class for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; More...;  ; class  MnApplication;  application interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization More...;  ; class  MnContours;  API class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors;. More...;  ; class  MnCovarianceSqueeze;  class to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index More...;  ; class  MnCross;  ; class  MnEigen;  API class for calculating the eigenvalues of symmetric matrix. More...;  ; class  MnFcn;  Wrapper class to FCNBase interface used internally by Minuit. More...;  ; class  MnFumiliMinimize;  API class for minimization using Fumil",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:6012,Availability,error,errors,6012,"mState;  MinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder). More...;  ; class  MinosError;  Class holding the result of Minos (lower and upper values) for a specific parameter. More...;  ; class  Minuit2Minimizer;  Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. More...;  ; class  MinuitParameter;  class for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; More...;  ; class  MnApplication;  application interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization More...;  ; class  MnContours;  API class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors;. More...;  ; class  MnCovarianceSqueeze;  class to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index More...;  ; class  MnCross;  ; class  MnEigen;  API class for calculating the eigenvalues of symmetric matrix. More...;  ; class  MnFcn;  Wrapper class to FCNBase interface used internally by Minuit. More...;  ; class  MnFumiliMinimize;  API class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.; also used by MnMinos and MnContours;. More...;  ; class  MnFunctionCross;  MnFunctionCross. More...;  ; class  MnGlobalCorrelationCoeff;  class for global correlation coefficient More...;  ; class  MnHesse;  API class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by t",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:6157,Availability,error,errors,6157,"mState;  MinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder). More...;  ; class  MinosError;  Class holding the result of Minos (lower and upper values) for a specific parameter. More...;  ; class  Minuit2Minimizer;  Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. More...;  ; class  MinuitParameter;  class for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; More...;  ; class  MnApplication;  application interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization More...;  ; class  MnContours;  API class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors;. More...;  ; class  MnCovarianceSqueeze;  class to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index More...;  ; class  MnCross;  ; class  MnEigen;  API class for calculating the eigenvalues of symmetric matrix. More...;  ; class  MnFcn;  Wrapper class to FCNBase interface used internally by Minuit. More...;  ; class  MnFumiliMinimize;  API class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.; also used by MnMinos and MnContours;. More...;  ; class  MnFunctionCross;  MnFunctionCross. More...;  ; class  MnGlobalCorrelationCoeff;  class for global correlation coefficient More...;  ; class  MnHesse;  API class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by t",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:7872,Availability,error,errors,7872,"...;  ; class  MnHesse;  API class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself. More...;  ; class  MnLineSearch;  Implements a 1-dimensional minimization along a given direction (i.e. More...;  ; class  MnMachinePrecision;  Sets the relative floating point (double) arithmetic precision. More...;  ; class  MnMigrad;  API class for minimization using Variable Metric technology (""MIGRAD""); allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.; also used by MnMinos and MnContours;. More...;  ; class  MnMinimize;  API class for minimization using Variable Metric technology (""MIGRAD""); allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.; also used by MnMinos and MnContours;. More...;  ; class  MnMinos;  API class for Minos Error analysis (asymmetric errors); minimization has to be done before and Minimum must be valid; possibility to ask only for one side of the Minos Error;. More...;  ; class  MnParabola;  This class defines a parabola of the form a*x*x + b*x + c. More...;  ; class  MnParabolaFactory;  ; class  MnParabolaPoint;  A point of a parabola. More...;  ; class  MnParameterScan;  Scans the values of FCN as a function of one Parameter and retains the best function and Parameter values found. More...;  ; class  MnParStr;  ; class  MnPlot;  MnPlot produces a text-screen graphical output of (x,y) points, e.g. More...;  ; class  MnPosDef;  Force the covariance matrix to be positive defined by adding extra terms in the diagonal. More...;  ; class  MnPrint;  ; class  MnRefCountedPointer;  ; class  MnReferenceCounter;  ; class  MnScan;  API class for minimization using a scan method to find the minimum; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.;. More...;  ; class  MnSeedGenerator;  concret",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:9997,Availability,error,errors,9997,"ete implementation of the MinimumSeedGenerator interface; used within ModularFunctionMinimizer; More...;  ; class  MnSimplex;  API class for minimization using the Simplex method, which does not need and use the derivatives of the function, but only function values. More...;  ; class  MnStrategy;  API class for defining four levels of strategies: low (0), medium (1), high (2), very high (>=3); acts on: Migrad (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) More...;  ; class  MnTiny;  ; class  MnTraceObject;  ; class  MnUserCovariance;  Class containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user. More...;  ; class  MnUserFcn;  Wrapper used by Minuit of FCN interface containing a reference to the transformation object. More...;  ; class  MnUserParameters;  API class for the user interaction with the parameters; serves as input to the minimizer as well as output from it; users can interact: Fix/release parameters, set values and errors, etc.; parameters can be accessed via their Parameter number (determined internally by Minuit and followed the order how the parameters are created) or via their user-specified Name (10 character string). More...;  ; class  MnUserParameterState;  class which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; More...;  ; class  MnUserTransformation;  class dealing with the transformation between user specified parameters (external) and internal parameters used for minimization More...;  ; class  MnVectorTransform;  ; class  ModularFunctionMinimizer;  Base common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters. More...;  ; class  MPIProcess;  ; class  MPITerminate;  ; class  Ne",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:10347,Availability,error,errors,10347," (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) More...;  ; class  MnTiny;  ; class  MnTraceObject;  ; class  MnUserCovariance;  Class containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user. More...;  ; class  MnUserFcn;  Wrapper used by Minuit of FCN interface containing a reference to the transformation object. More...;  ; class  MnUserParameters;  API class for the user interaction with the parameters; serves as input to the minimizer as well as output from it; users can interact: Fix/release parameters, set values and errors, etc.; parameters can be accessed via their Parameter number (determined internally by Minuit and followed the order how the parameters are created) or via their user-specified Name (10 character string). More...;  ; class  MnUserParameterState;  class which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; More...;  ; class  MnUserTransformation;  class dealing with the transformation between user specified parameters (external) and internal parameters used for minimization More...;  ; class  MnVectorTransform;  ; class  ModularFunctionMinimizer;  Base common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters. More...;  ; class  MPIProcess;  ; class  MPITerminate;  ; class  NegativeG2LineSearch;  In case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive. More...;  ; class  Numerical2PGradientCalculator;  class performing the numerical gradient calculation More...;  ; class  NumericalDerivator; ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:12953,Availability,error,error,12953,"implex. More...;  ; class  SimplexParameters;  class describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process. More...;  ; class  SimplexSeedGenerator;  generate Simplex starting point (state) More...;  ; class  SinParameterTransformation;  class for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one More...;  ; class  SqrtLowParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  SqrtUpParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  StackAllocator;  StackAllocator controls the memory allocation/deallocation of Minuit. More...;  ; class  StackAllocatorHolder;  ; class  StackError;  ; class  StackOverflow;  define stack allocator symbol More...;  ; class  sym;  ; class  VariableMetricBuilder;  Build (find) function minimum using the Variable Metric method (MIGRAD) Two possible error updators can be chosen. More...;  ; class  VariableMetricEDMEstimator;  ; class  VariableMetricMinimizer;  Instantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization method. More...;  ; class  vec;  ; class  VectorOuterProduct;  . Typedefs; typedef LASymMatrix MnAlgebraicSymMatrix;  ; typedef LAVector MnAlgebraicVector;  . Enumerations; enum  EMinimizerType { ;   kMigrad; , kSimplex; , kCombined; , kScan; , ;   kFumili; , kMigradBFGS. };  ; enum class  GradientParameterSpace { External; , Internal; };  Extension of the FCNBase for providing the analytical Gradient of the function. More...;  . Functions; int ControlPrintLevel ();  ; LAVector eigenvalues (const LASymMatrix &mat);  ; double inner_product (const LAVector &, const LAVector &);  ; template<class mt , class M , class T > ; ABObj< mt, MatrixInverse< mt, ABObj< mt, M, T >, T >, T > Inverse (const ABObj< mt, M, T > &obj);  ; ABObj< sym, MatrixInve",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:5670,Deployability,release,release,5670,"AVector;  ; class  MatrixInverse;  ; class  MatrixInverse< vec, M, T >;  ; class  MinimumBuilder;  ; class  MinimumError;  MinimumError keeps the inv. More...;  ; class  MinimumErrorUpdator;  ; class  MinimumParameters;  ; class  MinimumSeed;  ; class  MinimumSeedGenerator;  base class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; More...;  ; class  MinimumState;  MinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder). More...;  ; class  MinosError;  Class holding the result of Minos (lower and upper values) for a specific parameter. More...;  ; class  Minuit2Minimizer;  Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. More...;  ; class  MinuitParameter;  class for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; More...;  ; class  MnApplication;  application interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization More...;  ; class  MnContours;  API class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors;. More...;  ; class  MnCovarianceSqueeze;  class to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index More...;  ; class  MnCross;  ; class  MnEigen;  API class for calculating the eigenvalues of symmetric matrix. More...;  ; class  MnFcn;  Wrapper class to FCNBase interface used internally by Minuit. More...;  ; class  MnFumiliMinimize;  API class for minimization using Fumil",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:9962,Deployability,release,release,9962,"ete implementation of the MinimumSeedGenerator interface; used within ModularFunctionMinimizer; More...;  ; class  MnSimplex;  API class for minimization using the Simplex method, which does not need and use the derivatives of the function, but only function values. More...;  ; class  MnStrategy;  API class for defining four levels of strategies: low (0), medium (1), high (2), very high (>=3); acts on: Migrad (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) More...;  ; class  MnTiny;  ; class  MnTraceObject;  ; class  MnUserCovariance;  Class containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user. More...;  ; class  MnUserFcn;  Wrapper used by Minuit of FCN interface containing a reference to the transformation object. More...;  ; class  MnUserParameters;  API class for the user interaction with the parameters; serves as input to the minimizer as well as output from it; users can interact: Fix/release parameters, set values and errors, etc.; parameters can be accessed via their Parameter number (determined internally by Minuit and followed the order how the parameters are created) or via their user-specified Name (10 character string). More...;  ; class  MnUserParameterState;  class which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; More...;  ; class  MnUserTransformation;  class dealing with the transformation between user specified parameters (external) and internal parameters used for minimization More...;  ; class  MnVectorTransform;  ; class  ModularFunctionMinimizer;  Base common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters. More...;  ; class  MPIProcess;  ; class  MPITerminate;  ; class  Ne",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:1711,Energy Efficiency,adapt,adapting,1711,"Type< vec, gen >;  ; class  AlgebraicProdType< vec, sym >;  ; class  AlgebraicSumType;  ; class  AlgebraicSumType< gen, vec >;  ; class  AlgebraicSumType< sym, vec >;  ; class  AlgebraicSumType< T, T >;  ; class  AlgebraicSumType< vec, gen >;  ; class  AlgebraicSumType< vec, sym >;  ; class  AnalyticalGradientCalculator;  ; class  BFGSErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; class  BFGSMinimizerType;  ; class  CombinedMinimizer;  Combined minimizer: combination of Migrad and Simplex. More...;  ; class  CombinedMinimumBuilder;  ; class  ContoursError;  ; class  DavidonErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; struct  DerivatorElement;  ; class  ExternalInternalGradientCalculator;  Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliGradientCalculator;  Fumili gradient calculator using exte",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:1940,Energy Efficiency,adapt,adapting,1940," gen >;  ; class  AlgebraicSumType< vec, sym >;  ; class  AnalyticalGradientCalculator;  ; class  BFGSErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; class  BFGSMinimizerType;  ; class  CombinedMinimizer;  Combined minimizer: combination of Migrad and Simplex. More...;  ; class  CombinedMinimumBuilder;  ; class  ContoursError;  ; class  DavidonErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; struct  DerivatorElement;  ; class  ExternalInternalGradientCalculator;  Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliGradientCalculator;  Fumili gradient calculator using external gradient provided by FCN Note that the computed Hessian and G2 are an approximation valid for small residuals. More...;  ; class  FumiliMaximumLikelihoodFCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  Fumi",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:2501,Energy Efficiency,adapt,adapting,2501,"radientCalculator;  Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliGradientCalculator;  Fumili gradient calculator using external gradient provided by FCN Note that the computed Hessian and G2 are an approximation valid for small residuals. More...;  ; class  FumiliMaximumLikelihoodFCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliMinimizer;  Instantiates the seed generator and Minimum builder for the Fumili minimization method. More...;  ; class  FumiliStandardChi2FCN;  Class implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; class  FumiliStandardMaximumLikelihoodFCN;  Class implementing the Elements member function for the standard maximum likelihood method. More.",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:6216,Energy Efficiency,reduce,reduce,6216,"t of Minos (lower and upper values) for a specific parameter. More...;  ; class  Minuit2Minimizer;  Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. More...;  ; class  MinuitParameter;  class for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; More...;  ; class  MnApplication;  application interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization More...;  ; class  MnContours;  API class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors;. More...;  ; class  MnCovarianceSqueeze;  class to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index More...;  ; class  MnCross;  ; class  MnEigen;  API class for calculating the eigenvalues of symmetric matrix. More...;  ; class  MnFcn;  Wrapper class to FCNBase interface used internally by Minuit. More...;  ; class  MnFumiliMinimize;  API class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.; also used by MnMinos and MnContours;. More...;  ; class  MnFunctionCross;  MnFunctionCross. More...;  ; class  MnGlobalCorrelationCoeff;  class for global correlation coefficient More...;  ; class  MnHesse;  API class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself. More...;  ; class  MnLineSearch;  Implements a 1-dimensional minimization along a given direction (i.e. More...;  ; class  MnMachinePrecision;  Sets the relative float",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:1693,Integrability,wrap,wrapped,1693,"Type< vec, gen >;  ; class  AlgebraicProdType< vec, sym >;  ; class  AlgebraicSumType;  ; class  AlgebraicSumType< gen, vec >;  ; class  AlgebraicSumType< sym, vec >;  ; class  AlgebraicSumType< T, T >;  ; class  AlgebraicSumType< vec, gen >;  ; class  AlgebraicSumType< vec, sym >;  ; class  AnalyticalGradientCalculator;  ; class  BFGSErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; class  BFGSMinimizerType;  ; class  CombinedMinimizer;  Combined minimizer: combination of Migrad and Simplex. More...;  ; class  CombinedMinimumBuilder;  ; class  ContoursError;  ; class  DavidonErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; struct  DerivatorElement;  ; class  ExternalInternalGradientCalculator;  Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliGradientCalculator;  Fumili gradient calculator using exte",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:1922,Integrability,wrap,wrapped,1922," gen >;  ; class  AlgebraicSumType< vec, sym >;  ; class  AnalyticalGradientCalculator;  ; class  BFGSErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; class  BFGSMinimizerType;  ; class  CombinedMinimizer;  Combined minimizer: combination of Migrad and Simplex. More...;  ; class  CombinedMinimumBuilder;  ; class  ContoursError;  ; class  DavidonErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; struct  DerivatorElement;  ; class  ExternalInternalGradientCalculator;  Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliGradientCalculator;  Fumili gradient calculator using external gradient provided by FCN Note that the computed Hessian and G2 are an approximation valid for small residuals. More...;  ; class  FumiliMaximumLikelihoodFCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  Fumi",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:2483,Integrability,wrap,wrapped,2483,"radientCalculator;  Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliGradientCalculator;  Fumili gradient calculator using external gradient provided by FCN Note that the computed Hessian and G2 are an approximation valid for small residuals. More...;  ; class  FumiliMaximumLikelihoodFCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliMinimizer;  Instantiates the seed generator and Minimum builder for the Fumili minimization method. More...;  ; class  FumiliStandardChi2FCN;  Class implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; class  FumiliStandardMaximumLikelihoodFCN;  Class implementing the Elements member function for the standard maximum likelihood method. More.",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:4205,Integrability,interface,interface,4205," measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; class  FumiliStandardMaximumLikelihoodFCN;  Class implementing the Elements member function for the standard maximum likelihood method. More...;  ; class  FunctionGradient;  ; class  FunctionMinimizer;  base class for function minimizers; user may give FCN or FCN with Gradient, Parameter starting values and initial Error guess (sigma) (or ""step size""), or Parameter starting values and initial covariance matrix; covariance matrix is stored in Upper triangular packed storage format, e.g. More...;  ; class  FunctionMinimum;  class holding the full result of the minimization; both internal and external (MnUserParameterState) representation available for the parameters at the Minimum More...;  ; class  gen;  ; class  GenericFunction;  Class from which all the other classes, representing functions, inherit. More...;  ; class  GradientCalculator;  interface class for gradient calculators More...;  ; class  HessianGradientCalculator;  HessianGradientCalculator: class to calculate Gradient for Hessian. More...;  ; class  InitialGradientCalculator;  Class to calculate an initial estimate of the gradient. More...;  ; class  LASquareMatrix;  ; class  LASymMatrix;  Class describing a symmetric matrix of size n. More...;  ; class  LAVector;  ; class  MatrixInverse;  ; class  MatrixInverse< vec, M, T >;  ; class  MinimumBuilder;  ; class  MinimumError;  MinimumError keeps the inv. More...;  ; class  MinimumErrorUpdator;  ; class  MinimumParameters;  ; class  MinimumSeed;  ; class  MinimumSeedGenerator;  base class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; More...;  ; class  MinimumState;  MinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder). More...;  ; class  Mi",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:5408,Integrability,interface,interface,5408,"ialGradientCalculator;  Class to calculate an initial estimate of the gradient. More...;  ; class  LASquareMatrix;  ; class  LASymMatrix;  Class describing a symmetric matrix of size n. More...;  ; class  LAVector;  ; class  MatrixInverse;  ; class  MatrixInverse< vec, M, T >;  ; class  MinimumBuilder;  ; class  MinimumError;  MinimumError keeps the inv. More...;  ; class  MinimumErrorUpdator;  ; class  MinimumParameters;  ; class  MinimumSeed;  ; class  MinimumSeedGenerator;  base class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; More...;  ; class  MinimumState;  MinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder). More...;  ; class  MinosError;  Class holding the result of Minos (lower and upper values) for a specific parameter. More...;  ; class  Minuit2Minimizer;  Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. More...;  ; class  MinuitParameter;  class for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; More...;  ; class  MnApplication;  application interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization More...;  ; class  MnContours;  API class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors;. More...;  ; class  MnCovarianceSqueeze;  class to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index More...;  ; class  MnCross;  ; class  MnEigen;  API class for calcula",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:5762,Integrability,interface,interface,5762,";  ; class  MinimumSeedGenerator;  base class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; More...;  ; class  MinimumState;  MinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder). More...;  ; class  MinosError;  Class holding the result of Minos (lower and upper values) for a specific parameter. More...;  ; class  Minuit2Minimizer;  Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. More...;  ; class  MinuitParameter;  class for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; More...;  ; class  MnApplication;  application interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization More...;  ; class  MnContours;  API class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors;. More...;  ; class  MnCovarianceSqueeze;  class to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index More...;  ; class  MnCross;  ; class  MnEigen;  API class for calculating the eigenvalues of symmetric matrix. More...;  ; class  MnFcn;  Wrapper class to FCNBase interface used internally by Minuit. More...;  ; class  MnFumiliMinimize;  API class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.; also used by MnMinos and MnContours;. More...;  ; class  MnFunctionCross;  MnFunctionCross. More...;  ; class  Mn",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:6478,Integrability,interface,interface,6478,"MinuitParameter;  class for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; More...;  ; class  MnApplication;  application interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization More...;  ; class  MnContours;  API class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors;. More...;  ; class  MnCovarianceSqueeze;  class to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index More...;  ; class  MnCross;  ; class  MnEigen;  API class for calculating the eigenvalues of symmetric matrix. More...;  ; class  MnFcn;  Wrapper class to FCNBase interface used internally by Minuit. More...;  ; class  MnFumiliMinimize;  API class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.; also used by MnMinos and MnContours;. More...;  ; class  MnFunctionCross;  MnFunctionCross. More...;  ; class  MnGlobalCorrelationCoeff;  class for global correlation coefficient More...;  ; class  MnHesse;  API class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself. More...;  ; class  MnLineSearch;  Implements a 1-dimensional minimization along a given direction (i.e. More...;  ; class  MnMachinePrecision;  Sets the relative floating point (double) arithmetic precision. More...;  ; class  MnMigrad;  API class for minimization using Variable Metric technology (""MIGRAD""); allows for user interaction: set/change parameters, do minimization, change paramete",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:8947,Integrability,interface,interface,8947,"be valid; possibility to ask only for one side of the Minos Error;. More...;  ; class  MnParabola;  This class defines a parabola of the form a*x*x + b*x + c. More...;  ; class  MnParabolaFactory;  ; class  MnParabolaPoint;  A point of a parabola. More...;  ; class  MnParameterScan;  Scans the values of FCN as a function of one Parameter and retains the best function and Parameter values found. More...;  ; class  MnParStr;  ; class  MnPlot;  MnPlot produces a text-screen graphical output of (x,y) points, e.g. More...;  ; class  MnPosDef;  Force the covariance matrix to be positive defined by adding extra terms in the diagonal. More...;  ; class  MnPrint;  ; class  MnRefCountedPointer;  ; class  MnReferenceCounter;  ; class  MnScan;  API class for minimization using a scan method to find the minimum; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.;. More...;  ; class  MnSeedGenerator;  concrete implementation of the MinimumSeedGenerator interface; used within ModularFunctionMinimizer; More...;  ; class  MnSimplex;  API class for minimization using the Simplex method, which does not need and use the derivatives of the function, but only function values. More...;  ; class  MnStrategy;  API class for defining four levels of strategies: low (0), medium (1), high (2), very high (>=3); acts on: Migrad (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) More...;  ; class  MnTiny;  ; class  MnTraceObject;  ; class  MnUserCovariance;  Class containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user. More...;  ; class  MnUserFcn;  Wrapper used by Minuit of FCN interface containing a reference to the transformation object. More...;  ; class  MnUserParameters;  API class for the user interaction with the parameters; serves as input to the minimizer as well as output from",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:9721,Integrability,interface,interface,9721," find the minimum; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.;. More...;  ; class  MnSeedGenerator;  concrete implementation of the MinimumSeedGenerator interface; used within ModularFunctionMinimizer; More...;  ; class  MnSimplex;  API class for minimization using the Simplex method, which does not need and use the derivatives of the function, but only function values. More...;  ; class  MnStrategy;  API class for defining four levels of strategies: low (0), medium (1), high (2), very high (>=3); acts on: Migrad (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) More...;  ; class  MnTiny;  ; class  MnTraceObject;  ; class  MnUserCovariance;  Class containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user. More...;  ; class  MnUserFcn;  Wrapper used by Minuit of FCN interface containing a reference to the transformation object. More...;  ; class  MnUserParameters;  API class for the user interaction with the parameters; serves as input to the minimizer as well as output from it; users can interact: Fix/release parameters, set values and errors, etc.; parameters can be accessed via their Parameter number (determined internally by Minuit and followed the order how the parameters are created) or via their user-specified Name (10 character string). More...;  ; class  MnUserParameterState;  class which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; More...;  ; class  MnUserTransformation;  class dealing with the transformation between user specified parameters (external) and internal parameters used for minimization More...;  ; class  MnVectorTransform;  ; class  ModularFunctionMinimizer;  Base common class providing the API for all the minimizer Various Minimize m",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:1711,Modifiability,adapt,adapting,1711,"Type< vec, gen >;  ; class  AlgebraicProdType< vec, sym >;  ; class  AlgebraicSumType;  ; class  AlgebraicSumType< gen, vec >;  ; class  AlgebraicSumType< sym, vec >;  ; class  AlgebraicSumType< T, T >;  ; class  AlgebraicSumType< vec, gen >;  ; class  AlgebraicSumType< vec, sym >;  ; class  AnalyticalGradientCalculator;  ; class  BFGSErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; class  BFGSMinimizerType;  ; class  CombinedMinimizer;  Combined minimizer: combination of Migrad and Simplex. More...;  ; class  CombinedMinimumBuilder;  ; class  ContoursError;  ; class  DavidonErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; struct  DerivatorElement;  ; class  ExternalInternalGradientCalculator;  Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliGradientCalculator;  Fumili gradient calculator using exte",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:1940,Modifiability,adapt,adapting,1940," gen >;  ; class  AlgebraicSumType< vec, sym >;  ; class  AnalyticalGradientCalculator;  ; class  BFGSErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; class  BFGSMinimizerType;  ; class  CombinedMinimizer;  Combined minimizer: combination of Migrad and Simplex. More...;  ; class  CombinedMinimumBuilder;  ; class  ContoursError;  ; class  DavidonErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; struct  DerivatorElement;  ; class  ExternalInternalGradientCalculator;  Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliGradientCalculator;  Fumili gradient calculator using external gradient provided by FCN Note that the computed Hessian and G2 are an approximation valid for small residuals. More...;  ; class  FumiliMaximumLikelihoodFCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  Fumi",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:2501,Modifiability,adapt,adapting,2501,"radientCalculator;  Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliGradientCalculator;  Fumili gradient calculator using external gradient provided by FCN Note that the computed Hessian and G2 are an approximation valid for small residuals. More...;  ; class  FumiliMaximumLikelihoodFCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliMinimizer;  Instantiates the seed generator and Minimum builder for the Fumili minimization method. More...;  ; class  FumiliStandardChi2FCN;  Class implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; class  FumiliStandardMaximumLikelihoodFCN;  Class implementing the Elements member function for the standard maximum likelihood method. More.",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:4156,Modifiability,inherit,inherit,4156," standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; class  FumiliStandardMaximumLikelihoodFCN;  Class implementing the Elements member function for the standard maximum likelihood method. More...;  ; class  FunctionGradient;  ; class  FunctionMinimizer;  base class for function minimizers; user may give FCN or FCN with Gradient, Parameter starting values and initial Error guess (sigma) (or ""step size""), or Parameter starting values and initial covariance matrix; covariance matrix is stored in Upper triangular packed storage format, e.g. More...;  ; class  FunctionMinimum;  class holding the full result of the minimization; both internal and external (MnUserParameterState) representation available for the parameters at the Minimum More...;  ; class  gen;  ; class  GenericFunction;  Class from which all the other classes, representing functions, inherit. More...;  ; class  GradientCalculator;  interface class for gradient calculators More...;  ; class  HessianGradientCalculator;  HessianGradientCalculator: class to calculate Gradient for Hessian. More...;  ; class  InitialGradientCalculator;  Class to calculate an initial estimate of the gradient. More...;  ; class  LASquareMatrix;  ; class  LASymMatrix;  Class describing a symmetric matrix of size n. More...;  ; class  LAVector;  ; class  MatrixInverse;  ; class  MatrixInverse< vec, M, T >;  ; class  MinimumBuilder;  ; class  MinimumError;  MinimumError keeps the inv. More...;  ; class  MinimumErrorUpdator;  ; class  MinimumParameters;  ; class  MinimumSeed;  ; class  MinimumSeedGenerator;  base class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; More...;  ; class  MinimumState;  MinimumState keeps the information (position",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:12006,Modifiability,evolve,evolve,12006,"calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive. More...;  ; class  Numerical2PGradientCalculator;  class performing the numerical gradient calculation More...;  ; class  NumericalDerivator;  ; class  ParametricFunction;  Function which has parameters. More...;  ; class  PrefixStack;  ; class  ScanBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  ScanMinimizer;  Class implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. More...;  ; class  SimplexBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  SimplexMinimizer;  Class implementing the required methods for a minimization using Simplex. More...;  ; class  SimplexParameters;  class describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process. More...;  ; class  SimplexSeedGenerator;  generate Simplex starting point (state) More...;  ; class  SinParameterTransformation;  class for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one More...;  ; class  SqrtLowParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  SqrtUpParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  StackAllocator;  StackAllocator controls the memory allocation/deallocation of Minuit. More...;  ; class  StackAllocatorHolder;  ; class  StackError;  ; class  StackOverflow;  define stack allocator symbol More...;  ; class  sym;  ; class  VariableMetricBuilder;  Build (find) function minimum using the Variable Metric method (MIGRAD) Two possible error updators can be chosen. Mo",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:11227,Performance,perform,performing,11227," MnUserParameterState;  class which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; More...;  ; class  MnUserTransformation;  class dealing with the transformation between user specified parameters (external) and internal parameters used for minimization More...;  ; class  MnVectorTransform;  ; class  ModularFunctionMinimizer;  Base common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters. More...;  ; class  MPIProcess;  ; class  MPITerminate;  ; class  NegativeG2LineSearch;  In case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive. More...;  ; class  Numerical2PGradientCalculator;  class performing the numerical gradient calculation More...;  ; class  NumericalDerivator;  ; class  ParametricFunction;  Function which has parameters. More...;  ; class  PrefixStack;  ; class  ScanBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  ScanMinimizer;  Class implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. More...;  ; class  SimplexBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  SimplexMinimizer;  Class implementing the required methods for a minimization using Simplex. More...;  ; class  SimplexParameters;  class describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process. More...;  ; class  SimplexSeedGenerator;  generate Simplex starting point (state) More...;  ; class  SinParameterTransformation;  class for the transformation for double-li",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:3281,Safety,predict,predicted,3281,"; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliGradientCalculator;  Fumili gradient calculator using external gradient provided by FCN Note that the computed Hessian and G2 are an approximation valid for small residuals. More...;  ; class  FumiliMaximumLikelihoodFCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliMinimizer;  Instantiates the seed generator and Minimum builder for the Fumili minimization method. More...;  ; class  FumiliStandardChi2FCN;  Class implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; class  FumiliStandardMaximumLikelihoodFCN;  Class implementing the Elements member function for the standard maximum likelihood method. More...;  ; class  FunctionGradient;  ; class  FunctionMinimizer;  base class for function minimizers; user may give FCN or FCN with Gradient, Parameter starting values and initial Error guess (sigma) (or ""step size""), or Parameter starting values and initial covariance matrix; covariance matrix is stored in Upper triangular packed storage format, e.g. More...;  ; class  FunctionMinimum;  class holding the full result of the minimization; both internal and external (MnUserParameterState) representation available for the parameters at the Minimum More...;  ; class  gen;  ; class  GenericFunction;  Class from which all the other classes, representing functions, inherit. More...;  ; class  GradientC",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:10029,Security,access,accessed,10029,"the derivatives of the function, but only function values. More...;  ; class  MnStrategy;  API class for defining four levels of strategies: low (0), medium (1), high (2), very high (>=3); acts on: Migrad (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) More...;  ; class  MnTiny;  ; class  MnTraceObject;  ; class  MnUserCovariance;  Class containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user. More...;  ; class  MnUserFcn;  Wrapper used by Minuit of FCN interface containing a reference to the transformation object. More...;  ; class  MnUserParameters;  API class for the user interaction with the parameters; serves as input to the minimizer as well as output from it; users can interact: Fix/release parameters, set values and errors, etc.; parameters can be accessed via their Parameter number (determined internally by Minuit and followed the order how the parameters are created) or via their user-specified Name (10 character string). More...;  ; class  MnUserParameterState;  class which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; More...;  ; class  MnUserTransformation;  class dealing with the transformation between user specified parameters (external) and internal parameters used for minimization More...;  ; class  MnVectorTransform;  ; class  ModularFunctionMinimizer;  Base common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters. More...;  ; class  MPIProcess;  ; class  MPITerminate;  ; class  NegativeG2LineSearch;  In case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:5802,Usability,simpl,simplex,5802,";  ; class  MinimumSeedGenerator;  base class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; More...;  ; class  MinimumState;  MinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder). More...;  ; class  MinosError;  Class holding the result of Minos (lower and upper values) for a specific parameter. More...;  ; class  Minuit2Minimizer;  Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. More...;  ; class  MinuitParameter;  class for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; More...;  ; class  MnApplication;  application interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization More...;  ; class  MnContours;  API class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors;. More...;  ; class  MnCovarianceSqueeze;  class to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index More...;  ; class  MnCross;  ; class  MnEigen;  API class for calculating the eigenvalues of symmetric matrix. More...;  ; class  MnFcn;  Wrapper class to FCNBase interface used internally by Minuit. More...;  ; class  MnFumiliMinimize;  API class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.; also used by MnMinos and MnContours;. More...;  ; class  MnFunctionCross;  MnFunctionCross. More...;  ; class  Mn",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:11464,Usability,simpl,simplex,11464,";  class dealing with the transformation between user specified parameters (external) and internal parameters used for minimization More...;  ; class  MnVectorTransform;  ; class  ModularFunctionMinimizer;  Base common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters. More...;  ; class  MPIProcess;  ; class  MPITerminate;  ; class  NegativeG2LineSearch;  In case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive. More...;  ; class  Numerical2PGradientCalculator;  class performing the numerical gradient calculation More...;  ; class  NumericalDerivator;  ; class  ParametricFunction;  Function which has parameters. More...;  ; class  PrefixStack;  ; class  ScanBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  ScanMinimizer;  Class implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. More...;  ; class  SimplexBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  SimplexMinimizer;  Class implementing the required methods for a minimization using Simplex. More...;  ; class  SimplexParameters;  class describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process. More...;  ; class  SimplexSeedGenerator;  generate Simplex starting point (state) More...;  ; class  SinParameterTransformation;  class for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one More...;  ; class  SqrtLowParameterTransformation;  Transformation from external to internal Parameter based o",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:11755,Usability,simpl,simplex,11755,"d varying on the type of FCN function passesd and on the objects used for the parameters. More...;  ; class  MPIProcess;  ; class  MPITerminate;  ; class  NegativeG2LineSearch;  In case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive. More...;  ; class  Numerical2PGradientCalculator;  class performing the numerical gradient calculation More...;  ; class  NumericalDerivator;  ; class  ParametricFunction;  Function which has parameters. More...;  ; class  PrefixStack;  ; class  ScanBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  ScanMinimizer;  Class implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. More...;  ; class  SimplexBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  SimplexMinimizer;  Class implementing the required methods for a minimization using Simplex. More...;  ; class  SimplexParameters;  class describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process. More...;  ; class  SimplexSeedGenerator;  generate Simplex starting point (state) More...;  ; class  SinParameterTransformation;  class for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one More...;  ; class  SqrtLowParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  SqrtUpParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  StackAllocator;  StackAllocator controls the memory allocation/deallocation of Minuit. More...;  ; class  StackAllocatorHolder;  ; class  S",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html:11967,Usability,simpl,simplex,11967,"calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive. More...;  ; class  Numerical2PGradientCalculator;  class performing the numerical gradient calculation More...;  ; class  NumericalDerivator;  ; class  ParametricFunction;  Function which has parameters. More...;  ; class  PrefixStack;  ; class  ScanBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  ScanMinimizer;  Class implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. More...;  ; class  SimplexBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  SimplexMinimizer;  Class implementing the required methods for a minimization using Simplex. More...;  ; class  SimplexParameters;  class describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process. More...;  ; class  SimplexSeedGenerator;  generate Simplex starting point (state) More...;  ; class  SinParameterTransformation;  class for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one More...;  ; class  SqrtLowParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  SqrtUpParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  StackAllocator;  StackAllocator controls the memory allocation/deallocation of Minuit. More...;  ; class  StackAllocatorHolder;  ; class  StackError;  ; class  StackOverflow;  define stack allocator symbol More...;  ; class  sym;  ; class  VariableMetricBuilder;  Build (find) function minimum using the Variable Metric method (MIGRAD) Two possible error updators can be chosen. Mo",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Minuit2.html
https://root.cern/doc/v632/namespaceROOT_1_1option.html:3794,Availability,error,error,3794,"ment: Returns ARG_NONE.Definition OptionParser.h:907; ROOT::option::DescriptorDescribes an option, its help text (usage) and how it should be parsed.Definition OptionParser.h:327; A CheckArg function has the following signature: ArgStatus CheckArg(const Option& option, bool msg); ; ROOT::option::OptionA parsed option from the command line together with its argument if it has one.Definition OptionParser.h:454; ROOT::option::ArgStatusArgStatusPossible results when checking if an argument is valid for a certain option.Definition OptionParser.h:263; ROOT::option::CheckArgArgStatus(* CheckArg)(const Option &option, bool msg)Signature of functions that check if an argument is valid for a certain type of option.Definition OptionParser.h:302; It is used to check if a potential argument would be acceptable for the option. It will even be called if there is no argument. In that case option.arg will be NULL.; If msg is true and the function determines that an argument is not acceptable and that this is a fatal error, it should output a message to the user before returning ARG_ILLEGAL. If msg is false the function should remain silent (or you will get duplicate messages).; See ArgStatus for the meaning of the return values.; While you can provide your own functions, often the following pre-defined checks (which never return ARG_ILLEGAL) will suffice:. Arg::None For options that don't take an argument: Returns ARG_NONE. ; Arg::Optional Returns ARG_OK if the argument is attached and ARG_IGNORE otherwise. . Definition at line 302 of file OptionParser.h. Enumeration Type Documentation. ◆ ArgStatus. enum ROOT::option::ArgStatus. Possible results when checking if an argument is valid for a certain option. ; In the case that no argument is provided for an option that takes an optional argument, return codes ARG_OK and ARG_IGNORE are equivalent. . EnumeratorARG_NONE The option does not take an argument. . ARG_OK The argument is acceptable for the option. . ARG_IGNORE The argument is no",MatchSource.WIKI,doc/v632/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1option.html
https://root.cern/doc/v632/namespaceROOT_1_1option.html:12745,Availability,avail,available,12745,"enalty for using different versions in the same program. ; printUsage() always interprets Descriptor::help as UTF-8 and always produces UTF-8-encoded output. If your system uses a different charset, you must do your own conversion. You may also need to change the font of the console to see non-ASCII characters properly. This is particularly true for Windows. ; Security warning: Do not insert untrusted strings (such as user-supplied arguments) into the usage. printUsage() has no protection against malicious UTF-8 sequences. Parameters. prnThe output method to use. See the examples above. ; usagethe Descriptor[] array whose help texts will be formatted. ; widththe maximum number of characters per output line. Note that this number is in actual characters, not bytes. printUsage() supports UTF-8 in help and will count multi-byte UTF-8 sequences properly. Asian wide characters are counted as 2 characters. ; last_column_min_percent(0-100) The minimum percentage of width that should be available for the last column (which typically contains the textual explanation of an option). If less space is available, the last column will be printed on its own line, indented according to last_column_own_line_max_percent. ; last_column_own_line_max_percent(0-100) If the last column is printed on its own line due to less than last_column_min_percent of the width being available, then only last_column_own_line_max_percent of the extra line(s) will be used for the last column's text. This ensures an indentation. See example below. // width=20, last_column_min_percent=50 (i.e. last col. min. width=10); --3456789 1234567890; 1234567890; ; // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); // last_column_own_line_max_percent=75; --3456789; 123456789012345; 67890; ; // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); // last_column_own_line_max_percent=33 (i.e. max. 5); --3456789; 12345; 67890; 12345; 67890. Definition at line 2798 of file OptionParser.",MatchSource.WIKI,doc/v632/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1option.html
https://root.cern/doc/v632/namespaceROOT_1_1option.html:12857,Availability,avail,available,12857,"ut. If your system uses a different charset, you must do your own conversion. You may also need to change the font of the console to see non-ASCII characters properly. This is particularly true for Windows. ; Security warning: Do not insert untrusted strings (such as user-supplied arguments) into the usage. printUsage() has no protection against malicious UTF-8 sequences. Parameters. prnThe output method to use. See the examples above. ; usagethe Descriptor[] array whose help texts will be formatted. ; widththe maximum number of characters per output line. Note that this number is in actual characters, not bytes. printUsage() supports UTF-8 in help and will count multi-byte UTF-8 sequences properly. Asian wide characters are counted as 2 characters. ; last_column_min_percent(0-100) The minimum percentage of width that should be available for the last column (which typically contains the textual explanation of an option). If less space is available, the last column will be printed on its own line, indented according to last_column_own_line_max_percent. ; last_column_own_line_max_percent(0-100) If the last column is printed on its own line due to less than last_column_min_percent of the width being available, then only last_column_own_line_max_percent of the extra line(s) will be used for the last column's text. This ensures an indentation. See example below. // width=20, last_column_min_percent=50 (i.e. last col. min. width=10); --3456789 1234567890; 1234567890; ; // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); // last_column_own_line_max_percent=75; --3456789; 123456789012345; 67890; ; // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); // last_column_own_line_max_percent=33 (i.e. max. 5); --3456789; 12345; 67890; 12345; 67890. Definition at line 2798 of file OptionParser.h. ◆ printUsage() [5/5]. template<typename Syscall > . void ROOT::option::printUsage ; (; Syscall * ; prn, . int ; fd, . const Descriptor ; usage[], . int",MatchSource.WIKI,doc/v632/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1option.html
https://root.cern/doc/v632/namespaceROOT_1_1option.html:13121,Availability,avail,available,13121,"indows. ; Security warning: Do not insert untrusted strings (such as user-supplied arguments) into the usage. printUsage() has no protection against malicious UTF-8 sequences. Parameters. prnThe output method to use. See the examples above. ; usagethe Descriptor[] array whose help texts will be formatted. ; widththe maximum number of characters per output line. Note that this number is in actual characters, not bytes. printUsage() supports UTF-8 in help and will count multi-byte UTF-8 sequences properly. Asian wide characters are counted as 2 characters. ; last_column_min_percent(0-100) The minimum percentage of width that should be available for the last column (which typically contains the textual explanation of an option). If less space is available, the last column will be printed on its own line, indented according to last_column_own_line_max_percent. ; last_column_own_line_max_percent(0-100) If the last column is printed on its own line due to less than last_column_min_percent of the width being available, then only last_column_own_line_max_percent of the extra line(s) will be used for the last column's text. This ensures an indentation. See example below. // width=20, last_column_min_percent=50 (i.e. last col. min. width=10); --3456789 1234567890; 1234567890; ; // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); // last_column_own_line_max_percent=75; --3456789; 123456789012345; 67890; ; // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); // last_column_own_line_max_percent=33 (i.e. max. 5); --3456789; 12345; 67890; 12345; 67890. Definition at line 2798 of file OptionParser.h. ◆ printUsage() [5/5]. template<typename Syscall > . void ROOT::option::printUsage ; (; Syscall * ; prn, . int ; fd, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2822 of file OptionParser.h. ROOToption. ROOT v6-32 - Reference Guide Gener",MatchSource.WIKI,doc/v632/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1option.html
https://root.cern/doc/v632/namespaceROOT_1_1option.html:2071,Integrability,wrap,wrapping,2071,"and parses them into data structures that are easier to work with. More...;  ; struct  PrintUsageImplementation;  ; struct  Stats;  Determines the minimum lengths of the buffer and options arrays used for Parser. More...;  . Typedefs; typedef ArgStatus(* CheckArg) (const Option &option, bool msg);  Signature of functions that check if an argument is valid for a certain type of option. ;  . Enumerations; enum  ArgStatus { ARG_NONE; , ARG_OK; , ARG_IGNORE; , ARG_ILLEGAL; };  Possible results when checking if an argument is valid for a certain option. More...;  . Functions; template<typename Temporary > ; void printUsage (const Temporary &prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  ; template<typename Function > ; void printUsage (Function *prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  ; template<typename Function , typename Stream > ; void printUsage (Function *prn, Stream *stream, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  ; template<typename OStream > ; void printUsage (OStream &prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping. ;  ; template<typename Syscall > ; void printUsage (Syscall *prn, int fd, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  . Detailed Description; The namespace of The Lean Mean C++ Option Parser. ; Typedef Documentation. ◆ CheckArg. typedef ArgStatus(* ROOT::option::CheckArg) (const Option &option, bool msg). Signature of functions that check if an argument is valid for a certain type of option. ; Every Option has such a function assigned in its Descriptor. Descriptor usage[] = { {UNKNOWN, 0, ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1option.html
https://root.cern/doc/v632/namespaceROOT_1_1option.html:3820,Integrability,message,message,3820,"ment: Returns ARG_NONE.Definition OptionParser.h:907; ROOT::option::DescriptorDescribes an option, its help text (usage) and how it should be parsed.Definition OptionParser.h:327; A CheckArg function has the following signature: ArgStatus CheckArg(const Option& option, bool msg); ; ROOT::option::OptionA parsed option from the command line together with its argument if it has one.Definition OptionParser.h:454; ROOT::option::ArgStatusArgStatusPossible results when checking if an argument is valid for a certain option.Definition OptionParser.h:263; ROOT::option::CheckArgArgStatus(* CheckArg)(const Option &option, bool msg)Signature of functions that check if an argument is valid for a certain type of option.Definition OptionParser.h:302; It is used to check if a potential argument would be acceptable for the option. It will even be called if there is no argument. In that case option.arg will be NULL.; If msg is true and the function determines that an argument is not acceptable and that this is a fatal error, it should output a message to the user before returning ARG_ILLEGAL. If msg is false the function should remain silent (or you will get duplicate messages).; See ArgStatus for the meaning of the return values.; While you can provide your own functions, often the following pre-defined checks (which never return ARG_ILLEGAL) will suffice:. Arg::None For options that don't take an argument: Returns ARG_NONE. ; Arg::Optional Returns ARG_OK if the argument is attached and ARG_IGNORE otherwise. . Definition at line 302 of file OptionParser.h. Enumeration Type Documentation. ◆ ArgStatus. enum ROOT::option::ArgStatus. Possible results when checking if an argument is valid for a certain option. ; In the case that no argument is provided for an option that takes an optional argument, return codes ARG_OK and ARG_IGNORE are equivalent. . EnumeratorARG_NONE The option does not take an argument. . ARG_OK The argument is acceptable for the option. . ARG_IGNORE The argument is no",MatchSource.WIKI,doc/v632/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1option.html
https://root.cern/doc/v632/namespaceROOT_1_1option.html:3947,Integrability,message,messages,3947,"ould be parsed.Definition OptionParser.h:327; A CheckArg function has the following signature: ArgStatus CheckArg(const Option& option, bool msg); ; ROOT::option::OptionA parsed option from the command line together with its argument if it has one.Definition OptionParser.h:454; ROOT::option::ArgStatusArgStatusPossible results when checking if an argument is valid for a certain option.Definition OptionParser.h:263; ROOT::option::CheckArgArgStatus(* CheckArg)(const Option &option, bool msg)Signature of functions that check if an argument is valid for a certain type of option.Definition OptionParser.h:302; It is used to check if a potential argument would be acceptable for the option. It will even be called if there is no argument. In that case option.arg will be NULL.; If msg is true and the function determines that an argument is not acceptable and that this is a fatal error, it should output a message to the user before returning ARG_ILLEGAL. If msg is false the function should remain silent (or you will get duplicate messages).; See ArgStatus for the meaning of the return values.; While you can provide your own functions, often the following pre-defined checks (which never return ARG_ILLEGAL) will suffice:. Arg::None For options that don't take an argument: Returns ARG_NONE. ; Arg::Optional Returns ARG_OK if the argument is attached and ARG_IGNORE otherwise. . Definition at line 302 of file OptionParser.h. Enumeration Type Documentation. ◆ ArgStatus. enum ROOT::option::ArgStatus. Possible results when checking if an argument is valid for a certain option. ; In the case that no argument is provided for an option that takes an optional argument, return codes ARG_OK and ARG_IGNORE are equivalent. . EnumeratorARG_NONE The option does not take an argument. . ARG_OK The argument is acceptable for the option. . ARG_IGNORE The argument is not acceptable but that's non-fatal because the option's argument is optional. . ARG_ILLEGAL The argument is not acceptable and that's f",MatchSource.WIKI,doc/v632/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1option.html
https://root.cern/doc/v632/namespaceROOT_1_1option.html:6251,Integrability,wrap,wrapping,6251,"umn_own_line_max_percent = 75 . ). Definition at line 2814 of file OptionParser.h. ◆ printUsage() [2/5]. template<typename Function > . void ROOT::option::printUsage ; (; Function * ; prn, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2806 of file OptionParser.h. ◆ printUsage() [3/5]. template<typename Function , typename Stream > . void ROOT::option::printUsage ; (; Function * ; prn, . Stream * ; stream, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2830 of file OptionParser.h. ◆ printUsage() [4/5]. template<typename OStream > . void ROOT::option::printUsage ; (; OStream & ; prn, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping. ; printUsage() takes the help texts of a Descriptor[] array and formats them into a usage message, wrapping lines to achieve the desired output width.; Table formatting:; Aside from plain strings which are simply line-wrapped, the usage may contain tables. Tables are used to align elements in the output.; // Without a table. The explanatory texts are not aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; ; // With table formatting. The explanatory texts are aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; c#define c(i)Definition RSha256.hxx:101; createvirtual RooAbsTestStatistic * create(const char *name, const char *title, RooAbsReal &real, RooAbsData &data, const RooArgSet &projDeps, Configuration const &cfg)=0; Table formatting removes the need to pad help texts manually with spaces to achieve alignment. To create a table, simply insert \t (tab) characters to separate the cells w",MatchSource.WIKI,doc/v632/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1option.html
https://root.cern/doc/v632/namespaceROOT_1_1option.html:6351,Integrability,message,message,6351,"nction > . void ROOT::option::printUsage ; (; Function * ; prn, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2806 of file OptionParser.h. ◆ printUsage() [3/5]. template<typename Function , typename Stream > . void ROOT::option::printUsage ; (; Function * ; prn, . Stream * ; stream, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2830 of file OptionParser.h. ◆ printUsage() [4/5]. template<typename OStream > . void ROOT::option::printUsage ; (; OStream & ; prn, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping. ; printUsage() takes the help texts of a Descriptor[] array and formats them into a usage message, wrapping lines to achieve the desired output width.; Table formatting:; Aside from plain strings which are simply line-wrapped, the usage may contain tables. Tables are used to align elements in the output.; // Without a table. The explanatory texts are not aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; ; // With table formatting. The explanatory texts are aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; c#define c(i)Definition RSha256.hxx:101; createvirtual RooAbsTestStatistic * create(const char *name, const char *title, RooAbsReal &real, RooAbsData &data, const RooArgSet &projDeps, Configuration const &cfg)=0; Table formatting removes the need to pad help texts manually with spaces to achieve alignment. To create a table, simply insert \t (tab) characters to separate the cells within a row.; const option::Descriptor usage[] = {; {..., ""-c, --create \tCreates something."" },; {..., ""-k, --kill \tDestroys",MatchSource.WIKI,doc/v632/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1option.html
https://root.cern/doc/v632/namespaceROOT_1_1option.html:6360,Integrability,wrap,wrapping,6360,"nction > . void ROOT::option::printUsage ; (; Function * ; prn, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2806 of file OptionParser.h. ◆ printUsage() [3/5]. template<typename Function , typename Stream > . void ROOT::option::printUsage ; (; Function * ; prn, . Stream * ; stream, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2830 of file OptionParser.h. ◆ printUsage() [4/5]. template<typename OStream > . void ROOT::option::printUsage ; (; OStream & ; prn, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping. ; printUsage() takes the help texts of a Descriptor[] array and formats them into a usage message, wrapping lines to achieve the desired output width.; Table formatting:; Aside from plain strings which are simply line-wrapped, the usage may contain tables. Tables are used to align elements in the output.; // Without a table. The explanatory texts are not aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; ; // With table formatting. The explanatory texts are aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; c#define c(i)Definition RSha256.hxx:101; createvirtual RooAbsTestStatistic * create(const char *name, const char *title, RooAbsReal &real, RooAbsData &data, const RooArgSet &projDeps, Configuration const &cfg)=0; Table formatting removes the need to pad help texts manually with spaces to achieve alignment. To create a table, simply insert \t (tab) characters to separate the cells within a row.; const option::Descriptor usage[] = {; {..., ""-c, --create \tCreates something."" },; {..., ""-k, --kill \tDestroys",MatchSource.WIKI,doc/v632/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1option.html
https://root.cern/doc/v632/namespaceROOT_1_1option.html:6479,Integrability,wrap,wrapped,6479,"lumn_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2806 of file OptionParser.h. ◆ printUsage() [3/5]. template<typename Function , typename Stream > . void ROOT::option::printUsage ; (; Function * ; prn, . Stream * ; stream, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2830 of file OptionParser.h. ◆ printUsage() [4/5]. template<typename OStream > . void ROOT::option::printUsage ; (; OStream & ; prn, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping. ; printUsage() takes the help texts of a Descriptor[] array and formats them into a usage message, wrapping lines to achieve the desired output width.; Table formatting:; Aside from plain strings which are simply line-wrapped, the usage may contain tables. Tables are used to align elements in the output.; // Without a table. The explanatory texts are not aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; ; // With table formatting. The explanatory texts are aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; c#define c(i)Definition RSha256.hxx:101; createvirtual RooAbsTestStatistic * create(const char *name, const char *title, RooAbsReal &real, RooAbsData &data, const RooArgSet &projDeps, Configuration const &cfg)=0; Table formatting removes the need to pad help texts manually with spaces to achieve alignment. To create a table, simply insert \t (tab) characters to separate the cells within a row.; const option::Descriptor usage[] = {; {..., ""-c, --create \tCreates something."" },; {..., ""-k, --kill \tDestroys something."" }, ...; Note that you must include the minimum amount of space desired between cells yourself. Table formatting wil",MatchSource.WIKI,doc/v632/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1option.html
https://root.cern/doc/v632/namespaceROOT_1_1option.html:11057,Integrability,wrap,wrapping,11057,"ter {; void write(const char* buf, size_t size) const {; fwrite(str, size, 1, stdout);; }; };; ; struct MyWriteFunctor {; void operator()(const char* buf, size_t size) {; fwrite(str, size, 1, stdout);; }; };; ...; printUsage(my_write, usage); // custom write function; printUsage(MyWriter(), usage); // temporary of a custom class; MyWriter writer;; printUsage(writer, usage); // custom class object; MyWriteFunctor wfunctor;; printUsage(&wfunctor, usage); // custom functor; printUsage(write, 1, usage); // write() to file descriptor 1; printUsage(cout, usage); // an ostream&; printUsage(fwrite, stdout, usage); // fwrite() to stdout; ostringstream sstr;; printUsage(sstr, usage); // an ostringstream&; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; operator()TRObject operator()(const T1 &t1) constDefinition TRFunctionImport__oprtr.h:14; ROOT::option::printUsagevoid printUsage(OStream &prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75)Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping.Definition OptionParser.h:2798; writerDefinition writer.py:1; Notes:; the write() method of a class that is to be passed as a temporary as MyWriter() is in the example, must be a const method, because temporary objects are passed as const reference. This only applies to temporary objects that are created and destroyed in the same statement. If you create an object like writer in the example, this restriction does not apply. ; a functor like MyWriteFunctor in the example must be passed as a pointer. This differs from the way functors are passed to e.g. the STL algorithms. ; All printUsage() templates are tiny wrappers around a shared non-template implementation. So there's no penalty for using different versions in the same program. ; printUsage() always interprets Descriptor::help as UTF-8 and always produces UTF-8-encoded output. If your system uses a ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1option.html
https://root.cern/doc/v632/namespaceROOT_1_1option.html:11682,Integrability,wrap,wrappers,11682,"e of a square matrix; operator()TRObject operator()(const T1 &t1) constDefinition TRFunctionImport__oprtr.h:14; ROOT::option::printUsagevoid printUsage(OStream &prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75)Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping.Definition OptionParser.h:2798; writerDefinition writer.py:1; Notes:; the write() method of a class that is to be passed as a temporary as MyWriter() is in the example, must be a const method, because temporary objects are passed as const reference. This only applies to temporary objects that are created and destroyed in the same statement. If you create an object like writer in the example, this restriction does not apply. ; a functor like MyWriteFunctor in the example must be passed as a pointer. This differs from the way functors are passed to e.g. the STL algorithms. ; All printUsage() templates are tiny wrappers around a shared non-template implementation. So there's no penalty for using different versions in the same program. ; printUsage() always interprets Descriptor::help as UTF-8 and always produces UTF-8-encoded output. If your system uses a different charset, you must do your own conversion. You may also need to change the font of the console to see non-ASCII characters properly. This is particularly true for Windows. ; Security warning: Do not insert untrusted strings (such as user-supplied arguments) into the usage. printUsage() has no protection against malicious UTF-8 sequences. Parameters. prnThe output method to use. See the examples above. ; usagethe Descriptor[] array whose help texts will be formatted. ; widththe maximum number of characters per output line. Note that this number is in actual characters, not bytes. printUsage() supports UTF-8 in help and will count multi-byte UTF-8 sequences properly. Asian wide characters are counted as 2 characters. ; last_column_min_percen",MatchSource.WIKI,doc/v632/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1option.html
https://root.cern/doc/v632/namespaceROOT_1_1option.html:6467,Usability,simpl,simply,6467,"lumn_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2806 of file OptionParser.h. ◆ printUsage() [3/5]. template<typename Function , typename Stream > . void ROOT::option::printUsage ; (; Function * ; prn, . Stream * ; stream, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2830 of file OptionParser.h. ◆ printUsage() [4/5]. template<typename OStream > . void ROOT::option::printUsage ; (; OStream & ; prn, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping. ; printUsage() takes the help texts of a Descriptor[] array and formats them into a usage message, wrapping lines to achieve the desired output width.; Table formatting:; Aside from plain strings which are simply line-wrapped, the usage may contain tables. Tables are used to align elements in the output.; // Without a table. The explanatory texts are not aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; ; // With table formatting. The explanatory texts are aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; c#define c(i)Definition RSha256.hxx:101; createvirtual RooAbsTestStatistic * create(const char *name, const char *title, RooAbsReal &real, RooAbsData &data, const RooArgSet &projDeps, Configuration const &cfg)=0; Table formatting removes the need to pad help texts manually with spaces to achieve alignment. To create a table, simply insert \t (tab) characters to separate the cells within a row.; const option::Descriptor usage[] = {; {..., ""-c, --create \tCreates something."" },; {..., ""-k, --kill \tDestroys something."" }, ...; Note that you must include the minimum amount of space desired between cells yourself. Table formatting wil",MatchSource.WIKI,doc/v632/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1option.html
https://root.cern/doc/v632/namespaceROOT_1_1option.html:7153,Usability,simpl,simply,7153," formatted usage string with support for multi-column formatting and line-wrapping. ; printUsage() takes the help texts of a Descriptor[] array and formats them into a usage message, wrapping lines to achieve the desired output width.; Table formatting:; Aside from plain strings which are simply line-wrapped, the usage may contain tables. Tables are used to align elements in the output.; // Without a table. The explanatory texts are not aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; ; // With table formatting. The explanatory texts are aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; c#define c(i)Definition RSha256.hxx:101; createvirtual RooAbsTestStatistic * create(const char *name, const char *title, RooAbsReal &real, RooAbsData &data, const RooArgSet &projDeps, Configuration const &cfg)=0; Table formatting removes the need to pad help texts manually with spaces to achieve alignment. To create a table, simply insert \t (tab) characters to separate the cells within a row.; const option::Descriptor usage[] = {; {..., ""-c, --create \tCreates something."" },; {..., ""-k, --kill \tDestroys something."" }, ...; Note that you must include the minimum amount of space desired between cells yourself. Table formatting will insert further spaces as needed to achieve alignment.; You can insert line breaks within cells by using \v (vertical tab).; const option::Descriptor usage[] = {; {..., ""-c,\v--create \tCreates\vsomething."" },; {..., ""-k,\v--kill \tDestroys\vsomething."" }, ...; ; // results in; ; -c, Creates; --create something.; -k, Destroys; --kill something.; You can mix lines that do not use \t or \v with those that do. The plain lines will not mess up the table layout. Alignment of the table columns will be maintained even across these interjections.; const option::Descriptor usage[] = {; {..., ""-c, --create \tCreates something."" },; {..., ""----------------------------------"" },; {..., ""-k, --kill \tDestroys somethi",MatchSource.WIKI,doc/v632/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1option.html
https://root.cern/doc/v632/namespaceROOT_1_1Quartz.html:4133,Modifiability,extend,extendedColor,4133,"_t markerSize);  ; void DrawMarkerOpenSquare (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerOpenSquareDiagonal (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerOpenStar (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerOpenThreeTriangles (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerOpenTriangleDown (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerOpenTriangleUp (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerPlus (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerStar (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerX (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawPattern (void *data, CGContextRef ctx);  ; void DrawPolygonWithGradientFill (CGContextRef ctx, const TColorGradient *extendedColor, const CGSize &sizeOfDrawable, Int_t nPoints, const TPoint *xy, Bool_t drawShadow);  ; void DrawPolyLine (CGContextRef ctx, Int_t n, TPoint *xy);  ; void DrawPolyMarker (CGContextRef ctx, const std::vector< TPoint > &marker, Size_t markerSize, Style_t markerStyle);  ; void DrawPolyMarker (CGContextRef ctx, unsigned nPoints, const TPoint *marker, Size_t markerSize, Style_t markerStyle);  ; void DrawTextLineNoKerning (CGContextRef ctx, CTFontRef font, const std::vector< UniChar > &text, Int_t x, Int_t y);  ; Bool_t SetFillAreaParameters (CGContextRef ctx, unsigned *patternIndex);  ; Bool_t SetFillColor (CGContextRef ctx, Color_t colorIndex);  ; bool SetFillPattern (CGContextRef ctx, const unsigned *patternIndex);  ; Bool_t SetLineColor (CGContextRef ctx, Color_t colorIndex);  ; void SetLineStyle (CGContextRef ctx, Int_t lstyle);  ; void SetLineType (CGContextRef ctx, Int_t n, Int_t *dash);  ; void SetLineWidth (CGContextRef ctx, Int_t width);  .",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Quartz.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Quartz.html
https://root.cern/doc/v632/namespaceROOT_1_1Quartz.html:13505,Modifiability,extend,extendedColor,13505,"rkerOpenTriangleUp ; (; CGContextRef ; ctx, . unsigned ; n, . const TPoint * ; xy, . Size_t ; markerSize . ). Definition at line 229 of file QuartzMarker.mm. ◆ DrawMarkerPlus(). void ROOT::Quartz::DrawMarkerPlus ; (; CGContextRef ; ctx, . unsigned ; n, . const TPoint * ; xy, . Size_t ; markerSize . ). Definition at line 30 of file QuartzMarker.mm. ◆ DrawMarkerStar(). void ROOT::Quartz::DrawMarkerStar ; (; CGContextRef ; ctx, . unsigned ; n, . const TPoint * ; xy, . Size_t ; markerSize . ). Definition at line 53 of file QuartzMarker.mm. ◆ DrawMarkerX(). void ROOT::Quartz::DrawMarkerX ; (; CGContextRef ; ctx, . unsigned ; n, . const TPoint * ; xy, . Size_t ; markerSize . ). Definition at line 118 of file QuartzMarker.mm. ◆ DrawPattern(). void ROOT::Quartz::DrawPattern ; (; void * ; data, . CGContextRef ; ctx . ). Definition at line 327 of file QuartzFillArea.mm. ◆ DrawPolygonWithGradientFill(). void ROOT::Quartz::DrawPolygonWithGradientFill ; (; CGContextRef ; ctx, . const TColorGradient * ; extendedColor, . const CGSize & ; sizeOfDrawable, . Int_t ; nPoints, . const TPoint * ; xy, . Bool_t ; drawShadow . ). Definition at line 479 of file QuartzFillArea.mm. ◆ DrawPolyLine(). void ROOT::Quartz::DrawPolyLine ; (; CGContextRef ; ctx, . Int_t ; n, . TPoint * ; xy . ). Definition at line 135 of file QuartzLine.mm. ◆ DrawPolyMarker() [1/2]. void ROOT::Quartz::DrawPolyMarker ; (; CGContextRef ; ctx, . const std::vector< TPoint > & ; marker, . Size_t ; markerSize, . Style_t ; markerStyle . ). Definition at line 1025 of file QuartzMarker.mm. ◆ DrawPolyMarker() [2/2]. void ROOT::Quartz::DrawPolyMarker ; (; CGContextRef ; ctx, . unsigned ; nPoints, . const TPoint * ; marker, . Size_t ; markerSize, . Style_t ; markerStyle . ). Definition at line 908 of file QuartzMarker.mm. ◆ DrawTextLineNoKerning(). void ROOT::Quartz::DrawTextLineNoKerning ; (; CGContextRef ; ctx, . CTFontRef ; font, . const std::vector< UniChar > & ; text, . Int_t ; x, . Int_t ; y . ). Definition at line 319 of",MatchSource.WIKI,doc/v632/namespaceROOT_1_1Quartz.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Quartz.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:12893,Availability,down,down,12893,"escription . ). Definition at line 37 of file RDFDescription.cxx. ◆ operator==() [1/3]. template<class T1 , class T2 > . bool ROOT::RDF::operator== ; (; const RResultPtr< T1 > & ; lhs, . const RResultPtr< T2 > & ; rhs . ). Definition at line 401 of file RResultPtr.hxx. ◆ operator==() [2/3]. template<class T1 > . bool ROOT::RDF::operator== ; (; const RResultPtr< T1 > & ; lhs, . std::nullptr_t ; rhs . ). Definition at line 413 of file RResultPtr.hxx. ◆ operator==() [3/3]. template<class T1 > . bool ROOT::RDF::operator== ; (; std::nullptr_t ; lhs, . const RResultPtr< T1 > & ; rhs . ). Definition at line 419 of file RResultPtr.hxx. ◆ PassAsVec(). template<std::size_t N, typename T , typename F > . auto ROOT::RDF::PassAsVec ; (; F && ; f); -> RDFInternal::PassAsVecHelper<std::make_index_sequence<N>, T, F>. PassAsVec is a callable generator that allows passing N variables of type T to a function as a single collection. ; PassAsVec<N, T>(func) returns a callable that takes N arguments of type T, passes them down to function func as an initializer list {t1, t2, t3,..., tN} and returns whatever f({t1, t2, t3, ..., tN}) returns.; Note that for this to work with RDataFrame the type of all columns that the callable is applied to must be exactly T. Example usage together with RDataFrame (""varX"" columns must all be float variables): bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});. Definition at line 103 of file RDFHelpers.hxx. ◆ RunGraphs(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loo",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:15253,Availability,down,downstream,15253,"tPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 120 of file RDFHelpers.hxx. ◆ SaveGraph() [2/2]. template<typename NodeType > . void ROOT::RDF::SaveGraph ; (; NodeType ; node, . const std::string & ; outputFile . ). Create a graphviz representation of the dataframe computation graph, write it to the specified file. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. ; [in]outputFilefile where to save the representation. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:16128,Availability,down,downstream,16128," RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 120 of file RDFHelpers.hxx. ◆ SaveGraph() [2/2]. template<typename NodeType > . void ROOT::RDF::SaveGraph ; (; NodeType ; node, . const std::string & ; outputFile . ). Create a graphviz representation of the dataframe computation graph, write it to the specified file. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. ; [in]outputFilefile where to save the representation. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 139 of file RDFHelpers.hxx. ◆ splitInEqualRanges(). void ROOT::RDF::splitInEqualRanges ; (; std::vector< std::pair< ULong64_t, ULong64_t > > & ; ranges, . int ; nRecords, . unsigned int ; nSlots . ). Definition at line 519 of file RArrowDS.cxx. ROOTRDF. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:13971,Energy Efficiency,efficient,efficient,13971,", t2, t3,..., tN} and returns whatever f({t1, t2, t3, ..., tN}) returns.; Note that for this to work with RDataFrame the type of all columns that the callable is applied to must be exactly T. Example usage together with RDataFrame (""varX"" columns must all be float variables): bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});. Definition at line 103 of file RDFHelpers.hxx. ◆ RunGraphs(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loops will run concurrently. Therefore, the overall computation of all results is generally more efficient. It should be noted that user-defined operations (e.g., Filters and Defines) of the different RDataFrame graphs are assumed to be safe to call concurrently.; ROOT::RDataFrame df1(""tree1"", ""file1.root"");; auto r1 = df1.Histo1D(""var1"");; ; ROOT::RDataFrame df2(""tree2"", ""file2.root"");; auto r2 = df2.Sum(""var2"");; ; // RResultPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string.",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:322,Integrability,interface,interface,322,". ROOT: ROOT::RDF Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Functions ; ROOT::RDF Namespace Reference. Namespaces; namespace  Experimental;  ; namespace  Internal;  . Classes; class  RArrowDS;  RDataFrame data source class to interface with Apache Arrow. More...;  ; class  RCsvDS;  RDataFrame data source class for reading CSV files. More...;  ; class  RCutFlowReport;  ; class  RDataSource;  RDataSource defines an API that RDataFrame can use to read arbitrary data formats. More...;  ; class  RDFDescription;  A DFDescription contains useful information about a given RDataFrame computation graph. More...;  ; class  RDFTypeNameGetter;  Helper to get the contents of a given column. More...;  ; class  RDisplay;  This class is the textual representation of the content of a columnar dataset. More...;  ; class  RInterface;  The public interface to the RDataFrame federation of classes. More...;  ; class  RInterfaceBase;  ; class  RLazyDS;  A RDataSource implementation which is built on top of result proxies. More...;  ; class  RResultHandle;  A type-erased version of RResultPtr and RResultMap. More...;  ; class  RResultPtr;  Smart pointer for the return type of actions. More...;  ; class  RSampleInfo;  This type represents a sample identifier, to be used in conjunction with RDataFrame features such as DefinePerSample() and per-sample callbacks. More...;  ; struct  RSnapshotOptions;  A collection of options to steer the creation of the dataset on file. More...;  ; class  RSqliteDS;  RSqliteDS is an RDF data source implementation for SQL result sets from sqlite3 files. More...;  ; class  RTrivialDS;  A simple data-source implementation, for demo purposes. More...;  ; class  RVariationsDescription;  A descriptor for the systematic variations known to a given RDataFrame node. More...;  ; class  TCutInfo;  ; class  TH1DModel;  A struct which stores the parameters of a TH1D. More...;  ; c",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:934,Integrability,interface,interface,934,". ROOT: ROOT::RDF Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Functions ; ROOT::RDF Namespace Reference. Namespaces; namespace  Experimental;  ; namespace  Internal;  . Classes; class  RArrowDS;  RDataFrame data source class to interface with Apache Arrow. More...;  ; class  RCsvDS;  RDataFrame data source class for reading CSV files. More...;  ; class  RCutFlowReport;  ; class  RDataSource;  RDataSource defines an API that RDataFrame can use to read arbitrary data formats. More...;  ; class  RDFDescription;  A DFDescription contains useful information about a given RDataFrame computation graph. More...;  ; class  RDFTypeNameGetter;  Helper to get the contents of a given column. More...;  ; class  RDisplay;  This class is the textual representation of the content of a columnar dataset. More...;  ; class  RInterface;  The public interface to the RDataFrame federation of classes. More...;  ; class  RInterfaceBase;  ; class  RLazyDS;  A RDataSource implementation which is built on top of result proxies. More...;  ; class  RResultHandle;  A type-erased version of RResultPtr and RResultMap. More...;  ; class  RResultPtr;  Smart pointer for the return type of actions. More...;  ; class  RSampleInfo;  This type represents a sample identifier, to be used in conjunction with RDataFrame features such as DefinePerSample() and per-sample callbacks. More...;  ; struct  RSnapshotOptions;  A collection of options to steer the creation of the dataset on file. More...;  ; class  RSqliteDS;  RSqliteDS is an RDF data source implementation for SQL result sets from sqlite3 files. More...;  ; class  RTrivialDS;  A simple data-source implementation, for demo purposes. More...;  ; class  RVariationsDescription;  A descriptor for the systematic variations known to a given RDataFrame node. More...;  ; class  TCutInfo;  ; class  TH1DModel;  A struct which stores the parameters of a TH1D. More...;  ; c",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:4031,Integrability,wrap,wrapping,4031,"ROOT::RDF::RNode. ;  ; RDataFrame FromArrow (std::shared_ptr< arrow::Table > table, std::vector< std::string > const &columnNames);  Factory method to create a Apache Arrow RDataFrame. ;  ; RDataFrame FromCSV (std::string_view fileName, bool readHeaders=true, char delimiter=',', Long64_t linesChunkSize=-1LL, std::unordered_map< std::string, char > &&colTypes={});  Factory method to create a CSV RDataFrame. ;  ; RDataFrame FromSqlite (std::string_view fileName, std::string_view query);  Factory method to create a SQlite RDataFrame. ;  ; template<typename T > ; std::shared_ptr< arrow::ChunkedArray > getData (T p);  ; int getNRecords (std::shared_ptr< arrow::Table > &table, std::vector< std::string > &columnNames);  ; template<typename... ColumnTypes> ; RDataFrame MakeLazyDataFrame (std::pair< std::string, RResultPtr< std::vector< ColumnTypes > > > &&... colNameProxyPairs);  Factory method to create a Lazy RDataFrame. ;  ; RInterface< RDFDetail::RLoopManager > MakeTrivialDataFrame ();  Make a RDF wrapping a RTrivialDS with infinite entries, for demo purposes. ;  ; RInterface< RDFDetail::RLoopManager > MakeTrivialDataFrame (ULong64_t size, bool skipEvenEntries=false);  Make a RDF wrapping a RTrivialDS with the specified amount of entries. ;  ; template<typename F , typename Args = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::arg_types_nodecay, typename Ret = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::ret_type> ; auto Not (F &&f) -> decltype(RDFInternal::NotHelper(Args(), std::forward< F >(f)));  Given a callable with signature bool(T1, T2, ...) return a callable with same signature that returns the negated result. ;  ; template<class T1 , class T2 > ; bool operator!= (const RResultPtr< T1 > &lhs, const RResultPtr< T2 > &rhs);  ; template<class T1 > ; bool operator!= (const RResultPtr< T1 > &lhs, std::nullptr_t rhs);  ; template<class T1 > ; bool operator!= (std::nullptr_t lhs, const RResultPtr< T1 > &rhs);  ; std::ostream & operator<< (st",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:4217,Integrability,wrap,wrapping,4217,"che Arrow RDataFrame. ;  ; RDataFrame FromCSV (std::string_view fileName, bool readHeaders=true, char delimiter=',', Long64_t linesChunkSize=-1LL, std::unordered_map< std::string, char > &&colTypes={});  Factory method to create a CSV RDataFrame. ;  ; RDataFrame FromSqlite (std::string_view fileName, std::string_view query);  Factory method to create a SQlite RDataFrame. ;  ; template<typename T > ; std::shared_ptr< arrow::ChunkedArray > getData (T p);  ; int getNRecords (std::shared_ptr< arrow::Table > &table, std::vector< std::string > &columnNames);  ; template<typename... ColumnTypes> ; RDataFrame MakeLazyDataFrame (std::pair< std::string, RResultPtr< std::vector< ColumnTypes > > > &&... colNameProxyPairs);  Factory method to create a Lazy RDataFrame. ;  ; RInterface< RDFDetail::RLoopManager > MakeTrivialDataFrame ();  Make a RDF wrapping a RTrivialDS with infinite entries, for demo purposes. ;  ; RInterface< RDFDetail::RLoopManager > MakeTrivialDataFrame (ULong64_t size, bool skipEvenEntries=false);  Make a RDF wrapping a RTrivialDS with the specified amount of entries. ;  ; template<typename F , typename Args = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::arg_types_nodecay, typename Ret = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::ret_type> ; auto Not (F &&f) -> decltype(RDFInternal::NotHelper(Args(), std::forward< F >(f)));  Given a callable with signature bool(T1, T2, ...) return a callable with same signature that returns the negated result. ;  ; template<class T1 , class T2 > ; bool operator!= (const RResultPtr< T1 > &lhs, const RResultPtr< T2 > &rhs);  ; template<class T1 > ; bool operator!= (const RResultPtr< T1 > &lhs, std::nullptr_t rhs);  ; template<class T1 > ; bool operator!= (std::nullptr_t lhs, const RResultPtr< T1 > &rhs);  ; std::ostream & operator<< (std::ostream &os, const RDFDescription &description);  ; template<class T1 , class T2 > ; bool operator== (const RResultPtr< T1 > &lhs, const RResultPtr< T2 > &rhs);",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:9875,Integrability,wrap,wrapping,9875,". ◆ getData(). template<typename T > . std::shared_ptr< arrow::ChunkedArray > ROOT::RDF::getData ; (; T ; p). Definition at line 542 of file RArrowDS.cxx. ◆ getNRecords(). int ROOT::RDF::getNRecords ; (; std::shared_ptr< arrow::Table > & ; table, . std::vector< std::string > & ; columnNames . ). Definition at line 535 of file RArrowDS.cxx. ◆ MakeLazyDataFrame(). template<typename... ColumnTypes> . RDataFrame ROOT::RDF::MakeLazyDataFrame ; (; std::pair< std::string, RResultPtr< std::vector< ColumnTypes > > > &&... ; colNameProxyPairs). Factory method to create a Lazy RDataFrame. ; Parameters. [in]colNameProxyPairsthe series of pairs to describe the columns of the data source, first element of the pair is the name of the column and the second is the RResultPtr to the column in the parent data frame. . Definition at line 29 of file RLazyDS.hxx. ◆ MakeTrivialDataFrame() [1/2]. RInterface< RDFDetail::RLoopManager > ROOT::RDF::MakeTrivialDataFrame ; (; ). Make a RDF wrapping a RTrivialDS with infinite entries, for demo purposes. ; Definition at line 130 of file RTrivialDS.cxx. ◆ MakeTrivialDataFrame() [2/2]. RInterface< RDFDetail::RLoopManager > ROOT::RDF::MakeTrivialDataFrame ; (; ULong64_t ; size, . bool ; skipEvenEntries = false . ). Make a RDF wrapping a RTrivialDS with the specified amount of entries. ; Constructing an RDataFrame as RDataFrame(nEntries) is a superior alternative. If size is std::numeric_limits<ULong64_t>::max(), this acts as an infinite data-source: it returns entries from GetEntryRanges forever or until a Range stops the event loop (for test purposes). ; Definition at line 123 of file RTrivialDS.cxx. ◆ Not(). template<typename F , typename Args = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::arg_types_nodecay, typename Ret = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::ret_type> . auto ROOT::RDF::Not ; (; F && ; f); -> decltype(RDFInternal::NotHelper(Args(), std::forward<F>(f))). Given a callable with signature bool(T1, T",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:10162,Integrability,wrap,wrapping,10162,"nNames . ). Definition at line 535 of file RArrowDS.cxx. ◆ MakeLazyDataFrame(). template<typename... ColumnTypes> . RDataFrame ROOT::RDF::MakeLazyDataFrame ; (; std::pair< std::string, RResultPtr< std::vector< ColumnTypes > > > &&... ; colNameProxyPairs). Factory method to create a Lazy RDataFrame. ; Parameters. [in]colNameProxyPairsthe series of pairs to describe the columns of the data source, first element of the pair is the name of the column and the second is the RResultPtr to the column in the parent data frame. . Definition at line 29 of file RLazyDS.hxx. ◆ MakeTrivialDataFrame() [1/2]. RInterface< RDFDetail::RLoopManager > ROOT::RDF::MakeTrivialDataFrame ; (; ). Make a RDF wrapping a RTrivialDS with infinite entries, for demo purposes. ; Definition at line 130 of file RTrivialDS.cxx. ◆ MakeTrivialDataFrame() [2/2]. RInterface< RDFDetail::RLoopManager > ROOT::RDF::MakeTrivialDataFrame ; (; ULong64_t ; size, . bool ; skipEvenEntries = false . ). Make a RDF wrapping a RTrivialDS with the specified amount of entries. ; Constructing an RDataFrame as RDataFrame(nEntries) is a superior alternative. If size is std::numeric_limits<ULong64_t>::max(), this acts as an infinite data-source: it returns entries from GetEntryRanges forever or until a Range stops the event loop (for test purposes). ; Definition at line 123 of file RTrivialDS.cxx. ◆ Not(). template<typename F , typename Args = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::arg_types_nodecay, typename Ret = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::ret_type> . auto ROOT::RDF::Not ; (; F && ; f); -> decltype(RDFInternal::NotHelper(Args(), std::forward<F>(f))). Given a callable with signature bool(T1, T2, ...) return a callable with same signature that returns the negated result. ; The callable must have one single non-template definition of operator(). This is a limitation with respect to std::not_fn, required for interoperability with RDataFrame. ; Definition at line 83 of file RD",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:11118,Integrability,interoperab,interoperability,11118,"_t ; size, . bool ; skipEvenEntries = false . ). Make a RDF wrapping a RTrivialDS with the specified amount of entries. ; Constructing an RDataFrame as RDataFrame(nEntries) is a superior alternative. If size is std::numeric_limits<ULong64_t>::max(), this acts as an infinite data-source: it returns entries from GetEntryRanges forever or until a Range stops the event loop (for test purposes). ; Definition at line 123 of file RTrivialDS.cxx. ◆ Not(). template<typename F , typename Args = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::arg_types_nodecay, typename Ret = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::ret_type> . auto ROOT::RDF::Not ; (; F && ; f); -> decltype(RDFInternal::NotHelper(Args(), std::forward<F>(f))). Given a callable with signature bool(T1, T2, ...) return a callable with same signature that returns the negated result. ; The callable must have one single non-template definition of operator(). This is a limitation with respect to std::not_fn, required for interoperability with RDataFrame. ; Definition at line 83 of file RDFHelpers.hxx. ◆ operator!=() [1/3]. template<class T1 , class T2 > . bool ROOT::RDF::operator!= ; (; const RResultPtr< T1 > & ; lhs, . const RResultPtr< T2 > & ; rhs . ). Definition at line 407 of file RResultPtr.hxx. ◆ operator!=() [2/3]. template<class T1 > . bool ROOT::RDF::operator!= ; (; const RResultPtr< T1 > & ; lhs, . std::nullptr_t ; rhs . ). Definition at line 425 of file RResultPtr.hxx. ◆ operator!=() [3/3]. template<class T1 > . bool ROOT::RDF::operator!= ; (; std::nullptr_t ; lhs, . const RResultPtr< T1 > & ; rhs . ). Definition at line 431 of file RResultPtr.hxx. ◆ operator<<(). std::ostream & ROOT::RDF::operator<< ; (; std::ostream & ; os, . const RDFDescription & ; description . ). Definition at line 37 of file RDFDescription.cxx. ◆ operator==() [1/3]. template<class T1 , class T2 > . bool ROOT::RDF::operator== ; (; const RResultPtr< T1 > & ; lhs, . const RResultPtr< T2 > & ; rhs . ). Def",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:14446,Integrability,interface,interface,14446,"s(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loops will run concurrently. Therefore, the overall computation of all results is generally more efficient. It should be noted that user-defined operations (e.g., Filters and Defines) of the different RDataFrame graphs are assumed to be safe to call concurrently.; ROOT::RDataFrame df1(""tree1"", ""file1.root"");; auto r1 = df1.Histo1D(""var1"");; ; ROOT::RDataFrame df2(""tree2"", ""file2.root"");; auto r2 = df2.Sum(""var2"");; ; // RResultPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that Sav",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:5577,Modifiability,variab,variables,5577,"ong64_t size, bool skipEvenEntries=false);  Make a RDF wrapping a RTrivialDS with the specified amount of entries. ;  ; template<typename F , typename Args = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::arg_types_nodecay, typename Ret = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::ret_type> ; auto Not (F &&f) -> decltype(RDFInternal::NotHelper(Args(), std::forward< F >(f)));  Given a callable with signature bool(T1, T2, ...) return a callable with same signature that returns the negated result. ;  ; template<class T1 , class T2 > ; bool operator!= (const RResultPtr< T1 > &lhs, const RResultPtr< T2 > &rhs);  ; template<class T1 > ; bool operator!= (const RResultPtr< T1 > &lhs, std::nullptr_t rhs);  ; template<class T1 > ; bool operator!= (std::nullptr_t lhs, const RResultPtr< T1 > &rhs);  ; std::ostream & operator<< (std::ostream &os, const RDFDescription &description);  ; template<class T1 , class T2 > ; bool operator== (const RResultPtr< T1 > &lhs, const RResultPtr< T2 > &rhs);  ; template<class T1 > ; bool operator== (const RResultPtr< T1 > &lhs, std::nullptr_t rhs);  ; template<class T1 > ; bool operator== (std::nullptr_t lhs, const RResultPtr< T1 > &rhs);  ; template<std::size_t N, typename T , typename F > ; auto PassAsVec (F &&f) -> RDFInternal::PassAsVecHelper< std::make_index_sequence< N >, T, F >;  PassAsVec is a callable generator that allows passing N variables of type T to a function as a single collection. ;  ; unsigned int RunGraphs (std::vector< RResultHandle > handles);  Trigger the event loop of multiple RDataFrames concurrently. ;  ; template<typename NodeType > ; std::string SaveGraph (NodeType node);  Create a graphviz representation of the dataframe computation graph, return it as a string. ;  ; template<typename NodeType > ; void SaveGraph (NodeType node, const std::string &outputFile);  Create a graphviz representation of the dataframe computation graph, write it to the specified file. ;  ; void splitInEqualRanges ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:12746,Modifiability,variab,variables,12746,"of file RResultPtr.hxx. ◆ operator<<(). std::ostream & ROOT::RDF::operator<< ; (; std::ostream & ; os, . const RDFDescription & ; description . ). Definition at line 37 of file RDFDescription.cxx. ◆ operator==() [1/3]. template<class T1 , class T2 > . bool ROOT::RDF::operator== ; (; const RResultPtr< T1 > & ; lhs, . const RResultPtr< T2 > & ; rhs . ). Definition at line 401 of file RResultPtr.hxx. ◆ operator==() [2/3]. template<class T1 > . bool ROOT::RDF::operator== ; (; const RResultPtr< T1 > & ; lhs, . std::nullptr_t ; rhs . ). Definition at line 413 of file RResultPtr.hxx. ◆ operator==() [3/3]. template<class T1 > . bool ROOT::RDF::operator== ; (; std::nullptr_t ; lhs, . const RResultPtr< T1 > & ; rhs . ). Definition at line 419 of file RResultPtr.hxx. ◆ PassAsVec(). template<std::size_t N, typename T , typename F > . auto ROOT::RDF::PassAsVec ; (; F && ; f); -> RDFInternal::PassAsVecHelper<std::make_index_sequence<N>, T, F>. PassAsVec is a callable generator that allows passing N variables of type T to a function as a single collection. ; PassAsVec<N, T>(func) returns a callable that takes N arguments of type T, passes them down to function func as an initializer list {t1, t2, t3,..., tN} and returns whatever f({t1, t2, t3, ..., tN}) returns.; Note that for this to work with RDataFrame the type of all columns that the callable is applied to must be exactly T. Example usage together with RDataFrame (""varX"" columns must all be float variables): bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});. Definition at line 103 of file RDFHelpers.hxx. ◆ RunGraphs(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:13206,Modifiability,variab,variables,13206,"OOT::RDF::operator== ; (; const RResultPtr< T1 > & ; lhs, . std::nullptr_t ; rhs . ). Definition at line 413 of file RResultPtr.hxx. ◆ operator==() [3/3]. template<class T1 > . bool ROOT::RDF::operator== ; (; std::nullptr_t ; lhs, . const RResultPtr< T1 > & ; rhs . ). Definition at line 419 of file RResultPtr.hxx. ◆ PassAsVec(). template<std::size_t N, typename T , typename F > . auto ROOT::RDF::PassAsVec ; (; F && ; f); -> RDFInternal::PassAsVecHelper<std::make_index_sequence<N>, T, F>. PassAsVec is a callable generator that allows passing N variables of type T to a function as a single collection. ; PassAsVec<N, T>(func) returns a callable that takes N arguments of type T, passes them down to function func as an initializer list {t1, t2, t3,..., tN} and returns whatever f({t1, t2, t3, ..., tN}) returns.; Note that for this to work with RDataFrame the type of all columns that the callable is applied to must be exactly T. Example usage together with RDataFrame (""varX"" columns must all be float variables): bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});. Definition at line 103 of file RDFHelpers.hxx. ◆ RunGraphs(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loops will run concurrently. Therefore, the overall computation of all results is generally more efficient. It should be noted that user-defined operations (e.g., Filters and Defines) of the different RDataFrame graphs are assumed to be safe to call concurrently.; ROOT::RDataFrame df1(""tree1"", ""file1.root"");; auto r1 = df1",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:5751,Performance,concurren,concurrently,5751,"mplate<class T1 , class T2 > ; bool operator!= (const RResultPtr< T1 > &lhs, const RResultPtr< T2 > &rhs);  ; template<class T1 > ; bool operator!= (const RResultPtr< T1 > &lhs, std::nullptr_t rhs);  ; template<class T1 > ; bool operator!= (std::nullptr_t lhs, const RResultPtr< T1 > &rhs);  ; std::ostream & operator<< (std::ostream &os, const RDFDescription &description);  ; template<class T1 , class T2 > ; bool operator== (const RResultPtr< T1 > &lhs, const RResultPtr< T2 > &rhs);  ; template<class T1 > ; bool operator== (const RResultPtr< T1 > &lhs, std::nullptr_t rhs);  ; template<class T1 > ; bool operator== (std::nullptr_t lhs, const RResultPtr< T1 > &rhs);  ; template<std::size_t N, typename T , typename F > ; auto PassAsVec (F &&f) -> RDFInternal::PassAsVecHelper< std::make_index_sequence< N >, T, F >;  PassAsVec is a callable generator that allows passing N variables of type T to a function as a single collection. ;  ; unsigned int RunGraphs (std::vector< RResultHandle > handles);  Trigger the event loop of multiple RDataFrames concurrently. ;  ; template<typename NodeType > ; std::string SaveGraph (NodeType node);  Create a graphviz representation of the dataframe computation graph, return it as a string. ;  ; template<typename NodeType > ; void SaveGraph (NodeType node, const std::string &outputFile);  Create a graphviz representation of the dataframe computation graph, write it to the specified file. ;  ; void splitInEqualRanges (std::vector< std::pair< ULong64_t, ULong64_t > > &ranges, int nRecords, unsigned int nSlots);  . Typedef Documentation. ◆ ColumnNames_t. typedef std::vector< std::string > ROOT::RDF::ColumnNames_t. Definition at line 35 of file RInterfaceBase.hxx. ◆ RNode. typedef RInterface<::ROOT::Detail::RDF::RNodeBase, void > ROOT::RDF::RNode. Definition at line 57 of file InterfaceUtils.hxx. ◆ SampleCallback_t. using ROOT::RDF::SampleCallback_t = typedef std::function<void(unsigned int, const ROOT::RDF::RSampleInfo &)>. The type of a data-bl",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:13519,Performance,concurren,concurrently,13519,"ultPtr.hxx. ◆ PassAsVec(). template<std::size_t N, typename T , typename F > . auto ROOT::RDF::PassAsVec ; (; F && ; f); -> RDFInternal::PassAsVecHelper<std::make_index_sequence<N>, T, F>. PassAsVec is a callable generator that allows passing N variables of type T to a function as a single collection. ; PassAsVec<N, T>(func) returns a callable that takes N arguments of type T, passes them down to function func as an initializer list {t1, t2, t3,..., tN} and returns whatever f({t1, t2, t3, ..., tN}) returns.; Note that for this to work with RDataFrame the type of all columns that the callable is applied to must be exactly T. Example usage together with RDataFrame (""varX"" columns must all be float variables): bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});. Definition at line 103 of file RDFHelpers.hxx. ◆ RunGraphs(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loops will run concurrently. Therefore, the overall computation of all results is generally more efficient. It should be noted that user-defined operations (e.g., Filters and Defines) of the different RDataFrame graphs are assumed to be safe to call concurrently.; ROOT::RDataFrame df1(""tree1"", ""file1.root"");; auto r1 = df1.Histo1D(""var1"");; ; ROOT::RDataFrame df2(""tree2"", ""file2.root"");; auto r2 = df2.Sum(""var2"");; ; // RResultPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Defin",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:13889,Performance,concurren,concurrently,13889,"s a callable that takes N arguments of type T, passes them down to function func as an initializer list {t1, t2, t3,..., tN} and returns whatever f({t1, t2, t3, ..., tN}) returns.; Note that for this to work with RDataFrame the type of all columns that the callable is applied to must be exactly T. Example usage together with RDataFrame (""varX"" columns must all be float variables): bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});. Definition at line 103 of file RDFHelpers.hxx. ◆ RunGraphs(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loops will run concurrently. Therefore, the overall computation of all results is generally more efficient. It should be noted that user-defined operations (e.g., Filters and Defines) of the different RDataFrame graphs are assumed to be safe to call concurrently.; ROOT::RDataFrame df1(""tree1"", ""file1.root"");; auto r1 = df1.Histo1D(""var1"");; ; ROOT::RDataFrame df2(""tree2"", ""file2.root"");; auto r2 = df2.Sum(""var2"");; ; // RResultPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; No",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:14124,Performance,concurren,concurrently,14124," the callable is applied to must be exactly T. Example usage together with RDataFrame (""varX"" columns must all be float variables): bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});. Definition at line 103 of file RDFHelpers.hxx. ◆ RunGraphs(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loops will run concurrently. Therefore, the overall computation of all results is generally more efficient. It should be noted that user-defined operations (e.g., Filters and Defines) of the different RDataFrame graphs are assumed to be safe to call concurrently.; ROOT::RDataFrame df1(""tree1"", ""file1.root"");; auto r1 = df1.Histo1D(""var1"");; ; ROOT::RDataFrame df2(""tree2"", ""file2.root"");; auto r2 = df2.Sum(""var2"");; ; // RResultPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node b",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:14654,Performance,concurren,concurrently,14654,"sThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loops will run concurrently. Therefore, the overall computation of all results is generally more efficient. It should be noted that user-defined operations (e.g., Filters and Defines) of the different RDataFrame graphs are assumed to be safe to call concurrently.; ROOT::RDataFrame df1(""tree1"", ""file1.root"");; auto r1 = df1.Histo1D(""var1"");; ; ROOT::RDataFrame df2(""tree2"", ""file2.root"");; auto r2 = df2.Sum(""var2"");; ; // RResultPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 120 of file RDFHelpers.hxx. ◆ SaveGraph() [2/2]. template<typename NodeType > . void ROOT::RDF::Sav",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:15330,Performance,optimiz,optimized,15330,"tPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 120 of file RDFHelpers.hxx. ◆ SaveGraph() [2/2]. template<typename NodeType > . void ROOT::RDF::SaveGraph ; (; NodeType ; node, . const std::string & ; outputFile . ). Create a graphviz representation of the dataframe computation graph, write it to the specified file. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. ; [in]outputFilefile where to save the representation. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:15436,Performance,concurren,concurrently,15436,"rs a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 120 of file RDFHelpers.hxx. ◆ SaveGraph() [2/2]. template<typename NodeType > . void ROOT::RDF::SaveGraph ; (; NodeType ; node, . const std::string & ; outputFile . ). Create a graphviz representation of the dataframe computation graph, write it to the specified file. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. ; [in]outputFilefile where to save the representation. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 139 of file RDFHelpers.hxx. ◆ splitInEqualRanges(). v",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:16205,Performance,optimiz,optimized,16205," RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 120 of file RDFHelpers.hxx. ◆ SaveGraph() [2/2]. template<typename NodeType > . void ROOT::RDF::SaveGraph ; (; NodeType ; node, . const std::string & ; outputFile . ). Create a graphviz representation of the dataframe computation graph, write it to the specified file. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. ; [in]outputFilefile where to save the representation. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 139 of file RDFHelpers.hxx. ◆ splitInEqualRanges(). void ROOT::RDF::splitInEqualRanges ; (; std::vector< std::pair< ULong64_t, ULong64_t > > & ; ranges, . int ; nRecords, . unsigned int ; nSlots . ). Definition at line 519 of file RArrowDS.cxx. ROOTRDF. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:16311,Performance,concurren,concurrently,16311," RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 120 of file RDFHelpers.hxx. ◆ SaveGraph() [2/2]. template<typename NodeType > . void ROOT::RDF::SaveGraph ; (; NodeType ; node, . const std::string & ; outputFile . ). Create a graphviz representation of the dataframe computation graph, write it to the specified file. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. ; [in]outputFilefile where to save the representation. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 139 of file RDFHelpers.hxx. ◆ splitInEqualRanges(). void ROOT::RDF::splitInEqualRanges ; (; std::vector< std::pair< ULong64_t, ULong64_t > > & ; ranges, . int ; nRecords, . unsigned int ; nSlots . ). Definition at line 519 of file RArrowDS.cxx. ROOTRDF. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:14111,Safety,safe,safe,14111," the callable is applied to must be exactly T. Example usage together with RDataFrame (""varX"" columns must all be float variables): bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});. Definition at line 103 of file RDFHelpers.hxx. ◆ RunGraphs(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loops will run concurrently. Therefore, the overall computation of all results is generally more efficient. It should be noted that user-defined operations (e.g., Filters and Defines) of the different RDataFrame graphs are assumed to be safe to call concurrently.; ROOT::RDataFrame df1(""tree1"", ""file1.root"");; auto r1 = df1.Histo1D(""var1"");; ; ROOT::RDataFrame df2(""tree2"", ""file2.root"");; auto r2 = df2.Sum(""var2"");; ; // RResultPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node b",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:15408,Safety,safe,safe,15408,"rs a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 120 of file RDFHelpers.hxx. ◆ SaveGraph() [2/2]. template<typename NodeType > . void ROOT::RDF::SaveGraph ; (; NodeType ; node, . const std::string & ; outputFile . ). Create a graphviz representation of the dataframe computation graph, write it to the specified file. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. ; [in]outputFilefile where to save the representation. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 139 of file RDFHelpers.hxx. ◆ splitInEqualRanges(). v",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:16283,Safety,safe,safe,16283," RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 120 of file RDFHelpers.hxx. ◆ SaveGraph() [2/2]. template<typename NodeType > . void ROOT::RDF::SaveGraph ; (; NodeType ; node, . const std::string & ; outputFile . ). Create a graphviz representation of the dataframe computation graph, write it to the specified file. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. ; [in]outputFilefile where to save the representation. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 139 of file RDFHelpers.hxx. ◆ splitInEqualRanges(). void ROOT::RDF::splitInEqualRanges ; (; std::vector< std::pair< ULong64_t, ULong64_t > > & ; ranges, . int ; nRecords, . unsigned int ; nSlots . ). Definition at line 519 of file RArrowDS.cxx. ROOTRDF. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:13831,Security,access,accessing,13831,"s a callable that takes N arguments of type T, passes them down to function func as an initializer list {t1, t2, t3,..., tN} and returns whatever f({t1, t2, t3, ..., tN}) returns.; Note that for this to work with RDataFrame the type of all columns that the callable is applied to must be exactly T. Example usage together with RDataFrame (""varX"" columns must all be float variables): bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});. Definition at line 103 of file RDFHelpers.hxx. ◆ RunGraphs(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loops will run concurrently. Therefore, the overall computation of all results is generally more efficient. It should be noted that user-defined operations (e.g., Filters and Defines) of the different RDataFrame graphs are assumed to be safe to call concurrently.; ROOT::RDataFrame df1(""tree1"", ""file1.root"");; auto r1 = df1.Histo1D(""var1"");; ; ROOT::RDataFrame df2(""tree2"", ""file2.root"");; auto r2 = df2.Sum(""var2"");; ; // RResultPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; No",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:10480,Testability,test,test,10480,"umnTypes > > > &&... ; colNameProxyPairs). Factory method to create a Lazy RDataFrame. ; Parameters. [in]colNameProxyPairsthe series of pairs to describe the columns of the data source, first element of the pair is the name of the column and the second is the RResultPtr to the column in the parent data frame. . Definition at line 29 of file RLazyDS.hxx. ◆ MakeTrivialDataFrame() [1/2]. RInterface< RDFDetail::RLoopManager > ROOT::RDF::MakeTrivialDataFrame ; (; ). Make a RDF wrapping a RTrivialDS with infinite entries, for demo purposes. ; Definition at line 130 of file RTrivialDS.cxx. ◆ MakeTrivialDataFrame() [2/2]. RInterface< RDFDetail::RLoopManager > ROOT::RDF::MakeTrivialDataFrame ; (; ULong64_t ; size, . bool ; skipEvenEntries = false . ). Make a RDF wrapping a RTrivialDS with the specified amount of entries. ; Constructing an RDataFrame as RDataFrame(nEntries) is a superior alternative. If size is std::numeric_limits<ULong64_t>::max(), this acts as an infinite data-source: it returns entries from GetEntryRanges forever or until a Range stops the event loop (for test purposes). ; Definition at line 123 of file RTrivialDS.cxx. ◆ Not(). template<typename F , typename Args = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::arg_types_nodecay, typename Ret = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::ret_type> . auto ROOT::RDF::Not ; (; F && ; f); -> decltype(RDFInternal::NotHelper(Args(), std::forward<F>(f))). Given a callable with signature bool(T1, T2, ...) return a callable with same signature that returns the negated result. ; The callable must have one single non-template definition of operator(). This is a limitation with respect to std::not_fn, required for interoperability with RDataFrame. ; Definition at line 83 of file RDFHelpers.hxx. ◆ operator!=() [1/3]. template<class T1 , class T2 > . bool ROOT::RDF::operator!= ; (; const RResultPtr< T1 > & ; lhs, . const RResultPtr< T2 > & ; rhs . ). Definition at line 407 of file RResultPtr",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:1714,Usability,simpl,simple,1714,"Getter;  Helper to get the contents of a given column. More...;  ; class  RDisplay;  This class is the textual representation of the content of a columnar dataset. More...;  ; class  RInterface;  The public interface to the RDataFrame federation of classes. More...;  ; class  RInterfaceBase;  ; class  RLazyDS;  A RDataSource implementation which is built on top of result proxies. More...;  ; class  RResultHandle;  A type-erased version of RResultPtr and RResultMap. More...;  ; class  RResultPtr;  Smart pointer for the return type of actions. More...;  ; class  RSampleInfo;  This type represents a sample identifier, to be used in conjunction with RDataFrame features such as DefinePerSample() and per-sample callbacks. More...;  ; struct  RSnapshotOptions;  A collection of options to steer the creation of the dataset on file. More...;  ; class  RSqliteDS;  RSqliteDS is an RDF data source implementation for SQL result sets from sqlite3 files. More...;  ; class  RTrivialDS;  A simple data-source implementation, for demo purposes. More...;  ; class  RVariationsDescription;  A descriptor for the systematic variations known to a given RDataFrame node. More...;  ; class  TCutInfo;  ; class  TH1DModel;  A struct which stores the parameters of a TH1D. More...;  ; class  TH2DModel;  A struct which stores the parameters of a TH2D. More...;  ; class  TH3DModel;  A struct which stores the parameters of a TH3D. More...;  ; class  THnDModel;  A struct which stores the parameters of a THnD. More...;  ; class  TProfile1DModel;  A struct which stores the parameters of a TProfile. More...;  ; class  TProfile2DModel;  A struct which stores the parameters of a TProfile2D. More...;  ; class  VerifyValidColumnType;  Helper to determine if a given Column is a supported type. More...;  . Typedefs; using ColumnNames_t = std::vector< std::string >;  ; using RNode = RInterface<::ROOT::Detail::RDF::RNodeBase, void >;  ; using SampleCallback_t = std::function< void(unsigned int, const ROOT::RDF::R",MatchSource.WIKI,doc/v632/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html
https://root.cern/doc/v632/namespaceROOT_1_1TestSupport.html:494,Availability,failure,failures,494,". ROOT: ROOT::TestSupport Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions |; Variables ; ROOT::TestSupport Namespace Reference. Classes; class  CheckDiagsRAII;  Install a ROOT diagnostic handler to analyse diagnostics. More...;  ; class  FilterDiagsRAII;  Allows a user function to catch and filter/analyse ROOT and cling diagnostics, e.g. More...;  ; struct  ForbidDiagnostics;  Error handler for gtests that generates failures for every received diagnostic > kInfo when this file is linked to. More...;  . Functions; std::ostream & operator<< (std::ostream &stream, CheckDiagsRAII::Diag_t const &diag);  . Variables; static struct ROOT::TestSupport::ForbidDiagnostics noDiagCheckerInstance;  . Function Documentation. ◆ operator<<(). std::ostream & ROOT::TestSupport::operator<< ; (; std::ostream & ; stream, . CheckDiagsRAII::Diag_t const & ; diag . ). Definition at line 138 of file TestSupport.cxx. Variable Documentation. ◆ noDiagCheckerInstance. struct ROOT::TestSupport::ForbidDiagnostics ROOT::TestSupport::noDiagCheckerInstance. static . ROOTTestSupport. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TestSupport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TestSupport.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:16317,Availability,avail,available,16317,"emove the last n template arguments from the name. ;  ; void ReplaceAll (std::string &str, const std::string &from, const std::string &to, bool recurse=false);  ; bool RequireCompleteType (const cling::Interpreter &interp, clang::SourceLocation Loc, clang::QualType Type);  ; bool RequireCompleteType (const cling::Interpreter &interp, const clang::CXXRecordDecl *cl);  ; clang::QualType ReSubstTemplateArg (clang::QualType input, const clang::Type *instance);  Check if 'input' or any of its template parameter was substituted when instantiating the class template instance and replace it with the partially sugared types we have from 'instance'. ;  ; const clang::CXXRecordDecl * ScopeSearch (const char *name, const cling::Interpreter &gInterp, bool diagnose, const clang::Type **resultType);  Return the scope corresponding to 'name' or std::'name'. ;  ; void SetPathsForRelocatability (std::vector< std::string > &clingArgs);  Organise the parameters for cling in order to guarantee relocatability It treats the gcc toolchain and the root include path FIXME: enables relocatability for experiments' framework headers until PCMs are available. ;  ; const char * ShortTypeName (const char *typeDesc);  Return the absolute type of typeDesc. ;  ; std::string ShortTypeName (const clang::FieldDecl &m);  Return the absolute type of typeDesc. ;  ; ROOT::ESTLType STLKind (const llvm::StringRef type);  Converts STL container name to number. vector -> 1, etc.. ;  ; void SysError (const char *location, const char *fmt,...);  ; std::string TrueName (const clang::FieldDecl &m);  TrueName strips the typedefs and array dimensions. ;  ; void Warning (const char *location, const char *fmt,...);  ; void WriteAuxFunctions (std::ostream &finalString, const AnnotatedRecordDecl &cl, const clang::CXXRecordDecl *decl, const cling::Interpreter &interp, const RConstructorTypes &ctorTypes, const TNormalizedCtxt &normCtxt);  std::string NormalizedName; GetNormalizedName(NormalizedName, decl->getASTContext().g",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:22645,Availability,error,error,22645," ; (; clang::CXXRecordDecl const * ; cl, . char const * ; methodname, . char const * ; proto, . const cling::Interpreter & ; interp, . bool ; diagnose . ). Return true, if the function (defined by the name and prototype) exists and is public. ; Definition at line 1202 of file TClingUtils.cxx. ◆ ClassInfo__HasMethod(). const clang::FunctionDecl * ROOT::TMetaUtils::ClassInfo__HasMethod ; (; const clang::DeclContext * ; cl, . char const * ; name, . const cling::Interpreter & ; interp . ). Definition at line 722 of file TClingUtils.cxx. ◆ DataMemberInfo__ValidArrayIndex(). llvm::StringRef ROOT::TMetaUtils::DataMemberInfo__ValidArrayIndex ; (; const cling::Interpreter & ; interp, . const clang::DeclaratorDecl & ; m, . int * ; errnum = nullptr, . llvm::StringRef * ; errstr = nullptr . ). ValidArrayIndex return a static string (so use it or copy it immediatly, do not call GrabIndex twice in the same expression) containing the size of the array data member. ; In case of error, or if the size is not specified, GrabIndex returns 0. If errnum is not null, *errnum updated with the error number: Cint::G__DataMemberInfo::G__VALID : valid array index Cint::G__DataMemberInfo::G__NOT_INT : array index is not an int Cint::G__DataMemberInfo::G__NOT_DEF : index not defined before array (this IS an error for streaming to disk) Cint::G__DataMemberInfo::G__IS_PRIVATE: index exist in a parent class but is private Cint::G__DataMemberInfo::G__UNKNOWN : index is not known If errstr is not null, *errstr is updated with the address of a static string containing the part of the index with is invalid. ; Definition at line 3078 of file TClingUtils.cxx. ◆ DemangleNameForDlsym(). static std::string ROOT::TMetaUtils::DemangleNameForDlsym ; (; const std::string & ; name). inlinestatic . Definition at line 574 of file TClingUtils.h. ◆ ElementStreamer(). int ROOT::TMetaUtils::ElementStreamer ; (; std::ostream & ; finalString, . const clang::NamedDecl & ; forcontext, . const clang::QualType & ; qti, . co",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:22754,Availability,error,error,22754,"). const clang::FunctionDecl * ROOT::TMetaUtils::ClassInfo__HasMethod ; (; const clang::DeclContext * ; cl, . char const * ; name, . const cling::Interpreter & ; interp . ). Definition at line 722 of file TClingUtils.cxx. ◆ DataMemberInfo__ValidArrayIndex(). llvm::StringRef ROOT::TMetaUtils::DataMemberInfo__ValidArrayIndex ; (; const cling::Interpreter & ; interp, . const clang::DeclaratorDecl & ; m, . int * ; errnum = nullptr, . llvm::StringRef * ; errstr = nullptr . ). ValidArrayIndex return a static string (so use it or copy it immediatly, do not call GrabIndex twice in the same expression) containing the size of the array data member. ; In case of error, or if the size is not specified, GrabIndex returns 0. If errnum is not null, *errnum updated with the error number: Cint::G__DataMemberInfo::G__VALID : valid array index Cint::G__DataMemberInfo::G__NOT_INT : array index is not an int Cint::G__DataMemberInfo::G__NOT_DEF : index not defined before array (this IS an error for streaming to disk) Cint::G__DataMemberInfo::G__IS_PRIVATE: index exist in a parent class but is private Cint::G__DataMemberInfo::G__UNKNOWN : index is not known If errstr is not null, *errstr is updated with the address of a static string containing the part of the index with is invalid. ; Definition at line 3078 of file TClingUtils.cxx. ◆ DemangleNameForDlsym(). static std::string ROOT::TMetaUtils::DemangleNameForDlsym ; (; const std::string & ; name). inlinestatic . Definition at line 574 of file TClingUtils.h. ◆ ElementStreamer(). int ROOT::TMetaUtils::ElementStreamer ; (; std::ostream & ; finalString, . const clang::NamedDecl & ; forcontext, . const clang::QualType & ; qti, . const char * ; t, . int ; rwmode, . const cling::Interpreter & ; interp, . const char * ; tcl = nullptr . ). Definition at line 821 of file TClingUtils.cxx. ◆ EndsWith(). bool ROOT::TMetaUtils::EndsWith ; (; const std::string & ; theString, . const std::string & ; theSubstring . ). Definition at line 5077 of file TCli",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:22967,Availability,error,error,22967,"). const clang::FunctionDecl * ROOT::TMetaUtils::ClassInfo__HasMethod ; (; const clang::DeclContext * ; cl, . char const * ; name, . const cling::Interpreter & ; interp . ). Definition at line 722 of file TClingUtils.cxx. ◆ DataMemberInfo__ValidArrayIndex(). llvm::StringRef ROOT::TMetaUtils::DataMemberInfo__ValidArrayIndex ; (; const cling::Interpreter & ; interp, . const clang::DeclaratorDecl & ; m, . int * ; errnum = nullptr, . llvm::StringRef * ; errstr = nullptr . ). ValidArrayIndex return a static string (so use it or copy it immediatly, do not call GrabIndex twice in the same expression) containing the size of the array data member. ; In case of error, or if the size is not specified, GrabIndex returns 0. If errnum is not null, *errnum updated with the error number: Cint::G__DataMemberInfo::G__VALID : valid array index Cint::G__DataMemberInfo::G__NOT_INT : array index is not an int Cint::G__DataMemberInfo::G__NOT_DEF : index not defined before array (this IS an error for streaming to disk) Cint::G__DataMemberInfo::G__IS_PRIVATE: index exist in a parent class but is private Cint::G__DataMemberInfo::G__UNKNOWN : index is not known If errstr is not null, *errstr is updated with the address of a static string containing the part of the index with is invalid. ; Definition at line 3078 of file TClingUtils.cxx. ◆ DemangleNameForDlsym(). static std::string ROOT::TMetaUtils::DemangleNameForDlsym ; (; const std::string & ; name). inlinestatic . Definition at line 574 of file TClingUtils.h. ◆ ElementStreamer(). int ROOT::TMetaUtils::ElementStreamer ; (; std::ostream & ; finalString, . const clang::NamedDecl & ; forcontext, . const clang::QualType & ; qti, . const char * ; t, . int ; rwmode, . const cling::Interpreter & ; interp, . const char * ; tcl = nullptr . ). Definition at line 821 of file TClingUtils.cxx. ◆ EndsWith(). bool ROOT::TMetaUtils::EndsWith ; (; const std::string & ; theString, . const std::string & ; theSubstring . ). Definition at line 5077 of file TCli",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:37647,Availability,failure,failure,37647,"ecl & ; recordDecl . ). Definition at line 1395 of file TClingUtils.cxx. ◆ GetQualifiedName() [10/10]. void ROOT::TMetaUtils::GetQualifiedName ; (; std::string & ; qual_name, . const clang::Type & ; type, . const clang::NamedDecl & ; forcontext . ). Definition at line 1337 of file TClingUtils.cxx. ◆ GetRealPath(). std::string ROOT::TMetaUtils::GetRealPath ; (; const std::string & ; path). Returnsthe resolved normalized absolute path possibly resolving symlinks. ; Definition at line 72 of file TClingUtils.cxx. ◆ GetTrivialIntegralReturnValue(). std::pair< bool, int > ROOT::TMetaUtils::GetTrivialIntegralReturnValue ; (; const clang::FunctionDecl * ; funcCV, . const cling::Interpreter & ; interp . ). If the function contains 'just': return SomeValue; this routine will extract this value and return it. ; The first element is set to true we have the body of the function and it is indeed a trivial function with just a return of a value. The second element contains the value (or -1 is case of failure) ; Definition at line 2559 of file TClingUtils.cxx. ◆ GetTypeForIO(). clang::QualType ROOT::TMetaUtils::GetTypeForIO ; (; const clang::QualType & ; templateInstanceType, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt, . TClassEdit::EModType ; mode = TClassEdit::kNone . ). Definition at line 4108 of file TClingUtils.cxx. ◆ GetUnderlyingRecordDecl(). clang::RecordDecl * ROOT::TMetaUtils::GetUnderlyingRecordDecl ; (; clang::QualType ; type). Definition at line 2788 of file TClingUtils.cxx. ◆ GetUnderlyingType(). const clang::Type * ROOT::TMetaUtils::GetUnderlyingType ; (; clang::QualType ; type). Return the base/underlying type of a chain of array or pointers type. ; Does not yet support the array and pointer part being intermixed. ; Definition at line 4334 of file TClingUtils.cxx. ◆ GetWarningsAreErrors(). bool & ROOT::TMetaUtils::GetWarningsAreErrors ; (; ). inline . Definition at line 764 of file TClingUtils.h. ◆ HasClassDefMacro(). bool ROOT:",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:49098,Availability,avail,available,49098,"CXXRecordDecl * ; cl . ). Definition at line 759 of file TClingUtils.cxx. ◆ ReSubstTemplateArg(). clang::QualType ROOT::TMetaUtils::ReSubstTemplateArg ; (; clang::QualType ; input, . const clang::Type * ; instance . ). Check if 'input' or any of its template parameter was substituted when instantiating the class template instance and replace it with the partially sugared types we have from 'instance'. ; Definition at line 4566 of file TClingUtils.cxx. ◆ ScopeSearch(). const clang::CXXRecordDecl * ROOT::TMetaUtils::ScopeSearch ; (; const char * ; name, . const cling::Interpreter & ; gInterp, . bool ; diagnose, . const clang::Type ** ; resultType . ). Return the scope corresponding to 'name' or std::'name'. ; Definition at line 736 of file TClingUtils.cxx. ◆ SetPathsForRelocatability(). void ROOT::TMetaUtils::SetPathsForRelocatability ; (; std::vector< std::string > & ; clingArgs). Organise the parameters for cling in order to guarantee relocatability It treats the gcc toolchain and the root include path FIXME: enables relocatability for experiments' framework headers until PCMs are available. ; Definition at line 5031 of file TClingUtils.cxx. ◆ ShortTypeName() [1/2]. const char * ROOT::TMetaUtils::ShortTypeName ; (; const char * ; typeDesc). Return the absolute type of typeDesc. ; E.g.: typeDesc = ""class TNamed**"", returns ""TNamed"". we remove * and const keywords. (we do not want to remove & ). You need to use the result immediately before it is being overwritten. ; Definition at line 2679 of file TClingUtils.cxx. ◆ ShortTypeName() [2/2]. std::string ROOT::TMetaUtils::ShortTypeName ; (; const clang::FieldDecl & ; m). Return the absolute type of typeDesc. ; E.g.: typeDesc = ""class TNamed**"", returns ""TNamed"". we remove * and const keywords. (we do not want to remove & ). You need to use the result immediately before it is being overwritten. ; Definition at line 2770 of file TClingUtils.cxx. ◆ STLKind(). ROOT::ESTLType ROOT::TMetaUtils::STLKind ; (; const llvm::StringR",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:22737,Deployability,update,updated,22737,"). const clang::FunctionDecl * ROOT::TMetaUtils::ClassInfo__HasMethod ; (; const clang::DeclContext * ; cl, . char const * ; name, . const cling::Interpreter & ; interp . ). Definition at line 722 of file TClingUtils.cxx. ◆ DataMemberInfo__ValidArrayIndex(). llvm::StringRef ROOT::TMetaUtils::DataMemberInfo__ValidArrayIndex ; (; const cling::Interpreter & ; interp, . const clang::DeclaratorDecl & ; m, . int * ; errnum = nullptr, . llvm::StringRef * ; errstr = nullptr . ). ValidArrayIndex return a static string (so use it or copy it immediatly, do not call GrabIndex twice in the same expression) containing the size of the array data member. ; In case of error, or if the size is not specified, GrabIndex returns 0. If errnum is not null, *errnum updated with the error number: Cint::G__DataMemberInfo::G__VALID : valid array index Cint::G__DataMemberInfo::G__NOT_INT : array index is not an int Cint::G__DataMemberInfo::G__NOT_DEF : index not defined before array (this IS an error for streaming to disk) Cint::G__DataMemberInfo::G__IS_PRIVATE: index exist in a parent class but is private Cint::G__DataMemberInfo::G__UNKNOWN : index is not known If errstr is not null, *errstr is updated with the address of a static string containing the part of the index with is invalid. ; Definition at line 3078 of file TClingUtils.cxx. ◆ DemangleNameForDlsym(). static std::string ROOT::TMetaUtils::DemangleNameForDlsym ; (; const std::string & ; name). inlinestatic . Definition at line 574 of file TClingUtils.h. ◆ ElementStreamer(). int ROOT::TMetaUtils::ElementStreamer ; (; std::ostream & ; finalString, . const clang::NamedDecl & ; forcontext, . const clang::QualType & ; qti, . const char * ; t, . int ; rwmode, . const cling::Interpreter & ; interp, . const char * ; tcl = nullptr . ). Definition at line 821 of file TClingUtils.cxx. ◆ EndsWith(). bool ROOT::TMetaUtils::EndsWith ; (; const std::string & ; theString, . const std::string & ; theSubstring . ). Definition at line 5077 of file TCli",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:23172,Deployability,update,updated,23172,"). const clang::FunctionDecl * ROOT::TMetaUtils::ClassInfo__HasMethod ; (; const clang::DeclContext * ; cl, . char const * ; name, . const cling::Interpreter & ; interp . ). Definition at line 722 of file TClingUtils.cxx. ◆ DataMemberInfo__ValidArrayIndex(). llvm::StringRef ROOT::TMetaUtils::DataMemberInfo__ValidArrayIndex ; (; const cling::Interpreter & ; interp, . const clang::DeclaratorDecl & ; m, . int * ; errnum = nullptr, . llvm::StringRef * ; errstr = nullptr . ). ValidArrayIndex return a static string (so use it or copy it immediatly, do not call GrabIndex twice in the same expression) containing the size of the array data member. ; In case of error, or if the size is not specified, GrabIndex returns 0. If errnum is not null, *errnum updated with the error number: Cint::G__DataMemberInfo::G__VALID : valid array index Cint::G__DataMemberInfo::G__NOT_INT : array index is not an int Cint::G__DataMemberInfo::G__NOT_DEF : index not defined before array (this IS an error for streaming to disk) Cint::G__DataMemberInfo::G__IS_PRIVATE: index exist in a parent class but is private Cint::G__DataMemberInfo::G__UNKNOWN : index is not known If errstr is not null, *errstr is updated with the address of a static string containing the part of the index with is invalid. ; Definition at line 3078 of file TClingUtils.cxx. ◆ DemangleNameForDlsym(). static std::string ROOT::TMetaUtils::DemangleNameForDlsym ; (; const std::string & ; name). inlinestatic . Definition at line 574 of file TClingUtils.h. ◆ ElementStreamer(). int ROOT::TMetaUtils::ElementStreamer ; (; std::ostream & ; finalString, . const clang::NamedDecl & ; forcontext, . const clang::QualType & ; qti, . const char * ; t, . int ; rwmode, . const cling::Interpreter & ; interp, . const char * ; tcl = nullptr . ). Definition at line 821 of file TClingUtils.cxx. ◆ EndsWith(). bool ROOT::TMetaUtils::EndsWith ; (; const std::string & ; theString, . const std::string & ; theSubstring . ). Definition at line 5077 of file TCli",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:3118,Integrability,rout,routine,3118,"sts and is public. ;  ; const clang::FunctionDecl * ClassInfo__HasMethod (const clang::DeclContext *cl, char const *, const cling::Interpreter &interp);  ; llvm::StringRef DataMemberInfo__ValidArrayIndex (const cling::Interpreter &interp, const clang::DeclaratorDecl &m, int *errnum=nullptr, llvm::StringRef *errstr=nullptr);  ValidArrayIndex return a static string (so use it or copy it immediatly, do not call GrabIndex twice in the same expression) containing the size of the array data member. ;  ; static std::string DemangleNameForDlsym (const std::string &name);  ; int ElementStreamer (std::ostream &finalString, const clang::NamedDecl &forcontext, const clang::QualType &qti, const char *t, int rwmode, const cling::Interpreter &interp, const char *tcl=nullptr);  ; bool EndsWith (const std::string &theString, const std::string &theSubstring);  ; void Error (const char *location, const char *fmt,...);  ; bool ExtractAttrIntPropertyFromName (const clang::Decl &decl, const std::string &propName, int &propValue);  This routine counts on the ""propName<separator>propValue"" format. ;  ; bool ExtractAttrPropertyFromName (const clang::Decl &decl, const std::string &propName, std::string &propValue);  This routine counts on the ""propName<separator>propValue"" format. ;  ; int extractAttrString (clang::Attr *attribute, std::string &attrString);  Extract attr string. ;  ; void ExtractCtxtEnclosingNameSpaces (const clang::DeclContext &, std::list< std::pair< std::string, bool > > &);  Extract enclosing namespaces recursively. ;  ; void ExtractEnclosingNameSpaces (const clang::Decl &, std::list< std::pair< std::string, bool > > &);  Extract the immediately outer namespace and then launch the recursion. ;  ; const clang::RecordDecl * ExtractEnclosingScopes (const clang::Decl &decl, std::list< std::pair< std::string, unsigned int > > &enclosingSc);  Extract the names and types of containing scopes. ;  ; int extractPropertyNameVal (clang::Attr *attribute, std::string &attrName, std::s",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:3303,Integrability,rout,routine,3303,"Info__ValidArrayIndex (const cling::Interpreter &interp, const clang::DeclaratorDecl &m, int *errnum=nullptr, llvm::StringRef *errstr=nullptr);  ValidArrayIndex return a static string (so use it or copy it immediatly, do not call GrabIndex twice in the same expression) containing the size of the array data member. ;  ; static std::string DemangleNameForDlsym (const std::string &name);  ; int ElementStreamer (std::ostream &finalString, const clang::NamedDecl &forcontext, const clang::QualType &qti, const char *t, int rwmode, const cling::Interpreter &interp, const char *tcl=nullptr);  ; bool EndsWith (const std::string &theString, const std::string &theSubstring);  ; void Error (const char *location, const char *fmt,...);  ; bool ExtractAttrIntPropertyFromName (const clang::Decl &decl, const std::string &propName, int &propValue);  This routine counts on the ""propName<separator>propValue"" format. ;  ; bool ExtractAttrPropertyFromName (const clang::Decl &decl, const std::string &propName, std::string &propValue);  This routine counts on the ""propName<separator>propValue"" format. ;  ; int extractAttrString (clang::Attr *attribute, std::string &attrString);  Extract attr string. ;  ; void ExtractCtxtEnclosingNameSpaces (const clang::DeclContext &, std::list< std::pair< std::string, bool > > &);  Extract enclosing namespaces recursively. ;  ; void ExtractEnclosingNameSpaces (const clang::Decl &, std::list< std::pair< std::string, bool > > &);  Extract the immediately outer namespace and then launch the recursion. ;  ; const clang::RecordDecl * ExtractEnclosingScopes (const clang::Decl &decl, std::list< std::pair< std::string, unsigned int > > &enclosingSc);  Extract the names and types of containing scopes. ;  ; int extractPropertyNameVal (clang::Attr *attribute, std::string &attrName, std::string &attrValue);  ; int extractPropertyNameValFromString (const std::string attributeStr, std::string &attrName, std::string &attrValue);  ; clang::TemplateName ExtractTemplateNameF",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:4490,Integrability,interface,interface,4490,"d::string &propName, std::string &propValue);  This routine counts on the ""propName<separator>propValue"" format. ;  ; int extractAttrString (clang::Attr *attribute, std::string &attrString);  Extract attr string. ;  ; void ExtractCtxtEnclosingNameSpaces (const clang::DeclContext &, std::list< std::pair< std::string, bool > > &);  Extract enclosing namespaces recursively. ;  ; void ExtractEnclosingNameSpaces (const clang::Decl &, std::list< std::pair< std::string, bool > > &);  Extract the immediately outer namespace and then launch the recursion. ;  ; const clang::RecordDecl * ExtractEnclosingScopes (const clang::Decl &decl, std::list< std::pair< std::string, unsigned int > > &enclosingSc);  Extract the names and types of containing scopes. ;  ; int extractPropertyNameVal (clang::Attr *attribute, std::string &attrName, std::string &attrValue);  ; int extractPropertyNameValFromString (const std::string attributeStr, std::string &attrName, std::string &attrValue);  ; clang::TemplateName ExtractTemplateNameFromQualType (const clang::QualType &qt);  These manipulations are necessary because a template specialisation type does not inherit from a record type (there is an asymmetry between the decls and the types in the clang interface). ;  ; void Fatal (const char *location, const char *fmt,...);  ; void foreachHeaderInModule (const clang::Module &module, const std::function< void(const clang::Module::Header &)> &closure, bool includeDirectlyUsedModules=true);  Calls the given lambda on every header in the given module. ;  ; const clang::TagDecl * GetAnnotatedRedeclarable (const clang::TagDecl *TND);  ; const clang::TypedefNameDecl * GetAnnotatedRedeclarable (const clang::TypedefNameDecl *TND);  ; template<typename T > ; const T * GetAnnotatedRedeclarable (const T *Redecl);  ; llvm::StringRef GetClassComment (const clang::CXXRecordDecl &decl, clang::SourceLocation *loc, const cling::Interpreter &interpreter);  Return the class comment after the ClassDef: class MyClass { .",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:9680,Integrability,rout,routine,9680," std::string GetQualifiedName (const clang::QualType &type, const clang::NamedDecl &forcontext);  ; std::string GetQualifiedName (const clang::RecordDecl &recordDecl);  ; std::string GetQualifiedName (const clang::Type &type, const clang::NamedDecl &forcontext);  ; void GetQualifiedName (std::string &qual_name, const AnnotatedRecordDecl &annotated);  ; void GetQualifiedName (std::string &qual_name, const clang::NamedDecl &nd);  This implementation does not rely on GetFullyQualifiedTypeName. ;  ; void GetQualifiedName (std::string &qual_name, const clang::QualType &type, const clang::NamedDecl &forcontext);  Main implementation relying on GetFullyQualifiedTypeName All other GetQualifiedName functions leverage this one except the one for namespaces. ;  ; void GetQualifiedName (std::string &qual_name, const clang::RecordDecl &recordDecl);  ; void GetQualifiedName (std::string &qual_name, const clang::Type &type, const clang::NamedDecl &forcontext);  ; std::string GetRealPath (const std::string &path);  ; std::pair< bool, int > GetTrivialIntegralReturnValue (const clang::FunctionDecl *funcCV, const cling::Interpreter &interp);  If the function contains 'just': return SomeValue; this routine will extract this value and return it. ;  ; clang::QualType GetTypeForIO (const clang::QualType &templateInstanceType, const cling::Interpreter &interpreter, const TNormalizedCtxt &normCtxt, TClassEdit::EModType mode=TClassEdit::kNone);  ; clang::RecordDecl * GetUnderlyingRecordDecl (clang::QualType type);  ; const clang::Type * GetUnderlyingType (clang::QualType type);  Return the base/underlying type of a chain of array or pointers type. ;  ; bool & GetWarningsAreErrors ();  ; bool HasClassDefMacro (const clang::Decl *decl, const cling::Interpreter &interpreter);  Return true if class has any of class declarations like ClassDef, ClassDefNV, ClassDefOverride. ;  ; bool HasCustomConvStreamerMemberFunction (const AnnotatedRecordDecl &cl, const clang::CXXRecordDecl *clxx, const cling::I",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:12231,Integrability,depend,depends,12231,"const &, const cling::Interpreter &);  return true if we can find a custom operator new with placement ;  ; bool HasCustomStreamerMemberFunction (const AnnotatedRecordDecl &cl, const clang::CXXRecordDecl *clxx, const cling::Interpreter &interp, const TNormalizedCtxt &normCtxt);  Return true if the class has a custom member function streamer. ;  ; bool HasDirectoryAutoAdd (clang::CXXRecordDecl const *, const cling::Interpreter &);  Return true if the class has a method DirectoryAutoAdd(TDirectory *) ;  ; bool HasIOConstructor (clang::CXXRecordDecl const *, std::string &, const RConstructorTypes &, const cling::Interpreter &);  return true if we can find an constructor calleable without any arguments or with one the IOCtor special types. ;  ; bool HasNewMerge (clang::CXXRecordDecl const *, const cling::Interpreter &);  Return true if the class has a method Merge(TCollection*,TFileMergeInfo*) ;  ; bool HasOldMerge (clang::CXXRecordDecl const *, const cling::Interpreter &);  Return true if the class has a method Merge(TCollection*) ;  ; bool hasOpaqueTypedef (clang::QualType instanceType, const TNormalizedCtxt &normCtxt);  Return true if the type is a Double32_t or Float16_t or is a instance template that depends on Double32_t or Float16_t. ;  ; bool hasOpaqueTypedef (const AnnotatedRecordDecl &cl, const cling::Interpreter &interp, const TNormalizedCtxt &normCtxt);  Return true if any of the argument is or contains a double32. ;  ; bool HasResetAfterMerge (clang::CXXRecordDecl const *, const cling::Interpreter &);  Return true if the class has a method ResetAfterMerge(TFileMergeInfo *) ;  ; void Info (const char *location, const char *fmt,...);  ; bool IsBase (const clang::CXXRecordDecl *cl, const clang::CXXRecordDecl *base, const clang::CXXRecordDecl *context, const cling::Interpreter &interp);  ; bool IsBase (const clang::FieldDecl &m, const char *basename, const cling::Interpreter &interp);  ; bool IsCtxtReacheable (const clang::DeclContext &ctxt);  Return true if the",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:18325,Integrability,interface,interface,18325,"assCode (CallWriteStreamer_t WriteStreamerFunc, const AnnotatedRecordDecl &cl, const cling::Interpreter &interp, const TNormalizedCtxt &normCtxt, std::ostream &finalString, const RConstructorTypes &ctorTypes, bool isGenreflex);  Generate the code of the class If the requestor is genreflex, request the new streamer format. ;  ; void WriteClassInit (std::ostream &finalString, const AnnotatedRecordDecl &cl, const clang::CXXRecordDecl *decl, const cling::Interpreter &interp, const TNormalizedCtxt &normCtxt, const RConstructorTypes &ctorTypes, bool &needCollectionProxy);  FIXME: a function of 450+ lines! ;  ; int WriteNamespaceHeader (std::ostream &, const clang::DeclContext *);  Write all the necessary opening part of the namespace and return the number of closing brackets needed For example for Space1::Space2 we write: namespace Space1 { namespace Space2 { and return 2. ;  ; int WriteNamespaceHeader (std::ostream &, const clang::RecordDecl *);  ; void WritePointersSTL (const AnnotatedRecordDecl &cl, const cling::Interpreter &interp, const TNormalizedCtxt &normCtxt);  Write interface function for STL members. ;  . Variables; const int kError = 2000;  ; const int kFatal = 4000;  ; const int kInfo = 0;  ; const int kMaxLen = 1024;  ; const int kNote = 500;  ; const int kSysError = 3000;  ; const int kWarning = 1000;  . Typedef Documentation. ◆ CallWriteStreamer_t. typedef void(* ROOT::TMetaUtils::CallWriteStreamer_t) (const AnnotatedRecordDecl &cl, const cling::Interpreter &interp, const TNormalizedCtxt &normCtxt, std::ostream &dictStream, bool isAutoStreamer). Definition at line 120 of file TClingUtils.h. ◆ RConstructorTypes. typedef std::list<RConstructorType> ROOT::TMetaUtils::RConstructorTypes. Definition at line 321 of file TClingUtils.h. Enumeration Type Documentation. ◆ DataMemberInfo__ValidArrayIndex_error_code. enum ROOT::TMetaUtils::DataMemberInfo__ValidArrayIndex_error_code. EnumeratorVALID ; NOT_INT ; NOT_DEF ; IS_PRIVATE ; UNKNOWN . Definition at line 118 of f",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:20063,Integrability,depend,dependences,20063,"at line 321 of file TClingUtils.h. Enumeration Type Documentation. ◆ DataMemberInfo__ValidArrayIndex_error_code. enum ROOT::TMetaUtils::DataMemberInfo__ValidArrayIndex_error_code. EnumeratorVALID ; NOT_INT ; NOT_DEF ; IS_PRIVATE ; UNKNOWN . Definition at line 118 of file TClingUtils.h. ◆ EIOCtorCategory. enum class ROOT::TMetaUtils::EIOCtorCategory : short. strong . EnumeratorkAbsent ; kDefault ; kIOPtrType ; kIORefType . Definition at line 359 of file TClingUtils.h. Function Documentation. ◆ AddDefaultParameters(). clang::QualType ROOT::TMetaUtils::AddDefaultParameters ; (; clang::QualType ; instanceType, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt . ). Add any unspecified template parameters to the class template instance, mentioned anywhere in the type. ; Note: this does not strip any typedef but could be merged with cling::utils::Transform::GetPartiallyDesugaredType if we can safely replace TClassEdit::IsStd with a test on the declaring scope and if we can resolve the fact that the added parameter do not take into account possible use/dependences on Double32_t and if we decide that adding the default is the right long term solution or not. Whether it is or not depend on the I/O on whether the default template argument might change or not and whether they (should) affect the on disk layout (for STL containers, we do know they do not). ; Definition at line 2852 of file TClingUtils.cxx. ◆ BeginsWith(). bool ROOT::TMetaUtils::BeginsWith ; (; const std::string & ; theString, . const std::string & ; theSubstring . ). Definition at line 5088 of file TClingUtils.cxx. ◆ CheckConstructor(). ROOT::TMetaUtils::EIOCtorCategory ROOT::TMetaUtils::CheckConstructor ; (; const clang::CXXRecordDecl * ; cl, . const RConstructorType & ; ioctortype, . const cling::Interpreter & ; interp . ). Check if class has constructor of provided type - either default or with single argument. ; Definition at line 1079 of file TClingUtils.cxx. ◆ CheckDefaultCons",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:20191,Integrability,depend,depend,20191,"ategory. enum class ROOT::TMetaUtils::EIOCtorCategory : short. strong . EnumeratorkAbsent ; kDefault ; kIOPtrType ; kIORefType . Definition at line 359 of file TClingUtils.h. Function Documentation. ◆ AddDefaultParameters(). clang::QualType ROOT::TMetaUtils::AddDefaultParameters ; (; clang::QualType ; instanceType, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt . ). Add any unspecified template parameters to the class template instance, mentioned anywhere in the type. ; Note: this does not strip any typedef but could be merged with cling::utils::Transform::GetPartiallyDesugaredType if we can safely replace TClassEdit::IsStd with a test on the declaring scope and if we can resolve the fact that the added parameter do not take into account possible use/dependences on Double32_t and if we decide that adding the default is the right long term solution or not. Whether it is or not depend on the I/O on whether the default template argument might change or not and whether they (should) affect the on disk layout (for STL containers, we do know they do not). ; Definition at line 2852 of file TClingUtils.cxx. ◆ BeginsWith(). bool ROOT::TMetaUtils::BeginsWith ; (; const std::string & ; theString, . const std::string & ; theSubstring . ). Definition at line 5088 of file TClingUtils.cxx. ◆ CheckConstructor(). ROOT::TMetaUtils::EIOCtorCategory ROOT::TMetaUtils::CheckConstructor ; (; const clang::CXXRecordDecl * ; cl, . const RConstructorType & ; ioctortype, . const cling::Interpreter & ; interp . ). Check if class has constructor of provided type - either default or with single argument. ; Definition at line 1079 of file TClingUtils.cxx. ◆ CheckDefaultConstructor(). bool ROOT::TMetaUtils::CheckDefaultConstructor ; (; const clang::CXXRecordDecl * ; cl, . const cling::Interpreter & ; interp . ). Checks if default constructor exists and accessible. ; Definition at line 999 of file TClingUtils.cxx. ◆ CheckIOConstructor(). ROOT::TMetaUtils::EIOCtorCat",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:24346,Integrability,rout,routine,24346,"Utils::DemangleNameForDlsym ; (; const std::string & ; name). inlinestatic . Definition at line 574 of file TClingUtils.h. ◆ ElementStreamer(). int ROOT::TMetaUtils::ElementStreamer ; (; std::ostream & ; finalString, . const clang::NamedDecl & ; forcontext, . const clang::QualType & ; qti, . const char * ; t, . int ; rwmode, . const cling::Interpreter & ; interp, . const char * ; tcl = nullptr . ). Definition at line 821 of file TClingUtils.cxx. ◆ EndsWith(). bool ROOT::TMetaUtils::EndsWith ; (; const std::string & ; theString, . const std::string & ; theSubstring . ). Definition at line 5077 of file TClingUtils.cxx. ◆ Error(). void ROOT::TMetaUtils::Error ; (; const char * ; location, . const char * ; fmt, .  ; ... . ). inline . Definition at line 817 of file TClingUtils.h. ◆ ExtractAttrIntPropertyFromName(). bool ROOT::TMetaUtils::ExtractAttrIntPropertyFromName ; (; const clang::Decl & ; decl, . const std::string & ; propName, . int & ; propValue . ). This routine counts on the ""propName<separator>propValue"" format. ; Definition at line 1672 of file TClingUtils.cxx. ◆ ExtractAttrPropertyFromName(). bool ROOT::TMetaUtils::ExtractAttrPropertyFromName ; (; const clang::Decl & ; decl, . const std::string & ; propName, . std::string & ; propValue . ). This routine counts on the ""propName<separator>propValue"" format. ; Definition at line 1649 of file TClingUtils.cxx. ◆ extractAttrString(). int ROOT::TMetaUtils::extractAttrString ; (; clang::Attr * ; attribute, . std::string & ; attrString . ). Extract attr string. ; Definition at line 1608 of file TClingUtils.cxx. ◆ ExtractCtxtEnclosingNameSpaces(). void ROOT::TMetaUtils::ExtractCtxtEnclosingNameSpaces ; (; const clang::DeclContext & ; ctxt, . std::list< std::pair< std::string, bool > > & ; enclosingNamespaces . ). Extract enclosing namespaces recursively. ; Definition at line 4930 of file TClingUtils.cxx. ◆ ExtractEnclosingNameSpaces(). void ROOT::TMetaUtils::ExtractEnclosingNameSpaces ; (; const clang::Decl & ; decl, ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:24647,Integrability,rout,routine,24647,"ar * ; t, . int ; rwmode, . const cling::Interpreter & ; interp, . const char * ; tcl = nullptr . ). Definition at line 821 of file TClingUtils.cxx. ◆ EndsWith(). bool ROOT::TMetaUtils::EndsWith ; (; const std::string & ; theString, . const std::string & ; theSubstring . ). Definition at line 5077 of file TClingUtils.cxx. ◆ Error(). void ROOT::TMetaUtils::Error ; (; const char * ; location, . const char * ; fmt, .  ; ... . ). inline . Definition at line 817 of file TClingUtils.h. ◆ ExtractAttrIntPropertyFromName(). bool ROOT::TMetaUtils::ExtractAttrIntPropertyFromName ; (; const clang::Decl & ; decl, . const std::string & ; propName, . int & ; propValue . ). This routine counts on the ""propName<separator>propValue"" format. ; Definition at line 1672 of file TClingUtils.cxx. ◆ ExtractAttrPropertyFromName(). bool ROOT::TMetaUtils::ExtractAttrPropertyFromName ; (; const clang::Decl & ; decl, . const std::string & ; propName, . std::string & ; propValue . ). This routine counts on the ""propName<separator>propValue"" format. ; Definition at line 1649 of file TClingUtils.cxx. ◆ extractAttrString(). int ROOT::TMetaUtils::extractAttrString ; (; clang::Attr * ; attribute, . std::string & ; attrString . ). Extract attr string. ; Definition at line 1608 of file TClingUtils.cxx. ◆ ExtractCtxtEnclosingNameSpaces(). void ROOT::TMetaUtils::ExtractCtxtEnclosingNameSpaces ; (; const clang::DeclContext & ; ctxt, . std::list< std::pair< std::string, bool > > & ; enclosingNamespaces . ). Extract enclosing namespaces recursively. ; Definition at line 4930 of file TClingUtils.cxx. ◆ ExtractEnclosingNameSpaces(). void ROOT::TMetaUtils::ExtractEnclosingNameSpaces ; (; const clang::Decl & ; decl, . std::list< std::pair< std::string, bool > > & ; enclosingNamespaces . ). Extract the immediately outer namespace and then launch the recursion. ; Definition at line 4910 of file TClingUtils.cxx. ◆ ExtractEnclosingScopes(). const clang::RecordDecl * ROOT::TMetaUtils::ExtractEnclosingScopes ; (; cons",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:26700,Integrability,interface,interface,26700,"dDecl * ROOT::TMetaUtils::ExtractEnclosingScopes ; (; const clang::Decl & ; decl, . std::list< std::pair< std::string, unsigned int > > & ; enclosingSc . ). Extract the names and types of containing scopes. ; Stop if a class is met and return its pointer. ; Definition at line 4957 of file TClingUtils.cxx. ◆ extractPropertyNameVal(). int ROOT::TMetaUtils::extractPropertyNameVal ; (; clang::Attr * ; attribute, . std::string & ; attrName, . std::string & ; attrValue . ). Definition at line 1638 of file TClingUtils.cxx. ◆ extractPropertyNameValFromString(). int ROOT::TMetaUtils::extractPropertyNameValFromString ; (; const std::string ; attributeStr, . std::string & ; attrName, . std::string & ; attrValue . ). Definition at line 1621 of file TClingUtils.cxx. ◆ ExtractTemplateNameFromQualType(). clang::TemplateName ROOT::TMetaUtils::ExtractTemplateNameFromQualType ; (; const clang::QualType & ; qt). These manipulations are necessary because a template specialisation type does not inherit from a record type (there is an asymmetry between the decls and the types in the clang interface). ; We may need therefore to step into the ""Decl dimension"" to then get back to the ""type dimension"". ; Definition at line 3534 of file TClingUtils.cxx. ◆ Fatal(). void ROOT::TMetaUtils::Fatal ; (; const char * ; location, . const char * ; fmt, .  ; ... . ). inline . Definition at line 857 of file TClingUtils.h. ◆ foreachHeaderInModule(). void ROOT::TMetaUtils::foreachHeaderInModule ; (; const clang::Module & ; module, . const std::function< void(const clang::Module::Header &)> & ; closure, . bool ; includeDirectlyUsedModules = true . ). Calls the given lambda on every header in the given module. ; includeDirectlyUsedModules designates if the foreach should also loop over the headers in all modules that are directly used via a use declaration in the modulemap. ; Definition at line 2628 of file TClingUtils.cxx. ◆ GetAnnotatedRedeclarable() [1/3]. const clang::TagDecl * ROOT::TMetaUtils::GetAnnot",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:33538,Integrability,rout,routine,33538,"ion at line 4060 of file TClingUtils.cxx. ◆ GetNameWithinNamespace(). bool ROOT::TMetaUtils::GetNameWithinNamespace ; (; std::string & ; fullname, . std::string & ; clsname, . std::string & ; nsname, . clang::CXXRecordDecl const * ; cl . ). Return true if one of the class' enclosing scope is a namespace and set fullname to the fully qualified name, clsname to the name within a namespace and nsname to the namespace fully qualified name. ; Definition at line 2157 of file TClingUtils.cxx. ◆ GetNormalizedName() [1/2]. void ROOT::TMetaUtils::GetNormalizedName ; (; std::string & ; norm_name, . const clang::QualType & ; type, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt . ). Return the type name normalized for ROOT, keeping only the ROOT opaque typedef (Double32_t, etc.) and adding default template argument for all types except the STL collections where we remove the default template argument if any. ; This routine might actually belong in the interpreter because cache the clang::Type might be intepreter specific. ; Definition at line 4003 of file TClingUtils.cxx. ◆ GetNormalizedName() [2/2]. void ROOT::TMetaUtils::GetNormalizedName ; (; std::string & ; norm_name, . const clang::TypeDecl * ; typeDecl, . const cling::Interpreter & ; interpreter . ). Definition at line 4043 of file TClingUtils.cxx. ◆ GetNormalizedType(). clang::QualType ROOT::TMetaUtils::GetNormalizedType ; (; const clang::QualType & ; type, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt . ). Return the type normalized for ROOT, keeping only the ROOT opaque typedef (Double32_t, etc.) and adding default template argument for all types except those explicitly requested to be drop by the user. ; Default template for STL collections are not yet removed by this routine. ; Definition at line 3977 of file TClingUtils.cxx. ◆ GetNumberOfErrors(). unsigned int & ROOT::TMetaUtils::GetNumberOfErrors ; (; ). inline . Definition at line 756 of file TCli",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:34402,Integrability,rout,routine,34402,"typedef (Double32_t, etc.) and adding default template argument for all types except the STL collections where we remove the default template argument if any. ; This routine might actually belong in the interpreter because cache the clang::Type might be intepreter specific. ; Definition at line 4003 of file TClingUtils.cxx. ◆ GetNormalizedName() [2/2]. void ROOT::TMetaUtils::GetNormalizedName ; (; std::string & ; norm_name, . const clang::TypeDecl * ; typeDecl, . const cling::Interpreter & ; interpreter . ). Definition at line 4043 of file TClingUtils.cxx. ◆ GetNormalizedType(). clang::QualType ROOT::TMetaUtils::GetNormalizedType ; (; const clang::QualType & ; type, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt . ). Return the type normalized for ROOT, keeping only the ROOT opaque typedef (Double32_t, etc.) and adding default template argument for all types except those explicitly requested to be drop by the user. ; Default template for STL collections are not yet removed by this routine. ; Definition at line 3977 of file TClingUtils.cxx. ◆ GetNumberOfErrors(). unsigned int & ROOT::TMetaUtils::GetNumberOfErrors ; (; ). inline . Definition at line 756 of file TClingUtils.h. ◆ GetPathSeparator(). const std::string & ROOT::TMetaUtils::GetPathSeparator ; (; ). Return the separator suitable for this platform. ; Definition at line 5070 of file TClingUtils.cxx. ◆ GetQualifiedName() [1/10]. std::string ROOT::TMetaUtils::GetQualifiedName ; (; const AnnotatedRecordDecl & ; annotated). Definition at line 1420 of file TClingUtils.cxx. ◆ GetQualifiedName() [2/10]. std::string ROOT::TMetaUtils::GetQualifiedName ; (; const clang::NamedDecl & ; nd). Definition at line 1386 of file TClingUtils.cxx. ◆ GetQualifiedName() [3/10]. std::string ROOT::TMetaUtils::GetQualifiedName ; (; const clang::QualType & ; type, . const clang::NamedDecl & ; forcontext . ). Definition at line 1325 of file TClingUtils.cxx. ◆ GetQualifiedName() [4/10]. std::string ROOT::",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:37409,Integrability,rout,routine,37409,"ifiedName functions leverage this one except the one for namespaces. ; Definition at line 1319 of file TClingUtils.cxx. ◆ GetQualifiedName() [9/10]. void ROOT::TMetaUtils::GetQualifiedName ; (; std::string & ; qual_name, . const clang::RecordDecl & ; recordDecl . ). Definition at line 1395 of file TClingUtils.cxx. ◆ GetQualifiedName() [10/10]. void ROOT::TMetaUtils::GetQualifiedName ; (; std::string & ; qual_name, . const clang::Type & ; type, . const clang::NamedDecl & ; forcontext . ). Definition at line 1337 of file TClingUtils.cxx. ◆ GetRealPath(). std::string ROOT::TMetaUtils::GetRealPath ; (; const std::string & ; path). Returnsthe resolved normalized absolute path possibly resolving symlinks. ; Definition at line 72 of file TClingUtils.cxx. ◆ GetTrivialIntegralReturnValue(). std::pair< bool, int > ROOT::TMetaUtils::GetTrivialIntegralReturnValue ; (; const clang::FunctionDecl * ; funcCV, . const cling::Interpreter & ; interp . ). If the function contains 'just': return SomeValue; this routine will extract this value and return it. ; The first element is set to true we have the body of the function and it is indeed a trivial function with just a return of a value. The second element contains the value (or -1 is case of failure) ; Definition at line 2559 of file TClingUtils.cxx. ◆ GetTypeForIO(). clang::QualType ROOT::TMetaUtils::GetTypeForIO ; (; const clang::QualType & ; templateInstanceType, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt, . TClassEdit::EModType ; mode = TClassEdit::kNone . ). Definition at line 4108 of file TClingUtils.cxx. ◆ GetUnderlyingRecordDecl(). clang::RecordDecl * ROOT::TMetaUtils::GetUnderlyingRecordDecl ; (; clang::QualType ; type). Definition at line 2788 of file TClingUtils.cxx. ◆ GetUnderlyingType(). const clang::Type * ROOT::TMetaUtils::GetUnderlyingType ; (; clang::QualType ; type). Return the base/underlying type of a chain of array or pointers type. ; Does not yet support the array and pointer",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:41917,Integrability,depend,depends,41917,"dDecl const * ; cl, . std::string & ; arg, . const RConstructorTypes & ; ctorTypes, . const cling::Interpreter & ; interp . ). return true if we can find an constructor calleable without any arguments or with one the IOCtor special types. ; Definition at line 1135 of file TClingUtils.cxx. ◆ HasNewMerge(). bool ROOT::TMetaUtils::HasNewMerge ; (; clang::CXXRecordDecl const * ; cl, . const cling::Interpreter & ; interp . ). Return true if the class has a method Merge(TCollection*,TFileMergeInfo*) ; Definition at line 1233 of file TClingUtils.cxx. ◆ HasOldMerge(). bool ROOT::TMetaUtils::HasOldMerge ; (; clang::CXXRecordDecl const * ; cl, . const cling::Interpreter & ; interp . ). Return true if the class has a method Merge(TCollection*) ; Definition at line 1247 of file TClingUtils.cxx. ◆ hasOpaqueTypedef() [1/2]. bool ROOT::TMetaUtils::hasOpaqueTypedef ; (; clang::QualType ; instanceType, . const TNormalizedCtxt & ; normCtxt . ). Return true if the type is a Double32_t or Float16_t or is a instance template that depends on Double32_t or Float16_t. ; Definition at line 1541 of file TClingUtils.cxx. ◆ hasOpaqueTypedef() [2/2]. bool ROOT::TMetaUtils::hasOpaqueTypedef ; (; const AnnotatedRecordDecl & ; cl, . const cling::Interpreter & ; interp, . const TNormalizedCtxt & ; normCtxt . ). Return true if any of the argument is or contains a double32. ; Definition at line 1588 of file TClingUtils.cxx. ◆ HasResetAfterMerge(). bool ROOT::TMetaUtils::HasResetAfterMerge ; (; clang::CXXRecordDecl const * ; cl, . const cling::Interpreter & ; interp . ). Return true if the class has a method ResetAfterMerge(TFileMergeInfo *) ; Definition at line 1262 of file TClingUtils.cxx. ◆ Info(). void ROOT::TMetaUtils::Info ; (; const char * ; location, . const char * ; fmt, .  ; ... . ). inline . Definition at line 837 of file TClingUtils.h. ◆ IsBase() [1/2]. bool ROOT::TMetaUtils::IsBase ; (; const clang::CXXRecordDecl * ; cl, . const clang::CXXRecordDecl * ; base, . const clang::CXXRecordDecl ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:52760,Integrability,interface,interface,52760," AnnotatedRecordDecl & ; cl, . const clang::CXXRecordDecl * ; decl, . const cling::Interpreter & ; interp, . const TNormalizedCtxt & ; normCtxt, . const RConstructorTypes & ; ctorTypes, . bool & ; needCollectionProxy . ). FIXME: a function of 450+ lines! ; Definition at line 1694 of file TClingUtils.cxx. ◆ WriteNamespaceHeader() [1/2]. int ROOT::TMetaUtils::WriteNamespaceHeader ; (; std::ostream & ; out, . const clang::DeclContext * ; ctxt . ). Write all the necessary opening part of the namespace and return the number of closing brackets needed For example for Space1::Space2 we write: namespace Space1 { namespace Space2 { and return 2. ; Definition at line 2206 of file TClingUtils.cxx. ◆ WriteNamespaceHeader() [2/2]. int ROOT::TMetaUtils::WriteNamespaceHeader ; (; std::ostream & ; out, . const clang::RecordDecl * ; cl . ). Definition at line 2230 of file TClingUtils.cxx. ◆ WritePointersSTL(). void ROOT::TMetaUtils::WritePointersSTL ; (; const AnnotatedRecordDecl & ; cl, . const cling::Interpreter & ; interp, . const TNormalizedCtxt & ; normCtxt . ). Write interface function for STL members. ; Definition at line 2459 of file TClingUtils.cxx. Variable Documentation. ◆ kError. const int ROOT::TMetaUtils::kError = 2000. Definition at line 129 of file TClingUtils.h. ◆ kFatal. const int ROOT::TMetaUtils::kFatal = 4000. Definition at line 131 of file TClingUtils.h. ◆ kInfo. const int ROOT::TMetaUtils::kInfo = 0. Definition at line 126 of file TClingUtils.h. ◆ kMaxLen. const int ROOT::TMetaUtils::kMaxLen = 1024. Definition at line 132 of file TClingUtils.h. ◆ kNote. const int ROOT::TMetaUtils::kNote = 500. Definition at line 127 of file TClingUtils.h. ◆ kSysError. const int ROOT::TMetaUtils::kSysError = 3000. Definition at line 130 of file TClingUtils.h. ◆ kWarning. const int ROOT::TMetaUtils::kWarning = 1000. Definition at line 128 of file TClingUtils.h. ROOTTMetaUtils. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:4395,Modifiability,inherit,inherit,4395,"d::string &propName, std::string &propValue);  This routine counts on the ""propName<separator>propValue"" format. ;  ; int extractAttrString (clang::Attr *attribute, std::string &attrString);  Extract attr string. ;  ; void ExtractCtxtEnclosingNameSpaces (const clang::DeclContext &, std::list< std::pair< std::string, bool > > &);  Extract enclosing namespaces recursively. ;  ; void ExtractEnclosingNameSpaces (const clang::Decl &, std::list< std::pair< std::string, bool > > &);  Extract the immediately outer namespace and then launch the recursion. ;  ; const clang::RecordDecl * ExtractEnclosingScopes (const clang::Decl &decl, std::list< std::pair< std::string, unsigned int > > &enclosingSc);  Extract the names and types of containing scopes. ;  ; int extractPropertyNameVal (clang::Attr *attribute, std::string &attrName, std::string &attrValue);  ; int extractPropertyNameValFromString (const std::string attributeStr, std::string &attrName, std::string &attrValue);  ; clang::TemplateName ExtractTemplateNameFromQualType (const clang::QualType &qt);  These manipulations are necessary because a template specialisation type does not inherit from a record type (there is an asymmetry between the decls and the types in the clang interface). ;  ; void Fatal (const char *location, const char *fmt,...);  ; void foreachHeaderInModule (const clang::Module &module, const std::function< void(const clang::Module::Header &)> &closure, bool includeDirectlyUsedModules=true);  Calls the given lambda on every header in the given module. ;  ; const clang::TagDecl * GetAnnotatedRedeclarable (const clang::TagDecl *TND);  ; const clang::TypedefNameDecl * GetAnnotatedRedeclarable (const clang::TypedefNameDecl *TND);  ; template<typename T > ; const T * GetAnnotatedRedeclarable (const T *Redecl);  ; llvm::StringRef GetClassComment (const clang::CXXRecordDecl &decl, clang::SourceLocation *loc, const cling::Interpreter &interpreter);  Return the class comment after the ClassDef: class MyClass { .",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:5852,Modifiability,variab,variable,5852,"ader in the given module. ;  ; const clang::TagDecl * GetAnnotatedRedeclarable (const clang::TagDecl *TND);  ; const clang::TypedefNameDecl * GetAnnotatedRedeclarable (const clang::TypedefNameDecl *TND);  ; template<typename T > ; const T * GetAnnotatedRedeclarable (const T *Redecl);  ; llvm::StringRef GetClassComment (const clang::CXXRecordDecl &decl, clang::SourceLocation *loc, const cling::Interpreter &interpreter);  Return the class comment after the ClassDef: class MyClass { ... ClassDef(MyClass, 1) // class comment. ;  ; int GetClassVersion (const clang::RecordDecl *cl, const cling::Interpreter &interp);  Return the version number of the class or -1 if the function Class_Version does not exist. ;  ; llvm::StringRef GetComment (const clang::Decl &decl, clang::SourceLocation *loc=nullptr);  Returns the comment (// striped away), annotating declaration in a meaningful for ROOT IO way. ;  ; void GetCppName (std::string &output, const char *input);  Return (in the argument 'output') a mangled version of the C++ symbol/type (pass as 'input') that can be used in C++ as a variable name. ;  ; int & GetErrorIgnoreLevel ();  ; std::string GetFileName (const clang::Decl &decl, const cling::Interpreter &interp);  Return the header file to be included to declare the Decl. ;  ; void GetFullyQualifiedTypeName (std::string &name, const clang::QualType &type, const clang::ASTContext &);  ; void GetFullyQualifiedTypeName (std::string &name, const clang::QualType &type, const cling::Interpreter &interpreter);  ; const clang::FunctionDecl * GetFuncWithProto (const clang::Decl *cinfo, const char *method, const char *proto, const cling::Interpreter &gInterp, bool diagnose);  ; long GetLineNumber (clang::Decl const *);  It looks like the template specialization decl actually contains less information on the location of the code than the decl (in case where there is forward declaration, that is what the specialization points to. ;  ; std::string GetModuleFileName (const char *moduleNam",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:26605,Modifiability,inherit,inherit,26605,"dDecl * ROOT::TMetaUtils::ExtractEnclosingScopes ; (; const clang::Decl & ; decl, . std::list< std::pair< std::string, unsigned int > > & ; enclosingSc . ). Extract the names and types of containing scopes. ; Stop if a class is met and return its pointer. ; Definition at line 4957 of file TClingUtils.cxx. ◆ extractPropertyNameVal(). int ROOT::TMetaUtils::extractPropertyNameVal ; (; clang::Attr * ; attribute, . std::string & ; attrName, . std::string & ; attrValue . ). Definition at line 1638 of file TClingUtils.cxx. ◆ extractPropertyNameValFromString(). int ROOT::TMetaUtils::extractPropertyNameValFromString ; (; const std::string ; attributeStr, . std::string & ; attrName, . std::string & ; attrValue . ). Definition at line 1621 of file TClingUtils.cxx. ◆ ExtractTemplateNameFromQualType(). clang::TemplateName ROOT::TMetaUtils::ExtractTemplateNameFromQualType ; (; const clang::QualType & ; qt). These manipulations are necessary because a template specialisation type does not inherit from a record type (there is an asymmetry between the decls and the types in the clang interface). ; We may need therefore to step into the ""Decl dimension"" to then get back to the ""type dimension"". ; Definition at line 3534 of file TClingUtils.cxx. ◆ Fatal(). void ROOT::TMetaUtils::Fatal ; (; const char * ; location, . const char * ; fmt, .  ; ... . ). inline . Definition at line 857 of file TClingUtils.h. ◆ foreachHeaderInModule(). void ROOT::TMetaUtils::foreachHeaderInModule ; (; const clang::Module & ; module, . const std::function< void(const clang::Module::Header &)> & ; closure, . bool ; includeDirectlyUsedModules = true . ). Calls the given lambda on every header in the given module. ; includeDirectlyUsedModules designates if the foreach should also loop over the headers in all modules that are directly used via a use declaration in the modulemap. ; Definition at line 2628 of file TClingUtils.cxx. ◆ GetAnnotatedRedeclarable() [1/3]. const clang::TagDecl * ROOT::TMetaUtils::GetAnnot",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:29733,Modifiability,variab,variable,29733," exist. ; Definition at line 2532 of file TClingUtils.cxx. ◆ GetComment(). llvm::StringRef ROOT::TMetaUtils::GetComment ; (; const clang::Decl & ; decl, . clang::SourceLocation * ; loc = nullptr . ). Returns the comment (// striped away), annotating declaration in a meaningful for ROOT IO way. ; Takes optional out parameter clang::SourceLocation returning the source location of the comment.; CXXMethodDecls, FieldDecls and TagDecls are annotated. CXXMethodDecls declarations and FieldDecls are annotated as follows: Eg. void f(); // comment1 int member; // comment2 Inline definitions of CXXMethodDecls after the closing } ; . Eg: void f() {...} // comment3 TagDecls are annotated in the end of the ClassDef macro. Eg. class MyClass { ... ClassDef(MyClass, 1) // comment4 ; Definition at line 4151 of file TClingUtils.cxx. ◆ GetCppName(). void ROOT::TMetaUtils::GetCppName ; (; std::string & ; output, . const char * ; input . ). Return (in the argument 'output') a mangled version of the C++ symbol/type (pass as 'input') that can be used in C++ as a variable name. ; Definition at line 3229 of file TClingUtils.cxx. ◆ GetErrorIgnoreLevel(). int & ROOT::TMetaUtils::GetErrorIgnoreLevel ; (; ). inline . Definition at line 772 of file TClingUtils.h. ◆ GetFileName(). std::string ROOT::TMetaUtils::GetFileName ; (; const clang::Decl & ; decl, . const cling::Interpreter & ; interp . ). Return the header file to be included to declare the Decl. ; Definition at line 3289 of file TClingUtils.cxx. ◆ GetFullyQualifiedTypeName() [1/2]. void ROOT::TMetaUtils::GetFullyQualifiedTypeName ; (; std::string & ; name, . const clang::QualType & ; type, . const clang::ASTContext & ; astContext . ). Definition at line 3444 of file TClingUtils.cxx. ◆ GetFullyQualifiedTypeName() [2/2]. void ROOT::TMetaUtils::GetFullyQualifiedTypeName ; (; std::string & ; name, . const clang::QualType & ; type, . const cling::Interpreter & ; interpreter . ). Definition at line 3456 of file TClingUtils.cxx. ◆ GetFuncWithProt",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:33595,Performance,cache,cache,33595,"ion at line 4060 of file TClingUtils.cxx. ◆ GetNameWithinNamespace(). bool ROOT::TMetaUtils::GetNameWithinNamespace ; (; std::string & ; fullname, . std::string & ; clsname, . std::string & ; nsname, . clang::CXXRecordDecl const * ; cl . ). Return true if one of the class' enclosing scope is a namespace and set fullname to the fully qualified name, clsname to the name within a namespace and nsname to the namespace fully qualified name. ; Definition at line 2157 of file TClingUtils.cxx. ◆ GetNormalizedName() [1/2]. void ROOT::TMetaUtils::GetNormalizedName ; (; std::string & ; norm_name, . const clang::QualType & ; type, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt . ). Return the type name normalized for ROOT, keeping only the ROOT opaque typedef (Double32_t, etc.) and adding default template argument for all types except the STL collections where we remove the default template argument if any. ; This routine might actually belong in the interpreter because cache the clang::Type might be intepreter specific. ; Definition at line 4003 of file TClingUtils.cxx. ◆ GetNormalizedName() [2/2]. void ROOT::TMetaUtils::GetNormalizedName ; (; std::string & ; norm_name, . const clang::TypeDecl * ; typeDecl, . const cling::Interpreter & ; interpreter . ). Definition at line 4043 of file TClingUtils.cxx. ◆ GetNormalizedType(). clang::QualType ROOT::TMetaUtils::GetNormalizedType ; (; const clang::QualType & ; type, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt . ). Return the type normalized for ROOT, keeping only the ROOT opaque typedef (Double32_t, etc.) and adding default template argument for all types except those explicitly requested to be drop by the user. ; Default template for STL collections are not yet removed by this routine. ; Definition at line 3977 of file TClingUtils.cxx. ◆ GetNumberOfErrors(). unsigned int & ROOT::TMetaUtils::GetNumberOfErrors ; (; ). inline . Definition at line 756 of file TCli",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:19901,Safety,safe,safely,19901,"at line 321 of file TClingUtils.h. Enumeration Type Documentation. ◆ DataMemberInfo__ValidArrayIndex_error_code. enum ROOT::TMetaUtils::DataMemberInfo__ValidArrayIndex_error_code. EnumeratorVALID ; NOT_INT ; NOT_DEF ; IS_PRIVATE ; UNKNOWN . Definition at line 118 of file TClingUtils.h. ◆ EIOCtorCategory. enum class ROOT::TMetaUtils::EIOCtorCategory : short. strong . EnumeratorkAbsent ; kDefault ; kIOPtrType ; kIORefType . Definition at line 359 of file TClingUtils.h. Function Documentation. ◆ AddDefaultParameters(). clang::QualType ROOT::TMetaUtils::AddDefaultParameters ; (; clang::QualType ; instanceType, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt . ). Add any unspecified template parameters to the class template instance, mentioned anywhere in the type. ; Note: this does not strip any typedef but could be merged with cling::utils::Transform::GetPartiallyDesugaredType if we can safely replace TClassEdit::IsStd with a test on the declaring scope and if we can resolve the fact that the added parameter do not take into account possible use/dependences on Double32_t and if we decide that adding the default is the right long term solution or not. Whether it is or not depend on the I/O on whether the default template argument might change or not and whether they (should) affect the on disk layout (for STL containers, we do know they do not). ; Definition at line 2852 of file TClingUtils.cxx. ◆ BeginsWith(). bool ROOT::TMetaUtils::BeginsWith ; (; const std::string & ; theString, . const std::string & ; theSubstring . ). Definition at line 5088 of file TClingUtils.cxx. ◆ CheckConstructor(). ROOT::TMetaUtils::EIOCtorCategory ROOT::TMetaUtils::CheckConstructor ; (; const clang::CXXRecordDecl * ; cl, . const RConstructorType & ; ioctortype, . const cling::Interpreter & ; interp . ). Check if class has constructor of provided type - either default or with single argument. ; Definition at line 1079 of file TClingUtils.cxx. ◆ CheckDefaultCons",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:1650,Security,access,accessible,1650,"TNormalizedCtxt &normCtxt, std::ostream &dictStream, bool isAutoStreamer);  ; typedef std::list< RConstructorType > RConstructorTypes;  . Enumerations; enum  DataMemberInfo__ValidArrayIndex_error_code { ;   VALID; , NOT_INT; , NOT_DEF; , IS_PRIVATE; , ;   UNKNOWN. };  ; enum class  EIOCtorCategory : short { kAbsent; , kDefault; , kIOPtrType; , kIORefType; };  . Functions; clang::QualType AddDefaultParameters (clang::QualType instanceType, const cling::Interpreter &interpret, const TNormalizedCtxt &normCtxt);  Add any unspecified template parameters to the class template instance, mentioned anywhere in the type. ;  ; bool BeginsWith (const std::string &theString, const std::string &theSubstring);  ; EIOCtorCategory CheckConstructor (const clang::CXXRecordDecl *, const RConstructorType &, const cling::Interpreter &interp);  Check if class has constructor of provided type - either default or with single argument. ;  ; bool CheckDefaultConstructor (const clang::CXXRecordDecl *, const cling::Interpreter &interp);  Checks if default constructor exists and accessible. ;  ; EIOCtorCategory CheckIOConstructor (const clang::CXXRecordDecl *, const char *, const clang::CXXRecordDecl *, const cling::Interpreter &interp);  Checks IO constructor - must be public and with specified argument. ;  ; bool CheckPublicFuncWithProto (clang::CXXRecordDecl const *, char const *, char const *, const cling::Interpreter &, bool diagnose);  Return true, if the function (defined by the name and prototype) exists and is public. ;  ; const clang::FunctionDecl * ClassInfo__HasMethod (const clang::DeclContext *cl, char const *, const cling::Interpreter &interp);  ; llvm::StringRef DataMemberInfo__ValidArrayIndex (const cling::Interpreter &interp, const clang::DeclaratorDecl &m, int *errnum=nullptr, llvm::StringRef *errstr=nullptr);  ValidArrayIndex return a static string (so use it or copy it immediatly, do not call GrabIndex twice in the same expression) containing the size of the array data member",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:21154,Security,access,accessible,21154,"ight long term solution or not. Whether it is or not depend on the I/O on whether the default template argument might change or not and whether they (should) affect the on disk layout (for STL containers, we do know they do not). ; Definition at line 2852 of file TClingUtils.cxx. ◆ BeginsWith(). bool ROOT::TMetaUtils::BeginsWith ; (; const std::string & ; theString, . const std::string & ; theSubstring . ). Definition at line 5088 of file TClingUtils.cxx. ◆ CheckConstructor(). ROOT::TMetaUtils::EIOCtorCategory ROOT::TMetaUtils::CheckConstructor ; (; const clang::CXXRecordDecl * ; cl, . const RConstructorType & ; ioctortype, . const cling::Interpreter & ; interp . ). Check if class has constructor of provided type - either default or with single argument. ; Definition at line 1079 of file TClingUtils.cxx. ◆ CheckDefaultConstructor(). bool ROOT::TMetaUtils::CheckDefaultConstructor ; (; const clang::CXXRecordDecl * ; cl, . const cling::Interpreter & ; interp . ). Checks if default constructor exists and accessible. ; Definition at line 999 of file TClingUtils.cxx. ◆ CheckIOConstructor(). ROOT::TMetaUtils::EIOCtorCategory ROOT::TMetaUtils::CheckIOConstructor ; (; const clang::CXXRecordDecl * ; cl, . const char * ; typeOfArg, . const clang::CXXRecordDecl * ; expectedArgType, . const cling::Interpreter & ; interp . ). Checks IO constructor - must be public and with specified argument. ; Definition at line 1019 of file TClingUtils.cxx. ◆ CheckPublicFuncWithProto(). bool ROOT::TMetaUtils::CheckPublicFuncWithProto ; (; clang::CXXRecordDecl const * ; cl, . char const * ; methodname, . char const * ; proto, . const cling::Interpreter & ; interp, . bool ; diagnose . ). Return true, if the function (defined by the name and prototype) exists and is public. ; Definition at line 1202 of file TClingUtils.cxx. ◆ ClassInfo__HasMethod(). const clang::FunctionDecl * ROOT::TMetaUtils::ClassInfo__HasMethod ; (; const clang::DeclContext * ; cl, . char const * ; name, . const cling::Interpre",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:19941,Testability,test,test,19941,"at line 321 of file TClingUtils.h. Enumeration Type Documentation. ◆ DataMemberInfo__ValidArrayIndex_error_code. enum ROOT::TMetaUtils::DataMemberInfo__ValidArrayIndex_error_code. EnumeratorVALID ; NOT_INT ; NOT_DEF ; IS_PRIVATE ; UNKNOWN . Definition at line 118 of file TClingUtils.h. ◆ EIOCtorCategory. enum class ROOT::TMetaUtils::EIOCtorCategory : short. strong . EnumeratorkAbsent ; kDefault ; kIOPtrType ; kIORefType . Definition at line 359 of file TClingUtils.h. Function Documentation. ◆ AddDefaultParameters(). clang::QualType ROOT::TMetaUtils::AddDefaultParameters ; (; clang::QualType ; instanceType, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt . ). Add any unspecified template parameters to the class template instance, mentioned anywhere in the type. ; Note: this does not strip any typedef but could be merged with cling::utils::Transform::GetPartiallyDesugaredType if we can safely replace TClassEdit::IsStd with a test on the declaring scope and if we can resolve the fact that the added parameter do not take into account possible use/dependences on Double32_t and if we decide that adding the default is the right long term solution or not. Whether it is or not depend on the I/O on whether the default template argument might change or not and whether they (should) affect the on disk layout (for STL containers, we do know they do not). ; Definition at line 2852 of file TClingUtils.cxx. ◆ BeginsWith(). bool ROOT::TMetaUtils::BeginsWith ; (; const std::string & ; theString, . const std::string & ; theSubstring . ). Definition at line 5088 of file TClingUtils.cxx. ◆ CheckConstructor(). ROOT::TMetaUtils::EIOCtorCategory ROOT::TMetaUtils::CheckConstructor ; (; const clang::CXXRecordDecl * ; cl, . const RConstructorType & ; ioctortype, . const cling::Interpreter & ; interp . ). Check if class has constructor of provided type - either default or with single argument. ; Definition at line 1079 of file TClingUtils.cxx. ◆ CheckDefaultCons",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TMetaUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TreeUtils.html:616,Usability,simpl,simple,616,". ROOT: ROOT::TreeUtils Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::TreeUtils Namespace Reference. Classes; struct  InvalidTupleType;  ; struct  InvalidTupleType< TNtuple >;  ; struct  InvalidTupleType< TNtupleD >;  ; struct  RFriendInfo;  Information about friend trees of a certain TTree or TChain object. More...;  . Functions; template<class DataType , class Tuple > ; Long64_t FillNtupleFromStream (std::istream &inputStream, Tuple &tuple, char delimiter, bool strictMode);  Function to fill tuples (TNtuple/TNtupleD) from a simple ASCII data file. ;  ; template Long64_t FillNtupleFromStream< Double_t, TNtupleD > (std::istream &, TNtupleD &, char, bool);  ; template Long64_t FillNtupleFromStream< Float_t, TNtuple > (std::istream &, TNtuple &, char, bool);  ; bool NextCharacterIsEOL (std::istream &input);  Either '\r' | '\n' or eof of some problem. ;  ; void SkipComment (std::istream &input);  Skips everything from '#' to (including) '\r' or '\n'. ;  ; void SkipEmptyLines (std::istream &input);  Skips empty lines (newline-characters), ws-lines (consisting only of whitespace characters + newline-characters). ;  ; void SkipWSCharacters (std::istream &input);  Skip whitespace characters, but not newline-characters we support ('\r' or '\n'). ;  . Function Documentation. ◆ FillNtupleFromStream(). template<class DataType , class Tuple > . Long64_t ROOT::TreeUtils::FillNtupleFromStream ; (; std::istream & ; inputStream, . Tuple & ; tuple, . char ; delimiter, . bool ; strictMode . ). Function to fill tuples (TNtuple/TNtupleD) from a simple ASCII data file. ; With auto and decltype - we can get rid of DataType parameter :) (or with a simple typedef inside ntuple class). An input file consists of non-empty lines (separated by newline-characters), possibly empty lines, and comments (treated as empty lines). Each non-empty line should contain N numbers - entry for a tuple. Non-strict mode lets yo",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TreeUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TreeUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TreeUtils.html:1635,Usability,simpl,simple,1635,"e ASCII data file. ;  ; template Long64_t FillNtupleFromStream< Double_t, TNtupleD > (std::istream &, TNtupleD &, char, bool);  ; template Long64_t FillNtupleFromStream< Float_t, TNtuple > (std::istream &, TNtuple &, char, bool);  ; bool NextCharacterIsEOL (std::istream &input);  Either '\r' | '\n' or eof of some problem. ;  ; void SkipComment (std::istream &input);  Skips everything from '#' to (including) '\r' or '\n'. ;  ; void SkipEmptyLines (std::istream &input);  Skips empty lines (newline-characters), ws-lines (consisting only of whitespace characters + newline-characters). ;  ; void SkipWSCharacters (std::istream &input);  Skip whitespace characters, but not newline-characters we support ('\r' or '\n'). ;  . Function Documentation. ◆ FillNtupleFromStream(). template<class DataType , class Tuple > . Long64_t ROOT::TreeUtils::FillNtupleFromStream ; (; std::istream & ; inputStream, . Tuple & ; tuple, . char ; delimiter, . bool ; strictMode . ). Function to fill tuples (TNtuple/TNtupleD) from a simple ASCII data file. ; With auto and decltype - we can get rid of DataType parameter :) (or with a simple typedef inside ntuple class). An input file consists of non-empty lines (separated by newline-characters), possibly empty lines, and comments (treated as empty lines). Each non-empty line should contain N numbers - entry for a tuple. Non-strict mode lets you to have newline-characters inside a tuple's row (as it worked in ROOT prior to v5.3xxx). ; Definition at line 80 of file TreeUtils.cxx. ◆ FillNtupleFromStream< Double_t, TNtupleD >(). template Long64_t ROOT::TreeUtils::FillNtupleFromStream< Double_t, TNtupleD > ; (; std::istream & ; , . TNtupleD & ; , . char ; , . bool ;  . ). ◆ FillNtupleFromStream< Float_t, TNtuple >(). template Long64_t ROOT::TreeUtils::FillNtupleFromStream< Float_t, TNtuple > ; (; std::istream & ; , . TNtuple & ; , . char ; , . bool ;  . ). ◆ NextCharacterIsEOL(). bool ROOT::TreeUtils::NextCharacterIsEOL ; (; std::istream & ; input). Either",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TreeUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TreeUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1TreeUtils.html:1737,Usability,simpl,simple,1737,"ream &, TNtupleD &, char, bool);  ; template Long64_t FillNtupleFromStream< Float_t, TNtuple > (std::istream &, TNtuple &, char, bool);  ; bool NextCharacterIsEOL (std::istream &input);  Either '\r' | '\n' or eof of some problem. ;  ; void SkipComment (std::istream &input);  Skips everything from '#' to (including) '\r' or '\n'. ;  ; void SkipEmptyLines (std::istream &input);  Skips empty lines (newline-characters), ws-lines (consisting only of whitespace characters + newline-characters). ;  ; void SkipWSCharacters (std::istream &input);  Skip whitespace characters, but not newline-characters we support ('\r' or '\n'). ;  . Function Documentation. ◆ FillNtupleFromStream(). template<class DataType , class Tuple > . Long64_t ROOT::TreeUtils::FillNtupleFromStream ; (; std::istream & ; inputStream, . Tuple & ; tuple, . char ; delimiter, . bool ; strictMode . ). Function to fill tuples (TNtuple/TNtupleD) from a simple ASCII data file. ; With auto and decltype - we can get rid of DataType parameter :) (or with a simple typedef inside ntuple class). An input file consists of non-empty lines (separated by newline-characters), possibly empty lines, and comments (treated as empty lines). Each non-empty line should contain N numbers - entry for a tuple. Non-strict mode lets you to have newline-characters inside a tuple's row (as it worked in ROOT prior to v5.3xxx). ; Definition at line 80 of file TreeUtils.cxx. ◆ FillNtupleFromStream< Double_t, TNtupleD >(). template Long64_t ROOT::TreeUtils::FillNtupleFromStream< Double_t, TNtupleD > ; (; std::istream & ; , . TNtupleD & ; , . char ; , . bool ;  . ). ◆ FillNtupleFromStream< Float_t, TNtuple >(). template Long64_t ROOT::TreeUtils::FillNtupleFromStream< Float_t, TNtuple > ; (; std::istream & ; , . TNtuple & ; , . char ; , . bool ;  . ). ◆ NextCharacterIsEOL(). bool ROOT::TreeUtils::NextCharacterIsEOL ; (; std::istream & ; input). Either '\r' | '\n' or eof of some problem. ; Definition at line 298 of file TreeUtils.cxx. ◆ SkipComm",MatchSource.WIKI,doc/v632/namespaceROOT_1_1TreeUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TreeUtils.html
https://root.cern/doc/v632/namespaceROOT_1_1VecOps.html:21071,Testability,log,log,21071,"e<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > fmod (const T0 &x, const RVec< T1 > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > fmod (const RVec< T0 > &v, const T1 &y);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > fmod (const RVec< T0 > &v0, const RVec< T1 > &v1);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > remainder (const T0 &x, const RVec< T1 > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > remainder (const RVec< T0 > &v, const T1 &y);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > remainder (const RVec< T0 > &v0, const RVec< T1 > &v1);  ; template<typename T > ; RVec< PromoteType< T > > exp (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > exp2 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > expm1 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > log (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > log10 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > log2 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > log1p (const RVec< T > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > pow (const T0 &x, const RVec< T1 > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > pow (const RVec< T0 > &v, const T1 &y);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > pow (const RVec< T0 > &v0, const RVec< T1 > &v1);  ; template<typename T > ; RVec< PromoteType< T > > sqrt (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > cbrt (const RVec< T > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > hypot (const T0 &x, const RVec< T1 > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > hypot (const RVec< T0 > &v, const T1 &y); ",MatchSource.WIKI,doc/v632/namespaceROOT_1_1VecOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1VecOps.html
https://root.cern/doc/v632/namespaceTMVA.html:2855,Availability,error,error,2855,"sification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  CvSplit;  ; class  CvSplitKFolds;  ; class  CvSplitKFoldsExpr;  ; class  DataInputHandler;  Class that contains all the data information. More...;  ; class  DataLoader;  ; class  DataSet;  Class that contains all the data information. More...;  ; class  DataSetFactory;  Class that contains all the data information. More...;  ; class  DataSetInfo;  Class that contains all the data information. More...;  ; class  DataSetManager;  Class that contains all the data information. More...;  ; class  DecisionTree;  Implementation of a Decision Tree. More...;  ; class  DecisionTreeNode;  ; struct  DeleteFunctor_t;  ; class  DTNodeTrainingInfo;  ; class  Envelope;  Abstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP. More...;  ; class  Event;  ; class  Executor;  Base Executor class. More...;  ; class  ExpectedErrorPruneTool;  A helper class to prune a decision tree using the expected error (C4.5) method. More...;  ; class  Factory;  This is the main MVA steering class. More...;  ; class  FitterBase;  Base class for TMVA fitters. More...;  ; class  GeneticAlgorithm;  Base definition for genetic algorithm. More...;  ; class  GeneticFitter;  Fitter using a Genetic Algorithm. More...;  ; class  GeneticGenes;  Cut optimisation interface class for genetic algorithm. More...;  ; class  GeneticPopulation;  Population definition for genetic algorithm. More...;  ; class  GeneticRange;  Range definition for genetic algorithm. More...;  ; class  GiniIndex;  Implementation of the GiniIndex as separation criterion. More...;  ; class  GiniIndexWithLaplace;  Implementation of the GiniIndex With Laplace correction as separation criterion. More...;  ; class  HuberLossFunction;  Huber Loss Function. More...;  ; class  HuberLossFunctionBDT;  Huber BDT Loss Function. More...;  ; class  HyperParameterOptimisation;  ; class  HyperParameterOptimi",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:4250,Availability,error,errors,4250,"etic algorithm. More...;  ; class  GeneticPopulation;  Population definition for genetic algorithm. More...;  ; class  GeneticRange;  Range definition for genetic algorithm. More...;  ; class  GiniIndex;  Implementation of the GiniIndex as separation criterion. More...;  ; class  GiniIndexWithLaplace;  Implementation of the GiniIndex With Laplace correction as separation criterion. More...;  ; class  HuberLossFunction;  Huber Loss Function. More...;  ; class  HuberLossFunctionBDT;  Huber BDT Loss Function. More...;  ; class  HyperParameterOptimisation;  ; class  HyperParameterOptimisationResult;  ; class  IFitterTarget;  Interface for a fitter 'target'. More...;  ; class  IMethod;  Interface for all concrete MVA method implementations. More...;  ; class  Increment;  ; class  Interval;  The TMVA::Interval Class. More...;  ; class  IPruneTool;  IPruneTool - a helper interface class to prune a decision tree. More...;  ; class  IPythonInteractive;  This class is needed by JsMVA, and it's a helper class for tracking errors during the training in Jupyter notebook. More...;  ; class  KDEKernel;  KDE Kernel for ""smoothing"" the PDFs. More...;  ; class  LDA;  ; class  LeastSquaresLossFunction;  Least Squares Loss Function. More...;  ; class  LeastSquaresLossFunctionBDT;  Least Squares BDT Loss Function. More...;  ; class  LogInterval;  The TMVA::Interval Class. More...;  ; class  LossFunction;  ; class  LossFunctionBDT;  ; class  LossFunctionEventInfo;  ; class  MCFitter;  Fitter using Monte Carlo sampling of parameters. More...;  ; class  MethodANNBase;  Base class for all TMVA methods using artificial neural networks. More...;  ; class  MethodBase;  Virtual base Class for all MVA method. More...;  ; class  MethodBayesClassifier;  Description of bayesian classifiers. More...;  ; class  MethodBDT;  Analysis of Boosted Decision Trees. More...;  ; class  MethodBoost;  Class for boosting a TMVA method. More...;  ; class  MethodC50;  ; class  MethodCategory;  Class for categorizi",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:9773,Availability,error,error,9773,"oam. More...;  ; class  PDEFoamEvent;  This PDEFoam variant stores in every cell the sum of event weights and the sum of the squared event weights. More...;  ; class  PDEFoamEventDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamKernelBase;  This class is the abstract kernel interface for PDEFoam. More...;  ; class  PDEFoamKernelGauss;  This PDEFoam kernel estimates a cell value for a given event by weighting all cell values with a gauss function. More...;  ; class  PDEFoamKernelLinN;  This PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells. More...;  ; class  PDEFoamKernelTrivial;  This class is a trivial PDEFoam kernel estimator. More...;  ; class  PDEFoamMultiTarget;  This PDEFoam variant is used to estimate multiple targets by creating an event density foam (PDEFoamEvent), which has dimension: More...;  ; class  PDEFoamTarget;  This PDEFoam variant stores in every cell the average target fTarget (see the Constructor) as well as the statistical error on the target fTarget. More...;  ; class  PDEFoamTargetDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamVect;  ; class  PDF;  PDF wrapper for histograms; uses user-defined spline interpolation. More...;  ; class  PruningInfo;  ; class  PyMethodBase;  ; class  QuickMVAProbEstimator;  ; class  RandomGenerator;  ; class  Rank;  ; class  Ranking;  Ranking for variables in method (implementation) More...;  ; class  Reader;  The Reader class serves to use the MVAs in a specific analysis context. More...;  ; class  RegressionVariance;  Calculate the ""SeparationGain"" for Regression analysis separation criteria used in various training algorithms. More...;  ; class  Results;  Class that is the base-class for a vector of result. More...;  ; class  ResultsClassification;  Class that is the base-class for a vector of result. More...;  ; class  ResultsMulticlass;  Class which takes the results of a mul",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:1226,Deployability,configurat,configuration,1226,"amespaces; namespace  DNN;  ; namespace  Experimental;  ; namespace  Internal;  ; namespace  kNN;  ; namespace  TMVAGlob;  . Classes; class  AbsoluteDeviationLossFunction;  Absolute Deviation Loss Function. More...;  ; class  AbsoluteDeviationLossFunctionBDT;  Absolute Deviation BDT Loss Function. More...;  ; class  AbsValue;  ; class  BDTEventWrapper;  ; class  BinarySearchTree;  A simple Binary search tree including a volume search method. More...;  ; class  BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  CCTreeWrapper;  ; class  ClassifierFactory;  This is the MVA factory. More...;  ; class  ClassInfo;  Class that contains all the information of a class. More...;  ; class  Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  Configurable;  ; class  ConvergenceTest;  Check for convergence. More...;  ; class  CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  CrossValidationFoldResult;  ; class  CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  CvSplit;  ; class  CvSplitKFolds;  ; class  CvSplitKFoldsExpr;  ; class  DataInputHandler;  Class that contains all the data information. More...;  ; class  DataLoader;  ; class  DataSet;  Class that contains all the data information. More...;  ; class  DataSetFactory;  Class that contains a",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:24588,Deployability,install,installed,24588,"ring dataset, TFile *file, Int_t type=2, TDirectory *BinDir=nullptr);  ; void plot_training_history (TString dataset, TFile *file, TDirectory *BinDir=nullptr);  ; void PlotCellTree (TString fileName, TString cv_long, bool useTMVAStyle=kTRUE);  ; void plotEfficienciesMulticlass (roccurvelist_t rocCurves, classcanvasmap_t classCanvasMap);  ; void plotEfficienciesMulticlass1vs1 (TString dataset, TString fin, TString baseClassname);  ; void plotEfficienciesMulticlass1vsRest (TString dataset, EEfficiencyPlotType plotType=EEfficiencyPlotType::kRejBvsEffS, TString filename_input=""TMVAMulticlass.root"");  ; void PlotFoams (TString fileName=""weights/TMVAClassification_PDEFoam.weights_foams.root"", bool useTMVAStyle=kTRUE);  ; void PlotNDimFoams (TList &foam_list, TMVA::ECellValue cell_value, const TString &cell_value_description, TMVA::PDEFoamKernelBase *kernel);  ; void probas (TString dataset, TString fin=""TMVA.root"", Bool_t useTMVAStyle=kTRUE);  ; TString Python_Executable ();  Function to find current Python executable used by ROOT If ""Python3"" is installed, return ""python3"". ;  ; void RegGuiActionButton (TControlBar *cbar, const TString &title, const TString &macro, const TString &comment, const TString &buttonType, TString requiredKey="""");  ; TList * RegGuiGetKeyList (const TString &pattern);  ; void regression_averagedevs (TString dataset, TString fin, Int_t Nevt=-1, Bool_t useTMVAStyle=kTRUE);  ; void rulevis (TString fin=""TMVA.root"", TMVAGlob::TypeOfPlot type=TMVAGlob::kNorm, bool useTMVAStyle=kTRUE);  ; void rulevisCorr (TDirectory *rfdir, TDirectory *vardir, TDirectory *corrdir, TMVAGlob::TypeOfPlot type);  ; void rulevisCorr (TString fin=""TMVA.root"", TMVAGlob::TypeOfPlot type=TMVAGlob::kNorm, bool useTMVAStyle=kTRUE);  ; void rulevisHists (TDirectory *rfdir, TDirectory *vardir, TDirectory *corrdir, TMVAGlob::TypeOfPlot type);  ; void rulevisHists (TString fin=""TMVA.root"", TMVAGlob::TypeOfPlot type=TMVAGlob::kNorm, bool useTMVAStyle=kTRUE);  ; void TMVAGui (const cha",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:41279,Deployability,install,installed,41279," classcanvasmap_t ; classCanvasMap . ). ◆ plotEfficienciesMulticlass1vs1(). void TMVA::plotEfficienciesMulticlass1vs1 ; (; TString ; dataset, . TString ; fin, . TString ; baseClassname . ). ◆ plotEfficienciesMulticlass1vsRest(). void TMVA::plotEfficienciesMulticlass1vsRest ; (; TString ; dataset, . EEfficiencyPlotType ; plotType = EEfficiencyPlotType::kRejBvsEffS, . TString ; filename_input = ""TMVAMulticlass.root"" . ). ◆ PlotFoams(). void TMVA::PlotFoams ; (; TString ; fileName = ""weights/TMVAClassification_PDEFoam.weights_foams.root"", . bool ; useTMVAStyle = kTRUE . ). ◆ PlotNDimFoams(). void TMVA::PlotNDimFoams ; (; TList & ; foam_list, . TMVA::ECellValue ; cell_value, . const TString & ; cell_value_description, . TMVA::PDEFoamKernelBase * ; kernel . ). ◆ probas(). void TMVA::probas ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . Bool_t ; useTMVAStyle = kTRUE . ). ◆ Python_Executable(). TString TMVA::Python_Executable ; (; ). Function to find current Python executable used by ROOT If ""Python3"" is installed, return ""python3"". ; get current Python executable used by ROOT ; Definition at line 43 of file PyMethodBase.cxx. ◆ RegGuiActionButton(). void TMVA::RegGuiActionButton ; (; TControlBar * ; cbar, . const TString & ; title, . const TString & ; macro, . const TString & ; comment, . const TString & ; buttonType, . TString ; requiredKey = """" . ). ◆ RegGuiGetKeyList(). TList * TMVA::RegGuiGetKeyList ; (; const TString & ; pattern). ◆ regression_averagedevs(). void TMVA::regression_averagedevs ; (; TString ; dataset, . TString ; fin, . Int_t ; Nevt = -1, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ rulevis(). void TMVA::rulevis ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ rulevisCorr() [1/2]. void TMVA::rulevisCorr ; (; TDirectory * ; rfdir, . TDirectory * ; vardir, . TDirectory * ; corrdir, . TMVAGlob::TypeOfPlot ; type . ). ◆ rulevisCorr() [2/2]. void TMVA::rulevisCorr ; (; TString ; fin = """,MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:3200,Integrability,interface,interface,3200,"  Class that contains all the data information. More...;  ; class  DataSetInfo;  Class that contains all the data information. More...;  ; class  DataSetManager;  Class that contains all the data information. More...;  ; class  DecisionTree;  Implementation of a Decision Tree. More...;  ; class  DecisionTreeNode;  ; struct  DeleteFunctor_t;  ; class  DTNodeTrainingInfo;  ; class  Envelope;  Abstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP. More...;  ; class  Event;  ; class  Executor;  Base Executor class. More...;  ; class  ExpectedErrorPruneTool;  A helper class to prune a decision tree using the expected error (C4.5) method. More...;  ; class  Factory;  This is the main MVA steering class. More...;  ; class  FitterBase;  Base class for TMVA fitters. More...;  ; class  GeneticAlgorithm;  Base definition for genetic algorithm. More...;  ; class  GeneticFitter;  Fitter using a Genetic Algorithm. More...;  ; class  GeneticGenes;  Cut optimisation interface class for genetic algorithm. More...;  ; class  GeneticPopulation;  Population definition for genetic algorithm. More...;  ; class  GeneticRange;  Range definition for genetic algorithm. More...;  ; class  GiniIndex;  Implementation of the GiniIndex as separation criterion. More...;  ; class  GiniIndexWithLaplace;  Implementation of the GiniIndex With Laplace correction as separation criterion. More...;  ; class  HuberLossFunction;  Huber Loss Function. More...;  ; class  HuberLossFunctionBDT;  Huber BDT Loss Function. More...;  ; class  HyperParameterOptimisation;  ; class  HyperParameterOptimisationResult;  ; class  IFitterTarget;  Interface for a fitter 'target'. More...;  ; class  IMethod;  Interface for all concrete MVA method implementations. More...;  ; class  Increment;  ; class  Interval;  The TMVA::Interval Class. More...;  ; class  IPruneTool;  IPruneTool - a helper interface class to prune a decision tree. More...;  ; class  IPythonInteractive;  This class is n",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:4100,Integrability,interface,interface,4100,"  GeneticFitter;  Fitter using a Genetic Algorithm. More...;  ; class  GeneticGenes;  Cut optimisation interface class for genetic algorithm. More...;  ; class  GeneticPopulation;  Population definition for genetic algorithm. More...;  ; class  GeneticRange;  Range definition for genetic algorithm. More...;  ; class  GiniIndex;  Implementation of the GiniIndex as separation criterion. More...;  ; class  GiniIndexWithLaplace;  Implementation of the GiniIndex With Laplace correction as separation criterion. More...;  ; class  HuberLossFunction;  Huber Loss Function. More...;  ; class  HuberLossFunctionBDT;  Huber BDT Loss Function. More...;  ; class  HyperParameterOptimisation;  ; class  HyperParameterOptimisationResult;  ; class  IFitterTarget;  Interface for a fitter 'target'. More...;  ; class  IMethod;  Interface for all concrete MVA method implementations. More...;  ; class  Increment;  ; class  Interval;  The TMVA::Interval Class. More...;  ; class  IPruneTool;  IPruneTool - a helper interface class to prune a decision tree. More...;  ; class  IPythonInteractive;  This class is needed by JsMVA, and it's a helper class for tracking errors during the training in Jupyter notebook. More...;  ; class  KDEKernel;  KDE Kernel for ""smoothing"" the PDFs. More...;  ; class  LDA;  ; class  LeastSquaresLossFunction;  Least Squares Loss Function. More...;  ; class  LeastSquaresLossFunctionBDT;  Least Squares BDT Loss Function. More...;  ; class  LogInterval;  The TMVA::Interval Class. More...;  ; class  LossFunction;  ; class  LossFunctionBDT;  ; class  LossFunctionEventInfo;  ; class  MCFitter;  Fitter using Monte Carlo sampling of parameters. More...;  ; class  MethodANNBase;  Base class for all TMVA methods using artificial neural networks. More...;  ; class  MethodBase;  Virtual base Class for all MVA method. More...;  ; class  MethodBayesClassifier;  Description of bayesian classifiers. More...;  ; class  MethodBDT;  Analysis of Boosted Decision Trees. More...;  ; class ",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:7425,Integrability,interface,interface,7425,"ear Discriminant. More...;  ; class  MethodLikelihood;  Likelihood analysis (""non-parametric approach"") More...;  ; class  MethodMLP;  Multilayer Perceptron class built off of MethodANNBase. More...;  ; class  MethodPDEFoam;  The PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density. More...;  ; class  MethodPDERS;  This is a generalization of the above Likelihood methods to \( N_{var} \) dimensions, where \( N_{var} \) is the number of input variables used in the MVA. More...;  ; class  MethodPyAdaBoost;  ; class  MethodPyGTB;  ; class  MethodPyKeras;  ; class  MethodPyRandomForest;  ; class  MethodPyTorch;  ; class  MethodRSNNS;  ; class  MethodRSVM;  ; class  MethodRuleFit;  J Friedman's RuleFit method. More...;  ; class  MethodRXGB;  ; class  MethodSVM;  SMO Platt's SVM classifier with Keerthi & Shavade improvements. More...;  ; class  MethodTMlpANN;  This is the TMVA TMultiLayerPerceptron interface class. More...;  ; class  MinuitFitter;  /Fitter using MINUIT More...;  ; class  MinuitWrapper;  Wrapper around MINUIT. More...;  ; class  MisClassificationError;  Implementation of the MisClassificationError as separation criterion. More...;  ; class  Monitoring;  ; class  MsgLogger;  ostringstream derivative to redirect and format output More...;  ; class  Node;  Node for the BinarySearch or Decision Trees. More...;  ; class  null_t;  ; class  OptimizeConfigParameters;  ; class  Option;  ; class  Option< T * >;  ; class  OptionBase;  Class for TMVA-option handling. More...;  ; class  OptionMap;  class to storage options for the differents methods More...;  ; class  PDEFoam;  Implementation of PDEFoam. More...;  ; class  PDEFoamCell;  ; class  PDEFoamDecisionTree;  This PDEFoam variant acts like a decision tree and stores in every cell the discriminant. More...;  ; class  PDEFoamDecisionTreeDensity;  This is a concrete implementation of PDEFoam. More",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:8481,Integrability,interface,interface,8481,"nuitFitter;  /Fitter using MINUIT More...;  ; class  MinuitWrapper;  Wrapper around MINUIT. More...;  ; class  MisClassificationError;  Implementation of the MisClassificationError as separation criterion. More...;  ; class  Monitoring;  ; class  MsgLogger;  ostringstream derivative to redirect and format output More...;  ; class  Node;  Node for the BinarySearch or Decision Trees. More...;  ; class  null_t;  ; class  OptimizeConfigParameters;  ; class  Option;  ; class  Option< T * >;  ; class  OptionBase;  Class for TMVA-option handling. More...;  ; class  OptionMap;  class to storage options for the differents methods More...;  ; class  PDEFoam;  Implementation of PDEFoam. More...;  ; class  PDEFoamCell;  ; class  PDEFoamDecisionTree;  This PDEFoam variant acts like a decision tree and stores in every cell the discriminant. More...;  ; class  PDEFoamDecisionTreeDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamDensityBase;  This is an abstract class, which provides an interface for a PDEFoam density estimator. More...;  ; class  PDEFoamDiscriminant;  This PDEFoam variant stores in every cell the discriminant. More...;  ; class  PDEFoamDiscriminantDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamEvent;  This PDEFoam variant stores in every cell the sum of event weights and the sum of the squared event weights. More...;  ; class  PDEFoamEventDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamKernelBase;  This class is the abstract kernel interface for PDEFoam. More...;  ; class  PDEFoamKernelGauss;  This PDEFoam kernel estimates a cell value for a given event by weighting all cell values with a gauss function. More...;  ; class  PDEFoamKernelLinN;  This PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells. More...;  ; class  PDEFoamKernelTrivial;  This class is a trivial PDEFoam kernel estimator. More...;  ; ",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:9022,Integrability,interface,interface,9022,"andling. More...;  ; class  OptionMap;  class to storage options for the differents methods More...;  ; class  PDEFoam;  Implementation of PDEFoam. More...;  ; class  PDEFoamCell;  ; class  PDEFoamDecisionTree;  This PDEFoam variant acts like a decision tree and stores in every cell the discriminant. More...;  ; class  PDEFoamDecisionTreeDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamDensityBase;  This is an abstract class, which provides an interface for a PDEFoam density estimator. More...;  ; class  PDEFoamDiscriminant;  This PDEFoam variant stores in every cell the discriminant. More...;  ; class  PDEFoamDiscriminantDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamEvent;  This PDEFoam variant stores in every cell the sum of event weights and the sum of the squared event weights. More...;  ; class  PDEFoamEventDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamKernelBase;  This class is the abstract kernel interface for PDEFoam. More...;  ; class  PDEFoamKernelGauss;  This PDEFoam kernel estimates a cell value for a given event by weighting all cell values with a gauss function. More...;  ; class  PDEFoamKernelLinN;  This PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells. More...;  ; class  PDEFoamKernelTrivial;  This class is a trivial PDEFoam kernel estimator. More...;  ; class  PDEFoamMultiTarget;  This PDEFoam variant is used to estimate multiple targets by creating an event density foam (PDEFoamEvent), which has dimension: More...;  ; class  PDEFoamTarget;  This PDEFoam variant stores in every cell the average target fTarget (see the Constructor) as well as the statistical error on the target fTarget. More...;  ; class  PDEFoamTargetDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamVect;  ; class  PDF;  PDF wrapper for histograms; uses user-defined spline interpola",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:9942,Integrability,wrap,wrapper,9942,"re...;  ; class  PDEFoamKernelBase;  This class is the abstract kernel interface for PDEFoam. More...;  ; class  PDEFoamKernelGauss;  This PDEFoam kernel estimates a cell value for a given event by weighting all cell values with a gauss function. More...;  ; class  PDEFoamKernelLinN;  This PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells. More...;  ; class  PDEFoamKernelTrivial;  This class is a trivial PDEFoam kernel estimator. More...;  ; class  PDEFoamMultiTarget;  This PDEFoam variant is used to estimate multiple targets by creating an event density foam (PDEFoamEvent), which has dimension: More...;  ; class  PDEFoamTarget;  This PDEFoam variant stores in every cell the average target fTarget (see the Constructor) as well as the statistical error on the target fTarget. More...;  ; class  PDEFoamTargetDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamVect;  ; class  PDF;  PDF wrapper for histograms; uses user-defined spline interpolation. More...;  ; class  PruningInfo;  ; class  PyMethodBase;  ; class  QuickMVAProbEstimator;  ; class  RandomGenerator;  ; class  Rank;  ; class  Ranking;  Ranking for variables in method (implementation) More...;  ; class  Reader;  The Reader class serves to use the MVAs in a specific analysis context. More...;  ; class  RegressionVariance;  Calculate the ""SeparationGain"" for Regression analysis separation criteria used in various training algorithms. More...;  ; class  Results;  Class that is the base-class for a vector of result. More...;  ; class  ResultsClassification;  Class that is the base-class for a vector of result. More...;  ; class  ResultsMulticlass;  Class which takes the results of a multiclass classification. More...;  ; class  ResultsRegression;  Class that is the base-class for a vector of result. More...;  ; class  RMethodBase;  ; class  ROCCalc;  ; class  ROCCurve;  ; class  RootFinder;  Root finding using Brents a",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:11536,Integrability,interface,interface,11536,"tion;  Class that is the base-class for a vector of result. More...;  ; class  ResultsMulticlass;  Class which takes the results of a multiclass classification. More...;  ; class  ResultsRegression;  Class that is the base-class for a vector of result. More...;  ; class  RMethodBase;  ; class  ROCCalc;  ; class  ROCCurve;  ; class  RootFinder;  Root finding using Brents algorithm (translated from CERNLIB function RZERO) More...;  ; class  Rule;  Implementation of a rule. More...;  ; class  RuleCut;  A class describing a 'rule cut'. More...;  ; class  RuleEnsemble;  ; class  RuleFit;  A class implementing various fits of rule ensembles. More...;  ; class  RuleFitAPI;  J Friedman's RuleFit method. More...;  ; class  RuleFitParams;  A class doing the actual fitting of a linear model using rules as base functions. More...;  ; class  SdivSqrtSplusB;  Implementation of the SdivSqrtSplusB as separation criterion. More...;  ; class  SeparationBase;  An interface to calculate the ""SeparationGain"" for different separation criteria used in various training algorithms. More...;  ; class  SimulatedAnnealing;  Base implementation of simulated annealing fitting procedure. More...;  ; class  SimulatedAnnealingFitter;  Fitter using a Simulated Annealing Algorithm. More...;  ; class  StatDialogBDT;  ; class  StatDialogBDTReg;  ; class  StatDialogMVAEffs;  ; class  SVEvent;  Event class for Support Vector Machine. More...;  ; class  SVKernelFunction;  Kernel for Support Vector Machine. More...;  ; class  SVKernelMatrix;  Kernel matrix for Support Vector Machine. More...;  ; class  SVWorkingSet;  Working class for Support Vector Machine. More...;  ; class  TActivation;  Interface for TNeuron activation function classes. More...;  ; class  TActivationChooser;  Class for easily choosing activation functions. More...;  ; class  TActivationIdentity;  Identity activation function for TNeuron. More...;  ; class  TActivationRadial;  Radial basis activation function for ANN. More...;  ; class ",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:13624,Integrability,rout,routines,13624,  Rectified Linear Unit activation function for TNeuron. More...;  ; class  TActivationSigmoid;  Sigmoid activation function for TNeuron. More...;  ; class  TActivationTanh;  Tanh activation function for ANN. More...;  ; class  Timer;  Timing information for training and evaluation of MVA methods. More...;  ; class  TMVAGaussPair;  ; struct  TMVAGUI;  ; class  TNeuron;  Neuron class used by TMVA artificial neural network methods. More...;  ; class  TNeuronInput;  Interface for TNeuron input calculation classes. More...;  ; class  TNeuronInputAbs;  TNeuron input calculator – calculates the sum of the absolute values of the weighted inputs. More...;  ; class  TNeuronInputChooser;  Class for easily choosing neuron input functions. More...;  ; class  TNeuronInputSqSum;  TNeuron input calculator – calculates the squared weighted sum of inputs. More...;  ; class  TNeuronInputSum;  TNeuron input calculator – calculates the weighted sum of inputs. More...;  ; class  Tools;  Global auxiliary applications and data treatment routines. More...;  ; class  TrainingHistory;  Tracking data from training. More...;  ; class  TransformationHandler;  Class that contains all the data information. More...;  ; class  TreeInfo;  ; class  TSpline1;  Linear interpolation of TGraph. More...;  ; class  TSpline2;  Quadratic interpolation of TGraph. More...;  ; class  TSynapse;  Synapse class used by TMVA artificial neural network methods. More...;  ; struct  TTrainingSettings;  All of the options that can be specified in the training string. More...;  ; class  Types;  Singleton class for Global types used by TMVA. More...;  ; class  VariableDecorrTransform;  Linear interpolation class. More...;  ; class  VariableGaussTransform;  Gaussian Transformation of input variables. More...;  ; class  VariableIdentityTransform;  Linear interpolation class. More...;  ; class  VariableImportance;  ; class  VariableImportanceResult;  ; class  VariableInfo;  Class for type info of MVA input variable. More...;,MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:184,Modifiability,variab,variable,184,". ROOT: TMVA Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Functions ; TMVA Namespace Reference. create variable transformations ; More... Namespaces; namespace  DNN;  ; namespace  Experimental;  ; namespace  Internal;  ; namespace  kNN;  ; namespace  TMVAGlob;  . Classes; class  AbsoluteDeviationLossFunction;  Absolute Deviation Loss Function. More...;  ; class  AbsoluteDeviationLossFunctionBDT;  Absolute Deviation BDT Loss Function. More...;  ; class  AbsValue;  ; class  BDTEventWrapper;  ; class  BinarySearchTree;  A simple Binary search tree including a volume search method. More...;  ; class  BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  CCTreeWrapper;  ; class  ClassifierFactory;  This is the MVA factory. More...;  ; class  ClassInfo;  Class that contains all the information of a class. More...;  ; class  Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  Configurable;  ; class  ConvergenceTest;  Check for convergence. More...;  ; class  CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  CrossValidationFoldResult;  ; class  CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  CvSplit;  ; class  CvSplitKFolds;  ; class  CvSplitKFoldsExpr;  ; class  ",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:1226,Modifiability,config,configuration,1226,"amespaces; namespace  DNN;  ; namespace  Experimental;  ; namespace  Internal;  ; namespace  kNN;  ; namespace  TMVAGlob;  . Classes; class  AbsoluteDeviationLossFunction;  Absolute Deviation Loss Function. More...;  ; class  AbsoluteDeviationLossFunctionBDT;  Absolute Deviation BDT Loss Function. More...;  ; class  AbsValue;  ; class  BDTEventWrapper;  ; class  BinarySearchTree;  A simple Binary search tree including a volume search method. More...;  ; class  BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  CCTreeWrapper;  ; class  ClassifierFactory;  This is the MVA factory. More...;  ; class  ClassInfo;  Class that contains all the information of a class. More...;  ; class  Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  Configurable;  ; class  ConvergenceTest;  Check for convergence. More...;  ; class  CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  CrossValidationFoldResult;  ; class  CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  CvSplit;  ; class  CvSplitKFolds;  ; class  CvSplitKFoldsExpr;  ; class  DataInputHandler;  Class that contains all the data information. More...;  ; class  DataLoader;  ; class  DataSet;  Class that contains all the data information. More...;  ; class  DataSetFactory;  Class that contains a",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:6270,Modifiability,variab,variables,6270,"0;  ; class  MethodCategory;  Class for categorizing the phase space. More...;  ; class  MethodCFMlpANN;  Interface to Clermond-Ferrand artificial neural network. More...;  ; class  MethodCFMlpANN_Utils;  Implementation of Clermond-Ferrand artificial neural network. More...;  ; class  MethodCompositeBase;  Virtual base class for combining several TMVA method. More...;  ; class  MethodCrossValidation;  ; class  MethodCuts;  Multivariate optimisation of signal efficiency for given background efficiency, applying rectangular minimum and maximum requirements. More...;  ; class  MethodDL;  ; class  MethodDNN;  Deep Neural Network Implementation. More...;  ; class  MethodDT;  Analysis of Boosted Decision Trees. More...;  ; class  MethodFDA;  Function discriminant analysis (FDA). More...;  ; class  MethodFisher;  Fisher and Mahalanobis Discriminants (Linear Discriminant Analysis) More...;  ; class  MethodHMatrix;  H-Matrix method, which is implemented as a simple comparison of chi-squared estimators for signal and background, taking into account the linear correlations between the input variables. More...;  ; class  MethodInfo;  ; class  MethodKNN;  Analysis of k-nearest neighbor. More...;  ; class  MethodLD;  Linear Discriminant. More...;  ; class  MethodLikelihood;  Likelihood analysis (""non-parametric approach"") More...;  ; class  MethodMLP;  Multilayer Perceptron class built off of MethodANNBase. More...;  ; class  MethodPDEFoam;  The PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density. More...;  ; class  MethodPDERS;  This is a generalization of the above Likelihood methods to \( N_{var} \) dimensions, where \( N_{var} \) is the number of input variables used in the MVA. More...;  ; class  MethodPyAdaBoost;  ; class  MethodPyGTB;  ; class  MethodPyKeras;  ; class  MethodPyRandomForest;  ; class  MethodPyTorch;  ; class  MethodRSNNS;  ; class  Method",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:6965,Modifiability,variab,variables,6965,"class  MethodFDA;  Function discriminant analysis (FDA). More...;  ; class  MethodFisher;  Fisher and Mahalanobis Discriminants (Linear Discriminant Analysis) More...;  ; class  MethodHMatrix;  H-Matrix method, which is implemented as a simple comparison of chi-squared estimators for signal and background, taking into account the linear correlations between the input variables. More...;  ; class  MethodInfo;  ; class  MethodKNN;  Analysis of k-nearest neighbor. More...;  ; class  MethodLD;  Linear Discriminant. More...;  ; class  MethodLikelihood;  Likelihood analysis (""non-parametric approach"") More...;  ; class  MethodMLP;  Multilayer Perceptron class built off of MethodANNBase. More...;  ; class  MethodPDEFoam;  The PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density. More...;  ; class  MethodPDERS;  This is a generalization of the above Likelihood methods to \( N_{var} \) dimensions, where \( N_{var} \) is the number of input variables used in the MVA. More...;  ; class  MethodPyAdaBoost;  ; class  MethodPyGTB;  ; class  MethodPyKeras;  ; class  MethodPyRandomForest;  ; class  MethodPyTorch;  ; class  MethodRSNNS;  ; class  MethodRSVM;  ; class  MethodRuleFit;  J Friedman's RuleFit method. More...;  ; class  MethodRXGB;  ; class  MethodSVM;  SMO Platt's SVM classifier with Keerthi & Shavade improvements. More...;  ; class  MethodTMlpANN;  This is the TMVA TMultiLayerPerceptron interface class. More...;  ; class  MinuitFitter;  /Fitter using MINUIT More...;  ; class  MinuitWrapper;  Wrapper around MINUIT. More...;  ; class  MisClassificationError;  Implementation of the MisClassificationError as separation criterion. More...;  ; class  Monitoring;  ; class  MsgLogger;  ostringstream derivative to redirect and format output More...;  ; class  Node;  Node for the BinarySearch or Decision Trees. More...;  ; class  null_t;  ; class  OptimizeConfigPa",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:10170,Modifiability,variab,variables,10170,"es a cell value for a given event by weighting all cell values with a gauss function. More...;  ; class  PDEFoamKernelLinN;  This PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells. More...;  ; class  PDEFoamKernelTrivial;  This class is a trivial PDEFoam kernel estimator. More...;  ; class  PDEFoamMultiTarget;  This PDEFoam variant is used to estimate multiple targets by creating an event density foam (PDEFoamEvent), which has dimension: More...;  ; class  PDEFoamTarget;  This PDEFoam variant stores in every cell the average target fTarget (see the Constructor) as well as the statistical error on the target fTarget. More...;  ; class  PDEFoamTargetDensity;  This is a concrete implementation of PDEFoam. More...;  ; class  PDEFoamVect;  ; class  PDF;  PDF wrapper for histograms; uses user-defined spline interpolation. More...;  ; class  PruningInfo;  ; class  PyMethodBase;  ; class  QuickMVAProbEstimator;  ; class  RandomGenerator;  ; class  Rank;  ; class  Ranking;  Ranking for variables in method (implementation) More...;  ; class  Reader;  The Reader class serves to use the MVAs in a specific analysis context. More...;  ; class  RegressionVariance;  Calculate the ""SeparationGain"" for Regression analysis separation criteria used in various training algorithms. More...;  ; class  Results;  Class that is the base-class for a vector of result. More...;  ; class  ResultsClassification;  Class that is the base-class for a vector of result. More...;  ; class  ResultsMulticlass;  Class which takes the results of a multiclass classification. More...;  ; class  ResultsRegression;  Class that is the base-class for a vector of result. More...;  ; class  RMethodBase;  ; class  ROCCalc;  ; class  ROCCurve;  ; class  RootFinder;  Root finding using Brents algorithm (translated from CERNLIB function RZERO) More...;  ; class  Rule;  Implementation of a rule. More...;  ; class  RuleCut;  A class describing a 'rule cut'",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:14357,Modifiability,variab,variables,14357,"ons. More...;  ; class  TNeuronInputSqSum;  TNeuron input calculator – calculates the squared weighted sum of inputs. More...;  ; class  TNeuronInputSum;  TNeuron input calculator – calculates the weighted sum of inputs. More...;  ; class  Tools;  Global auxiliary applications and data treatment routines. More...;  ; class  TrainingHistory;  Tracking data from training. More...;  ; class  TransformationHandler;  Class that contains all the data information. More...;  ; class  TreeInfo;  ; class  TSpline1;  Linear interpolation of TGraph. More...;  ; class  TSpline2;  Quadratic interpolation of TGraph. More...;  ; class  TSynapse;  Synapse class used by TMVA artificial neural network methods. More...;  ; struct  TTrainingSettings;  All of the options that can be specified in the training string. More...;  ; class  Types;  Singleton class for Global types used by TMVA. More...;  ; class  VariableDecorrTransform;  Linear interpolation class. More...;  ; class  VariableGaussTransform;  Gaussian Transformation of input variables. More...;  ; class  VariableIdentityTransform;  Linear interpolation class. More...;  ; class  VariableImportance;  ; class  VariableImportanceResult;  ; class  VariableInfo;  Class for type info of MVA input variable. More...;  ; class  VariableNormalizeTransform;  Linear interpolation class. More...;  ; class  VariablePCATransform;  Linear interpolation class. More...;  ; class  VariableRearrangeTransform;  Rearrangement of input variables. More...;  ; class  VariableTransformBase;  Linear interpolation class. More...;  ; class  VarTransformHandler;  ; class  Volume;  Volume for BinarySearchTree. More...;  . Functions; void ActionButton (TControlBar *cbar, const TString &title, const TString &macro, const TString &comment, const TString &buttonType, TString requiredKey="""");  ; void annconvergencetest (TString dataset, TDirectory *lhdir);  ; void annconvergencetest (TString dataset, TString fin=""TMVA.root"", Bool_t useTMVAStyle=kTRUE);  ; void BD",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:14576,Modifiability,variab,variable,14576,"es the weighted sum of inputs. More...;  ; class  Tools;  Global auxiliary applications and data treatment routines. More...;  ; class  TrainingHistory;  Tracking data from training. More...;  ; class  TransformationHandler;  Class that contains all the data information. More...;  ; class  TreeInfo;  ; class  TSpline1;  Linear interpolation of TGraph. More...;  ; class  TSpline2;  Quadratic interpolation of TGraph. More...;  ; class  TSynapse;  Synapse class used by TMVA artificial neural network methods. More...;  ; struct  TTrainingSettings;  All of the options that can be specified in the training string. More...;  ; class  Types;  Singleton class for Global types used by TMVA. More...;  ; class  VariableDecorrTransform;  Linear interpolation class. More...;  ; class  VariableGaussTransform;  Gaussian Transformation of input variables. More...;  ; class  VariableIdentityTransform;  Linear interpolation class. More...;  ; class  VariableImportance;  ; class  VariableImportanceResult;  ; class  VariableInfo;  Class for type info of MVA input variable. More...;  ; class  VariableNormalizeTransform;  Linear interpolation class. More...;  ; class  VariablePCATransform;  Linear interpolation class. More...;  ; class  VariableRearrangeTransform;  Rearrangement of input variables. More...;  ; class  VariableTransformBase;  Linear interpolation class. More...;  ; class  VarTransformHandler;  ; class  Volume;  Volume for BinarySearchTree. More...;  . Functions; void ActionButton (TControlBar *cbar, const TString &title, const TString &macro, const TString &comment, const TString &buttonType, TString requiredKey="""");  ; void annconvergencetest (TString dataset, TDirectory *lhdir);  ; void annconvergencetest (TString dataset, TString fin=""TMVA.root"", Bool_t useTMVAStyle=kTRUE);  ; void BDT (TString dataset, const TString &fin=""TMVA.root"");  ; void BDT (TString dataset, Int_t itree, TString wfile, TString methName=""BDT"", Bool_t useTMVAStyle=kTRUE);  ; void BDT_DeleteTBar (int ",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:14803,Modifiability,variab,variables,14803,"information. More...;  ; class  TreeInfo;  ; class  TSpline1;  Linear interpolation of TGraph. More...;  ; class  TSpline2;  Quadratic interpolation of TGraph. More...;  ; class  TSynapse;  Synapse class used by TMVA artificial neural network methods. More...;  ; struct  TTrainingSettings;  All of the options that can be specified in the training string. More...;  ; class  Types;  Singleton class for Global types used by TMVA. More...;  ; class  VariableDecorrTransform;  Linear interpolation class. More...;  ; class  VariableGaussTransform;  Gaussian Transformation of input variables. More...;  ; class  VariableIdentityTransform;  Linear interpolation class. More...;  ; class  VariableImportance;  ; class  VariableImportanceResult;  ; class  VariableInfo;  Class for type info of MVA input variable. More...;  ; class  VariableNormalizeTransform;  Linear interpolation class. More...;  ; class  VariablePCATransform;  Linear interpolation class. More...;  ; class  VariableRearrangeTransform;  Rearrangement of input variables. More...;  ; class  VariableTransformBase;  Linear interpolation class. More...;  ; class  VarTransformHandler;  ; class  Volume;  Volume for BinarySearchTree. More...;  . Functions; void ActionButton (TControlBar *cbar, const TString &title, const TString &macro, const TString &comment, const TString &buttonType, TString requiredKey="""");  ; void annconvergencetest (TString dataset, TDirectory *lhdir);  ; void annconvergencetest (TString dataset, TString fin=""TMVA.root"", Bool_t useTMVAStyle=kTRUE);  ; void BDT (TString dataset, const TString &fin=""TMVA.root"");  ; void BDT (TString dataset, Int_t itree, TString wfile, TString methName=""BDT"", Bool_t useTMVAStyle=kTRUE);  ; void BDT_DeleteTBar (int i);  ; void BDT_Reg (TString dataset, const TString &fin=""TMVAReg.root"");  ; void BDT_Reg (TString dataset, Int_t itree, TString wfile="""", TString methName=""BDT"", Bool_t useTMVAStyle=kTRUE);  ; void bdtcontrolplots (TString dataset, TDirectory *);  ; void BD",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:25843,Modifiability,variab,variables,25843,"oid regression_averagedevs (TString dataset, TString fin, Int_t Nevt=-1, Bool_t useTMVAStyle=kTRUE);  ; void rulevis (TString fin=""TMVA.root"", TMVAGlob::TypeOfPlot type=TMVAGlob::kNorm, bool useTMVAStyle=kTRUE);  ; void rulevisCorr (TDirectory *rfdir, TDirectory *vardir, TDirectory *corrdir, TMVAGlob::TypeOfPlot type);  ; void rulevisCorr (TString fin=""TMVA.root"", TMVAGlob::TypeOfPlot type=TMVAGlob::kNorm, bool useTMVAStyle=kTRUE);  ; void rulevisHists (TDirectory *rfdir, TDirectory *vardir, TDirectory *corrdir, TMVAGlob::TypeOfPlot type);  ; void rulevisHists (TString fin=""TMVA.root"", TMVAGlob::TypeOfPlot type=TMVAGlob::kNorm, bool useTMVAStyle=kTRUE);  ; void TMVAGui (const char *fName=""TMVA.root"", TString dataset="""");  ; void TMVAMultiClassGui (const char *fName=""TMVAMulticlass.root"", TString dataset="""");  ; void TMVARegGui (const char *fName=""TMVAReg.root"", TString dataset="""");  ; void training_history (TString dataset, TString fin=""TMVA.root"", Bool_t useTMVAStyle=kTRUE);  ; void variables (TString dataset, TString fin=""TMVA.root"", TString dirName=""InputVariables_Id"", TString title=""TMVA Input Variables"", Bool_t isRegression=kFALSE, Bool_t useTMVAStyle=kTRUE);  ; void variablesMultiClass (TString dataset, TString fin=""TMVA.root"", TString dirName=""InputVariables_Id"", TString title=""TMVA Input Variables"", Bool_t isRegression=kFALSE, Bool_t useTMVAStyle=kTRUE);  . Detailed Description; create variable transformations ; Function Documentation. ◆ ActionButton(). void TMVA::ActionButton ; (; TControlBar * ; cbar, . const TString & ; title, . const TString & ; macro, . const TString & ; comment, . const TString & ; buttonType, . TString ; requiredKey = """" . ). ◆ annconvergencetest() [1/2]. void TMVA::annconvergencetest ; (; TString ; dataset, . TDirectory * ; lhdir . ). ◆ annconvergencetest() [2/2]. void TMVA::annconvergencetest ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . Bool_t ; useTMVAStyle = kTRUE . ). ◆ BDT() [1/2]. void TMVA::BDT ; (; TString ; datase",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:26035,Modifiability,variab,variablesMultiClass,26035,"AGlob::TypeOfPlot type=TMVAGlob::kNorm, bool useTMVAStyle=kTRUE);  ; void rulevisCorr (TDirectory *rfdir, TDirectory *vardir, TDirectory *corrdir, TMVAGlob::TypeOfPlot type);  ; void rulevisCorr (TString fin=""TMVA.root"", TMVAGlob::TypeOfPlot type=TMVAGlob::kNorm, bool useTMVAStyle=kTRUE);  ; void rulevisHists (TDirectory *rfdir, TDirectory *vardir, TDirectory *corrdir, TMVAGlob::TypeOfPlot type);  ; void rulevisHists (TString fin=""TMVA.root"", TMVAGlob::TypeOfPlot type=TMVAGlob::kNorm, bool useTMVAStyle=kTRUE);  ; void TMVAGui (const char *fName=""TMVA.root"", TString dataset="""");  ; void TMVAMultiClassGui (const char *fName=""TMVAMulticlass.root"", TString dataset="""");  ; void TMVARegGui (const char *fName=""TMVAReg.root"", TString dataset="""");  ; void training_history (TString dataset, TString fin=""TMVA.root"", Bool_t useTMVAStyle=kTRUE);  ; void variables (TString dataset, TString fin=""TMVA.root"", TString dirName=""InputVariables_Id"", TString title=""TMVA Input Variables"", Bool_t isRegression=kFALSE, Bool_t useTMVAStyle=kTRUE);  ; void variablesMultiClass (TString dataset, TString fin=""TMVA.root"", TString dirName=""InputVariables_Id"", TString title=""TMVA Input Variables"", Bool_t isRegression=kFALSE, Bool_t useTMVAStyle=kTRUE);  . Detailed Description; create variable transformations ; Function Documentation. ◆ ActionButton(). void TMVA::ActionButton ; (; TControlBar * ; cbar, . const TString & ; title, . const TString & ; macro, . const TString & ; comment, . const TString & ; buttonType, . TString ; requiredKey = """" . ). ◆ annconvergencetest() [1/2]. void TMVA::annconvergencetest ; (; TString ; dataset, . TDirectory * ; lhdir . ). ◆ annconvergencetest() [2/2]. void TMVA::annconvergencetest ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . Bool_t ; useTMVAStyle = kTRUE . ). ◆ BDT() [1/2]. void TMVA::BDT ; (; TString ; dataset, . const TString & ; fin = ""TMVA.root"" . ). ◆ BDT() [2/2]. void TMVA::BDT ; (; TString ; dataset, . Int_t ; itree, . TString ; wfile, . TString",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:26261,Modifiability,variab,variable,26261,"=kTRUE);  ; void rulevisHists (TDirectory *rfdir, TDirectory *vardir, TDirectory *corrdir, TMVAGlob::TypeOfPlot type);  ; void rulevisHists (TString fin=""TMVA.root"", TMVAGlob::TypeOfPlot type=TMVAGlob::kNorm, bool useTMVAStyle=kTRUE);  ; void TMVAGui (const char *fName=""TMVA.root"", TString dataset="""");  ; void TMVAMultiClassGui (const char *fName=""TMVAMulticlass.root"", TString dataset="""");  ; void TMVARegGui (const char *fName=""TMVAReg.root"", TString dataset="""");  ; void training_history (TString dataset, TString fin=""TMVA.root"", Bool_t useTMVAStyle=kTRUE);  ; void variables (TString dataset, TString fin=""TMVA.root"", TString dirName=""InputVariables_Id"", TString title=""TMVA Input Variables"", Bool_t isRegression=kFALSE, Bool_t useTMVAStyle=kTRUE);  ; void variablesMultiClass (TString dataset, TString fin=""TMVA.root"", TString dirName=""InputVariables_Id"", TString title=""TMVA Input Variables"", Bool_t isRegression=kFALSE, Bool_t useTMVAStyle=kTRUE);  . Detailed Description; create variable transformations ; Function Documentation. ◆ ActionButton(). void TMVA::ActionButton ; (; TControlBar * ; cbar, . const TString & ; title, . const TString & ; macro, . const TString & ; comment, . const TString & ; buttonType, . TString ; requiredKey = """" . ). ◆ annconvergencetest() [1/2]. void TMVA::annconvergencetest ; (; TString ; dataset, . TDirectory * ; lhdir . ). ◆ annconvergencetest() [2/2]. void TMVA::annconvergencetest ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . Bool_t ; useTMVAStyle = kTRUE . ). ◆ BDT() [1/2]. void TMVA::BDT ; (; TString ; dataset, . const TString & ; fin = ""TMVA.root"" . ). ◆ BDT() [2/2]. void TMVA::BDT ; (; TString ; dataset, . Int_t ; itree, . TString ; wfile, . TString ; methName = ""BDT"", . Bool_t ; useTMVAStyle = kTRUE . ). ◆ BDT_DeleteTBar(). void TMVA::BDT_DeleteTBar ; (; int ; i). ◆ BDT_Reg() [1/2]. void TMVA::BDT_Reg ; (; TString ; dataset, . const TString & ; fin = ""TMVAReg.root"" . ). ◆ BDT_Reg() [2/2]. void TMVA::BDT_Reg ; (; TString ; d",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:43172,Modifiability,variab,variables,43172,"ataset, . TString ; fin, . Int_t ; Nevt = -1, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ rulevis(). void TMVA::rulevis ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ rulevisCorr() [1/2]. void TMVA::rulevisCorr ; (; TDirectory * ; rfdir, . TDirectory * ; vardir, . TDirectory * ; corrdir, . TMVAGlob::TypeOfPlot ; type . ). ◆ rulevisCorr() [2/2]. void TMVA::rulevisCorr ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ rulevisHists() [1/2]. void TMVA::rulevisHists ; (; TDirectory * ; rfdir, . TDirectory * ; vardir, . TDirectory * ; corrdir, . TMVAGlob::TypeOfPlot ; type . ). ◆ rulevisHists() [2/2]. void TMVA::rulevisHists ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ TMVAGui(). void TMVA::TMVAGui ; (; const char * ; fName = ""TMVA.root"", . TString ; dataset = """" . ). ◆ TMVAMultiClassGui(). void TMVA::TMVAMultiClassGui ; (; const char * ; fName = ""TMVAMulticlass.root"", . TString ; dataset = """" . ). ◆ TMVARegGui(). void TMVA::TMVARegGui ; (; const char * ; fName = ""TMVAReg.root"", . TString ; dataset = """" . ). ◆ training_history(). void TMVA::training_history ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . Bool_t ; useTMVAStyle = kTRUE . ). ◆ variables(). void TMVA::variables ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . TString ; dirName = ""InputVariables_Id"", . TString ; title = ""TMVA Input Variables"", . Bool_t ; isRegression = kFALSE, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ variablesMultiClass(). void TMVA::variablesMultiClass ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . TString ; dirName = ""InputVariables_Id"", . TString ; title = ""TMVA Input Variables"", . Bool_t ; isRegression = kFALSE, . Bool_t ; useTMVAStyle = kTRUE . ). TMVA. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:43196,Modifiability,variab,variables,43196,"ataset, . TString ; fin, . Int_t ; Nevt = -1, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ rulevis(). void TMVA::rulevis ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ rulevisCorr() [1/2]. void TMVA::rulevisCorr ; (; TDirectory * ; rfdir, . TDirectory * ; vardir, . TDirectory * ; corrdir, . TMVAGlob::TypeOfPlot ; type . ). ◆ rulevisCorr() [2/2]. void TMVA::rulevisCorr ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ rulevisHists() [1/2]. void TMVA::rulevisHists ; (; TDirectory * ; rfdir, . TDirectory * ; vardir, . TDirectory * ; corrdir, . TMVAGlob::TypeOfPlot ; type . ). ◆ rulevisHists() [2/2]. void TMVA::rulevisHists ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ TMVAGui(). void TMVA::TMVAGui ; (; const char * ; fName = ""TMVA.root"", . TString ; dataset = """" . ). ◆ TMVAMultiClassGui(). void TMVA::TMVAMultiClassGui ; (; const char * ; fName = ""TMVAMulticlass.root"", . TString ; dataset = """" . ). ◆ TMVARegGui(). void TMVA::TMVARegGui ; (; const char * ; fName = ""TMVAReg.root"", . TString ; dataset = """" . ). ◆ training_history(). void TMVA::training_history ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . Bool_t ; useTMVAStyle = kTRUE . ). ◆ variables(). void TMVA::variables ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . TString ; dirName = ""InputVariables_Id"", . TString ; title = ""TMVA Input Variables"", . Bool_t ; isRegression = kFALSE, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ variablesMultiClass(). void TMVA::variablesMultiClass ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . TString ; dirName = ""InputVariables_Id"", . TString ; title = ""TMVA Input Variables"", . Bool_t ; isRegression = kFALSE, . Bool_t ; useTMVAStyle = kTRUE . ). TMVA. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:43421,Modifiability,variab,variablesMultiClass,43421,"ataset, . TString ; fin, . Int_t ; Nevt = -1, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ rulevis(). void TMVA::rulevis ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ rulevisCorr() [1/2]. void TMVA::rulevisCorr ; (; TDirectory * ; rfdir, . TDirectory * ; vardir, . TDirectory * ; corrdir, . TMVAGlob::TypeOfPlot ; type . ). ◆ rulevisCorr() [2/2]. void TMVA::rulevisCorr ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ rulevisHists() [1/2]. void TMVA::rulevisHists ; (; TDirectory * ; rfdir, . TDirectory * ; vardir, . TDirectory * ; corrdir, . TMVAGlob::TypeOfPlot ; type . ). ◆ rulevisHists() [2/2]. void TMVA::rulevisHists ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ TMVAGui(). void TMVA::TMVAGui ; (; const char * ; fName = ""TMVA.root"", . TString ; dataset = """" . ). ◆ TMVAMultiClassGui(). void TMVA::TMVAMultiClassGui ; (; const char * ; fName = ""TMVAMulticlass.root"", . TString ; dataset = """" . ). ◆ TMVARegGui(). void TMVA::TMVARegGui ; (; const char * ; fName = ""TMVAReg.root"", . TString ; dataset = """" . ). ◆ training_history(). void TMVA::training_history ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . Bool_t ; useTMVAStyle = kTRUE . ). ◆ variables(). void TMVA::variables ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . TString ; dirName = ""InputVariables_Id"", . TString ; title = ""TMVA Input Variables"", . Bool_t ; isRegression = kFALSE, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ variablesMultiClass(). void TMVA::variablesMultiClass ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . TString ; dirName = ""InputVariables_Id"", . TString ; title = ""TMVA Input Variables"", . Bool_t ; isRegression = kFALSE, . Bool_t ; useTMVAStyle = kTRUE . ). TMVA. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:43455,Modifiability,variab,variablesMultiClass,43455,"ataset, . TString ; fin, . Int_t ; Nevt = -1, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ rulevis(). void TMVA::rulevis ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ rulevisCorr() [1/2]. void TMVA::rulevisCorr ; (; TDirectory * ; rfdir, . TDirectory * ; vardir, . TDirectory * ; corrdir, . TMVAGlob::TypeOfPlot ; type . ). ◆ rulevisCorr() [2/2]. void TMVA::rulevisCorr ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ rulevisHists() [1/2]. void TMVA::rulevisHists ; (; TDirectory * ; rfdir, . TDirectory * ; vardir, . TDirectory * ; corrdir, . TMVAGlob::TypeOfPlot ; type . ). ◆ rulevisHists() [2/2]. void TMVA::rulevisHists ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ TMVAGui(). void TMVA::TMVAGui ; (; const char * ; fName = ""TMVA.root"", . TString ; dataset = """" . ). ◆ TMVAMultiClassGui(). void TMVA::TMVAMultiClassGui ; (; const char * ; fName = ""TMVAMulticlass.root"", . TString ; dataset = """" . ). ◆ TMVARegGui(). void TMVA::TMVARegGui ; (; const char * ; fName = ""TMVAReg.root"", . TString ; dataset = """" . ). ◆ training_history(). void TMVA::training_history ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . Bool_t ; useTMVAStyle = kTRUE . ). ◆ variables(). void TMVA::variables ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . TString ; dirName = ""InputVariables_Id"", . TString ; title = ""TMVA Input Variables"", . Bool_t ; isRegression = kFALSE, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ variablesMultiClass(). void TMVA::variablesMultiClass ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . TString ; dirName = ""InputVariables_Id"", . TString ; title = ""TMVA Input Variables"", . Bool_t ; isRegression = kFALSE, . Bool_t ; useTMVAStyle = kTRUE . ). TMVA. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:1599,Performance,perform,perform,1599,"le Binary search tree including a volume search method. More...;  ; class  BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  CCTreeWrapper;  ; class  ClassifierFactory;  This is the MVA factory. More...;  ; class  ClassInfo;  Class that contains all the information of a class. More...;  ; class  Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  Configurable;  ; class  ConvergenceTest;  Check for convergence. More...;  ; class  CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  CrossValidationFoldResult;  ; class  CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  CvSplit;  ; class  CvSplitKFolds;  ; class  CvSplitKFoldsExpr;  ; class  DataInputHandler;  Class that contains all the data information. More...;  ; class  DataLoader;  ; class  DataSet;  Class that contains all the data information. More...;  ; class  DataSetFactory;  Class that contains all the data information. More...;  ; class  DataSetInfo;  Class that contains all the data information. More...;  ; class  DataSetManager;  Class that contains all the data information. More...;  ; class  DecisionTree;  Implementation of a Decision Tree. More...;  ; class  DecisionTreeNode;  ; struct  DeleteFunctor_t;  ; class  DTNodeTrainingInfo;  ; class  Envelope;  Abstract base class ",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:1613,Security,validat,validation,1613,"le Binary search tree including a volume search method. More...;  ; class  BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  CCTreeWrapper;  ; class  ClassifierFactory;  This is the MVA factory. More...;  ; class  ClassInfo;  Class that contains all the information of a class. More...;  ; class  Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  Configurable;  ; class  ConvergenceTest;  Check for convergence. More...;  ; class  CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  CrossValidationFoldResult;  ; class  CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  CvSplit;  ; class  CvSplitKFolds;  ; class  CvSplitKFoldsExpr;  ; class  DataInputHandler;  Class that contains all the data information. More...;  ; class  DataLoader;  ; class  DataSet;  Class that contains all the data information. More...;  ; class  DataSetFactory;  Class that contains all the data information. More...;  ; class  DataSetInfo;  Class that contains all the data information. More...;  ; class  DataSetManager;  Class that contains all the data information. More...;  ; class  DecisionTree;  Implementation of a Decision Tree. More...;  ; class  DecisionTreeNode;  ; struct  DeleteFunctor_t;  ; class  DTNodeTrainingInfo;  ; class  Envelope;  Abstract base class ",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:1777,Security,validat,validation,1777,"e class for BinarySearch and Decision Trees. More...;  ; class  CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  CCTreeWrapper;  ; class  ClassifierFactory;  This is the MVA factory. More...;  ; class  ClassInfo;  Class that contains all the information of a class. More...;  ; class  Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  Configurable;  ; class  ConvergenceTest;  Check for convergence. More...;  ; class  CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  CrossValidationFoldResult;  ; class  CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  CvSplit;  ; class  CvSplitKFolds;  ; class  CvSplitKFoldsExpr;  ; class  DataInputHandler;  Class that contains all the data information. More...;  ; class  DataLoader;  ; class  DataSet;  Class that contains all the data information. More...;  ; class  DataSetFactory;  Class that contains all the data information. More...;  ; class  DataSetInfo;  Class that contains all the data information. More...;  ; class  DataSetManager;  Class that contains all the data information. More...;  ; class  DecisionTree;  Implementation of a Decision Tree. More...;  ; class  DecisionTreeNode;  ; struct  DeleteFunctor_t;  ; class  DTNodeTrainingInfo;  ; class  Envelope;  Abstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP. More...;  ; class  Event;  ; class  Executor;  Base Executor class. More...;  ; class  ExpectedErrorPrune",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:17502,Testability,log,log,17502,"_Id"", TString title=""TMVA Input Variable"", Bool_t isRegression=kFALSE, Bool_t useTMVAStyle=kTRUE);  ; void correlationscattersMultiClass (TString dataset, TString fin=""TMVA.root"", TString var=""var3"", TString dirName_=""InputVariables_Id"", TString title=""TMVA Input Variable"", Bool_t isRegression=kFALSE, Bool_t useTMVAStyle=kTRUE);  ; void correlationsMultiClass (TString dataset, TString fin=""TMVA.root"", Bool_t isRegression=kFALSE, Bool_t greyScale=kFALSE, Bool_t useTMVAStyle=kTRUE);  ; void CorrGui (TString dataset, TString fin=""TMVA.root"", TString dirName=""InputVariables_Id"", TString title=""TMVA Input Variable"", Bool_t isRegression=kFALSE);  ; void CorrGui_DeleteTBar ();  ; void CorrGuiMultiClass (TString dataset, TString fin=""TMVA.root"", TString dirName=""InputVariables_Id"", TString title=""TMVA Input Variable"", Bool_t isRegression=kFALSE);  ; void CorrGuiMultiClass_DeleteTBar ();  ; void CreateVariableTransforms (const TString &trafoDefinition, TMVA::DataSetInfo &dataInfo, TMVA::TransformationHandler &transformationHandler, TMVA::MsgLogger &log);  ; void DataLoaderCopy (TMVA::DataLoader *des, TMVA::DataLoader *src);  ; template<class T > ; DeleteFunctor_t< const T > DeleteFunctor ();  ; void deviations (TString dataset, TString fin=""TMVAReg.root"", HistType htype=kMVAType, Bool_t showTarget=kTRUE, Bool_t useTMVAStyle=kTRUE);  ; void draw_activation (TCanvas *c, Double_t cx, Double_t cy, Double_t radx, Double_t rady, Int_t whichActivation);  ; void draw_input_labels (TString dataset, Int_t nInputs, Double_t *cy, Double_t rad, Double_t layerWidth);  ; void draw_layer (TString dataset, TCanvas *c, TH2F *h, Int_t iHist, Int_t nLayers, Double_t maxWeight);  ; void draw_layer_labels (Int_t nLayers);  ; void draw_network (TString dataset, TFile *f, TDirectory *d, const TString &hName=""weights_hist"", Bool_t movieMode=kFALSE, const TString &epoch="""");  ; void draw_synapse (Double_t cx1, Double_t cy1, Double_t cx2, Double_t cy2, Double_t rad1, Double_t rad2, Double_t weightNorme",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:29939,Testability,log,log,29939,"ltiClass(). void TMVA::correlationsMultiClass ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . Bool_t ; isRegression = kFALSE, . Bool_t ; greyScale = kFALSE, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ CorrGui(). void TMVA::CorrGui ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . TString ; dirName = ""InputVariables_Id"", . TString ; title = ""TMVA Input Variable"", . Bool_t ; isRegression = kFALSE . ). ◆ CorrGui_DeleteTBar(). void TMVA::CorrGui_DeleteTBar ; (; ). ◆ CorrGuiMultiClass(). void TMVA::CorrGuiMultiClass ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . TString ; dirName = ""InputVariables_Id"", . TString ; title = ""TMVA Input Variable"", . Bool_t ; isRegression = kFALSE . ). ◆ CorrGuiMultiClass_DeleteTBar(). void TMVA::CorrGuiMultiClass_DeleteTBar ; (; ). ◆ CreateVariableTransforms(). void TMVA::CreateVariableTransforms ; (; const TString & ; trafoDefinition, . TMVA::DataSetInfo & ; dataInfo, . TMVA::TransformationHandler & ; transformationHandler, . TMVA::MsgLogger & ; log . ). Definition at line 59 of file VariableTransform.cxx. ◆ DataLoaderCopy(). void TMVA::DataLoaderCopy ; (; TMVA::DataLoader * ; des, . TMVA::DataLoader * ; src . ). ◆ DeleteFunctor(). template<class T > . DeleteFunctor_t< const T > TMVA::DeleteFunctor ; (; ). Definition at line 78 of file DataSetFactory.h. ◆ deviations(). void TMVA::deviations ; (; TString ; dataset, . TString ; fin = ""TMVAReg.root"", . HistType ; htype = kMVAType, . Bool_t ; showTarget = kTRUE, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ draw_activation(). void TMVA::draw_activation ; (; TCanvas * ; c, . Double_t ; cx, . Double_t ; cy, . Double_t ; radx, . Double_t ; rady, . Int_t ; whichActivation . ). ◆ draw_input_labels(). void TMVA::draw_input_labels ; (; TString ; dataset, . Int_t ; nInputs, . Double_t * ; cy, . Double_t ; rad, . Double_t ; layerWidth . ). ◆ draw_layer(). void TMVA::draw_layer ; (; TString ; dataset, . TCanvas * ; c, . TH2F * ; h, . Int_t ; iHist, . Int_t ; nLayers, . Double_t ; maxWeight",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:606,Usability,simpl,simple,606,". ROOT: TMVA Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Functions ; TMVA Namespace Reference. create variable transformations ; More... Namespaces; namespace  DNN;  ; namespace  Experimental;  ; namespace  Internal;  ; namespace  kNN;  ; namespace  TMVAGlob;  . Classes; class  AbsoluteDeviationLossFunction;  Absolute Deviation Loss Function. More...;  ; class  AbsoluteDeviationLossFunctionBDT;  Absolute Deviation BDT Loss Function. More...;  ; class  AbsValue;  ; class  BDTEventWrapper;  ; class  BinarySearchTree;  A simple Binary search tree including a volume search method. More...;  ; class  BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  CCTreeWrapper;  ; class  ClassifierFactory;  This is the MVA factory. More...;  ; class  ClassInfo;  Class that contains all the information of a class. More...;  ; class  Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  Configurable;  ; class  ConvergenceTest;  Check for convergence. More...;  ; class  CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  CrossValidationFoldResult;  ; class  CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  CvSplit;  ; class  CvSplitKFolds;  ; class  CvSplitKFoldsExpr;  ; class  ",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA.html:6137,Usability,simpl,simple,6137,"0;  ; class  MethodCategory;  Class for categorizing the phase space. More...;  ; class  MethodCFMlpANN;  Interface to Clermond-Ferrand artificial neural network. More...;  ; class  MethodCFMlpANN_Utils;  Implementation of Clermond-Ferrand artificial neural network. More...;  ; class  MethodCompositeBase;  Virtual base class for combining several TMVA method. More...;  ; class  MethodCrossValidation;  ; class  MethodCuts;  Multivariate optimisation of signal efficiency for given background efficiency, applying rectangular minimum and maximum requirements. More...;  ; class  MethodDL;  ; class  MethodDNN;  Deep Neural Network Implementation. More...;  ; class  MethodDT;  Analysis of Boosted Decision Trees. More...;  ; class  MethodFDA;  Function discriminant analysis (FDA). More...;  ; class  MethodFisher;  Fisher and Mahalanobis Discriminants (Linear Discriminant Analysis) More...;  ; class  MethodHMatrix;  H-Matrix method, which is implemented as a simple comparison of chi-squared estimators for signal and background, taking into account the linear correlations between the input variables. More...;  ; class  MethodInfo;  ; class  MethodKNN;  Analysis of k-nearest neighbor. More...;  ; class  MethodLD;  Linear Discriminant. More...;  ; class  MethodLikelihood;  Likelihood analysis (""non-parametric approach"") More...;  ; class  MethodMLP;  Multilayer Perceptron class built off of MethodANNBase. More...;  ; class  MethodPDEFoam;  The PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density. More...;  ; class  MethodPDERS;  This is a generalization of the above Likelihood methods to \( N_{var} \) dimensions, where \( N_{var} \) is the number of input variables used in the MVA. More...;  ; class  MethodPyAdaBoost;  ; class  MethodPyGTB;  ; class  MethodPyKeras;  ; class  MethodPyRandomForest;  ; class  MethodPyTorch;  ; class  MethodRSNNS;  ; class  Method",MatchSource.WIKI,doc/v632/namespaceTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:5733,Availability,error,error,5733,"SoftmaxCrossEntropy = 'S'; };  Enum that represents objective functions for the net, i.e. More...;  ; enum class  EnumFunction { ;   ZERO = '0'; , LINEAR = 'L'; , TANH = 'T'; , RELU = 'R'; , ;   SYMMRELU = 'r'; , TANHSHIFT = 't'; , SIGMOID = 's'; , SOFTSIGN = 'S'; , ;   GAUSS = 'G'; , GAUSSCOMPLEMENT = 'C'. };  ; enum class  EnumRegularization { NONE; , L1; , L2; , L1MAX; };  ; enum class  EOptimizer { ;   kSGD = 0; , kAdam = 1; , kAdagrad = 2; , kRMSProp = 3; , ;   kAdadelta = 4. };  Enum representing the optimizer used for training. More...;  ; enum class  EOutputFunction { kIdentity = 'I'; , kSigmoid = 'S'; , kSoftmax = 'M'; };  Enum that represents output functions. More...;  ; enum class  ERegularization { kNone = '0'; , kL1 = '1'; , kL2 = '2'; };  Enum representing the regularization type applied for a given layer. More...;  ; enum  MinimizerType { fSteepest; };  < list all the minimizer types More...;  ; enum class  ModeErrorFunction { SUMOFSQUARES = 'S'; , CROSSENTROPY = 'C'; , CROSSENTROPY_MUTUALEXCLUSIVE = 'M'; };  error functions to be chosen from More...;  ; enum class  ModeOutput { FETCH; };  ; enum class  ModeOutputValues : int { DIRECT = 0x01; , SIGMOID = 0x02; , SOFTMAX = 0x04; , BATCHNORMALIZATION = 0x08; };  ; enum class  WeightInitializationStrategy { XAVIER; , TEST; , LAYERSIZE; , XAVIERUNIFORM; };  weight initialization strategies to be chosen from More...;  . Functions; template<typename Architecture_t > ; void addRegularizationGradients (typename Architecture_t::Matrix_t &A, const typename Architecture_t::Matrix_t &W, typename Architecture_t::Scalar_t weightDecay, ERegularization R);  Add the regularization gradient corresponding to weight matrix W, to the matrix A. ;  ; template<typename ItValue , typename Fnc > ; void applyFunctions (ItValue itValue, ItValue itValueEnd, Fnc fnc);  apply the activation functions ;  ; template<typename ItValue , typename Fnc , typename InvFnc , typename ItGradient > ; void applyFunctions (ItValue itValue, ItVa",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:8517,Availability,error,error,8517,"egin, ItTarget itTargetEnd);  ; template<bool HasDropOut, typename ItSource , typename ItWeight , typename ItTarget , typename ItDrop > ; void applyWeights (ItSource itSourceBegin, ItSource itSourceEnd, ItWeight itWeight, ItTarget itTargetBegin, ItTarget itTargetEnd, ItDrop itDrop);  apply weights using drop-out; for no drop out, provide (&bool = true) to itDrop such that *itDrop becomes ""true"" ;  ; template<typename ItSource , typename ItWeight , typename ItPrev > ; void applyWeightsBackwards (ItSource itCurrBegin, ItSource itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd);  ; template<bool HasDropOut, typename ItSource , typename ItWeight , typename ItPrev , typename ItDrop > ; void applyWeightsBackwards (ItSource itCurrBegin, ItSource itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd, ItDrop itDrop);  apply weights backwards (for backprop); for no drop out, provide (&bool = true) to itDrop such that *itDrop becomes ""true"" ;  ; template<typename LAYERDATA > ; void backward (LAYERDATA &prevLayerData, LAYERDATA &currLayerData);  backward application of the weights (back-propagation of the error) ;  ; template<EnumRegularization Regularization> ; double computeRegularization (double weight, const double &factorWeightDecay);  compute the regularization (L1, L2) ;  ; template<> ; double computeRegularization< EnumRegularization::L1 > (double weight, const double &factorWeightDecay);  ; template<> ; double computeRegularization< EnumRegularization::L2 > (double weight, const double &factorWeightDecay);  ; template<typename ItProbability , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double crossEntropy (ItProbability itProbabilityBegin, ItProbability itProbabilityEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc, double patternWeight);  cross entropy error function ;  ; void cudaError (cudaError_t code, const char *file, int line, bool abort=true);  Function to check cuda return code.",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:9241,Availability,error,error,9241,"egin, ItTarget itTargetEnd);  ; template<bool HasDropOut, typename ItSource , typename ItWeight , typename ItTarget , typename ItDrop > ; void applyWeights (ItSource itSourceBegin, ItSource itSourceEnd, ItWeight itWeight, ItTarget itTargetBegin, ItTarget itTargetEnd, ItDrop itDrop);  apply weights using drop-out; for no drop out, provide (&bool = true) to itDrop such that *itDrop becomes ""true"" ;  ; template<typename ItSource , typename ItWeight , typename ItPrev > ; void applyWeightsBackwards (ItSource itCurrBegin, ItSource itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd);  ; template<bool HasDropOut, typename ItSource , typename ItWeight , typename ItPrev , typename ItDrop > ; void applyWeightsBackwards (ItSource itCurrBegin, ItSource itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd, ItDrop itDrop);  apply weights backwards (for backprop); for no drop out, provide (&bool = true) to itDrop such that *itDrop becomes ""true"" ;  ; template<typename LAYERDATA > ; void backward (LAYERDATA &prevLayerData, LAYERDATA &currLayerData);  backward application of the weights (back-propagation of the error) ;  ; template<EnumRegularization Regularization> ; double computeRegularization (double weight, const double &factorWeightDecay);  compute the regularization (L1, L2) ;  ; template<> ; double computeRegularization< EnumRegularization::L1 > (double weight, const double &factorWeightDecay);  ; template<> ; double computeRegularization< EnumRegularization::L2 > (double weight, const double &factorWeightDecay);  ; template<typename ItProbability , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double crossEntropy (ItProbability itProbabilityBegin, ItProbability itProbabilityEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc, double patternWeight);  cross entropy error function ;  ; void cudaError (cudaError_t code, const char *file, int line, bool abort=true);  Function to check cuda return code.",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:12729,Availability,error,error,12729,,MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:13408,Availability,error,error,13408,,MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:14616,Availability,error,error,14616,"double studenttDouble (double distributionParameter);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, InvFnc invFnc, double patternWeight);  sum of squares error function ;  ; template<typename Container , typename T > ; void uniformDouble (Container &container, T maxValue);  ; double uniformDouble (double minValue, double maxValue);  ; template<typename T > ; T uniformFromTo (T from, T to);  ; template<typename LAYERDATA > ; void update (const LAYERDATA &prevLayerData, LAYERDATA &currLayerData, double factorWeightDecay, EnumRegularization regularization);  update the node values ;  ; template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient);  update the gradients ;  ; template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient, ItWeight itWeight, double weightDecay);  update the gradients, using regularization ;  ; template<typename ItWeight > ; double weightDecay (double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, EnumRegularization eRegularization);  compute the weight decay for regularization (L1 or L2) ;  .",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:21949,Availability,error,error,21949,"larization. enum class TMVA::DNN::EnumRegularization. strong . EnumeratorNONE ; L1 ; L2 ; L1MAX . Definition at line 172 of file NeuralNet.h. ◆ EOptimizer. enum class TMVA::DNN::EOptimizer. strong . Enum representing the optimizer used for training. . EnumeratorkSGD ; kAdam ; kAdagrad ; kRMSProp ; kAdadelta . Definition at line 82 of file Functions.h. ◆ EOutputFunction. enum class TMVA::DNN::EOutputFunction. strong . Enum that represents output functions. . EnumeratorkIdentity ; kSigmoid ; kSoftmax . Definition at line 45 of file Functions.h. ◆ ERegularization. enum class TMVA::DNN::ERegularization. strong . Enum representing the regularization type applied for a given layer. . EnumeratorkNone ; kL1 ; kL2 . Definition at line 64 of file Functions.h. ◆ MinimizerType. enum TMVA::DNN::MinimizerType. < list all the minimizer types . EnumeratorfSteepest SGD. . Definition at line 320 of file NeuralNet.h. ◆ ModeErrorFunction. enum class TMVA::DNN::ModeErrorFunction. strong . error functions to be chosen from . EnumeratorSUMOFSQUARES ; CROSSENTROPY ; CROSSENTROPY_MUTUALEXCLUSIVE . Definition at line 1038 of file NeuralNet.h. ◆ ModeOutput. enum class TMVA::DNN::ModeOutput. strong . EnumeratorFETCH . Definition at line 1029 of file NeuralNet.h. ◆ ModeOutputValues. enum class TMVA::DNN::ModeOutputValues : int. strong . EnumeratorDIRECT ; SIGMOID ; SOFTMAX ; BATCHNORMALIZATION . Definition at line 178 of file NeuralNet.h. ◆ WeightInitializationStrategy. enum class TMVA::DNN::WeightInitializationStrategy. strong . weight initialization strategies to be chosen from . EnumeratorXAVIER ; TEST ; LAYERSIZE ; XAVIERUNIFORM . Definition at line 1049 of file NeuralNet.h. Function Documentation. ◆ addRegularizationGradients(). template<typename Architecture_t > . void TMVA::DNN::addRegularizationGradients ; (; typename Architecture_t::Matrix_t & ; A, . const typename Architecture_t::Matrix_t & ; W, . typename Architecture_t::Scalar_t ; weightDecay, . ERegularization ; R . ). inline . Add",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:26079,Availability,error,error,26079," TMVA::DNN::applyWeightsBackwards ; (; ItSource ; itCurrBegin, . ItSource ; itCurrEnd, . ItWeight ; itWeight, . ItPrev ; itPrevBegin, . ItPrev ; itPrevEnd . ). ◆ applyWeightsBackwards() [2/2]. template<bool HasDropOut, typename ItSource , typename ItWeight , typename ItPrev , typename ItDrop > . void TMVA::DNN::applyWeightsBackwards ; (; ItSource ; itCurrBegin, . ItSource ; itCurrEnd, . ItWeight ; itWeight, . ItPrev ; itPrevBegin, . ItPrev ; itPrevEnd, . ItDrop ; itDrop . ). apply weights backwards (for backprop); for no drop out, provide (&bool = true) to itDrop such that *itDrop becomes ""true"" ; itDrop correlates with itPrev (to be in agreement with ""applyWeights"" where it correlates with itSources (same node as itTarget here in applyBackwards) ; Definition at line 118 of file NeuralNet.icc. ◆ backward(). template<typename LAYERDATA > . void TMVA::DNN::backward ; (; LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData . ). backward application of the weights (back-propagation of the error) ; Definition at line 572 of file NeuralNet.icc. ◆ computeRegularization(). template<EnumRegularization Regularization> . double TMVA::DNN::computeRegularization ; (; double ; weight, . const double & ; factorWeightDecay . ). inline . compute the regularization (L1, L2) ; Definition at line 209 of file NeuralNet.icc. ◆ computeRegularization< EnumRegularization::L1 >(). template<> . double TMVA::DNN::computeRegularization< EnumRegularization::L1 > ; (; double ; weight, . const double & ; factorWeightDecay . ). inline . Definition at line 219 of file NeuralNet.icc. ◆ computeRegularization< EnumRegularization::L2 >(). template<> . double TMVA::DNN::computeRegularization< EnumRegularization::L2 > ; (; double ; weight, . const double & ; factorWeightDecay . ). inline . Definition at line 226 of file NeuralNet.icc. ◆ crossEntropy(). template<typename ItProbability , typename ItTruth , typename ItDelta , typename ItInvActFnc > . double TMVA::DNN::crossEntropy ; (; ItProbability ; ",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:27276,Availability,error,error,27276,"ghtDecay . ). inline . compute the regularization (L1, L2) ; Definition at line 209 of file NeuralNet.icc. ◆ computeRegularization< EnumRegularization::L1 >(). template<> . double TMVA::DNN::computeRegularization< EnumRegularization::L1 > ; (; double ; weight, . const double & ; factorWeightDecay . ). inline . Definition at line 219 of file NeuralNet.icc. ◆ computeRegularization< EnumRegularization::L2 >(). template<> . double TMVA::DNN::computeRegularization< EnumRegularization::L2 > ; (; double ; weight, . const double & ; factorWeightDecay . ). inline . Definition at line 226 of file NeuralNet.icc. ◆ crossEntropy(). template<typename ItProbability , typename ItTruth , typename ItDelta , typename ItInvActFnc > . double TMVA::DNN::crossEntropy ; (; ItProbability ; itProbabilityBegin, . ItProbability ; itProbabilityEnd, . ItTruth ; itTruthBegin, . ItTruth ; , . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . ItInvActFnc ; , . double ; patternWeight . ). cross entropy error function ; Definition at line 412 of file NeuralNet.icc. ◆ cudaError(). void TMVA::DNN::cudaError ; (; cudaError_t ; code, . const char * ; file, . int ; line, . bool ; abort = true . ). inline . Function to check cuda return code. ; Taken from http://stackoverflow.com/questions/14038589/ ; Definition at line 198 of file CudaMatrix.h. ◆ CurandInitializationKernel(). __global__ void TMVA::DNN::CurandInitializationKernel ; (; unsigned long long ; seed, . curandState_t * ; state . ). Definition at line 26 of file CudaMatrix.cu. ◆ debugTensor(). template<typename Architecture > . auto TMVA::DNN::debugTensor ; (; const typename Architecture::Tensor_t & ; A, . const std::string ; name = ""tensor"" . ); -> void. Definition at line 582 of file GeneralLayer.h. ◆ evaluate() [1/3]. template<typename Architecture_t > . auto TMVA::DNN::evaluate ; (; ELossFunction ; f, . const typename Architecture_t::Matrix_t & ; Y, . const typename Architecture_t::Matrix_t & ; output, . const typename Architecture_t::Matrix_t & ; w",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:32808,Availability,error,error,32808,"alues TMVA::DNN::operator|= ; (; ModeOutputValues & ; lhs, . ModeOutputValues ; rhs . ). inline . Definition at line 193 of file NeuralNet.h. ◆ randomInt(). int TMVA::DNN::randomInt ; (; int ; maxValue). Definition at line 52 of file NeuralNet.cxx. ◆ regularization(). template<typename Architecture_t > . auto TMVA::DNN::regularization ; (; const typename Architecture_t::Matrix_t & ; A, . ERegularization ; R . ); -> decltype(Architecture_t::L1Regularization(A)). inline . Evaluate the regularization functional for a given weight matrix. ; Definition at line 238 of file Functions.h. ◆ softMaxCrossEntropy(). template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > . double TMVA::DNN::softMaxCrossEntropy ; (; ItOutput ; itProbabilityBegin, . ItOutput ; itProbabilityEnd, . ItTruth ; itTruthBegin, . ItTruth ; , . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . ItInvActFnc ; , . double ; patternWeight . ). soft-max-cross-entropy error function (for mutual exclusive cross-entropy) ; Definition at line 458 of file NeuralNet.icc. ◆ studenttDouble(). double TMVA::DNN::studenttDouble ; (; double ; distributionParameter). Definition at line 60 of file NeuralNet.cxx. ◆ sumOfSquares() [1/2]. template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > . double TMVA::DNN::sumOfSquares ; (; ItOutput ; itOutputBegin, . ItOutput ; itOutputEnd, . ItTruth ; itTruthBegin, . ItTruth ; itTruthEnd, . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . ItInvActFnc ; itInvActFnc, . double ; patternWeight . ). ◆ sumOfSquares() [2/2]. template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > . double TMVA::DNN::sumOfSquares ; (; ItOutput ; itOutputBegin, . ItOutput ; itOutputEnd, . ItTruth ; itTruthBegin, . ItTruth ; , . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . InvFnc ; invFnc, . double ; patternWeight . ). sum of squares error function ; Definition at line 382 of file NeuralNet.icc. ◆ uniformDouble() [1/2]. templa",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:33750,Availability,error,error,33750,"rnWeight . ). soft-max-cross-entropy error function (for mutual exclusive cross-entropy) ; Definition at line 458 of file NeuralNet.icc. ◆ studenttDouble(). double TMVA::DNN::studenttDouble ; (; double ; distributionParameter). Definition at line 60 of file NeuralNet.cxx. ◆ sumOfSquares() [1/2]. template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > . double TMVA::DNN::sumOfSquares ; (; ItOutput ; itOutputBegin, . ItOutput ; itOutputEnd, . ItTruth ; itTruthBegin, . ItTruth ; itTruthEnd, . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . ItInvActFnc ; itInvActFnc, . double ; patternWeight . ). ◆ sumOfSquares() [2/2]. template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > . double TMVA::DNN::sumOfSquares ; (; ItOutput ; itOutputBegin, . ItOutput ; itOutputEnd, . ItTruth ; itTruthBegin, . ItTruth ; , . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . InvFnc ; invFnc, . double ; patternWeight . ). sum of squares error function ; Definition at line 382 of file NeuralNet.icc. ◆ uniformDouble() [1/2]. template<typename Container , typename T > . void TMVA::DNN::uniformDouble ; (; Container & ; container, . T ; maxValue . ). Definition at line 42 of file NeuralNet.icc. ◆ uniformDouble() [2/2]. double TMVA::DNN::uniformDouble ; (; double ; minValue, . double ; maxValue . ). Definition at line 43 of file NeuralNet.cxx. ◆ uniformFromTo(). template<typename T > . T TMVA::DNN::uniformFromTo ; (; T ; from, . T ; to . ). Definition at line 34 of file NeuralNet.icc. ◆ update() [1/3]. template<typename LAYERDATA > . void TMVA::DNN::update ; (; const LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData, . double ; factorWeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; ",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:35605,Availability,error,error,35605,"icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient, . ItWeight ; itWeight, . double ; weightDecay . ). update the gradients, using regularization ; Definition at line 237 of file NeuralNet.icc. ◆ weightDecay(). template<typename ItWeight > . double TMVA::DNN::weightDecay ; (; double ; error, . ItWeight ; itWeight, . ItWeight ; itWeightEnd, . double ; factorWeightDecay, . EnumRegularization ; eRegularization . ). compute the weight decay for regularization (L1 or L2) ; Definition at line 498 of file NeuralNet.icc. Variable Documentation. ◆ Gauss. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Gauss = std::make_shared<std::function<double(double)>> ([](double value){ const double s = 6.0; return exp (-std::pow(value*s,2.0)); }). Definition at line 12 of file NeuralNet.cxx. ◆ GaussComplement. std::shared_ptr< std::function< double(double)> > TMVA::DNN::GaussComplement = std::make_shared<std::function<double(double)>> ([](double value){ const double s = 6.0; return 1.0 - exp (-std::pow(value*s,2.0)); }). Definition at line 13 of file NeuralNet.cxx. ◆ InvGauss. std::shared_ptr< std::function< double(double)> > TMVA::DNN::InvGauss = std::make_shared<std::function<double(double)>> ([](double value){ const double s = 6.0; return -2.0 * value ",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:13687,Deployability,update,update,13687,"atternWeight);  soft-max-cross-entropy error function (for mutual exclusive cross-entropy) ;  ; double studenttDouble (double distributionParameter);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, InvFnc invFnc, double patternWeight);  sum of squares error function ;  ; template<typename Container , typename T > ; void uniformDouble (Container &container, T maxValue);  ; double uniformDouble (double minValue, double maxValue);  ; template<typename T > ; T uniformFromTo (T from, T to);  ; template<typename LAYERDATA > ; void update (const LAYERDATA &prevLayerData, LAYERDATA &currLayerData, double factorWeightDecay, EnumRegularization regularization);  update the node values ;  ; template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient);  update the gradients ;  ; template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient, ItWeight itWeight, double weightDecay);  update the gradients, using regularization ;  ; template<typename ItWeight > ; double weightDecay (double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, E",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:13816,Deployability,update,update,13816,"double studenttDouble (double distributionParameter);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, InvFnc invFnc, double patternWeight);  sum of squares error function ;  ; template<typename Container , typename T > ; void uniformDouble (Container &container, T maxValue);  ; double uniformDouble (double minValue, double maxValue);  ; template<typename T > ; T uniformFromTo (T from, T to);  ; template<typename LAYERDATA > ; void update (const LAYERDATA &prevLayerData, LAYERDATA &currLayerData, double factorWeightDecay, EnumRegularization regularization);  update the node values ;  ; template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient);  update the gradients ;  ; template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient, ItWeight itWeight, double weightDecay);  update the gradients, using regularization ;  ; template<typename ItWeight > ; double weightDecay (double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, EnumRegularization eRegularization);  compute the weight decay for regularization (L1 or L2) ;  .",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:13949,Deployability,update,update,13949,"double studenttDouble (double distributionParameter);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, InvFnc invFnc, double patternWeight);  sum of squares error function ;  ; template<typename Container , typename T > ; void uniformDouble (Container &container, T maxValue);  ; double uniformDouble (double minValue, double maxValue);  ; template<typename T > ; T uniformFromTo (T from, T to);  ; template<typename LAYERDATA > ; void update (const LAYERDATA &prevLayerData, LAYERDATA &currLayerData, double factorWeightDecay, EnumRegularization regularization);  update the node values ;  ; template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient);  update the gradients ;  ; template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient, ItWeight itWeight, double weightDecay);  update the gradients, using regularization ;  ; template<typename ItWeight > ; double weightDecay (double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, EnumRegularization eRegularization);  compute the weight decay for regularization (L1 or L2) ;  .",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:14117,Deployability,update,update,14117,"double studenttDouble (double distributionParameter);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, InvFnc invFnc, double patternWeight);  sum of squares error function ;  ; template<typename Container , typename T > ; void uniformDouble (Container &container, T maxValue);  ; double uniformDouble (double minValue, double maxValue);  ; template<typename T > ; T uniformFromTo (T from, T to);  ; template<typename LAYERDATA > ; void update (const LAYERDATA &prevLayerData, LAYERDATA &currLayerData, double factorWeightDecay, EnumRegularization regularization);  update the node values ;  ; template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient);  update the gradients ;  ; template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient, ItWeight itWeight, double weightDecay);  update the gradients, using regularization ;  ; template<typename ItWeight > ; double weightDecay (double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, EnumRegularization eRegularization);  compute the weight decay for regularization (L1 or L2) ;  .",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:14303,Deployability,update,update,14303,"double studenttDouble (double distributionParameter);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, InvFnc invFnc, double patternWeight);  sum of squares error function ;  ; template<typename Container , typename T > ; void uniformDouble (Container &container, T maxValue);  ; double uniformDouble (double minValue, double maxValue);  ; template<typename T > ; T uniformFromTo (T from, T to);  ; template<typename LAYERDATA > ; void update (const LAYERDATA &prevLayerData, LAYERDATA &currLayerData, double factorWeightDecay, EnumRegularization regularization);  update the node values ;  ; template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient);  update the gradients ;  ; template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient, ItWeight itWeight, double weightDecay);  update the gradients, using regularization ;  ; template<typename ItWeight > ; double weightDecay (double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, EnumRegularization eRegularization);  compute the weight decay for regularization (L1 or L2) ;  .",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:14510,Deployability,update,update,14510,"double studenttDouble (double distributionParameter);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, InvFnc invFnc, double patternWeight);  sum of squares error function ;  ; template<typename Container , typename T > ; void uniformDouble (Container &container, T maxValue);  ; double uniformDouble (double minValue, double maxValue);  ; template<typename T > ; T uniformFromTo (T from, T to);  ; template<typename LAYERDATA > ; void update (const LAYERDATA &prevLayerData, LAYERDATA &currLayerData, double factorWeightDecay, EnumRegularization regularization);  update the node values ;  ; template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient);  update the gradients ;  ; template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient, ItWeight itWeight, double weightDecay);  update the gradients, using regularization ;  ; template<typename ItWeight > ; double weightDecay (double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, EnumRegularization eRegularization);  compute the weight decay for regularization (L1 or L2) ;  .",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:34305,Deployability,update,update,34305,"tDelta, . ItDelta ; itDeltaEnd, . ItInvActFnc ; itInvActFnc, . double ; patternWeight . ). ◆ sumOfSquares() [2/2]. template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > . double TMVA::DNN::sumOfSquares ; (; ItOutput ; itOutputBegin, . ItOutput ; itOutputEnd, . ItTruth ; itTruthBegin, . ItTruth ; , . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . InvFnc ; invFnc, . double ; patternWeight . ). sum of squares error function ; Definition at line 382 of file NeuralNet.icc. ◆ uniformDouble() [1/2]. template<typename Container , typename T > . void TMVA::DNN::uniformDouble ; (; Container & ; container, . T ; maxValue . ). Definition at line 42 of file NeuralNet.icc. ◆ uniformDouble() [2/2]. double TMVA::DNN::uniformDouble ; (; double ; minValue, . double ; maxValue . ). Definition at line 43 of file NeuralNet.cxx. ◆ uniformFromTo(). template<typename T > . T TMVA::DNN::uniformFromTo ; (; T ; from, . T ; to . ). Definition at line 34 of file NeuralNet.icc. ◆ update() [1/3]. template<typename LAYERDATA > . void TMVA::DNN::update ; (; const LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData, . double ; factorWeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetG",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:34369,Deployability,update,update,34369,"atternWeight . ). ◆ sumOfSquares() [2/2]. template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > . double TMVA::DNN::sumOfSquares ; (; ItOutput ; itOutputBegin, . ItOutput ; itOutputEnd, . ItTruth ; itTruthBegin, . ItTruth ; , . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . InvFnc ; invFnc, . double ; patternWeight . ). sum of squares error function ; Definition at line 382 of file NeuralNet.icc. ◆ uniformDouble() [1/2]. template<typename Container , typename T > . void TMVA::DNN::uniformDouble ; (; Container & ; container, . T ; maxValue . ). Definition at line 42 of file NeuralNet.icc. ◆ uniformDouble() [2/2]. double TMVA::DNN::uniformDouble ; (; double ; minValue, . double ; maxValue . ). Definition at line 43 of file NeuralNet.cxx. ◆ uniformFromTo(). template<typename T > . T TMVA::DNN::uniformFromTo ; (; T ; from, . T ; to . ). Definition at line 34 of file NeuralNet.icc. ◆ update() [1/3]. template<typename LAYERDATA > . void TMVA::DNN::update ; (; const LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData, . double ; factorWeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient, . ItWeight ; i",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:34520,Deployability,update,update,34520,"utput ; itOutputBegin, . ItOutput ; itOutputEnd, . ItTruth ; itTruthBegin, . ItTruth ; , . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . InvFnc ; invFnc, . double ; patternWeight . ). sum of squares error function ; Definition at line 382 of file NeuralNet.icc. ◆ uniformDouble() [1/2]. template<typename Container , typename T > . void TMVA::DNN::uniformDouble ; (; Container & ; container, . T ; maxValue . ). Definition at line 42 of file NeuralNet.icc. ◆ uniformDouble() [2/2]. double TMVA::DNN::uniformDouble ; (; double ; minValue, . double ; maxValue . ). Definition at line 43 of file NeuralNet.cxx. ◆ uniformFromTo(). template<typename T > . T TMVA::DNN::uniformFromTo ; (; T ; from, . T ; to . ). Definition at line 34 of file NeuralNet.icc. ◆ update() [1/3]. template<typename LAYERDATA > . void TMVA::DNN::update ; (; const LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData, . double ; factorWeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient, . ItWeight ; itWeight, . double ; weightDecay . ). update the gradients, using regularization ; Definition at line 237 of file NeuralNet.icc. ◆ weightDecay(). template<typename ItWei",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:34593,Deployability,update,update,34593,", . ItTruth ; itTruthBegin, . ItTruth ; , . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . InvFnc ; invFnc, . double ; patternWeight . ). sum of squares error function ; Definition at line 382 of file NeuralNet.icc. ◆ uniformDouble() [1/2]. template<typename Container , typename T > . void TMVA::DNN::uniformDouble ; (; Container & ; container, . T ; maxValue . ). Definition at line 42 of file NeuralNet.icc. ◆ uniformDouble() [2/2]. double TMVA::DNN::uniformDouble ; (; double ; minValue, . double ; maxValue . ). Definition at line 43 of file NeuralNet.cxx. ◆ uniformFromTo(). template<typename T > . T TMVA::DNN::uniformFromTo ; (; T ; from, . T ; to . ). Definition at line 34 of file NeuralNet.icc. ◆ update() [1/3]. template<typename LAYERDATA > . void TMVA::DNN::update ; (; const LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData, . double ; factorWeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient, . ItWeight ; itWeight, . double ; weightDecay . ). update the gradients, using regularization ; Definition at line 237 of file NeuralNet.icc. ◆ weightDecay(). template<typename ItWeight > . double TMVA::DNN::weightDecay ; (; dou",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:34725,Deployability,update,update,34725,". sum of squares error function ; Definition at line 382 of file NeuralNet.icc. ◆ uniformDouble() [1/2]. template<typename Container , typename T > . void TMVA::DNN::uniformDouble ; (; Container & ; container, . T ; maxValue . ). Definition at line 42 of file NeuralNet.icc. ◆ uniformDouble() [2/2]. double TMVA::DNN::uniformDouble ; (; double ; minValue, . double ; maxValue . ). Definition at line 43 of file NeuralNet.cxx. ◆ uniformFromTo(). template<typename T > . T TMVA::DNN::uniformFromTo ; (; T ; from, . T ; to . ). Definition at line 34 of file NeuralNet.icc. ◆ update() [1/3]. template<typename LAYERDATA > . void TMVA::DNN::update ; (; const LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData, . double ; factorWeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient, . ItWeight ; itWeight, . double ; weightDecay . ). update the gradients, using regularization ; Definition at line 237 of file NeuralNet.icc. ◆ weightDecay(). template<typename ItWeight > . double TMVA::DNN::weightDecay ; (; double ; error, . ItWeight ; itWeight, . ItWeight ; itWeightEnd, . double ; factorWeightDecay, . EnumRegularization ; eRegularization . ).",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:34921,Deployability,update,update,34921,"Value . ). Definition at line 42 of file NeuralNet.icc. ◆ uniformDouble() [2/2]. double TMVA::DNN::uniformDouble ; (; double ; minValue, . double ; maxValue . ). Definition at line 43 of file NeuralNet.cxx. ◆ uniformFromTo(). template<typename T > . T TMVA::DNN::uniformFromTo ; (; T ; from, . T ; to . ). Definition at line 34 of file NeuralNet.icc. ◆ update() [1/3]. template<typename LAYERDATA > . void TMVA::DNN::update ; (; const LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData, . double ; factorWeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient, . ItWeight ; itWeight, . double ; weightDecay . ). update the gradients, using regularization ; Definition at line 237 of file NeuralNet.icc. ◆ weightDecay(). template<typename ItWeight > . double TMVA::DNN::weightDecay ; (; double ; error, . ItWeight ; itWeight, . ItWeight ; itWeightEnd, . double ; factorWeightDecay, . EnumRegularization ; eRegularization . ). compute the weight decay for regularization (L1 or L2) ; Definition at line 498 of file NeuralNet.icc. Variable Documentation. ◆ Gauss. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Gauss = std::make_sha",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:34992,Deployability,update,update,34992,"lNet.icc. ◆ uniformDouble() [2/2]. double TMVA::DNN::uniformDouble ; (; double ; minValue, . double ; maxValue . ). Definition at line 43 of file NeuralNet.cxx. ◆ uniformFromTo(). template<typename T > . T TMVA::DNN::uniformFromTo ; (; T ; from, . T ; to . ). Definition at line 34 of file NeuralNet.icc. ◆ update() [1/3]. template<typename LAYERDATA > . void TMVA::DNN::update ; (; const LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData, . double ; factorWeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient, . ItWeight ; itWeight, . double ; weightDecay . ). update the gradients, using regularization ; Definition at line 237 of file NeuralNet.icc. ◆ weightDecay(). template<typename ItWeight > . double TMVA::DNN::weightDecay ; (; double ; error, . ItWeight ; itWeight, . ItWeight ; itWeightEnd, . double ; factorWeightDecay, . EnumRegularization ; eRegularization . ). compute the weight decay for regularization (L1 or L2) ; Definition at line 498 of file NeuralNet.icc. Variable Documentation. ◆ Gauss. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Gauss = std::make_shared<std::function<double(double)>> ([](double",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:35179,Deployability,update,update,35179,"typename T > . T TMVA::DNN::uniformFromTo ; (; T ; from, . T ; to . ). Definition at line 34 of file NeuralNet.icc. ◆ update() [1/3]. template<typename LAYERDATA > . void TMVA::DNN::update ; (; const LAYERDATA & ; prevLayerData, . LAYERDATA & ; currLayerData, . double ; factorWeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient, . ItWeight ; itWeight, . double ; weightDecay . ). update the gradients, using regularization ; Definition at line 237 of file NeuralNet.icc. ◆ weightDecay(). template<typename ItWeight > . double TMVA::DNN::weightDecay ; (; double ; error, . ItWeight ; itWeight, . ItWeight ; itWeightEnd, . double ; factorWeightDecay, . EnumRegularization ; eRegularization . ). compute the weight decay for regularization (L1 or L2) ; Definition at line 498 of file NeuralNet.icc. Variable Documentation. ◆ Gauss. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Gauss = std::make_shared<std::function<double(double)>> ([](double value){ const double s = 6.0; return exp (-std::pow(value*s,2.0)); }). Definition at line 12 of file NeuralNet.cxx. ◆ GaussComplement. std::shared_ptr< std::function< double(double)> > TMVA",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:35422,Deployability,update,update,35422,"WeightDecay, . EnumRegularization ; regularization . ). update the node values ; Definition at line 600 of file NeuralNet.icc. ◆ update() [2/3]. template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient . ). update the gradients ; Definition at line 183 of file NeuralNet.icc. ◆ update() [3/3]. template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > . void TMVA::DNN::update ; (; ItSource ; itSource, . ItSource ; itSourceEnd, . ItDelta ; itTargetDeltaBegin, . ItDelta ; itTargetDeltaEnd, . ItTargetGradient ; itTargetGradientBegin, . ItGradient ; itGradient, . ItWeight ; itWeight, . double ; weightDecay . ). update the gradients, using regularization ; Definition at line 237 of file NeuralNet.icc. ◆ weightDecay(). template<typename ItWeight > . double TMVA::DNN::weightDecay ; (; double ; error, . ItWeight ; itWeight, . ItWeight ; itWeightEnd, . double ; factorWeightDecay, . EnumRegularization ; eRegularization . ). compute the weight decay for regularization (L1 or L2) ; Definition at line 498 of file NeuralNet.icc. Variable Documentation. ◆ Gauss. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Gauss = std::make_shared<std::function<double(double)>> ([](double value){ const double s = 6.0; return exp (-std::pow(value*s,2.0)); }). Definition at line 12 of file NeuralNet.cxx. ◆ GaussComplement. std::shared_ptr< std::function< double(double)> > TMVA::DNN::GaussComplement = std::make_shared<std::function<double(double)>> ([](double value){ const double s = 6.0; return 1.0 - exp (-std::pow(value*s,2.0)); }). Definition at line 13 of file NeuralNet.cxx. ◆ InvGauss. std::shared_ptr< std::function< double(double)> > TMVA::DNN",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:3195,Modifiability,layers,layers,3195,"daDeviceBuffer;  TCudaDeviceBuffer. More...;  ; class  TCudaDeviceReference;  TCudaDeviceReference. More...;  ; class  TCudaHostBuffer;  TCudaHostBuffer. More...;  ; class  TCudaMatrix;  TCudaMatrix Class. More...;  ; class  TCudaTensor;  TCudaTensor Class. More...;  ; class  TDataLoader;  TDataLoader. More...;  ; class  TDataLoader< AData, TReference< AReal > >;  ; class  TDeepNet;  Generic Deep Neural Network class. More...;  ; class  TDenseLayer;  Generic layer class. More...;  ; struct  TDescriptors;  ; class  TDevice;  TDevice. More...;  ; class  TDLGradientDescent;  ; struct  TDNNGenDescriptors;  ; class  TGradientDescent;  ; class  TLayer;  Generic layer class. More...;  ; class  TNet;  Generic neural network class. More...;  ; class  TReference;  The reference architecture class. More...;  ; class  TReshapeLayer;  ; class  TRMSProp;  RMSProp Optimizer class. More...;  ; class  TSGD;  Stochastic Batch Gradient Descent Optimizer class. More...;  ; class  TSharedLayer;  Layer class width shared weight and bias layers. More...;  ; class  TTensorBatch;  TTensorBatch. More...;  ; class  TTensorBatchIterator;  TTensorBatchIterator. More...;  ; class  TTensorDataLoader;  TTensorDataLoader. More...;  ; class  TTensorDataLoader< AData, TReference< AReal > >;  ; struct  TWorkspace;  ; class  VGeneralLayer;  Generic General Layer class. More...;  ; class  VOptimizer;  Generic Optimizer class. More...;  . Typedefs; typedef std::vector< char > DropContainer;  ; using IndexIterator_t = typename std::vector< size_t >::iterator;  ; using MatrixInput_t = std::tuple< const TMatrixT< Double_t > &, const TMatrixT< Double_t > &, const TMatrixT< Double_t > & >;  ; using MemoryLayout = TMVA::Experimental::MemoryLayout;  ; typedef std::tuple< Settings &, Batch &, DropContainer & > pass_through_type;  ; using TensorInput = std::tuple< const std::vector< TMatrixT< Double_t > > &, const TMatrixT< Double_t > &, const TMatrixT< Double_t > & >;  ; using TMVAInput_t = std::tuple< const std:",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:5204,Performance,optimiz,optimizer,5204," & >;  . Enumerations; enum class  EActivationFunction { ;   kIdentity = 0; , kRelu = 1; , kSigmoid = 2; , kTanh = 3; , ;   kSymmRelu = 4; , kSoftSign = 5; , kGauss = 6; , kFastTanh = 7. };  Enum that represents layer activation functions. More...;  ; enum class  EInitialization { ;   kGauss = 'G'; , kUniform = 'U'; , kIdentity = 'I'; , kZero = 'Z'; , ;   kGlorotNormal = 'X'; , kGlorotUniform = 'F'. };  ; enum class  ELossFunction { kCrossEntropy = 'C'; , kMeanSquaredError = 'R'; , kSoftmaxCrossEntropy = 'S'; };  Enum that represents objective functions for the net, i.e. More...;  ; enum class  EnumFunction { ;   ZERO = '0'; , LINEAR = 'L'; , TANH = 'T'; , RELU = 'R'; , ;   SYMMRELU = 'r'; , TANHSHIFT = 't'; , SIGMOID = 's'; , SOFTSIGN = 'S'; , ;   GAUSS = 'G'; , GAUSSCOMPLEMENT = 'C'. };  ; enum class  EnumRegularization { NONE; , L1; , L2; , L1MAX; };  ; enum class  EOptimizer { ;   kSGD = 0; , kAdam = 1; , kAdagrad = 2; , kRMSProp = 3; , ;   kAdadelta = 4. };  Enum representing the optimizer used for training. More...;  ; enum class  EOutputFunction { kIdentity = 'I'; , kSigmoid = 'S'; , kSoftmax = 'M'; };  Enum that represents output functions. More...;  ; enum class  ERegularization { kNone = '0'; , kL1 = '1'; , kL2 = '2'; };  Enum representing the regularization type applied for a given layer. More...;  ; enum  MinimizerType { fSteepest; };  < list all the minimizer types More...;  ; enum class  ModeErrorFunction { SUMOFSQUARES = 'S'; , CROSSENTROPY = 'C'; , CROSSENTROPY_MUTUALEXCLUSIVE = 'M'; };  error functions to be chosen from More...;  ; enum class  ModeOutput { FETCH; };  ; enum class  ModeOutputValues : int { DIRECT = 0x01; , SIGMOID = 0x02; , SOFTMAX = 0x04; , BATCHNORMALIZATION = 0x08; };  ; enum class  WeightInitializationStrategy { XAVIER; , TEST; , LAYERSIZE; , XAVIERUNIFORM; };  weight initialization strategies to be chosen from More...;  . Functions; template<typename Architecture_t > ; void addRegularizationGradients (typename Architecture_t::Mat",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:21187,Performance,optimiz,optimizer,21187,". strong . EnumeratorkGauss ; kUniform ; kIdentity ; kZero ; kGlorotNormal ; kGlorotUniform . Definition at line 72 of file Functions.h. ◆ ELossFunction. enum class TMVA::DNN::ELossFunction. strong . Enum that represents objective functions for the net, i.e. ; functions that take the output from the last layer in the net together with the truths and return the objective function values that is to be minimized in the training process. . EnumeratorkCrossEntropy ; kMeanSquaredError ; kSoftmaxCrossEntropy . Definition at line 56 of file Functions.h. ◆ EnumFunction. enum class TMVA::DNN::EnumFunction. strong . EnumeratorZERO ; LINEAR ; TANH ; RELU ; SYMMRELU ; TANHSHIFT ; SIGMOID ; SOFTSIGN ; GAUSS ; GAUSSCOMPLEMENT . Definition at line 156 of file NeuralNet.h. ◆ EnumRegularization. enum class TMVA::DNN::EnumRegularization. strong . EnumeratorNONE ; L1 ; L2 ; L1MAX . Definition at line 172 of file NeuralNet.h. ◆ EOptimizer. enum class TMVA::DNN::EOptimizer. strong . Enum representing the optimizer used for training. . EnumeratorkSGD ; kAdam ; kAdagrad ; kRMSProp ; kAdadelta . Definition at line 82 of file Functions.h. ◆ EOutputFunction. enum class TMVA::DNN::EOutputFunction. strong . Enum that represents output functions. . EnumeratorkIdentity ; kSigmoid ; kSoftmax . Definition at line 45 of file Functions.h. ◆ ERegularization. enum class TMVA::DNN::ERegularization. strong . Enum representing the regularization type applied for a given layer. . EnumeratorkNone ; kL1 ; kL2 . Definition at line 64 of file Functions.h. ◆ MinimizerType. enum TMVA::DNN::MinimizerType. < list all the minimizer types . EnumeratorfSteepest SGD. . Definition at line 320 of file NeuralNet.h. ◆ ModeErrorFunction. enum class TMVA::DNN::ModeErrorFunction. strong . error functions to be chosen from . EnumeratorSUMOFSQUARES ; CROSSENTROPY ; CROSSENTROPY_MUTUALEXCLUSIVE . Definition at line 1038 of file NeuralNet.h. ◆ ModeOutput. enum class TMVA::DNN::ModeOutput. strong . EnumeratorFETCH . Definition at ",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:9328,Safety,abort,abort,9328,"egin, ItTarget itTargetEnd);  ; template<bool HasDropOut, typename ItSource , typename ItWeight , typename ItTarget , typename ItDrop > ; void applyWeights (ItSource itSourceBegin, ItSource itSourceEnd, ItWeight itWeight, ItTarget itTargetBegin, ItTarget itTargetEnd, ItDrop itDrop);  apply weights using drop-out; for no drop out, provide (&bool = true) to itDrop such that *itDrop becomes ""true"" ;  ; template<typename ItSource , typename ItWeight , typename ItPrev > ; void applyWeightsBackwards (ItSource itCurrBegin, ItSource itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd);  ; template<bool HasDropOut, typename ItSource , typename ItWeight , typename ItPrev , typename ItDrop > ; void applyWeightsBackwards (ItSource itCurrBegin, ItSource itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd, ItDrop itDrop);  apply weights backwards (for backprop); for no drop out, provide (&bool = true) to itDrop such that *itDrop becomes ""true"" ;  ; template<typename LAYERDATA > ; void backward (LAYERDATA &prevLayerData, LAYERDATA &currLayerData);  backward application of the weights (back-propagation of the error) ;  ; template<EnumRegularization Regularization> ; double computeRegularization (double weight, const double &factorWeightDecay);  compute the regularization (L1, L2) ;  ; template<> ; double computeRegularization< EnumRegularization::L1 > (double weight, const double &factorWeightDecay);  ; template<> ; double computeRegularization< EnumRegularization::L2 > (double weight, const double &factorWeightDecay);  ; template<typename ItProbability , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double crossEntropy (ItProbability itProbabilityBegin, ItProbability itProbabilityEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc, double patternWeight);  cross entropy error function ;  ; void cudaError (cudaError_t code, const char *file, int line, bool abort=true);  Function to check cuda return code.",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:27451,Safety,abort,abort,27451,"). template<> . double TMVA::DNN::computeRegularization< EnumRegularization::L1 > ; (; double ; weight, . const double & ; factorWeightDecay . ). inline . Definition at line 219 of file NeuralNet.icc. ◆ computeRegularization< EnumRegularization::L2 >(). template<> . double TMVA::DNN::computeRegularization< EnumRegularization::L2 > ; (; double ; weight, . const double & ; factorWeightDecay . ). inline . Definition at line 226 of file NeuralNet.icc. ◆ crossEntropy(). template<typename ItProbability , typename ItTruth , typename ItDelta , typename ItInvActFnc > . double TMVA::DNN::crossEntropy ; (; ItProbability ; itProbabilityBegin, . ItProbability ; itProbabilityEnd, . ItTruth ; itTruthBegin, . ItTruth ; , . ItDelta ; itDelta, . ItDelta ; itDeltaEnd, . ItInvActFnc ; , . double ; patternWeight . ). cross entropy error function ; Definition at line 412 of file NeuralNet.icc. ◆ cudaError(). void TMVA::DNN::cudaError ; (; cudaError_t ; code, . const char * ; file, . int ; line, . bool ; abort = true . ). inline . Function to check cuda return code. ; Taken from http://stackoverflow.com/questions/14038589/ ; Definition at line 198 of file CudaMatrix.h. ◆ CurandInitializationKernel(). __global__ void TMVA::DNN::CurandInitializationKernel ; (; unsigned long long ; seed, . curandState_t * ; state . ). Definition at line 26 of file CudaMatrix.cu. ◆ debugTensor(). template<typename Architecture > . auto TMVA::DNN::debugTensor ; (; const typename Architecture::Tensor_t & ; A, . const std::string ; name = ""tensor"" . ); -> void. Definition at line 582 of file GeneralLayer.h. ◆ evaluate() [1/3]. template<typename Architecture_t > . auto TMVA::DNN::evaluate ; (; ELossFunction ; f, . const typename Architecture_t::Matrix_t & ; Y, . const typename Architecture_t::Matrix_t & ; output, . const typename Architecture_t::Matrix_t & ; weights . ); -> decltype(Architecture_t::CrossEntropy(Y, output, weights)). inline . Compute the value of the objective function f for given activations of t",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:17812,Testability,log,log,17812," ? 1.0 : 0; });  ; std::shared_ptr< std::function< double(double)> > InvTanh = std::make_shared<std::function<double(double)>> ([](double value){ return 1.0 - std::pow (value, 2.0); });  ; std::shared_ptr< std::function< double(double)> > InvTanhShift = std::make_shared<std::function<double(double)>> ([](double value){ return 0.3 + (1.0 - std::pow (value, 2.0)); });  ; std::shared_ptr< std::function< double(double)> > Linear = std::make_shared<std::function<double(double)>> ([](double value){ return value; });  ; std::shared_ptr< std::function< double(double)> > ReLU = std::make_shared<std::function<double(double)>> ([](double value){ const double margin = 0.0; return value > margin ? value-margin : 0; });  ; std::shared_ptr< std::function< double(double)> > Sigmoid = std::make_shared<std::function<double(double)>> ([](double value){ value = std::max (-100.0, std::min (100.0,value)); return 1.0/(1.0 + std::exp (-value)); });  ; std::shared_ptr< std::function< double(double)> > SoftPlus = std::make_shared<std::function<double(double)>> ([](double value){ return std::log (1.0+ std::exp (value)); });  ; std::shared_ptr< std::function< double(double)> > SoftSign = std::make_shared<std::function<double(double)>> ([](double value){ return value / (1.0 + fabs (value)); });  ; std::shared_ptr< std::function< double(double)> > SymmReLU = std::make_shared<std::function<double(double)>> ([](double value){ const double margin = 0.3; return value > margin ? value-margin : value < -margin ? value+margin : 0; });  ; std::shared_ptr< std::function< double(double)> > Tanh = std::make_shared<std::function<double(double)>> ([](double value){ return tanh (value); });  ; std::shared_ptr< std::function< double(double)> > TanhShift = std::make_shared<std::function<double(double)>> ([](double value){ return tanh (value-0.3); });  ; std::shared_ptr< std::function< double(double)> > ZeroFnc = std::make_shared<std::function<double(double)>> ([](double ){ return 0; });  . Typedef Documentation",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:39894,Testability,log,log,39894,"e_shared<std::function<double(double)>> ([](double value){ return 0.3 + (1.0 - std::pow (value, 2.0)); }). Definition at line 23 of file NeuralNet.cxx. ◆ Linear. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Linear = std::make_shared<std::function<double(double)>> ([](double value){ return value; }). Definition at line 24 of file NeuralNet.cxx. ◆ ReLU. std::shared_ptr< std::function< double(double)> > TMVA::DNN::ReLU = std::make_shared<std::function<double(double)>> ([](double value){ const double margin = 0.0; return value > margin ? value-margin : 0; }). Definition at line 25 of file NeuralNet.cxx. ◆ Sigmoid. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Sigmoid = std::make_shared<std::function<double(double)>> ([](double value){ value = std::max (-100.0, std::min (100.0,value)); return 1.0/(1.0 + std::exp (-value)); }). Definition at line 26 of file NeuralNet.cxx. ◆ SoftPlus. std::shared_ptr< std::function< double(double)> > TMVA::DNN::SoftPlus = std::make_shared<std::function<double(double)>> ([](double value){ return std::log (1.0+ std::exp (value)); }). Definition at line 27 of file NeuralNet.cxx. ◆ SoftSign. std::shared_ptr< std::function< double(double)> > TMVA::DNN::SoftSign = std::make_shared<std::function<double(double)>> ([](double value){ return value / (1.0 + fabs (value)); }). Definition at line 32 of file NeuralNet.cxx. ◆ SymmReLU. std::shared_ptr< std::function< double(double)> > TMVA::DNN::SymmReLU = std::make_shared<std::function<double(double)>> ([](double value){ const double margin = 0.3; return value > margin ? value-margin : value < -margin ? value+margin : 0; }). Definition at line 30 of file NeuralNet.cxx. ◆ Tanh. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Tanh = std::make_shared<std::function<double(double)>> ([](double value){ return tanh (value); }). Definition at line 29 of file NeuralNet.cxx. ◆ TanhShift. std::shared_ptr< std::function< double(double)> > TMVA::DNN::TanhShift = std::make_sh",MatchSource.WIKI,doc/v632/namespaceTMVA_1_1DNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:4946,Availability,error,error,4946,"ue);; 124 comp->Add(files);; 125 // if there are any open files, make them visible by default; 126 if (elem_files->GetNumChilds() > 0); 127 seldir = {};; 128 }; 129 ; 130 SetTopElement(comp);; 131 ; 132 SetWorkingPath(seldir);; 133}; 134 ; 135/////////////////////////////////////////////////////////////////////; 136/// Reset all data correspondent to last request; 137 ; 138void RBrowserData::ResetLastRequestData(bool with_element); 139{; 140 fLastAllChilds = false;; 141 fLastSortedItems.clear();; 142 fLastSortMethod.clear();; 143 fLastItems.clear();; 144 if (with_element) {; 145 fLastPath.clear();; 146 fLastElement.reset();; 147 }; 148}; 149 ; 150/////////////////////////////////////////////////////////////////////////; 151/// Decompose path to elements; 152/// Returns array of names for each element in the path, first element either ""/"" or "".""; 153/// If returned array empty - it is error; 154 ; 155Browsable::RElementPath_t RBrowserData::DecomposePath(const std::string &strpath, bool relative_to_work_element); 156{; 157 Browsable::RElementPath_t arr;; 158 if (relative_to_work_element) arr = fWorkingPath;; 159 ; 160 if (strpath.empty()); 161 return arr;; 162 ; 163 auto arr2 = Browsable::RElement::ParsePath(strpath);; 164 arr.insert(arr.end(), arr2.begin(), arr2.end());; 165 return arr;; 166}; 167 ; 168/////////////////////////////////////////////////////////////////////////; 169/// Process browser request; 170 ; 171bool RBrowserData::ProcessBrowserRequest(const RBrowserRequest &request, RBrowserReply &reply); 172{; 173 auto path = fWorkingPath;; 174 path.insert(path.end(), request.path.begin(), request.path.end());; 175 ; 176 if ((path != fLastPath) || !fLastElement) {; 177 ; 178 auto elem = GetSubElement(path);; 179 if (!elem) return false;; 180 ; 181 ResetLastRequestData(true);; 182 ; 183 fLastPath = path;; 184 fLastElement = std::move(elem);; 185 ; 186 fLastElement->cd(); // set element active; 187 } else if (request.reload) {; 188 // only reload items from elemen",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:14935,Deployability,configurat,configuration,14935,"lementPath_t &path1, const RElementPath_t &path2)Compare two paths, Returns number of elements matches in both paths.Definition RElement.cxx:145; ROOT::Browsable::RElement::ParsePathstatic RElementPath_t ParsePath(const std::string &str)Parse string path to produce RElementPath_t One should avoid to use string pathes as much as possible...Definition RElement.cxx:116; ROOT::Browsable::RItemRepresentation of single item in the browser.Definition RItem.hxx:23; ROOT::Browsable::RProvider::Browsestatic std::shared_ptr< RElement > Browse(std::unique_ptr< RHolder > &obj)Create browsable element for the object Created element may take ownership over the object.Definition RProvider.cxx:273; ROOT::Browsable::RSysFile::ProvideTopEntriesstatic RElementPath_t ProvideTopEntries(std::shared_ptr< RGroup > &comp, const std::string &workdir="""")Provide top entries for file system On windows it is list of existing drivers, on Linux it is ""File s...Definition RSysFile.cxx:533; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; ROOT::RBrowserDataCleanupDefinition RBrowserData.cxx:43; ROOT::RBrowserDataCleanup::fDataRBrowserData & fDataDefinition RBrowserData.cxx:45; ROOT::RBrowserDataCleanup::RBrowserDataCleanupRBrowserDataCleanup(RBrowserData &_data)Definition RBrowserData.cxx:48; ROOT::RBrowserDataCleanup::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from a list.Definition RBrowserData.cxx:50; ROOT::RBrowserDataWay to browse (hopefully) everything in ROOT.Definition RBrowserData.hxx:37; ROOT::RBrowserData::SetTopElementvoid SetTopElement(std::shared_ptr< Browsable::RElement > elem)set top element for browsingDefinition RBrowserData.cxx:88; ROOT::RBrowserData::fLastSortedItemsstd::vector< const Browsable::RItem * > fLastSortedItems! sorted child items, used in requestsDefinition RBrowserData.hxx:51; ROOT::RBrowserData::fWorkingPathBrowsable::RElementPath_t fWorkingPath! path showed in BreadcrumbDef",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:14935,Modifiability,config,configuration,14935,"lementPath_t &path1, const RElementPath_t &path2)Compare two paths, Returns number of elements matches in both paths.Definition RElement.cxx:145; ROOT::Browsable::RElement::ParsePathstatic RElementPath_t ParsePath(const std::string &str)Parse string path to produce RElementPath_t One should avoid to use string pathes as much as possible...Definition RElement.cxx:116; ROOT::Browsable::RItemRepresentation of single item in the browser.Definition RItem.hxx:23; ROOT::Browsable::RProvider::Browsestatic std::shared_ptr< RElement > Browse(std::unique_ptr< RHolder > &obj)Create browsable element for the object Created element may take ownership over the object.Definition RProvider.cxx:273; ROOT::Browsable::RSysFile::ProvideTopEntriesstatic RElementPath_t ProvideTopEntries(std::shared_ptr< RGroup > &comp, const std::string &workdir="""")Provide top entries for file system On windows it is list of existing drivers, on Linux it is ""File s...Definition RSysFile.cxx:533; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; ROOT::RBrowserDataCleanupDefinition RBrowserData.cxx:43; ROOT::RBrowserDataCleanup::fDataRBrowserData & fDataDefinition RBrowserData.cxx:45; ROOT::RBrowserDataCleanup::RBrowserDataCleanupRBrowserDataCleanup(RBrowserData &_data)Definition RBrowserData.cxx:48; ROOT::RBrowserDataCleanup::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from a list.Definition RBrowserData.cxx:50; ROOT::RBrowserDataWay to browse (hopefully) everything in ROOT.Definition RBrowserData.hxx:37; ROOT::RBrowserData::SetTopElementvoid SetTopElement(std::shared_ptr< Browsable::RElement > elem)set top element for browsingDefinition RBrowserData.cxx:88; ROOT::RBrowserData::fLastSortedItemsstd::vector< const Browsable::RItem * > fLastSortedItems! sorted child items, used in requestsDefinition RBrowserData.hxx:51; ROOT::RBrowserData::fWorkingPathBrowsable::RElementPath_t fWorkingPath! path showed in BreadcrumbDef",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:9778,Performance,cache,cached,9778,"ply data; 268 ; 269std::string RBrowserData::ProcessRequest(const RBrowserRequest &request); 270{; 271 if (request.lastcycle < 0); 272 gEnv->SetValue(""WebGui.LastCycle"", ""no"");; 273 else if (request.lastcycle > 0); 274 gEnv->SetValue(""WebGui.LastCycle"", ""yes"");; 275 ; 276 RBrowserReply reply;; 277 ; 278 reply.path = request.path;; 279 reply.first = 0;; 280 reply.nchilds = 0;; 281 ; 282 ProcessBrowserRequest(request, reply);; 283 ; 284 return TBufferJSON::ToJSON(&reply, TBufferJSON::kSkipTypeInfo + TBufferJSON::kNoSpaces).Data();; 285}; 286 ; 287/////////////////////////////////////////////////////////////////////////; 288/// Returns element with path, specified as string; 289 ; 290std::shared_ptr<Browsable::RElement> RBrowserData::GetElement(const std::string &str); 291{; 292 auto path = DecomposePath(str, true);; 293 ; 294 return GetSubElement(path);; 295}; 296 ; 297/////////////////////////////////////////////////////////////////////////; 298/// Returns element with path, specified as Browsable::RElementPath_t; 299 ; 300std::shared_ptr<Browsable::RElement> RBrowserData::GetElementFromTop(const Browsable::RElementPath_t &path); 301{; 302 return GetSubElement(path);; 303}; 304 ; 305/////////////////////////////////////////////////////////////////////////; 306/// Returns sub-element starting from top, using cached data; 307 ; 308std::shared_ptr<Browsable::RElement> RBrowserData::GetSubElement(const Browsable::RElementPath_t &path); 309{; 310 if (path.empty()); 311 return fTopElement;; 312 ; 313 // validate cache - removes no longer actual elements; 314 RemoveFromCache(nullptr);; 315 ; 316 // first check direct match in cache; 317 for (auto &entry : fCache); 318 if (entry.first == path); 319 return entry.second;; 320 ; 321 // find best possible entry in cache; 322 int pos = 0;; 323 auto elem = fTopElement;; 324 ; 325 for (auto &entry : fCache) {; 326 if (entry.first.size() >= path.size()); 327 continue;; 328 ; 329 auto comp = Browsable::RElement::ComparePaths(path, ent",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:9981,Performance,cache,cache,9981,"//////////////////////////////////////; 288/// Returns element with path, specified as string; 289 ; 290std::shared_ptr<Browsable::RElement> RBrowserData::GetElement(const std::string &str); 291{; 292 auto path = DecomposePath(str, true);; 293 ; 294 return GetSubElement(path);; 295}; 296 ; 297/////////////////////////////////////////////////////////////////////////; 298/// Returns element with path, specified as Browsable::RElementPath_t; 299 ; 300std::shared_ptr<Browsable::RElement> RBrowserData::GetElementFromTop(const Browsable::RElementPath_t &path); 301{; 302 return GetSubElement(path);; 303}; 304 ; 305/////////////////////////////////////////////////////////////////////////; 306/// Returns sub-element starting from top, using cached data; 307 ; 308std::shared_ptr<Browsable::RElement> RBrowserData::GetSubElement(const Browsable::RElementPath_t &path); 309{; 310 if (path.empty()); 311 return fTopElement;; 312 ; 313 // validate cache - removes no longer actual elements; 314 RemoveFromCache(nullptr);; 315 ; 316 // first check direct match in cache; 317 for (auto &entry : fCache); 318 if (entry.first == path); 319 return entry.second;; 320 ; 321 // find best possible entry in cache; 322 int pos = 0;; 323 auto elem = fTopElement;; 324 ; 325 for (auto &entry : fCache) {; 326 if (entry.first.size() >= path.size()); 327 continue;; 328 ; 329 auto comp = Browsable::RElement::ComparePaths(path, entry.first);; 330 ; 331 if ((comp > pos) && (comp == (int) entry.first.size())) {; 332 pos = comp;; 333 elem = entry.second;; 334 }; 335 }; 336 ; 337 while (pos < (int) path.size()) {; 338 std::string subname = path[pos];; 339 int indx = Browsable::RElement::ExtractItemIndex(subname);; 340 ; 341 auto iter = elem->GetChildsIter();; 342 if (!iter); 343 return nullptr;; 344 ; 345 if (!iter->Find(subname, indx)) {; 346 if (indx < 0); 347 return nullptr;; 348 iter = elem->GetChildsIter();; 349 if (!iter || !iter->Find(subname)); 350 return nullptr;; 351 }; 352 ; 353 elem = iter->GetElem",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:10096,Performance,cache,cache,10096,"//////////////////////////////////////; 288/// Returns element with path, specified as string; 289 ; 290std::shared_ptr<Browsable::RElement> RBrowserData::GetElement(const std::string &str); 291{; 292 auto path = DecomposePath(str, true);; 293 ; 294 return GetSubElement(path);; 295}; 296 ; 297/////////////////////////////////////////////////////////////////////////; 298/// Returns element with path, specified as Browsable::RElementPath_t; 299 ; 300std::shared_ptr<Browsable::RElement> RBrowserData::GetElementFromTop(const Browsable::RElementPath_t &path); 301{; 302 return GetSubElement(path);; 303}; 304 ; 305/////////////////////////////////////////////////////////////////////////; 306/// Returns sub-element starting from top, using cached data; 307 ; 308std::shared_ptr<Browsable::RElement> RBrowserData::GetSubElement(const Browsable::RElementPath_t &path); 309{; 310 if (path.empty()); 311 return fTopElement;; 312 ; 313 // validate cache - removes no longer actual elements; 314 RemoveFromCache(nullptr);; 315 ; 316 // first check direct match in cache; 317 for (auto &entry : fCache); 318 if (entry.first == path); 319 return entry.second;; 320 ; 321 // find best possible entry in cache; 322 int pos = 0;; 323 auto elem = fTopElement;; 324 ; 325 for (auto &entry : fCache) {; 326 if (entry.first.size() >= path.size()); 327 continue;; 328 ; 329 auto comp = Browsable::RElement::ComparePaths(path, entry.first);; 330 ; 331 if ((comp > pos) && (comp == (int) entry.first.size())) {; 332 pos = comp;; 333 elem = entry.second;; 334 }; 335 }; 336 ; 337 while (pos < (int) path.size()) {; 338 std::string subname = path[pos];; 339 int indx = Browsable::RElement::ExtractItemIndex(subname);; 340 ; 341 auto iter = elem->GetChildsIter();; 342 if (!iter); 343 return nullptr;; 344 ; 345 if (!iter->Find(subname, indx)) {; 346 if (indx < 0); 347 return nullptr;; 348 iter = elem->GetChildsIter();; 349 if (!iter || !iter->Find(subname)); 350 return nullptr;; 351 }; 352 ; 353 elem = iter->GetElem",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:10232,Performance,cache,cache,10232,"h(str, true);; 293 ; 294 return GetSubElement(path);; 295}; 296 ; 297/////////////////////////////////////////////////////////////////////////; 298/// Returns element with path, specified as Browsable::RElementPath_t; 299 ; 300std::shared_ptr<Browsable::RElement> RBrowserData::GetElementFromTop(const Browsable::RElementPath_t &path); 301{; 302 return GetSubElement(path);; 303}; 304 ; 305/////////////////////////////////////////////////////////////////////////; 306/// Returns sub-element starting from top, using cached data; 307 ; 308std::shared_ptr<Browsable::RElement> RBrowserData::GetSubElement(const Browsable::RElementPath_t &path); 309{; 310 if (path.empty()); 311 return fTopElement;; 312 ; 313 // validate cache - removes no longer actual elements; 314 RemoveFromCache(nullptr);; 315 ; 316 // first check direct match in cache; 317 for (auto &entry : fCache); 318 if (entry.first == path); 319 return entry.second;; 320 ; 321 // find best possible entry in cache; 322 int pos = 0;; 323 auto elem = fTopElement;; 324 ; 325 for (auto &entry : fCache) {; 326 if (entry.first.size() >= path.size()); 327 continue;; 328 ; 329 auto comp = Browsable::RElement::ComparePaths(path, entry.first);; 330 ; 331 if ((comp > pos) && (comp == (int) entry.first.size())) {; 332 pos = comp;; 333 elem = entry.second;; 334 }; 335 }; 336 ; 337 while (pos < (int) path.size()) {; 338 std::string subname = path[pos];; 339 int indx = Browsable::RElement::ExtractItemIndex(subname);; 340 ; 341 auto iter = elem->GetChildsIter();; 342 if (!iter); 343 return nullptr;; 344 ; 345 if (!iter->Find(subname, indx)) {; 346 if (indx < 0); 347 return nullptr;; 348 iter = elem->GetChildsIter();; 349 if (!iter || !iter->Find(subname)); 350 return nullptr;; 351 }; 352 ; 353 elem = iter->GetElement();; 354 ; 355 if (!elem); 356 return nullptr;; 357 ; 358 auto subpath = path;; 359 subpath.resize(pos+1);; 360 fCache.emplace_back(subpath, elem);; 361 pos++; // switch to next element; 362 }; 363 ; 364 return elem;; 365}",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:11378,Performance,cache,cache,11378,"(auto &entry : fCache) {; 326 if (entry.first.size() >= path.size()); 327 continue;; 328 ; 329 auto comp = Browsable::RElement::ComparePaths(path, entry.first);; 330 ; 331 if ((comp > pos) && (comp == (int) entry.first.size())) {; 332 pos = comp;; 333 elem = entry.second;; 334 }; 335 }; 336 ; 337 while (pos < (int) path.size()) {; 338 std::string subname = path[pos];; 339 int indx = Browsable::RElement::ExtractItemIndex(subname);; 340 ; 341 auto iter = elem->GetChildsIter();; 342 if (!iter); 343 return nullptr;; 344 ; 345 if (!iter->Find(subname, indx)) {; 346 if (indx < 0); 347 return nullptr;; 348 iter = elem->GetChildsIter();; 349 if (!iter || !iter->Find(subname)); 350 return nullptr;; 351 }; 352 ; 353 elem = iter->GetElement();; 354 ; 355 if (!elem); 356 return nullptr;; 357 ; 358 auto subpath = path;; 359 subpath.resize(pos+1);; 360 fCache.emplace_back(subpath, elem);; 361 pos++; // switch to next element; 362 }; 363 ; 364 return elem;; 365}; 366 ; 367/////////////////////////////////////////////////////////////////////////; 368/// Clear internal objects cache; 369 ; 370void RBrowserData::ClearCache(); 371{; 372 fCache.clear();; 373}; 374 ; 375/////////////////////////////////////////////////////////////////////////; 376/// Remove object from cache; 377/// If nullptr specified - removes no-longer-valid elements; 378/// Returns true if any element was removed; 379 ; 380bool RBrowserData::RemoveFromCache(void *obj); 381{; 382 unsigned pos = 0;; 383 ; 384 bool isany = false;; 385 ; 386 while (pos < fCache.size()) {; 387 if (obj ? !fCache[pos].second->IsObject(obj) : fCache[pos].second->CheckValid()) {; 388 pos++;; 389 continue;; 390 }; 391 ; 392 isany = true;; 393 auto path = fCache[pos].first;; 394 fCache.erase(fCache.begin() + pos);; 395 if (RemoveFromCache(path)); 396 pos = 0; // start scan from the beginning; 397 }; 398 ; 399 return isany;; 400}; 401 ; 402/////////////////////////////////////////////////////////////////////////; 403/// Remove path (and all sub",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:11570,Performance,cache,cache,11570,"td::string subname = path[pos];; 339 int indx = Browsable::RElement::ExtractItemIndex(subname);; 340 ; 341 auto iter = elem->GetChildsIter();; 342 if (!iter); 343 return nullptr;; 344 ; 345 if (!iter->Find(subname, indx)) {; 346 if (indx < 0); 347 return nullptr;; 348 iter = elem->GetChildsIter();; 349 if (!iter || !iter->Find(subname)); 350 return nullptr;; 351 }; 352 ; 353 elem = iter->GetElement();; 354 ; 355 if (!elem); 356 return nullptr;; 357 ; 358 auto subpath = path;; 359 subpath.resize(pos+1);; 360 fCache.emplace_back(subpath, elem);; 361 pos++; // switch to next element; 362 }; 363 ; 364 return elem;; 365}; 366 ; 367/////////////////////////////////////////////////////////////////////////; 368/// Clear internal objects cache; 369 ; 370void RBrowserData::ClearCache(); 371{; 372 fCache.clear();; 373}; 374 ; 375/////////////////////////////////////////////////////////////////////////; 376/// Remove object from cache; 377/// If nullptr specified - removes no-longer-valid elements; 378/// Returns true if any element was removed; 379 ; 380bool RBrowserData::RemoveFromCache(void *obj); 381{; 382 unsigned pos = 0;; 383 ; 384 bool isany = false;; 385 ; 386 while (pos < fCache.size()) {; 387 if (obj ? !fCache[pos].second->IsObject(obj) : fCache[pos].second->CheckValid()) {; 388 pos++;; 389 continue;; 390 }; 391 ; 392 isany = true;; 393 auto path = fCache[pos].first;; 394 fCache.erase(fCache.begin() + pos);; 395 if (RemoveFromCache(path)); 396 pos = 0; // start scan from the beginning; 397 }; 398 ; 399 return isany;; 400}; 401 ; 402/////////////////////////////////////////////////////////////////////////; 403/// Remove path (and all sub-paths) from cache; 404/// Returns true if any element was removed; 405 ; 406bool RBrowserData::RemoveFromCache(const Browsable::RElementPath_t &path); 407{; 408 if (path.size() == 0); 409 return false;; 410 ; 411 bool isany = false;; 412 unsigned pos = 0;; 413 while (pos < fCache.size()) {; 414 if (Browsable::RElement::ComparePaths(pat",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:12315,Performance,cache,cache,12315," 366 ; 367/////////////////////////////////////////////////////////////////////////; 368/// Clear internal objects cache; 369 ; 370void RBrowserData::ClearCache(); 371{; 372 fCache.clear();; 373}; 374 ; 375/////////////////////////////////////////////////////////////////////////; 376/// Remove object from cache; 377/// If nullptr specified - removes no-longer-valid elements; 378/// Returns true if any element was removed; 379 ; 380bool RBrowserData::RemoveFromCache(void *obj); 381{; 382 unsigned pos = 0;; 383 ; 384 bool isany = false;; 385 ; 386 while (pos < fCache.size()) {; 387 if (obj ? !fCache[pos].second->IsObject(obj) : fCache[pos].second->CheckValid()) {; 388 pos++;; 389 continue;; 390 }; 391 ; 392 isany = true;; 393 auto path = fCache[pos].first;; 394 fCache.erase(fCache.begin() + pos);; 395 if (RemoveFromCache(path)); 396 pos = 0; // start scan from the beginning; 397 }; 398 ; 399 return isany;; 400}; 401 ; 402/////////////////////////////////////////////////////////////////////////; 403/// Remove path (and all sub-paths) from cache; 404/// Returns true if any element was removed; 405 ; 406bool RBrowserData::RemoveFromCache(const Browsable::RElementPath_t &path); 407{; 408 if (path.size() == 0); 409 return false;; 410 ; 411 bool isany = false;; 412 unsigned pos = 0;; 413 while (pos < fCache.size()) {; 414 if (Browsable::RElement::ComparePaths(path, fCache[pos].first) == (int) path.size()) {; 415 fCache.erase(fCache.begin() + pos);; 416 isany = true;; 417 } else {; 418 pos++;; 419 }; 420 }; 421 return isany;; 422}; RBrowserData.hxx; RGroup.hxx; RLevelIter.hxx; RLogger.hxx; RProvider.hxx; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; RSysFile.hxx; RWrapper.hxx; _dataRooAbsData * _dataPointer to original input dataset.Definition RooAbsTestStatistic.h:84; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:101; TBufferJSON.h; TEnv.h; gEnvR__EXTERN TEnv * gEnvDefinition TEnv.h:170; TFolder.h; idOption_t Option_t TPoint TPoint ",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:16042,Performance,cache,cache,16042,"serData.cxx:43; ROOT::RBrowserDataCleanup::fDataRBrowserData & fDataDefinition RBrowserData.cxx:45; ROOT::RBrowserDataCleanup::RBrowserDataCleanupRBrowserDataCleanup(RBrowserData &_data)Definition RBrowserData.cxx:48; ROOT::RBrowserDataCleanup::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from a list.Definition RBrowserData.cxx:50; ROOT::RBrowserDataWay to browse (hopefully) everything in ROOT.Definition RBrowserData.hxx:37; ROOT::RBrowserData::SetTopElementvoid SetTopElement(std::shared_ptr< Browsable::RElement > elem)set top element for browsingDefinition RBrowserData.cxx:88; ROOT::RBrowserData::fLastSortedItemsstd::vector< const Browsable::RItem * > fLastSortedItems! sorted child items, used in requestsDefinition RBrowserData.hxx:51; ROOT::RBrowserData::fWorkingPathBrowsable::RElementPath_t fWorkingPath! path showed in BreadcrumbDefinition RBrowserData.hxx:43; ROOT::RBrowserData::RemoveFromCachebool RemoveFromCache(void *obj)Remove object from cache If nullptr specified - removes no-longer-valid elements Returns true if any ...Definition RBrowserData.cxx:380; ROOT::RBrowserData::GetSubElementstd::shared_ptr< Browsable::RElement > GetSubElement(const Browsable::RElementPath_t &path)Returns sub-element starting from top, using cached data.Definition RBrowserData.cxx:308; ROOT::RBrowserData::fCachestd::vector< std::pair< Browsable::RElementPath_t, std::shared_ptr< Browsable::RElement > > > fCache! already requested elementsDefinition RBrowserData.hxx:45; ROOT::RBrowserData::fCleanupHandlestd::unique_ptr< TObject > fCleanupHandle! cleanup handle for RecursiveRemoveDefinition RBrowserData.hxx:54; ROOT::RBrowserData::DecomposePathBrowsable::RElementPath_t DecomposePath(const std::string &path, bool relative_to_work_element)Decompose path to elements Returns array of names for each element in the path, first element either ...Definition RBrowserData.cxx:155; ROOT::RBrowserData::fLastAllChildsbool fLastAllChilds! if all chlds w",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:16329,Performance,cache,cached,16329,".cxx:48; ROOT::RBrowserDataCleanup::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from a list.Definition RBrowserData.cxx:50; ROOT::RBrowserDataWay to browse (hopefully) everything in ROOT.Definition RBrowserData.hxx:37; ROOT::RBrowserData::SetTopElementvoid SetTopElement(std::shared_ptr< Browsable::RElement > elem)set top element for browsingDefinition RBrowserData.cxx:88; ROOT::RBrowserData::fLastSortedItemsstd::vector< const Browsable::RItem * > fLastSortedItems! sorted child items, used in requestsDefinition RBrowserData.hxx:51; ROOT::RBrowserData::fWorkingPathBrowsable::RElementPath_t fWorkingPath! path showed in BreadcrumbDefinition RBrowserData.hxx:43; ROOT::RBrowserData::RemoveFromCachebool RemoveFromCache(void *obj)Remove object from cache If nullptr specified - removes no-longer-valid elements Returns true if any ...Definition RBrowserData.cxx:380; ROOT::RBrowserData::GetSubElementstd::shared_ptr< Browsable::RElement > GetSubElement(const Browsable::RElementPath_t &path)Returns sub-element starting from top, using cached data.Definition RBrowserData.cxx:308; ROOT::RBrowserData::fCachestd::vector< std::pair< Browsable::RElementPath_t, std::shared_ptr< Browsable::RElement > > > fCache! already requested elementsDefinition RBrowserData.hxx:45; ROOT::RBrowserData::fCleanupHandlestd::unique_ptr< TObject > fCleanupHandle! cleanup handle for RecursiveRemoveDefinition RBrowserData.hxx:54; ROOT::RBrowserData::DecomposePathBrowsable::RElementPath_t DecomposePath(const std::string &path, bool relative_to_work_element)Decompose path to elements Returns array of names for each element in the path, first element either ...Definition RBrowserData.cxx:155; ROOT::RBrowserData::fLastAllChildsbool fLastAllChilds! if all chlds were extractedDefinition RBrowserData.hxx:50; ROOT::RBrowserData::~RBrowserDatavirtual ~RBrowserData()Destructor.Definition RBrowserData.cxx:78; ROOT::RBrowserData::ProcessBrowserRequestbool ProcessBrowserReque",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:17772,Performance,cache,cache,17772,"Browsable::RElementPath_t DecomposePath(const std::string &path, bool relative_to_work_element)Decompose path to elements Returns array of names for each element in the path, first element either ...Definition RBrowserData.cxx:155; ROOT::RBrowserData::fLastAllChildsbool fLastAllChilds! if all chlds were extractedDefinition RBrowserData.hxx:50; ROOT::RBrowserData::~RBrowserDatavirtual ~RBrowserData()Destructor.Definition RBrowserData.cxx:78; ROOT::RBrowserData::ProcessBrowserRequestbool ProcessBrowserRequest(const RBrowserRequest &request, RBrowserReply &reply)Process browser request.Definition RBrowserData.cxx:171; ROOT::RBrowserData::GetElementFromTopstd::shared_ptr< Browsable::RElement > GetElementFromTop(const Browsable::RElementPath_t &path)Returns element with path, specified as Browsable::RElementPath_t.Definition RBrowserData.cxx:300; ROOT::RBrowserData::fLastSortMethodstd::string fLastSortMethod! last sort methodDefinition RBrowserData.hxx:52; ROOT::RBrowserData::ClearCachevoid ClearCache()Clear internal objects cache.Definition RBrowserData.cxx:370; ROOT::RBrowserData::ProcessRequeststd::string ProcessRequest(const RBrowserRequest &request)Process browser request, returns string with JSON of RBrowserReply data.Definition RBrowserData.cxx:269; ROOT::RBrowserData::fLastItemsstd::vector< std::unique_ptr< Browsable::RItem > > fLastItems! created browser items - used in requestsDefinition RBrowserData.hxx:49; ROOT::RBrowserData::fLastPathBrowsable::RElementPath_t fLastPath! path to last used elementDefinition RBrowserData.hxx:47; ROOT::RBrowserData::SetWorkingPathvoid SetWorkingPath(const Browsable::RElementPath_t &path)set working directory relative to top elementDefinition RBrowserData.cxx:98; ROOT::RBrowserData::fTopElementstd::shared_ptr< Browsable::RElement > fTopElement! top elementDefinition RBrowserData.hxx:41; ROOT::RBrowserData::GetElementstd::shared_ptr< Browsable::RElement > GetElement(const std::string &str)Returns element with path, specified as st",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:14219,Safety,avoid,avoid,14219,"v.h; gEnvR__EXTERN TEnv * gEnvDefinition TEnv.h:170; TFolder.h; idOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize idDefinition TGWin32VirtualXProxy.cxx:94; TObjectHolder.hxx; TROOT.h; gROOTMutexR__EXTERN TVirtualMutex * gROOTMutexDefinition TROOT.h:63; gROOT#define gROOTDefinition TROOT.h:406; R__LOCKGUARD#define R__LOCKGUARD(mutex)Definition TVirtualMutex.h:95; ROOT::Browsable::RElement::ExtractItemIndexstatic int ExtractItemIndex(std::string &name)Extract index from name Index coded by client with ###<indx>$$$ suffix Such coding used by browser to...Definition RElement.cxx:178; ROOT::Browsable::RElement::ComparePathsstatic int ComparePaths(const RElementPath_t &path1, const RElementPath_t &path2)Compare two paths, Returns number of elements matches in both paths.Definition RElement.cxx:145; ROOT::Browsable::RElement::ParsePathstatic RElementPath_t ParsePath(const std::string &str)Parse string path to produce RElementPath_t One should avoid to use string pathes as much as possible...Definition RElement.cxx:116; ROOT::Browsable::RItemRepresentation of single item in the browser.Definition RItem.hxx:23; ROOT::Browsable::RProvider::Browsestatic std::shared_ptr< RElement > Browse(std::unique_ptr< RHolder > &obj)Create browsable element for the object Created element may take ownership over the object.Definition RProvider.cxx:273; ROOT::Browsable::RSysFile::ProvideTopEntriesstatic RElementPath_t ProvideTopEntries(std::shared_ptr< RGroup > &comp, const std::string &workdir="""")Provide top entries for file system On windows it is list of existing drivers, on Linux it is ""File s...Definition RSysFile.cxx:533; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; ROOT::RBrowserDataCleanupDefinition RBrowserData.cxx:43; ROOT::RBrowserDataCleanup::fDataRBrowserData & fDataDefinition RBrowserData.cxx:45; ROOT::RBrowserDataCleanup::R",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:9972,Security,validat,validate,9972,"//////////////////////////////////////; 288/// Returns element with path, specified as string; 289 ; 290std::shared_ptr<Browsable::RElement> RBrowserData::GetElement(const std::string &str); 291{; 292 auto path = DecomposePath(str, true);; 293 ; 294 return GetSubElement(path);; 295}; 296 ; 297/////////////////////////////////////////////////////////////////////////; 298/// Returns element with path, specified as Browsable::RElementPath_t; 299 ; 300std::shared_ptr<Browsable::RElement> RBrowserData::GetElementFromTop(const Browsable::RElementPath_t &path); 301{; 302 return GetSubElement(path);; 303}; 304 ; 305/////////////////////////////////////////////////////////////////////////; 306/// Returns sub-element starting from top, using cached data; 307 ; 308std::shared_ptr<Browsable::RElement> RBrowserData::GetSubElement(const Browsable::RElementPath_t &path); 309{; 310 if (path.empty()); 311 return fTopElement;; 312 ; 313 // validate cache - removes no longer actual elements; 314 RemoveFromCache(nullptr);; 315 ; 316 // first check direct match in cache; 317 for (auto &entry : fCache); 318 if (entry.first == path); 319 return entry.second;; 320 ; 321 // find best possible entry in cache; 322 int pos = 0;; 323 auto elem = fTopElement;; 324 ; 325 for (auto &entry : fCache) {; 326 if (entry.first.size() >= path.size()); 327 continue;; 328 ; 329 auto comp = Browsable::RElement::ComparePaths(path, entry.first);; 330 ; 331 if ((comp > pos) && (comp == (int) entry.first.size())) {; 332 pos = comp;; 333 elem = entry.second;; 334 }; 335 }; 336 ; 337 while (pos < (int) path.size()) {; 338 std::string subname = path[pos];; 339 int indx = Browsable::RElement::ExtractItemIndex(subname);; 340 ; 341 auto iter = elem->GetChildsIter();; 342 if (!iter); 343 return nullptr;; 344 ; 345 if (!iter->Find(subname, indx)) {; 346 if (indx < 0); 347 return nullptr;; 348 iter = elem->GetChildsIter();; 349 if (!iter || !iter->Find(subname)); 350 return nullptr;; 351 }; 352 ; 353 elem = iter->GetElem",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:14931,Testability,log,log,14931,"lementPath_t &path1, const RElementPath_t &path2)Compare two paths, Returns number of elements matches in both paths.Definition RElement.cxx:145; ROOT::Browsable::RElement::ParsePathstatic RElementPath_t ParsePath(const std::string &str)Parse string path to produce RElementPath_t One should avoid to use string pathes as much as possible...Definition RElement.cxx:116; ROOT::Browsable::RItemRepresentation of single item in the browser.Definition RItem.hxx:23; ROOT::Browsable::RProvider::Browsestatic std::shared_ptr< RElement > Browse(std::unique_ptr< RHolder > &obj)Create browsable element for the object Created element may take ownership over the object.Definition RProvider.cxx:273; ROOT::Browsable::RSysFile::ProvideTopEntriesstatic RElementPath_t ProvideTopEntries(std::shared_ptr< RGroup > &comp, const std::string &workdir="""")Provide top entries for file system On windows it is list of existing drivers, on Linux it is ""File s...Definition RSysFile.cxx:533; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; ROOT::RBrowserDataCleanupDefinition RBrowserData.cxx:43; ROOT::RBrowserDataCleanup::fDataRBrowserData & fDataDefinition RBrowserData.cxx:45; ROOT::RBrowserDataCleanup::RBrowserDataCleanupRBrowserDataCleanup(RBrowserData &_data)Definition RBrowserData.cxx:48; ROOT::RBrowserDataCleanup::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from a list.Definition RBrowserData.cxx:50; ROOT::RBrowserDataWay to browse (hopefully) everything in ROOT.Definition RBrowserData.hxx:37; ROOT::RBrowserData::SetTopElementvoid SetTopElement(std::shared_ptr< Browsable::RElement > elem)set top element for browsingDefinition RBrowserData.cxx:88; ROOT::RBrowserData::fLastSortedItemsstd::vector< const Browsable::RItem * > fLastSortedItems! sorted child items, used in requestsDefinition RBrowserData.hxx:51; ROOT::RBrowserData::fWorkingPathBrowsable::RElementPath_t fWorkingPath! path showed in BreadcrumbDef",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:4541,Usability,clear,clear,4541,"15 auto elem_root = Browsable::RProvider::Browse(rootfold);; 116 if (elem_root); 117 comp->Add(std::make_shared<Browsable::RWrapper>(""root"", elem_root));; 118 ; 119 std::unique_ptr<Browsable::RHolder> rootfiles = std::make_unique<Browsable::TObjectHolder>(gROOT->GetListOfFiles(), kFALSE);; 120 auto elem_files = Browsable::RProvider::Browse(rootfiles);; 121 if (elem_files) {; 122 auto files = std::make_shared<Browsable::RWrapper>(""ROOT Files"", elem_files);; 123 files->SetExpandByDefault(true);; 124 comp->Add(files);; 125 // if there are any open files, make them visible by default; 126 if (elem_files->GetNumChilds() > 0); 127 seldir = {};; 128 }; 129 ; 130 SetTopElement(comp);; 131 ; 132 SetWorkingPath(seldir);; 133}; 134 ; 135/////////////////////////////////////////////////////////////////////; 136/// Reset all data correspondent to last request; 137 ; 138void RBrowserData::ResetLastRequestData(bool with_element); 139{; 140 fLastAllChilds = false;; 141 fLastSortedItems.clear();; 142 fLastSortMethod.clear();; 143 fLastItems.clear();; 144 if (with_element) {; 145 fLastPath.clear();; 146 fLastElement.reset();; 147 }; 148}; 149 ; 150/////////////////////////////////////////////////////////////////////////; 151/// Decompose path to elements; 152/// Returns array of names for each element in the path, first element either ""/"" or "".""; 153/// If returned array empty - it is error; 154 ; 155Browsable::RElementPath_t RBrowserData::DecomposePath(const std::string &strpath, bool relative_to_work_element); 156{; 157 Browsable::RElementPath_t arr;; 158 if (relative_to_work_element) arr = fWorkingPath;; 159 ; 160 if (strpath.empty()); 161 return arr;; 162 ; 163 auto arr2 = Browsable::RElement::ParsePath(strpath);; 164 arr.insert(arr.end(), arr2.begin(), arr2.end());; 165 return arr;; 166}; 167 ; 168/////////////////////////////////////////////////////////////////////////; 169/// Process browser request; 170 ; 171bool RBrowserData::ProcessBrowserRequest(const RBrowserRequest &requ",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:4571,Usability,clear,clear,4571,"le::RProvider::Browse(rootfold);; 116 if (elem_root); 117 comp->Add(std::make_shared<Browsable::RWrapper>(""root"", elem_root));; 118 ; 119 std::unique_ptr<Browsable::RHolder> rootfiles = std::make_unique<Browsable::TObjectHolder>(gROOT->GetListOfFiles(), kFALSE);; 120 auto elem_files = Browsable::RProvider::Browse(rootfiles);; 121 if (elem_files) {; 122 auto files = std::make_shared<Browsable::RWrapper>(""ROOT Files"", elem_files);; 123 files->SetExpandByDefault(true);; 124 comp->Add(files);; 125 // if there are any open files, make them visible by default; 126 if (elem_files->GetNumChilds() > 0); 127 seldir = {};; 128 }; 129 ; 130 SetTopElement(comp);; 131 ; 132 SetWorkingPath(seldir);; 133}; 134 ; 135/////////////////////////////////////////////////////////////////////; 136/// Reset all data correspondent to last request; 137 ; 138void RBrowserData::ResetLastRequestData(bool with_element); 139{; 140 fLastAllChilds = false;; 141 fLastSortedItems.clear();; 142 fLastSortMethod.clear();; 143 fLastItems.clear();; 144 if (with_element) {; 145 fLastPath.clear();; 146 fLastElement.reset();; 147 }; 148}; 149 ; 150/////////////////////////////////////////////////////////////////////////; 151/// Decompose path to elements; 152/// Returns array of names for each element in the path, first element either ""/"" or "".""; 153/// If returned array empty - it is error; 154 ; 155Browsable::RElementPath_t RBrowserData::DecomposePath(const std::string &strpath, bool relative_to_work_element); 156{; 157 Browsable::RElementPath_t arr;; 158 if (relative_to_work_element) arr = fWorkingPath;; 159 ; 160 if (strpath.empty()); 161 return arr;; 162 ; 163 auto arr2 = Browsable::RElement::ParsePath(strpath);; 164 arr.insert(arr.end(), arr2.begin(), arr2.end());; 165 return arr;; 166}; 167 ; 168/////////////////////////////////////////////////////////////////////////; 169/// Process browser request; 170 ; 171bool RBrowserData::ProcessBrowserRequest(const RBrowserRequest &request, RBrowserReply &reply); ",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:4596,Usability,clear,clear,4596," if (elem_root); 117 comp->Add(std::make_shared<Browsable::RWrapper>(""root"", elem_root));; 118 ; 119 std::unique_ptr<Browsable::RHolder> rootfiles = std::make_unique<Browsable::TObjectHolder>(gROOT->GetListOfFiles(), kFALSE);; 120 auto elem_files = Browsable::RProvider::Browse(rootfiles);; 121 if (elem_files) {; 122 auto files = std::make_shared<Browsable::RWrapper>(""ROOT Files"", elem_files);; 123 files->SetExpandByDefault(true);; 124 comp->Add(files);; 125 // if there are any open files, make them visible by default; 126 if (elem_files->GetNumChilds() > 0); 127 seldir = {};; 128 }; 129 ; 130 SetTopElement(comp);; 131 ; 132 SetWorkingPath(seldir);; 133}; 134 ; 135/////////////////////////////////////////////////////////////////////; 136/// Reset all data correspondent to last request; 137 ; 138void RBrowserData::ResetLastRequestData(bool with_element); 139{; 140 fLastAllChilds = false;; 141 fLastSortedItems.clear();; 142 fLastSortMethod.clear();; 143 fLastItems.clear();; 144 if (with_element) {; 145 fLastPath.clear();; 146 fLastElement.reset();; 147 }; 148}; 149 ; 150/////////////////////////////////////////////////////////////////////////; 151/// Decompose path to elements; 152/// Returns array of names for each element in the path, first element either ""/"" or "".""; 153/// If returned array empty - it is error; 154 ; 155Browsable::RElementPath_t RBrowserData::DecomposePath(const std::string &strpath, bool relative_to_work_element); 156{; 157 Browsable::RElementPath_t arr;; 158 if (relative_to_work_element) arr = fWorkingPath;; 159 ; 160 if (strpath.empty()); 161 return arr;; 162 ; 163 auto arr2 = Browsable::RElement::ParsePath(strpath);; 164 arr.insert(arr.end(), arr2.begin(), arr2.end());; 165 return arr;; 166}; 167 ; 168/////////////////////////////////////////////////////////////////////////; 169/// Process browser request; 170 ; 171bool RBrowserData::ProcessBrowserRequest(const RBrowserRequest &request, RBrowserReply &reply); 172{; 173 auto path = fWorkingPath;; ",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:4645,Usability,clear,clear,4645,"ke_shared<Browsable::RWrapper>(""root"", elem_root));; 118 ; 119 std::unique_ptr<Browsable::RHolder> rootfiles = std::make_unique<Browsable::TObjectHolder>(gROOT->GetListOfFiles(), kFALSE);; 120 auto elem_files = Browsable::RProvider::Browse(rootfiles);; 121 if (elem_files) {; 122 auto files = std::make_shared<Browsable::RWrapper>(""ROOT Files"", elem_files);; 123 files->SetExpandByDefault(true);; 124 comp->Add(files);; 125 // if there are any open files, make them visible by default; 126 if (elem_files->GetNumChilds() > 0); 127 seldir = {};; 128 }; 129 ; 130 SetTopElement(comp);; 131 ; 132 SetWorkingPath(seldir);; 133}; 134 ; 135/////////////////////////////////////////////////////////////////////; 136/// Reset all data correspondent to last request; 137 ; 138void RBrowserData::ResetLastRequestData(bool with_element); 139{; 140 fLastAllChilds = false;; 141 fLastSortedItems.clear();; 142 fLastSortMethod.clear();; 143 fLastItems.clear();; 144 if (with_element) {; 145 fLastPath.clear();; 146 fLastElement.reset();; 147 }; 148}; 149 ; 150/////////////////////////////////////////////////////////////////////////; 151/// Decompose path to elements; 152/// Returns array of names for each element in the path, first element either ""/"" or "".""; 153/// If returned array empty - it is error; 154 ; 155Browsable::RElementPath_t RBrowserData::DecomposePath(const std::string &strpath, bool relative_to_work_element); 156{; 157 Browsable::RElementPath_t arr;; 158 if (relative_to_work_element) arr = fWorkingPath;; 159 ; 160 if (strpath.empty()); 161 return arr;; 162 ; 163 auto arr2 = Browsable::RElement::ParsePath(strpath);; 164 arr.insert(arr.end(), arr2.begin(), arr2.end());; 165 return arr;; 166}; 167 ; 168/////////////////////////////////////////////////////////////////////////; 169/// Process browser request; 170 ; 171bool RBrowserData::ProcessBrowserRequest(const RBrowserRequest &request, RBrowserReply &reply); 172{; 173 auto path = fWorkingPath;; 174 path.insert(path.end(), request.pa",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:6545,Usability,clear,clear,6545," RBrowserReply &reply); 172{; 173 auto path = fWorkingPath;; 174 path.insert(path.end(), request.path.begin(), request.path.end());; 175 ; 176 if ((path != fLastPath) || !fLastElement) {; 177 ; 178 auto elem = GetSubElement(path);; 179 if (!elem) return false;; 180 ; 181 ResetLastRequestData(true);; 182 ; 183 fLastPath = path;; 184 fLastElement = std::move(elem);; 185 ; 186 fLastElement->cd(); // set element active; 187 } else if (request.reload) {; 188 // only reload items from element, not need to reset element itself; 189 ResetLastRequestData(false);; 190 }; 191 ; 192 // when request childs, always try to make elements; 193 if (fLastItems.empty()) {; 194 ; 195 auto iter = fLastElement->GetChildsIter();; 196 ; 197 if (!iter) return false;; 198 int id = 0;; 199 fLastAllChilds = true;; 200 ; 201 while (iter->Next() && fLastAllChilds) {; 202 fLastItems.emplace_back(iter->CreateItem());; 203 if (id++ > 10000); 204 fLastAllChilds = false;; 205 }; 206 ; 207 fLastSortedItems.clear();; 208 fLastSortMethod.clear();; 209 }; 210 ; 211 // create sorted array; 212 if ((fLastSortedItems.size() != fLastItems.size()) ||; 213 (fLastSortMethod != request.sort) ||; 214 (fLastSortReverse != request.reverse)) {; 215 fLastSortedItems.resize(fLastItems.size(), nullptr);; 216 int id = 0;; 217 if (request.sort.empty()) {; 218 // no sorting, just move all folders up; 219 for (auto &item : fLastItems); 220 if (item->IsFolder()); 221 fLastSortedItems[id++] = item.get();; 222 for (auto &item : fLastItems); 223 if (!item->IsFolder()); 224 fLastSortedItems[id++] = item.get();; 225 } else {; 226 // copy items; 227 for (auto &item : fLastItems); 228 fLastSortedItems[id++] = item.get();; 229 ; 230 if (request.sort != ""unsorted""); 231 std::sort(fLastSortedItems.begin(), fLastSortedItems.end(),; 232 [request](const Browsable::RItem *a, const Browsable::RItem *b) { return a ? a->Compare(b, request.sort) : !b; });; 233 }; 234 ; 235 if (request.reverse); 236 std::reverse(fLastSortedItems.begin(), fLast",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:6575,Usability,clear,clear,6575,"gPath;; 174 path.insert(path.end(), request.path.begin(), request.path.end());; 175 ; 176 if ((path != fLastPath) || !fLastElement) {; 177 ; 178 auto elem = GetSubElement(path);; 179 if (!elem) return false;; 180 ; 181 ResetLastRequestData(true);; 182 ; 183 fLastPath = path;; 184 fLastElement = std::move(elem);; 185 ; 186 fLastElement->cd(); // set element active; 187 } else if (request.reload) {; 188 // only reload items from element, not need to reset element itself; 189 ResetLastRequestData(false);; 190 }; 191 ; 192 // when request childs, always try to make elements; 193 if (fLastItems.empty()) {; 194 ; 195 auto iter = fLastElement->GetChildsIter();; 196 ; 197 if (!iter) return false;; 198 int id = 0;; 199 fLastAllChilds = true;; 200 ; 201 while (iter->Next() && fLastAllChilds) {; 202 fLastItems.emplace_back(iter->CreateItem());; 203 if (id++ > 10000); 204 fLastAllChilds = false;; 205 }; 206 ; 207 fLastSortedItems.clear();; 208 fLastSortMethod.clear();; 209 }; 210 ; 211 // create sorted array; 212 if ((fLastSortedItems.size() != fLastItems.size()) ||; 213 (fLastSortMethod != request.sort) ||; 214 (fLastSortReverse != request.reverse)) {; 215 fLastSortedItems.resize(fLastItems.size(), nullptr);; 216 int id = 0;; 217 if (request.sort.empty()) {; 218 // no sorting, just move all folders up; 219 for (auto &item : fLastItems); 220 if (item->IsFolder()); 221 fLastSortedItems[id++] = item.get();; 222 for (auto &item : fLastItems); 223 if (!item->IsFolder()); 224 fLastSortedItems[id++] = item.get();; 225 } else {; 226 // copy items; 227 for (auto &item : fLastItems); 228 fLastSortedItems[id++] = item.get();; 229 ; 230 if (request.sort != ""unsorted""); 231 std::sort(fLastSortedItems.begin(), fLastSortedItems.end(),; 232 [request](const Browsable::RItem *a, const Browsable::RItem *b) { return a ? a->Compare(b, request.sort) : !b; });; 233 }; 234 ; 235 if (request.reverse); 236 std::reverse(fLastSortedItems.begin(), fLastSortedItems.end());; 237 ; 238 fLastSortMethod = reque",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RBrowserData_8cxx_source.html:11444,Usability,clear,clear,11444,"td::string subname = path[pos];; 339 int indx = Browsable::RElement::ExtractItemIndex(subname);; 340 ; 341 auto iter = elem->GetChildsIter();; 342 if (!iter); 343 return nullptr;; 344 ; 345 if (!iter->Find(subname, indx)) {; 346 if (indx < 0); 347 return nullptr;; 348 iter = elem->GetChildsIter();; 349 if (!iter || !iter->Find(subname)); 350 return nullptr;; 351 }; 352 ; 353 elem = iter->GetElement();; 354 ; 355 if (!elem); 356 return nullptr;; 357 ; 358 auto subpath = path;; 359 subpath.resize(pos+1);; 360 fCache.emplace_back(subpath, elem);; 361 pos++; // switch to next element; 362 }; 363 ; 364 return elem;; 365}; 366 ; 367/////////////////////////////////////////////////////////////////////////; 368/// Clear internal objects cache; 369 ; 370void RBrowserData::ClearCache(); 371{; 372 fCache.clear();; 373}; 374 ; 375/////////////////////////////////////////////////////////////////////////; 376/// Remove object from cache; 377/// If nullptr specified - removes no-longer-valid elements; 378/// Returns true if any element was removed; 379 ; 380bool RBrowserData::RemoveFromCache(void *obj); 381{; 382 unsigned pos = 0;; 383 ; 384 bool isany = false;; 385 ; 386 while (pos < fCache.size()) {; 387 if (obj ? !fCache[pos].second->IsObject(obj) : fCache[pos].second->CheckValid()) {; 388 pos++;; 389 continue;; 390 }; 391 ; 392 isany = true;; 393 auto path = fCache[pos].first;; 394 fCache.erase(fCache.begin() + pos);; 395 if (RemoveFromCache(path)); 396 pos = 0; // start scan from the beginning; 397 }; 398 ; 399 return isany;; 400}; 401 ; 402/////////////////////////////////////////////////////////////////////////; 403/// Remove path (and all sub-paths) from cache; 404/// Returns true if any element was removed; 405 ; 406bool RBrowserData::RemoveFromCache(const Browsable::RElementPath_t &path); 407{; 408 if (path.size() == 0); 409 return false;; 410 ; 411 bool isany = false;; 412 unsigned pos = 0;; 413 while (pos < fCache.size()) {; 414 if (Browsable::RElement::ComparePaths(pat",MatchSource.WIKI,doc/v632/RBrowserData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html
https://root.cern/doc/v632/RConfig_8hxx.html:237,Integrability,depend,dependency,237,". ROOT: core/foundation/inc/ROOT/RConfig.hxx File Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Macros ; RConfig.hxx File Reference. #include ""../RVersion.h""; #include ""RConfigure.h"". Include dependency graph for RConfig.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Macros; #define _NAME1_(name)   name;  ; #define _NAME2_(name1, name2)   _NAME1_(name1)name2;  ; #define _NAME3_(name1, name2, name3)   _NAME2_(name1,name2)name3;  ; #define _QUOTE_(name)   ""name"";  ; #define _R__DEPRECATED_634(REASON)   _R__DEPRECATED_LATER(REASON);  ; #define _R__DEPRECATED_636(REASON)   _R__DEPRECATED_LATER(REASON);  ; #define _R__DEPRECATED_700(REASON)   _R__DEPRECATED_LATER(REASON);  ; #define _R__DEPRECATED_LATER(REASON);  ; #define _R__JOIN3_(F, X, Y)   _NAME3_(F,X,Y);  ; #define _R__JOIN_(X, Y)   _NAME2_(X,Y);  ; #define _R__UNIQUE_(X)   _R__JOIN_(X,__LINE__);  ; #define _R__UNIQUE_DICT_(X)   _R__JOIN3_(R__DICTIONARY_FILENAME,X,__LINE__);  ; #define _R_DEPRECATED_REMOVE_NOW(REASON)   __attribute__((REMOVE_THIS_NOW));  ; #define R__ALWAYS_INLINE   inline;  ; #define R__ALWAYS_SUGGEST_ALTERNATIVE(ALTERNATIVE)    _R__DEPRECATED_LATER(""There is a superior alternative: "" ALTERNATIVE);  ; #define R__ANSISTREAM   /* ANSI C++ Standard Library conformant */;  ; #define R__DEPRECATED(MAJOR, MINOR, REASON)    _R__JOIN3_(_R__DEPRECATED_,MAJOR,MINOR)(""will be removed in ROOT v"" #MAJOR ""."" #MINOR "": "" REASON);  ; #define R__HIDDEN;  ; #define R__INTENTIONALLY_UNINIT_BEGIN;  ; #define R__INTENTIONALLY_UNINIT_END;  ; #define R__likely(expr)   expr;  ; #define R__NEVER_INLINE   inline;  ; #define R__SIZEDDELETE;  ; #define R__SSTREAM   /* use sstream or strstream header */;  ; #define R__SUGGEST_ALTERNATIVE(ALTERNATIVE);  ; #define R__unlikely(expr)   exp",MatchSource.WIKI,doc/v632/RConfig_8hxx.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConfig_8hxx.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:6195,Availability,error,error,6195,"ommand.substr( 0, endsymbol ) );; 148 result[""source""] = membervalue;; 149 result[""target""] = membervalue;; 150 command = TSchemaRuleProcessor::Trim( command.substr( endsymbol+1 ) );; 151 }; 152 }; 153 }; 154 ; 155 //-----------------------------------------------------------------------; 156 // Process the input until there are no characters left; 157 //////////////////////////////////////////////////////////////////////////; 158 ; 159 while( !command.empty() ) {; 160 //--------------------------------------------------------------------; 161 // Find key token; 162 ///////////////////////////////////////////////////////////////////////; 163 ; 164 std::string::size_type pos = command.find( '=' );; 165 ; 166 //--------------------------------------------------------------------; 167 // No equality sign found - no keys left; 168 ///////////////////////////////////////////////////////////////////////; 169 ; 170 if( pos == std::string::npos ) {; 171 error_string = ""Parsing error, no key found!"";; 172 return false;; 173 }; 174 ; 175 //--------------------------------------------------------------------; 176 // The key was found - process the arguments; 177 ///////////////////////////////////////////////////////////////////////; 178 ; 179 std::string key = TSchemaRuleProcessor::Trim( command.substr( 0, pos ) );; 180 command = TSchemaRuleProcessor::Trim( command.substr( pos+1 ) );; 181 ; 182 //--------------------------------------------------------------------; 183 // Nothing left to be processed; 184 ///////////////////////////////////////////////////////////////////////; 185 ; 186 if( command.size() < 1 ) {; 187 error_string = ""Parsing error, wrond or no value specified for key: "" + key;; 188 return false;; 189 }; 190 ; 191 Bool_t hasquote = command[0] == '""';; 192 ; 193 //--------------------------------------------------------------------; 194 // Processing code tag: ""{ code }""; 195 ///////////////////////////////////////////////////////////////////////; 196 ; 197 if(",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:6871,Availability,error,error,6871,"///////////////////////////////////; 169 ; 170 if( pos == std::string::npos ) {; 171 error_string = ""Parsing error, no key found!"";; 172 return false;; 173 }; 174 ; 175 //--------------------------------------------------------------------; 176 // The key was found - process the arguments; 177 ///////////////////////////////////////////////////////////////////////; 178 ; 179 std::string key = TSchemaRuleProcessor::Trim( command.substr( 0, pos ) );; 180 command = TSchemaRuleProcessor::Trim( command.substr( pos+1 ) );; 181 ; 182 //--------------------------------------------------------------------; 183 // Nothing left to be processed; 184 ///////////////////////////////////////////////////////////////////////; 185 ; 186 if( command.size() < 1 ) {; 187 error_string = ""Parsing error, wrond or no value specified for key: "" + key;; 188 return false;; 189 }; 190 ; 191 Bool_t hasquote = command[0] == '""';; 192 ; 193 //--------------------------------------------------------------------; 194 // Processing code tag: ""{ code }""; 195 ///////////////////////////////////////////////////////////////////////; 196 ; 197 if( key == ""code"" ) {; 198 // Cleaning of the input command:; 199 // - Trim whitespaces at the borders; 200 // - Get the inner command (i.e. the part between quotes); 201 // - Trim whitespaces again; 202 // - Stitch back together; 203 auto clean_command = [](const std::string &c) {; 204 auto first_trim = TSchemaRuleProcessor::Trim(c);; 205 auto inner_command =; 206 first_trim.substr(first_trim.find_first_of('""') + 1, first_trim.find_last_of('""') - 1);; 207 auto second_trim = TSchemaRuleProcessor::Trim(inner_command);; 208 return '""' + second_trim + '""';; 209 };; 210 command = clean_command(command);; 211 ; 212 if( command[1] != '{' ) {; 213 error_string = ""Parsing error while processing key: code\n"";; 214 error_string += ""Expected \""{ at the beginning of the value."";; 215 return false;; 216 }; 217 l = command.find( ""}\"""" );; 218 if( l == std::string::npos ) {; 219 er",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:7881,Availability,error,error,7881,"186 if( command.size() < 1 ) {; 187 error_string = ""Parsing error, wrond or no value specified for key: "" + key;; 188 return false;; 189 }; 190 ; 191 Bool_t hasquote = command[0] == '""';; 192 ; 193 //--------------------------------------------------------------------; 194 // Processing code tag: ""{ code }""; 195 ///////////////////////////////////////////////////////////////////////; 196 ; 197 if( key == ""code"" ) {; 198 // Cleaning of the input command:; 199 // - Trim whitespaces at the borders; 200 // - Get the inner command (i.e. the part between quotes); 201 // - Trim whitespaces again; 202 // - Stitch back together; 203 auto clean_command = [](const std::string &c) {; 204 auto first_trim = TSchemaRuleProcessor::Trim(c);; 205 auto inner_command =; 206 first_trim.substr(first_trim.find_first_of('""') + 1, first_trim.find_last_of('""') - 1);; 207 auto second_trim = TSchemaRuleProcessor::Trim(inner_command);; 208 return '""' + second_trim + '""';; 209 };; 210 command = clean_command(command);; 211 ; 212 if( command[1] != '{' ) {; 213 error_string = ""Parsing error while processing key: code\n"";; 214 error_string += ""Expected \""{ at the beginning of the value."";; 215 return false;; 216 }; 217 l = command.find( ""}\"""" );; 218 if( l == std::string::npos ) {; 219 error_string = ""Parsing error while processing key: \"""" + key + ""\""\n"";; 220 error_string += ""Expected }\"" at the end of the value."";; 221 return false;; 222 }; 223 auto rawCode = command.substr( 2, l-2 );; 224 RemoveEscapeSequences(rawCode);; 225 result[key] = rawCode;; 226 ++l;; 227 }; 228 //--------------------------------------------------------------------; 229 // Processing normal tag: ""value""; 230 ///////////////////////////////////////////////////////////////////////; 231 ; 232 else {; 233 if( hasquote) {; 234 l = command.find( '""', 1 );; 235 if (l == std::string::npos ) {; 236 error_string = ""\nParsing error while processing key: \"""" + key + ""\""\n"";; 237 error_string += ""Expected \"" at the end of the value."";",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:8109,Availability,error,error,8109,"95 ///////////////////////////////////////////////////////////////////////; 196 ; 197 if( key == ""code"" ) {; 198 // Cleaning of the input command:; 199 // - Trim whitespaces at the borders; 200 // - Get the inner command (i.e. the part between quotes); 201 // - Trim whitespaces again; 202 // - Stitch back together; 203 auto clean_command = [](const std::string &c) {; 204 auto first_trim = TSchemaRuleProcessor::Trim(c);; 205 auto inner_command =; 206 first_trim.substr(first_trim.find_first_of('""') + 1, first_trim.find_last_of('""') - 1);; 207 auto second_trim = TSchemaRuleProcessor::Trim(inner_command);; 208 return '""' + second_trim + '""';; 209 };; 210 command = clean_command(command);; 211 ; 212 if( command[1] != '{' ) {; 213 error_string = ""Parsing error while processing key: code\n"";; 214 error_string += ""Expected \""{ at the beginning of the value."";; 215 return false;; 216 }; 217 l = command.find( ""}\"""" );; 218 if( l == std::string::npos ) {; 219 error_string = ""Parsing error while processing key: \"""" + key + ""\""\n"";; 220 error_string += ""Expected }\"" at the end of the value."";; 221 return false;; 222 }; 223 auto rawCode = command.substr( 2, l-2 );; 224 RemoveEscapeSequences(rawCode);; 225 result[key] = rawCode;; 226 ++l;; 227 }; 228 //--------------------------------------------------------------------; 229 // Processing normal tag: ""value""; 230 ///////////////////////////////////////////////////////////////////////; 231 ; 232 else {; 233 if( hasquote) {; 234 l = command.find( '""', 1 );; 235 if (l == std::string::npos ) {; 236 error_string = ""\nParsing error while processing key: \"""" + key + ""\""\n"";; 237 error_string += ""Expected \"" at the end of the value."";; 238 return false;; 239 }; 240 result[key] = command.substr( 1, l-1 );; 241 } else {; 242 l = command.find(' ', 1);; 243 if (l == std::string::npos) l = command.size();; 244 result[key] = command.substr( 0, l );; 245 }; 246 }; 247 ; 248 //--------------------------------------------------------------------; 2",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:8704,Availability,error,error,8704,"inner_command);; 208 return '""' + second_trim + '""';; 209 };; 210 command = clean_command(command);; 211 ; 212 if( command[1] != '{' ) {; 213 error_string = ""Parsing error while processing key: code\n"";; 214 error_string += ""Expected \""{ at the beginning of the value."";; 215 return false;; 216 }; 217 l = command.find( ""}\"""" );; 218 if( l == std::string::npos ) {; 219 error_string = ""Parsing error while processing key: \"""" + key + ""\""\n"";; 220 error_string += ""Expected }\"" at the end of the value."";; 221 return false;; 222 }; 223 auto rawCode = command.substr( 2, l-2 );; 224 RemoveEscapeSequences(rawCode);; 225 result[key] = rawCode;; 226 ++l;; 227 }; 228 //--------------------------------------------------------------------; 229 // Processing normal tag: ""value""; 230 ///////////////////////////////////////////////////////////////////////; 231 ; 232 else {; 233 if( hasquote) {; 234 l = command.find( '""', 1 );; 235 if (l == std::string::npos ) {; 236 error_string = ""\nParsing error while processing key: \"""" + key + ""\""\n"";; 237 error_string += ""Expected \"" at the end of the value."";; 238 return false;; 239 }; 240 result[key] = command.substr( 1, l-1 );; 241 } else {; 242 l = command.find(' ', 1);; 243 if (l == std::string::npos) l = command.size();; 244 result[key] = command.substr( 0, l );; 245 }; 246 }; 247 ; 248 //--------------------------------------------------------------------; 249 // Everything went ok; 250 ///////////////////////////////////////////////////////////////////////; 251 ; 252 if( l == command.size() ); 253 break;; 254 command = command.substr( l+1 );; 255 }; 256 std::map<std::string, std::string>::const_iterator it1;; 257 it1 = result.find(""oldtype"");; 258 if ( it1 != result.end() ) {; 259 std::map<std::string, std::string>::const_iterator it2;; 260 it2 = result.find(""source"");; 261 if ( it2 != result.end() ) {; 262 result[""source""] = it1->second + "" "" + it2->second;; 263 }; 264 }; 265 if ( result.find(""version"") == result.end() && result.find(""ch",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:18293,Availability,down,down,18293,"9 /// Check if given rule contains references to valid data members; 460 ; 461 Bool_t HasValidDataMembers(SchemaRuleMap_t& rule,; 462 MembersTypeMap_t& members,; 463 std::string& error_string); 464 {; 465 std::list<std::string> mem;; 466 std::list<std::string>::iterator it;; 467 // MembersMap_t::iterator rIt;; 468 ; 469 TSchemaRuleProcessor::SplitList( rule[""target""], mem );; 470 ; 471 //-----------------------------------------------------------------------; 472 // Loop over the data members; 473 //////////////////////////////////////////////////////////////////////////; 474 ; 475 for( it = mem.begin(); it != mem.end(); ++it ) {; 476 if( members.find( *it ) == members.end() ) {; 477 error_string += ""IO rule for class "" + rule[""targetClass""]; 478 + "" data member: "" + *it + "" was specified as a ""; 479 ""target in the rule but doesn't seem to appear in ""; 480 ""target class\n"";; 481 return false;; 482 }; 483 }; 484 return true;; 485 }; 486 ; 487 /////////////////////////////////////////////////////////////////////////////; 488 /// Write down the sources; 489 ; 490 static void WriteAutoVariables( const std::list<std::string>& target,; 491 const SourceTypeList_t& source,; 492 MembersTypeMap_t& members,; 493 std::string& className, std::string& mappedName,; 494 std::ostream& output ); 495 {; 496 if (!source.empty()) {; 497 Bool_t start = true;; 498 SourceTypeList_t::const_iterator it;; 499 ; 500 //--------------------------------------------------------------------; 501 // Write IDs and check if we should generate the onfile structure; 502 // this is done if the type was declared; 503 ///////////////////////////////////////////////////////////////////////; 504 ; 505 Bool_t generateOnFile = false;; 506 output << ""#if 0"" << std::endl; // this is to be removed later; 507 for( it = source.begin(); it != source.end(); ++it ) {; 508 output << "" "";; 509 output << ""static Int_t id_"" << it->second << "" = oldObj->GetId("";; 510 output << ""\"""" << it->second << ""\"");"" << std::endl;; 51",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:23106,Availability,down,down,23106,"/////////////////////////////; 589 ; 590 for( it = source.begin(); it != source.end(); ++it ) {; 591 output << "" "";; 592 output << ""static Long_t offset_Onfile_"" << mappedName;; 593 output << ""_"" << it->second << "" = oldObj->GetClass()->GetDataMemberOffset(\"""";; 594 output << it->second << ""\"");\n"";; 595 }; 596 output << "" "" << ""char *onfile_add = (char*)oldObj->GetObject();\n"";; 597 output << "" "" << mappedName << ""_Onfile onfile(\n"";; 598 ; 599 for( start = true, it = source.begin(); it != source.end(); ++it ) {; 600 if( it->first.fType == """" ); 601 continue;; 602 ; 603 if( !start ); 604 output << "",\n"";; 605 ; 606 else; 607 start = false;; 608 ; 609 output << "" "";; 610 output << ""*("";; 611 if (it->first.fDimensions.size() == 0) {; 612 output << it->first.fType;; 613 } else {; 614 output << mappedName << ""_Onfile::onfile_"" << it->second << ""_t"";; 615 }; 616 output << ""*)(onfile_add+offset_Onfile_"";; 617 output << mappedName << ""_"" << it->second << "")"";; 618 }; 619 output << "" );\n\n"";; 620 }; 621 }; 622 ; 623 //-----------------------------------------------------------------------; 624 // Write down the targets; 625 //////////////////////////////////////////////////////////////////////////; 626 ; 627 if( !target.empty() ) {; 628 output << "" static TClassRef cls(\"""";; 629 output << className << ""\"");"" << std::endl;; 630 ; 631 std::list<std::string>::const_iterator it;; 632 for( it = target.begin(); it != target.end(); ++it ) {; 633 Internal::TSchemaType memData = members[*it];; 634 output << "" static Long_t offset_"" << *it << "" = "";; 635 output << ""cls->GetDataMemberOffset(\"""" << *it << ""\"");"";; 636 output << std::endl;; 637 if (memData.fDimensions.size()) {; 638 output << "" typedef "" << memData.fType << "" "" << *it << ""_t"" << memData.fDimensions << "";"" << std::endl;; 639 output << "" "" << *it << ""_t& "" << *it << "" = "";; 640 output << ""*("" << *it << ""_t *)(target+offset_"" << *it;; 641 output << "");"" << std::endl;; 642 } else {; 643 output << "" "" << memData.fType << ""&",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:29991,Availability,down,down,29991,,MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:40362,Availability,down,down,40362,"const std::string &source, std::pair< Int_t, Int_t > &result)Definition TSchemaRuleProcessor.h:158; ROOT::Internal::TSchemaRuleProcessor::SplitListstatic void SplitList(const std::string &source, std::list< std::string > &result, char delimiter=',')Definition TSchemaRuleProcessor.h:26; ROOT::Internal::MembersMap_tstd::map< std::string, std::string > MembersMap_tDefinition TSchemaType.h:20; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::SourceTypeList_tstd::list< std::pair< ROOT::Internal::TSchemaType, std::string > > SourceTypeList_tDefinition RConversionRuleParser.cxx:51; ROOT::SchemaRuleClassMap_tstd::map< std::string, std::list< SchemaRuleMap_t > > SchemaRuleClassMap_tDefinition RConversionRuleParser.h:23; ROOT::WriteAutoVariablesstatic void WriteAutoVariables(const std::list< std::string > &target, const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostream &output)Write down the sources.Definition RConversionRuleParser.cxx:490; ROOT::FindEndSymbolstatic std::string::size_type FindEndSymbol(std::string &command)Definition RConversionRuleParser.cxx:62; ROOT::StrReplacestatic void StrReplace(std::string &proc, const std::string &pat, const std::string &tr)Replace all accurances of given string with other string.Definition RConversionRuleParser.cxx:757; ROOT::ProcessReadPragmavoid ProcessReadPragma(const char *args, std::string &error_string)I am being called when a read pragma is encountered.Definition RConversionRuleParser.cxx:899; ROOT::WriteSchemaListvoid WriteSchemaList(std::list< SchemaRuleMap_t > &rules, const std::string &listName, std::ostream &output)Write schema rules.Definition RConversionRuleParser.cxx:779; ROOT::MembersTypeMap_tstd::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_tDefinition RConversionRuleParser.h:27; ",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:26007,Integrability,message,message,26007,"; 661 //-----------------------------------------------------------------------; 662 // Create the function name; 663 //////////////////////////////////////////////////////////////////////////; 664 ; 665 std::ostringstream func;; 666 func << ""read_"" << mappedName << ""_"" << index;; 667 rule[""funcname""] = func.str();; 668 ; 669 //-----------------------------------------------------------------------; 670 // Write the header; 671 //////////////////////////////////////////////////////////////////////////; 672 ; 673 output << "" static void "" << func.str();; 674 output << ""( char* target, TVirtualObject *oldObj )"" << std::endl;; 675 output << "" {"" << std::endl;; 676 output << "" //--- Automatically generated variables ---"" << std::endl;; 677 ; 678 //-----------------------------------------------------------------------; 679 // Write the automatically generated variables; 680 //////////////////////////////////////////////////////////////////////////; 681 ; 682 std::list<std::pair<ROOT::Internal::TSchemaType,std::string> > source;; 683 std::list<std::string> target;; 684 TSchemaRuleProcessor::SplitDeclaration( rule[""source""], source );; 685 TSchemaRuleProcessor::SplitList( rule[""target""], target );; 686 ; 687 WriteAutoVariables( target, source, members, className, mappedName, output );; 688 output << "" "" << className << ""* newObj = ("" << className;; 689 output << ""*)target;"" << std::endl;; 690 output << "" // Supress warning message.\n"";; 691 output << "" "" << ""(void)oldObj;\n\n"";; 692 output << "" "" << ""(void)newObj;\n\n"";; 693 ; 694 //-----------------------------------------------------------------------; 695 // Write the user's code; 696 //////////////////////////////////////////////////////////////////////////; 697 ; 698 output << "" //--- User's code ---"" << std::endl;; 699 output << "" "" << rule[""code""] << std::endl;; 700 output << "" }"" << std::endl;; 701 }; 702 ; 703 ; 704 /////////////////////////////////////////////////////////////////////////////; 705 /// Write the co",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:1827,Modifiability,variab,variables,1827,"lgorithm>; 21#include <iostream>; 22#include <map>; 23#include <sstream>; 24#include <string>; 25#include <utility>; 26#include <vector>; 27 ; 28namespace {; 29 static void RemoveEscapeSequences(std::string& rawString); 30 {; 31 const std::vector<std::pair<std::string, std::string>> subPairs { {""\\\\"",""\\""},; 32 {""\\\"""",""\""""},; 33 {""\\\'"",""\'""}};; 34 size_t start_pos = 0;; 35 for (auto const & subPair : subPairs){; 36 start_pos = 0;; 37 auto from = subPair.first;; 38 auto to = subPair.second;; 39 while((start_pos = rawString.find(from, start_pos)) != std::string::npos) {; 40 rawString.replace(start_pos, from.length(), to);; 41 start_pos += to.length();; 42 }; 43 }; 44 }; 45}; 46 ; 47namespace ROOT; 48{; 49 using namespace Internal;; 50 ; 51 typedef std::list<std::pair<ROOT::Internal::TSchemaType,std::string> > SourceTypeList_t;; 52 ; 53 //--------------------------------------------------------------------------; 54 // Allocate global variables; 55 /////////////////////////////////////////////////////////////////////////////; 56 ; 57 SchemaRuleClassMap_t gReadRules;; 58 SchemaRuleClassMap_t gReadRawRules;; 59 ; 60 static Bool_t ValidateRule( const std::map<std::string, std::string>& rule, std::string &error_string );; 61 ; 62 static std::string::size_type FindEndSymbol(std::string &command); 63 {; 64 // Find the end of a symbol.; 65 ; 66 if (command.length() == 0) return std::string::npos;; 67 std::string::size_type cursor;; 68 unsigned int level = 0;; 69 for (cursor = 0 ; cursor < command.length(); ++cursor); 70 {; 71 switch( command[cursor] ) {; 72 case ' ':; 73 case '\t':; 74 case '\r':; 75 case '=': if (level==0) {; 76 std::string::size_type sub_cursor = cursor;; 77 while( isspace(command[sub_cursor]) ) {; 78 ++sub_cursor;; 79 }; 80 if ( command[sub_cursor] == '=' ) {; 81 return sub_cursor;; 82 } else {; 83 return cursor;; 84 }; 85 } else {; 86 break;; 87 }; 88 case '<': ++level; break;; 89 case '>': if (level==0) { return std::string::npos; }; 90 --level; break;",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:25278,Modifiability,variab,variables,25278,"; 661 //-----------------------------------------------------------------------; 662 // Create the function name; 663 //////////////////////////////////////////////////////////////////////////; 664 ; 665 std::ostringstream func;; 666 func << ""read_"" << mappedName << ""_"" << index;; 667 rule[""funcname""] = func.str();; 668 ; 669 //-----------------------------------------------------------------------; 670 // Write the header; 671 //////////////////////////////////////////////////////////////////////////; 672 ; 673 output << "" static void "" << func.str();; 674 output << ""( char* target, TVirtualObject *oldObj )"" << std::endl;; 675 output << "" {"" << std::endl;; 676 output << "" //--- Automatically generated variables ---"" << std::endl;; 677 ; 678 //-----------------------------------------------------------------------; 679 // Write the automatically generated variables; 680 //////////////////////////////////////////////////////////////////////////; 681 ; 682 std::list<std::pair<ROOT::Internal::TSchemaType,std::string> > source;; 683 std::list<std::string> target;; 684 TSchemaRuleProcessor::SplitDeclaration( rule[""source""], source );; 685 TSchemaRuleProcessor::SplitList( rule[""target""], target );; 686 ; 687 WriteAutoVariables( target, source, members, className, mappedName, output );; 688 output << "" "" << className << ""* newObj = ("" << className;; 689 output << ""*)target;"" << std::endl;; 690 output << "" // Supress warning message.\n"";; 691 output << "" "" << ""(void)oldObj;\n\n"";; 692 output << "" "" << ""(void)newObj;\n\n"";; 693 ; 694 //-----------------------------------------------------------------------; 695 // Write the user's code; 696 //////////////////////////////////////////////////////////////////////////; 697 ; 698 output << "" //--- User's code ---"" << std::endl;; 699 output << "" "" << rule[""code""] << std::endl;; 700 output << "" }"" << std::endl;; 701 }; 702 ; 703 ; 704 /////////////////////////////////////////////////////////////////////////////; 705 /// Write the co",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:25434,Modifiability,variab,variables,25434,"; 661 //-----------------------------------------------------------------------; 662 // Create the function name; 663 //////////////////////////////////////////////////////////////////////////; 664 ; 665 std::ostringstream func;; 666 func << ""read_"" << mappedName << ""_"" << index;; 667 rule[""funcname""] = func.str();; 668 ; 669 //-----------------------------------------------------------------------; 670 // Write the header; 671 //////////////////////////////////////////////////////////////////////////; 672 ; 673 output << "" static void "" << func.str();; 674 output << ""( char* target, TVirtualObject *oldObj )"" << std::endl;; 675 output << "" {"" << std::endl;; 676 output << "" //--- Automatically generated variables ---"" << std::endl;; 677 ; 678 //-----------------------------------------------------------------------; 679 // Write the automatically generated variables; 680 //////////////////////////////////////////////////////////////////////////; 681 ; 682 std::list<std::pair<ROOT::Internal::TSchemaType,std::string> > source;; 683 std::list<std::string> target;; 684 TSchemaRuleProcessor::SplitDeclaration( rule[""source""], source );; 685 TSchemaRuleProcessor::SplitList( rule[""target""], target );; 686 ; 687 WriteAutoVariables( target, source, members, className, mappedName, output );; 688 output << "" "" << className << ""* newObj = ("" << className;; 689 output << ""*)target;"" << std::endl;; 690 output << "" // Supress warning message.\n"";; 691 output << "" "" << ""(void)oldObj;\n\n"";; 692 output << "" "" << ""(void)newObj;\n\n"";; 693 ; 694 //-----------------------------------------------------------------------; 695 // Write the user's code; 696 //////////////////////////////////////////////////////////////////////////; 697 ; 698 output << "" //--- User's code ---"" << std::endl;; 699 output << "" "" << rule[""code""] << std::endl;; 700 output << "" }"" << std::endl;; 701 }; 702 ; 703 ; 704 /////////////////////////////////////////////////////////////////////////////; 705 /// Write the co",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:27626,Modifiability,variab,variables,27626,"1 ; 722 //-----------------------------------------------------------------------; 723 // Write the header; 724 //////////////////////////////////////////////////////////////////////////; 725 ; 726 output << "" static void "" << func.str();; 727 output << ""( char* target, TBuffer &b )"" << std::endl;; 728 output << "" {"" << std::endl;; 729 output << ""#if 0"" << std::endl;; 730 output << "" //--- Automatically generated variables ---"" << std::endl;; 731 ; 732 //-----------------------------------------------------------------------; 733 // Write the automatically generated variables; 734 //////////////////////////////////////////////////////////////////////////; 735 ; 736 std::list<std::pair<ROOT::Internal::TSchemaType,std::string> > source;; 737 std::list<std::string> target;; 738 TSchemaRuleProcessor::SplitList( rule[""target""], target );; 739 ; 740 WriteAutoVariables( target, source, members, className, mappedName, output );; 741 output << "" "" << className << ""* newObj = ("" << className;; 742 output << ""*)target;"" << std::endl << std::endl;; 743 ; 744 //-----------------------------------------------------------------------; 745 // Write the user's code; 746 //////////////////////////////////////////////////////////////////////////; 747 ; 748 output << "" //--- User's code ---"" << std::endl;; 749 output << rule[""code""] << std::endl;; 750 output << ""#endif"" << std::endl;; 751 output << "" }"" << std::endl;; 752 }; 753 ; 754 /////////////////////////////////////////////////////////////////////////////; 755 /// Replace all accurances of given string with other string; 756 ; 757 static void StrReplace( std::string& proc, const std::string& pat,; 758 const std::string& tr ); 759 {; 760 std::string::size_type it = 0;; 761 std::string::size_type s = pat.size();; 762 std::string::size_type tr_len= tr.size();; 763 ; 764 if( s == 0 ) return;; 765 ; 766 while( 1 ) {; 767 it = proc.find( pat, it );; 768 if( it == std::string::npos ); 769 break;; 770 ; 771 proc.replace( it, s, tr );; 772",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:27782,Modifiability,variab,variables,27782,"1 ; 722 //-----------------------------------------------------------------------; 723 // Write the header; 724 //////////////////////////////////////////////////////////////////////////; 725 ; 726 output << "" static void "" << func.str();; 727 output << ""( char* target, TBuffer &b )"" << std::endl;; 728 output << "" {"" << std::endl;; 729 output << ""#if 0"" << std::endl;; 730 output << "" //--- Automatically generated variables ---"" << std::endl;; 731 ; 732 //-----------------------------------------------------------------------; 733 // Write the automatically generated variables; 734 //////////////////////////////////////////////////////////////////////////; 735 ; 736 std::list<std::pair<ROOT::Internal::TSchemaType,std::string> > source;; 737 std::list<std::string> target;; 738 TSchemaRuleProcessor::SplitList( rule[""target""], target );; 739 ; 740 WriteAutoVariables( target, source, members, className, mappedName, output );; 741 output << "" "" << className << ""* newObj = ("" << className;; 742 output << ""*)target;"" << std::endl << std::endl;; 743 ; 744 //-----------------------------------------------------------------------; 745 // Write the user's code; 746 //////////////////////////////////////////////////////////////////////////; 747 ; 748 output << "" //--- User's code ---"" << std::endl;; 749 output << rule[""code""] << std::endl;; 750 output << ""#endif"" << std::endl;; 751 output << "" }"" << std::endl;; 752 }; 753 ; 754 /////////////////////////////////////////////////////////////////////////////; 755 /// Replace all accurances of given string with other string; 756 ; 757 static void StrReplace( std::string& proc, const std::string& pat,; 758 const std::string& tr ); 759 {; 760 std::string::size_type it = 0;; 761 std::string::size_type s = pat.size();; 762 std::string::size_type tr_len= tr.size();; 763 ; 764 if( s == 0 ) return;; 765 ; 766 while( 1 ) {; 767 it = proc.find( pat, it );; 768 if( it == std::string::npos ); 769 break;; 770 ; 771 proc.replace( it, s, tr );; 772",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:9714,Security,checksum,checksum,9714,"ssing key: \"""" + key + ""\""\n"";; 237 error_string += ""Expected \"" at the end of the value."";; 238 return false;; 239 }; 240 result[key] = command.substr( 1, l-1 );; 241 } else {; 242 l = command.find(' ', 1);; 243 if (l == std::string::npos) l = command.size();; 244 result[key] = command.substr( 0, l );; 245 }; 246 }; 247 ; 248 //--------------------------------------------------------------------; 249 // Everything went ok; 250 ///////////////////////////////////////////////////////////////////////; 251 ; 252 if( l == command.size() ); 253 break;; 254 command = command.substr( l+1 );; 255 }; 256 std::map<std::string, std::string>::const_iterator it1;; 257 it1 = result.find(""oldtype"");; 258 if ( it1 != result.end() ) {; 259 std::map<std::string, std::string>::const_iterator it2;; 260 it2 = result.find(""source"");; 261 if ( it2 != result.end() ) {; 262 result[""source""] = it1->second + "" "" + it2->second;; 263 }; 264 }; 265 if ( result.find(""version"") == result.end() && result.find(""checksum"") == result.end() ) {; 266 result[""version""] = ""[1-]"";; 267 }; 268 ; 269 //------------------------------------------------------------------------; 270 // ""include"" tag. Replace "";"" with "","" for backwards compatibility with; 271 // ROOT5; 272 //////////////////////////////////////////////////////////////////////////; 273 ; 274 auto const includeKeyName = ""include"";; 275 auto includeTag = result.find(includeKeyName);; 276 if (includeTag != result.end()){; 277 auto & includeTagValue = includeTag->second;; 278 std::replace_if (includeTagValue.begin(),; 279 includeTagValue.end(),; 280 [](char c){ return c == ';';},; 281 ',');; 282 result[includeKeyName] = includeTagValue;; 283 }; 284 ; 285 return ValidateRule( result, error_string);; 286 }; 287 ; 288 /////////////////////////////////////////////////////////////////////////////; 289 /// Validate if the user specified rules are correct; 290 ; 291 static Bool_t ValidateRule( const std::map<std::string, std::string>& rule, std::string &error",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:11913,Security,checksum,checksum,11913," name; 295 //////////////////////////////////////////////////////////////////////////; 296 ; 297 std::map<std::string, std::string>::const_iterator it1, it2;; 298 std::list<std::string> lst;; 299 ; 300 it1 = rule.find( ""targetClass"" );; 301 if( it1 == rule.end() ) {; 302 error_string = ""You always have to specify the targetClass "";; 303 error_string += ""when specyfying an IO rule"";; 304 return false;; 305 }; 306 ; 307 std::string className = TSchemaRuleProcessor::Trim( it1->second );; 308 std::string warning = ""IO rule for class "" + className;; 309 ; 310 //-----------------------------------------------------------------------; 311 // Check if we have the source tag; 312 //////////////////////////////////////////////////////////////////////////; 313 ; 314 it1 = rule.find( ""sourceClass"" );; 315 if( it1 == rule.end()); 316 {; 317 error_string = warning + "" - sourceClass parameter is missing"";; 318 return false;; 319 }; 320 ; 321 //-----------------------------------------------------------------------; 322 // Check if we have either version or checksum specified; 323 //////////////////////////////////////////////////////////////////////////; 324 ; 325 it1 = rule.find( ""version"" );; 326 it2 = rule.find( ""checksum"" );; 327 if( it1 == rule.end() && it2 == rule.end() ) {; 328 error_string = warning + "" - you need to specify either version or "";; 329 error_string += ""checksum"";; 330 return false;; 331 }; 332 ; 333 //-----------------------------------------------------------------------; 334 // Check if the checksum has been set to right value; 335 //////////////////////////////////////////////////////////////////////////; 336 ; 337 if( it2 != rule.end() ) {; 338 if( it2->second.size() < 2 || it2->second[0] != '[' ||; 339 it2->second[it2->second.size()-1] != ']' ) {; 340 error_string = warning + "" - a comma separated list of ints"";; 341 error_string += "" enclosed in square brackets expected"";; 342 error_string += "" as a value of checksum parameter"";; 343 return false;; 344",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:12076,Security,checksum,checksum,12076,";; 301 if( it1 == rule.end() ) {; 302 error_string = ""You always have to specify the targetClass "";; 303 error_string += ""when specyfying an IO rule"";; 304 return false;; 305 }; 306 ; 307 std::string className = TSchemaRuleProcessor::Trim( it1->second );; 308 std::string warning = ""IO rule for class "" + className;; 309 ; 310 //-----------------------------------------------------------------------; 311 // Check if we have the source tag; 312 //////////////////////////////////////////////////////////////////////////; 313 ; 314 it1 = rule.find( ""sourceClass"" );; 315 if( it1 == rule.end()); 316 {; 317 error_string = warning + "" - sourceClass parameter is missing"";; 318 return false;; 319 }; 320 ; 321 //-----------------------------------------------------------------------; 322 // Check if we have either version or checksum specified; 323 //////////////////////////////////////////////////////////////////////////; 324 ; 325 it1 = rule.find( ""version"" );; 326 it2 = rule.find( ""checksum"" );; 327 if( it1 == rule.end() && it2 == rule.end() ) {; 328 error_string = warning + "" - you need to specify either version or "";; 329 error_string += ""checksum"";; 330 return false;; 331 }; 332 ; 333 //-----------------------------------------------------------------------; 334 // Check if the checksum has been set to right value; 335 //////////////////////////////////////////////////////////////////////////; 336 ; 337 if( it2 != rule.end() ) {; 338 if( it2->second.size() < 2 || it2->second[0] != '[' ||; 339 it2->second[it2->second.size()-1] != ']' ) {; 340 error_string = warning + "" - a comma separated list of ints"";; 341 error_string += "" enclosed in square brackets expected"";; 342 error_string += "" as a value of checksum parameter"";; 343 return false;; 344 }; 345 ; 346 TSchemaRuleProcessor::SplitList( it2->second.substr( 1, it2->second.size()-2 ),; 347 lst );; 348 if( lst.empty() ) {; 349 error_string += warning + "" - the list of checksums is empty\n"";; 350 }; 351 ; 352 for( const auto&",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:12238,Security,checksum,checksum,12238," it1->second );; 308 std::string warning = ""IO rule for class "" + className;; 309 ; 310 //-----------------------------------------------------------------------; 311 // Check if we have the source tag; 312 //////////////////////////////////////////////////////////////////////////; 313 ; 314 it1 = rule.find( ""sourceClass"" );; 315 if( it1 == rule.end()); 316 {; 317 error_string = warning + "" - sourceClass parameter is missing"";; 318 return false;; 319 }; 320 ; 321 //-----------------------------------------------------------------------; 322 // Check if we have either version or checksum specified; 323 //////////////////////////////////////////////////////////////////////////; 324 ; 325 it1 = rule.find( ""version"" );; 326 it2 = rule.find( ""checksum"" );; 327 if( it1 == rule.end() && it2 == rule.end() ) {; 328 error_string = warning + "" - you need to specify either version or "";; 329 error_string += ""checksum"";; 330 return false;; 331 }; 332 ; 333 //-----------------------------------------------------------------------; 334 // Check if the checksum has been set to right value; 335 //////////////////////////////////////////////////////////////////////////; 336 ; 337 if( it2 != rule.end() ) {; 338 if( it2->second.size() < 2 || it2->second[0] != '[' ||; 339 it2->second[it2->second.size()-1] != ']' ) {; 340 error_string = warning + "" - a comma separated list of ints"";; 341 error_string += "" enclosed in square brackets expected"";; 342 error_string += "" as a value of checksum parameter"";; 343 return false;; 344 }; 345 ; 346 TSchemaRuleProcessor::SplitList( it2->second.substr( 1, it2->second.size()-2 ),; 347 lst );; 348 if( lst.empty() ) {; 349 error_string += warning + "" - the list of checksums is empty\n"";; 350 }; 351 ; 352 for( const auto& chk : lst ) {; 353 if( !TSchemaRuleProcessor::IsANumber(chk, true) ) {; 354 error_string = warning + "" - "" + chk + "" is not a valid value"";; 355 error_string += "" of checksum parameter - an integer (decimal/hex) expected"";; 356 return fa",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:12381,Security,checksum,checksum,12381," it1->second );; 308 std::string warning = ""IO rule for class "" + className;; 309 ; 310 //-----------------------------------------------------------------------; 311 // Check if we have the source tag; 312 //////////////////////////////////////////////////////////////////////////; 313 ; 314 it1 = rule.find( ""sourceClass"" );; 315 if( it1 == rule.end()); 316 {; 317 error_string = warning + "" - sourceClass parameter is missing"";; 318 return false;; 319 }; 320 ; 321 //-----------------------------------------------------------------------; 322 // Check if we have either version or checksum specified; 323 //////////////////////////////////////////////////////////////////////////; 324 ; 325 it1 = rule.find( ""version"" );; 326 it2 = rule.find( ""checksum"" );; 327 if( it1 == rule.end() && it2 == rule.end() ) {; 328 error_string = warning + "" - you need to specify either version or "";; 329 error_string += ""checksum"";; 330 return false;; 331 }; 332 ; 333 //-----------------------------------------------------------------------; 334 // Check if the checksum has been set to right value; 335 //////////////////////////////////////////////////////////////////////////; 336 ; 337 if( it2 != rule.end() ) {; 338 if( it2->second.size() < 2 || it2->second[0] != '[' ||; 339 it2->second[it2->second.size()-1] != ']' ) {; 340 error_string = warning + "" - a comma separated list of ints"";; 341 error_string += "" enclosed in square brackets expected"";; 342 error_string += "" as a value of checksum parameter"";; 343 return false;; 344 }; 345 ; 346 TSchemaRuleProcessor::SplitList( it2->second.substr( 1, it2->second.size()-2 ),; 347 lst );; 348 if( lst.empty() ) {; 349 error_string += warning + "" - the list of checksums is empty\n"";; 350 }; 351 ; 352 for( const auto& chk : lst ) {; 353 if( !TSchemaRuleProcessor::IsANumber(chk, true) ) {; 354 error_string = warning + "" - "" + chk + "" is not a valid value"";; 355 error_string += "" of checksum parameter - an integer (decimal/hex) expected"";; 356 return fa",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:12811,Security,checksum,checksum,12811,"n false;; 319 }; 320 ; 321 //-----------------------------------------------------------------------; 322 // Check if we have either version or checksum specified; 323 //////////////////////////////////////////////////////////////////////////; 324 ; 325 it1 = rule.find( ""version"" );; 326 it2 = rule.find( ""checksum"" );; 327 if( it1 == rule.end() && it2 == rule.end() ) {; 328 error_string = warning + "" - you need to specify either version or "";; 329 error_string += ""checksum"";; 330 return false;; 331 }; 332 ; 333 //-----------------------------------------------------------------------; 334 // Check if the checksum has been set to right value; 335 //////////////////////////////////////////////////////////////////////////; 336 ; 337 if( it2 != rule.end() ) {; 338 if( it2->second.size() < 2 || it2->second[0] != '[' ||; 339 it2->second[it2->second.size()-1] != ']' ) {; 340 error_string = warning + "" - a comma separated list of ints"";; 341 error_string += "" enclosed in square brackets expected"";; 342 error_string += "" as a value of checksum parameter"";; 343 return false;; 344 }; 345 ; 346 TSchemaRuleProcessor::SplitList( it2->second.substr( 1, it2->second.size()-2 ),; 347 lst );; 348 if( lst.empty() ) {; 349 error_string += warning + "" - the list of checksums is empty\n"";; 350 }; 351 ; 352 for( const auto& chk : lst ) {; 353 if( !TSchemaRuleProcessor::IsANumber(chk, true) ) {; 354 error_string = warning + "" - "" + chk + "" is not a valid value"";; 355 error_string += "" of checksum parameter - an integer (decimal/hex) expected"";; 356 return false;; 357 }; 358 }; 359 }; 360 ; 361 //-----------------------------------------------------------------------; 362 // Check if the version is correct; 363 //////////////////////////////////////////////////////////////////////////; 364 ; 365 std::pair<Int_t, Int_t> ver;; 366 if( it1 != rule.end() ) {; 367 if( it1->second.size() < 2 || it1->second[0] != '[' ||; 368 it1->second[it1->second.size()-1] != ']' ) {; 369 error_string = warning +",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:13033,Security,checksum,checksums,13033,"--------------------------------------------------------------; 334 // Check if the checksum has been set to right value; 335 //////////////////////////////////////////////////////////////////////////; 336 ; 337 if( it2 != rule.end() ) {; 338 if( it2->second.size() < 2 || it2->second[0] != '[' ||; 339 it2->second[it2->second.size()-1] != ']' ) {; 340 error_string = warning + "" - a comma separated list of ints"";; 341 error_string += "" enclosed in square brackets expected"";; 342 error_string += "" as a value of checksum parameter"";; 343 return false;; 344 }; 345 ; 346 TSchemaRuleProcessor::SplitList( it2->second.substr( 1, it2->second.size()-2 ),; 347 lst );; 348 if( lst.empty() ) {; 349 error_string += warning + "" - the list of checksums is empty\n"";; 350 }; 351 ; 352 for( const auto& chk : lst ) {; 353 if( !TSchemaRuleProcessor::IsANumber(chk, true) ) {; 354 error_string = warning + "" - "" + chk + "" is not a valid value"";; 355 error_string += "" of checksum parameter - an integer (decimal/hex) expected"";; 356 return false;; 357 }; 358 }; 359 }; 360 ; 361 //-----------------------------------------------------------------------; 362 // Check if the version is correct; 363 //////////////////////////////////////////////////////////////////////////; 364 ; 365 std::pair<Int_t, Int_t> ver;; 366 if( it1 != rule.end() ) {; 367 if( it1->second.size() < 2 || it1->second[0] != '[' ||; 368 it1->second[it1->second.size()-1] != ']' ) {; 369 error_string = warning + "" - a comma separated list of version specifiers "";; 370 error_string += ""enclosed in square brackets expected"";; 371 error_string += ""as a value of version parameter"";; 372 return false;; 373 }; 374 ; 375 TSchemaRuleProcessor::SplitList( it1->second.substr( 1, it1->second.size()-2 ),; 376 lst );; 377 if( lst.empty() ) {; 378 error_string = warning + "" - the list of versions is empty"";; 379 }; 380 ; 381 for( const auto& version : lst ); 382 if( !TSchemaRuleProcessor::ProcessVersion( version, ver ) ) {; 383 error_string = ",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:13257,Security,checksum,checksum,13257,"--------------------------------------------------------------; 334 // Check if the checksum has been set to right value; 335 //////////////////////////////////////////////////////////////////////////; 336 ; 337 if( it2 != rule.end() ) {; 338 if( it2->second.size() < 2 || it2->second[0] != '[' ||; 339 it2->second[it2->second.size()-1] != ']' ) {; 340 error_string = warning + "" - a comma separated list of ints"";; 341 error_string += "" enclosed in square brackets expected"";; 342 error_string += "" as a value of checksum parameter"";; 343 return false;; 344 }; 345 ; 346 TSchemaRuleProcessor::SplitList( it2->second.substr( 1, it2->second.size()-2 ),; 347 lst );; 348 if( lst.empty() ) {; 349 error_string += warning + "" - the list of checksums is empty\n"";; 350 }; 351 ; 352 for( const auto& chk : lst ) {; 353 if( !TSchemaRuleProcessor::IsANumber(chk, true) ) {; 354 error_string = warning + "" - "" + chk + "" is not a valid value"";; 355 error_string += "" of checksum parameter - an integer (decimal/hex) expected"";; 356 return false;; 357 }; 358 }; 359 }; 360 ; 361 //-----------------------------------------------------------------------; 362 // Check if the version is correct; 363 //////////////////////////////////////////////////////////////////////////; 364 ; 365 std::pair<Int_t, Int_t> ver;; 366 if( it1 != rule.end() ) {; 367 if( it1->second.size() < 2 || it1->second[0] != '[' ||; 368 it1->second[it1->second.size()-1] != ']' ) {; 369 error_string = warning + "" - a comma separated list of version specifiers "";; 370 error_string += ""enclosed in square brackets expected"";; 371 error_string += ""as a value of version parameter"";; 372 return false;; 373 }; 374 ; 375 TSchemaRuleProcessor::SplitList( it1->second.substr( 1, it1->second.size()-2 ),; 376 lst );; 377 if( lst.empty() ) {; 378 error_string = warning + "" - the list of versions is empty"";; 379 }; 380 ; 381 for( const auto& version : lst ); 382 if( !TSchemaRuleProcessor::ProcessVersion( version, ver ) ) {; 383 error_string = ",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:14629,Security,checksum,checksum,14629,"------------------------; 362 // Check if the version is correct; 363 //////////////////////////////////////////////////////////////////////////; 364 ; 365 std::pair<Int_t, Int_t> ver;; 366 if( it1 != rule.end() ) {; 367 if( it1->second.size() < 2 || it1->second[0] != '[' ||; 368 it1->second[it1->second.size()-1] != ']' ) {; 369 error_string = warning + "" - a comma separated list of version specifiers "";; 370 error_string += ""enclosed in square brackets expected"";; 371 error_string += ""as a value of version parameter"";; 372 return false;; 373 }; 374 ; 375 TSchemaRuleProcessor::SplitList( it1->second.substr( 1, it1->second.size()-2 ),; 376 lst );; 377 if( lst.empty() ) {; 378 error_string = warning + "" - the list of versions is empty"";; 379 }; 380 ; 381 for( const auto& version : lst ); 382 if( !TSchemaRuleProcessor::ProcessVersion( version, ver ) ) {; 383 error_string = warning + "" - "" + version + "" is not a valid value"";; 384 error_string += "" of version parameter"";; 385 return false;; 386 }; 387 }; 388 ; 389 //-----------------------------------------------------------------------; 390 // Check if we're dealing with renameing declaration - sourceClass,; 391 // targetClass and either version or checksum required; 392 //////////////////////////////////////////////////////////////////////////; 393 ; 394 if( rule.size() == 3 || (rule.size() == 4 && it1 != rule.end() && it2 != rule.end()) ); 395 return true;; 396 ; 397 //-----------------------------------------------------------------------; 398 // Check if we have all the keys we need; 399 //-----------------------------------------------------------------------; 400 std::string keys[] = {""target"", ""source""};; 401 for( int i = 0; i < 2; ++i ) {; 402 it1 = rule.find( keys[i] );; 403 if( it1 == rule.end() ) {; 404 error_string = warning + "" - required parameter is missing: "";; 405 error_string += keys[i];; 406 return false;; 407 }; 408 }; 409 ; 410 //---------------------------------------------------------------------",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:31261,Security,checksum,checksum,31261,"t << "" rule->fTarget = \"""" << (*it)[""target""];; 802 output << ""\"";"" << std::endl;; 803 }; 804 ; 805 if( it->find( ""source"" ) != it->end() ) {; 806 output << "" rule->fSource = \"""" << (*it)[""source""];; 807 output << ""\"";"" << std::endl;; 808 }; 809 ; 810 //--------------------------------------------------------------------; 811 // Deal with non mandatory keys; 812 ///////////////////////////////////////////////////////////////////////; 813 ; 814 if( it->find( ""funcname"" ) != it->end() ) {; 815 std::string code = (*it)[""code""];; 816 StrReplace( code, ""\n"", ""\\n"" );; 817 StrReplace( code, ""\"""", ""\\\"""");; 818 ; 819 output << "" rule->fFunctionPtr = (void *)TFunc2void( "";; 820 output << (*it)[""funcname""] << "");"" << std::endl;; 821 output << "" rule->fCode = \"""" << code;; 822 output << ""\"";"" << std::endl;; 823 }; 824 ; 825 if( it->find( ""version"" ) != it->end() ) {; 826 output << "" rule->fVersion = \"""" << (*it)[""version""];; 827 output << ""\"";"" << std::endl;; 828 }; 829 ; 830 if( it->find( ""checksum"" ) != it->end() ) {; 831 output << "" rule->fChecksum = \"""" << (*it)[""checksum""];; 832 output << ""\"";"" << std::endl;; 833 }; 834 ; 835 if( it->find( ""embed"" ) != it->end() ) {; 836 output << "" rule->fEmbed = "" << (*it)[""embed""];; 837 output << "";"" << std::endl;; 838 }; 839 ; 840 if( it->find( ""include"" ) != it->end() ) {; 841 output << "" rule->fInclude = \"""" << (*it)[""include""];; 842 output << ""\"";"" << std::endl;; 843 }; 844 ; 845 if( it->find( ""attributes"" ) != it->end() ) {; 846 output << "" rule->fAttributes = \"""" << (*it)[""attributes""];; 847 output << ""\"";"" << std::endl;; 848 }; 849 }; 850 }; 851 ; 852 /////////////////////////////////////////////////////////////////////////////; 853 /// Get the list of includes specified in the shema rules; 854 ; 855 void GetRuleIncludes( std::list<std::string> &result ); 856 {; 857 std::list<std::string> tmp;; 858 std::list<SchemaRuleMap_t>::iterator rule;; 859 SchemaRuleMap_t::iterator attr;; 860 SchemaRuleClassMap_t::iterator it;; 861 ; 862 /",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:31339,Security,checksum,checksum,31339,"dl;; 803 }; 804 ; 805 if( it->find( ""source"" ) != it->end() ) {; 806 output << "" rule->fSource = \"""" << (*it)[""source""];; 807 output << ""\"";"" << std::endl;; 808 }; 809 ; 810 //--------------------------------------------------------------------; 811 // Deal with non mandatory keys; 812 ///////////////////////////////////////////////////////////////////////; 813 ; 814 if( it->find( ""funcname"" ) != it->end() ) {; 815 std::string code = (*it)[""code""];; 816 StrReplace( code, ""\n"", ""\\n"" );; 817 StrReplace( code, ""\"""", ""\\\"""");; 818 ; 819 output << "" rule->fFunctionPtr = (void *)TFunc2void( "";; 820 output << (*it)[""funcname""] << "");"" << std::endl;; 821 output << "" rule->fCode = \"""" << code;; 822 output << ""\"";"" << std::endl;; 823 }; 824 ; 825 if( it->find( ""version"" ) != it->end() ) {; 826 output << "" rule->fVersion = \"""" << (*it)[""version""];; 827 output << ""\"";"" << std::endl;; 828 }; 829 ; 830 if( it->find( ""checksum"" ) != it->end() ) {; 831 output << "" rule->fChecksum = \"""" << (*it)[""checksum""];; 832 output << ""\"";"" << std::endl;; 833 }; 834 ; 835 if( it->find( ""embed"" ) != it->end() ) {; 836 output << "" rule->fEmbed = "" << (*it)[""embed""];; 837 output << "";"" << std::endl;; 838 }; 839 ; 840 if( it->find( ""include"" ) != it->end() ) {; 841 output << "" rule->fInclude = \"""" << (*it)[""include""];; 842 output << ""\"";"" << std::endl;; 843 }; 844 ; 845 if( it->find( ""attributes"" ) != it->end() ) {; 846 output << "" rule->fAttributes = \"""" << (*it)[""attributes""];; 847 output << ""\"";"" << std::endl;; 848 }; 849 }; 850 }; 851 ; 852 /////////////////////////////////////////////////////////////////////////////; 853 /// Get the list of includes specified in the shema rules; 854 ; 855 void GetRuleIncludes( std::list<std::string> &result ); 856 {; 857 std::list<std::string> tmp;; 858 std::list<SchemaRuleMap_t>::iterator rule;; 859 SchemaRuleMap_t::iterator attr;; 860 SchemaRuleClassMap_t::iterator it;; 861 ; 862 //-----------------------------------------------------------------------; 863 ",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html:4596,Usability,clear,clear,4596,"-------------------------------------------; 118 // If the first symbol does not end is not followed by equal then it; 119 // defaults to being the sourceClass.; 120 //////////////////////////////////////////////////////////////////////////; 121 ; 122 {; 123 std::string::size_type endsymbol = FindEndSymbol( command );; 124 if ( endsymbol == command.length() || command[endsymbol] == ' ' || command[endsymbol] == '\t' ) {; 125 ; 126// std::string::size_type space_pos = command.find( ' ' );; 127// std::string::size_type equal_pos = command.find( '=' );; 128// if ( space_pos < equal_pos) {; 129 std::string value = TSchemaRuleProcessor::Trim( command.substr( 0, endsymbol ) );; 130 result[""sourceClass""] = value;; 131 result[""targetClass""] = value;; 132 if (endsymbol < command.length()) {; 133 command = TSchemaRuleProcessor::Trim( command.substr( endsymbol+1 ) );; 134 } else {; 135 command.clear();; 136 }; 137 ; 138 //-----------------------------------------------------------------------; 139 // If the first symbol is the targetClass then the 2nd symbol can be; 140 // the source data member name.; 141 //-----------------------------------------------------------------------; 142// space_pos = command.find( ' ' );; 143// equal_pos = command.find( '=' );; 144// if ( space_pos < equal_pos ) {; 145 endsymbol = FindEndSymbol( command );; 146 if ( endsymbol == command.length() || command[endsymbol] == ' ' || command[endsymbol] == '\t' ) {; 147 std::string membervalue = TSchemaRuleProcessor::Trim( command.substr( 0, endsymbol ) );; 148 result[""source""] = membervalue;; 149 result[""target""] = membervalue;; 150 command = TSchemaRuleProcessor::Trim( command.substr( endsymbol+1 ) );; 151 }; 152 }; 153 }; 154 ; 155 //-----------------------------------------------------------------------; 156 // Process the input until there are no characters left; 157 //////////////////////////////////////////////////////////////////////////; 158 ; 159 while( !command.empty() ) {; 160 //---------------",MatchSource.WIKI,doc/v632/RConversionRuleParser_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8cxx_source.html
https://root.cern/doc/v632/RConversionRuleParser_8h_source.html:652,Modifiability,variab,variables,652,"h""; 16 ; 17namespace ROOT; 18{; 19 //---------------------------------------------------------------------------; 20 // Global variables; 21 //---------------------------------------------------------------------------; 22 typedef std::map<std::string, std::string> SchemaRuleMap_t;; 23 typedef std::map<std::string, std::list<SchemaRuleMap_t> > SchemaRuleClassMap_t;; 24 R__EXTERN SchemaRuleClassMap_t gReadRules;; 25 R__EXTERN SchemaRuleClassMap_t gReadRawRules;; 26 ; 27 typedef std::map<std::string, ROOT::Internal::TSchemaType> MembersTypeMap_t;; 28 ; 29 //---------------------------------------------------------------------------; 30 // Create the data member name-type map; 31 //---------------------------------------------------------------------------; 32 // void CreateNameTypeMap( const clang::CXXRecordDecl &cl, MembersTypeMap_t& members );; 33 ; 34 //---------------------------------------------------------------------------; 35 // Check if given rule contains references to valid data members; 36 //---------------------------------------------------------------------------; 37 bool HasValidDataMembers( SchemaRuleMap_t& rule, MembersTypeMap_t& members,; 38 std::string& error_string);; 39 ; 40 //---------------------------------------------------------------------------; 41 // Write the conversion function for Read rule; 42 //---------------------------------------------------------------------------; 43 void WriteReadRuleFunc( SchemaRuleMap_t& rule,",MatchSource.WIKI,doc/v632/RConversionRuleParser_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8h_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:1649,Availability,avail,available,1649,"10 ; 11#include ""ROOT/InternalTreeUtils.hxx""; 12#include ""ROOT/RDataFrame.hxx""; 13#include ""ROOT/RDataSource.hxx""; 14#include ""ROOT/RDF/RDatasetSpec.hxx""; 15#include ""ROOT/RDF/RInterface.hxx""; 16#include ""ROOT/RDF/RLoopManager.hxx""; 17#include ""ROOT/RDF/Utils.hxx""; 18#include <string_view>; 19#include ""TChain.h""; 20#include ""TDirectory.h""; 21#include ""RtypesCore.h"" // for ULong64_t; 22#include ""TTree.h""; 23 ; 24#include <fstream> // std::ifstream; 25#include <nlohmann/json.hpp> // nlohmann::json::parse; 26#include <memory> // for make_shared, allocator, shared_ptr; 27#include <ostream> // ostringstream; 28#include <stdexcept>; 29#include <string>; 30#include <vector>; 31 ; 32// clang-format off; 33/**; 34* \class ROOT::RDataFrame; 35* \ingroup dataframe; 36* \brief ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python.; 37 ; 38In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available; 39on their machines completely transparently.<br>; 40Skip to the [class reference](#reference) or keep reading for the user guide.; 41 ; 42In a nutshell:; 43~~~{.cpp}; 44ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; 45ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; 46auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; 47myHisto->Draw(); // Event loop is run here, upon first access to a result; 48~~~; 49 ; 50Calculations are expressed in terms of a type-safe *functional chain of actions and transformations*, RDataFrame takes; 51care of their execution. The implementation automatically puts in place several low level optimisations such as; 52multi-thread parallelization and caching.; 53 ; 54\htmlonly; 55<a href=""https://doi.org/10.5281/zenodo.260230""><img src=""https://zenodo.org/badge/DOI/10.5281/zenodo.260230.svg""; 56alt=""DOI""></a>; 57\endhtmlonly; 58 ; 59## For the",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:11825,Availability,avail,available,11825,"ad of execution. This is meant as a helper in writing thread-safe Foreach() actions when using RDataFrame after ROOT::EnableImplicitMT(). ForeachSlot() works just as well with single-thread execution: in that case `slot` will always be `0`. |; 148| Snapshot() | Write the processed dataset to disk, in a new TTree and TFile. Custom columns can be saved as well, filtered entries are not saved. Users can specify which columns to save (default is all). Snapshot, by default, overwrites the output file if it already exists. Snapshot() can be made *lazy* setting the appropriate flag in the snapshot options.|; 149 ; 150 ; 151### Queries; 152 ; 153These operations do not modify the dataframe or book computations but simply return information on the RDataFrame object.; 154 ; 155| **Operation** | **Description** |; 156|---------------------|-----------------|; 157| Describe() | Get useful information describing the dataframe, e.g. columns and their types. |; 158| GetColumnNames() | Get the names of all the available columns of the dataset. |; 159| GetColumnType() | Return the type of a given column as a string. |; 160| GetColumnTypeNamesList() | Return the list of type names of columns in the dataset. |; 161| GetDefinedColumnNames() | Get the names of all the defined columns. |; 162| GetFilterNames() | Return the names of all filters in the computation graph. |; 163| GetNRuns() | Return the number of event loops run by this RDataFrame instance so far. |; 164| GetNSlots() | Return the number of processing slots that RDataFrame will use during the event loop (i.e. the concurrency level). |; 165| SaveGraph() | Store the computation graph of an RDataFrame in [DOT format (graphviz)](https://en.wikipedia.org/wiki/DOT_(graph_description_language)) for easy inspection. See the [relevant section](\ref representgraph) for details. |; 166 ; 167\anchor introduction; 168## Introduction; 169Users define their analysis as a sequence of operations to be performed on the dataframe object; the f",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:25235,Availability,avail,available,25235,"t be; 402valid C++ and it is just-in-time compiled. The process has a small runtime overhead and like with filters it is currently the only possible approach when using PyROOT.; 403 ; 404Previously, when showing the different ways an RDataFrame can be created, we showed a constructor that takes a; 405number of entries as a parameter. In the following example we show how to combine such an ""empty"" RDataFrame with Define(); 406transformations to create a dataset on the fly. We then save the generated data on disk using the Snapshot() action.; 407~~~{.cpp}; 408RDataFrame d(100); // an RDF that will generate 100 entries (currently empty); 409int x = -1;; 410auto d_with_columns = d.Define(""x"", [&x] { return ++x; }); 411 .Define(""xx"", [&x] { return x*x; });; 412d_with_columns.Snapshot(""myNewTree"", ""newfile.root"");; 413~~~; 414This example is slightly more advanced than what we have seen so far. First, it makes use of lambda captures (a; 415simple way to make external variables available inside the body of C++ lambdas) to act on the same variable `x` from; 416both Define() transformations. Second, we have *stored* the transformed dataframe in a variable. This is always; 417possible, since at each point of the transformation chain users can store the status of the dataframe for further use (more; 418on this [below](#callgraphs)).; 419 ; 420You can read more about defining new columns [here](#custom-columns).; 421 ; 422\image html RDF_Graph.png ""A graph composed of two branches, one starting with a filter and one with a define. The end point of a branch is always an action.""; 423 ; 424 ; 425### Running on a range of entries; 426It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame; 427offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and; 428actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:26866,Availability,avail,available,26866,"# Running on a range of entries; 426It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame; 427offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and; 428actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act; 429exclusively on the entries passing the filter -- it will not even count the other entries! The same goes for a Range(); 430hanging from another Range(). Here are some commented examples:; 431~~~{.cpp}; 432RDataFrame d(""myTree"", ""file.root"");; 433// Here we store a dataframe that loops over only the first 30 entries in a variable; 434auto d30 = d.Range(30);; 435// This is how you pick all entries from 15 onwards; 436auto d15on = d.Range(15, 0);; 437// We can specify a stride too, in this case we pick an event every 3; 438auto d15each3 = d.Range(0, 15, 3);; 439~~~; 440Note that ranges are not available when multi-threading is enabled. More information on ranges is available; 441[here](#ranges).; 442 ; 443### Executing multiple actions in the same event loop; 444As a final example let us apply two different cuts on branch ""MET"" and fill two different histograms with the ""pt_v"" of; 445the filtered events.; 446By now, you should be able to easily understand what is happening:; 447~~~{.cpp}; 448RDataFrame d(""treeName"", ""file.root"");; 449auto h1 = d.Filter(""MET > 10"").Histo1D(""pt_v"");; 450auto h2 = d.Histo1D(""pt_v"");; 451h1->Draw(); // event loop is run once here; 452h2->Draw(""SAME""); // no need to run the event loop again; 453~~~; 454RDataFrame executes all above actions by **running the event-loop only once**. The trick is that actions are not; 455executed at the moment they are called, but they are **lazy**, i.e. delayed until the moment one of their results is; 456accessed through the smart pointer. At that time, the event loop is triggered and *all* results are produc",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:26939,Availability,avail,available,26939,"cessing of the dataset to a range of entries. For this reason, the RDataFrame; 427offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and; 428actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act; 429exclusively on the entries passing the filter -- it will not even count the other entries! The same goes for a Range(); 430hanging from another Range(). Here are some commented examples:; 431~~~{.cpp}; 432RDataFrame d(""myTree"", ""file.root"");; 433// Here we store a dataframe that loops over only the first 30 entries in a variable; 434auto d30 = d.Range(30);; 435// This is how you pick all entries from 15 onwards; 436auto d15on = d.Range(15, 0);; 437// We can specify a stride too, in this case we pick an event every 3; 438auto d15each3 = d.Range(0, 15, 3);; 439~~~; 440Note that ranges are not available when multi-threading is enabled. More information on ranges is available; 441[here](#ranges).; 442 ; 443### Executing multiple actions in the same event loop; 444As a final example let us apply two different cuts on branch ""MET"" and fill two different histograms with the ""pt_v"" of; 445the filtered events.; 446By now, you should be able to easily understand what is happening:; 447~~~{.cpp}; 448RDataFrame d(""treeName"", ""file.root"");; 449auto h1 = d.Filter(""MET > 10"").Histo1D(""pt_v"");; 450auto h2 = d.Histo1D(""pt_v"");; 451h1->Draw(); // event loop is run once here; 452h2->Draw(""SAME""); // no need to run the event loop again; 453~~~; 454RDataFrame executes all above actions by **running the event-loop only once**. The trick is that actions are not; 455executed at the moment they are called, but they are **lazy**, i.e. delayed until the moment one of their results is; 456accessed through the smart pointer. At that time, the event loop is triggered and *all* results are produced; 457simultaneously.; 458 ; 459It is therefore good practice to declare all y",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:32388,Availability,avail,available,32388," can be passed to the Filter() method to create a **named filter**. Named filters; 515work as usual, but also keep track of how many entries they accept and reject.; 516 ; 517Statistics are retrieved through a call to the Report() method:; 518 ; 519- when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all; 520named filters declared up to that point; 521- when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport>; 522relative all named filters in the section of the chain between the main RDataFrame and that node (included).; 523 ; 524Stats are stored in the same order as named filters have been added to the graph, and *refer to the latest event-loop*; 525that has been run using the relevant RDataFrame.; 526 ; 527\anchor ranges; 528### Ranges; 529When RDataFrame is not being used in a multi-thread environment (i.e. no call to EnableImplicitMT() was made),; 530Range() transformations are available. These act very much like filters but instead of basing their decision on; 531a filter expression, they rely on `begin`,`end` and `stride` parameters.; 532 ; 533- `begin`: initial entry number considered for this range.; 534- `end`: final entry number (excluded) considered for this range. 0 means that the range goes until the end of the dataset.; 535- `stride`: process one entry of the [begin, end) range every `stride` entries. Must be strictly greater than 0.; 536 ; 537The actual number of entries processed downstream of a Range() node will be `(end - begin)/stride` (or less if less; 538entries than that are available).; 539 ; 540Note that ranges act ""locally"", not based on the global entry count: `Range(10,50)` means ""skip the first 10 entries; 541*that reach this node*, let the next 40 entries pass, then stop processing"". If a range node hangs from a filter node,; 542and the range has a `begin` parameter of 10, that means the range will skip",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:32912,Availability,down,downstream,32912,"section of the chain between the main RDataFrame and that node (included).; 523 ; 524Stats are stored in the same order as named filters have been added to the graph, and *refer to the latest event-loop*; 525that has been run using the relevant RDataFrame.; 526 ; 527\anchor ranges; 528### Ranges; 529When RDataFrame is not being used in a multi-thread environment (i.e. no call to EnableImplicitMT() was made),; 530Range() transformations are available. These act very much like filters but instead of basing their decision on; 531a filter expression, they rely on `begin`,`end` and `stride` parameters.; 532 ; 533- `begin`: initial entry number considered for this range.; 534- `end`: final entry number (excluded) considered for this range. 0 means that the range goes until the end of the dataset.; 535- `stride`: process one entry of the [begin, end) range every `stride` entries. Must be strictly greater than 0.; 536 ; 537The actual number of entries processed downstream of a Range() node will be `(end - begin)/stride` (or less if less; 538entries than that are available).; 539 ; 540Note that ranges act ""locally"", not based on the global entry count: `Range(10,50)` means ""skip the first 10 entries; 541*that reach this node*, let the next 40 entries pass, then stop processing"". If a range node hangs from a filter node,; 542and the range has a `begin` parameter of 10, that means the range will skip the first 10 entries *that pass the; 543preceding filter*.; 544 ; 545Ranges allow ""early quitting"": if all branches of execution of a functional graph reached their `end` value of; 546processed entries, the event-loop is immediately interrupted. This is useful for debugging and quick data explorations.; 547 ; 548\anchor custom-columns; 549### Custom columns; 550Custom columns are created by invoking `Define(name, f, columnList)`. As usual, `f` can be any callable object; 551(function, lambda expression, functor class...); it takes the values of the columns listed in `columnList` (",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:33015,Availability,avail,available,33015,"section of the chain between the main RDataFrame and that node (included).; 523 ; 524Stats are stored in the same order as named filters have been added to the graph, and *refer to the latest event-loop*; 525that has been run using the relevant RDataFrame.; 526 ; 527\anchor ranges; 528### Ranges; 529When RDataFrame is not being used in a multi-thread environment (i.e. no call to EnableImplicitMT() was made),; 530Range() transformations are available. These act very much like filters but instead of basing their decision on; 531a filter expression, they rely on `begin`,`end` and `stride` parameters.; 532 ; 533- `begin`: initial entry number considered for this range.; 534- `end`: final entry number (excluded) considered for this range. 0 means that the range goes until the end of the dataset.; 535- `stride`: process one entry of the [begin, end) range every `stride` entries. Must be strictly greater than 0.; 536 ; 537The actual number of entries processed downstream of a Range() node will be `(end - begin)/stride` (or less if less; 538entries than that are available).; 539 ; 540Note that ranges act ""locally"", not based on the global entry count: `Range(10,50)` means ""skip the first 10 entries; 541*that reach this node*, let the next 40 entries pass, then stop processing"". If a range node hangs from a filter node,; 542and the range has a `begin` parameter of 10, that means the range will skip the first 10 entries *that pass the; 543preceding filter*.; 544 ; 545Ranges allow ""early quitting"": if all branches of execution of a functional graph reached their `end` value of; 546processed entries, the event-loop is immediately interrupted. This is useful for debugging and quick data explorations.; 547 ; 548\anchor custom-columns; 549### Custom columns; 550Custom columns are created by invoking `Define(name, f, columnList)`. As usual, `f` can be any callable object; 551(function, lambda expression, functor class...); it takes the values of the columns listed in `columnList` (",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:39433,Availability,avail,available,39433,"o switch `ROOT.RDataFrame` with; 641the backend-specific `RDataFrame` of your choice, for example:; 642 ; 643~~~{.py}; 644import ROOT; 645 ; 646# Point RDataFrame calls to the Spark specific RDataFrame; 647RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; 648 ; 649# It still accepts the same constructor arguments as traditional RDataFrame; 650df = RDataFrame(""mytree"", ""myfile.root""); 651 ; 652# Continue the application with the traditional RDataFrame API; 653sum = df.Filter(""x > 10"").Sum(""y""); 654h = df.Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 655 ; 656print(sum.GetValue()); 657h.Draw(); 658~~~; 659 ; 660The main goal of this package is to support running any RDataFrame application distributedly. Nonetheless, not all; 661parts of the RDataFrame API currently work with this package. The subset that is currently available is:; 662- AsNumpy; 663- Count; 664- Define; 665- DefinePerSample; 666- Filter; 667- Graph; 668- Histo[1,2,3]D; 669- HistoND; 670- Max; 671- Mean; 672- Min; 673- Profile[1,2,3]D; 674- Redefine; 675- Snapshot; 676- Stats; 677- StdDev; 678- Sum; 679- Systematic variations: Vary and [VariationsFor](\ref ROOT::RDF::Experimental::VariationsFor).; 680- Parallel submission of distributed graphs: [RunGraphs](\ref ROOT::RDF::RunGraphs).; 681- Information about the dataframe: GetColumnNames.; 682 ; 683with support for more operations coming in the future. Data sources other than TTree and TChain (e.g. CSV, RNTuple) are; 684currently not supported.; 685 ; 686\note The distributed RDataFrame module requires at least Python version 3.8.; 687 ; 688### Connecting to a Spark cluster; 689 ; 690In order to distribute the RDataFrame workload, you can connect to a Spark cluster you have access to through the; 691official [Spark API](https://spark.apache.org/docs/latest/rdd-programming-guide.html#initializing-spark), then hook the; 692connection instance to the distributed `RDataFrame` object like so:; 693 ; 694~~~{.py}; 695import pyspark; 696import ROOT;",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:42732,Availability,avail,available,42732,".dask.org/en/stable/)):; 718 ; 719~~~{.py}; 720import ROOT; 721from dask.distributed import Client; 722 ; 723# Point RDataFrame calls to the Dask specific RDataFrame; 724RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; 725 ; 726# In a Python script the Dask client needs to be initalized in a context; 727# Jupyter notebooks / Python session don't need this; 728if __name__ == ""__main__"":; 729 # With an already setup cluster that exposes a Dask scheduler endpoint; 730 client = Client(""dask_scheduler.domain.com:8786""); 731 ; 732 # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; 733 df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); 734 # Proceed as usual; 735 df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 736~~~; 737 ; 738If an instance of [distributed.Client](http://distributed.dask.org/en/stable/api.html#distributed.Client) is not; 739provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine; 740using all cores available.; 741 ; 742### Choosing the number of distributed tasks; 743 ; 744A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending; 745tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but; 746generically tries to infer how many cores are available in the cluster through the connection object. The number of; 747tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend; 748doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to; 749a batch system. The client object created at the beginning of the application does not automatically know how many cores; 750will be available during distributed execution, since the jobs are submitted to the batch system after the creat",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:43102,Availability,avail,available,43102,"setup cluster that exposes a Dask scheduler endpoint; 730 client = Client(""dask_scheduler.domain.com:8786""); 731 ; 732 # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; 733 df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); 734 # Proceed as usual; 735 df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 736~~~; 737 ; 738If an instance of [distributed.Client](http://distributed.dask.org/en/stable/api.html#distributed.Client) is not; 739provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine; 740using all cores available.; 741 ; 742### Choosing the number of distributed tasks; 743 ; 744A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending; 745tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but; 746generically tries to infer how many cores are available in the cluster through the connection object. The number of; 747tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend; 748doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to; 749a batch system. The client object created at the beginning of the application does not automatically know how many cores; 750will be available during distributed execution, since the jobs are submitted to the batch system after the creation of; 751the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks.; 752 ; 753The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional; 754keyword argument `npartitions` when creating the RDataFrame object. This parameter is accepted irrespectively of the; 755backend used:; 756 ; 757~~~{.py}; 758import ROOT; 759 ; 760# Define ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:43556,Availability,avail,available,43556,"ml#distributed.Client) is not; 739provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine; 740using all cores available.; 741 ; 742### Choosing the number of distributed tasks; 743 ; 744A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending; 745tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but; 746generically tries to infer how many cores are available in the cluster through the connection object. The number of; 747tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend; 748doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to; 749a batch system. The client object created at the beginning of the application does not automatically know how many cores; 750will be available during distributed execution, since the jobs are submitted to the batch system after the creation of; 751the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks.; 752 ; 753The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional; 754keyword argument `npartitions` when creating the RDataFrame object. This parameter is accepted irrespectively of the; 755backend used:; 756 ; 757~~~{.py}; 758import ROOT; 759 ; 760# Define correct imports and access the distributed RDataFrame appropriate for the; 761# backend used in the analysis; 762RDataFrame = ROOT.RDF.Experimental.Distributed.[BACKEND].RDataFrame; 763 ; 764if __name__ == ""__main__"":; 765 # The `npartitions` optional argument tells the RDataFrame how many tasks are desired; 766 df = RDataFrame(""mytree"",""myfile.root"", npartitions=NPARTITIONS); 767 # Proceed as usual; 768 df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10),",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:47568,Availability,error,errors,47568,"supports this feature and graphs belonging to different backends can be still triggered with; 809a single call to RunGraphs (e.g. it is possible to send a Spark job and a Dask job at the same time).; 810 ; 811### Histogram models in distributed mode; 812 ; 813When calling a Histo*D operation in distributed mode, remember to pass to the function the model of the histogram to be; 814computed, e.g. the axis range and the number of bins:; 815 ; 816~~~{.py}; 817import ROOT; 818RDataFrame = ROOT.RDF.Experimental.Distributed.[BACKEND].RDataFrame; 819 ; 820if __name__ == ""__main__"":; 821 df = RDataFrame(""mytree"",""myfile.root"").Define(""x"",""someoperation""); 822 # The model can be passed either as a tuple with the arguments in the correct order; 823 df.Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 824 # Or by creating the specific struct; 825 model = ROOT.RDF.TH1DModel(""name"", ""title"", 10, 0, 10); 826 df.Histo1D(model, ""x""); 827~~~; 828 ; 829Without this, two partial histograms resulting from two distributed tasks would have incompatible binning, thus leading; 830to errors when merging them. Failing to pass a histogram model will raise an error on the client side, before starting; 831the distributed execution.; 832 ; 833### Live visualization in distributed mode with dask; 834 ; 835The live visualization feature allows real-time data representation of plots generated during the execution ; 836of a distributed RDataFrame application. ; 837It enables visualizing intermediate results as they are computed across multiple nodes of a Dask cluster; 838by creating a canvas and continuously updating it as partial results become available. ; 839 ; 840The LiveVisualize() function can be imported from the Python package **ROOT.RDF.Experimental.Distributed**:; 841 ; 842~~~{.py}; 843import ROOT; 844 ; 845LiveVisualize = ROOT.RDF.Experimental.Distributed.LiveVisualize; 846~~~; 847 ; 848The function takes drawable objects (e.g. histograms) and optional callback functions as argument, it accepts",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:47642,Availability,error,error,47642,"Spark job and a Dask job at the same time).; 810 ; 811### Histogram models in distributed mode; 812 ; 813When calling a Histo*D operation in distributed mode, remember to pass to the function the model of the histogram to be; 814computed, e.g. the axis range and the number of bins:; 815 ; 816~~~{.py}; 817import ROOT; 818RDataFrame = ROOT.RDF.Experimental.Distributed.[BACKEND].RDataFrame; 819 ; 820if __name__ == ""__main__"":; 821 df = RDataFrame(""mytree"",""myfile.root"").Define(""x"",""someoperation""); 822 # The model can be passed either as a tuple with the arguments in the correct order; 823 df.Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 824 # Or by creating the specific struct; 825 model = ROOT.RDF.TH1DModel(""name"", ""title"", 10, 0, 10); 826 df.Histo1D(model, ""x""); 827~~~; 828 ; 829Without this, two partial histograms resulting from two distributed tasks would have incompatible binning, thus leading; 830to errors when merging them. Failing to pass a histogram model will raise an error on the client side, before starting; 831the distributed execution.; 832 ; 833### Live visualization in distributed mode with dask; 834 ; 835The live visualization feature allows real-time data representation of plots generated during the execution ; 836of a distributed RDataFrame application. ; 837It enables visualizing intermediate results as they are computed across multiple nodes of a Dask cluster; 838by creating a canvas and continuously updating it as partial results become available. ; 839 ; 840The LiveVisualize() function can be imported from the Python package **ROOT.RDF.Experimental.Distributed**:; 841 ; 842~~~{.py}; 843import ROOT; 844 ; 845LiveVisualize = ROOT.RDF.Experimental.Distributed.LiveVisualize; 846~~~; 847 ; 848The function takes drawable objects (e.g. histograms) and optional callback functions as argument, it accepts 4 different input formats:; 849 ; 850- Passing a list or tuple of drawables: ; 851You can pass a list or tuple containing the plots you want to visualize. ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:48132,Availability,avail,available,48132,"e; 819 ; 820if __name__ == ""__main__"":; 821 df = RDataFrame(""mytree"",""myfile.root"").Define(""x"",""someoperation""); 822 # The model can be passed either as a tuple with the arguments in the correct order; 823 df.Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 824 # Or by creating the specific struct; 825 model = ROOT.RDF.TH1DModel(""name"", ""title"", 10, 0, 10); 826 df.Histo1D(model, ""x""); 827~~~; 828 ; 829Without this, two partial histograms resulting from two distributed tasks would have incompatible binning, thus leading; 830to errors when merging them. Failing to pass a histogram model will raise an error on the client side, before starting; 831the distributed execution.; 832 ; 833### Live visualization in distributed mode with dask; 834 ; 835The live visualization feature allows real-time data representation of plots generated during the execution ; 836of a distributed RDataFrame application. ; 837It enables visualizing intermediate results as they are computed across multiple nodes of a Dask cluster; 838by creating a canvas and continuously updating it as partial results become available. ; 839 ; 840The LiveVisualize() function can be imported from the Python package **ROOT.RDF.Experimental.Distributed**:; 841 ; 842~~~{.py}; 843import ROOT; 844 ; 845LiveVisualize = ROOT.RDF.Experimental.Distributed.LiveVisualize; 846~~~; 847 ; 848The function takes drawable objects (e.g. histograms) and optional callback functions as argument, it accepts 4 different input formats:; 849 ; 850- Passing a list or tuple of drawables: ; 851You can pass a list or tuple containing the plots you want to visualize. For example:; 852 ; 853~~~{.py}; 854LiveVisualize([h_gaus, h_exp, h_random]); 855~~~; 856 ; 857- Passing a list or tuple of drawables with a global callback function: ; 858You can also include a global callback function that will be applied to all plots. For example:; 859 ; 860~~~{.py}; 861def set_fill_color(hist):; 862 hist.SetFillColor(ROOT.kBlue); 863 ; 864LiveVisualize([h_gaus, h_e",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:59323,Availability,down,down,59323,"syntax to define systematic variations.; 996This is done in two steps: a) register variations for one or more existing columns using Vary() and b) extract variations; 997of normal RDataFrame results using \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"". In between these steps, no other change; 998to the analysis code is required: the presence of systematic variations for certain columns is automatically propagated; 999through filters, defines and actions, and RDataFrame will take these dependencies into account when producing varied; 1000results. \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" is included in header `ROOT/RDFHelpers.hxx`. The compiled C++ programs must include this header; 1001explicitly, this is not required for ROOT macros. ; 1002 ; 1003An example usage of Vary() and \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" in C++:; 1004 ; 1005~~~{.cpp}; 1006auto nominal_hx =; 1007 df.Vary(""pt"", ""ROOT::RVecD{pt*0.9f, pt*1.1f}"", {""down"", ""up""}); 1008 .Filter(""pt > pt_cut""); 1009 .Define(""x"", someFunc, {""pt""}); 1010 .Histo1D<float>(""x"");; 1011 ; 1012// request the generation of varied results from the nominal_hx; 1013ROOT::RDF::Experimental::RResultMap<TH1D> hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; 1014 ; 1015// the event loop runs here, upon first access to any of the results or varied results:; 1016hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); 1017hx[""pt:down""].Draw(""SAME"");; 1018hx[""pt:up""].Draw(""SAME"");; 1019~~~; 1020 ; 1021A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned; 1022as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of; 1023this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second; 1024to the tag ""up""). The _full_ variation name will be composed of the varied column name and the variati",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:59787,Availability,down,down,59787,"999through filters, defines and actions, and RDataFrame will take these dependencies into account when producing varied; 1000results. \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" is included in header `ROOT/RDFHelpers.hxx`. The compiled C++ programs must include this header; 1001explicitly, this is not required for ROOT macros. ; 1002 ; 1003An example usage of Vary() and \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" in C++:; 1004 ; 1005~~~{.cpp}; 1006auto nominal_hx =; 1007 df.Vary(""pt"", ""ROOT::RVecD{pt*0.9f, pt*1.1f}"", {""down"", ""up""}); 1008 .Filter(""pt > pt_cut""); 1009 .Define(""x"", someFunc, {""pt""}); 1010 .Histo1D<float>(""x"");; 1011 ; 1012// request the generation of varied results from the nominal_hx; 1013ROOT::RDF::Experimental::RResultMap<TH1D> hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; 1014 ; 1015// the event loop runs here, upon first access to any of the results or varied results:; 1016hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); 1017hx[""pt:down""].Draw(""SAME"");; 1018hx[""pt:up""].Draw(""SAME"");; 1019~~~; 1020 ; 1021A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned; 1022as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of; 1023this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second; 1024to the tag ""up""). The _full_ variation name will be composed of the varied column name and the variation tags (e.g.; 1025""pt:down"", ""pt:up"" in this example). Python usage looks similar.; 1026 ; 1027Note how we use the ""pt"" column as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill; 1028the resulting histogram. To produce the varied results, RDataFrame will automatically execute the Filter and Define; 1029calls for each variation and fill the histogram with values and cuts that depend on the var",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:60205,Availability,down,down,60205,"ry() and \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" in C++:; 1004 ; 1005~~~{.cpp}; 1006auto nominal_hx =; 1007 df.Vary(""pt"", ""ROOT::RVecD{pt*0.9f, pt*1.1f}"", {""down"", ""up""}); 1008 .Filter(""pt > pt_cut""); 1009 .Define(""x"", someFunc, {""pt""}); 1010 .Histo1D<float>(""x"");; 1011 ; 1012// request the generation of varied results from the nominal_hx; 1013ROOT::RDF::Experimental::RResultMap<TH1D> hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; 1014 ; 1015// the event loop runs here, upon first access to any of the results or varied results:; 1016hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); 1017hx[""pt:down""].Draw(""SAME"");; 1018hx[""pt:up""].Draw(""SAME"");; 1019~~~; 1020 ; 1021A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned; 1022as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of; 1023this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second; 1024to the tag ""up""). The _full_ variation name will be composed of the varied column name and the variation tags (e.g.; 1025""pt:down"", ""pt:up"" in this example). Python usage looks similar.; 1026 ; 1027Note how we use the ""pt"" column as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill; 1028the resulting histogram. To produce the varied results, RDataFrame will automatically execute the Filter and Define; 1029calls for each variation and fill the histogram with values and cuts that depend on the variation.; 1030 ; 1031There is no limitation to the complexity of a Vary() expression. Just like for the Define() and Filter() calls, users are; 1032not limited to string expressions but they can also pass any valid C++ callable, including lambda functions and; 1033complex functors. The callable can be applied to zero or more existing columns and it will always receive their; 1034_n",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:60353,Availability,down,down,60353,"); 1009 .Define(""x"", someFunc, {""pt""}); 1010 .Histo1D<float>(""x"");; 1011 ; 1012// request the generation of varied results from the nominal_hx; 1013ROOT::RDF::Experimental::RResultMap<TH1D> hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; 1014 ; 1015// the event loop runs here, upon first access to any of the results or varied results:; 1016hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); 1017hx[""pt:down""].Draw(""SAME"");; 1018hx[""pt:up""].Draw(""SAME"");; 1019~~~; 1020 ; 1021A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned; 1022as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of; 1023this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second; 1024to the tag ""up""). The _full_ variation name will be composed of the varied column name and the variation tags (e.g.; 1025""pt:down"", ""pt:up"" in this example). Python usage looks similar.; 1026 ; 1027Note how we use the ""pt"" column as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill; 1028the resulting histogram. To produce the varied results, RDataFrame will automatically execute the Filter and Define; 1029calls for each variation and fill the histogram with values and cuts that depend on the variation.; 1030 ; 1031There is no limitation to the complexity of a Vary() expression. Just like for the Define() and Filter() calls, users are; 1032not limited to string expressions but they can also pass any valid C++ callable, including lambda functions and; 1033complex functors. The callable can be applied to zero or more existing columns and it will always receive their; 1034_nominal_ value in input.; 1035 ; 1036#### Varying multiple columns in lockstep; 1037 ; 1038In the following Python snippet we use the Vary() signature that allows varying multiple columns simultaneously or; 1039""in locks",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:61504,Availability,down,down,61504,"o produce the varied results, RDataFrame will automatically execute the Filter and Define; 1029calls for each variation and fill the histogram with values and cuts that depend on the variation.; 1030 ; 1031There is no limitation to the complexity of a Vary() expression. Just like for the Define() and Filter() calls, users are; 1032not limited to string expressions but they can also pass any valid C++ callable, including lambda functions and; 1033complex functors. The callable can be applied to zero or more existing columns and it will always receive their; 1034_nominal_ value in input.; 1035 ; 1036#### Varying multiple columns in lockstep; 1037 ; 1038In the following Python snippet we use the Vary() signature that allows varying multiple columns simultaneously or; 1039""in lockstep"":; 1040 ; 1041~~~{.python}; 1042df.Vary([""pt"", ""eta""],; 1043 ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",; 1044 variationTags=[""down"", ""up""],; 1045 variationName=""ptAndEta""); 1046~~~; 1047 ; 1048The expression returns an RVec of two RVecs: each inner vector contains the varied values for one column. The; 1049inner vectors follow the same ordering as the column names that are passed as the first argument. Besides the variation tags, in; 1050this case we also have to explicitly pass the variation name (here: ""ptAndEta"") as the default column name does not exist.; 1051 ; 1052The above call will produce variations ""ptAndEta:down"" and ""ptAndEta:up"".; 1053 ; 1054#### Combining multiple variations; 1055 ; 1056Even if a result depends on multiple variations, only one variation is applied at a time, i.e. there will be no result produced; 1057by applying multiple systematic variations at the same time.; 1058For example, in the following example snippet, the RResultMap instance `all_h` will contain keys ""nominal"", ""pt:down"",; 1059""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; 1060 ; 1061~~~{.cpp}; 1062auto df = _df.Vary(""pt"",; 1063 ""ROOT::RVecD{pt*0.9, pt*1.1}"",; 1064 {""down"", ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:62004,Availability,down,down,62004,"ble, including lambda functions and; 1033complex functors. The callable can be applied to zero or more existing columns and it will always receive their; 1034_nominal_ value in input.; 1035 ; 1036#### Varying multiple columns in lockstep; 1037 ; 1038In the following Python snippet we use the Vary() signature that allows varying multiple columns simultaneously or; 1039""in lockstep"":; 1040 ; 1041~~~{.python}; 1042df.Vary([""pt"", ""eta""],; 1043 ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",; 1044 variationTags=[""down"", ""up""],; 1045 variationName=""ptAndEta""); 1046~~~; 1047 ; 1048The expression returns an RVec of two RVecs: each inner vector contains the varied values for one column. The; 1049inner vectors follow the same ordering as the column names that are passed as the first argument. Besides the variation tags, in; 1050this case we also have to explicitly pass the variation name (here: ""ptAndEta"") as the default column name does not exist.; 1051 ; 1052The above call will produce variations ""ptAndEta:down"" and ""ptAndEta:up"".; 1053 ; 1054#### Combining multiple variations; 1055 ; 1056Even if a result depends on multiple variations, only one variation is applied at a time, i.e. there will be no result produced; 1057by applying multiple systematic variations at the same time.; 1058For example, in the following example snippet, the RResultMap instance `all_h` will contain keys ""nominal"", ""pt:down"",; 1059""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; 1060 ; 1061~~~{.cpp}; 1062auto df = _df.Vary(""pt"",; 1063 ""ROOT::RVecD{pt*0.9, pt*1.1}"",; 1064 {""down"", ""up""}); 1065 .Vary(""eta"",; 1066 [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; 1067 {""eta""},; 1068 2);; 1069 ; 1070auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; 1071auto all_hs = VariationsFor(nom_h);; 1072all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; 1073~~~; 1074 ; 1075Note how we passed the integer `2` instead of a list of variation tags to the second Vary()",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:62399,Availability,down,down,62399,"{.python}; 1042df.Vary([""pt"", ""eta""],; 1043 ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",; 1044 variationTags=[""down"", ""up""],; 1045 variationName=""ptAndEta""); 1046~~~; 1047 ; 1048The expression returns an RVec of two RVecs: each inner vector contains the varied values for one column. The; 1049inner vectors follow the same ordering as the column names that are passed as the first argument. Besides the variation tags, in; 1050this case we also have to explicitly pass the variation name (here: ""ptAndEta"") as the default column name does not exist.; 1051 ; 1052The above call will produce variations ""ptAndEta:down"" and ""ptAndEta:up"".; 1053 ; 1054#### Combining multiple variations; 1055 ; 1056Even if a result depends on multiple variations, only one variation is applied at a time, i.e. there will be no result produced; 1057by applying multiple systematic variations at the same time.; 1058For example, in the following example snippet, the RResultMap instance `all_h` will contain keys ""nominal"", ""pt:down"",; 1059""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; 1060 ; 1061~~~{.cpp}; 1062auto df = _df.Vary(""pt"",; 1063 ""ROOT::RVecD{pt*0.9, pt*1.1}"",; 1064 {""down"", ""up""}); 1065 .Vary(""eta"",; 1066 [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; 1067 {""eta""},; 1068 2);; 1069 ; 1070auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; 1071auto all_hs = VariationsFor(nom_h);; 1072all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; 1073~~~; 1074 ; 1075Note how we passed the integer `2` instead of a list of variation tags to the second Vary() invocation: this is a; 1076shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; 1077 ; 1078\note Currently, VariationsFor() and RResultMap are in the `ROOT::RDF::Experimental` namespace, to indicate that these; 1079 interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related; 1080 programming model will be streamlined in fu",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:62569,Availability,down,down,62569,"e expression returns an RVec of two RVecs: each inner vector contains the varied values for one column. The; 1049inner vectors follow the same ordering as the column names that are passed as the first argument. Besides the variation tags, in; 1050this case we also have to explicitly pass the variation name (here: ""ptAndEta"") as the default column name does not exist.; 1051 ; 1052The above call will produce variations ""ptAndEta:down"" and ""ptAndEta:up"".; 1053 ; 1054#### Combining multiple variations; 1055 ; 1056Even if a result depends on multiple variations, only one variation is applied at a time, i.e. there will be no result produced; 1057by applying multiple systematic variations at the same time.; 1058For example, in the following example snippet, the RResultMap instance `all_h` will contain keys ""nominal"", ""pt:down"",; 1059""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; 1060 ; 1061~~~{.cpp}; 1062auto df = _df.Vary(""pt"",; 1063 ""ROOT::RVecD{pt*0.9, pt*1.1}"",; 1064 {""down"", ""up""}); 1065 .Vary(""eta"",; 1066 [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; 1067 {""eta""},; 1068 2);; 1069 ; 1070auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; 1071auto all_hs = VariationsFor(nom_h);; 1072all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; 1073~~~; 1074 ; 1075Note how we passed the integer `2` instead of a list of variation tags to the second Vary() invocation: this is a; 1076shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; 1077 ; 1078\note Currently, VariationsFor() and RResultMap are in the `ROOT::RDF::Experimental` namespace, to indicate that these; 1079 interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related; 1080 programming model will be streamlined in future versions.; 1081 ; 1082\note Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to; 1083 call \ref ROOT::RDF::Experimental::Va",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:62839,Availability,down,down,62839,"051 ; 1052The above call will produce variations ""ptAndEta:down"" and ""ptAndEta:up"".; 1053 ; 1054#### Combining multiple variations; 1055 ; 1056Even if a result depends on multiple variations, only one variation is applied at a time, i.e. there will be no result produced; 1057by applying multiple systematic variations at the same time.; 1058For example, in the following example snippet, the RResultMap instance `all_h` will contain keys ""nominal"", ""pt:down"",; 1059""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; 1060 ; 1061~~~{.cpp}; 1062auto df = _df.Vary(""pt"",; 1063 ""ROOT::RVecD{pt*0.9, pt*1.1}"",; 1064 {""down"", ""up""}); 1065 .Vary(""eta"",; 1066 [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; 1067 {""eta""},; 1068 2);; 1069 ; 1070auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; 1071auto all_hs = VariationsFor(nom_h);; 1072all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; 1073~~~; 1074 ; 1075Note how we passed the integer `2` instead of a list of variation tags to the second Vary() invocation: this is a; 1076shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; 1077 ; 1078\note Currently, VariationsFor() and RResultMap are in the `ROOT::RDF::Experimental` namespace, to indicate that these; 1079 interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related; 1080 programming model will be streamlined in future versions.; 1081 ; 1082\note Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to; 1083 call \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" on them. These limitations will be lifted in future releases.; 1084 ; 1085See the Vary() method for more information and [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) ; 1086for an example usage of Vary and \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" in the analysis.; 1087 ; 1088\anchor rno",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:64282,Availability,avail,available,64282,"rove based on user feedback. We expect that some aspects of the related; 1080 programming model will be streamlined in future versions.; 1081 ; 1082\note Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to; 1083 call \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" on them. These limitations will be lifted in future releases.; 1084 ; 1085See the Vary() method for more information and [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) ; 1086for an example usage of Vary and \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" in the analysis.; 1087 ; 1088\anchor rnode; 1089### RDataFrame objects as function arguments and return values; 1090RDataFrame variables/nodes are relatively cheap to copy and it's possible to both pass them to (or move them into); 1091functions and to return them from functions. However, in general each dataframe node will have a different C++ type,; 1092which includes all available compile-time information about what that node does. One way to cope with this complication; 1093is to use template functions and/or C++14 auto return types:; 1094~~~{.cpp}; 1095template <typename RDF>; 1096auto ApplySomeFilters(RDF df); 1097{; 1098 return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; 1099}; 1100~~~; 1101 ; 1102A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be; 1103converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode:; 1104~~~{.cpp}; 1105// a function that conditionally adds a Range to an RDataFrame node.; 1106RNode MaybeAddRange(RNode df, bool mustAddRange); 1107{; 1108 return mustAddRange ? df.Range(1) : df;; 1109}; 1110// use as :; 1111ROOT::RDataFrame df(10);; 1112auto maybeRangedDF = MaybeAddRange(df, true);; 1113~~~; 1114 ; 1115The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the R",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:71327,Availability,error,error,71327,"f. This; 1196is why we never needed to specify the column types for all actions in the above snippets.; 1197 ; 1198When the column type is not a common one such as `int`, `double`, `char` or `float` it is nonetheless good practice to; 1199specify it as a template parameter to the action itself, like this:; 1200~~~{.cpp}; 1201df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; 1202df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; 1203~~~; 1204 ; 1205Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime; 1206overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; 1207 ; 1208When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing `x = 0` rather than `x == 0`:; 1209 ; 1210~~~{.cpp}; 1211// this throws an error (note the typo); 1212df.Define(""x"", ""0"").Filter(""x = 0"");; 1213~~~; 1214 ; 1215\anchor generic-actions; 1216### User-defined custom actions; 1217RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same; 1218time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; 1219 ; 1220#### Implementing custom actions with Book(); 1221 ; 1222Through the Book() method, users can implement a custom action and have access to the same features; 1223that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the; 1224event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:; 1225 ; 1226~~~{.cpp}; 1227#include <ROOT/RDataFrame.hxx>; 1228#include <memory>; 1229 ; 1230class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; 1231 std::shared_ptr<int> fFinalResult = std::make_shared<int>(0);; 1232 std::vector<i",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:74239,Availability,avail,available,74239,"adResults.end(), 0);; 1259 }; 1260 ; 1261 // Called by RDataFrame to retrieve the name of this action.; 1262 std::string GetActionName() const { return ""MyCounter""; }; 1263};; 1264 ; 1265int main() {; 1266 ROOT::RDataFrame df(10);; 1267 ROOT::RDF::RResultPtr<int> resultPtr = df.Book<>(MyCounter{df.GetNSlots()}, {});; 1268 // The GetValue call triggers the event loop; 1269 std::cout << ""Number of processed entries: "" << resultPtr.GetValue() << std::endl;; 1270}; 1271~~~; 1272 ; 1273See the Book() method for more information and [this tutorial](https://root.cern/doc/master/df018__customActions_8C.html); 1274for a more complete example.; 1275 ; 1276#### Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); 1277 ; 1278Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and; 1279executes the callable on the values of those columns for each event that passes all upstream selections.; 1280It can be used to perform actions that are not already available in the interface. For example, the following snippet; 1281evaluates the root mean square of column ""x"":; 1282~~~{.cpp}; 1283// Single-thread evaluation of RMS of column ""x"" using Foreach; 1284double sumSq = 0.;; 1285unsigned int n = 0;; 1286df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; 1287std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; 1288~~~; 1289In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach():; 1290thread will execute the expression concurrently.; 1291The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of `rms`; but; 1292this is probably too much head-scratch for such a simple operation.; 1293 ; 1294ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an; 1295additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame;",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:80640,Availability,down,down,80640,":RCsvDS which allows to read comma separated files:; 1373~~~{.cpp}; 1374auto tdf = ROOT::RDF::FromCSV(""MuRun2010B.csv"");; 1375auto filteredEvents =; 1376 tdf.Filter(""Q1 * Q2 == -1""); 1377 .Define(""m"", ""sqrt(pow(E1 + E2, 2) - (pow(px1 + px2, 2) + pow(py1 + py2, 2) + pow(pz1 + pz2, 2)))"");; 1378auto h = filteredEvents.Histo1D(""m"");; 1379h->Draw();; 1380~~~; 1381 ; 1382See also FromNumpy (Python-only), FromRNTuple(), FromArrow(), FromSqlite().; 1383 ; 1384\anchor callgraphs; 1385### Computation graphs (storing and reusing sets of transformations); 1386 ; 1387As we saw, transformed dataframes can be stored as variables and reused multiple times to create modified versions of the dataset. This implicitly defines a **computation graph** in which; 1388several paths of filtering/creation of columns are executed simultaneously, and finally aggregated results are produced.; 1389 ; 1390RDataFrame detects when several actions use the same filter or the same defined column, and **only evaluates each; 1391filter or defined column once per event**, regardless of how many times that result is used down the computation graph.; 1392Objects read from each column are **built once and never copied**, for maximum efficiency.; 1393When ""upstream"" filters are not passed, subsequent filters, temporary column expressions and actions are not evaluated,; 1394so it might be advisable to put the strictest filters first in the graph.; 1395 ; 1396\anchor representgraph; 1397### Visualizing the computation graph; 1398It is possible to print the computation graph from any node to obtain a [DOT (graphviz)](https://en.wikipedia.org/wiki/DOT_(graph_description_language)) representation either on the standard output; 1399or in a file.; 1400 ; 1401Invoking the function ROOT::RDF::SaveGraph() on any node that is not the head node, the computation graph of the branch; 1402the node belongs to is printed. By using the head node, the entire computation graph is printed.; 1403 ; 1404Following there is an exampl",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:85358,Availability,avail,available,85358,"adata"": {; 1475 ""lumi"": 10000.0, ; 1476 ""xsec"": 1.0,; 1477 ""sample_category"" = ""data""; 1478 }; 1479 },; 1480 ""sampleB"": {; 1481 ""trees"": [""tree3"", ""tree4""],; 1482 ""files"": [""file3.root"", ""file4.root""],; 1483 ""metadata"": {; 1484 ""lumi"": 0.5, ; 1485 ""xsec"": 1.5,; 1486 ""sample_category"" = ""MC_background""; 1487 }; 1488 }; 1489 }; 1490}; 1491~~~; 1492 ; 1493The metadata information from the specification file can be then accessed using the DefinePerSample function.; 1494For example, to access luminosity information (stored as a double):; 1495 ; 1496~~~{.python}; 1497df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); 1498~~~; 1499 ; 1500or sample_category information (stored as a string):; 1501 ; 1502~~~{.python}; 1503df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); 1504~~~; 1505 ; 1506or directly the filename:; 1507 ; 1508~~~{.python}; 1509df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); 1510~~~; 1511 ; 1512An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also; 1513provides a corresponding exemplary JSON file for the dataset specification.; 1514 ; 1515\anchor progressbar; 1516### Adding a progress bar ; 1517 ; 1518A progress bar showing the processed event statistics can be added to any RDataFrame program.; 1519The event statistics include elapsed time, currently processed file, currently processed events, the rate of event processing ; 1520and an estimated remaining time (per file being processed). It is recorded and printed in the terminal every m events and every ; 1521n seconds (by default m = 1000 and n = 1). The ProgressBar can be also added when the multithread (MT) mode is enabled. ; 1522 ; 1523ProgressBar is added after creating the dataframe object (df):; 1524~~~{.cpp}; 1525ROOT::RDataFrame df(""tree"", ""file.root"");; 1526ROOT::RDF::Experimental::AddProgressBar(df);; 1527~~~; 1528 ; 1529Alternatively, RDataFrame can be cast to an RNode first, giving ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:87806,Availability,avail,available,87806,"ntal::AddProgressBar(df_1);; 1537~~~; 1538Examples of implemented progress bars can be seen by running [Higgs to Four Lepton tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8py_source.html) and [Dimuon tutorial](https://root.cern/doc/master/df102__NanoAODDimuonAnalysis_8C.html). ; 1539 ; 1540*/; 1541// clang-format on; 1542 ; 1543namespace ROOT {; 1544 ; 1545using ROOT::RDF::ColumnNames_t;; 1546using ColumnNamesPtr_t = std::shared_ptr<const ColumnNames_t>;; 1547 ; 1548////////////////////////////////////////////////////////////////////////////; 1549/// \brief Build the dataframe.; 1550/// \param[in] treeName Name of the tree contained in the directory; 1551/// \param[in] dirPtr TDirectory where the tree is stored, e.g. a TFile.; 1552/// \param[in] defaultColumns Collection of default columns.; 1553///; 1554/// The default columns are looked at in case no column is specified in the; 1555/// booking of actions or transformations.; 1556/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1557RDataFrame::RDataFrame(std::string_view treeName, TDirectory *dirPtr, const ColumnNames_t &defaultColumns); 1558 : RInterface(std::make_shared<RDFDetail::RLoopManager>(nullptr, defaultColumns)); 1559{; 1560 if (!dirPtr) {; 1561 auto msg = ""Invalid TDirectory!"";; 1562 throw std::runtime_error(msg);; 1563 }; 1564 const std::string treeNameInt(treeName);; 1565 auto tree = static_cast<TTree *>(dirPtr->Get(treeNameInt.c_str()));; 1566 if (!tree) {; 1567 auto msg = ""Tree \"""" + treeNameInt + ""\"" cannot be found!"";; 1568 throw std::runtime_error(msg);; 1569 }; 1570 GetProxiedPtr()->SetTree(std::shared_ptr<TTree>(tree, [](TTree *) {}));; 1571}; 1572 ; 1573////////////////////////////////////////////////////////////////////////////; 1574/// \brief Build the dataframe.; 1575/// \param[in] treeName Name of the tree contained in the directory; 1576/// \param[in] filenameglob TDirectory where the tree is stored, e.g. a TFile.; 1577/// \param[in] defaul",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:89174,Availability,avail,available,89174,"td::string treeNameInt(treeName);; 1565 auto tree = static_cast<TTree *>(dirPtr->Get(treeNameInt.c_str()));; 1566 if (!tree) {; 1567 auto msg = ""Tree \"""" + treeNameInt + ""\"" cannot be found!"";; 1568 throw std::runtime_error(msg);; 1569 }; 1570 GetProxiedPtr()->SetTree(std::shared_ptr<TTree>(tree, [](TTree *) {}));; 1571}; 1572 ; 1573////////////////////////////////////////////////////////////////////////////; 1574/// \brief Build the dataframe.; 1575/// \param[in] treeName Name of the tree contained in the directory; 1576/// \param[in] filenameglob TDirectory where the tree is stored, e.g. a TFile.; 1577/// \param[in] defaultColumns Collection of default columns.; 1578///; 1579/// The filename glob supports the same type of expressions as TChain::Add(), and it is passed as-is to TChain's; 1580/// constructor.; 1581///; 1582/// The default columns are looked at in case no column is specified in the; 1583/// booking of actions or transformations.; 1584/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1585#ifdef R__HAS_ROOT7; 1586RDataFrame::RDataFrame(std::string_view treeName, std::string_view fileNameGlob, const ColumnNames_t &defaultColumns); 1587 : RInterface(ROOT::Detail::RDF::CreateLMFromFile(treeName, fileNameGlob, defaultColumns)); 1588{; 1589}; 1590#else; 1591RDataFrame::RDataFrame(std::string_view treeName, std::string_view fileNameGlob, const ColumnNames_t &defaultColumns); 1592 : RInterface(ROOT::Detail::RDF::CreateLMFromTTree(treeName, fileNameGlob, defaultColumns)); 1593{; 1594}; 1595#endif; 1596 ; 1597////////////////////////////////////////////////////////////////////////////; 1598/// \brief Build the dataframe.; 1599/// \param[in] treeName Name of the tree contained in the directory; 1600/// \param[in] fileglobs Collection of file names of filename globs; 1601/// \param[in] defaultColumns Collection of default columns.; 1602///; 1603/// The filename globs support the same type of expressions as TChain::Add(), and each glo",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:90396,Availability,avail,available,90396,"::RDF::CreateLMFromFile(treeName, fileNameGlob, defaultColumns)); 1588{; 1589}; 1590#else; 1591RDataFrame::RDataFrame(std::string_view treeName, std::string_view fileNameGlob, const ColumnNames_t &defaultColumns); 1592 : RInterface(ROOT::Detail::RDF::CreateLMFromTTree(treeName, fileNameGlob, defaultColumns)); 1593{; 1594}; 1595#endif; 1596 ; 1597////////////////////////////////////////////////////////////////////////////; 1598/// \brief Build the dataframe.; 1599/// \param[in] treeName Name of the tree contained in the directory; 1600/// \param[in] fileglobs Collection of file names of filename globs; 1601/// \param[in] defaultColumns Collection of default columns.; 1602///; 1603/// The filename globs support the same type of expressions as TChain::Add(), and each glob is passed as-is; 1604/// to TChain's constructor.; 1605///; 1606/// The default columns are looked at in case no column is specified in the booking of actions or transformations.; 1607/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1608#ifdef R__HAS_ROOT7; 1609RDataFrame::RDataFrame(std::string_view datasetName, const std::vector<std::string> &fileNameGlobs,; 1610 const ColumnNames_t &defaultColumns); 1611 : RInterface(ROOT::Detail::RDF::CreateLMFromFile(datasetName, fileNameGlobs, defaultColumns)); 1612{; 1613}; 1614#else; 1615RDataFrame::RDataFrame(std::string_view datasetName, const std::vector<std::string> &fileNameGlobs,; 1616 const ColumnNames_t &defaultColumns); 1617 : RInterface(ROOT::Detail::RDF::CreateLMFromTTree(datasetName, fileNameGlobs, defaultColumns)); 1618{; 1619}; 1620#endif; 1621 ; 1622////////////////////////////////////////////////////////////////////////////; 1623/// \brief Build the dataframe.; 1624/// \param[in] tree The tree or chain to be studied.; 1625/// \param[in] defaultColumns Collection of default column names to fall back to when none is specified.; 1626///; 1627/// The default columns are looked at in case no column is specified in the;",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:91485,Availability,avail,available,91485,"aFrame(std::string_view datasetName, const std::vector<std::string> &fileNameGlobs,; 1610 const ColumnNames_t &defaultColumns); 1611 : RInterface(ROOT::Detail::RDF::CreateLMFromFile(datasetName, fileNameGlobs, defaultColumns)); 1612{; 1613}; 1614#else; 1615RDataFrame::RDataFrame(std::string_view datasetName, const std::vector<std::string> &fileNameGlobs,; 1616 const ColumnNames_t &defaultColumns); 1617 : RInterface(ROOT::Detail::RDF::CreateLMFromTTree(datasetName, fileNameGlobs, defaultColumns)); 1618{; 1619}; 1620#endif; 1621 ; 1622////////////////////////////////////////////////////////////////////////////; 1623/// \brief Build the dataframe.; 1624/// \param[in] tree The tree or chain to be studied.; 1625/// \param[in] defaultColumns Collection of default column names to fall back to when none is specified.; 1626///; 1627/// The default columns are looked at in case no column is specified in the; 1628/// booking of actions or transformations.; 1629/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1630RDataFrame::RDataFrame(TTree &tree, const ColumnNames_t &defaultColumns); 1631 : RInterface(std::make_shared<RDFDetail::RLoopManager>(&tree, defaultColumns)); 1632{; 1633}; 1634 ; 1635//////////////////////////////////////////////////////////////////////////; 1636/// \brief Build a dataframe that generates numEntries entries.; 1637/// \param[in] numEntries The number of entries to generate.; 1638///; 1639/// An empty-source dataframe constructed with a number of entries will; 1640/// generate those entries on the fly when some action is triggered,; 1641/// and it will do so for all the previously-defined columns.; 1642/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1643RDataFrame::RDataFrame(ULong64_t numEntries); 1644 : RInterface(std::make_shared<RDFDetail::RLoopManager>(numEntries)); 1645 ; 1646{; 1647}; 1648 ; 1649//////////////////////////////////////////////////////////////////////////; 1650/// \brief",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:92195,Availability,avail,available,92195,"; 1625/// \param[in] defaultColumns Collection of default column names to fall back to when none is specified.; 1626///; 1627/// The default columns are looked at in case no column is specified in the; 1628/// booking of actions or transformations.; 1629/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1630RDataFrame::RDataFrame(TTree &tree, const ColumnNames_t &defaultColumns); 1631 : RInterface(std::make_shared<RDFDetail::RLoopManager>(&tree, defaultColumns)); 1632{; 1633}; 1634 ; 1635//////////////////////////////////////////////////////////////////////////; 1636/// \brief Build a dataframe that generates numEntries entries.; 1637/// \param[in] numEntries The number of entries to generate.; 1638///; 1639/// An empty-source dataframe constructed with a number of entries will; 1640/// generate those entries on the fly when some action is triggered,; 1641/// and it will do so for all the previously-defined columns.; 1642/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1643RDataFrame::RDataFrame(ULong64_t numEntries); 1644 : RInterface(std::make_shared<RDFDetail::RLoopManager>(numEntries)); 1645 ; 1646{; 1647}; 1648 ; 1649//////////////////////////////////////////////////////////////////////////; 1650/// \brief Build dataframe associated to data source.; 1651/// \param[in] ds The data source object.; 1652/// \param[in] defaultColumns Collection of default column names to fall back to when none is specified.; 1653///; 1654/// A dataframe associated to a data source will query it to access column values.; 1655/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1656RDataFrame::RDataFrame(std::unique_ptr<ROOT::RDF::RDataSource> ds, const ColumnNames_t &defaultColumns); 1657 : RInterface(std::make_shared<RDFDetail::RLoopManager>(std::move(ds), defaultColumns)); 1658{; 1659}; 1660 ; 1661//////////////////////////////////////////////////////////////////////////; 1662/// \brief Build dat",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:92824,Availability,avail,available,92824,"e that generates numEntries entries.; 1637/// \param[in] numEntries The number of entries to generate.; 1638///; 1639/// An empty-source dataframe constructed with a number of entries will; 1640/// generate those entries on the fly when some action is triggered,; 1641/// and it will do so for all the previously-defined columns.; 1642/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1643RDataFrame::RDataFrame(ULong64_t numEntries); 1644 : RInterface(std::make_shared<RDFDetail::RLoopManager>(numEntries)); 1645 ; 1646{; 1647}; 1648 ; 1649//////////////////////////////////////////////////////////////////////////; 1650/// \brief Build dataframe associated to data source.; 1651/// \param[in] ds The data source object.; 1652/// \param[in] defaultColumns Collection of default column names to fall back to when none is specified.; 1653///; 1654/// A dataframe associated to a data source will query it to access column values.; 1655/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1656RDataFrame::RDataFrame(std::unique_ptr<ROOT::RDF::RDataSource> ds, const ColumnNames_t &defaultColumns); 1657 : RInterface(std::make_shared<RDFDetail::RLoopManager>(std::move(ds), defaultColumns)); 1658{; 1659}; 1660 ; 1661//////////////////////////////////////////////////////////////////////////; 1662/// \brief Build dataframe from an RDatasetSpec object.; 1663/// \param[in] spec The dataset specification object.; 1664///; 1665/// A dataset specification includes trees and file names,; 1666/// as well as an optional friend list and/or entry range.; 1667///; 1668/// ### Example usage from Python:; 1669/// ~~~{.py}; 1670/// spec = (; 1671/// ROOT.RDF.Experimental.RDatasetSpec(); 1672/// .AddSample((""data"", ""tree"", ""file.root"")); 1673/// .WithGlobalFriends(""friendTree"", ""friend.root"", ""alias""); 1674/// .WithGlobalRange((100, 200)); 1675/// ); 1676/// df = ROOT.RDataFrame(spec); 1677/// ~~~; 1678///; 1679/// See also ROOT::RDataFrame::FromSp",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:4419,Deployability,toggle,toggleInherit,4419,"callbacks); 76 - [Default column lists](\ref default-branches); 77 - [Special helper columns: `rdfentry_` and `rdfslot_`](\ref helper-cols); 78 - [Just-in-time compilation: column type inference and explicit declaration of column types](\ref jitting); 79 - [User-defined custom actions](\ref generic-actions); 80 - [Dataset joins with friend trees](\ref friends); 81 - [Reading data formats other than ROOT trees](\ref other-file-formats); 82 - [Computation graphs (storing and reusing sets of transformations)](\ref callgraphs); 83 - [Visualizing the computation graph](\ref representgraph); 84 - [Activating RDataFrame execution logs](\ref rdf-logging); 85 - [Creating an RDataFrame from a dataset specification file](\ref rdf-from-spec); 86 - [Adding a progress bar](\ref progressbar); 87- [Efficient analysis in Python](\ref python); 88- <a class=""el"" href=""classROOT_1_1RDataFrame.html#reference"" onclick=""javascript:toggleInherit('pub_methods_classROOT_1_1RDF_1_1RInterface')"">Class reference</a>; 89 ; 90\anchor cheatsheet; 91## Cheat sheet; 92These are the operations which can be performed with RDataFrame.; 93 ; 94### Transformations; 95Transformations are a way to manipulate the data.; 96 ; 97| **Transformation** | **Description** |; 98|------------------|--------------------|; 99| Alias() | Introduce an alias for a particular column name. |; 100| Define() | Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the `pt`s of ""good"" muons). |; 101| DefinePerSample() | Define a new column that is updated when the input sample changes, e.g. when switching tree being processed in a chain. |; 102| DefineSlot() | Same as Define(), but the user-defined function must take an extra `unsigned int slot` as its first parameter. `slot` will take a different value, `0` to `nThreads - 1`, for each thread of execution. This is meant as a helper in writing thread-safe Define",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:5128,Deployability,update,updated,5128,"ecution logs](\ref rdf-logging); 85 - [Creating an RDataFrame from a dataset specification file](\ref rdf-from-spec); 86 - [Adding a progress bar](\ref progressbar); 87- [Efficient analysis in Python](\ref python); 88- <a class=""el"" href=""classROOT_1_1RDataFrame.html#reference"" onclick=""javascript:toggleInherit('pub_methods_classROOT_1_1RDF_1_1RInterface')"">Class reference</a>; 89 ; 90\anchor cheatsheet; 91## Cheat sheet; 92These are the operations which can be performed with RDataFrame.; 93 ; 94### Transformations; 95Transformations are a way to manipulate the data.; 96 ; 97| **Transformation** | **Description** |; 98|------------------|--------------------|; 99| Alias() | Introduce an alias for a particular column name. |; 100| Define() | Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the `pt`s of ""good"" muons). |; 101| DefinePerSample() | Define a new column that is updated when the input sample changes, e.g. when switching tree being processed in a chain. |; 102| DefineSlot() | Same as Define(), but the user-defined function must take an extra `unsigned int slot` as its first parameter. `slot` will take a different value, `0` to `nThreads - 1`, for each thread of execution. This is meant as a helper in writing thread-safe Define() transformation when using RDataFrame after ROOT::EnableImplicitMT(). DefineSlot() works just as well with single-thread execution: in that case `slot` will always be `0`. |; 103| DefineSlotEntry() | Same as DefineSlot(), but the entry number is passed in addition to the slot number. This is meant as a helper in case the expression depends on the entry number. For details about entry numbers in multi-threaded runs, see [here](\ref helper-cols). |; 104| Filter() | Filter rows based on user-defined conditions. |; 105| Range() | Filter rows based on entry number (single-thread only). |; 106| Redefine() | Overwrite t",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:40650,Deployability,configurat,configuration,40650,"ne; 675- Snapshot; 676- Stats; 677- StdDev; 678- Sum; 679- Systematic variations: Vary and [VariationsFor](\ref ROOT::RDF::Experimental::VariationsFor).; 680- Parallel submission of distributed graphs: [RunGraphs](\ref ROOT::RDF::RunGraphs).; 681- Information about the dataframe: GetColumnNames.; 682 ; 683with support for more operations coming in the future. Data sources other than TTree and TChain (e.g. CSV, RNTuple) are; 684currently not supported.; 685 ; 686\note The distributed RDataFrame module requires at least Python version 3.8.; 687 ; 688### Connecting to a Spark cluster; 689 ; 690In order to distribute the RDataFrame workload, you can connect to a Spark cluster you have access to through the; 691official [Spark API](https://spark.apache.org/docs/latest/rdd-programming-guide.html#initializing-spark), then hook the; 692connection instance to the distributed `RDataFrame` object like so:; 693 ; 694~~~{.py}; 695import pyspark; 696import ROOT; 697 ; 698# Create a SparkContext object with the right configuration for your Spark cluster; 699conf = SparkConf().setAppName(appName).setMaster(master); 700sc = SparkContext(conf=conf); 701 ; 702# Point RDataFrame calls to the Spark specific RDataFrame; 703RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; 704 ; 705# The Spark RDataFrame constructor accepts an optional ""sparkcontext"" parameter; 706# and it will distribute the application to the connected cluster; 707df = RDataFrame(""mytree"", ""myfile.root"", sparkcontext = sc); 708~~~; 709 ; 710If an instance of [SparkContext](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.SparkContext.html); 711is not provided, the default behaviour is to create one in the background for you.; 712 ; 713### Connecting to a Dask cluster; 714 ; 715Similarly, you can connect to a Dask cluster by creating your own connection object which internally operates with one; 716of the cluster schedulers supported by Dask (more information in the; 717[Dask distribute",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:48081,Deployability,continuous,continuously,48081,"e; 819 ; 820if __name__ == ""__main__"":; 821 df = RDataFrame(""mytree"",""myfile.root"").Define(""x"",""someoperation""); 822 # The model can be passed either as a tuple with the arguments in the correct order; 823 df.Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 824 # Or by creating the specific struct; 825 model = ROOT.RDF.TH1DModel(""name"", ""title"", 10, 0, 10); 826 df.Histo1D(model, ""x""); 827~~~; 828 ; 829Without this, two partial histograms resulting from two distributed tasks would have incompatible binning, thus leading; 830to errors when merging them. Failing to pass a histogram model will raise an error on the client side, before starting; 831the distributed execution.; 832 ; 833### Live visualization in distributed mode with dask; 834 ; 835The live visualization feature allows real-time data representation of plots generated during the execution ; 836of a distributed RDataFrame application. ; 837It enables visualizing intermediate results as they are computed across multiple nodes of a Dask cluster; 838by creating a canvas and continuously updating it as partial results become available. ; 839 ; 840The LiveVisualize() function can be imported from the Python package **ROOT.RDF.Experimental.Distributed**:; 841 ; 842~~~{.py}; 843import ROOT; 844 ; 845LiveVisualize = ROOT.RDF.Experimental.Distributed.LiveVisualize; 846~~~; 847 ; 848The function takes drawable objects (e.g. histograms) and optional callback functions as argument, it accepts 4 different input formats:; 849 ; 850- Passing a list or tuple of drawables: ; 851You can pass a list or tuple containing the plots you want to visualize. For example:; 852 ; 853~~~{.py}; 854LiveVisualize([h_gaus, h_exp, h_random]); 855~~~; 856 ; 857- Passing a list or tuple of drawables with a global callback function: ; 858You can also include a global callback function that will be applied to all plots. For example:; 859 ; 860~~~{.py}; 861def set_fill_color(hist):; 862 hist.SetFillColor(ROOT.kBlue); 863 ; 864LiveVisualize([h_gaus, h_e",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:56989,Deployability,release,released,56989," not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See [Activating RDataFrame execution logs](\ref rdf-logging).; 966 ; 967### Memory usage; 968 ; 969There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; 970 ; 971Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create many RDataFrames one after the other. Possible mitigations include creating and running each RDataFrame event loop in a sub-process, or booking all operations for all different RDataFrame computation graphs before the first event loop is triggered, so that the interpreter is invoked only once for all computation graphs:; 972 ; 973~~~{.cpp}; 974// assuming df1 and df2 are separate computation graphs, do:; 975auto h1 = df1.Histo1D(""x"");; 976auto h2 = df2.Histo1D(""y"");; 977h1->Draw(); // we just-in-time compile everything needed by df1 and df2 here; 978h2->Draw(""SAME"");; 979 ; 980// do not:; 981auto h1 = df1.Histo1D(""x"");; 982h1->Draw(); // we just-in-time compile here; 983auto h2 = df2.Histo1D(""y"");; 984h2->Draw(""SAME""); // we just-in-time compile again here, as the second His",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:63655,Deployability,release,releases,63655,"eta*0.9f, eta*1.1f}; },; 1067 {""eta""},; 1068 2);; 1069 ; 1070auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; 1071auto all_hs = VariationsFor(nom_h);; 1072all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; 1073~~~; 1074 ; 1075Note how we passed the integer `2` instead of a list of variation tags to the second Vary() invocation: this is a; 1076shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; 1077 ; 1078\note Currently, VariationsFor() and RResultMap are in the `ROOT::RDF::Experimental` namespace, to indicate that these; 1079 interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related; 1080 programming model will be streamlined in future versions.; 1081 ; 1082\note Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to; 1083 call \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" on them. These limitations will be lifted in future releases.; 1084 ; 1085See the Vary() method for more information and [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) ; 1086for an example usage of Vary and \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" in the analysis.; 1087 ; 1088\anchor rnode; 1089### RDataFrame objects as function arguments and return values; 1090RDataFrame variables/nodes are relatively cheap to copy and it's possible to both pass them to (or move them into); 1091functions and to return them from functions. However, in general each dataframe node will have a different C++ type,; 1092which includes all available compile-time information about what that node does. One way to cope with this complication; 1093is to use template functions and/or C++14 auto return types:; 1094~~~{.cpp}; 1095template <typename RDF>; 1096auto ApplySomeFilters(RDF df); 1097{; 1098 return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; 1099}; 1100~~~; 1101 ; 110",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:34350,Energy Efficiency,efficient,efficient,34350,"first 10 entries *that pass the; 543preceding filter*.; 544 ; 545Ranges allow ""early quitting"": if all branches of execution of a functional graph reached their `end` value of; 546processed entries, the event-loop is immediately interrupted. This is useful for debugging and quick data explorations.; 547 ; 548\anchor custom-columns; 549### Custom columns; 550Custom columns are created by invoking `Define(name, f, columnList)`. As usual, `f` can be any callable object; 551(function, lambda expression, functor class...); it takes the values of the columns listed in `columnList` (a list of; 552strings) as parameters, in the same order as they are listed in `columnList`. `f` must return the value that will be; 553assigned to the temporary column.; 554 ; 555A new variable is created called `name`, accessible as if it was contained in the dataset from subsequent; 556transformations/actions.; 557 ; 558Use cases include:; 559- caching the results of complex calculations for easy and efficient multiple access; 560- extraction of quantities of interest from complex objects; 561- branch aliasing, i.e. changing the name of a branch; 562 ; 563An exception is thrown if the `name` of the new column/branch is already in use for another branch in the TTree.; 564 ; 565It is also possible to specify the quantity to be stored in the new temporary column as a C++ expression with the method; 566`Define(name, expression)`. For example this invocation; 567 ; 568~~~{.cpp}; 569df.Define(""pt"", ""sqrt(px*px + py*py)"");; 570~~~; 571 ; 572will create a new column called ""pt"" the value of which is calculated starting from the columns px and py. The system; 573builds a just-in-time compiled function starting from the expression after having deduced the list of necessary branches; 574from the names of the variables specified by the user.; 575 ; 576#### Custom columns as function of slot and entry number; 577 ; 578It is possible to create custom columns also as a function of the processing slot and en",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:41559,Energy Efficiency,schedul,schedulers,41559,"DataFrame` object like so:; 693 ; 694~~~{.py}; 695import pyspark; 696import ROOT; 697 ; 698# Create a SparkContext object with the right configuration for your Spark cluster; 699conf = SparkConf().setAppName(appName).setMaster(master); 700sc = SparkContext(conf=conf); 701 ; 702# Point RDataFrame calls to the Spark specific RDataFrame; 703RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; 704 ; 705# The Spark RDataFrame constructor accepts an optional ""sparkcontext"" parameter; 706# and it will distribute the application to the connected cluster; 707df = RDataFrame(""mytree"", ""myfile.root"", sparkcontext = sc); 708~~~; 709 ; 710If an instance of [SparkContext](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.SparkContext.html); 711is not provided, the default behaviour is to create one in the background for you.; 712 ; 713### Connecting to a Dask cluster; 714 ; 715Similarly, you can connect to a Dask cluster by creating your own connection object which internally operates with one; 716of the cluster schedulers supported by Dask (more information in the; 717[Dask distributed docs](http://distributed.dask.org/en/stable/)):; 718 ; 719~~~{.py}; 720import ROOT; 721from dask.distributed import Client; 722 ; 723# Point RDataFrame calls to the Dask specific RDataFrame; 724RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; 725 ; 726# In a Python script the Dask client needs to be initalized in a context; 727# Jupyter notebooks / Python session don't need this; 728if __name__ == ""__main__"":; 729 # With an already setup cluster that exposes a Dask scheduler endpoint; 730 client = Client(""dask_scheduler.domain.com:8786""); 731 ; 732 # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; 733 df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); 734 # Proceed as usual; 735 df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 736~~~; 737 ; 738If an instance of [distributed.Clie",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:42120,Energy Efficiency,schedul,scheduler,42120,"tribute the application to the connected cluster; 707df = RDataFrame(""mytree"", ""myfile.root"", sparkcontext = sc); 708~~~; 709 ; 710If an instance of [SparkContext](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.SparkContext.html); 711is not provided, the default behaviour is to create one in the background for you.; 712 ; 713### Connecting to a Dask cluster; 714 ; 715Similarly, you can connect to a Dask cluster by creating your own connection object which internally operates with one; 716of the cluster schedulers supported by Dask (more information in the; 717[Dask distributed docs](http://distributed.dask.org/en/stable/)):; 718 ; 719~~~{.py}; 720import ROOT; 721from dask.distributed import Client; 722 ; 723# Point RDataFrame calls to the Dask specific RDataFrame; 724RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; 725 ; 726# In a Python script the Dask client needs to be initalized in a context; 727# Jupyter notebooks / Python session don't need this; 728if __name__ == ""__main__"":; 729 # With an already setup cluster that exposes a Dask scheduler endpoint; 730 client = Client(""dask_scheduler.domain.com:8786""); 731 ; 732 # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; 733 df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); 734 # Proceed as usual; 735 df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 736~~~; 737 ; 738If an instance of [distributed.Client](http://distributed.dask.org/en/stable/api.html#distributed.Client) is not; 739provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine; 740using all cores available.; 741 ; 742### Choosing the number of distributed tasks; 743 ; 744A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending; 745tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:51394,Energy Efficiency,allocate,allocated,51394,"vantage of a pool of worker threads. **Each worker thread processes a distinct; 899subset of entries**, and their partial results are merged before returning the final values to the user.; 900There are no guarantees on the order in which threads will process the batches of entries.; 901In particular, note that this means that, for multi-thread event loops, there is no; 902guarantee on the order in which Snapshot() will _write_ entries: they could be scrambled with respect to the input dataset. The values of the special `rdfentry_` column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; 903 ; 904\warning By default, RDataFrame will use as many threads as the hardware supports, using up **all** the resources on; 905a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use; 906~~~{.cpp}; 907ROOT::EnableImplicitMT(i); 908~~~; 909replacing `i` with the number of CPUs/slots that were allocated for this job.; 910 ; 911### Thread-safety of user-defined expressions; 912RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops.; 913User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate(); 914will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; 915 ; 916Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define(); 917expressions will often be *pure* in the functional programming sense (no side-effects, no dependency on external state),; 918which eliminates all risks of race conditions.; 919 ; 920In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or \link ROOT::RDF::RResultPtr::OnPartialResult OnPartialResult()\endlink; 921offer thread-aware counterp",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:55479,Energy Efficiency,reduce,reduce,55479,"um performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible.; 955For instance, `Filter(""x > 0"")` requires just-in-time compilation of the corresponding C++ logic, while the equivalent `Filter([](float x) { return x > 0.; }, {""x""})` does not.; 956Similarly, `Histo1D(""x"")` requires just-in-time compilation after the type of `x` is retrieved from the dataset, while `Histo1D<float>(""x"")` does not; the latter spelling; 957should be preferred for performance-critical applications.; 958 ; 959Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame.; 960See [Efficient analysis in Python](#python) for possible ways to speed up hot paths in this case.; 961 ; 962Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations *for all RDataFrame computation graphs*; 963before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; 964 ; 965Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See [Activating RDataFrame execution logs](\ref rdf-logging).; 966 ; 967### Memory usage; 968 ; 969There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of th",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:56561,Energy Efficiency,consumption,consumption,56561," to book all operations *for all RDataFrame computation graphs*; 963before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; 964 ; 965Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See [Activating RDataFrame execution logs](\ref rdf-logging).; 966 ; 967### Memory usage; 968 ; 969There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; 970 ; 971Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create many RDataFrames one after the other. Possible mitigations include creating and running each RDataFrame event loop in a sub-process, or booking all operations for all different RDataFrame computation graphs before the first event loop is triggered, so that the interpreter is invoked only once for all computation graphs:; 972 ; 973~~~{.cpp}; 974// assuming df1 and df2 are separate computation graphs, do:; 975a",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:56745,Energy Efficiency,reduce,reduce,56745," point, also across different computation graphs.; 964 ; 965Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See [Activating RDataFrame execution logs](\ref rdf-logging).; 966 ; 967### Memory usage; 968 ; 969There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; 970 ; 971Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create many RDataFrames one after the other. Possible mitigations include creating and running each RDataFrame event loop in a sub-process, or booking all operations for all different RDataFrame computation graphs before the first event loop is triggered, so that the interpreter is invoked only once for all computation graphs:; 972 ; 973~~~{.cpp}; 974// assuming df1 and df2 are separate computation graphs, do:; 975auto h1 = df1.Histo1D(""x"");; 976auto h2 = df2.Histo1D(""y"");; 977h1->Draw(); // we just-in-time compile everything needed by df1 and df2 here; 978h2->Draw(""SAME"");; 979 ; 980// do not:; 981auto h1 = df1",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:56932,Energy Efficiency,allocate,allocate,56932," not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See [Activating RDataFrame execution logs](\ref rdf-logging).; 966 ; 967### Memory usage; 968 ; 969There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; 970 ; 971Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create many RDataFrames one after the other. Possible mitigations include creating and running each RDataFrame event loop in a sub-process, or booking all operations for all different RDataFrame computation graphs before the first event loop is triggered, so that the interpreter is invoked only once for all computation graphs:; 972 ; 973~~~{.cpp}; 974// assuming df1 and df2 are separate computation graphs, do:; 975auto h1 = df1.Histo1D(""x"");; 976auto h2 = df2.Histo1D(""y"");; 977h1->Draw(); // we just-in-time compile everything needed by df1 and df2 here; 978h2->Draw(""SAME"");; 979 ; 980// do not:; 981auto h1 = df1.Histo1D(""x"");; 982h1->Draw(); // we just-in-time compile here; 983auto h2 = df2.Histo1D(""y"");; 984h2->Draw(""SAME""); // we just-in-time compile again here, as the second His",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:65953,Energy Efficiency,schedul,schedule,65953,"RNode MaybeAddRange(RNode df, bool mustAddRange); 1107{; 1108 return mustAddRange ? df.Range(1) : df;; 1109}; 1110// use as :; 1111ROOT::RDataFrame df(10);; 1112auto maybeRangedDF = MaybeAddRange(df, true);; 1113~~~; 1114 ; 1115The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event; 1116loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function `ROOT.RDF.AsRNode`.; 1117 ; 1118\anchor RDFCollections; 1119### Storing RDataFrame objects in collections; 1120 ; 1121ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a `std::vector<RNode>` or a `std::map<std::string, RNode>`:; 1122 ; 1123~~~{.cpp}; 1124std::vector<ROOT::RDF::RNode> dfs;; 1125dfs.emplace_back(ROOT::RDataFrame(10));; 1126dfs.emplace_back(dfs[0].Define(""x"", ""42.f""));; 1127~~~; 1128 ; 1129\anchor callbacks; 1130### Executing callbacks every N events; 1131It's possible to schedule execution of arbitrary functions (callbacks) during the event loop.; 1132Callbacks can be used e.g. to inspect partial results of the analysis while the event loop is running,; 1133drawing a partially-filled histogram every time a certain number of new entries is processed, or; 1134displaying a progress bar while the event loop runs.; 1135 ; 1136For example one can draw an up-to-date version of a result histogram every 100 entries like this:; 1137~~~{.cpp}; 1138auto h = df.Histo1D(""x"");; 1139TCanvas c(""c"",""x hist"");; 1140h.OnPartialResult(100, [&c](TH1D &h_) { c.cd(); h_.Draw(); c.Update(); });; 1141// event loop runs here, this final `Draw` is executed after the event loop is finished; 1142h->Draw();; 1143~~~; 1144 ; 1145Callbacks are registered to a ROOT::RDF::RResultPtr and must be callables that takes a reference to the result type as argument; 1146and return nothing. RDataFrame will invoke registered callbacks passing partial action results as arguments t",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:1442,Integrability,interface,interface,1442,"*******; 4 * Copyright (C) 1995-2018, Rene Brun and Fons Rademakers. *; 5 * All rights reserved. *; 6 * *; 7 * For the licensing terms see $ROOTSYS/LICENSE. *; 8 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 9 *************************************************************************/; 10 ; 11#include ""ROOT/InternalTreeUtils.hxx""; 12#include ""ROOT/RDataFrame.hxx""; 13#include ""ROOT/RDataSource.hxx""; 14#include ""ROOT/RDF/RDatasetSpec.hxx""; 15#include ""ROOT/RDF/RInterface.hxx""; 16#include ""ROOT/RDF/RLoopManager.hxx""; 17#include ""ROOT/RDF/Utils.hxx""; 18#include <string_view>; 19#include ""TChain.h""; 20#include ""TDirectory.h""; 21#include ""RtypesCore.h"" // for ULong64_t; 22#include ""TTree.h""; 23 ; 24#include <fstream> // std::ifstream; 25#include <nlohmann/json.hpp> // nlohmann::json::parse; 26#include <memory> // for make_shared, allocator, shared_ptr; 27#include <ostream> // ostringstream; 28#include <stdexcept>; 29#include <string>; 30#include <vector>; 31 ; 32// clang-format off; 33/**; 34* \class ROOT::RDataFrame; 35* \ingroup dataframe; 36* \brief ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python.; 37 ; 38In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available; 39on their machines completely transparently.<br>; 40Skip to the [class reference](#reference) or keep reading for the user guide.; 41 ; 42In a nutshell:; 43~~~{.cpp}; 44ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; 45ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; 46auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; 47myHisto->Draw(); // Event loop is run here, upon first access to a result; 48~~~; 49 ; 50Calculations are expressed in terms of a type-safe *functional chain of actions and transformations*, RDataFrame takes; 51care of their execution. The implementat",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:5834,Integrability,depend,depends,5834,"or a particular column name. |; 100| Define() | Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the `pt`s of ""good"" muons). |; 101| DefinePerSample() | Define a new column that is updated when the input sample changes, e.g. when switching tree being processed in a chain. |; 102| DefineSlot() | Same as Define(), but the user-defined function must take an extra `unsigned int slot` as its first parameter. `slot` will take a different value, `0` to `nThreads - 1`, for each thread of execution. This is meant as a helper in writing thread-safe Define() transformation when using RDataFrame after ROOT::EnableImplicitMT(). DefineSlot() works just as well with single-thread execution: in that case `slot` will always be `0`. |; 103| DefineSlotEntry() | Same as DefineSlot(), but the entry number is passed in addition to the slot number. This is meant as a helper in case the expression depends on the entry number. For details about entry numbers in multi-threaded runs, see [here](\ref helper-cols). |; 104| Filter() | Filter rows based on user-defined conditions. |; 105| Range() | Filter rows based on entry number (single-thread only). |; 106| Redefine() | Overwrite the value and/or type of an existing column. See Define() for more information. |; 107| RedefineSlot() | Overwrite the value and/or type of an existing column. See DefineSlot() for more information. |; 108| RedefineSlotEntry() | Overwrite the value and/or type of an existing column. See DefineSlotEntry() for more information. |; 109| Vary() | Register systematic variations for an existing column. Varied results are then extracted via VariationsFor(). |; 110 ; 111 ; 112### Actions; 113Actions aggregate data into a result. Each one is described in more detail in the reference guide.; 114 ; 115In the following, whenever we say an action ""returns"" something, we always mean it returns a smart pointer",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:19848,Integrability,wrap,wrapped,19848,"ctions (see e.g. FromCSV(), FromSqlite(), FromArrow()):; 312 ; 313~~~{.cpp}; 314auto df = ROOT::RDF::FromCSV(""input.csv"");; 315// use df as usual; 316~~~; 317 ; 318### Filling a histogram; 319Let's now tackle a very common task, filling a histogram:; 320~~~{.cpp}; 321// Fill a TH1D with the ""MET"" branch; 322RDataFrame d(""myTree"", ""file.root"");; 323auto h = d.Histo1D(""MET"");; 324h->Draw();; 325~~~; 326The first line creates an RDataFrame associated to the TTree ""myTree"". This tree has a branch named ""MET"".; 327 ; 328Histo1D() is an *action*; it returns a smart pointer (a ROOT::RDF::RResultPtr, to be precise) to a TH1D histogram filled; 329with the `MET` of all events. If the quantity stored in the column is a collection (e.g. a vector or an array), the; 330histogram is filled with all vector elements for each event.; 331 ; 332You can use the objects returned by actions as if they were pointers to the desired results. There are many other; 333possible [actions](\ref cheatsheet), and all their results are wrapped in smart pointers; we'll see why in a minute.; 334 ; 335### Applying a filter; 336Let's say we want to cut over the value of branch ""MET"" and count how many events pass this cut. This is one way to do it:; 337~~~{.cpp}; 338RDataFrame d(""myTree"", ""file.root"");; 339auto c = d.Filter(""MET > 4."").Count(); // computations booked, not run; 340std::cout << *c << std::endl; // computations run here, upon first access to the result; 341~~~; 342The filter string (which must contain a valid C++ expression) is applied to the specified columns for each event;; 343the name and types of the columns are inferred automatically. The string expression is required to return a `bool`; 344which signals whether the event passes the filter (`true`) or not (`false`).; 345 ; 346You can think of your data as ""flowing"" through the chain of calls, being transformed, filtered and finally used to; 347perform actions. Multiple Filter() calls can be chained one after another.; 348 ; 349Using ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:29055,Integrability,interface,interface,29055,"once and produce all results in one go.; 461 ; 462### Going parallel; 463Let's say we would like to run the previous examples in parallel on several cores, dividing events fairly between cores.; 464The only modification required to the snippets would be the addition of this line *before* constructing the main; 465dataframe object:; 466~~~{.cpp}; 467ROOT::EnableImplicitMT();; 468~~~; 469Simple as that. More details are given [below](#parallel-execution).; 470 ; 471\anchor collections; 472## Working with collections and object selections; 473 ; 474RDataFrame reads collections as the special type [ROOT::RVec](https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html): for example, a column containing an array of floating point numbers can be read as a ROOT::RVecF. C-style arrays (with variable or static size), STL vectors and most other collection types can be read this way.; 475 ; 476RVec is a container similar to std::vector (and can be used just like a std::vector) but it also offers a rich interface to operate on the array elements in a vectorised fashion, similarly to Python's NumPy arrays.; 477 ; 478For example, to fill a histogram with the ""pt"" of selected particles for each event, Define() can be used to create a column that contains the desired array elements as follows:; 479 ; 480~~~{.cpp}; 481// h is filled with all the elements of `good_pts`, for each event; 482auto h = df.Define(""good_pts"", [](const ROOT::RVecF &pt) { return pt[pt > 0]; }); 483 .Histo1D(""good_pts"");; 484~~~; 485 ; 486And in Python:; 487 ; 488~~~{.py}; 489h = df.Define(""good_pts"", ""pt[pt > 0]"").Histo1D(""good_pts""); 490~~~; 491 ; 492Learn more at ROOT::VecOps::RVec.; 493 ; 494\anchor transformations; 495## Transformations: manipulating data; 496\anchor Filters; 497### Filters; 498A filter is created through a call to `Filter(f, columnList)` or `Filter(filterString)`. In the first overload, `f` can; 499be a function, a lambda expression, a functor class, or any other callable object. It mu",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:31075,Integrability,depend,depend,31075,"e`) or not (`false`). It should perform ""read-only"" operations on the; 501columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness; 502when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column; 503names are used as variable names (e.g. `Filter(""x[0] + x[1] > 0"")`). This is a convenience feature that comes with a; 504certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event; 505loop. See the paragraph about ""Just-in-time compilation"" below for more information.; 506 ; 507RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed; 508in order and the first one returning `false` causes the event to be discarded and triggers the processing of the next; 509entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for; 510each entry: after the first access it simply serves a cached result.; 511 ; 512\anchor named-filters-and-cutflow-reports; 513#### Named filters and cutflow reports; 514An optional string parameter `name` can be passed to the Filter() method to create a **named filter**. Named filters; 515work as usual, but also keep track of how many entries they accept and reject.; 516 ; 517Statistics are retrieved through a call to the Report() method:; 518 ; 519- when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all; 520named filters declared up to that point; 521- when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport>; 522relative all named filters in the section of the chain between the main RDataFrame and that node (included).; 523 ; 524Stats are stored in the same order as named filters have been added to the graph, and *refer to the",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:36786,Integrability,wrap,wrapping,36786,".)`: the first parameter is the slot number while the second one the number of the entry being processed.; 584 ; 585\anchor actions; 586## Actions: getting results; 587### Instant and lazy actions; 588Actions can be **instant** or **lazy**. Instant actions are executed as soon as they are called, while lazy actions are; 589executed whenever the object they return is accessed for the first time. As a rule of thumb, actions with a return value; 590are lazy, the others are instant.; 591 ; 592### Return type of a lazy action; 593 ; 594When a lazy action is called, it returns a \link ROOT::RDF::RResultPtr ROOT::RDF::RResultPtr<T>\endlink, where T is the; 595type of the result of the action. The final result will be stored in the `RResultPtr` and can be retrieved by; 596dereferencing it or via its `GetValue` method.; 597 ; 598### Actions that return collections; 599 ; 600If the type of the return value of an action is a collection, e.g. `std::vector<int>`, you can iterate its elements; 601directly through the wrapping `RResultPtr`:; 602 ; 603~~~{.cpp}; 604ROOT::RDataFrame df{5};; 605auto df1 = df.Define(""x"", []{ return 42; });; 606for (const auto &el: df1.Take<int>(""x"")){; 607 std::cout << ""Element: "" << el << ""\n"";; 608}; 609~~~; 610 ; 611~~~{.py}; 612df = ROOT.RDataFrame(5).Define(""x"", ""42""); 613for el in df.Take[int](""x""):; 614 print(f""Element: {el}""); 615~~~; 616 ; 617### Actions and readers; 618 ; 619An action that needs values for its computations will request it from a reader, e.g. a column created via `Define` or; 620available from the input dataset. The action will request values from each column of the list of input columns (either; 621inferred or specified by the user), in order. For example:; 622 ; 623~~~{.cpp}; 624ROOT::RDataFrame df{1};; 625auto df1 = df.Define(""x"", []{ return 11; });; 626auto df2 = df1.Define(""y"", []{ return 22; });; 627auto graph = df2.Graph<int, int>(""x"",""y"");; 628~~~; 629 ; 630The `Graph` action is going to request first the value from co",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:43037,Integrability,depend,dependent,43037,"setup cluster that exposes a Dask scheduler endpoint; 730 client = Client(""dask_scheduler.domain.com:8786""); 731 ; 732 # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; 733 df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); 734 # Proceed as usual; 735 df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 736~~~; 737 ; 738If an instance of [distributed.Client](http://distributed.dask.org/en/stable/api.html#distributed.Client) is not; 739provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine; 740using all cores available.; 741 ; 742### Choosing the number of distributed tasks; 743 ; 744A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending; 745tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but; 746generically tries to infer how many cores are available in the cluster through the connection object. The number of; 747tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend; 748doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to; 749a batch system. The client object created at the beginning of the application does not automatically know how many cores; 750will be available during distributed execution, since the jobs are submitted to the batch system after the creation of; 751the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks.; 752 ; 753The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional; 754keyword argument `npartitions` when creating the RDataFrame object. This parameter is accepted irrespectively of the; 755backend used:; 756 ; 757~~~{.py}; 758import ROOT; 759 ; 760# Define ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:52047,Integrability,depend,dependency,52047,"in) in multi-thread runs.; 903 ; 904\warning By default, RDataFrame will use as many threads as the hardware supports, using up **all** the resources on; 905a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use; 906~~~{.cpp}; 907ROOT::EnableImplicitMT(i); 908~~~; 909replacing `i` with the number of CPUs/slots that were allocated for this job.; 910 ; 911### Thread-safety of user-defined expressions; 912RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops.; 913User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate(); 914will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; 915 ; 916Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define(); 917expressions will often be *pure* in the functional programming sense (no side-effects, no dependency on external state),; 918which eliminates all risks of race conditions.; 919 ; 920In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or \link ROOT::RDF::RResultPtr::OnPartialResult OnPartialResult()\endlink; 921offer thread-aware counterparts (ForeachSlot(), DefineSlot(), \link ROOT::RDF::RResultPtr::OnPartialResultSlot OnPartialResultSlot()\endlink): their only difference is that they; 922will pass an extra `slot` argument (an unsigned integer) to the user-defined expression. When calling user-defined code; 923concurrently, RDataFrame guarantees that different threads will employ different values of the `slot` parameter,; 924where `slot` will be a number between 0 and `GetNSlots() - 1`.; 925In other words, within a slot, computation runs sequentially and events are processed sequentially.; 926Note that the same slot might be associated to differen",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:55903,Integrability,depend,depend,55903,"loat x) { return x > 0.; }, {""x""})` does not.; 956Similarly, `Histo1D(""x"")` requires just-in-time compilation after the type of `x` is retrieved from the dataset, while `Histo1D<float>(""x"")` does not; the latter spelling; 957should be preferred for performance-critical applications.; 958 ; 959Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame.; 960See [Efficient analysis in Python](#python) for possible ways to speed up hot paths in this case.; 961 ; 962Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations *for all RDataFrame computation graphs*; 963before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; 964 ; 965Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See [Activating RDataFrame execution logs](\ref rdf-logging).; 966 ; 967### Memory usage; 968 ; 969There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; 970 ; 971Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) cause",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:58834,Integrability,depend,dependencies,58834,"h1->Draw(); // we just-in-time compile here; 983auto h2 = df2.Histo1D(""y"");; 984h2->Draw(""SAME""); // we just-in-time compile again here, as the second Histo1D call is new; 985~~~; 986 ; 987\anchor more-features; 988## More features; 989Here is a list of the most important features that have been omitted in the ""Crash course"" for brevity.; 990You don't need to read all these to start using RDataFrame, but they are useful to save typing time and runtime.; 991 ; 992\anchor systematics; 993### Systematic variations; 994 ; 995Starting from ROOT v6.26, RDataFrame provides a flexible syntax to define systematic variations.; 996This is done in two steps: a) register variations for one or more existing columns using Vary() and b) extract variations; 997of normal RDataFrame results using \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"". In between these steps, no other change; 998to the analysis code is required: the presence of systematic variations for certain columns is automatically propagated; 999through filters, defines and actions, and RDataFrame will take these dependencies into account when producing varied; 1000results. \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" is included in header `ROOT/RDFHelpers.hxx`. The compiled C++ programs must include this header; 1001explicitly, this is not required for ROOT macros. ; 1002 ; 1003An example usage of Vary() and \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" in C++:; 1004 ; 1005~~~{.cpp}; 1006auto nominal_hx =; 1007 df.Vary(""pt"", ""ROOT::RVecD{pt*0.9f, pt*1.1f}"", {""down"", ""up""}); 1008 .Filter(""pt > pt_cut""); 1009 .Define(""x"", someFunc, {""pt""}); 1010 .Histo1D<float>(""x"");; 1011 ; 1012// request the generation of varied results from the nominal_hx; 1013ROOT::RDF::Experimental::RResultMap<TH1D> hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; 1014 ; 1015// the event loop runs here, upon first access to any of the results or varied results:; 1016hx[""nominal""].Draw(); // same ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:60745,Integrability,depend,depend,60745,"o any of the results or varied results:; 1016hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); 1017hx[""pt:down""].Draw(""SAME"");; 1018hx[""pt:up""].Draw(""SAME"");; 1019~~~; 1020 ; 1021A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned; 1022as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of; 1023this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second; 1024to the tag ""up""). The _full_ variation name will be composed of the varied column name and the variation tags (e.g.; 1025""pt:down"", ""pt:up"" in this example). Python usage looks similar.; 1026 ; 1027Note how we use the ""pt"" column as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill; 1028the resulting histogram. To produce the varied results, RDataFrame will automatically execute the Filter and Define; 1029calls for each variation and fill the histogram with values and cuts that depend on the variation.; 1030 ; 1031There is no limitation to the complexity of a Vary() expression. Just like for the Define() and Filter() calls, users are; 1032not limited to string expressions but they can also pass any valid C++ callable, including lambda functions and; 1033complex functors. The callable can be applied to zero or more existing columns and it will always receive their; 1034_nominal_ value in input.; 1035 ; 1036#### Varying multiple columns in lockstep; 1037 ; 1038In the following Python snippet we use the Vary() signature that allows varying multiple columns simultaneously or; 1039""in lockstep"":; 1040 ; 1041~~~{.python}; 1042df.Vary([""pt"", ""eta""],; 1043 ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",; 1044 variationTags=[""down"", ""up""],; 1045 variationName=""ptAndEta""); 1046~~~; 1047 ; 1048The expression returns an RVec of two RVecs: each inner vector contains the varied values for one col",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:62105,Integrability,depend,depends,62105," and it will always receive their; 1034_nominal_ value in input.; 1035 ; 1036#### Varying multiple columns in lockstep; 1037 ; 1038In the following Python snippet we use the Vary() signature that allows varying multiple columns simultaneously or; 1039""in lockstep"":; 1040 ; 1041~~~{.python}; 1042df.Vary([""pt"", ""eta""],; 1043 ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",; 1044 variationTags=[""down"", ""up""],; 1045 variationName=""ptAndEta""); 1046~~~; 1047 ; 1048The expression returns an RVec of two RVecs: each inner vector contains the varied values for one column. The; 1049inner vectors follow the same ordering as the column names that are passed as the first argument. Besides the variation tags, in; 1050this case we also have to explicitly pass the variation name (here: ""ptAndEta"") as the default column name does not exist.; 1051 ; 1052The above call will produce variations ""ptAndEta:down"" and ""ptAndEta:up"".; 1053 ; 1054#### Combining multiple variations; 1055 ; 1056Even if a result depends on multiple variations, only one variation is applied at a time, i.e. there will be no result produced; 1057by applying multiple systematic variations at the same time.; 1058For example, in the following example snippet, the RResultMap instance `all_h` will contain keys ""nominal"", ""pt:down"",; 1059""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; 1060 ; 1061~~~{.cpp}; 1062auto df = _df.Vary(""pt"",; 1063 ""ROOT::RVecD{pt*0.9, pt*1.1}"",; 1064 {""down"", ""up""}); 1065 .Vary(""eta"",; 1066 [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; 1067 {""eta""},; 1068 2);; 1069 ; 1070auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; 1071auto all_hs = VariationsFor(nom_h);; 1072all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; 1073~~~; 1074 ; 1075Note how we passed the integer `2` instead of a list of variation tags to the second Vary() invocation: this is a; 1076shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; 1077 ; 1078\n",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:63227,Integrability,interface,interfaces,63227,"ill be no result produced; 1057by applying multiple systematic variations at the same time.; 1058For example, in the following example snippet, the RResultMap instance `all_h` will contain keys ""nominal"", ""pt:down"",; 1059""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; 1060 ; 1061~~~{.cpp}; 1062auto df = _df.Vary(""pt"",; 1063 ""ROOT::RVecD{pt*0.9, pt*1.1}"",; 1064 {""down"", ""up""}); 1065 .Vary(""eta"",; 1066 [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; 1067 {""eta""},; 1068 2);; 1069 ; 1070auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; 1071auto all_hs = VariationsFor(nom_h);; 1072all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; 1073~~~; 1074 ; 1075Note how we passed the integer `2` instead of a list of variation tags to the second Vary() invocation: this is a; 1076shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; 1077 ; 1078\note Currently, VariationsFor() and RResultMap are in the `ROOT::RDF::Experimental` namespace, to indicate that these; 1079 interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related; 1080 programming model will be streamlined in future versions.; 1081 ; 1082\note Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to; 1083 call \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" on them. These limitations will be lifted in future releases.; 1084 ; 1085See the Vary() method for more information and [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) ; 1086for an example usage of Vary and \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" in the analysis.; 1087 ; 1088\anchor rnode; 1089### RDataFrame objects as function arguments and return values; 1090RDataFrame variables/nodes are relatively cheap to copy and it's possible to both pass them to (or move them into); 1091functions and to return them from functions. Howev",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:69844,Integrability,message,message,69844,"4340705d2c4db7f8).; 1177 ; 1178\warning Note that in multi-thread event loops the values of `rdfentry_` _do not_ correspond to what would be the entry numbers; 1179of a TChain constructed over the same set of ROOT files, as the entries are processed in an unspecified order.; 1180 ; 1181\anchor jitting; 1182### Just-in-time compilation: column type inference and explicit declaration of column types; 1183C++ is a statically typed language: all types must be known at compile-time. This includes the types of the TTree; 1184branches we want to work on. For filters, defined columns and some of the actions, **column types are deduced from the; 1185signature** of the relevant filter function/temporary column expression/action function:; 1186~~~{.cpp}; 1187// here b1 is deduced to be `int` and b2 to be `double`; 1188df.Filter([](int x, double y) { return x > 0 && y < 0.; }, {""b1"", ""b2""});; 1189~~~; 1190If we specify an incorrect type for one of the columns, an exception with an informative message will be thrown at; 1191runtime, when the column value is actually read from the dataset: RDataFrame detects type mismatches. The same would; 1192happen if we swapped the order of ""b1"" and ""b2"" in the column list passed to Filter().; 1193 ; 1194Certain actions, on the other hand, do not take a function as argument (e.g. Histo1D()), so we cannot deduce the type of; 1195the column at compile-time. In this case **RDataFrame infers the type of the column** from the TTree itself. This; 1196is why we never needed to specify the column types for all actions in the above snippets.; 1197 ; 1198When the column type is not a common one such as `int`, `double`, `char` or `float` it is nonetheless good practice to; 1199specify it as a template parameter to the action itself, like this:; 1200~~~{.cpp}; 1201df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; 1202df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; 1203~~~; 1204 ; 1205Deducing types a",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:71625,Integrability,inject,inject,71625,"~~{.cpp}; 1201df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; 1202df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; 1203~~~; 1204 ; 1205Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime; 1206overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; 1207 ; 1208When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing `x = 0` rather than `x == 0`:; 1209 ; 1210~~~{.cpp}; 1211// this throws an error (note the typo); 1212df.Define(""x"", ""0"").Filter(""x = 0"");; 1213~~~; 1214 ; 1215\anchor generic-actions; 1216### User-defined custom actions; 1217RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same; 1218time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; 1219 ; 1220#### Implementing custom actions with Book(); 1221 ; 1222Through the Book() method, users can implement a custom action and have access to the same features; 1223that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the; 1224event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:; 1225 ; 1226~~~{.cpp}; 1227#include <ROOT/RDataFrame.hxx>; 1228#include <memory>; 1229 ; 1230class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; 1231 std::shared_ptr<int> fFinalResult = std::make_shared<int>(0);; 1232 std::vector<int> fPerThreadResults;; 1233 ; 1234public:; 1235 // We use a public type alias to advertise the type of the result of this action; 1236 using Result_t = int;; 1237 ; 1238 MyCounter(unsigned int nSlots) : fPerThreadResults(nSlots) {}; 1239 ; 1240 // Called before the event loop to retrieve the address of the resul",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:74256,Integrability,interface,interface,74256,"adResults.end(), 0);; 1259 }; 1260 ; 1261 // Called by RDataFrame to retrieve the name of this action.; 1262 std::string GetActionName() const { return ""MyCounter""; }; 1263};; 1264 ; 1265int main() {; 1266 ROOT::RDataFrame df(10);; 1267 ROOT::RDF::RResultPtr<int> resultPtr = df.Book<>(MyCounter{df.GetNSlots()}, {});; 1268 // The GetValue call triggers the event loop; 1269 std::cout << ""Number of processed entries: "" << resultPtr.GetValue() << std::endl;; 1270}; 1271~~~; 1272 ; 1273See the Book() method for more information and [this tutorial](https://root.cern/doc/master/df018__customActions_8C.html); 1274for a more complete example.; 1275 ; 1276#### Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); 1277 ; 1278Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and; 1279executes the callable on the values of those columns for each event that passes all upstream selections.; 1280It can be used to perform actions that are not already available in the interface. For example, the following snippet; 1281evaluates the root mean square of column ""x"":; 1282~~~{.cpp}; 1283// Single-thread evaluation of RMS of column ""x"" using Foreach; 1284double sumSq = 0.;; 1285unsigned int n = 0;; 1286df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; 1287std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; 1288~~~; 1289In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach():; 1290thread will execute the expression concurrently.; 1291The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of `rms`; but; 1292this is probably too much head-scratch for such a simple operation.; 1293 ; 1294ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an; 1295additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame;",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:79072,Integrability,interface,interfaced,79072,"used as friends of the original; 1344 one: rows will be mismatched.; 1345 ; 1346Indexed friend trees provide a way to perform simple joins of multiple trees over a common column.; 1347When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the; 1348""index"" columns have a value identical to the one in the main one. For example, in Python:; 1349 ; 1350~~~{.py}; 1351main_tree = ...; 1352aux_tree = ...; 1353 ; 1354# If a friend tree has an index on `commonColumn`, when the main tree loads; 1355# a given row, it also loads the row of the friend tree that has the same; 1356# value of `commonColumn`; 1357aux_tree.BuildIndex(""commonColumn""); 1358 ; 1359mainTree.AddFriend(aux_tree); 1360 ; 1361df = ROOT.RDataFrame(mainTree); 1362~~~; 1363 ; 1364RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode.; 1365 ; 1366\anchor other-file-formats; 1367### Reading data formats other than ROOT trees; 1368RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; 1369 ; 1370RDataFrame calls into concrete RDataSource implementations to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns; 1371and to advance the readers to the desired data entry.; 1372Some predefined RDataSources are natively provided by ROOT such as the ROOT::RDF::RCsvDS which allows to read comma separated files:; 1373~~~{.cpp}; 1374auto tdf = ROOT::RDF::FromCSV(""MuRun2010B.csv"");; 1375auto filteredEvents =; 1376 tdf.Filter(""Q1 * Q2 == -1""); 1377 .Define(""m"", ""sqrt(pow(E1 + E2, 2) - (pow(px1 + px2, 2) + pow(py1 + py2, 2) + pow(pz1 + pz2, 2)))"");; 1378auto h = filteredEvents.Histo1D(""m"");; 1379h->Draw();; 1380~~~; 1381 ; 1382See also FromNumpy (Python-only), FromRNTuple(), FromArrow(), FromSqlite().; 1383 ; 1384\anchor callgraphs; 1385### Com",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:79129,Integrability,interface,interface,79129,"le joins of multiple trees over a common column.; 1347When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the; 1348""index"" columns have a value identical to the one in the main one. For example, in Python:; 1349 ; 1350~~~{.py}; 1351main_tree = ...; 1352aux_tree = ...; 1353 ; 1354# If a friend tree has an index on `commonColumn`, when the main tree loads; 1355# a given row, it also loads the row of the friend tree that has the same; 1356# value of `commonColumn`; 1357aux_tree.BuildIndex(""commonColumn""); 1358 ; 1359mainTree.AddFriend(aux_tree); 1360 ; 1361df = ROOT.RDataFrame(mainTree); 1362~~~; 1363 ; 1364RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode.; 1365 ; 1366\anchor other-file-formats; 1367### Reading data formats other than ROOT trees; 1368RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; 1369 ; 1370RDataFrame calls into concrete RDataSource implementations to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns; 1371and to advance the readers to the desired data entry.; 1372Some predefined RDataSources are natively provided by ROOT such as the ROOT::RDF::RCsvDS which allows to read comma separated files:; 1373~~~{.cpp}; 1374auto tdf = ROOT::RDF::FromCSV(""MuRun2010B.csv"");; 1375auto filteredEvents =; 1376 tdf.Filter(""Q1 * Q2 == -1""); 1377 .Define(""m"", ""sqrt(pow(E1 + E2, 2) - (pow(px1 + px2, 2) + pow(py1 + py2, 2) + pow(pz1 + pz2, 2)))"");; 1378auto h = filteredEvents.Histo1D(""m"");; 1379h->Draw();; 1380~~~; 1381 ; 1382See also FromNumpy (Python-only), FromRNTuple(), FromArrow(), FromSqlite().; 1383 ; 1384\anchor callgraphs; 1385### Computation graphs (storing and reusing sets of transformations); 1386 ; 1387As we saw, transformed dataframes can be stored as variab",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:102659,Integrability,interface,interface,102659,"DatasetSpec::REntryRange &entryRange={})Create an RDatasetSpec object for a given range of entries.Definition RDatasetSpec.cxx:216; ROOT::RDF::Experimental::RMetaDataClass behaving as a heterogenuous dictionary to store the metadata of a dataset.Definition RMetaData.hxx:50; ROOT::RDF::Experimental::RSampleClass representing a sample which is a grouping of trees and their fileglobs, and,...Definition RSample.hxx:39; ROOT::RDF::RInterfaceBase::fLoopManagerstd::shared_ptr< ROOT::Detail::RDF::RLoopManager > fLoopManager< The RLoopManager at the root of this computation graph. Never null.Definition RInterfaceBase.hxx:55; ROOT::RDF::RInterfaceBase::fDataSourceRDataSource * fDataSourceNon-owning pointer to a data-source object. Null if no data-source. RLoopManager has ownership of the...Definition RInterfaceBase.hxx:57; ROOT::RDF::RInterfaceBase::GetLoopManagerRDFDetail::RLoopManager * GetLoopManager() constDefinition RInterfaceBase.hxx:128; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDataFrame::RDataFrameRDataFrame(std::string_view treeName, std::string_view filenameglob, const ColumnNames_t &defaultColumns={})Build the dataframe.Definition RDataFrame.cxx:1591; ROOT::RDataFrame::ColumnNames_tROOT::RDF::ColumnNames_t ColumnNames_tDefinition RDataFrame.hxx:43; ROOT::RDataFrame::~RDataFrame~RDataFrame()Definition RDataFrame.cxx:1685; TDirectoryDescribe directory structure in memory.Definition TDirectory.h:45; TDirectory::Getvirtual TObject * Get(const char *namecycle)Return pointer to object identified by namecycle.Definition TDirectory.cxx:866; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; ROOT::Detail::RDFDefinition GraphUtils.hxx:24; ROOT::RDF::Experimental::FromSpecROOT::RDataFrame FromSpec(const std::string &jsonFile)Factory method to create an RDataFrame from a JSON specification file.Definition RDataFrame.cxx:1729; ROOT::RDF::ColumnNames_tstd::",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:13197,Modifiability,flexible,flexible,13197,") | Return the number of event loops run by this RDataFrame instance so far. |; 164| GetNSlots() | Return the number of processing slots that RDataFrame will use during the event loop (i.e. the concurrency level). |; 165| SaveGraph() | Store the computation graph of an RDataFrame in [DOT format (graphviz)](https://en.wikipedia.org/wiki/DOT_(graph_description_language)) for easy inspection. See the [relevant section](\ref representgraph) for details. |; 166 ; 167\anchor introduction; 168## Introduction; 169Users define their analysis as a sequence of operations to be performed on the dataframe object; the framework; 170takes care of the management of the loop over entries as well as low-level details such as I/O and parallelization.; 171RDataFrame provides methods to perform most common operations required by ROOT analyses;; 172at the same time, users can just as easily specify custom code that will be executed in the event loop.; 173 ; 174RDataFrame is built with a *modular* and *flexible* workflow in mind, summarised as follows:; 175 ; 1761. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, [CSV files](https://root.cern/doc/master/df014__CSVDataSource_8C.html), [SQLite files](https://root.cern/doc/master/df027__SQliteDependencyOverVersion_8C.html), [RNTuples](https://root.cern/doc/master/structROOT_1_1Experimental_1_1RNTuple.html), and it can be extended to custom data formats. From Python, [NumPy arrays can be imported into RDataFrame](https://root.cern/doc/master/df032__MakeNumpyDataFrame_8py.html) as well.; 177 ; 1782. Transform the dataframe by:; 179 ; 180 - [Applying filters](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). This selects only specific rows of the dataset.; 181 ; 182 - [Creating custom columns](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). Custom columns can, for example, contain the results of a computation that must be performed for every ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:13620,Modifiability,extend,extended,13620,"f representgraph) for details. |; 166 ; 167\anchor introduction; 168## Introduction; 169Users define their analysis as a sequence of operations to be performed on the dataframe object; the framework; 170takes care of the management of the loop over entries as well as low-level details such as I/O and parallelization.; 171RDataFrame provides methods to perform most common operations required by ROOT analyses;; 172at the same time, users can just as easily specify custom code that will be executed in the event loop.; 173 ; 174RDataFrame is built with a *modular* and *flexible* workflow in mind, summarised as follows:; 175 ; 1761. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, [CSV files](https://root.cern/doc/master/df014__CSVDataSource_8C.html), [SQLite files](https://root.cern/doc/master/df027__SQliteDependencyOverVersion_8C.html), [RNTuples](https://root.cern/doc/master/structROOT_1_1Experimental_1_1RNTuple.html), and it can be extended to custom data formats. From Python, [NumPy arrays can be imported into RDataFrame](https://root.cern/doc/master/df032__MakeNumpyDataFrame_8py.html) as well.; 177 ; 1782. Transform the dataframe by:; 179 ; 180 - [Applying filters](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). This selects only specific rows of the dataset.; 181 ; 182 - [Creating custom columns](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset.; 183 ; 1843. [Produce results](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#actions). *Actions* are used to aggregate data into results. Most actions are *lazy*, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time.; 185 ; 186Make sure to book all transformations and actions before you access the contents of ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:14953,Modifiability,flexible,flexible,14953,"s selects only specific rows of the dataset.; 181 ; 182 - [Creating custom columns](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset.; 183 ; 1843. [Produce results](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#actions). *Actions* are used to aggregate data into results. Most actions are *lazy*, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time.; 185 ; 186Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them.; 187 ; 188The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the; 189[crash course](#crash-course) to discover more idiomatic and flexible ways to express analyses with RDataFrame.; 190<table>; 191<tr>; 192 <td>; 193 <b>TTreeReader</b>; 194 </td>; 195 <td>; 196 <b>ROOT::RDataFrame</b>; 197 </td>; 198</tr>; 199<tr>; 200 <td>; 201~~~{.cpp}; 202TTreeReader reader(""myTree"", file);; 203TTreeReaderValue<A_t> a(reader, ""A"");; 204TTreeReaderValue<B_t> b(reader, ""B"");; 205TTreeReaderValue<C_t> c(reader, ""C"");; 206while(reader.Next()) {; 207 if(IsGoodEvent(*a, *b, *c)); 208 DoStuff(*a, *b, *c);; 209}; 210~~~; 211 </td>; 212 <td>; 213~~~{.cpp}; 214ROOT::RDataFrame d(""myTree"", file, {""A"", ""B"", ""C""});; 215d.Filter(IsGoodEvent).Foreach(DoStuff);; 216~~~; 217 </td>; 218</tr>; 219<tr>; 220 <td>; 221 <b>TTree::Draw</b>; 222 </td>; 223 <td>; 224 <b>ROOT::RDataFrame</b>; 225 </td>; 226</tr>; 227<tr>; 228 <td>; 229~~~{.cpp}; 230auto *tree = file->Get<TTree>(""myTree"");; 231tree->Draw(""x"", ""y > 2"");; 232~~~; 233 </td>; 234 <td>; 235~~~{.cpp}; 236ROOT::RDataFrame df(""myTree"", file);; 237auto h = df.Filter(""y > 2"").Histo1D(",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:22506,Modifiability,variab,variables,22506,"4.; }; // a C++11 lambda function checking ""x > 4""; 358auto c = d.Filter(metCut, {""MET""}).Count();; 359std::cout << *c << std::endl;; 360~~~; 361 ; 362An example of a more complex filter expressed as a string containing C++ code is shown below; 363 ; 364~~~{.cpp}; 365RDataFrame d(""myTree"", ""file.root"");; 366auto df = d.Define(""p"", ""std::array<double, 4> p{px, py, pz}; return p;""); 367 .Filter(""double p2 = 0.0; for (auto&& x : p) p2 += x*x; return sqrt(p2) < 10.0;"");; 368~~~; 369 ; 370The code snippet above defines a column `p` that is a fixed-size array using the component column names and then; 371filters on its magnitude by looping over its elements. It must be noted that the usage of strings to define columns; 372like the one above is currently the only possibility when using PyROOT. When writing expressions as such, only constants; 373and data coming from other columns in the dataset can be involved in the code passed as a string. Local variables and; 374functions cannot be used, since the interpreter will not know how to find them. When capturing local state is necessary,; 375it must first be declared to the ROOT C++ interpreter.; 376 ; 377More information on filters and how to use them to automatically generate cutflow reports can be found [below](#Filters).; 378 ; 379### Defining custom columns; 380Let's now consider the case in which ""myTree"" contains two quantities ""x"" and ""y"", but our analysis relies on a derived; 381quantity `z = sqrt(x*x + y*y)`. Using the Define() transformation, we can create a new column in the dataset containing; 382the variable ""z"":; 383~~~{.cpp}; 384RDataFrame d(""myTree"", ""file.root"");; 385auto sqrtSum = [](double x, double y) { return sqrt(x*x + y*y); };; 386auto zMean = d.Define(""z"", sqrtSum, {""x"",""y""}).Mean(""z"");; 387std::cout << *zMean << std::endl;; 388~~~; 389Define() creates the variable ""z"" by applying `sqrtSum` to ""x"" and ""y"". Later in the chain of calls we refer to; 390variables created with Define() as if they were actua",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:23130,Modifiability,variab,variable,23130," fixed-size array using the component column names and then; 371filters on its magnitude by looping over its elements. It must be noted that the usage of strings to define columns; 372like the one above is currently the only possibility when using PyROOT. When writing expressions as such, only constants; 373and data coming from other columns in the dataset can be involved in the code passed as a string. Local variables and; 374functions cannot be used, since the interpreter will not know how to find them. When capturing local state is necessary,; 375it must first be declared to the ROOT C++ interpreter.; 376 ; 377More information on filters and how to use them to automatically generate cutflow reports can be found [below](#Filters).; 378 ; 379### Defining custom columns; 380Let's now consider the case in which ""myTree"" contains two quantities ""x"" and ""y"", but our analysis relies on a derived; 381quantity `z = sqrt(x*x + y*y)`. Using the Define() transformation, we can create a new column in the dataset containing; 382the variable ""z"":; 383~~~{.cpp}; 384RDataFrame d(""myTree"", ""file.root"");; 385auto sqrtSum = [](double x, double y) { return sqrt(x*x + y*y); };; 386auto zMean = d.Define(""z"", sqrtSum, {""x"",""y""}).Mean(""z"");; 387std::cout << *zMean << std::endl;; 388~~~; 389Define() creates the variable ""z"" by applying `sqrtSum` to ""x"" and ""y"". Later in the chain of calls we refer to; 390variables created with Define() as if they were actual tree branches/columns, but they are evaluated on demand, at most; 391once per event. As with filters, Define() calls can be chained with other transformations to create multiple custom; 392columns. Define() and Filter() transformations can be concatenated and intermixed at will.; 393 ; 394As with filters, it is possible to specify new columns as string expressions. This snippet is analogous to the one above:; 395~~~{.cpp}; 396RDataFrame d(""myTree"", ""file.root"");; 397auto zMean = d.Define(""z"", ""sqrt(x*x + y*y)"").Mean(""z"");; 398std::cou",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:23403,Modifiability,variab,variable,23403," constants; 373and data coming from other columns in the dataset can be involved in the code passed as a string. Local variables and; 374functions cannot be used, since the interpreter will not know how to find them. When capturing local state is necessary,; 375it must first be declared to the ROOT C++ interpreter.; 376 ; 377More information on filters and how to use them to automatically generate cutflow reports can be found [below](#Filters).; 378 ; 379### Defining custom columns; 380Let's now consider the case in which ""myTree"" contains two quantities ""x"" and ""y"", but our analysis relies on a derived; 381quantity `z = sqrt(x*x + y*y)`. Using the Define() transformation, we can create a new column in the dataset containing; 382the variable ""z"":; 383~~~{.cpp}; 384RDataFrame d(""myTree"", ""file.root"");; 385auto sqrtSum = [](double x, double y) { return sqrt(x*x + y*y); };; 386auto zMean = d.Define(""z"", sqrtSum, {""x"",""y""}).Mean(""z"");; 387std::cout << *zMean << std::endl;; 388~~~; 389Define() creates the variable ""z"" by applying `sqrtSum` to ""x"" and ""y"". Later in the chain of calls we refer to; 390variables created with Define() as if they were actual tree branches/columns, but they are evaluated on demand, at most; 391once per event. As with filters, Define() calls can be chained with other transformations to create multiple custom; 392columns. Define() and Filter() transformations can be concatenated and intermixed at will.; 393 ; 394As with filters, it is possible to specify new columns as string expressions. This snippet is analogous to the one above:; 395~~~{.cpp}; 396RDataFrame d(""myTree"", ""file.root"");; 397auto zMean = d.Define(""z"", ""sqrt(x*x + y*y)"").Mean(""z"");; 398std::cout << *zMean << std::endl;; 399~~~; 400 ; 401Again the names of the columns used in the expression and their types are inferred automatically. The string must be; 402valid C++ and it is just-in-time compiled. The process has a small runtime overhead and like with filters it is currently the onl",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:25225,Modifiability,variab,variables,25225,"t be; 402valid C++ and it is just-in-time compiled. The process has a small runtime overhead and like with filters it is currently the only possible approach when using PyROOT.; 403 ; 404Previously, when showing the different ways an RDataFrame can be created, we showed a constructor that takes a; 405number of entries as a parameter. In the following example we show how to combine such an ""empty"" RDataFrame with Define(); 406transformations to create a dataset on the fly. We then save the generated data on disk using the Snapshot() action.; 407~~~{.cpp}; 408RDataFrame d(100); // an RDF that will generate 100 entries (currently empty); 409int x = -1;; 410auto d_with_columns = d.Define(""x"", [&x] { return ++x; }); 411 .Define(""xx"", [&x] { return x*x; });; 412d_with_columns.Snapshot(""myNewTree"", ""newfile.root"");; 413~~~; 414This example is slightly more advanced than what we have seen so far. First, it makes use of lambda captures (a; 415simple way to make external variables available inside the body of C++ lambdas) to act on the same variable `x` from; 416both Define() transformations. Second, we have *stored* the transformed dataframe in a variable. This is always; 417possible, since at each point of the transformation chain users can store the status of the dataframe for further use (more; 418on this [below](#callgraphs)).; 419 ; 420You can read more about defining new columns [here](#custom-columns).; 421 ; 422\image html RDF_Graph.png ""A graph composed of two branches, one starting with a filter and one with a define. The end point of a branch is always an action.""; 423 ; 424 ; 425### Running on a range of entries; 426It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame; 427offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and; 428actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:25296,Modifiability,variab,variable,25296,"t be; 402valid C++ and it is just-in-time compiled. The process has a small runtime overhead and like with filters it is currently the only possible approach when using PyROOT.; 403 ; 404Previously, when showing the different ways an RDataFrame can be created, we showed a constructor that takes a; 405number of entries as a parameter. In the following example we show how to combine such an ""empty"" RDataFrame with Define(); 406transformations to create a dataset on the fly. We then save the generated data on disk using the Snapshot() action.; 407~~~{.cpp}; 408RDataFrame d(100); // an RDF that will generate 100 entries (currently empty); 409int x = -1;; 410auto d_with_columns = d.Define(""x"", [&x] { return ++x; }); 411 .Define(""xx"", [&x] { return x*x; });; 412d_with_columns.Snapshot(""myNewTree"", ""newfile.root"");; 413~~~; 414This example is slightly more advanced than what we have seen so far. First, it makes use of lambda captures (a; 415simple way to make external variables available inside the body of C++ lambdas) to act on the same variable `x` from; 416both Define() transformations. Second, we have *stored* the transformed dataframe in a variable. This is always; 417possible, since at each point of the transformation chain users can store the status of the dataframe for further use (more; 418on this [below](#callgraphs)).; 419 ; 420You can read more about defining new columns [here](#custom-columns).; 421 ; 422\image html RDF_Graph.png ""A graph composed of two branches, one starting with a filter and one with a define. The end point of a branch is always an action.""; 423 ; 424 ; 425### Running on a range of entries; 426It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame; 427offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and; 428actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:25405,Modifiability,variab,variable,25405,"he only possible approach when using PyROOT.; 403 ; 404Previously, when showing the different ways an RDataFrame can be created, we showed a constructor that takes a; 405number of entries as a parameter. In the following example we show how to combine such an ""empty"" RDataFrame with Define(); 406transformations to create a dataset on the fly. We then save the generated data on disk using the Snapshot() action.; 407~~~{.cpp}; 408RDataFrame d(100); // an RDF that will generate 100 entries (currently empty); 409int x = -1;; 410auto d_with_columns = d.Define(""x"", [&x] { return ++x; }); 411 .Define(""xx"", [&x] { return x*x; });; 412d_with_columns.Snapshot(""myNewTree"", ""newfile.root"");; 413~~~; 414This example is slightly more advanced than what we have seen so far. First, it makes use of lambda captures (a; 415simple way to make external variables available inside the body of C++ lambdas) to act on the same variable `x` from; 416both Define() transformations. Second, we have *stored* the transformed dataframe in a variable. This is always; 417possible, since at each point of the transformation chain users can store the status of the dataframe for further use (more; 418on this [below](#callgraphs)).; 419 ; 420You can read more about defining new columns [here](#custom-columns).; 421 ; 422\image html RDF_Graph.png ""A graph composed of two branches, one starting with a filter and one with a define. The end point of a branch is always an action.""; 423 ; 424 ; 425### Running on a range of entries; 426It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame; 427offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and; 428actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act; 429exclusively on the entries passing the filter -- it will not even count the other entries! The same goes for a Ra",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:26590,Modifiability,variab,variable,26590,"418on this [below](#callgraphs)).; 419 ; 420You can read more about defining new columns [here](#custom-columns).; 421 ; 422\image html RDF_Graph.png ""A graph composed of two branches, one starting with a filter and one with a define. The end point of a branch is always an action.""; 423 ; 424 ; 425### Running on a range of entries; 426It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame; 427offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and; 428actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act; 429exclusively on the entries passing the filter -- it will not even count the other entries! The same goes for a Range(); 430hanging from another Range(). Here are some commented examples:; 431~~~{.cpp}; 432RDataFrame d(""myTree"", ""file.root"");; 433// Here we store a dataframe that loops over only the first 30 entries in a variable; 434auto d30 = d.Range(30);; 435// This is how you pick all entries from 15 onwards; 436auto d15on = d.Range(15, 0);; 437// We can specify a stride too, in this case we pick an event every 3; 438auto d15each3 = d.Range(0, 15, 3);; 439~~~; 440Note that ranges are not available when multi-threading is enabled. More information on ranges is available; 441[here](#ranges).; 442 ; 443### Executing multiple actions in the same event loop; 444As a final example let us apply two different cuts on branch ""MET"" and fill two different histograms with the ""pt_v"" of; 445the filtered events.; 446By now, you should be able to easily understand what is happening:; 447~~~{.cpp}; 448RDataFrame d(""treeName"", ""file.root"");; 449auto h1 = d.Filter(""MET > 10"").Histo1D(""pt_v"");; 450auto h2 = d.Histo1D(""pt_v"");; 451h1->Draw(); // event loop is run once here; 452h2->Draw(""SAME""); // no need to run the event loop again; 453~~~; 454RDataFrame executes all above actions by **",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:28842,Modifiability,variab,variable,28842,"ously.; 458 ; 459It is therefore good practice to declare all your transformations and actions *before* accessing their results, allowing; 460RDataFrame to run the loop once and produce all results in one go.; 461 ; 462### Going parallel; 463Let's say we would like to run the previous examples in parallel on several cores, dividing events fairly between cores.; 464The only modification required to the snippets would be the addition of this line *before* constructing the main; 465dataframe object:; 466~~~{.cpp}; 467ROOT::EnableImplicitMT();; 468~~~; 469Simple as that. More details are given [below](#parallel-execution).; 470 ; 471\anchor collections; 472## Working with collections and object selections; 473 ; 474RDataFrame reads collections as the special type [ROOT::RVec](https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html): for example, a column containing an array of floating point numbers can be read as a ROOT::RVecF. C-style arrays (with variable or static size), STL vectors and most other collection types can be read this way.; 475 ; 476RVec is a container similar to std::vector (and can be used just like a std::vector) but it also offers a rich interface to operate on the array elements in a vectorised fashion, similarly to Python's NumPy arrays.; 477 ; 478For example, to fill a histogram with the ""pt"" of selected particles for each event, Define() can be used to create a column that contains the desired array elements as follows:; 479 ; 480~~~{.cpp}; 481// h is filled with all the elements of `good_pts`, for each event; 482auto h = df.Define(""good_pts"", [](const ROOT::RVecF &pt) { return pt[pt > 0]; }); 483 .Histo1D(""good_pts"");; 484~~~; 485 ; 486And in Python:; 487 ; 488~~~{.py}; 489h = df.Define(""good_pts"", ""pt[pt > 0]"").Histo1D(""good_pts""); 490~~~; 491 ; 492Learn more at ROOT::VecOps::RVec.; 493 ; 494\anchor transformations; 495## Transformations: manipulating data; 496\anchor Filters; 497### Filters; 498A filter is created through a call to `Filt",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:30288,Modifiability,variab,variable,30288,"s the desired array elements as follows:; 479 ; 480~~~{.cpp}; 481// h is filled with all the elements of `good_pts`, for each event; 482auto h = df.Define(""good_pts"", [](const ROOT::RVecF &pt) { return pt[pt > 0]; }); 483 .Histo1D(""good_pts"");; 484~~~; 485 ; 486And in Python:; 487 ; 488~~~{.py}; 489h = df.Define(""good_pts"", ""pt[pt > 0]"").Histo1D(""good_pts""); 490~~~; 491 ; 492Learn more at ROOT::VecOps::RVec.; 493 ; 494\anchor transformations; 495## Transformations: manipulating data; 496\anchor Filters; 497### Filters; 498A filter is created through a call to `Filter(f, columnList)` or `Filter(filterString)`. In the first overload, `f` can; 499be a function, a lambda expression, a functor class, or any other callable object. It must return a `bool` signalling; 500whether the event has passed the selection (`true`) or not (`false`). It should perform ""read-only"" operations on the; 501columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness; 502when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column; 503names are used as variable names (e.g. `Filter(""x[0] + x[1] > 0"")`). This is a convenience feature that comes with a; 504certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event; 505loop. See the paragraph about ""Just-in-time compilation"" below for more information.; 506 ; 507RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed; 508in order and the first one returning `false` causes the event to be discarded and triggers the processing of the next; 509entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for; 510each entry: after the first access it simply serves a cached result.; 511 ; 512\anchor named-filters-and-cutflow-reports; 513#### Named filters and cutflo",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:30466,Modifiability,variab,variable,30466,"or each event; 482auto h = df.Define(""good_pts"", [](const ROOT::RVecF &pt) { return pt[pt > 0]; }); 483 .Histo1D(""good_pts"");; 484~~~; 485 ; 486And in Python:; 487 ; 488~~~{.py}; 489h = df.Define(""good_pts"", ""pt[pt > 0]"").Histo1D(""good_pts""); 490~~~; 491 ; 492Learn more at ROOT::VecOps::RVec.; 493 ; 494\anchor transformations; 495## Transformations: manipulating data; 496\anchor Filters; 497### Filters; 498A filter is created through a call to `Filter(f, columnList)` or `Filter(filterString)`. In the first overload, `f` can; 499be a function, a lambda expression, a functor class, or any other callable object. It must return a `bool` signalling; 500whether the event has passed the selection (`true`) or not (`false`). It should perform ""read-only"" operations on the; 501columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness; 502when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column; 503names are used as variable names (e.g. `Filter(""x[0] + x[1] > 0"")`). This is a convenience feature that comes with a; 504certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event; 505loop. See the paragraph about ""Just-in-time compilation"" below for more information.; 506 ; 507RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed; 508in order and the first one returning `false` causes the event to be discarded and triggers the processing of the next; 509entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for; 510each entry: after the first access it simply serves a cached result.; 511 ; 512\anchor named-filters-and-cutflow-reports; 513#### Named filters and cutflow reports; 514An optional string parameter `name` can be passed to the Filter() method to create a **named filter**. ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:34129,Modifiability,variab,variable,34129,"t the next 40 entries pass, then stop processing"". If a range node hangs from a filter node,; 542and the range has a `begin` parameter of 10, that means the range will skip the first 10 entries *that pass the; 543preceding filter*.; 544 ; 545Ranges allow ""early quitting"": if all branches of execution of a functional graph reached their `end` value of; 546processed entries, the event-loop is immediately interrupted. This is useful for debugging and quick data explorations.; 547 ; 548\anchor custom-columns; 549### Custom columns; 550Custom columns are created by invoking `Define(name, f, columnList)`. As usual, `f` can be any callable object; 551(function, lambda expression, functor class...); it takes the values of the columns listed in `columnList` (a list of; 552strings) as parameters, in the same order as they are listed in `columnList`. `f` must return the value that will be; 553assigned to the temporary column.; 554 ; 555A new variable is created called `name`, accessible as if it was contained in the dataset from subsequent; 556transformations/actions.; 557 ; 558Use cases include:; 559- caching the results of complex calculations for easy and efficient multiple access; 560- extraction of quantities of interest from complex objects; 561- branch aliasing, i.e. changing the name of a branch; 562 ; 563An exception is thrown if the `name` of the new column/branch is already in use for another branch in the TTree.; 564 ; 565It is also possible to specify the quantity to be stored in the new temporary column as a C++ expression with the method; 566`Define(name, expression)`. For example this invocation; 567 ; 568~~~{.cpp}; 569df.Define(""pt"", ""sqrt(px*px + py*py)"");; 570~~~; 571 ; 572will create a new column called ""pt"" the value of which is calculated starting from the columns px and py. The system; 573builds a just-in-time compiled function starting from the expression after having deduced the list of necessary branches; 574from the names of the variables specified by",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:35163,Modifiability,variab,variables,35163,"mporary column.; 554 ; 555A new variable is created called `name`, accessible as if it was contained in the dataset from subsequent; 556transformations/actions.; 557 ; 558Use cases include:; 559- caching the results of complex calculations for easy and efficient multiple access; 560- extraction of quantities of interest from complex objects; 561- branch aliasing, i.e. changing the name of a branch; 562 ; 563An exception is thrown if the `name` of the new column/branch is already in use for another branch in the TTree.; 564 ; 565It is also possible to specify the quantity to be stored in the new temporary column as a C++ expression with the method; 566`Define(name, expression)`. For example this invocation; 567 ; 568~~~{.cpp}; 569df.Define(""pt"", ""sqrt(px*px + py*py)"");; 570~~~; 571 ; 572will create a new column called ""pt"" the value of which is calculated starting from the columns px and py. The system; 573builds a just-in-time compiled function starting from the expression after having deduced the list of necessary branches; 574from the names of the variables specified by the user.; 575 ; 576#### Custom columns as function of slot and entry number; 577 ; 578It is possible to create custom columns also as a function of the processing slot and entry numbers. The methods that can; 579be invoked are:; 580- `DefineSlot(name, f, columnList)`. In this case the callable f has this signature `R(unsigned int, T1, T2, ...)`: the; 581first parameter is the slot number which ranges from 0 to ROOT::GetThreadPoolSize() - 1.; 582- `DefineSlotEntry(name, f, columnList)`. In this case the callable f has this signature `R(unsigned int, ULong64_t,; 583T1, T2, ...)`: the first parameter is the slot number while the second one the number of the entry being processed.; 584 ; 585\anchor actions; 586## Actions: getting results; 587### Instant and lazy actions; 588Actions can be **instant** or **lazy**. Instant actions are executed as soon as they are called, while lazy actions are; 589execut",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:40650,Modifiability,config,configuration,40650,"ne; 675- Snapshot; 676- Stats; 677- StdDev; 678- Sum; 679- Systematic variations: Vary and [VariationsFor](\ref ROOT::RDF::Experimental::VariationsFor).; 680- Parallel submission of distributed graphs: [RunGraphs](\ref ROOT::RDF::RunGraphs).; 681- Information about the dataframe: GetColumnNames.; 682 ; 683with support for more operations coming in the future. Data sources other than TTree and TChain (e.g. CSV, RNTuple) are; 684currently not supported.; 685 ; 686\note The distributed RDataFrame module requires at least Python version 3.8.; 687 ; 688### Connecting to a Spark cluster; 689 ; 690In order to distribute the RDataFrame workload, you can connect to a Spark cluster you have access to through the; 691official [Spark API](https://spark.apache.org/docs/latest/rdd-programming-guide.html#initializing-spark), then hook the; 692connection instance to the distributed `RDataFrame` object like so:; 693 ; 694~~~{.py}; 695import pyspark; 696import ROOT; 697 ; 698# Create a SparkContext object with the right configuration for your Spark cluster; 699conf = SparkConf().setAppName(appName).setMaster(master); 700sc = SparkContext(conf=conf); 701 ; 702# Point RDataFrame calls to the Spark specific RDataFrame; 703RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; 704 ; 705# The Spark RDataFrame constructor accepts an optional ""sparkcontext"" parameter; 706# and it will distribute the application to the connected cluster; 707df = RDataFrame(""mytree"", ""myfile.root"", sparkcontext = sc); 708~~~; 709 ; 710If an instance of [SparkContext](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.SparkContext.html); 711is not provided, the default behaviour is to create one in the background for you.; 712 ; 713### Connecting to a Dask cluster; 714 ; 715Similarly, you can connect to a Dask cluster by creating your own connection object which internally operates with one; 716of the cluster schedulers supported by Dask (more information in the; 717[Dask distribute",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:58320,Modifiability,flexible,flexible,58320," first event loop is triggered, so that the interpreter is invoked only once for all computation graphs:; 972 ; 973~~~{.cpp}; 974// assuming df1 and df2 are separate computation graphs, do:; 975auto h1 = df1.Histo1D(""x"");; 976auto h2 = df2.Histo1D(""y"");; 977h1->Draw(); // we just-in-time compile everything needed by df1 and df2 here; 978h2->Draw(""SAME"");; 979 ; 980// do not:; 981auto h1 = df1.Histo1D(""x"");; 982h1->Draw(); // we just-in-time compile here; 983auto h2 = df2.Histo1D(""y"");; 984h2->Draw(""SAME""); // we just-in-time compile again here, as the second Histo1D call is new; 985~~~; 986 ; 987\anchor more-features; 988## More features; 989Here is a list of the most important features that have been omitted in the ""Crash course"" for brevity.; 990You don't need to read all these to start using RDataFrame, but they are useful to save typing time and runtime.; 991 ; 992\anchor systematics; 993### Systematic variations; 994 ; 995Starting from ROOT v6.26, RDataFrame provides a flexible syntax to define systematic variations.; 996This is done in two steps: a) register variations for one or more existing columns using Vary() and b) extract variations; 997of normal RDataFrame results using \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"". In between these steps, no other change; 998to the analysis code is required: the presence of systematic variations for certain columns is automatically propagated; 999through filters, defines and actions, and RDataFrame will take these dependencies into account when producing varied; 1000results. \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" is included in header `ROOT/RDFHelpers.hxx`. The compiled C++ programs must include this header; 1001explicitly, this is not required for ROOT macros. ; 1002 ; 1003An example usage of Vary() and \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" in C++:; 1004 ; 1005~~~{.cpp}; 1006auto nominal_hx =; 1007 df.Vary(""pt"", ""ROOT::RVecD{pt*0.9f, pt*1.1f}"", {""down"", """,MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:63250,Modifiability,evolve,evolve,63250,"ill be no result produced; 1057by applying multiple systematic variations at the same time.; 1058For example, in the following example snippet, the RResultMap instance `all_h` will contain keys ""nominal"", ""pt:down"",; 1059""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; 1060 ; 1061~~~{.cpp}; 1062auto df = _df.Vary(""pt"",; 1063 ""ROOT::RVecD{pt*0.9, pt*1.1}"",; 1064 {""down"", ""up""}); 1065 .Vary(""eta"",; 1066 [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; 1067 {""eta""},; 1068 2);; 1069 ; 1070auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; 1071auto all_hs = VariationsFor(nom_h);; 1072all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; 1073~~~; 1074 ; 1075Note how we passed the integer `2` instead of a list of variation tags to the second Vary() invocation: this is a; 1076shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; 1077 ; 1078\note Currently, VariationsFor() and RResultMap are in the `ROOT::RDF::Experimental` namespace, to indicate that these; 1079 interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related; 1080 programming model will be streamlined in future versions.; 1081 ; 1082\note Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to; 1083 call \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" on them. These limitations will be lifted in future releases.; 1084 ; 1085See the Vary() method for more information and [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) ; 1086for an example usage of Vary and \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" in the analysis.; 1087 ; 1088\anchor rnode; 1089### RDataFrame objects as function arguments and return values; 1090RDataFrame variables/nodes are relatively cheap to copy and it's possible to both pass them to (or move them into); 1091functions and to return them from functions. Howev",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:64032,Modifiability,variab,variables,64032,"ags 0 to N-1 (in this case 0 and 1).; 1077 ; 1078\note Currently, VariationsFor() and RResultMap are in the `ROOT::RDF::Experimental` namespace, to indicate that these; 1079 interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related; 1080 programming model will be streamlined in future versions.; 1081 ; 1082\note Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to; 1083 call \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" on them. These limitations will be lifted in future releases.; 1084 ; 1085See the Vary() method for more information and [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) ; 1086for an example usage of Vary and \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" in the analysis.; 1087 ; 1088\anchor rnode; 1089### RDataFrame objects as function arguments and return values; 1090RDataFrame variables/nodes are relatively cheap to copy and it's possible to both pass them to (or move them into); 1091functions and to return them from functions. However, in general each dataframe node will have a different C++ type,; 1092which includes all available compile-time information about what that node does. One way to cope with this complication; 1093is to use template functions and/or C++14 auto return types:; 1094~~~{.cpp}; 1095template <typename RDF>; 1096auto ApplySomeFilters(RDF df); 1097{; 1098 return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; 1099}; 1100~~~; 1101 ; 1102A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be; 1103converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode:; 1104~~~{.cpp}; 1105// a function that conditionally adds a Range to an RDataFrame node.; 1106RNode MaybeAddRange(RNode df, bool mustAddRange); 1107{; 1108 return mustAddRange ? df.Range(1) : df;; 1109}; 1110// u",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:76248,Modifiability,variab,variable,76248,"ame; 1296guarantees that ForeachSlot() will invoke the user expression with different `slot` parameters for different concurrent; 1297executions (see [Special helper columns: rdfentry_ and rdfslot_](\ref helper-cols) for more information on the slot parameter).; 1298We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"":; 1299~~~{.cpp}; 1300// Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; 1301ROOT::EnableImplicitMT();; 1302const unsigned int nSlots = df.GetNSlots();; 1303std::vector<double> sumSqs(nSlots, 0.);; 1304std::vector<unsigned int> ns(nSlots, 0);; 1305 ; 1306df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; 1307double sumSq = std::accumulate(sumSqs.begin(), sumSqs.end(), 0.); // sum all squares; 1308unsigned int n = std::accumulate(ns.begin(), ns.end(), 0); // sum all counts; 1309std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; 1310~~~; 1311Notice how we created one `double` variable for each processing slot and later merged their results via `std::accumulate`.; 1312 ; 1313 ; 1314\anchor friends; 1315### Dataset joins with friend trees; 1316 ; 1317Vertically concatenating multiple trees that have the same columns (creating a logical dataset with the same columns and; 1318more rows) is trivial in RDataFrame: just pass the tree name and a list of file names to RDataFrame's constructor, or create a TChain; 1319out of the desired trees and pass that to RDataFrame.; 1320 ; 1321Horizontal concatenations of trees or chains (creating a logical dataset with the same number of rows and the union of the; 1322columns of multiple trees) leverages TTree's ""friend"" mechanism.; 1323 ; 1324Simple joins of trees that do not have the same number of rows are also possible with indexed friend trees (see below).; 1325 ; 1326To use friend trees in RDataFrame, set up trees with the appropriate relationships and then instantiate an RDataFrame; 1327wit",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:80154,Modifiability,variab,variables,80154,"T::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; 1369 ; 1370RDataFrame calls into concrete RDataSource implementations to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns; 1371and to advance the readers to the desired data entry.; 1372Some predefined RDataSources are natively provided by ROOT such as the ROOT::RDF::RCsvDS which allows to read comma separated files:; 1373~~~{.cpp}; 1374auto tdf = ROOT::RDF::FromCSV(""MuRun2010B.csv"");; 1375auto filteredEvents =; 1376 tdf.Filter(""Q1 * Q2 == -1""); 1377 .Define(""m"", ""sqrt(pow(E1 + E2, 2) - (pow(px1 + px2, 2) + pow(py1 + py2, 2) + pow(pz1 + pz2, 2)))"");; 1378auto h = filteredEvents.Histo1D(""m"");; 1379h->Draw();; 1380~~~; 1381 ; 1382See also FromNumpy (Python-only), FromRNTuple(), FromArrow(), FromSqlite().; 1383 ; 1384\anchor callgraphs; 1385### Computation graphs (storing and reusing sets of transformations); 1386 ; 1387As we saw, transformed dataframes can be stored as variables and reused multiple times to create modified versions of the dataset. This implicitly defines a **computation graph** in which; 1388several paths of filtering/creation of columns are executed simultaneously, and finally aggregated results are produced.; 1389 ; 1390RDataFrame detects when several actions use the same filter or the same defined column, and **only evaluates each; 1391filter or defined column once per event**, regardless of how many times that result is used down the computation graph.; 1392Objects read from each column are **built once and never copied**, for maximum efficiency.; 1393When ""upstream"" filters are not passed, subsequent filters, temporary column expressions and actions are not evaluated,; 1394so it might be advisable to put the strictest filters first in the graph.; 1395 ; 1396\anchor representgraph; 1397### Visualizing the computation graph; 1398It is possible to print the computation graph from any nod",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:82763,Modifiability,variab,variable,82763,"ine(""y"", []() { return 1; });; 1413 ; 1414auto count = df2.Count();; 1415 ; 1416// Prints the graph to the rd1.dot file in the current directory; 1417ROOT::RDF::SaveGraph(df, ""./mydot.dot"");; 1418// Prints the graph to standard output; 1419ROOT::RDF::SaveGraph(df);; 1420~~~; 1421 ; 1422The generated graph can be rendered using one of the graphviz filters, e.g. `dot`. For instance, the image below can be generated with the following command:; 1423~~~{.sh}; 1424$ dot -Tpng computation_graph.dot -ocomputation_graph.png; 1425~~~; 1426 ; 1427\image html RDF_Graph2.png; 1428 ; 1429\anchor rdf-logging; 1430### Activating RDataFrame execution logs; 1431 ; 1432RDataFrame has experimental support for verbose logging of the event loop runtimes and other interesting related information. It is activated as follows:; 1433~~~{.cpp}; 1434#include <ROOT/RLogger.hxx>; 1435 ; 1436// this increases RDF's verbosity level as long as the `verbosity` variable is in scope; 1437auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel::kInfo);; 1438~~~; 1439 ; 1440or in Python:; 1441~~~{.python}; 1442import ROOT; 1443 ; 1444verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kInfo); 1445~~~; 1446 ; 1447More information (e.g. start and end of each multi-thread task) is printed using `ELogLevel.kDebug` and even more; 1448(e.g. a full dump of the generated code that RDataFrame just-in-time-compiles) using `ELogLevel.kDebug+10`.; 1449 ; 1450\anchor rdf-from-spec; 1451### Creating an RDataFrame from a dataset specification file; 1452 ; 1453RDataFrame can be created using a dataset specification JSON file: ; 1454 ; 1455~~~{.python}; 1456import ROOT; 1457 ; 1458df = ROOT.RDF.Experimental.FromSpec(""spec.json""); 1459~~~; 1460 ; 1461The input dataset specification JSON file needs to be provided by the user and it describes all necessary samples and; 1462their associated metadata i",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:99623,Modifiability,variab,variable,99623,"int> range = fullData[""range""];; 1797 ; 1798 if (range.size() == 1); 1799 spec.WithGlobalRange({range[0]});; 1800 else if (range.size() == 2); 1801 spec.WithGlobalRange({range[0], range[1]});; 1802 }; 1803 return ROOT::RDataFrame(spec);; 1804}; 1805 ; 1806} // namespace Experimental; 1807} // namespace RDF; 1808 ; 1809} // namespace ROOT; 1810 ; 1811namespace cling {; 1812//////////////////////////////////////////////////////////////////////////; 1813/// Print an RDataFrame at the prompt; 1814std::string printValue(ROOT::RDataFrame *df); 1815{; 1816 // The loop manager is never null, except when its construction failed.; 1817 // This can happen e.g. if the constructor of RLoopManager that expects; 1818 // a file name is used and that file doesn't exist. This point is usually; 1819 // not even reached in that situation, since the exception thrown by the; 1820 // constructor will also stop execution of the program. But it can still; 1821 // be reached at the prompt, if the user tries to print the RDataFrame; 1822 // variable after an incomplete initialization.; 1823 auto *lm = df->GetLoopManager();; 1824 if (!lm) {; 1825 throw std::runtime_error(""Cannot print information about this RDataFrame, ""; 1826 ""it was not properly created. It must be discarded."");; 1827 }; 1828 auto *tree = lm->GetTree();; 1829 auto defCols = lm->GetDefaultColumnNames();; 1830 ; 1831 std::ostringstream ret;; 1832 if (tree) {; 1833 ret << ""A data frame built on top of the "" << tree->GetName() << "" dataset."";; 1834 if (!defCols.empty()) {; 1835 if (defCols.size() == 1); 1836 ret << ""\nDefault column: "" << defCols[0];; 1837 else {; 1838 ret << ""\nDefault columns:\n"";; 1839 for (auto &&col : defCols) {; 1840 ret << "" - "" << col << ""\n"";; 1841 }; 1842 }; 1843 }; 1844 } else if (auto ds = df->fDataSource) {; 1845 ret << ""A data frame associated to the data source \"""" << cling::printValue(ds) << ""\"""";; 1846 } else {; 1847 ret << ""An empty data frame that will create "" << lm->GetNEmptyEntries() << "" e",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:1558,Performance,multi-thread,multi-threading,1558,"10 ; 11#include ""ROOT/InternalTreeUtils.hxx""; 12#include ""ROOT/RDataFrame.hxx""; 13#include ""ROOT/RDataSource.hxx""; 14#include ""ROOT/RDF/RDatasetSpec.hxx""; 15#include ""ROOT/RDF/RInterface.hxx""; 16#include ""ROOT/RDF/RLoopManager.hxx""; 17#include ""ROOT/RDF/Utils.hxx""; 18#include <string_view>; 19#include ""TChain.h""; 20#include ""TDirectory.h""; 21#include ""RtypesCore.h"" // for ULong64_t; 22#include ""TTree.h""; 23 ; 24#include <fstream> // std::ifstream; 25#include <nlohmann/json.hpp> // nlohmann::json::parse; 26#include <memory> // for make_shared, allocator, shared_ptr; 27#include <ostream> // ostringstream; 28#include <stdexcept>; 29#include <string>; 30#include <vector>; 31 ; 32// clang-format off; 33/**; 34* \class ROOT::RDataFrame; 35* \ingroup dataframe; 36* \brief ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python.; 37 ; 38In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available; 39on their machines completely transparently.<br>; 40Skip to the [class reference](#reference) or keep reading for the user guide.; 41 ; 42In a nutshell:; 43~~~{.cpp}; 44ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; 45ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; 46auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; 47myHisto->Draw(); // Event loop is run here, upon first access to a result; 48~~~; 49 ; 50Calculations are expressed in terms of a type-safe *functional chain of actions and transformations*, RDataFrame takes; 51care of their execution. The implementation automatically puts in place several low level optimisations such as; 52multi-thread parallelization and caching.; 53 ; 54\htmlonly; 55<a href=""https://doi.org/10.5281/zenodo.260230""><img src=""https://zenodo.org/badge/DOI/10.5281/zenodo.260230.svg""; 56alt=""DOI""></a>; 57\endhtmlonly; 58 ; 59## For the",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:4586,Performance,perform,performed,4586,"callbacks); 76 - [Default column lists](\ref default-branches); 77 - [Special helper columns: `rdfentry_` and `rdfslot_`](\ref helper-cols); 78 - [Just-in-time compilation: column type inference and explicit declaration of column types](\ref jitting); 79 - [User-defined custom actions](\ref generic-actions); 80 - [Dataset joins with friend trees](\ref friends); 81 - [Reading data formats other than ROOT trees](\ref other-file-formats); 82 - [Computation graphs (storing and reusing sets of transformations)](\ref callgraphs); 83 - [Visualizing the computation graph](\ref representgraph); 84 - [Activating RDataFrame execution logs](\ref rdf-logging); 85 - [Creating an RDataFrame from a dataset specification file](\ref rdf-from-spec); 86 - [Adding a progress bar](\ref progressbar); 87- [Efficient analysis in Python](\ref python); 88- <a class=""el"" href=""classROOT_1_1RDataFrame.html#reference"" onclick=""javascript:toggleInherit('pub_methods_classROOT_1_1RDF_1_1RInterface')"">Class reference</a>; 89 ; 90\anchor cheatsheet; 91## Cheat sheet; 92These are the operations which can be performed with RDataFrame.; 93 ; 94### Transformations; 95Transformations are a way to manipulate the data.; 96 ; 97| **Transformation** | **Description** |; 98|------------------|--------------------|; 99| Alias() | Introduce an alias for a particular column name. |; 100| Define() | Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the `pt`s of ""good"" muons). |; 101| DefinePerSample() | Define a new column that is updated when the input sample changes, e.g. when switching tree being processed in a chain. |; 102| DefineSlot() | Same as Define(), but the user-defined function must take an extra `unsigned int slot` as its first parameter. `slot` will take a different value, `0` to `nThreads - 1`, for each thread of execution. This is meant as a helper in writing thread-safe Define",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:5898,Performance,multi-thread,multi-threaded,5898,". Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the `pt`s of ""good"" muons). |; 101| DefinePerSample() | Define a new column that is updated when the input sample changes, e.g. when switching tree being processed in a chain. |; 102| DefineSlot() | Same as Define(), but the user-defined function must take an extra `unsigned int slot` as its first parameter. `slot` will take a different value, `0` to `nThreads - 1`, for each thread of execution. This is meant as a helper in writing thread-safe Define() transformation when using RDataFrame after ROOT::EnableImplicitMT(). DefineSlot() works just as well with single-thread execution: in that case `slot` will always be `0`. |; 103| DefineSlotEntry() | Same as DefineSlot(), but the entry number is passed in addition to the slot number. This is meant as a helper in case the expression depends on the entry number. For details about entry numbers in multi-threaded runs, see [here](\ref helper-cols). |; 104| Filter() | Filter rows based on user-defined conditions. |; 105| Range() | Filter rows based on entry number (single-thread only). |; 106| Redefine() | Overwrite the value and/or type of an existing column. See Define() for more information. |; 107| RedefineSlot() | Overwrite the value and/or type of an existing column. See DefineSlot() for more information. |; 108| RedefineSlotEntry() | Overwrite the value and/or type of an existing column. See DefineSlotEntry() for more information. |; 109| Vary() | Register systematic variations for an existing column. Varied results are then extracted via VariationsFor(). |; 110 ; 111 ; 112### Actions; 113Actions aggregate data into a result. Each one is described in more detail in the reference guide.; 114 ; 115In the following, whenever we say an action ""returns"" something, we always mean it returns a smart pointer to it. Actions only act on events that pass all preceding filters.; 116 ; 117Lazy",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:7473,Performance,cache,cached,7473,"ariations for an existing column. Varied results are then extracted via VariationsFor(). |; 110 ; 111 ; 112### Actions; 113Actions aggregate data into a result. Each one is described in more detail in the reference guide.; 114 ; 115In the following, whenever we say an action ""returns"" something, we always mean it returns a smart pointer to it. Actions only act on events that pass all preceding filters.; 116 ; 117Lazy actions only trigger the event loop when one of the results is accessed for the first time, making it easy to; 118produce many different results in one event loop. Instant actions trigger the event loop instantly.; 119 ; 120 ; 121| **Lazy action** | **Description** |; 122|------------------|-----------------|; 123| Aggregate() | Execute a user-defined accumulation operation on the processed column values. |; 124| Book() | Book execution of a custom action using a user-defined helper object. |; 125| Cache() | Cache column values in memory. Custom columns can be cached as well, filtered entries are not cached. Users can specify which columns to save (default is all). |; 126| Count() | Return the number of events processed. Useful e.g. to get a quick count of the number of events passing a Filter. |; 127| Display() | Provides a printable representation of the dataset contents. The method returns a ROOT::RDF::RDisplay() instance which can print a tabular representation of the data or return it as a string. |; 128| Fill() | Fill a user-defined object with the values of the specified columns, as if by calling `Obj.Fill(col1, col2, ...)`. |; 129| Graph() | Fills a TGraph with the two columns provided. If multi-threading is enabled, the order of the points may not be the one expected, it is therefore suggested to sort if before drawing. |; 130| GraphAsymmErrors() | Fills a TGraphAsymmErrors. If multi-threading is enabled, the order of the points may not be the one expected, it is therefore suggested to sort if before drawing. |; 131| Histo1D(), Histo2D(), Histo3",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:7514,Performance,cache,cached,7514,"ariations for an existing column. Varied results are then extracted via VariationsFor(). |; 110 ; 111 ; 112### Actions; 113Actions aggregate data into a result. Each one is described in more detail in the reference guide.; 114 ; 115In the following, whenever we say an action ""returns"" something, we always mean it returns a smart pointer to it. Actions only act on events that pass all preceding filters.; 116 ; 117Lazy actions only trigger the event loop when one of the results is accessed for the first time, making it easy to; 118produce many different results in one event loop. Instant actions trigger the event loop instantly.; 119 ; 120 ; 121| **Lazy action** | **Description** |; 122|------------------|-----------------|; 123| Aggregate() | Execute a user-defined accumulation operation on the processed column values. |; 124| Book() | Book execution of a custom action using a user-defined helper object. |; 125| Cache() | Cache column values in memory. Custom columns can be cached as well, filtered entries are not cached. Users can specify which columns to save (default is all). |; 126| Count() | Return the number of events processed. Useful e.g. to get a quick count of the number of events passing a Filter. |; 127| Display() | Provides a printable representation of the dataset contents. The method returns a ROOT::RDF::RDisplay() instance which can print a tabular representation of the data or return it as a string. |; 128| Fill() | Fill a user-defined object with the values of the specified columns, as if by calling `Obj.Fill(col1, col2, ...)`. |; 129| Graph() | Fills a TGraph with the two columns provided. If multi-threading is enabled, the order of the points may not be the one expected, it is therefore suggested to sort if before drawing. |; 130| GraphAsymmErrors() | Fills a TGraphAsymmErrors. If multi-threading is enabled, the order of the points may not be the one expected, it is therefore suggested to sort if before drawing. |; 131| Histo1D(), Histo2D(), Histo3",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:8123,Performance,multi-thread,multi-threading,8123,"----------|-----------------|; 123| Aggregate() | Execute a user-defined accumulation operation on the processed column values. |; 124| Book() | Book execution of a custom action using a user-defined helper object. |; 125| Cache() | Cache column values in memory. Custom columns can be cached as well, filtered entries are not cached. Users can specify which columns to save (default is all). |; 126| Count() | Return the number of events processed. Useful e.g. to get a quick count of the number of events passing a Filter. |; 127| Display() | Provides a printable representation of the dataset contents. The method returns a ROOT::RDF::RDisplay() instance which can print a tabular representation of the data or return it as a string. |; 128| Fill() | Fill a user-defined object with the values of the specified columns, as if by calling `Obj.Fill(col1, col2, ...)`. |; 129| Graph() | Fills a TGraph with the two columns provided. If multi-threading is enabled, the order of the points may not be the one expected, it is therefore suggested to sort if before drawing. |; 130| GraphAsymmErrors() | Fills a TGraphAsymmErrors. If multi-threading is enabled, the order of the points may not be the one expected, it is therefore suggested to sort if before drawing. |; 131| Histo1D(), Histo2D(), Histo3D() | Fill a one-, two-, three-dimensional histogram with the processed column values. |; 132| HistoND() | Fill an N-dimensional histogram with the processed column values. |; 133| Max() | Return the maximum of processed column values. If the type of the column is inferred, the return type is `double`, the type of the column otherwise.|; 134| Mean() | Return the mean of processed column values.|; 135| Min() | Return the minimum of processed column values. If the type of the column is inferred, the return type is `double`, the type of the column otherwise.|; 136| Profile1D(), Profile2D() | Fill a one- or two-dimensional profile with the column values that passed all filters. |; 137| Reduce() | ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:8316,Performance,multi-thread,multi-threading,8316,"efined helper object. |; 125| Cache() | Cache column values in memory. Custom columns can be cached as well, filtered entries are not cached. Users can specify which columns to save (default is all). |; 126| Count() | Return the number of events processed. Useful e.g. to get a quick count of the number of events passing a Filter. |; 127| Display() | Provides a printable representation of the dataset contents. The method returns a ROOT::RDF::RDisplay() instance which can print a tabular representation of the data or return it as a string. |; 128| Fill() | Fill a user-defined object with the values of the specified columns, as if by calling `Obj.Fill(col1, col2, ...)`. |; 129| Graph() | Fills a TGraph with the two columns provided. If multi-threading is enabled, the order of the points may not be the one expected, it is therefore suggested to sort if before drawing. |; 130| GraphAsymmErrors() | Fills a TGraphAsymmErrors. If multi-threading is enabled, the order of the points may not be the one expected, it is therefore suggested to sort if before drawing. |; 131| Histo1D(), Histo2D(), Histo3D() | Fill a one-, two-, three-dimensional histogram with the processed column values. |; 132| HistoND() | Fill an N-dimensional histogram with the processed column values. |; 133| Max() | Return the maximum of processed column values. If the type of the column is inferred, the return type is `double`, the type of the column otherwise.|; 134| Mean() | Return the mean of processed column values.|; 135| Min() | Return the minimum of processed column values. If the type of the column is inferred, the return type is `double`, the type of the column otherwise.|; 136| Profile1D(), Profile2D() | Fill a one- or two-dimensional profile with the column values that passed all filters. |; 137| Reduce() | Reduce (e.g. sum, merge) entries using the function (lambda, functor...) passed as argument. The function must have signature `T(T,T)` where `T` is the type of the column. Return the final resu",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:10582,Performance,multi-thread,multi-threading,10582," entries have been accepted and rejected by the filters. See the section on [named filters](#named-filters-and-cutflow-reports) for a more detailed explanation. The method returns a ROOT::RDF::RCutFlowReport instance which can be queried programmatically to get information about the effects of the individual cuts. |; 139| Stats() | Return a TStatistic object filled with the input columns. |; 140| StdDev() | Return the unbiased standard deviation of the processed column values. |; 141| Sum() | Return the sum of the values in the column. If the type of the column is inferred, the return type is `double`, the type of the column otherwise. |; 142| Take() | Extract a column from the dataset as a collection of values, e.g. a `std::vector<float>` for a column of type `float`. |; 143 ; 144| **Instant action** | **Description** |; 145|---------------------|-----------------|; 146| Foreach() | Execute a user-defined function on each entry. Users are responsible for the thread-safety of this callable when executing with implicit multi-threading enabled. |; 147| ForeachSlot() | Same as Foreach(), but the user-defined function must take an extra `unsigned int slot` as its first parameter. `slot` will take a different value, `0` to `nThreads - 1`, for each thread of execution. This is meant as a helper in writing thread-safe Foreach() actions when using RDataFrame after ROOT::EnableImplicitMT(). ForeachSlot() works just as well with single-thread execution: in that case `slot` will always be `0`. |; 148| Snapshot() | Write the processed dataset to disk, in a new TTree and TFile. Custom columns can be saved as well, filtered entries are not saved. Users can specify which columns to save (default is all). Snapshot, by default, overwrites the output file if it already exists. Snapshot() can be made *lazy* setting the appropriate flag in the snapshot options.|; 149 ; 150 ; 151### Queries; 152 ; 153These operations do not modify the dataframe or book computations but simply return info",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:12396,Performance,concurren,concurrency,12396," snapshot options.|; 149 ; 150 ; 151### Queries; 152 ; 153These operations do not modify the dataframe or book computations but simply return information on the RDataFrame object.; 154 ; 155| **Operation** | **Description** |; 156|---------------------|-----------------|; 157| Describe() | Get useful information describing the dataframe, e.g. columns and their types. |; 158| GetColumnNames() | Get the names of all the available columns of the dataset. |; 159| GetColumnType() | Return the type of a given column as a string. |; 160| GetColumnTypeNamesList() | Return the list of type names of columns in the dataset. |; 161| GetDefinedColumnNames() | Get the names of all the defined columns. |; 162| GetFilterNames() | Return the names of all filters in the computation graph. |; 163| GetNRuns() | Return the number of event loops run by this RDataFrame instance so far. |; 164| GetNSlots() | Return the number of processing slots that RDataFrame will use during the event loop (i.e. the concurrency level). |; 165| SaveGraph() | Store the computation graph of an RDataFrame in [DOT format (graphviz)](https://en.wikipedia.org/wiki/DOT_(graph_description_language)) for easy inspection. See the [relevant section](\ref representgraph) for details. |; 166 ; 167\anchor introduction; 168## Introduction; 169Users define their analysis as a sequence of operations to be performed on the dataframe object; the framework; 170takes care of the management of the loop over entries as well as low-level details such as I/O and parallelization.; 171RDataFrame provides methods to perform most common operations required by ROOT analyses;; 172at the same time, users can just as easily specify custom code that will be executed in the event loop.; 173 ; 174RDataFrame is built with a *modular* and *flexible* workflow in mind, summarised as follows:; 175 ; 1761. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, [CSV files](https://root.cern/doc/master/df",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:12775,Performance,perform,performed,12775," Get the names of all the available columns of the dataset. |; 159| GetColumnType() | Return the type of a given column as a string. |; 160| GetColumnTypeNamesList() | Return the list of type names of columns in the dataset. |; 161| GetDefinedColumnNames() | Get the names of all the defined columns. |; 162| GetFilterNames() | Return the names of all filters in the computation graph. |; 163| GetNRuns() | Return the number of event loops run by this RDataFrame instance so far. |; 164| GetNSlots() | Return the number of processing slots that RDataFrame will use during the event loop (i.e. the concurrency level). |; 165| SaveGraph() | Store the computation graph of an RDataFrame in [DOT format (graphviz)](https://en.wikipedia.org/wiki/DOT_(graph_description_language)) for easy inspection. See the [relevant section](\ref representgraph) for details. |; 166 ; 167\anchor introduction; 168## Introduction; 169Users define their analysis as a sequence of operations to be performed on the dataframe object; the framework; 170takes care of the management of the loop over entries as well as low-level details such as I/O and parallelization.; 171RDataFrame provides methods to perform most common operations required by ROOT analyses;; 172at the same time, users can just as easily specify custom code that will be executed in the event loop.; 173 ; 174RDataFrame is built with a *modular* and *flexible* workflow in mind, summarised as follows:; 175 ; 1761. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, [CSV files](https://root.cern/doc/master/df014__CSVDataSource_8C.html), [SQLite files](https://root.cern/doc/master/df027__SQliteDependencyOverVersion_8C.html), [RNTuples](https://root.cern/doc/master/structROOT_1_1Experimental_1_1RNTuple.html), and it can be extended to custom data formats. From Python, [NumPy arrays can be imported into RDataFrame](https://root.cern/doc/master/df032__MakeNumpyDataFrame_8py.html) as well.; 177 ; 1782.",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:12979,Performance,perform,perform,12979,"olumnNames() | Get the names of all the defined columns. |; 162| GetFilterNames() | Return the names of all filters in the computation graph. |; 163| GetNRuns() | Return the number of event loops run by this RDataFrame instance so far. |; 164| GetNSlots() | Return the number of processing slots that RDataFrame will use during the event loop (i.e. the concurrency level). |; 165| SaveGraph() | Store the computation graph of an RDataFrame in [DOT format (graphviz)](https://en.wikipedia.org/wiki/DOT_(graph_description_language)) for easy inspection. See the [relevant section](\ref representgraph) for details. |; 166 ; 167\anchor introduction; 168## Introduction; 169Users define their analysis as a sequence of operations to be performed on the dataframe object; the framework; 170takes care of the management of the loop over entries as well as low-level details such as I/O and parallelization.; 171RDataFrame provides methods to perform most common operations required by ROOT analyses;; 172at the same time, users can just as easily specify custom code that will be executed in the event loop.; 173 ; 174RDataFrame is built with a *modular* and *flexible* workflow in mind, summarised as follows:; 175 ; 1761. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, [CSV files](https://root.cern/doc/master/df014__CSVDataSource_8C.html), [SQLite files](https://root.cern/doc/master/df027__SQliteDependencyOverVersion_8C.html), [RNTuples](https://root.cern/doc/master/structROOT_1_1Experimental_1_1RNTuple.html), and it can be extended to custom data formats. From Python, [NumPy arrays can be imported into RDataFrame](https://root.cern/doc/master/df032__MakeNumpyDataFrame_8py.html) as well.; 177 ; 1782. Transform the dataframe by:; 179 ; 180 - [Applying filters](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). This selects only specific rows of the dataset.; 181 ; 182 - [Creating custom columns](https://root.cern/doc",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:14182,Performance,perform,performed,14182,"aFrame is built with a *modular* and *flexible* workflow in mind, summarised as follows:; 175 ; 1761. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, [CSV files](https://root.cern/doc/master/df014__CSVDataSource_8C.html), [SQLite files](https://root.cern/doc/master/df027__SQliteDependencyOverVersion_8C.html), [RNTuples](https://root.cern/doc/master/structROOT_1_1Experimental_1_1RNTuple.html), and it can be extended to custom data formats. From Python, [NumPy arrays can be imported into RDataFrame](https://root.cern/doc/master/df032__MakeNumpyDataFrame_8py.html) as well.; 177 ; 1782. Transform the dataframe by:; 179 ; 180 - [Applying filters](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). This selects only specific rows of the dataset.; 181 ; 182 - [Creating custom columns](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset.; 183 ; 1843. [Produce results](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#actions). *Actions* are used to aggregate data into results. Most actions are *lazy*, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time.; 185 ; 186Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them.; 187 ; 188The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the; 189[crash course](#crash-course) to discover more idiomatic and flexible ways to express analyses with RDataFrame.; 190<table>; 191<tr>; 192 <td>; 193 <b>TTreeReader</b>; 194 </td>; 195 <td>; 196 <b>ROOT::RDataFrame</b>; 197 </td>; 198</tr>; 199<tr>; 200 <td>; 201~~~{.cp",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:21194,Performance,perform,performance,21194," result; 341~~~; 342The filter string (which must contain a valid C++ expression) is applied to the specified columns for each event;; 343the name and types of the columns are inferred automatically. The string expression is required to return a `bool`; 344which signals whether the event passes the filter (`true`) or not (`false`).; 345 ; 346You can think of your data as ""flowing"" through the chain of calls, being transformed, filtered and finally used to; 347perform actions. Multiple Filter() calls can be chained one after another.; 348 ; 349Using string filters is nice for simple things, but they are limited to specifying the equivalent of a single return; 350statement or the body of a lambda, so it's cumbersome to use strings with more complex filters. They also add a small; 351runtime overhead, as ROOT needs to just-in-time compile the string into C++ code. When more freedom is required or; 352runtime performance is very important, a C++ callable can be specified instead (a lambda in the following snippet,; 353but it can be any kind of function or even a functor class), together with a list of column names.; 354This snippet is analogous to the one above:; 355~~~{.cpp}; 356RDataFrame d(""myTree"", ""file.root"");; 357auto metCut = [](double x) { return x > 4.; }; // a C++11 lambda function checking ""x > 4""; 358auto c = d.Filter(metCut, {""MET""}).Count();; 359std::cout << *c << std::endl;; 360~~~; 361 ; 362An example of a more complex filter expressed as a string containing C++ code is shown below; 363 ; 364~~~{.cpp}; 365RDataFrame d(""myTree"", ""file.root"");; 366auto df = d.Define(""p"", ""std::array<double, 4> p{px, py, pz}; return p;""); 367 .Filter(""double p2 = 0.0; for (auto&& x : p) p2 += x*x; return sqrt(p2) < 10.0;"");; 368~~~; 369 ; 370The code snippet above defines a column `p` that is a fixed-size array using the component column names and then; 371filters on its magnitude by looping over its elements. It must be noted that the usage of strings to define columns; 37",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:26881,Performance,multi-thread,multi-threading,26881,"# Running on a range of entries; 426It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame; 427offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and; 428actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act; 429exclusively on the entries passing the filter -- it will not even count the other entries! The same goes for a Range(); 430hanging from another Range(). Here are some commented examples:; 431~~~{.cpp}; 432RDataFrame d(""myTree"", ""file.root"");; 433// Here we store a dataframe that loops over only the first 30 entries in a variable; 434auto d30 = d.Range(30);; 435// This is how you pick all entries from 15 onwards; 436auto d15on = d.Range(15, 0);; 437// We can specify a stride too, in this case we pick an event every 3; 438auto d15each3 = d.Range(0, 15, 3);; 439~~~; 440Note that ranges are not available when multi-threading is enabled. More information on ranges is available; 441[here](#ranges).; 442 ; 443### Executing multiple actions in the same event loop; 444As a final example let us apply two different cuts on branch ""MET"" and fill two different histograms with the ""pt_v"" of; 445the filtered events.; 446By now, you should be able to easily understand what is happening:; 447~~~{.cpp}; 448RDataFrame d(""treeName"", ""file.root"");; 449auto h1 = d.Filter(""MET > 10"").Histo1D(""pt_v"");; 450auto h2 = d.Histo1D(""pt_v"");; 451h1->Draw(); // event loop is run once here; 452h2->Draw(""SAME""); // no need to run the event loop again; 453~~~; 454RDataFrame executes all above actions by **running the event-loop only once**. The trick is that actions are not; 455executed at the moment they are called, but they are **lazy**, i.e. delayed until the moment one of their results is; 456accessed through the smart pointer. At that time, the event loop is triggered and *all* results are produc",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:30160,Performance,perform,perform,30160,"ram with the ""pt"" of selected particles for each event, Define() can be used to create a column that contains the desired array elements as follows:; 479 ; 480~~~{.cpp}; 481// h is filled with all the elements of `good_pts`, for each event; 482auto h = df.Define(""good_pts"", [](const ROOT::RVecF &pt) { return pt[pt > 0]; }); 483 .Histo1D(""good_pts"");; 484~~~; 485 ; 486And in Python:; 487 ; 488~~~{.py}; 489h = df.Define(""good_pts"", ""pt[pt > 0]"").Histo1D(""good_pts""); 490~~~; 491 ; 492Learn more at ROOT::VecOps::RVec.; 493 ; 494\anchor transformations; 495## Transformations: manipulating data; 496\anchor Filters; 497### Filters; 498A filter is created through a call to `Filter(f, columnList)` or `Filter(filterString)`. In the first overload, `f` can; 499be a function, a lambda expression, a functor class, or any other callable object. It must return a `bool` signalling; 500whether the event has passed the selection (`true`) or not (`false`). It should perform ""read-only"" operations on the; 501columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness; 502when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column; 503names are used as variable names (e.g. `Filter(""x[0] + x[1] > 0"")`). This is a convenience feature that comes with a; 504certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event; 505loop. See the paragraph about ""Just-in-time compilation"" below for more information.; 506 ; 507RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed; 508in order and the first one returning `false` causes the event to be discarded and triggers the processing of the next; 509entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for; 510each entry: after the first access it simply ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:30338,Performance,multi-thread,multi-threading,30338,"s the desired array elements as follows:; 479 ; 480~~~{.cpp}; 481// h is filled with all the elements of `good_pts`, for each event; 482auto h = df.Define(""good_pts"", [](const ROOT::RVecF &pt) { return pt[pt > 0]; }); 483 .Histo1D(""good_pts"");; 484~~~; 485 ; 486And in Python:; 487 ; 488~~~{.py}; 489h = df.Define(""good_pts"", ""pt[pt > 0]"").Histo1D(""good_pts""); 490~~~; 491 ; 492Learn more at ROOT::VecOps::RVec.; 493 ; 494\anchor transformations; 495## Transformations: manipulating data; 496\anchor Filters; 497### Filters; 498A filter is created through a call to `Filter(f, columnList)` or `Filter(filterString)`. In the first overload, `f` can; 499be a function, a lambda expression, a functor class, or any other callable object. It must return a `bool` signalling; 500whether the event has passed the selection (`true`) or not (`false`). It should perform ""read-only"" operations on the; 501columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness; 502when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column; 503names are used as variable names (e.g. `Filter(""x[0] + x[1] > 0"")`). This is a convenience feature that comes with a; 504certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event; 505loop. See the paragraph about ""Just-in-time compilation"" below for more information.; 506 ; 507RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed; 508in order and the first one returning `false` causes the event to be discarded and triggers the processing of the next; 509entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for; 510each entry: after the first access it simply serves a cached result.; 511 ; 512\anchor named-filters-and-cutflow-reports; 513#### Named filters and cutflo",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:31207,Performance,cache,cached,31207,"e`) or not (`false`). It should perform ""read-only"" operations on the; 501columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness; 502when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column; 503names are used as variable names (e.g. `Filter(""x[0] + x[1] > 0"")`). This is a convenience feature that comes with a; 504certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event; 505loop. See the paragraph about ""Just-in-time compilation"" below for more information.; 506 ; 507RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed; 508in order and the first one returning `false` causes the event to be discarded and triggers the processing of the next; 509entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for; 510each entry: after the first access it simply serves a cached result.; 511 ; 512\anchor named-filters-and-cutflow-reports; 513#### Named filters and cutflow reports; 514An optional string parameter `name` can be passed to the Filter() method to create a **named filter**. Named filters; 515work as usual, but also keep track of how many entries they accept and reject.; 516 ; 517Statistics are retrieved through a call to the Report() method:; 518 ; 519- when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all; 520named filters declared up to that point; 521- when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport>; 522relative all named filters in the section of the chain between the main RDataFrame and that node (included).; 523 ; 524Stats are stored in the same order as named filters have been added to the graph, and *refer to the",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:32284,Performance,multi-thread,multi-thread,32284,"d-cutflow-reports; 513#### Named filters and cutflow reports; 514An optional string parameter `name` can be passed to the Filter() method to create a **named filter**. Named filters; 515work as usual, but also keep track of how many entries they accept and reject.; 516 ; 517Statistics are retrieved through a call to the Report() method:; 518 ; 519- when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all; 520named filters declared up to that point; 521- when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport>; 522relative all named filters in the section of the chain between the main RDataFrame and that node (included).; 523 ; 524Stats are stored in the same order as named filters have been added to the graph, and *refer to the latest event-loop*; 525that has been run using the relevant RDataFrame.; 526 ; 527\anchor ranges; 528### Ranges; 529When RDataFrame is not being used in a multi-thread environment (i.e. no call to EnableImplicitMT() was made),; 530Range() transformations are available. These act very much like filters but instead of basing their decision on; 531a filter expression, they rely on `begin`,`end` and `stride` parameters.; 532 ; 533- `begin`: initial entry number considered for this range.; 534- `end`: final entry number (excluded) considered for this range. 0 means that the range goes until the end of the dataset.; 535- `stride`: process one entry of the [begin, end) range every `stride` entries. Must be strictly greater than 0.; 536 ; 537The actual number of entries processed downstream of a Range() node will be `(end - begin)/stride` (or less if less; 538entries than that are available).; 539 ; 540Note that ranges act ""locally"", not based on the global entry count: `Range(10,50)` means ""skip the first 10 entries; 541*that reach this node*, let the next 40 entries pass, then stop processing"". If a range node hangs",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:38279,Performance,perform,performance,38279,"reated via `Define` or; 620available from the input dataset. The action will request values from each column of the list of input columns (either; 621inferred or specified by the user), in order. For example:; 622 ; 623~~~{.cpp}; 624ROOT::RDataFrame df{1};; 625auto df1 = df.Define(""x"", []{ return 11; });; 626auto df2 = df1.Define(""y"", []{ return 22; });; 627auto graph = df2.Graph<int, int>(""x"",""y"");; 628~~~; 629 ; 630The `Graph` action is going to request first the value from column ""x"", then that of column ""y"". Specifically, the order; 631of execution of the operations of nodes in this branch of the computation graph is guaranteed to be top to bottom.; 632 ; 633\anchor distrdf; 634## Distributed execution; 635 ; 636RDataFrame applications can be executed in parallel through distributed computing frameworks on a set of remote machines; 637thanks to the Python package `ROOT.RDF.Experimental.Distributed`. This experimental, **Python-only** package allows to scale the; 638optimized performance RDataFrame can achieve on a single machine to multiple nodes at the same time. It is designed so; 639that different backends can be easily plugged in, currently supporting [Apache Spark](http://spark.apache.org/) and; 640[Dask](https://dask.org/). To make use of distributed RDataFrame, you only need to switch `ROOT.RDataFrame` with; 641the backend-specific `RDataFrame` of your choice, for example:; 642 ; 643~~~{.py}; 644import ROOT; 645 ; 646# Point RDataFrame calls to the Spark specific RDataFrame; 647RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; 648 ; 649# It still accepts the same constructor arguments as traditional RDataFrame; 650df = RDataFrame(""mytree"", ""myfile.root""); 651 ; 652# Continue the application with the traditional RDataFrame API; 653sum = df.Filter(""x > 10"").Sum(""y""); 654h = df.Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 655 ; 656print(sum.GetValue()); 657h.Draw(); 658~~~; 659 ; 660The main goal of this package is to support running any RDataF",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:45787,Performance,concurren,concurrently,45787,"line.; 773 ; 774### Distributed Snapshot; 775 ; 776The Snapshot operation behaves slightly differently when executed distributedly. First off, it requires the path; 777supplied to the Snapshot call to be accessible from any worker of the cluster and from the client machine (in general; 778it should be provided as an absolute path). Another important difference is that `n` separate files will be produced,; 779where `n` is the number of dataset partitions. As with local RDataFrame, the result of a Snapshot on a distributed; 780RDataFrame is another distributed RDataFrame on which we can define a new computation graph and run more distributed; 781computations.; 782 ; 783### Distributed RunGraphs; 784 ; 785Submitting multiple distributed RDataFrame executions is supported through the RunGraphs function. Similarly to its; 786local counterpart, the function expects an iterable of objects representing an RDataFrame action. Each action will be; 787triggered concurrently to send multiple computation graphs to a distributed cluster at the same time:; 788 ; 789~~~{.py}; 790import ROOT; 791RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; 792RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs; 793 ; 794# Create 3 different dataframes and book an histogram on each one; 795histoproxies = [; 796 RDataFrame(100); 797 .Define(""x"", ""rdfentry_""); 798 .Histo1D((""name"", ""title"", 10, 0, 100), ""x""); 799 for _ in range(4); 800]; 801 ; 802# Execute the 3 computation graphs; 803RunGraphs(histoproxies); 804# Retrieve all the histograms in one go; 805histos = [histoproxy.GetValue() for histoproxy in histoproxies]; 806~~~; 807 ; 808Every distributed backend supports this feature and graphs belonging to different backends can be still triggered with; 809a single call to RunGraphs (e.g. it is possible to send a Spark job and a Dask job at the same time).; 810 ; 811### Histogram models in distributed mode; 812 ; 813When calling a Histo*D operation in distributed mode, remember to",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:50148,Performance,perform,perform,50148,"nary of drawables and callback functions: ; 868For more control, you can create a dictionary where keys are plots and values are corresponding (optional) callback functions. For example:; 869 ; 870~~~{.py}; 871plot_callback_dict = {; 872 graph: set_marker,; 873 h_exp: fit_exp,; 874 tprofile_2d: None; 875}; 876 ; 877LiveVisualize(plot_callback_dict); 878~~~; 879 ; 880- Passing a Dictionary of drawables and callback functions with a global callback function: ; 881You can also combine a dictionary of plots and callbacks with a global callback function:; 882 ; 883~~~{.py}; 884LiveVisualize(plot_callback_dict, write_to_tfile); 885~~~; 886 ; 887\note The allowed operations to pass to LiveVisualize are:; 888 - Histo1D(), Histo2D(), Histo3D(); 889 - Graph(); 890 - Profile1D(), Profile2D(); 891 ; 892\warning The Live Visualization feature is only supported for the Dask backend.; 893 ; 894\anchor parallel-execution; 895## Performance tips and parallel execution; 896As pointed out before in this document, RDataFrame can transparently perform multi-threaded event loops to speed up; 897the execution of its actions. Users have to call ROOT::EnableImplicitMT() *before* constructing the RDataFrame; 898object to indicate that it should take advantage of a pool of worker threads. **Each worker thread processes a distinct; 899subset of entries**, and their partial results are merged before returning the final values to the user.; 900There are no guarantees on the order in which threads will process the batches of entries.; 901In particular, note that this means that, for multi-thread event loops, there is no; 902guarantee on the order in which Snapshot() will _write_ entries: they could be scrambled with respect to the input dataset. The values of the special `rdfentry_` column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; 903 ; 904\warning By default, RDataFrame will use as many threads as the hardware supports, using up **all",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:50156,Performance,multi-thread,multi-threaded,50156,"nary of drawables and callback functions: ; 868For more control, you can create a dictionary where keys are plots and values are corresponding (optional) callback functions. For example:; 869 ; 870~~~{.py}; 871plot_callback_dict = {; 872 graph: set_marker,; 873 h_exp: fit_exp,; 874 tprofile_2d: None; 875}; 876 ; 877LiveVisualize(plot_callback_dict); 878~~~; 879 ; 880- Passing a Dictionary of drawables and callback functions with a global callback function: ; 881You can also combine a dictionary of plots and callbacks with a global callback function:; 882 ; 883~~~{.py}; 884LiveVisualize(plot_callback_dict, write_to_tfile); 885~~~; 886 ; 887\note The allowed operations to pass to LiveVisualize are:; 888 - Histo1D(), Histo2D(), Histo3D(); 889 - Graph(); 890 - Profile1D(), Profile2D(); 891 ; 892\warning The Live Visualization feature is only supported for the Dask backend.; 893 ; 894\anchor parallel-execution; 895## Performance tips and parallel execution; 896As pointed out before in this document, RDataFrame can transparently perform multi-threaded event loops to speed up; 897the execution of its actions. Users have to call ROOT::EnableImplicitMT() *before* constructing the RDataFrame; 898object to indicate that it should take advantage of a pool of worker threads. **Each worker thread processes a distinct; 899subset of entries**, and their partial results are merged before returning the final values to the user.; 900There are no guarantees on the order in which threads will process the batches of entries.; 901In particular, note that this means that, for multi-thread event loops, there is no; 902guarantee on the order in which Snapshot() will _write_ entries: they could be scrambled with respect to the input dataset. The values of the special `rdfentry_` column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; 903 ; 904\warning By default, RDataFrame will use as many threads as the hardware supports, using up **all",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:50688,Performance,multi-thread,multi-thread,50688,"; 886 ; 887\note The allowed operations to pass to LiveVisualize are:; 888 - Histo1D(), Histo2D(), Histo3D(); 889 - Graph(); 890 - Profile1D(), Profile2D(); 891 ; 892\warning The Live Visualization feature is only supported for the Dask backend.; 893 ; 894\anchor parallel-execution; 895## Performance tips and parallel execution; 896As pointed out before in this document, RDataFrame can transparently perform multi-threaded event loops to speed up; 897the execution of its actions. Users have to call ROOT::EnableImplicitMT() *before* constructing the RDataFrame; 898object to indicate that it should take advantage of a pool of worker threads. **Each worker thread processes a distinct; 899subset of entries**, and their partial results are merged before returning the final values to the user.; 900There are no guarantees on the order in which threads will process the batches of entries.; 901In particular, note that this means that, for multi-thread event loops, there is no; 902guarantee on the order in which Snapshot() will _write_ entries: they could be scrambled with respect to the input dataset. The values of the special `rdfentry_` column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; 903 ; 904\warning By default, RDataFrame will use as many threads as the hardware supports, using up **all** the resources on; 905a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use; 906~~~{.cpp}; 907ROOT::EnableImplicitMT(i); 908~~~; 909replacing `i` with the number of CPUs/slots that were allocated for this job.; 910 ; 911### Thread-safety of user-defined expressions; 912RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops.; 913User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate(); 914will have to be thread-sa",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:50983,Performance,multi-thread,multi-thread,50983,"end.; 893 ; 894\anchor parallel-execution; 895## Performance tips and parallel execution; 896As pointed out before in this document, RDataFrame can transparently perform multi-threaded event loops to speed up; 897the execution of its actions. Users have to call ROOT::EnableImplicitMT() *before* constructing the RDataFrame; 898object to indicate that it should take advantage of a pool of worker threads. **Each worker thread processes a distinct; 899subset of entries**, and their partial results are merged before returning the final values to the user.; 900There are no guarantees on the order in which threads will process the batches of entries.; 901In particular, note that this means that, for multi-thread event loops, there is no; 902guarantee on the order in which Snapshot() will _write_ entries: they could be scrambled with respect to the input dataset. The values of the special `rdfentry_` column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; 903 ; 904\warning By default, RDataFrame will use as many threads as the hardware supports, using up **all** the resources on; 905a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use; 906~~~{.cpp}; 907ROOT::EnableImplicitMT(i); 908~~~; 909replacing `i` with the number of CPUs/slots that were allocated for this job.; 910 ; 911### Thread-safety of user-defined expressions; 912RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops.; 913User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate(); 914will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; 915 ; 916Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define(); 917expressions will often be *pu",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:51568,Performance,multi-thread,multi-thread,51568,"turning the final values to the user.; 900There are no guarantees on the order in which threads will process the batches of entries.; 901In particular, note that this means that, for multi-thread event loops, there is no; 902guarantee on the order in which Snapshot() will _write_ entries: they could be scrambled with respect to the input dataset. The values of the special `rdfentry_` column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; 903 ; 904\warning By default, RDataFrame will use as many threads as the hardware supports, using up **all** the resources on; 905a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use; 906~~~{.cpp}; 907ROOT::EnableImplicitMT(i); 908~~~; 909replacing `i` with the number of CPUs/slots that were allocated for this job.; 910 ; 911### Thread-safety of user-defined expressions; 912RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops.; 913User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate(); 914will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; 915 ; 916Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define(); 917expressions will often be *pure* in the functional programming sense (no side-effects, no dependency on external state),; 918which eliminates all risks of race conditions.; 919 ; 920In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or \link ROOT::RDF::RResultPtr::OnPartialResult OnPartialResult()\endlink; 921offer thread-aware counterparts (ForeachSlot(), DefineSlot(), \link ROOT::RDF::RResultPtr::OnPartialResultSlot OnPartialResultSlot()\endlink): their only difference is that they",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:51789,Performance,concurren,concurrently,51789,"ries: they could be scrambled with respect to the input dataset. The values of the special `rdfentry_` column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; 903 ; 904\warning By default, RDataFrame will use as many threads as the hardware supports, using up **all** the resources on; 905a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use; 906~~~{.cpp}; 907ROOT::EnableImplicitMT(i); 908~~~; 909replacing `i` with the number of CPUs/slots that were allocated for this job.; 910 ; 911### Thread-safety of user-defined expressions; 912RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops.; 913User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate(); 914will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; 915 ; 916Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define(); 917expressions will often be *pure* in the functional programming sense (no side-effects, no dependency on external state),; 918which eliminates all risks of race conditions.; 919 ; 920In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or \link ROOT::RDF::RResultPtr::OnPartialResult OnPartialResult()\endlink; 921offer thread-aware counterparts (ForeachSlot(), DefineSlot(), \link ROOT::RDF::RResultPtr::OnPartialResultSlot OnPartialResultSlot()\endlink): their only difference is that they; 922will pass an extra `slot` argument (an unsigned integer) to the user-defined expression. When calling user-defined code; 923concurrently, RDataFrame guarantees that different threads will employ different values of the `slot` parameter,; 924where `slot` will be a number between ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:52112,Performance,race condition,race conditions,52112,"in) in multi-thread runs.; 903 ; 904\warning By default, RDataFrame will use as many threads as the hardware supports, using up **all** the resources on; 905a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use; 906~~~{.cpp}; 907ROOT::EnableImplicitMT(i); 908~~~; 909replacing `i` with the number of CPUs/slots that were allocated for this job.; 910 ; 911### Thread-safety of user-defined expressions; 912RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops.; 913User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate(); 914will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; 915 ; 916Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define(); 917expressions will often be *pure* in the functional programming sense (no side-effects, no dependency on external state),; 918which eliminates all risks of race conditions.; 919 ; 920In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or \link ROOT::RDF::RResultPtr::OnPartialResult OnPartialResult()\endlink; 921offer thread-aware counterparts (ForeachSlot(), DefineSlot(), \link ROOT::RDF::RResultPtr::OnPartialResultSlot OnPartialResultSlot()\endlink): their only difference is that they; 922will pass an extra `slot` argument (an unsigned integer) to the user-defined expression. When calling user-defined code; 923concurrently, RDataFrame guarantees that different threads will employ different values of the `slot` parameter,; 924where `slot` will be a number between 0 and `GetNSlots() - 1`.; 925In other words, within a slot, computation runs sequentially and events are processed sequentially.; 926Note that the same slot might be associated to differen",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:53764,Performance,concurren,concurrently,53764,"ter,; 924where `slot` will be a number between 0 and `GetNSlots() - 1`.; 925In other words, within a slot, computation runs sequentially and events are processed sequentially.; 926Note that the same slot might be associated to different threads over the course of a single event loop, but two threads; 927will never receive the same slot at the same time.; 928This extra parameter might facilitate writing safe parallel code by having each thread write/modify a different; 929processing slot, e.g. a different element of a list. See [here](#generic-actions) for an example usage of ForeachSlot().; 930 ; 931### Parallel execution of multiple RDataFrame event loops; 932A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the; 933event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other.; 934On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage.; 935ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently:; 936~~~{.cpp}; 937ROOT::EnableImplicitMT();; 938ROOT::RDataFrame df1(""tree1"", ""f1.root"");; 939ROOT::RDataFrame df2(""tree2"", ""f2.root"");; 940auto histo1 = df1.Histo1D(""x"");; 941auto histo2 = df2.Histo1D(""y"");; 942 ; 943// just accessing result pointers, the event loops of separate RDataFrames run one after the other; 944histo1->Draw(); // runs first multi-thread event loop; 945histo2->Draw(); // runs second multi-thread event loop; 946 ; 947// alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; 948ROOT::RDF::RunGraphs({histo1, histo2});; 949histo1->Draw(); // results can then be used as usual; 950~~~; 951 ; 952### Performance considerations; 953 ; 954To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:53878,Performance,concurren,concurrently,53878,"putation runs sequentially and events are processed sequentially.; 926Note that the same slot might be associated to different threads over the course of a single event loop, but two threads; 927will never receive the same slot at the same time.; 928This extra parameter might facilitate writing safe parallel code by having each thread write/modify a different; 929processing slot, e.g. a different element of a list. See [here](#generic-actions) for an example usage of ForeachSlot().; 930 ; 931### Parallel execution of multiple RDataFrame event loops; 932A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the; 933event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other.; 934On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage.; 935ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently:; 936~~~{.cpp}; 937ROOT::EnableImplicitMT();; 938ROOT::RDataFrame df1(""tree1"", ""f1.root"");; 939ROOT::RDataFrame df2(""tree2"", ""f2.root"");; 940auto histo1 = df1.Histo1D(""x"");; 941auto histo2 = df2.Histo1D(""y"");; 942 ; 943// just accessing result pointers, the event loops of separate RDataFrames run one after the other; 944histo1->Draw(); // runs first multi-thread event loop; 945histo2->Draw(); // runs second multi-thread event loop; 946 ; 947// alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; 948ROOT::RDF::RunGraphs({histo1, histo2});; 949histo1->Draw(); // results can then be used as usual; 950~~~; 951 ; 952### Performance considerations; 953 ; 954To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible.; 955For instance, `Filter(""x > 0"")` requires just-in-time compilation of the corresponding C",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:54243,Performance,multi-thread,multi-thread,54243,"nalysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the; 933event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other.; 934On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage.; 935ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently:; 936~~~{.cpp}; 937ROOT::EnableImplicitMT();; 938ROOT::RDataFrame df1(""tree1"", ""f1.root"");; 939ROOT::RDataFrame df2(""tree2"", ""f2.root"");; 940auto histo1 = df1.Histo1D(""x"");; 941auto histo2 = df2.Histo1D(""y"");; 942 ; 943// just accessing result pointers, the event loops of separate RDataFrames run one after the other; 944histo1->Draw(); // runs first multi-thread event loop; 945histo2->Draw(); // runs second multi-thread event loop; 946 ; 947// alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; 948ROOT::RDF::RunGraphs({histo1, histo2});; 949histo1->Draw(); // results can then be used as usual; 950~~~; 951 ; 952### Performance considerations; 953 ; 954To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible.; 955For instance, `Filter(""x > 0"")` requires just-in-time compilation of the corresponding C++ logic, while the equivalent `Filter([](float x) { return x > 0.; }, {""x""})` does not.; 956Similarly, `Histo1D(""x"")` requires just-in-time compilation after the type of `x` is retrieved from the dataset, while `Histo1D<float>(""x"")` does not; the latter spelling; 957should be preferred for performance-critical applications.; 958 ; 959Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame.; 960See [Efficient analysis in Python](#python) for possible ways to speed up hot paths in this case.; 961 ; 962Just-in-time compilatio",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:54302,Performance,multi-thread,multi-thread,54302,"nalysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the; 933event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other.; 934On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage.; 935ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently:; 936~~~{.cpp}; 937ROOT::EnableImplicitMT();; 938ROOT::RDataFrame df1(""tree1"", ""f1.root"");; 939ROOT::RDataFrame df2(""tree2"", ""f2.root"");; 940auto histo1 = df1.Histo1D(""x"");; 941auto histo2 = df2.Histo1D(""y"");; 942 ; 943// just accessing result pointers, the event loops of separate RDataFrames run one after the other; 944histo1->Draw(); // runs first multi-thread event loop; 945histo2->Draw(); // runs second multi-thread event loop; 946 ; 947// alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; 948ROOT::RDF::RunGraphs({histo1, histo2});; 949histo1->Draw(); // results can then be used as usual; 950~~~; 951 ; 952### Performance considerations; 953 ; 954To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible.; 955For instance, `Filter(""x > 0"")` requires just-in-time compilation of the corresponding C++ logic, while the equivalent `Filter([](float x) { return x > 0.; }, {""x""})` does not.; 956Similarly, `Histo1D(""x"")` requires just-in-time compilation after the type of `x` is retrieved from the dataset, while `Histo1D<float>(""x"")` does not; the latter spelling; 957should be preferred for performance-critical applications.; 958 ; 959Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame.; 960See [Efficient analysis in Python](#python) for possible ways to speed up hot paths in this case.; 961 ; 962Just-in-time compilatio",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:54433,Performance,concurren,concurrently,54433,"nalysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the; 933event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other.; 934On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage.; 935ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently:; 936~~~{.cpp}; 937ROOT::EnableImplicitMT();; 938ROOT::RDataFrame df1(""tree1"", ""f1.root"");; 939ROOT::RDataFrame df2(""tree2"", ""f2.root"");; 940auto histo1 = df1.Histo1D(""x"");; 941auto histo2 = df2.Histo1D(""y"");; 942 ; 943// just accessing result pointers, the event loops of separate RDataFrames run one after the other; 944histo1->Draw(); // runs first multi-thread event loop; 945histo2->Draw(); // runs second multi-thread event loop; 946 ; 947// alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; 948ROOT::RDF::RunGraphs({histo1, histo2});; 949histo1->Draw(); // results can then be used as usual; 950~~~; 951 ; 952### Performance considerations; 953 ; 954To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible.; 955For instance, `Filter(""x > 0"")` requires just-in-time compilation of the corresponding C++ logic, while the equivalent `Filter([](float x) { return x > 0.; }, {""x""})` does not.; 956Similarly, `Histo1D(""x"")` requires just-in-time compilation after the type of `x` is retrieved from the dataset, while `Histo1D<float>(""x"")` does not; the latter spelling; 957should be preferred for performance-critical applications.; 958 ; 959Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame.; 960See [Efficient analysis in Python](#python) for possible ways to speed up hot paths in this case.; 961 ; 962Just-in-time compilatio",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:54628,Performance,perform,performance,54628,"nalysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the; 933event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other.; 934On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage.; 935ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently:; 936~~~{.cpp}; 937ROOT::EnableImplicitMT();; 938ROOT::RDataFrame df1(""tree1"", ""f1.root"");; 939ROOT::RDataFrame df2(""tree2"", ""f2.root"");; 940auto histo1 = df1.Histo1D(""x"");; 941auto histo2 = df2.Histo1D(""y"");; 942 ; 943// just accessing result pointers, the event loops of separate RDataFrames run one after the other; 944histo1->Draw(); // runs first multi-thread event loop; 945histo2->Draw(); // runs second multi-thread event loop; 946 ; 947// alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; 948ROOT::RDF::RunGraphs({histo1, histo2});; 949histo1->Draw(); // results can then be used as usual; 950~~~; 951 ; 952### Performance considerations; 953 ; 954To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible.; 955For instance, `Filter(""x > 0"")` requires just-in-time compilation of the corresponding C++ logic, while the equivalent `Filter([](float x) { return x > 0.; }, {""x""})` does not.; 956Similarly, `Histo1D(""x"")` requires just-in-time compilation after the type of `x` is retrieved from the dataset, while `Histo1D<float>(""x"")` does not; the latter spelling; 957should be preferred for performance-critical applications.; 958 ; 959Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame.; 960See [Efficient analysis in Python](#python) for possible ways to speed up hot paths in this case.; 961 ; 962Just-in-time compilatio",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:55144,Performance,perform,performance-critical,55144,"x"");; 941auto histo2 = df2.Histo1D(""y"");; 942 ; 943// just accessing result pointers, the event loops of separate RDataFrames run one after the other; 944histo1->Draw(); // runs first multi-thread event loop; 945histo2->Draw(); // runs second multi-thread event loop; 946 ; 947// alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; 948ROOT::RDF::RunGraphs({histo1, histo2});; 949histo1->Draw(); // results can then be used as usual; 950~~~; 951 ; 952### Performance considerations; 953 ; 954To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible.; 955For instance, `Filter(""x > 0"")` requires just-in-time compilation of the corresponding C++ logic, while the equivalent `Filter([](float x) { return x > 0.; }, {""x""})` does not.; 956Similarly, `Histo1D(""x"")` requires just-in-time compilation after the type of `x` is retrieved from the dataset, while `Histo1D<float>(""x"")` does not; the latter spelling; 957should be preferred for performance-critical applications.; 958 ; 959Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame.; 960See [Efficient analysis in Python](#python) for possible ways to speed up hot paths in this case.; 961 ; 962Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations *for all RDataFrame computation graphs*; 963before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; 964 ; 965Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging fea",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:65320,Performance,perform,performance,65320,"er, in general each dataframe node will have a different C++ type,; 1092which includes all available compile-time information about what that node does. One way to cope with this complication; 1093is to use template functions and/or C++14 auto return types:; 1094~~~{.cpp}; 1095template <typename RDF>; 1096auto ApplySomeFilters(RDF df); 1097{; 1098 return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; 1099}; 1100~~~; 1101 ; 1102A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be; 1103converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode:; 1104~~~{.cpp}; 1105// a function that conditionally adds a Range to an RDataFrame node.; 1106RNode MaybeAddRange(RNode df, bool mustAddRange); 1107{; 1108 return mustAddRange ? df.Range(1) : df;; 1109}; 1110// use as :; 1111ROOT::RDataFrame df(10);; 1112auto maybeRangedDF = MaybeAddRange(df, true);; 1113~~~; 1114 ; 1115The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event; 1116loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function `ROOT.RDF.AsRNode`.; 1117 ; 1118\anchor RDFCollections; 1119### Storing RDataFrame objects in collections; 1120 ; 1121ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a `std::vector<RNode>` or a `std::map<std::string, RNode>`:; 1122 ; 1123~~~{.cpp}; 1124std::vector<ROOT::RDF::RNode> dfs;; 1125dfs.emplace_back(ROOT::RDataFrame(10));; 1126dfs.emplace_back(dfs[0].Define(""x"", ""42.f""));; 1127~~~; 1128 ; 1129\anchor callbacks; 1130### Executing callbacks every N events; 1131It's possible to schedule execution of arbitrary functions (callbacks) during the event loop.; 1132Callbacks can be used e.g. to inspect partial results of the analysis while the event loop is running,; 1133drawing a partially-filled histogram every time a",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:65379,Performance,perform,perform,65379," template functions and/or C++14 auto return types:; 1094~~~{.cpp}; 1095template <typename RDF>; 1096auto ApplySomeFilters(RDF df); 1097{; 1098 return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; 1099}; 1100~~~; 1101 ; 1102A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be; 1103converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode:; 1104~~~{.cpp}; 1105// a function that conditionally adds a Range to an RDataFrame node.; 1106RNode MaybeAddRange(RNode df, bool mustAddRange); 1107{; 1108 return mustAddRange ? df.Range(1) : df;; 1109}; 1110// use as :; 1111ROOT::RDataFrame df(10);; 1112auto maybeRangedDF = MaybeAddRange(df, true);; 1113~~~; 1114 ; 1115The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event; 1116loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function `ROOT.RDF.AsRNode`.; 1117 ; 1118\anchor RDFCollections; 1119### Storing RDataFrame objects in collections; 1120 ; 1121ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a `std::vector<RNode>` or a `std::map<std::string, RNode>`:; 1122 ; 1123~~~{.cpp}; 1124std::vector<ROOT::RDF::RNode> dfs;; 1125dfs.emplace_back(ROOT::RDataFrame(10));; 1126dfs.emplace_back(dfs[0].Define(""x"", ""42.f""));; 1127~~~; 1128 ; 1129\anchor callbacks; 1130### Executing callbacks every N events; 1131It's possible to schedule execution of arbitrary functions (callbacks) during the event loop.; 1132Callbacks can be used e.g. to inspect partial results of the analysis while the event loop is running,; 1133drawing a partially-filled histogram every time a certain number of new entries is processed, or; 1134displaying a progress bar while the event loop runs.; 1135 ; 1136For example one can draw an up-to-date version of a result histogram every 100 entries ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:68901,Performance,multi-thread,multi-thread,68901,"ouble b2) { return b2 > 0; }, {""b2""}) // we can still specify non-default column lists; 1166 .Min(); // returns the minimum value of ""b1"" for the filtered entries; 1167~~~; 1168 ; 1169\anchor helper-cols; 1170### Special helper columns: rdfentry_ and rdfslot_; 1171Every instance of RDataFrame is created with two special columns called `rdfentry_` and `rdfslot_`. The `rdfentry_`; 1172column is of type `ULong64_t` and it holds the current entry number while `rdfslot_` is an `unsigned int`; 1173holding the index of the current data processing slot.; 1174For backwards compatibility reasons, the names `tdfentry_` and `tdfslot_` are also accepted.; 1175These columns are ignored by operations such as [Cache](classROOT_1_1RDF_1_1RInterface.html#aaaa0a7bb8eb21315d8daa08c3e25f6c9); 1176or [Snapshot](classROOT_1_1RDF_1_1RInterface.html#a233b7723e498967f4340705d2c4db7f8).; 1177 ; 1178\warning Note that in multi-thread event loops the values of `rdfentry_` _do not_ correspond to what would be the entry numbers; 1179of a TChain constructed over the same set of ROOT files, as the entries are processed in an unspecified order.; 1180 ; 1181\anchor jitting; 1182### Just-in-time compilation: column type inference and explicit declaration of column types; 1183C++ is a statically typed language: all types must be known at compile-time. This includes the types of the TTree; 1184branches we want to work on. For filters, defined columns and some of the actions, **column types are deduced from the; 1185signature** of the relevant filter function/temporary column expression/action function:; 1186~~~{.cpp}; 1187// here b1 is deduced to be `int` and b2 to be `double`; 1188df.Filter([](int x, double y) { return x > 0 && y < 0.; }, {""b1"", ""b2""});; 1189~~~; 1190If we specify an incorrect type for one of the columns, an exception with an informative message will be thrown at; 1191runtime, when the column value is actually read from the dataset: RDataFrame detects type mismatches. The same would; 1",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:71060,Performance,perform,performance,71060,"e is actually read from the dataset: RDataFrame detects type mismatches. The same would; 1192happen if we swapped the order of ""b1"" and ""b2"" in the column list passed to Filter().; 1193 ; 1194Certain actions, on the other hand, do not take a function as argument (e.g. Histo1D()), so we cannot deduce the type of; 1195the column at compile-time. In this case **RDataFrame infers the type of the column** from the TTree itself. This; 1196is why we never needed to specify the column types for all actions in the above snippets.; 1197 ; 1198When the column type is not a common one such as `int`, `double`, `char` or `float` it is nonetheless good practice to; 1199specify it as a template parameter to the action itself, like this:; 1200~~~{.cpp}; 1201df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; 1202df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; 1203~~~; 1204 ; 1205Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime; 1206overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; 1207 ; 1208When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing `x = 0` rather than `x == 0`:; 1209 ; 1210~~~{.cpp}; 1211// this throws an error (note the typo); 1212df.Define(""x"", ""0"").Filter(""x = 0"");; 1213~~~; 1214 ; 1215\anchor generic-actions; 1216### User-defined custom actions; 1217RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same; 1218time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; 1219 ; 1220#### Implementing custom actions with Book(); 1221 ; 1222Through the Book() method, users can implement a custom action and have access to the same features; 1223that built-in RDataFrame acti",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:71558,Performance,perform,performed,71558,"n one such as `int`, `double`, `char` or `float` it is nonetheless good practice to; 1199specify it as a template parameter to the action itself, like this:; 1200~~~{.cpp}; 1201df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; 1202df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; 1203~~~; 1204 ; 1205Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime; 1206overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; 1207 ; 1208When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing `x = 0` rather than `x == 0`:; 1209 ; 1210~~~{.cpp}; 1211// this throws an error (note the typo); 1212df.Define(""x"", ""0"").Filter(""x = 0"");; 1213~~~; 1214 ; 1215\anchor generic-actions; 1216### User-defined custom actions; 1217RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same; 1218time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; 1219 ; 1220#### Implementing custom actions with Book(); 1221 ; 1222Through the Book() method, users can implement a custom action and have access to the same features; 1223that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the; 1224event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:; 1225 ; 1226~~~{.cpp}; 1227#include <ROOT/RDataFrame.hxx>; 1228#include <memory>; 1229 ; 1230class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; 1231 std::shared_ptr<int> fFinalResult = std::make_shared<int>(0);; 1232 std::vector<int> fPerThreadResults;; 1233 ; 1234public:; 1235 // We use a public type alias to advertise the type of the result of this action; 1236 using Result_t",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:71657,Performance,perform,perform,71657,"~~{.cpp}; 1201df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; 1202df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; 1203~~~; 1204 ; 1205Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime; 1206overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; 1207 ; 1208When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing `x = 0` rather than `x == 0`:; 1209 ; 1210~~~{.cpp}; 1211// this throws an error (note the typo); 1212df.Define(""x"", ""0"").Filter(""x = 0"");; 1213~~~; 1214 ; 1215\anchor generic-actions; 1216### User-defined custom actions; 1217RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same; 1218time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; 1219 ; 1220#### Implementing custom actions with Book(); 1221 ; 1222Through the Book() method, users can implement a custom action and have access to the same features; 1223that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the; 1224event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:; 1225 ; 1226~~~{.cpp}; 1227#include <ROOT/RDataFrame.hxx>; 1228#include <memory>; 1229 ; 1230class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; 1231 std::shared_ptr<int> fFinalResult = std::make_shared<int>(0);; 1232 std::vector<int> fPerThreadResults;; 1233 ; 1234public:; 1235 // We use a public type alias to advertise the type of the result of this action; 1236 using Result_t = int;; 1237 ; 1238 MyCounter(unsigned int nSlots) : fPerThreadResults(nSlots) {}; 1239 ; 1240 // Called before the event loop to retrieve the address of the resul",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:74202,Performance,perform,perform,74202,"adResults.end(), 0);; 1259 }; 1260 ; 1261 // Called by RDataFrame to retrieve the name of this action.; 1262 std::string GetActionName() const { return ""MyCounter""; }; 1263};; 1264 ; 1265int main() {; 1266 ROOT::RDataFrame df(10);; 1267 ROOT::RDF::RResultPtr<int> resultPtr = df.Book<>(MyCounter{df.GetNSlots()}, {});; 1268 // The GetValue call triggers the event loop; 1269 std::cout << ""Number of processed entries: "" << resultPtr.GetValue() << std::endl;; 1270}; 1271~~~; 1272 ; 1273See the Book() method for more information and [this tutorial](https://root.cern/doc/master/df018__customActions_8C.html); 1274for a more complete example.; 1275 ; 1276#### Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); 1277 ; 1278Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and; 1279executes the callable on the values of those columns for each event that passes all upstream selections.; 1280It can be used to perform actions that are not already available in the interface. For example, the following snippet; 1281evaluates the root mean square of column ""x"":; 1282~~~{.cpp}; 1283// Single-thread evaluation of RMS of column ""x"" using Foreach; 1284double sumSq = 0.;; 1285unsigned int n = 0;; 1286df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; 1287std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; 1288~~~; 1289In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach():; 1290thread will execute the expression concurrently.; 1291The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of `rms`; but; 1292this is probably too much head-scratch for such a simple operation.; 1293 ; 1294ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an; 1295additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame;",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:74642,Performance,multi-thread,multi-thread,74642,"resultPtr.GetValue() << std::endl;; 1270}; 1271~~~; 1272 ; 1273See the Book() method for more information and [this tutorial](https://root.cern/doc/master/df018__customActions_8C.html); 1274for a more complete example.; 1275 ; 1276#### Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); 1277 ; 1278Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and; 1279executes the callable on the values of those columns for each event that passes all upstream selections.; 1280It can be used to perform actions that are not already available in the interface. For example, the following snippet; 1281evaluates the root mean square of column ""x"":; 1282~~~{.cpp}; 1283// Single-thread evaluation of RMS of column ""x"" using Foreach; 1284double sumSq = 0.;; 1285unsigned int n = 0;; 1286df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; 1287std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; 1288~~~; 1289In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach():; 1290thread will execute the expression concurrently.; 1291The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of `rms`; but; 1292this is probably too much head-scratch for such a simple operation.; 1293 ; 1294ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an; 1295additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame; 1296guarantees that ForeachSlot() will invoke the user expression with different `slot` parameters for different concurrent; 1297executions (see [Special helper columns: rdfentry_ and rdfslot_](\ref helper-cols) for more information on the slot parameter).; 1298We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"":; 1299~~~{.cpp}; 1300// Thread-safe evaluation of RMS of column ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:74784,Performance,concurren,concurrently,74784,"resultPtr.GetValue() << std::endl;; 1270}; 1271~~~; 1272 ; 1273See the Book() method for more information and [this tutorial](https://root.cern/doc/master/df018__customActions_8C.html); 1274for a more complete example.; 1275 ; 1276#### Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); 1277 ; 1278Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and; 1279executes the callable on the values of those columns for each event that passes all upstream selections.; 1280It can be used to perform actions that are not already available in the interface. For example, the following snippet; 1281evaluates the root mean square of column ""x"":; 1282~~~{.cpp}; 1283// Single-thread evaluation of RMS of column ""x"" using Foreach; 1284double sumSq = 0.;; 1285unsigned int n = 0;; 1286df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; 1287std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; 1288~~~; 1289In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach():; 1290thread will execute the expression concurrently.; 1291The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of `rms`; but; 1292this is probably too much head-scratch for such a simple operation.; 1293 ; 1294ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an; 1295additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame; 1296guarantees that ForeachSlot() will invoke the user expression with different `slot` parameters for different concurrent; 1297executions (see [Special helper columns: rdfentry_ and rdfslot_](\ref helper-cols) for more information on the slot parameter).; 1298We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"":; 1299~~~{.cpp}; 1300// Thread-safe evaluation of RMS of column ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:74888,Performance,concurren,concurrent,74888,"trary code in the event loop with Foreach() and ForeachSlot(); 1277 ; 1278Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and; 1279executes the callable on the values of those columns for each event that passes all upstream selections.; 1280It can be used to perform actions that are not already available in the interface. For example, the following snippet; 1281evaluates the root mean square of column ""x"":; 1282~~~{.cpp}; 1283// Single-thread evaluation of RMS of column ""x"" using Foreach; 1284double sumSq = 0.;; 1285unsigned int n = 0;; 1286df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; 1287std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; 1288~~~; 1289In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach():; 1290thread will execute the expression concurrently.; 1291The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of `rms`; but; 1292this is probably too much head-scratch for such a simple operation.; 1293 ; 1294ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an; 1295additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame; 1296guarantees that ForeachSlot() will invoke the user expression with different `slot` parameters for different concurrent; 1297executions (see [Special helper columns: rdfentry_ and rdfslot_](\ref helper-cols) for more information on the slot parameter).; 1298We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"":; 1299~~~{.cpp}; 1300// Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; 1301ROOT::EnableImplicitMT();; 1302const unsigned int nSlots = df.GetNSlots();; 1303std::vector<double> sumSqs(nSlots, 0.);; 1304std::vector<unsigned int> ns(nSlots, 0);; 1305 ; 1306df.ForeachSlot([&sumSqs, &ns](unsigned int sl",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:75336,Performance,concurren,concurrent,75336,"umn ""x"":; 1282~~~{.cpp}; 1283// Single-thread evaluation of RMS of column ""x"" using Foreach; 1284double sumSq = 0.;; 1285unsigned int n = 0;; 1286df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; 1287std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; 1288~~~; 1289In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach():; 1290thread will execute the expression concurrently.; 1291The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of `rms`; but; 1292this is probably too much head-scratch for such a simple operation.; 1293 ; 1294ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an; 1295additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame; 1296guarantees that ForeachSlot() will invoke the user expression with different `slot` parameters for different concurrent; 1297executions (see [Special helper columns: rdfentry_ and rdfslot_](\ref helper-cols) for more information on the slot parameter).; 1298We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"":; 1299~~~{.cpp}; 1300// Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; 1301ROOT::EnableImplicitMT();; 1302const unsigned int nSlots = df.GetNSlots();; 1303std::vector<double> sumSqs(nSlots, 0.);; 1304std::vector<unsigned int> ns(nSlots, 0);; 1305 ; 1306df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; 1307double sumSq = std::accumulate(sumSqs.begin(), sumSqs.end(), 0.); // sum all squares; 1308unsigned int n = std::accumulate(ns.begin(), ns.end(), 0); // sum all counts; 1309std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; 1310~~~; 1311Notice how we created one `double` variable for each processing slot and later merged their results via `std::accumulate`.; 1312 ; 1",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:77892,Performance,multi-thread,multi-thread,77892,"rees) leverages TTree's ""friend"" mechanism.; 1323 ; 1324Simple joins of trees that do not have the same number of rows are also possible with indexed friend trees (see below).; 1325 ; 1326To use friend trees in RDataFrame, set up trees with the appropriate relationships and then instantiate an RDataFrame; 1327with the main tree:; 1328 ; 1329~~~{.cpp}; 1330TTree main([...]);; 1331TTree friend([...]);; 1332main.AddFriend(&friend, ""myFriend"");; 1333 ; 1334RDataFrame df(main);; 1335auto df2 = df.Filter(""myFriend.MyCol == 42"");; 1336~~~; 1337 ; 1338The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above,; 1339or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of; 1340""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; 1341 ; 1342\note A common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their; 1343 entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original; 1344 one: rows will be mismatched.; 1345 ; 1346Indexed friend trees provide a way to perform simple joins of multiple trees over a common column.; 1347When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the; 1348""index"" columns have a value identical to the one in the main one. For example, in Python:; 1349 ; 1350~~~{.py}; 1351main_tree = ...; 1352aux_tree = ...; 1353 ; 1354# If a friend tree has an index on `commonColumn`, when the main tree loads; 1355# a given row, it also loads the row of the friend tree that has the same; 1356# value of `commonColumn`; 1357aux_tree.BuildIndex(""commonColumn""); 1358 ; 1359mainTree.AddFriend(aux_tree); 1360 ; 1361df = ROOT.RDataFrame(mainTree); 1362~~~; 1363 ; 1364RDataFrame supports indexed friend TTrees from ROOT v6.24 in single",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:78147,Performance,perform,perform,78147,"propriate relationships and then instantiate an RDataFrame; 1327with the main tree:; 1328 ; 1329~~~{.cpp}; 1330TTree main([...]);; 1331TTree friend([...]);; 1332main.AddFriend(&friend, ""myFriend"");; 1333 ; 1334RDataFrame df(main);; 1335auto df2 = df.Filter(""myFriend.MyCol == 42"");; 1336~~~; 1337 ; 1338The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above,; 1339or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of; 1340""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; 1341 ; 1342\note A common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their; 1343 entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original; 1344 one: rows will be mismatched.; 1345 ; 1346Indexed friend trees provide a way to perform simple joins of multiple trees over a common column.; 1347When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the; 1348""index"" columns have a value identical to the one in the main one. For example, in Python:; 1349 ; 1350~~~{.py}; 1351main_tree = ...; 1352aux_tree = ...; 1353 ; 1354# If a friend tree has an index on `commonColumn`, when the main tree loads; 1355# a given row, it also loads the row of the friend tree that has the same; 1356# value of `commonColumn`; 1357aux_tree.BuildIndex(""commonColumn""); 1358 ; 1359mainTree.AddFriend(aux_tree); 1360 ; 1361df = ROOT.RDataFrame(mainTree); 1362~~~; 1363 ; 1364RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode.; 1365 ; 1366\anchor other-file-formats; 1367### Reading data formats other than ROOT trees; 1368RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an AP",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:78265,Performance,load,loaded,78265," 1332main.AddFriend(&friend, ""myFriend"");; 1333 ; 1334RDataFrame df(main);; 1335auto df2 = df.Filter(""myFriend.MyCol == 42"");; 1336~~~; 1337 ; 1338The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above,; 1339or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of; 1340""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; 1341 ; 1342\note A common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their; 1343 entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original; 1344 one: rows will be mismatched.; 1345 ; 1346Indexed friend trees provide a way to perform simple joins of multiple trees over a common column.; 1347When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the; 1348""index"" columns have a value identical to the one in the main one. For example, in Python:; 1349 ; 1350~~~{.py}; 1351main_tree = ...; 1352aux_tree = ...; 1353 ; 1354# If a friend tree has an index on `commonColumn`, when the main tree loads; 1355# a given row, it also loads the row of the friend tree that has the same; 1356# value of `commonColumn`; 1357aux_tree.BuildIndex(""commonColumn""); 1358 ; 1359mainTree.AddFriend(aux_tree); 1360 ; 1361df = ROOT.RDataFrame(mainTree); 1362~~~; 1363 ; 1364RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode.; 1365 ; 1366\anchor other-file-formats; 1367### Reading data formats other than ROOT trees; 1368RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; 1369 ; 1370RDataFrame calls into concrete RDataSource implementations to retrieve infor",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:78312,Performance,load,load,78312," 1332main.AddFriend(&friend, ""myFriend"");; 1333 ; 1334RDataFrame df(main);; 1335auto df2 = df.Filter(""myFriend.MyCol == 42"");; 1336~~~; 1337 ; 1338The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above,; 1339or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of; 1340""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; 1341 ; 1342\note A common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their; 1343 entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original; 1344 one: rows will be mismatched.; 1345 ; 1346Indexed friend trees provide a way to perform simple joins of multiple trees over a common column.; 1347When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the; 1348""index"" columns have a value identical to the one in the main one. For example, in Python:; 1349 ; 1350~~~{.py}; 1351main_tree = ...; 1352aux_tree = ...; 1353 ; 1354# If a friend tree has an index on `commonColumn`, when the main tree loads; 1355# a given row, it also loads the row of the friend tree that has the same; 1356# value of `commonColumn`; 1357aux_tree.BuildIndex(""commonColumn""); 1358 ; 1359mainTree.AddFriend(aux_tree); 1360 ; 1361df = ROOT.RDataFrame(mainTree); 1362~~~; 1363 ; 1364RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode.; 1365 ; 1366\anchor other-file-formats; 1367### Reading data formats other than ROOT trees; 1368RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; 1369 ; 1370RDataFrame calls into concrete RDataSource implementations to retrieve infor",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:78576,Performance,load,loads,78576,"friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of; 1340""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; 1341 ; 1342\note A common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their; 1343 entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original; 1344 one: rows will be mismatched.; 1345 ; 1346Indexed friend trees provide a way to perform simple joins of multiple trees over a common column.; 1347When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the; 1348""index"" columns have a value identical to the one in the main one. For example, in Python:; 1349 ; 1350~~~{.py}; 1351main_tree = ...; 1352aux_tree = ...; 1353 ; 1354# If a friend tree has an index on `commonColumn`, when the main tree loads; 1355# a given row, it also loads the row of the friend tree that has the same; 1356# value of `commonColumn`; 1357aux_tree.BuildIndex(""commonColumn""); 1358 ; 1359mainTree.AddFriend(aux_tree); 1360 ; 1361df = ROOT.RDataFrame(mainTree); 1362~~~; 1363 ; 1364RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode.; 1365 ; 1366\anchor other-file-formats; 1367### Reading data formats other than ROOT trees; 1368RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; 1369 ; 1370RDataFrame calls into concrete RDataSource implementations to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns; 1371and to advance the readers to the desired data entry.; 1372Some predefined RDataSources are natively provided by ROOT such as the ROOT::RDF::RCsvDS which allows to read comma separated files:; 1373~~",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:78610,Performance,load,loads,78610,"friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of; 1340""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; 1341 ; 1342\note A common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their; 1343 entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original; 1344 one: rows will be mismatched.; 1345 ; 1346Indexed friend trees provide a way to perform simple joins of multiple trees over a common column.; 1347When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the; 1348""index"" columns have a value identical to the one in the main one. For example, in Python:; 1349 ; 1350~~~{.py}; 1351main_tree = ...; 1352aux_tree = ...; 1353 ; 1354# If a friend tree has an index on `commonColumn`, when the main tree loads; 1355# a given row, it also loads the row of the friend tree that has the same; 1356# value of `commonColumn`; 1357aux_tree.BuildIndex(""commonColumn""); 1358 ; 1359mainTree.AddFriend(aux_tree); 1360 ; 1361df = ROOT.RDataFrame(mainTree); 1362~~~; 1363 ; 1364RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode.; 1365 ; 1366\anchor other-file-formats; 1367### Reading data formats other than ROOT trees; 1368RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; 1369 ; 1370RDataFrame calls into concrete RDataSource implementations to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns; 1371and to advance the readers to the desired data entry.; 1372Some predefined RDataSources are natively provided by ROOT such as the ROOT::RDF::RCsvDS which allows to read comma separated files:; 1373~~",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:78939,Performance,multi-thread,multi-thread,78939,"entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original; 1344 one: rows will be mismatched.; 1345 ; 1346Indexed friend trees provide a way to perform simple joins of multiple trees over a common column.; 1347When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the; 1348""index"" columns have a value identical to the one in the main one. For example, in Python:; 1349 ; 1350~~~{.py}; 1351main_tree = ...; 1352aux_tree = ...; 1353 ; 1354# If a friend tree has an index on `commonColumn`, when the main tree loads; 1355# a given row, it also loads the row of the friend tree that has the same; 1356# value of `commonColumn`; 1357aux_tree.BuildIndex(""commonColumn""); 1358 ; 1359mainTree.AddFriend(aux_tree); 1360 ; 1361df = ROOT.RDataFrame(mainTree); 1362~~~; 1363 ; 1364RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode.; 1365 ; 1366\anchor other-file-formats; 1367### Reading data formats other than ROOT trees; 1368RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; 1369 ; 1370RDataFrame calls into concrete RDataSource implementations to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns; 1371and to advance the readers to the desired data entry.; 1372Some predefined RDataSources are natively provided by ROOT such as the ROOT::RDF::RCsvDS which allows to read comma separated files:; 1373~~~{.cpp}; 1374auto tdf = ROOT::RDF::FromCSV(""MuRun2010B.csv"");; 1375auto filteredEvents =; 1376 tdf.Filter(""Q1 * Q2 == -1""); 1377 .Define(""m"", ""sqrt(pow(E1 + E2, 2) - (pow(px1 + px2, 2) + pow(py1 + py2, 2) + pow(pz1 + pz2, 2)))"");; 1378auto h = filteredEvents.Histo1D(""m"");; 1379h->Draw();; 1380~~~; 1381 ; 1382See also FromNumpy (Python-only), ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:83187,Performance,multi-thread,multi-thread,83187,"tance, the image below can be generated with the following command:; 1423~~~{.sh}; 1424$ dot -Tpng computation_graph.dot -ocomputation_graph.png; 1425~~~; 1426 ; 1427\image html RDF_Graph2.png; 1428 ; 1429\anchor rdf-logging; 1430### Activating RDataFrame execution logs; 1431 ; 1432RDataFrame has experimental support for verbose logging of the event loop runtimes and other interesting related information. It is activated as follows:; 1433~~~{.cpp}; 1434#include <ROOT/RLogger.hxx>; 1435 ; 1436// this increases RDF's verbosity level as long as the `verbosity` variable is in scope; 1437auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel::kInfo);; 1438~~~; 1439 ; 1440or in Python:; 1441~~~{.python}; 1442import ROOT; 1443 ; 1444verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kInfo); 1445~~~; 1446 ; 1447More information (e.g. start and end of each multi-thread task) is printed using `ELogLevel.kDebug` and even more; 1448(e.g. a full dump of the generated code that RDataFrame just-in-time-compiles) using `ELogLevel.kDebug+10`.; 1449 ; 1450\anchor rdf-from-spec; 1451### Creating an RDataFrame from a dataset specification file; 1452 ; 1453RDataFrame can be created using a dataset specification JSON file: ; 1454 ; 1455~~~{.python}; 1456import ROOT; 1457 ; 1458df = ROOT.RDF.Experimental.FromSpec(""spec.json""); 1459~~~; 1460 ; 1461The input dataset specification JSON file needs to be provided by the user and it describes all necessary samples and; 1462their associated metadata information. The main required key is the ""samples"" (at least one sample is needed) and the; 1463required sub-keys for each sample are ""trees"" and ""files"". Additionally, one can specify a metadata dictionary for each; 1464sample in the ""metadata"" key.; 1465 ; 1466A simple example for the formatting of the specification in the JSON file is the following:; 1467 ; 1468~~~{.cpp}",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:2201,Safety,safe,safe,2201,"> // for make_shared, allocator, shared_ptr; 27#include <ostream> // ostringstream; 28#include <stdexcept>; 29#include <string>; 30#include <vector>; 31 ; 32// clang-format off; 33/**; 34* \class ROOT::RDataFrame; 35* \ingroup dataframe; 36* \brief ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python.; 37 ; 38In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available; 39on their machines completely transparently.<br>; 40Skip to the [class reference](#reference) or keep reading for the user guide.; 41 ; 42In a nutshell:; 43~~~{.cpp}; 44ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; 45ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; 46auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; 47myHisto->Draw(); // Event loop is run here, upon first access to a result; 48~~~; 49 ; 50Calculations are expressed in terms of a type-safe *functional chain of actions and transformations*, RDataFrame takes; 51care of their execution. The implementation automatically puts in place several low level optimisations such as; 52multi-thread parallelization and caching.; 53 ; 54\htmlonly; 55<a href=""https://doi.org/10.5281/zenodo.260230""><img src=""https://zenodo.org/badge/DOI/10.5281/zenodo.260230.svg""; 56alt=""DOI""></a>; 57\endhtmlonly; 58 ; 59## For the impatient user; 60You can directly see RDataFrame in action in our [tutorials](https://root.cern/doc/master/group__tutorial__dataframe.html), in C++ or Python.; 61 ; 62## Table of Contents; 63- [Cheat sheet](\ref cheatsheet); 64- [Introduction](\ref introduction); 65- [Crash course](\ref crash-course); 66- [Working with collections](\ref collections); 67- [Transformations: manipulating data](\ref transformations); 68- [Actions: getting results](\ref actions); 69- [Distributed execution in Python](\ref distrdf); 70- [Perf",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:5487,Safety,safe,safe,5487," 90\anchor cheatsheet; 91## Cheat sheet; 92These are the operations which can be performed with RDataFrame.; 93 ; 94### Transformations; 95Transformations are a way to manipulate the data.; 96 ; 97| **Transformation** | **Description** |; 98|------------------|--------------------|; 99| Alias() | Introduce an alias for a particular column name. |; 100| Define() | Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the `pt`s of ""good"" muons). |; 101| DefinePerSample() | Define a new column that is updated when the input sample changes, e.g. when switching tree being processed in a chain. |; 102| DefineSlot() | Same as Define(), but the user-defined function must take an extra `unsigned int slot` as its first parameter. `slot` will take a different value, `0` to `nThreads - 1`, for each thread of execution. This is meant as a helper in writing thread-safe Define() transformation when using RDataFrame after ROOT::EnableImplicitMT(). DefineSlot() works just as well with single-thread execution: in that case `slot` will always be `0`. |; 103| DefineSlotEntry() | Same as DefineSlot(), but the entry number is passed in addition to the slot number. This is meant as a helper in case the expression depends on the entry number. For details about entry numbers in multi-threaded runs, see [here](\ref helper-cols). |; 104| Filter() | Filter rows based on user-defined conditions. |; 105| Range() | Filter rows based on entry number (single-thread only). |; 106| Redefine() | Overwrite the value and/or type of an existing column. See Define() for more information. |; 107| RedefineSlot() | Overwrite the value and/or type of an existing column. See DefineSlot() for more information. |; 108| RedefineSlotEntry() | Overwrite the value and/or type of an existing column. See DefineSlotEntry() for more information. |; 109| Vary() | Register systematic variations for an exis",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:10529,Safety,safe,safety,10529," entries have been accepted and rejected by the filters. See the section on [named filters](#named-filters-and-cutflow-reports) for a more detailed explanation. The method returns a ROOT::RDF::RCutFlowReport instance which can be queried programmatically to get information about the effects of the individual cuts. |; 139| Stats() | Return a TStatistic object filled with the input columns. |; 140| StdDev() | Return the unbiased standard deviation of the processed column values. |; 141| Sum() | Return the sum of the values in the column. If the type of the column is inferred, the return type is `double`, the type of the column otherwise. |; 142| Take() | Extract a column from the dataset as a collection of values, e.g. a `std::vector<float>` for a column of type `float`. |; 143 ; 144| **Instant action** | **Description** |; 145|---------------------|-----------------|; 146| Foreach() | Execute a user-defined function on each entry. Users are responsible for the thread-safety of this callable when executing with implicit multi-threading enabled. |; 147| ForeachSlot() | Same as Foreach(), but the user-defined function must take an extra `unsigned int slot` as its first parameter. `slot` will take a different value, `0` to `nThreads - 1`, for each thread of execution. This is meant as a helper in writing thread-safe Foreach() actions when using RDataFrame after ROOT::EnableImplicitMT(). ForeachSlot() works just as well with single-thread execution: in that case `slot` will always be `0`. |; 148| Snapshot() | Write the processed dataset to disk, in a new TTree and TFile. Custom columns can be saved as well, filtered entries are not saved. Users can specify which columns to save (default is all). Snapshot, by default, overwrites the output file if it already exists. Snapshot() can be made *lazy* setting the appropriate flag in the snapshot options.|; 149 ; 150 ; 151### Queries; 152 ; 153These operations do not modify the dataframe or book computations but simply return info",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:10876,Safety,safe,safe,10876,"TStatistic object filled with the input columns. |; 140| StdDev() | Return the unbiased standard deviation of the processed column values. |; 141| Sum() | Return the sum of the values in the column. If the type of the column is inferred, the return type is `double`, the type of the column otherwise. |; 142| Take() | Extract a column from the dataset as a collection of values, e.g. a `std::vector<float>` for a column of type `float`. |; 143 ; 144| **Instant action** | **Description** |; 145|---------------------|-----------------|; 146| Foreach() | Execute a user-defined function on each entry. Users are responsible for the thread-safety of this callable when executing with implicit multi-threading enabled. |; 147| ForeachSlot() | Same as Foreach(), but the user-defined function must take an extra `unsigned int slot` as its first parameter. `slot` will take a different value, `0` to `nThreads - 1`, for each thread of execution. This is meant as a helper in writing thread-safe Foreach() actions when using RDataFrame after ROOT::EnableImplicitMT(). ForeachSlot() works just as well with single-thread execution: in that case `slot` will always be `0`. |; 148| Snapshot() | Write the processed dataset to disk, in a new TTree and TFile. Custom columns can be saved as well, filtered entries are not saved. Users can specify which columns to save (default is all). Snapshot, by default, overwrites the output file if it already exists. Snapshot() can be made *lazy* setting the appropriate flag in the snapshot options.|; 149 ; 150 ; 151### Queries; 152 ; 153These operations do not modify the dataframe or book computations but simply return information on the RDataFrame object.; 154 ; 155| **Operation** | **Description** |; 156|---------------------|-----------------|; 157| Describe() | Get useful information describing the dataframe, e.g. columns and their types. |; 158| GetColumnNames() | Get the names of all the available columns of the dataset. |; 159| GetColumnType() | Return ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:51439,Safety,safe,safety,51439,"turning the final values to the user.; 900There are no guarantees on the order in which threads will process the batches of entries.; 901In particular, note that this means that, for multi-thread event loops, there is no; 902guarantee on the order in which Snapshot() will _write_ entries: they could be scrambled with respect to the input dataset. The values of the special `rdfentry_` column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; 903 ; 904\warning By default, RDataFrame will use as many threads as the hardware supports, using up **all** the resources on; 905a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use; 906~~~{.cpp}; 907ROOT::EnableImplicitMT(i); 908~~~; 909replacing `i` with the number of CPUs/slots that were allocated for this job.; 910 ; 911### Thread-safety of user-defined expressions; 912RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops.; 913User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate(); 914will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; 915 ; 916Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define(); 917expressions will often be *pure* in the functional programming sense (no side-effects, no dependency on external state),; 918which eliminates all risks of race conditions.; 919 ; 920In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or \link ROOT::RDF::RResultPtr::OnPartialResult OnPartialResult()\endlink; 921offer thread-aware counterparts (ForeachSlot(), DefineSlot(), \link ROOT::RDF::RResultPtr::OnPartialResultSlot OnPartialResultSlot()\endlink): their only difference is that they",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:51743,Safety,safe,safe,51743,"means that, for multi-thread event loops, there is no; 902guarantee on the order in which Snapshot() will _write_ entries: they could be scrambled with respect to the input dataset. The values of the special `rdfentry_` column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; 903 ; 904\warning By default, RDataFrame will use as many threads as the hardware supports, using up **all** the resources on; 905a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use; 906~~~{.cpp}; 907ROOT::EnableImplicitMT(i); 908~~~; 909replacing `i` with the number of CPUs/slots that were allocated for this job.; 910 ; 911### Thread-safety of user-defined expressions; 912RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops.; 913User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate(); 914will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; 915 ; 916Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define(); 917expressions will often be *pure* in the functional programming sense (no side-effects, no dependency on external state),; 918which eliminates all risks of race conditions.; 919 ; 920In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or \link ROOT::RDF::RResultPtr::OnPartialResult OnPartialResult()\endlink; 921offer thread-aware counterparts (ForeachSlot(), DefineSlot(), \link ROOT::RDF::RResultPtr::OnPartialResultSlot OnPartialResultSlot()\endlink): their only difference is that they; 922will pass an extra `slot` argument (an unsigned integer) to the user-defined expression. When calling user-defined code; 923concurrently, RDataFrame guarantees th",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:52103,Safety,risk,risks,52103,"in) in multi-thread runs.; 903 ; 904\warning By default, RDataFrame will use as many threads as the hardware supports, using up **all** the resources on; 905a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use; 906~~~{.cpp}; 907ROOT::EnableImplicitMT(i); 908~~~; 909replacing `i` with the number of CPUs/slots that were allocated for this job.; 910 ; 911### Thread-safety of user-defined expressions; 912RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops.; 913User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate(); 914will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; 915 ; 916Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define(); 917expressions will often be *pure* in the functional programming sense (no side-effects, no dependency on external state),; 918which eliminates all risks of race conditions.; 919 ; 920In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or \link ROOT::RDF::RResultPtr::OnPartialResult OnPartialResult()\endlink; 921offer thread-aware counterparts (ForeachSlot(), DefineSlot(), \link ROOT::RDF::RResultPtr::OnPartialResultSlot OnPartialResultSlot()\endlink): their only difference is that they; 922will pass an extra `slot` argument (an unsigned integer) to the user-defined expression. When calling user-defined code; 923concurrently, RDataFrame guarantees that different threads will employ different values of the `slot` parameter,; 924where `slot` will be a number between 0 and `GetNSlots() - 1`.; 925In other words, within a slot, computation runs sequentially and events are processed sequentially.; 926Note that the same slot might be associated to differen",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:52180,Safety,safe,safe,52180,"number of CPUs/slots that were allocated for this job.; 910 ; 911### Thread-safety of user-defined expressions; 912RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops.; 913User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate(); 914will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; 915 ; 916Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define(); 917expressions will often be *pure* in the functional programming sense (no side-effects, no dependency on external state),; 918which eliminates all risks of race conditions.; 919 ; 920In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or \link ROOT::RDF::RResultPtr::OnPartialResult OnPartialResult()\endlink; 921offer thread-aware counterparts (ForeachSlot(), DefineSlot(), \link ROOT::RDF::RResultPtr::OnPartialResultSlot OnPartialResultSlot()\endlink): their only difference is that they; 922will pass an extra `slot` argument (an unsigned integer) to the user-defined expression. When calling user-defined code; 923concurrently, RDataFrame guarantees that different threads will employ different values of the `slot` parameter,; 924where `slot` will be a number between 0 and `GetNSlots() - 1`.; 925In other words, within a slot, computation runs sequentially and events are processed sequentially.; 926Note that the same slot might be associated to different threads over the course of a single event loop, but two threads; 927will never receive the same slot at the same time.; 928This extra parameter might facilitate writing safe parallel code by having each thread write/modify a different; 929processing slot, e.g. a different element of a list. See [here](#generic-actions) for an example usage of ForeachSlot().; 930 ; 931### Parallel e",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:53148,Safety,safe,safe,53148,"ng of thread-safe operations, some RDataFrame features such as Foreach(), Define() or \link ROOT::RDF::RResultPtr::OnPartialResult OnPartialResult()\endlink; 921offer thread-aware counterparts (ForeachSlot(), DefineSlot(), \link ROOT::RDF::RResultPtr::OnPartialResultSlot OnPartialResultSlot()\endlink): their only difference is that they; 922will pass an extra `slot` argument (an unsigned integer) to the user-defined expression. When calling user-defined code; 923concurrently, RDataFrame guarantees that different threads will employ different values of the `slot` parameter,; 924where `slot` will be a number between 0 and `GetNSlots() - 1`.; 925In other words, within a slot, computation runs sequentially and events are processed sequentially.; 926Note that the same slot might be associated to different threads over the course of a single event loop, but two threads; 927will never receive the same slot at the same time.; 928This extra parameter might facilitate writing safe parallel code by having each thread write/modify a different; 929processing slot, e.g. a different element of a list. See [here](#generic-actions) for an example usage of ForeachSlot().; 930 ; 931### Parallel execution of multiple RDataFrame event loops; 932A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the; 933event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other.; 934On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage.; 935ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently:; 936~~~{.cpp}; 937ROOT::EnableImplicitMT();; 938ROOT::RDataFrame df1(""tree1"", ""f1.root"");; 939ROOT::RDataFrame df2(""tree2"", ""f2.root"");; 940auto histo1 = df1.Histo1D(""x"");; 941auto histo2 = df2.Histo1D(""y"");; 942 ; 943// just accessing result pointers, the event loops of sep",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:54672,Safety,avoid,avoid,54672,"nalysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the; 933event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other.; 934On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage.; 935ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently:; 936~~~{.cpp}; 937ROOT::EnableImplicitMT();; 938ROOT::RDataFrame df1(""tree1"", ""f1.root"");; 939ROOT::RDataFrame df2(""tree2"", ""f2.root"");; 940auto histo1 = df1.Histo1D(""x"");; 941auto histo2 = df2.Histo1D(""y"");; 942 ; 943// just accessing result pointers, the event loops of separate RDataFrames run one after the other; 944histo1->Draw(); // runs first multi-thread event loop; 945histo2->Draw(); // runs second multi-thread event loop; 946 ; 947// alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; 948ROOT::RDF::RunGraphs({histo1, histo2});; 949histo1->Draw(); // results can then be used as usual; 950~~~; 951 ; 952### Performance considerations; 953 ; 954To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible.; 955For instance, `Filter(""x > 0"")` requires just-in-time compilation of the corresponding C++ logic, while the equivalent `Filter([](float x) { return x > 0.; }, {""x""})` does not.; 956Similarly, `Histo1D(""x"")` requires just-in-time compilation after the type of `x` is retrieved from the dataset, while `Histo1D<float>(""x"")` does not; the latter spelling; 957should be preferred for performance-critical applications.; 958 ; 959Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame.; 960See [Efficient analysis in Python](#python) for possible ways to speed up hot paths in this case.; 961 ; 962Just-in-time compilatio",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:69952,Safety,detect,detects,69952,"4340705d2c4db7f8).; 1177 ; 1178\warning Note that in multi-thread event loops the values of `rdfentry_` _do not_ correspond to what would be the entry numbers; 1179of a TChain constructed over the same set of ROOT files, as the entries are processed in an unspecified order.; 1180 ; 1181\anchor jitting; 1182### Just-in-time compilation: column type inference and explicit declaration of column types; 1183C++ is a statically typed language: all types must be known at compile-time. This includes the types of the TTree; 1184branches we want to work on. For filters, defined columns and some of the actions, **column types are deduced from the; 1185signature** of the relevant filter function/temporary column expression/action function:; 1186~~~{.cpp}; 1187// here b1 is deduced to be `int` and b2 to be `double`; 1188df.Filter([](int x, double y) { return x > 0 && y < 0.; }, {""b1"", ""b2""});; 1189~~~; 1190If we specify an incorrect type for one of the columns, an exception with an informative message will be thrown at; 1191runtime, when the column value is actually read from the dataset: RDataFrame detects type mismatches. The same would; 1192happen if we swapped the order of ""b1"" and ""b2"" in the column list passed to Filter().; 1193 ; 1194Certain actions, on the other hand, do not take a function as argument (e.g. Histo1D()), so we cannot deduce the type of; 1195the column at compile-time. In this case **RDataFrame infers the type of the column** from the TTree itself. This; 1196is why we never needed to specify the column types for all actions in the above snippets.; 1197 ; 1198When the column type is not a common one such as `int`, `double`, `char` or `float` it is nonetheless good practice to; 1199specify it as a template parameter to the action itself, like this:; 1200~~~{.cpp}; 1201df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; 1202df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; 1203~~~; 1204 ; 1205Deducing types a",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:71207,Safety,avoid,avoids,71207,"In this case **RDataFrame infers the type of the column** from the TTree itself. This; 1196is why we never needed to specify the column types for all actions in the above snippets.; 1197 ; 1198When the column type is not a common one such as `int`, `double`, `char` or `float` it is nonetheless good practice to; 1199specify it as a template parameter to the action itself, like this:; 1200~~~{.cpp}; 1201df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; 1202df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; 1203~~~; 1204 ; 1205Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime; 1206overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; 1207 ; 1208When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing `x = 0` rather than `x == 0`:; 1209 ; 1210~~~{.cpp}; 1211// this throws an error (note the typo); 1212df.Define(""x"", ""0"").Filter(""x = 0"");; 1213~~~; 1214 ; 1215\anchor generic-actions; 1216### User-defined custom actions; 1217RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same; 1218time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; 1219 ; 1220#### Implementing custom actions with Book(); 1221 ; 1222Through the Book() method, users can implement a custom action and have access to the same features; 1223that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the; 1224event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:; 1225 ; 1226~~~{.cpp}; 1227#include <ROOT/RDataFrame.hxx>; 1228#include <memory>; 1229 ; 1230class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; 1231 std",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:74698,Safety,safe,safety,74698,"resultPtr.GetValue() << std::endl;; 1270}; 1271~~~; 1272 ; 1273See the Book() method for more information and [this tutorial](https://root.cern/doc/master/df018__customActions_8C.html); 1274for a more complete example.; 1275 ; 1276#### Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); 1277 ; 1278Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and; 1279executes the callable on the values of those columns for each event that passes all upstream selections.; 1280It can be used to perform actions that are not already available in the interface. For example, the following snippet; 1281evaluates the root mean square of column ""x"":; 1282~~~{.cpp}; 1283// Single-thread evaluation of RMS of column ""x"" using Foreach; 1284double sumSq = 0.;; 1285unsigned int n = 0;; 1286df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; 1287std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; 1288~~~; 1289In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach():; 1290thread will execute the expression concurrently.; 1291The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of `rms`; but; 1292this is probably too much head-scratch for such a simple operation.; 1293 ; 1294ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an; 1295additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame; 1296guarantees that ForeachSlot() will invoke the user expression with different `slot` parameters for different concurrent; 1297executions (see [Special helper columns: rdfentry_ and rdfslot_](\ref helper-cols) for more information on the slot parameter).; 1298We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"":; 1299~~~{.cpp}; 1300// Thread-safe evaluation of RMS of column ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:75545,Safety,safe,safe,75545,"q += x*x; }, {""x""});; 1287std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; 1288~~~; 1289In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach():; 1290thread will execute the expression concurrently.; 1291The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of `rms`; but; 1292this is probably too much head-scratch for such a simple operation.; 1293 ; 1294ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an; 1295additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame; 1296guarantees that ForeachSlot() will invoke the user expression with different `slot` parameters for different concurrent; 1297executions (see [Special helper columns: rdfentry_ and rdfslot_](\ref helper-cols) for more information on the slot parameter).; 1298We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"":; 1299~~~{.cpp}; 1300// Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; 1301ROOT::EnableImplicitMT();; 1302const unsigned int nSlots = df.GetNSlots();; 1303std::vector<double> sumSqs(nSlots, 0.);; 1304std::vector<unsigned int> ns(nSlots, 0);; 1305 ; 1306df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; 1307double sumSq = std::accumulate(sumSqs.begin(), sumSqs.end(), 0.); // sum all squares; 1308unsigned int n = std::accumulate(ns.begin(), ns.end(), 0); // sum all counts; 1309std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; 1310~~~; 1311Notice how we created one `double` variable for each processing slot and later merged their results via `std::accumulate`.; 1312 ; 1313 ; 1314\anchor friends; 1315### Dataset joins with friend trees; 1316 ; 1317Vertically concatenating multiple trees that have the same columns (creating a logical dataset with the same col",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:75612,Safety,safe,safe,75612,"ers are responsible for the thread-safety of the expression passed to Foreach():; 1290thread will execute the expression concurrently.; 1291The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of `rms`; but; 1292this is probably too much head-scratch for such a simple operation.; 1293 ; 1294ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an; 1295additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame; 1296guarantees that ForeachSlot() will invoke the user expression with different `slot` parameters for different concurrent; 1297executions (see [Special helper columns: rdfentry_ and rdfslot_](\ref helper-cols) for more information on the slot parameter).; 1298We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"":; 1299~~~{.cpp}; 1300// Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; 1301ROOT::EnableImplicitMT();; 1302const unsigned int nSlots = df.GetNSlots();; 1303std::vector<double> sumSqs(nSlots, 0.);; 1304std::vector<unsigned int> ns(nSlots, 0);; 1305 ; 1306df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; 1307double sumSq = std::accumulate(sumSqs.begin(), sumSqs.end(), 0.); // sum all squares; 1308unsigned int n = std::accumulate(ns.begin(), ns.end(), 0); // sum all counts; 1309std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; 1310~~~; 1311Notice how we created one `double` variable for each processing slot and later merged their results via `std::accumulate`.; 1312 ; 1313 ; 1314\anchor friends; 1315### Dataset joins with friend trees; 1316 ; 1317Vertically concatenating multiple trees that have the same columns (creating a logical dataset with the same columns and; 1318more rows) is trivial in RDataFrame: just pass the tree name and a list of file names to RDataFrame's constructor",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:80440,Safety,detect,detects,80440,":RCsvDS which allows to read comma separated files:; 1373~~~{.cpp}; 1374auto tdf = ROOT::RDF::FromCSV(""MuRun2010B.csv"");; 1375auto filteredEvents =; 1376 tdf.Filter(""Q1 * Q2 == -1""); 1377 .Define(""m"", ""sqrt(pow(E1 + E2, 2) - (pow(px1 + px2, 2) + pow(py1 + py2, 2) + pow(pz1 + pz2, 2)))"");; 1378auto h = filteredEvents.Histo1D(""m"");; 1379h->Draw();; 1380~~~; 1381 ; 1382See also FromNumpy (Python-only), FromRNTuple(), FromArrow(), FromSqlite().; 1383 ; 1384\anchor callgraphs; 1385### Computation graphs (storing and reusing sets of transformations); 1386 ; 1387As we saw, transformed dataframes can be stored as variables and reused multiple times to create modified versions of the dataset. This implicitly defines a **computation graph** in which; 1388several paths of filtering/creation of columns are executed simultaneously, and finally aggregated results are produced.; 1389 ; 1390RDataFrame detects when several actions use the same filter or the same defined column, and **only evaluates each; 1391filter or defined column once per event**, regardless of how many times that result is used down the computation graph.; 1392Objects read from each column are **built once and never copied**, for maximum efficiency.; 1393When ""upstream"" filters are not passed, subsequent filters, temporary column expressions and actions are not evaluated,; 1394so it might be advisable to put the strictest filters first in the graph.; 1395 ; 1396\anchor representgraph; 1397### Visualizing the computation graph; 1398It is possible to print the computation graph from any node to obtain a [DOT (graphviz)](https://en.wikipedia.org/wiki/DOT_(graph_description_language)) representation either on the standard output; 1399or in a file.; 1400 ; 1401Invoking the function ROOT::RDF::SaveGraph() on any node that is not the head node, the computation graph of the branch; 1402the node belongs to is printed. By using the head node, the entire computation graph is printed.; 1403 ; 1404Following there is an exampl",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:2121,Security,access,access,2121,"> // for make_shared, allocator, shared_ptr; 27#include <ostream> // ostringstream; 28#include <stdexcept>; 29#include <string>; 30#include <vector>; 31 ; 32// clang-format off; 33/**; 34* \class ROOT::RDataFrame; 35* \ingroup dataframe; 36* \brief ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python.; 37 ; 38In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available; 39on their machines completely transparently.<br>; 40Skip to the [class reference](#reference) or keep reading for the user guide.; 41 ; 42In a nutshell:; 43~~~{.cpp}; 44ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; 45ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; 46auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; 47myHisto->Draw(); // Event loop is run here, upon first access to a result; 48~~~; 49 ; 50Calculations are expressed in terms of a type-safe *functional chain of actions and transformations*, RDataFrame takes; 51care of their execution. The implementation automatically puts in place several low level optimisations such as; 52multi-thread parallelization and caching.; 53 ; 54\htmlonly; 55<a href=""https://doi.org/10.5281/zenodo.260230""><img src=""https://zenodo.org/badge/DOI/10.5281/zenodo.260230.svg""; 56alt=""DOI""></a>; 57\endhtmlonly; 58 ; 59## For the impatient user; 60You can directly see RDataFrame in action in our [tutorials](https://root.cern/doc/master/group__tutorial__dataframe.html), in C++ or Python.; 61 ; 62## Table of Contents; 63- [Cheat sheet](\ref cheatsheet); 64- [Introduction](\ref introduction); 65- [Crash course](\ref crash-course); 66- [Working with collections](\ref collections); 67- [Transformations: manipulating data](\ref transformations); 68- [Actions: getting results](\ref actions); 69- [Distributed execution in Python](\ref distrdf); 70- [Perf",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:6969,Security,access,accessed,6969," based on user-defined conditions. |; 105| Range() | Filter rows based on entry number (single-thread only). |; 106| Redefine() | Overwrite the value and/or type of an existing column. See Define() for more information. |; 107| RedefineSlot() | Overwrite the value and/or type of an existing column. See DefineSlot() for more information. |; 108| RedefineSlotEntry() | Overwrite the value and/or type of an existing column. See DefineSlotEntry() for more information. |; 109| Vary() | Register systematic variations for an existing column. Varied results are then extracted via VariationsFor(). |; 110 ; 111 ; 112### Actions; 113Actions aggregate data into a result. Each one is described in more detail in the reference guide.; 114 ; 115In the following, whenever we say an action ""returns"" something, we always mean it returns a smart pointer to it. Actions only act on events that pass all preceding filters.; 116 ; 117Lazy actions only trigger the event loop when one of the results is accessed for the first time, making it easy to; 118produce many different results in one event loop. Instant actions trigger the event loop instantly.; 119 ; 120 ; 121| **Lazy action** | **Description** |; 122|------------------|-----------------|; 123| Aggregate() | Execute a user-defined accumulation operation on the processed column values. |; 124| Book() | Book execution of a custom action using a user-defined helper object. |; 125| Cache() | Cache column values in memory. Custom columns can be cached as well, filtered entries are not cached. Users can specify which columns to save (default is all). |; 126| Count() | Return the number of events processed. Useful e.g. to get a quick count of the number of events passing a Filter. |; 127| Display() | Provides a printable representation of the dataset contents. The method returns a ROOT::RDF::RDisplay() instance which can print a tabular representation of the data or return it as a string. |; 128| Fill() | Fill a user-defined object with the val",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:14503,Security,access,accessed,14503,"oc/master/df027__SQliteDependencyOverVersion_8C.html), [RNTuples](https://root.cern/doc/master/structROOT_1_1Experimental_1_1RNTuple.html), and it can be extended to custom data formats. From Python, [NumPy arrays can be imported into RDataFrame](https://root.cern/doc/master/df032__MakeNumpyDataFrame_8py.html) as well.; 177 ; 1782. Transform the dataframe by:; 179 ; 180 - [Applying filters](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). This selects only specific rows of the dataset.; 181 ; 182 - [Creating custom columns](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset.; 183 ; 1843. [Produce results](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#actions). *Actions* are used to aggregate data into results. Most actions are *lazy*, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time.; 185 ; 186Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them.; 187 ; 188The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the; 189[crash course](#crash-course) to discover more idiomatic and flexible ways to express analyses with RDataFrame.; 190<table>; 191<tr>; 192 <td>; 193 <b>TTreeReader</b>; 194 </td>; 195 <td>; 196 <b>ROOT::RDataFrame</b>; 197 </td>; 198</tr>; 199<tr>; 200 <td>; 201~~~{.cpp}; 202TTreeReader reader(""myTree"", file);; 203TTreeReaderValue<A_t> a(reader, ""A"");; 204TTreeReaderValue<B_t> b(reader, ""B"");; 205TTreeReaderValue<C_t> c(reader, ""C"");; 206while(reader.Next()) {; 207 if(IsGoodEvent(*a, *b, *c)); 208 DoStuff(*a, *b, *c);; 209}; 210~~~; 211 </td>; 212 <td>; 213~~~{.cpp}; 2",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:14603,Security,access,access,14603,"1_1RNTuple.html), and it can be extended to custom data formats. From Python, [NumPy arrays can be imported into RDataFrame](https://root.cern/doc/master/df032__MakeNumpyDataFrame_8py.html) as well.; 177 ; 1782. Transform the dataframe by:; 179 ; 180 - [Applying filters](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). This selects only specific rows of the dataset.; 181 ; 182 - [Creating custom columns](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset.; 183 ; 1843. [Produce results](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#actions). *Actions* are used to aggregate data into results. Most actions are *lazy*, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time.; 185 ; 186Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them.; 187 ; 188The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the; 189[crash course](#crash-course) to discover more idiomatic and flexible ways to express analyses with RDataFrame.; 190<table>; 191<tr>; 192 <td>; 193 <b>TTreeReader</b>; 194 </td>; 195 <td>; 196 <b>ROOT::RDataFrame</b>; 197 </td>; 198</tr>; 199<tr>; 200 <td>; 201~~~{.cpp}; 202TTreeReader reader(""myTree"", file);; 203TTreeReaderValue<A_t> a(reader, ""A"");; 204TTreeReaderValue<B_t> b(reader, ""B"");; 205TTreeReaderValue<C_t> c(reader, ""C"");; 206while(reader.Next()) {; 207 if(IsGoodEvent(*a, *b, *c)); 208 DoStuff(*a, *b, *c);; 209}; 210~~~; 211 </td>; 212 <td>; 213~~~{.cpp}; 214ROOT::RDataFrame d(""myTree"", file, {""A"", ""B"", ""C""});; 215d.Filter(IsGoodEvent).Foreach(DoStuff);; 216~~~; 217 </td>; 218",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:14741,Security,access,access,14741,"taFrame](https://root.cern/doc/master/df032__MakeNumpyDataFrame_8py.html) as well.; 177 ; 1782. Transform the dataframe by:; 179 ; 180 - [Applying filters](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). This selects only specific rows of the dataset.; 181 ; 182 - [Creating custom columns](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset.; 183 ; 1843. [Produce results](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#actions). *Actions* are used to aggregate data into results. Most actions are *lazy*, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time.; 185 ; 186Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them.; 187 ; 188The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the; 189[crash course](#crash-course) to discover more idiomatic and flexible ways to express analyses with RDataFrame.; 190<table>; 191<tr>; 192 <td>; 193 <b>TTreeReader</b>; 194 </td>; 195 <td>; 196 <b>ROOT::RDataFrame</b>; 197 </td>; 198</tr>; 199<tr>; 200 <td>; 201~~~{.cpp}; 202TTreeReader reader(""myTree"", file);; 203TTreeReaderValue<A_t> a(reader, ""A"");; 204TTreeReaderValue<B_t> b(reader, ""B"");; 205TTreeReaderValue<C_t> c(reader, ""C"");; 206while(reader.Next()) {; 207 if(IsGoodEvent(*a, *b, *c)); 208 DoStuff(*a, *b, *c);; 209}; 210~~~; 211 </td>; 212 <td>; 213~~~{.cpp}; 214ROOT::RDataFrame d(""myTree"", file, {""A"", ""B"", ""C""});; 215d.Filter(IsGoodEvent).Foreach(DoStuff);; 216~~~; 217 </td>; 218</tr>; 219<tr>; 220 <td>; 221 <b>TTree::Draw</b>; 222 </td>; 223 <td>; 224 <b>ROOT::RDataFrame</b>; 225 </td>; 226</",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:20262,Security,access,access,20262,"ee has a branch named ""MET"".; 327 ; 328Histo1D() is an *action*; it returns a smart pointer (a ROOT::RDF::RResultPtr, to be precise) to a TH1D histogram filled; 329with the `MET` of all events. If the quantity stored in the column is a collection (e.g. a vector or an array), the; 330histogram is filled with all vector elements for each event.; 331 ; 332You can use the objects returned by actions as if they were pointers to the desired results. There are many other; 333possible [actions](\ref cheatsheet), and all their results are wrapped in smart pointers; we'll see why in a minute.; 334 ; 335### Applying a filter; 336Let's say we want to cut over the value of branch ""MET"" and count how many events pass this cut. This is one way to do it:; 337~~~{.cpp}; 338RDataFrame d(""myTree"", ""file.root"");; 339auto c = d.Filter(""MET > 4."").Count(); // computations booked, not run; 340std::cout << *c << std::endl; // computations run here, upon first access to the result; 341~~~; 342The filter string (which must contain a valid C++ expression) is applied to the specified columns for each event;; 343the name and types of the columns are inferred automatically. The string expression is required to return a `bool`; 344which signals whether the event passes the filter (`true`) or not (`false`).; 345 ; 346You can think of your data as ""flowing"" through the chain of calls, being transformed, filtered and finally used to; 347perform actions. Multiple Filter() calls can be chained one after another.; 348 ; 349Using string filters is nice for simple things, but they are limited to specifying the equivalent of a single return; 350statement or the body of a lambda, so it's cumbersome to use strings with more complex filters. They also add a small; 351runtime overhead, as ROOT needs to just-in-time compile the string into C++ code. When more freedom is required or; 352runtime performance is very important, a C++ callable can be specified instead (a lambda in the following snippet,; 353but it ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:27980,Security,access,accessing,27980," Executing multiple actions in the same event loop; 444As a final example let us apply two different cuts on branch ""MET"" and fill two different histograms with the ""pt_v"" of; 445the filtered events.; 446By now, you should be able to easily understand what is happening:; 447~~~{.cpp}; 448RDataFrame d(""treeName"", ""file.root"");; 449auto h1 = d.Filter(""MET > 10"").Histo1D(""pt_v"");; 450auto h2 = d.Histo1D(""pt_v"");; 451h1->Draw(); // event loop is run once here; 452h2->Draw(""SAME""); // no need to run the event loop again; 453~~~; 454RDataFrame executes all above actions by **running the event-loop only once**. The trick is that actions are not; 455executed at the moment they are called, but they are **lazy**, i.e. delayed until the moment one of their results is; 456accessed through the smart pointer. At that time, the event loop is triggered and *all* results are produced; 457simultaneously.; 458 ; 459It is therefore good practice to declare all your transformations and actions *before* accessing their results, allowing; 460RDataFrame to run the loop once and produce all results in one go.; 461 ; 462### Going parallel; 463Let's say we would like to run the previous examples in parallel on several cores, dividing events fairly between cores.; 464The only modification required to the snippets would be the addition of this line *before* constructing the main; 465dataframe object:; 466~~~{.cpp}; 467ROOT::EnableImplicitMT();; 468~~~; 469Simple as that. More details are given [below](#parallel-execution).; 470 ; 471\anchor collections; 472## Working with collections and object selections; 473 ; 474RDataFrame reads collections as the special type [ROOT::RVec](https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html): for example, a column containing an array of floating point numbers can be read as a ROOT::RVecF. C-style arrays (with variable or static size), STL vectors and most other collection types can be read this way.; 475 ; 476RVec is a container similar to std::vec",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:31181,Security,access,access,31181,"e`) or not (`false`). It should perform ""read-only"" operations on the; 501columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness; 502when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column; 503names are used as variable names (e.g. `Filter(""x[0] + x[1] > 0"")`). This is a convenience feature that comes with a; 504certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event; 505loop. See the paragraph about ""Just-in-time compilation"" below for more information.; 506 ; 507RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed; 508in order and the first one returning `false` causes the event to be discarded and triggers the processing of the next; 509entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for; 510each entry: after the first access it simply serves a cached result.; 511 ; 512\anchor named-filters-and-cutflow-reports; 513#### Named filters and cutflow reports; 514An optional string parameter `name` can be passed to the Filter() method to create a **named filter**. Named filters; 515work as usual, but also keep track of how many entries they accept and reject.; 516 ; 517Statistics are retrieved through a call to the Report() method:; 518 ; 519- when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all; 520named filters declared up to that point; 521- when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport>; 522relative all named filters in the section of the chain between the main RDataFrame and that node (included).; 523 ; 524Stats are stored in the same order as named filters have been added to the graph, and *refer to the",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:34164,Security,access,accessible,34164,"t the next 40 entries pass, then stop processing"". If a range node hangs from a filter node,; 542and the range has a `begin` parameter of 10, that means the range will skip the first 10 entries *that pass the; 543preceding filter*.; 544 ; 545Ranges allow ""early quitting"": if all branches of execution of a functional graph reached their `end` value of; 546processed entries, the event-loop is immediately interrupted. This is useful for debugging and quick data explorations.; 547 ; 548\anchor custom-columns; 549### Custom columns; 550Custom columns are created by invoking `Define(name, f, columnList)`. As usual, `f` can be any callable object; 551(function, lambda expression, functor class...); it takes the values of the columns listed in `columnList` (a list of; 552strings) as parameters, in the same order as they are listed in `columnList`. `f` must return the value that will be; 553assigned to the temporary column.; 554 ; 555A new variable is created called `name`, accessible as if it was contained in the dataset from subsequent; 556transformations/actions.; 557 ; 558Use cases include:; 559- caching the results of complex calculations for easy and efficient multiple access; 560- extraction of quantities of interest from complex objects; 561- branch aliasing, i.e. changing the name of a branch; 562 ; 563An exception is thrown if the `name` of the new column/branch is already in use for another branch in the TTree.; 564 ; 565It is also possible to specify the quantity to be stored in the new temporary column as a C++ expression with the method; 566`Define(name, expression)`. For example this invocation; 567 ; 568~~~{.cpp}; 569df.Define(""pt"", ""sqrt(px*px + py*py)"");; 570~~~; 571 ; 572will create a new column called ""pt"" the value of which is calculated starting from the columns px and py. The system; 573builds a just-in-time compiled function starting from the expression after having deduced the list of necessary branches; 574from the names of the variables specified by",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:34369,Security,access,access,34369,"first 10 entries *that pass the; 543preceding filter*.; 544 ; 545Ranges allow ""early quitting"": if all branches of execution of a functional graph reached their `end` value of; 546processed entries, the event-loop is immediately interrupted. This is useful for debugging and quick data explorations.; 547 ; 548\anchor custom-columns; 549### Custom columns; 550Custom columns are created by invoking `Define(name, f, columnList)`. As usual, `f` can be any callable object; 551(function, lambda expression, functor class...); it takes the values of the columns listed in `columnList` (a list of; 552strings) as parameters, in the same order as they are listed in `columnList`. `f` must return the value that will be; 553assigned to the temporary column.; 554 ; 555A new variable is created called `name`, accessible as if it was contained in the dataset from subsequent; 556transformations/actions.; 557 ; 558Use cases include:; 559- caching the results of complex calculations for easy and efficient multiple access; 560- extraction of quantities of interest from complex objects; 561- branch aliasing, i.e. changing the name of a branch; 562 ; 563An exception is thrown if the `name` of the new column/branch is already in use for another branch in the TTree.; 564 ; 565It is also possible to specify the quantity to be stored in the new temporary column as a C++ expression with the method; 566`Define(name, expression)`. For example this invocation; 567 ; 568~~~{.cpp}; 569df.Define(""pt"", ""sqrt(px*px + py*py)"");; 570~~~; 571 ; 572will create a new column called ""pt"" the value of which is calculated starting from the columns px and py. The system; 573builds a just-in-time compiled function starting from the expression after having deduced the list of necessary branches; 574from the names of the variables specified by the user.; 575 ; 576#### Custom columns as function of slot and entry number; 577 ; 578It is possible to create custom columns also as a function of the processing slot and en",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:36136,Security,access,accessed,36136,"after having deduced the list of necessary branches; 574from the names of the variables specified by the user.; 575 ; 576#### Custom columns as function of slot and entry number; 577 ; 578It is possible to create custom columns also as a function of the processing slot and entry numbers. The methods that can; 579be invoked are:; 580- `DefineSlot(name, f, columnList)`. In this case the callable f has this signature `R(unsigned int, T1, T2, ...)`: the; 581first parameter is the slot number which ranges from 0 to ROOT::GetThreadPoolSize() - 1.; 582- `DefineSlotEntry(name, f, columnList)`. In this case the callable f has this signature `R(unsigned int, ULong64_t,; 583T1, T2, ...)`: the first parameter is the slot number while the second one the number of the entry being processed.; 584 ; 585\anchor actions; 586## Actions: getting results; 587### Instant and lazy actions; 588Actions can be **instant** or **lazy**. Instant actions are executed as soon as they are called, while lazy actions are; 589executed whenever the object they return is accessed for the first time. As a rule of thumb, actions with a return value; 590are lazy, the others are instant.; 591 ; 592### Return type of a lazy action; 593 ; 594When a lazy action is called, it returns a \link ROOT::RDF::RResultPtr ROOT::RDF::RResultPtr<T>\endlink, where T is the; 595type of the result of the action. The final result will be stored in the `RResultPtr` and can be retrieved by; 596dereferencing it or via its `GetValue` method.; 597 ; 598### Actions that return collections; 599 ; 600If the type of the return value of an action is a collection, e.g. `std::vector<int>`, you can iterate its elements; 601directly through the wrapping `RResultPtr`:; 602 ; 603~~~{.cpp}; 604ROOT::RDataFrame df{5};; 605auto df1 = df.Define(""x"", []{ return 42; });; 606for (const auto &el: df1.Take<int>(""x"")){; 607 std::cout << ""Element: "" << el << ""\n"";; 608}; 609~~~; 610 ; 611~~~{.py}; 612df = ROOT.RDataFrame(5).Define(""x"", ""42""); 613for el",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:40322,Security,access,access,40322,"RDataFrame application distributedly. Nonetheless, not all; 661parts of the RDataFrame API currently work with this package. The subset that is currently available is:; 662- AsNumpy; 663- Count; 664- Define; 665- DefinePerSample; 666- Filter; 667- Graph; 668- Histo[1,2,3]D; 669- HistoND; 670- Max; 671- Mean; 672- Min; 673- Profile[1,2,3]D; 674- Redefine; 675- Snapshot; 676- Stats; 677- StdDev; 678- Sum; 679- Systematic variations: Vary and [VariationsFor](\ref ROOT::RDF::Experimental::VariationsFor).; 680- Parallel submission of distributed graphs: [RunGraphs](\ref ROOT::RDF::RunGraphs).; 681- Information about the dataframe: GetColumnNames.; 682 ; 683with support for more operations coming in the future. Data sources other than TTree and TChain (e.g. CSV, RNTuple) are; 684currently not supported.; 685 ; 686\note The distributed RDataFrame module requires at least Python version 3.8.; 687 ; 688### Connecting to a Spark cluster; 689 ; 690In order to distribute the RDataFrame workload, you can connect to a Spark cluster you have access to through the; 691official [Spark API](https://spark.apache.org/docs/latest/rdd-programming-guide.html#initializing-spark), then hook the; 692connection instance to the distributed `RDataFrame` object like so:; 693 ; 694~~~{.py}; 695import pyspark; 696import ROOT; 697 ; 698# Create a SparkContext object with the right configuration for your Spark cluster; 699conf = SparkConf().setAppName(appName).setMaster(master); 700sc = SparkContext(conf=conf); 701 ; 702# Point RDataFrame calls to the Spark specific RDataFrame; 703RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; 704 ; 705# The Spark RDataFrame constructor accepts an optional ""sparkcontext"" parameter; 706# and it will distribute the application to the connected cluster; 707df = RDataFrame(""mytree"", ""myfile.root"", sparkcontext = sc); 708~~~; 709 ; 710If an instance of [SparkContext](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.SparkContext.html",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:42105,Security,expose,exposes,42105,"tribute the application to the connected cluster; 707df = RDataFrame(""mytree"", ""myfile.root"", sparkcontext = sc); 708~~~; 709 ; 710If an instance of [SparkContext](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.SparkContext.html); 711is not provided, the default behaviour is to create one in the background for you.; 712 ; 713### Connecting to a Dask cluster; 714 ; 715Similarly, you can connect to a Dask cluster by creating your own connection object which internally operates with one; 716of the cluster schedulers supported by Dask (more information in the; 717[Dask distributed docs](http://distributed.dask.org/en/stable/)):; 718 ; 719~~~{.py}; 720import ROOT; 721from dask.distributed import Client; 722 ; 723# Point RDataFrame calls to the Dask specific RDataFrame; 724RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; 725 ; 726# In a Python script the Dask client needs to be initalized in a context; 727# Jupyter notebooks / Python session don't need this; 728if __name__ == ""__main__"":; 729 # With an already setup cluster that exposes a Dask scheduler endpoint; 730 client = Client(""dask_scheduler.domain.com:8786""); 731 ; 732 # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; 733 df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); 734 # Proceed as usual; 735 df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 736~~~; 737 ; 738If an instance of [distributed.Client](http://distributed.dask.org/en/stable/api.html#distributed.Client) is not; 739provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine; 740using all cores available.; 741 ; 742### Choosing the number of distributed tasks; 743 ; 744A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending; 745tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:44106,Security,access,access,44106,"gh the connection object. The number of; 747tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend; 748doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to; 749a batch system. The client object created at the beginning of the application does not automatically know how many cores; 750will be available during distributed execution, since the jobs are submitted to the batch system after the creation of; 751the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks.; 752 ; 753The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional; 754keyword argument `npartitions` when creating the RDataFrame object. This parameter is accepted irrespectively of the; 755backend used:; 756 ; 757~~~{.py}; 758import ROOT; 759 ; 760# Define correct imports and access the distributed RDataFrame appropriate for the; 761# backend used in the analysis; 762RDataFrame = ROOT.RDF.Experimental.Distributed.[BACKEND].RDataFrame; 763 ; 764if __name__ == ""__main__"":; 765 # The `npartitions` optional argument tells the RDataFrame how many tasks are desired; 766 df = RDataFrame(""mytree"",""myfile.root"", npartitions=NPARTITIONS); 767 # Proceed as usual; 768 df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 769~~~; 770 ; 771Note that when processing a TTree or TChain dataset, the `npartitions` value should not exceed the number of clusters in; 772the dataset. The number of clusters in a TTree can be retrieved by typing `rootls -lt myfile.root` at a command line.; 773 ; 774### Distributed Snapshot; 775 ; 776The Snapshot operation behaves slightly differently when executed distributedly. First off, it requires the path; 777supplied to the Snapshot call to be accessible from any worker of the cluster and from the client machine (in general; 778it should be provid",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:45027,Security,access,accessible,45027,"import ROOT; 759 ; 760# Define correct imports and access the distributed RDataFrame appropriate for the; 761# backend used in the analysis; 762RDataFrame = ROOT.RDF.Experimental.Distributed.[BACKEND].RDataFrame; 763 ; 764if __name__ == ""__main__"":; 765 # The `npartitions` optional argument tells the RDataFrame how many tasks are desired; 766 df = RDataFrame(""mytree"",""myfile.root"", npartitions=NPARTITIONS); 767 # Proceed as usual; 768 df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 769~~~; 770 ; 771Note that when processing a TTree or TChain dataset, the `npartitions` value should not exceed the number of clusters in; 772the dataset. The number of clusters in a TTree can be retrieved by typing `rootls -lt myfile.root` at a command line.; 773 ; 774### Distributed Snapshot; 775 ; 776The Snapshot operation behaves slightly differently when executed distributedly. First off, it requires the path; 777supplied to the Snapshot call to be accessible from any worker of the cluster and from the client machine (in general; 778it should be provided as an absolute path). Another important difference is that `n` separate files will be produced,; 779where `n` is the number of dataset partitions. As with local RDataFrame, the result of a Snapshot on a distributed; 780RDataFrame is another distributed RDataFrame on which we can define a new computation graph and run more distributed; 781computations.; 782 ; 783### Distributed RunGraphs; 784 ; 785Submitting multiple distributed RDataFrame executions is supported through the RunGraphs function. Similarly to its; 786local counterpart, the function expects an iterable of objects representing an RDataFrame action. Each action will be; 787triggered concurrently to send multiple computation graphs to a distributed cluster at the same time:; 788 ; 789~~~{.py}; 790import ROOT; 791RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; 792RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs; 793 ; 794# Cr",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:54118,Security,access,accessing,54118,"nalysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the; 933event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other.; 934On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage.; 935ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently:; 936~~~{.cpp}; 937ROOT::EnableImplicitMT();; 938ROOT::RDataFrame df1(""tree1"", ""f1.root"");; 939ROOT::RDataFrame df2(""tree2"", ""f2.root"");; 940auto histo1 = df1.Histo1D(""x"");; 941auto histo2 = df2.Histo1D(""y"");; 942 ; 943// just accessing result pointers, the event loops of separate RDataFrames run one after the other; 944histo1->Draw(); // runs first multi-thread event loop; 945histo2->Draw(); // runs second multi-thread event loop; 946 ; 947// alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; 948ROOT::RDF::RunGraphs({histo1, histo2});; 949histo1->Draw(); // results can then be used as usual; 950~~~; 951 ; 952### Performance considerations; 953 ; 954To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible.; 955For instance, `Filter(""x > 0"")` requires just-in-time compilation of the corresponding C++ logic, while the equivalent `Filter([](float x) { return x > 0.; }, {""x""})` does not.; 956Similarly, `Histo1D(""x"")` requires just-in-time compilation after the type of `x` is retrieved from the dataset, while `Histo1D<float>(""x"")` does not; the latter spelling; 957should be preferred for performance-critical applications.; 958 ; 959Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame.; 960See [Efficient analysis in Python](#python) for possible ways to speed up hot paths in this case.; 961 ; 962Just-in-time compilatio",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:59663,Security,access,access,59663,"ionsFor ""VariationsFor()"". In between these steps, no other change; 998to the analysis code is required: the presence of systematic variations for certain columns is automatically propagated; 999through filters, defines and actions, and RDataFrame will take these dependencies into account when producing varied; 1000results. \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" is included in header `ROOT/RDFHelpers.hxx`. The compiled C++ programs must include this header; 1001explicitly, this is not required for ROOT macros. ; 1002 ; 1003An example usage of Vary() and \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" in C++:; 1004 ; 1005~~~{.cpp}; 1006auto nominal_hx =; 1007 df.Vary(""pt"", ""ROOT::RVecD{pt*0.9f, pt*1.1f}"", {""down"", ""up""}); 1008 .Filter(""pt > pt_cut""); 1009 .Define(""x"", someFunc, {""pt""}); 1010 .Histo1D<float>(""x"");; 1011 ; 1012// request the generation of varied results from the nominal_hx; 1013ROOT::RDF::Experimental::RResultMap<TH1D> hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; 1014 ; 1015// the event loop runs here, upon first access to any of the results or varied results:; 1016hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); 1017hx[""pt:down""].Draw(""SAME"");; 1018hx[""pt:up""].Draw(""SAME"");; 1019~~~; 1020 ; 1021A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned; 1022as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of; 1023this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second; 1024to the tag ""up""). The _full_ variation name will be composed of the varied column name and the variation tags (e.g.; 1025""pt:down"", ""pt:up"" in this example). Python usage looks similar.; 1026 ; 1027Note how we use the ""pt"" column as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill; 1028the resulting histog",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:71625,Security,inject,inject,71625,"~~{.cpp}; 1201df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; 1202df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; 1203~~~; 1204 ; 1205Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime; 1206overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; 1207 ; 1208When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing `x = 0` rather than `x == 0`:; 1209 ; 1210~~~{.cpp}; 1211// this throws an error (note the typo); 1212df.Define(""x"", ""0"").Filter(""x = 0"");; 1213~~~; 1214 ; 1215\anchor generic-actions; 1216### User-defined custom actions; 1217RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same; 1218time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; 1219 ; 1220#### Implementing custom actions with Book(); 1221 ; 1222Through the Book() method, users can implement a custom action and have access to the same features; 1223that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the; 1224event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:; 1225 ; 1226~~~{.cpp}; 1227#include <ROOT/RDataFrame.hxx>; 1228#include <memory>; 1229 ; 1230class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; 1231 std::shared_ptr<int> fFinalResult = std::make_shared<int>(0);; 1232 std::vector<int> fPerThreadResults;; 1233 ; 1234public:; 1235 // We use a public type alias to advertise the type of the result of this action; 1236 using Result_t = int;; 1237 ; 1238 MyCounter(unsigned int nSlots) : fPerThreadResults(nSlots) {}; 1239 ; 1240 // Called before the event loop to retrieve the address of the resul",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:71843,Security,access,access,71843,"t`; 1203~~~; 1204 ; 1205Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime; 1206overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; 1207 ; 1208When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing `x = 0` rather than `x == 0`:; 1209 ; 1210~~~{.cpp}; 1211// this throws an error (note the typo); 1212df.Define(""x"", ""0"").Filter(""x = 0"");; 1213~~~; 1214 ; 1215\anchor generic-actions; 1216### User-defined custom actions; 1217RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same; 1218time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; 1219 ; 1220#### Implementing custom actions with Book(); 1221 ; 1222Through the Book() method, users can implement a custom action and have access to the same features; 1223that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the; 1224event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:; 1225 ; 1226~~~{.cpp}; 1227#include <ROOT/RDataFrame.hxx>; 1228#include <memory>; 1229 ; 1230class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; 1231 std::shared_ptr<int> fFinalResult = std::make_shared<int>(0);; 1232 std::vector<int> fPerThreadResults;; 1233 ; 1234public:; 1235 // We use a public type alias to advertise the type of the result of this action; 1236 using Result_t = int;; 1237 ; 1238 MyCounter(unsigned int nSlots) : fPerThreadResults(nSlots) {}; 1239 ; 1240 // Called before the event loop to retrieve the address of the result that will be filled/generated.; 1241 std::shared_ptr<int> GetResultPtr() const { return fFinalResult; }; 1242 ; 1243 // Called at the beginning of the event loop.; 1",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:84755,Security,access,accessed,84755,"fication JSON file needs to be provided by the user and it describes all necessary samples and; 1462their associated metadata information. The main required key is the ""samples"" (at least one sample is needed) and the; 1463required sub-keys for each sample are ""trees"" and ""files"". Additionally, one can specify a metadata dictionary for each; 1464sample in the ""metadata"" key.; 1465 ; 1466A simple example for the formatting of the specification in the JSON file is the following:; 1467 ; 1468~~~{.cpp}; 1469{; 1470 ""samples"": {; 1471 ""sampleA"": {; 1472 ""trees"": [""tree1"", ""tree2""],; 1473 ""files"": [""file1.root"", ""file2.root""],; 1474 ""metadata"": {; 1475 ""lumi"": 10000.0, ; 1476 ""xsec"": 1.0,; 1477 ""sample_category"" = ""data""; 1478 }; 1479 },; 1480 ""sampleB"": {; 1481 ""trees"": [""tree3"", ""tree4""],; 1482 ""files"": [""file3.root"", ""file4.root""],; 1483 ""metadata"": {; 1484 ""lumi"": 0.5, ; 1485 ""xsec"": 1.5,; 1486 ""sample_category"" = ""MC_background""; 1487 }; 1488 }; 1489 }; 1490}; 1491~~~; 1492 ; 1493The metadata information from the specification file can be then accessed using the DefinePerSample function.; 1494For example, to access luminosity information (stored as a double):; 1495 ; 1496~~~{.python}; 1497df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); 1498~~~; 1499 ; 1500or sample_category information (stored as a string):; 1501 ; 1502~~~{.python}; 1503df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); 1504~~~; 1505 ; 1506or directly the filename:; 1507 ; 1508~~~{.python}; 1509df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); 1510~~~; 1511 ; 1512An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also; 1513provides a corresponding exemplary JSON file for the dataset specification.; 1514 ; 1515\anchor progressbar; 1516### Adding a progress bar ; 1517 ; 1518A progress bar showing the processed event statistics can be added to any RDataFrame program.; 1519The event statistic",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:84821,Security,access,access,84821,"required key is the ""samples"" (at least one sample is needed) and the; 1463required sub-keys for each sample are ""trees"" and ""files"". Additionally, one can specify a metadata dictionary for each; 1464sample in the ""metadata"" key.; 1465 ; 1466A simple example for the formatting of the specification in the JSON file is the following:; 1467 ; 1468~~~{.cpp}; 1469{; 1470 ""samples"": {; 1471 ""sampleA"": {; 1472 ""trees"": [""tree1"", ""tree2""],; 1473 ""files"": [""file1.root"", ""file2.root""],; 1474 ""metadata"": {; 1475 ""lumi"": 10000.0, ; 1476 ""xsec"": 1.0,; 1477 ""sample_category"" = ""data""; 1478 }; 1479 },; 1480 ""sampleB"": {; 1481 ""trees"": [""tree3"", ""tree4""],; 1482 ""files"": [""file3.root"", ""file4.root""],; 1483 ""metadata"": {; 1484 ""lumi"": 0.5, ; 1485 ""xsec"": 1.5,; 1486 ""sample_category"" = ""MC_background""; 1487 }; 1488 }; 1489 }; 1490}; 1491~~~; 1492 ; 1493The metadata information from the specification file can be then accessed using the DefinePerSample function.; 1494For example, to access luminosity information (stored as a double):; 1495 ; 1496~~~{.python}; 1497df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); 1498~~~; 1499 ; 1500or sample_category information (stored as a string):; 1501 ; 1502~~~{.python}; 1503df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); 1504~~~; 1505 ; 1506or directly the filename:; 1507 ; 1508~~~{.python}; 1509df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); 1510~~~; 1511 ; 1512An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also; 1513provides a corresponding exemplary JSON file for the dataset specification.; 1514 ; 1515\anchor progressbar; 1516### Adding a progress bar ; 1517 ; 1518A progress bar showing the processed event statistics can be added to any RDataFrame program.; 1519The event statistics include elapsed time, currently processed file, currently processed events, the rate of event processing ; 1520and an estimated remaining time (per",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:92729,Security,access,access,92729,"//////////////////////////////////////////////////////////; 1636/// \brief Build a dataframe that generates numEntries entries.; 1637/// \param[in] numEntries The number of entries to generate.; 1638///; 1639/// An empty-source dataframe constructed with a number of entries will; 1640/// generate those entries on the fly when some action is triggered,; 1641/// and it will do so for all the previously-defined columns.; 1642/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1643RDataFrame::RDataFrame(ULong64_t numEntries); 1644 : RInterface(std::make_shared<RDFDetail::RLoopManager>(numEntries)); 1645 ; 1646{; 1647}; 1648 ; 1649//////////////////////////////////////////////////////////////////////////; 1650/// \brief Build dataframe associated to data source.; 1651/// \param[in] ds The data source object.; 1652/// \param[in] defaultColumns Collection of default column names to fall back to when none is specified.; 1653///; 1654/// A dataframe associated to a data source will query it to access column values.; 1655/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1656RDataFrame::RDataFrame(std::unique_ptr<ROOT::RDF::RDataSource> ds, const ColumnNames_t &defaultColumns); 1657 : RInterface(std::make_shared<RDFDetail::RLoopManager>(std::move(ds), defaultColumns)); 1658{; 1659}; 1660 ; 1661//////////////////////////////////////////////////////////////////////////; 1662/// \brief Build dataframe from an RDatasetSpec object.; 1663/// \param[in] spec The dataset specification object.; 1664///; 1665/// A dataset specification includes trees and file names,; 1666/// as well as an optional friend list and/or entry range.; 1667///; 1668/// ### Example usage from Python:; 1669/// ~~~{.py}; 1670/// spec = (; 1671/// ROOT.RDF.Experimental.RDatasetSpec(); 1672/// .AddSample((""data"", ""tree"", ""file.root"")); 1673/// .WithGlobalFriends(""friendTree"", ""friend.root"", ""alias""); 1674/// .WithGlobalRange((100, 200)); 1675/// ); 1676/// d",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:4128,Testability,log,logs,4128,"</a>; 57\endhtmlonly; 58 ; 59## For the impatient user; 60You can directly see RDataFrame in action in our [tutorials](https://root.cern/doc/master/group__tutorial__dataframe.html), in C++ or Python.; 61 ; 62## Table of Contents; 63- [Cheat sheet](\ref cheatsheet); 64- [Introduction](\ref introduction); 65- [Crash course](\ref crash-course); 66- [Working with collections](\ref collections); 67- [Transformations: manipulating data](\ref transformations); 68- [Actions: getting results](\ref actions); 69- [Distributed execution in Python](\ref distrdf); 70- [Performance tips and parallel execution](\ref parallel-execution); 71- [More features](\ref more-features); 72 - [Systematic variations](\ref systematics); 73 - [RDataFrame objects as function arguments and return values](\ref rnode); 74 - [Storing RDataFrame objects in collections](\ref RDFCollections); 75 - [Executing callbacks every N events](\ref callbacks); 76 - [Default column lists](\ref default-branches); 77 - [Special helper columns: `rdfentry_` and `rdfslot_`](\ref helper-cols); 78 - [Just-in-time compilation: column type inference and explicit declaration of column types](\ref jitting); 79 - [User-defined custom actions](\ref generic-actions); 80 - [Dataset joins with friend trees](\ref friends); 81 - [Reading data formats other than ROOT trees](\ref other-file-formats); 82 - [Computation graphs (storing and reusing sets of transformations)](\ref callgraphs); 83 - [Visualizing the computation graph](\ref representgraph); 84 - [Activating RDataFrame execution logs](\ref rdf-logging); 85 - [Creating an RDataFrame from a dataset specification file](\ref rdf-from-spec); 86 - [Adding a progress bar](\ref progressbar); 87- [Efficient analysis in Python](\ref python); 88- <a class=""el"" href=""classROOT_1_1RDataFrame.html#reference"" onclick=""javascript:toggleInherit('pub_methods_classROOT_1_1RDF_1_1RInterface')"">Class reference</a>; 89 ; 90\anchor cheatsheet; 91## Cheat sheet; 92These are the operations which can",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:4143,Testability,log,logging,4143,"</a>; 57\endhtmlonly; 58 ; 59## For the impatient user; 60You can directly see RDataFrame in action in our [tutorials](https://root.cern/doc/master/group__tutorial__dataframe.html), in C++ or Python.; 61 ; 62## Table of Contents; 63- [Cheat sheet](\ref cheatsheet); 64- [Introduction](\ref introduction); 65- [Crash course](\ref crash-course); 66- [Working with collections](\ref collections); 67- [Transformations: manipulating data](\ref transformations); 68- [Actions: getting results](\ref actions); 69- [Distributed execution in Python](\ref distrdf); 70- [Performance tips and parallel execution](\ref parallel-execution); 71- [More features](\ref more-features); 72 - [Systematic variations](\ref systematics); 73 - [RDataFrame objects as function arguments and return values](\ref rnode); 74 - [Storing RDataFrame objects in collections](\ref RDFCollections); 75 - [Executing callbacks every N events](\ref callbacks); 76 - [Default column lists](\ref default-branches); 77 - [Special helper columns: `rdfentry_` and `rdfslot_`](\ref helper-cols); 78 - [Just-in-time compilation: column type inference and explicit declaration of column types](\ref jitting); 79 - [User-defined custom actions](\ref generic-actions); 80 - [Dataset joins with friend trees](\ref friends); 81 - [Reading data formats other than ROOT trees](\ref other-file-formats); 82 - [Computation graphs (storing and reusing sets of transformations)](\ref callgraphs); 83 - [Visualizing the computation graph](\ref representgraph); 84 - [Activating RDataFrame execution logs](\ref rdf-logging); 85 - [Creating an RDataFrame from a dataset specification file](\ref rdf-from-spec); 86 - [Adding a progress bar](\ref progressbar); 87- [Efficient analysis in Python](\ref python); 88- <a class=""el"" href=""classROOT_1_1RDataFrame.html#reference"" onclick=""javascript:toggleInherit('pub_methods_classROOT_1_1RDF_1_1RInterface')"">Class reference</a>; 89 ; 90\anchor cheatsheet; 91## Cheat sheet; 92These are the operations which can",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:42846,Testability,log,logic,42846,"perimental.Distributed.Dask.RDataFrame; 725 ; 726# In a Python script the Dask client needs to be initalized in a context; 727# Jupyter notebooks / Python session don't need this; 728if __name__ == ""__main__"":; 729 # With an already setup cluster that exposes a Dask scheduler endpoint; 730 client = Client(""dask_scheduler.domain.com:8786""); 731 ; 732 # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; 733 df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); 734 # Proceed as usual; 735 df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 736~~~; 737 ; 738If an instance of [distributed.Client](http://distributed.dask.org/en/stable/api.html#distributed.Client) is not; 739provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine; 740using all cores available.; 741 ; 742### Choosing the number of distributed tasks; 743 ; 744A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending; 745tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but; 746generically tries to infer how many cores are available in the cluster through the connection object. The number of; 747tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend; 748doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to; 749a batch system. The client object created at the beginning of the application does not automatically know how many cores; 750will be available during distributed execution, since the jobs are submitted to the batch system after the creation of; 751the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks.; 752 ; 753The number of tasks submitted for distributed execution can be also set progr",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:43020,Testability,log,logic,43020,"setup cluster that exposes a Dask scheduler endpoint; 730 client = Client(""dask_scheduler.domain.com:8786""); 731 ; 732 # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; 733 df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); 734 # Proceed as usual; 735 df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 736~~~; 737 ; 738If an instance of [distributed.Client](http://distributed.dask.org/en/stable/api.html#distributed.Client) is not; 739provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine; 740using all cores available.; 741 ; 742### Choosing the number of distributed tasks; 743 ; 744A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending; 745tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but; 746generically tries to infer how many cores are available in the cluster through the connection object. The number of; 747tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend; 748doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to; 749a batch system. The client object created at the beginning of the application does not automatically know how many cores; 750will be available during distributed execution, since the jobs are submitted to the batch system after the creation of; 751the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks.; 752 ; 753The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional; 754keyword argument `npartitions` when creating the RDataFrame object. This parameter is accepted irrespectively of the; 755backend used:; 756 ; 757~~~{.py}; 758import ROOT; 759 ; 760# Define ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:43706,Testability,log,logic,43706,"cores available.; 741 ; 742### Choosing the number of distributed tasks; 743 ; 744A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending; 745tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but; 746generically tries to infer how many cores are available in the cluster through the connection object. The number of; 747tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend; 748doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to; 749a batch system. The client object created at the beginning of the application does not automatically know how many cores; 750will be available during distributed execution, since the jobs are submitted to the batch system after the creation of; 751the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks.; 752 ; 753The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional; 754keyword argument `npartitions` when creating the RDataFrame object. This parameter is accepted irrespectively of the; 755backend used:; 756 ; 757~~~{.py}; 758import ROOT; 759 ; 760# Define correct imports and access the distributed RDataFrame appropriate for the; 761# backend used in the analysis; 762RDataFrame = ROOT.RDF.Experimental.Distributed.[BACKEND].RDataFrame; 763 ; 764if __name__ == ""__main__"":; 765 # The `npartitions` optional argument tells the RDataFrame how many tasks are desired; 766 df = RDataFrame(""mytree"",""myfile.root"", npartitions=NPARTITIONS); 767 # Proceed as usual; 768 df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 769~~~; 770 ; 771Note that when processing a TTree or TChain dataset, the `npartitions` value should not exceed the number of clusters in; 772the dataset. Th",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:54855,Testability,log,logic,54855,"running multiple RDataFrame event loops concurrently:; 936~~~{.cpp}; 937ROOT::EnableImplicitMT();; 938ROOT::RDataFrame df1(""tree1"", ""f1.root"");; 939ROOT::RDataFrame df2(""tree2"", ""f2.root"");; 940auto histo1 = df1.Histo1D(""x"");; 941auto histo2 = df2.Histo1D(""y"");; 942 ; 943// just accessing result pointers, the event loops of separate RDataFrames run one after the other; 944histo1->Draw(); // runs first multi-thread event loop; 945histo2->Draw(); // runs second multi-thread event loop; 946 ; 947// alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; 948ROOT::RDF::RunGraphs({histo1, histo2});; 949histo1->Draw(); // results can then be used as usual; 950~~~; 951 ; 952### Performance considerations; 953 ; 954To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible.; 955For instance, `Filter(""x > 0"")` requires just-in-time compilation of the corresponding C++ logic, while the equivalent `Filter([](float x) { return x > 0.; }, {""x""})` does not.; 956Similarly, `Histo1D(""x"")` requires just-in-time compilation after the type of `x` is retrieved from the dataset, while `Histo1D<float>(""x"")` does not; the latter spelling; 957should be preferred for performance-critical applications.; 958 ; 959Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame.; 960See [Efficient analysis in Python](#python) for possible ways to speed up hot paths in this case.; 961 ; 962Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations *for all RDataFrame computation graphs*; 963before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; 964 ; 965Also make sure not to count the just-in-time compilat",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:56048,Testability,log,logging,56048,"g; 957should be preferred for performance-critical applications.; 958 ; 959Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame.; 960See [Efficient analysis in Python](#python) for possible ways to speed up hot paths in this case.; 961 ; 962Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations *for all RDataFrame computation graphs*; 963before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; 964 ; 965Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See [Activating RDataFrame execution logs](\ref rdf-logging).; 966 ; 967### Memory usage; 968 ; 969There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; 970 ; 971Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:56250,Testability,log,logs,56250,"ameters or pass C++ callables to RDataFrame.; 960See [Efficient analysis in Python](#python) for possible ways to speed up hot paths in this case.; 961 ; 962Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations *for all RDataFrame computation graphs*; 963before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; 964 ; 965Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See [Activating RDataFrame execution logs](\ref rdf-logging).; 966 ; 967### Memory usage; 968 ; 969There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; 970 ; 971Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create many RDataFrames one after the other. Possible mitigations include creating and running each RDataFrame event loop in a sub-proce",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:56265,Testability,log,logging,56265,"ameters or pass C++ callables to RDataFrame.; 960See [Efficient analysis in Python](#python) for possible ways to speed up hot paths in this case.; 961 ; 962Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations *for all RDataFrame computation graphs*; 963before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; 964 ; 965Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See [Activating RDataFrame execution logs](\ref rdf-logging).; 966 ; 967### Memory usage; 968 ; 969There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; 970 ; 971Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create many RDataFrames one after the other. Possible mitigations include creating and running each RDataFrame event loop in a sub-proce",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:76503,Testability,log,logical,76503,"thread-safe root mean square of column ""x"":; 1299~~~{.cpp}; 1300// Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; 1301ROOT::EnableImplicitMT();; 1302const unsigned int nSlots = df.GetNSlots();; 1303std::vector<double> sumSqs(nSlots, 0.);; 1304std::vector<unsigned int> ns(nSlots, 0);; 1305 ; 1306df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; 1307double sumSq = std::accumulate(sumSqs.begin(), sumSqs.end(), 0.); // sum all squares; 1308unsigned int n = std::accumulate(ns.begin(), ns.end(), 0); // sum all counts; 1309std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; 1310~~~; 1311Notice how we created one `double` variable for each processing slot and later merged their results via `std::accumulate`.; 1312 ; 1313 ; 1314\anchor friends; 1315### Dataset joins with friend trees; 1316 ; 1317Vertically concatenating multiple trees that have the same columns (creating a logical dataset with the same columns and; 1318more rows) is trivial in RDataFrame: just pass the tree name and a list of file names to RDataFrame's constructor, or create a TChain; 1319out of the desired trees and pass that to RDataFrame.; 1320 ; 1321Horizontal concatenations of trees or chains (creating a logical dataset with the same number of rows and the union of the; 1322columns of multiple trees) leverages TTree's ""friend"" mechanism.; 1323 ; 1324Simple joins of trees that do not have the same number of rows are also possible with indexed friend trees (see below).; 1325 ; 1326To use friend trees in RDataFrame, set up trees with the appropriate relationships and then instantiate an RDataFrame; 1327with the main tree:; 1328 ; 1329~~~{.cpp}; 1330TTree main([...]);; 1331TTree friend([...]);; 1332main.AddFriend(&friend, ""myFriend"");; 1333 ; 1334RDataFrame df(main);; 1335auto df2 = df.Filter(""myFriend.MyCol == 42"");; 1336~~~; 1337 ; 1338The same applies for TChains. Columns coming from the friend trees can be referred to",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:76812,Testability,log,logical,76812,"; 1306df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; 1307double sumSq = std::accumulate(sumSqs.begin(), sumSqs.end(), 0.); // sum all squares; 1308unsigned int n = std::accumulate(ns.begin(), ns.end(), 0); // sum all counts; 1309std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; 1310~~~; 1311Notice how we created one `double` variable for each processing slot and later merged their results via `std::accumulate`.; 1312 ; 1313 ; 1314\anchor friends; 1315### Dataset joins with friend trees; 1316 ; 1317Vertically concatenating multiple trees that have the same columns (creating a logical dataset with the same columns and; 1318more rows) is trivial in RDataFrame: just pass the tree name and a list of file names to RDataFrame's constructor, or create a TChain; 1319out of the desired trees and pass that to RDataFrame.; 1320 ; 1321Horizontal concatenations of trees or chains (creating a logical dataset with the same number of rows and the union of the; 1322columns of multiple trees) leverages TTree's ""friend"" mechanism.; 1323 ; 1324Simple joins of trees that do not have the same number of rows are also possible with indexed friend trees (see below).; 1325 ; 1326To use friend trees in RDataFrame, set up trees with the appropriate relationships and then instantiate an RDataFrame; 1327with the main tree:; 1328 ; 1329~~~{.cpp}; 1330TTree main([...]);; 1331TTree friend([...]);; 1332main.AddFriend(&friend, ""myFriend"");; 1333 ; 1334RDataFrame df(main);; 1335auto df2 = df.Filter(""myFriend.MyCol == 42"");; 1336~~~; 1337 ; 1338The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above,; 1339or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of; 1340""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; 1341 ; 1342\note A common source of confu",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:82416,Testability,log,logging,82416,"ted.; 1403 ; 1404Following there is an example of usage:; 1405~~~{.cpp}; 1406// First, a sample computational graph is built; 1407ROOT::RDataFrame df(""tree"", ""f.root"");; 1408 ; 1409auto df2 = df.Define(""x"", []() { return 1; }); 1410 .Filter(""col0 % 1 == col0""); 1411 .Filter([](int b1) { return b1 <2; }, {""cut1""}); 1412 .Define(""y"", []() { return 1; });; 1413 ; 1414auto count = df2.Count();; 1415 ; 1416// Prints the graph to the rd1.dot file in the current directory; 1417ROOT::RDF::SaveGraph(df, ""./mydot.dot"");; 1418// Prints the graph to standard output; 1419ROOT::RDF::SaveGraph(df);; 1420~~~; 1421 ; 1422The generated graph can be rendered using one of the graphviz filters, e.g. `dot`. For instance, the image below can be generated with the following command:; 1423~~~{.sh}; 1424$ dot -Tpng computation_graph.dot -ocomputation_graph.png; 1425~~~; 1426 ; 1427\image html RDF_Graph2.png; 1428 ; 1429\anchor rdf-logging; 1430### Activating RDataFrame execution logs; 1431 ; 1432RDataFrame has experimental support for verbose logging of the event loop runtimes and other interesting related information. It is activated as follows:; 1433~~~{.cpp}; 1434#include <ROOT/RLogger.hxx>; 1435 ; 1436// this increases RDF's verbosity level as long as the `verbosity` variable is in scope; 1437auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel::kInfo);; 1438~~~; 1439 ; 1440or in Python:; 1441~~~{.python}; 1442import ROOT; 1443 ; 1444verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kInfo); 1445~~~; 1446 ; 1447More information (e.g. start and end of each multi-thread task) is printed using `ELogLevel.kDebug` and even more; 1448(e.g. a full dump of the generated code that RDataFrame just-in-time-compiles) using `ELogLevel.kDebug+10`.; 1449 ; 1450\anchor rdf-from-spec; 1451### Creating an RDataFrame from a dataset specification file; 1452 ; 1453RDataFrame can be",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:82465,Testability,log,logs,82465,"ted.; 1403 ; 1404Following there is an example of usage:; 1405~~~{.cpp}; 1406// First, a sample computational graph is built; 1407ROOT::RDataFrame df(""tree"", ""f.root"");; 1408 ; 1409auto df2 = df.Define(""x"", []() { return 1; }); 1410 .Filter(""col0 % 1 == col0""); 1411 .Filter([](int b1) { return b1 <2; }, {""cut1""}); 1412 .Define(""y"", []() { return 1; });; 1413 ; 1414auto count = df2.Count();; 1415 ; 1416// Prints the graph to the rd1.dot file in the current directory; 1417ROOT::RDF::SaveGraph(df, ""./mydot.dot"");; 1418// Prints the graph to standard output; 1419ROOT::RDF::SaveGraph(df);; 1420~~~; 1421 ; 1422The generated graph can be rendered using one of the graphviz filters, e.g. `dot`. For instance, the image below can be generated with the following command:; 1423~~~{.sh}; 1424$ dot -Tpng computation_graph.dot -ocomputation_graph.png; 1425~~~; 1426 ; 1427\image html RDF_Graph2.png; 1428 ; 1429\anchor rdf-logging; 1430### Activating RDataFrame execution logs; 1431 ; 1432RDataFrame has experimental support for verbose logging of the event loop runtimes and other interesting related information. It is activated as follows:; 1433~~~{.cpp}; 1434#include <ROOT/RLogger.hxx>; 1435 ; 1436// this increases RDF's verbosity level as long as the `verbosity` variable is in scope; 1437auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel::kInfo);; 1438~~~; 1439 ; 1440or in Python:; 1441~~~{.python}; 1442import ROOT; 1443 ; 1444verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kInfo); 1445~~~; 1446 ; 1447More information (e.g. start and end of each multi-thread task) is printed using `ELogLevel.kDebug` and even more; 1448(e.g. a full dump of the generated code that RDataFrame just-in-time-compiles) using `ELogLevel.kDebug+10`.; 1449 ; 1450\anchor rdf-from-spec; 1451### Creating an RDataFrame from a dataset specification file; 1452 ; 1453RDataFrame can be",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:82530,Testability,log,logging,82530,"ted.; 1403 ; 1404Following there is an example of usage:; 1405~~~{.cpp}; 1406// First, a sample computational graph is built; 1407ROOT::RDataFrame df(""tree"", ""f.root"");; 1408 ; 1409auto df2 = df.Define(""x"", []() { return 1; }); 1410 .Filter(""col0 % 1 == col0""); 1411 .Filter([](int b1) { return b1 <2; }, {""cut1""}); 1412 .Define(""y"", []() { return 1; });; 1413 ; 1414auto count = df2.Count();; 1415 ; 1416// Prints the graph to the rd1.dot file in the current directory; 1417ROOT::RDF::SaveGraph(df, ""./mydot.dot"");; 1418// Prints the graph to standard output; 1419ROOT::RDF::SaveGraph(df);; 1420~~~; 1421 ; 1422The generated graph can be rendered using one of the graphviz filters, e.g. `dot`. For instance, the image below can be generated with the following command:; 1423~~~{.sh}; 1424$ dot -Tpng computation_graph.dot -ocomputation_graph.png; 1425~~~; 1426 ; 1427\image html RDF_Graph2.png; 1428 ; 1429\anchor rdf-logging; 1430### Activating RDataFrame execution logs; 1431 ; 1432RDataFrame has experimental support for verbose logging of the event loop runtimes and other interesting related information. It is activated as follows:; 1433~~~{.cpp}; 1434#include <ROOT/RLogger.hxx>; 1435 ; 1436// this increases RDF's verbosity level as long as the `verbosity` variable is in scope; 1437auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel::kInfo);; 1438~~~; 1439 ; 1440or in Python:; 1441~~~{.python}; 1442import ROOT; 1443 ; 1444verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kInfo); 1445~~~; 1446 ; 1447More information (e.g. start and end of each multi-thread task) is printed using `ELogLevel.kDebug` and even more; 1448(e.g. a full dump of the generated code that RDataFrame just-in-time-compiles) using `ELogLevel.kDebug+10`.; 1449 ; 1450\anchor rdf-from-spec; 1451### Creating an RDataFrame from a dataset specification file; 1452 ; 1453RDataFrame can be",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:1784,Usability,guid,guide,1784,"ROOT/RDF/RDatasetSpec.hxx""; 15#include ""ROOT/RDF/RInterface.hxx""; 16#include ""ROOT/RDF/RLoopManager.hxx""; 17#include ""ROOT/RDF/Utils.hxx""; 18#include <string_view>; 19#include ""TChain.h""; 20#include ""TDirectory.h""; 21#include ""RtypesCore.h"" // for ULong64_t; 22#include ""TTree.h""; 23 ; 24#include <fstream> // std::ifstream; 25#include <nlohmann/json.hpp> // nlohmann::json::parse; 26#include <memory> // for make_shared, allocator, shared_ptr; 27#include <ostream> // ostringstream; 28#include <stdexcept>; 29#include <string>; 30#include <vector>; 31 ; 32// clang-format off; 33/**; 34* \class ROOT::RDataFrame; 35* \ingroup dataframe; 36* \brief ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python.; 37 ; 38In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available; 39on their machines completely transparently.<br>; 40Skip to the [class reference](#reference) or keep reading for the user guide.; 41 ; 42In a nutshell:; 43~~~{.cpp}; 44ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; 45ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; 46auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; 47myHisto->Draw(); // Event loop is run here, upon first access to a result; 48~~~; 49 ; 50Calculations are expressed in terms of a type-safe *functional chain of actions and transformations*, RDataFrame takes; 51care of their execution. The implementation automatically puts in place several low level optimisations such as; 52multi-thread parallelization and caching.; 53 ; 54\htmlonly; 55<a href=""https://doi.org/10.5281/zenodo.260230""><img src=""https://zenodo.org/badge/DOI/10.5281/zenodo.260230.svg""; 56alt=""DOI""></a>; 57\endhtmlonly; 58 ; 59## For the impatient user; 60You can directly see RDataFrame in action in our [tutorials](https://root.cern/doc/master/group__tutorial__d",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:4253,Usability,progress bar,progress bar,4253,"</a>; 57\endhtmlonly; 58 ; 59## For the impatient user; 60You can directly see RDataFrame in action in our [tutorials](https://root.cern/doc/master/group__tutorial__dataframe.html), in C++ or Python.; 61 ; 62## Table of Contents; 63- [Cheat sheet](\ref cheatsheet); 64- [Introduction](\ref introduction); 65- [Crash course](\ref crash-course); 66- [Working with collections](\ref collections); 67- [Transformations: manipulating data](\ref transformations); 68- [Actions: getting results](\ref actions); 69- [Distributed execution in Python](\ref distrdf); 70- [Performance tips and parallel execution](\ref parallel-execution); 71- [More features](\ref more-features); 72 - [Systematic variations](\ref systematics); 73 - [RDataFrame objects as function arguments and return values](\ref rnode); 74 - [Storing RDataFrame objects in collections](\ref RDFCollections); 75 - [Executing callbacks every N events](\ref callbacks); 76 - [Default column lists](\ref default-branches); 77 - [Special helper columns: `rdfentry_` and `rdfslot_`](\ref helper-cols); 78 - [Just-in-time compilation: column type inference and explicit declaration of column types](\ref jitting); 79 - [User-defined custom actions](\ref generic-actions); 80 - [Dataset joins with friend trees](\ref friends); 81 - [Reading data formats other than ROOT trees](\ref other-file-formats); 82 - [Computation graphs (storing and reusing sets of transformations)](\ref callgraphs); 83 - [Visualizing the computation graph](\ref representgraph); 84 - [Activating RDataFrame execution logs](\ref rdf-logging); 85 - [Creating an RDataFrame from a dataset specification file](\ref rdf-from-spec); 86 - [Adding a progress bar](\ref progressbar); 87- [Efficient analysis in Python](\ref python); 88- <a class=""el"" href=""classROOT_1_1RDataFrame.html#reference"" onclick=""javascript:toggleInherit('pub_methods_classROOT_1_1RDF_1_1RInterface')"">Class reference</a>; 89 ; 90\anchor cheatsheet; 91## Cheat sheet; 92These are the operations which can",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:6700,Usability,guid,guide,6700,"103| DefineSlotEntry() | Same as DefineSlot(), but the entry number is passed in addition to the slot number. This is meant as a helper in case the expression depends on the entry number. For details about entry numbers in multi-threaded runs, see [here](\ref helper-cols). |; 104| Filter() | Filter rows based on user-defined conditions. |; 105| Range() | Filter rows based on entry number (single-thread only). |; 106| Redefine() | Overwrite the value and/or type of an existing column. See Define() for more information. |; 107| RedefineSlot() | Overwrite the value and/or type of an existing column. See DefineSlot() for more information. |; 108| RedefineSlotEntry() | Overwrite the value and/or type of an existing column. See DefineSlotEntry() for more information. |; 109| Vary() | Register systematic variations for an existing column. Varied results are then extracted via VariationsFor(). |; 110 ; 111 ; 112### Actions; 113Actions aggregate data into a result. Each one is described in more detail in the reference guide.; 114 ; 115In the following, whenever we say an action ""returns"" something, we always mean it returns a smart pointer to it. Actions only act on events that pass all preceding filters.; 116 ; 117Lazy actions only trigger the event loop when one of the results is accessed for the first time, making it easy to; 118produce many different results in one event loop. Instant actions trigger the event loop instantly.; 119 ; 120 ; 121| **Lazy action** | **Description** |; 122|------------------|-----------------|; 123| Aggregate() | Execute a user-defined accumulation operation on the processed column values. |; 124| Book() | Book execution of a custom action using a user-defined helper object. |; 125| Cache() | Cache column values in memory. Custom columns can be cached as well, filtered entries are not cached. Users can specify which columns to save (default is all). |; 126| Count() | Return the number of events processed. Useful e.g. to get a quick count of the",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:11531,Usability,simpl,simply,11531," responsible for the thread-safety of this callable when executing with implicit multi-threading enabled. |; 147| ForeachSlot() | Same as Foreach(), but the user-defined function must take an extra `unsigned int slot` as its first parameter. `slot` will take a different value, `0` to `nThreads - 1`, for each thread of execution. This is meant as a helper in writing thread-safe Foreach() actions when using RDataFrame after ROOT::EnableImplicitMT(). ForeachSlot() works just as well with single-thread execution: in that case `slot` will always be `0`. |; 148| Snapshot() | Write the processed dataset to disk, in a new TTree and TFile. Custom columns can be saved as well, filtered entries are not saved. Users can specify which columns to save (default is all). Snapshot, by default, overwrites the output file if it already exists. Snapshot() can be made *lazy* setting the appropriate flag in the snapshot options.|; 149 ; 150 ; 151### Queries; 152 ; 153These operations do not modify the dataframe or book computations but simply return information on the RDataFrame object.; 154 ; 155| **Operation** | **Description** |; 156|---------------------|-----------------|; 157| Describe() | Get useful information describing the dataframe, e.g. columns and their types. |; 158| GetColumnNames() | Get the names of all the available columns of the dataset. |; 159| GetColumnType() | Return the type of a given column as a string. |; 160| GetColumnTypeNamesList() | Return the list of type names of columns in the dataset. |; 161| GetDefinedColumnNames() | Get the names of all the defined columns. |; 162| GetFilterNames() | Return the names of all filters in the computation graph. |; 163| GetNRuns() | Return the number of event loops run by this RDataFrame instance so far. |; 164| GetNSlots() | Return the number of processing slots that RDataFrame will use during the event loop (i.e. the concurrency level). |; 165| SaveGraph() | Store the computation graph of an RDataFrame in [DOT format (gra",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:18458,Usability,simpl,simple,18458,"et<TTree>(""treeName"");; 287 ; 288RDataFrame d1(""treeName"", ""file.root"");; 289RDataFrame d2(""treeName"", f); // same as TTreeReader; 290RDataFrame d3(*t);; 291 ; 292// multiple files -- all constructors are equivalent; 293TChain chain(""myTree"");; 294chain.Add(""file1.root"");; 295chain.Add(""file2.root"");; 296 ; 297RDataFrame d4(""myTree"", {""file1.root"", ""file2.root""});; 298std::vector<std::string> files = {""file1.root"", ""file2.root""};; 299RDataFrame d5(""myTree"", files);; 300RDataFrame d6(""myTree"", ""file*.root""); // the glob is passed as-is to TChain's constructor; 301RDataFrame d7(chain);; 302~~~; 303Additionally, users can construct an RDataFrame with no data source by passing an integer number. This is the number of rows that; 304will be generated by this RDataFrame.; 305~~~{.cpp}; 306RDataFrame d(10); // a RDF with 10 entries (and no columns/branches, for now); 307d.Foreach([] { static int i = 0; std::cout << i++ << std::endl; }); // silly example usage: count to ten; 308~~~; 309This is useful to generate simple datasets on the fly: the contents of each event can be specified with Define() (explained below). For example, we have used this method to generate [Pythia](https://pythia.org/) events and write them to disk in parallel (with the Snapshot action).; 310 ; 311For data sources other than TTrees and TChains, RDataFrame objects are constructed using ad-hoc factory functions (see e.g. FromCSV(), FromSqlite(), FromArrow()):; 312 ; 313~~~{.cpp}; 314auto df = ROOT::RDF::FromCSV(""input.csv"");; 315// use df as usual; 316~~~; 317 ; 318### Filling a histogram; 319Let's now tackle a very common task, filling a histogram:; 320~~~{.cpp}; 321// Fill a TH1D with the ""MET"" branch; 322RDataFrame d(""myTree"", ""file.root"");; 323auto h = d.Histo1D(""MET"");; 324h->Draw();; 325~~~; 326The first line creates an RDataFrame associated to the TTree ""myTree"". This tree has a branch named ""MET"".; 327 ; 328Histo1D() is an *action*; it returns a smart pointer (a ROOT::RDF::RResultPtr, to be pre",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:20857,Usability,simpl,simple,20857," filter; 336Let's say we want to cut over the value of branch ""MET"" and count how many events pass this cut. This is one way to do it:; 337~~~{.cpp}; 338RDataFrame d(""myTree"", ""file.root"");; 339auto c = d.Filter(""MET > 4."").Count(); // computations booked, not run; 340std::cout << *c << std::endl; // computations run here, upon first access to the result; 341~~~; 342The filter string (which must contain a valid C++ expression) is applied to the specified columns for each event;; 343the name and types of the columns are inferred automatically. The string expression is required to return a `bool`; 344which signals whether the event passes the filter (`true`) or not (`false`).; 345 ; 346You can think of your data as ""flowing"" through the chain of calls, being transformed, filtered and finally used to; 347perform actions. Multiple Filter() calls can be chained one after another.; 348 ; 349Using string filters is nice for simple things, but they are limited to specifying the equivalent of a single return; 350statement or the body of a lambda, so it's cumbersome to use strings with more complex filters. They also add a small; 351runtime overhead, as ROOT needs to just-in-time compile the string into C++ code. When more freedom is required or; 352runtime performance is very important, a C++ callable can be specified instead (a lambda in the following snippet,; 353but it can be any kind of function or even a functor class), together with a list of column names.; 354This snippet is analogous to the one above:; 355~~~{.cpp}; 356RDataFrame d(""myTree"", ""file.root"");; 357auto metCut = [](double x) { return x > 4.; }; // a C++11 lambda function checking ""x > 4""; 358auto c = d.Filter(metCut, {""MET""}).Count();; 359std::cout << *c << std::endl;; 360~~~; 361 ; 362An example of a more complex filter expressed as a string containing C++ code is shown below; 363 ; 364~~~{.cpp}; 365RDataFrame d(""myTree"", ""file.root"");; 366auto df = d.Define(""p"", ""std::array<double, 4> p{px, py, pz}; retur",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:31191,Usability,simpl,simply,31191,"e`) or not (`false`). It should perform ""read-only"" operations on the; 501columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness; 502when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column; 503names are used as variable names (e.g. `Filter(""x[0] + x[1] > 0"")`). This is a convenience feature that comes with a; 504certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event; 505loop. See the paragraph about ""Just-in-time compilation"" below for more information.; 506 ; 507RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed; 508in order and the first one returning `false` causes the event to be discarded and triggers the processing of the next; 509entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for; 510each entry: after the first access it simply serves a cached result.; 511 ; 512\anchor named-filters-and-cutflow-reports; 513#### Named filters and cutflow reports; 514An optional string parameter `name` can be passed to the Filter() method to create a **named filter**. Named filters; 515work as usual, but also keep track of how many entries they accept and reject.; 516 ; 517Statistics are retrieved through a call to the Report() method:; 518 ; 519- when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all; 520named filters declared up to that point; 521- when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport>; 522relative all named filters in the section of the chain between the main RDataFrame and that node (included).; 523 ; 524Stats are stored in the same order as named filters have been added to the graph, and *refer to the",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:40422,Usability,guid,guide,40422,"ubset that is currently available is:; 662- AsNumpy; 663- Count; 664- Define; 665- DefinePerSample; 666- Filter; 667- Graph; 668- Histo[1,2,3]D; 669- HistoND; 670- Max; 671- Mean; 672- Min; 673- Profile[1,2,3]D; 674- Redefine; 675- Snapshot; 676- Stats; 677- StdDev; 678- Sum; 679- Systematic variations: Vary and [VariationsFor](\ref ROOT::RDF::Experimental::VariationsFor).; 680- Parallel submission of distributed graphs: [RunGraphs](\ref ROOT::RDF::RunGraphs).; 681- Information about the dataframe: GetColumnNames.; 682 ; 683with support for more operations coming in the future. Data sources other than TTree and TChain (e.g. CSV, RNTuple) are; 684currently not supported.; 685 ; 686\note The distributed RDataFrame module requires at least Python version 3.8.; 687 ; 688### Connecting to a Spark cluster; 689 ; 690In order to distribute the RDataFrame workload, you can connect to a Spark cluster you have access to through the; 691official [Spark API](https://spark.apache.org/docs/latest/rdd-programming-guide.html#initializing-spark), then hook the; 692connection instance to the distributed `RDataFrame` object like so:; 693 ; 694~~~{.py}; 695import pyspark; 696import ROOT; 697 ; 698# Create a SparkContext object with the right configuration for your Spark cluster; 699conf = SparkConf().setAppName(appName).setMaster(master); 700sc = SparkContext(conf=conf); 701 ; 702# Point RDataFrame calls to the Spark specific RDataFrame; 703RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; 704 ; 705# The Spark RDataFrame constructor accepts an optional ""sparkcontext"" parameter; 706# and it will distribute the application to the connected cluster; 707df = RDataFrame(""mytree"", ""myfile.root"", sparkcontext = sc); 708~~~; 709 ; 710If an instance of [SparkContext](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.SparkContext.html); 711is not provided, the default behaviour is to create one in the background for you.; 712 ; 713### Connecting to a Dask cluste",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:51846,Usability,simpl,simple,51846,"in) in multi-thread runs.; 903 ; 904\warning By default, RDataFrame will use as many threads as the hardware supports, using up **all** the resources on; 905a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use; 906~~~{.cpp}; 907ROOT::EnableImplicitMT(i); 908~~~; 909replacing `i` with the number of CPUs/slots that were allocated for this job.; 910 ; 911### Thread-safety of user-defined expressions; 912RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops.; 913User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate(); 914will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; 915 ; 916Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define(); 917expressions will often be *pure* in the functional programming sense (no side-effects, no dependency on external state),; 918which eliminates all risks of race conditions.; 919 ; 920In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or \link ROOT::RDF::RResultPtr::OnPartialResult OnPartialResult()\endlink; 921offer thread-aware counterparts (ForeachSlot(), DefineSlot(), \link ROOT::RDF::RResultPtr::OnPartialResultSlot OnPartialResultSlot()\endlink): their only difference is that they; 922will pass an extra `slot` argument (an unsigned integer) to the user-defined expression. When calling user-defined code; 923concurrently, RDataFrame guarantees that different threads will employ different values of the `slot` parameter,; 924where `slot` will be a number between 0 and `GetNSlots() - 1`.; 925In other words, within a slot, computation runs sequentially and events are processed sequentially.; 926Note that the same slot might be associated to differen",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:56069,Usability,simpl,simplifies,56069,"g; 957should be preferred for performance-critical applications.; 958 ; 959Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame.; 960See [Efficient analysis in Python](#python) for possible ways to speed up hot paths in this case.; 961 ; 962Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations *for all RDataFrame computation graphs*; 963before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; 964 ; 965Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See [Activating RDataFrame execution logs](\ref rdf-logging).; 966 ; 967### Memory usage; 968 ; 969There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; 970 ; 971Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:60509,Usability,simpl,simply,60509,"he nominal_hx; 1013ROOT::RDF::Experimental::RResultMap<TH1D> hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; 1014 ; 1015// the event loop runs here, upon first access to any of the results or varied results:; 1016hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); 1017hx[""pt:down""].Draw(""SAME"");; 1018hx[""pt:up""].Draw(""SAME"");; 1019~~~; 1020 ; 1021A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned; 1022as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of; 1023this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second; 1024to the tag ""up""). The _full_ variation name will be composed of the varied column name and the variation tags (e.g.; 1025""pt:down"", ""pt:up"" in this example). Python usage looks similar.; 1026 ; 1027Note how we use the ""pt"" column as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill; 1028the resulting histogram. To produce the varied results, RDataFrame will automatically execute the Filter and Define; 1029calls for each variation and fill the histogram with values and cuts that depend on the variation.; 1030 ; 1031There is no limitation to the complexity of a Vary() expression. Just like for the Define() and Filter() calls, users are; 1032not limited to string expressions but they can also pass any valid C++ callable, including lambda functions and; 1033complex functors. The callable can be applied to zero or more existing columns and it will always receive their; 1034_nominal_ value in input.; 1035 ; 1036#### Varying multiple columns in lockstep; 1037 ; 1038In the following Python snippet we use the Vary() signature that allows varying multiple columns simultaneously or; 1039""in lockstep"":; 1040 ; 1041~~~{.python}; 1042df.Vary([""pt"", ""eta""],; 1043 ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",; 1044 variat",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:63283,Usability,feedback,feedback,63283,"ill be no result produced; 1057by applying multiple systematic variations at the same time.; 1058For example, in the following example snippet, the RResultMap instance `all_h` will contain keys ""nominal"", ""pt:down"",; 1059""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; 1060 ; 1061~~~{.cpp}; 1062auto df = _df.Vary(""pt"",; 1063 ""ROOT::RVecD{pt*0.9, pt*1.1}"",; 1064 {""down"", ""up""}); 1065 .Vary(""eta"",; 1066 [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; 1067 {""eta""},; 1068 2);; 1069 ; 1070auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; 1071auto all_hs = VariationsFor(nom_h);; 1072all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; 1073~~~; 1074 ; 1075Note how we passed the integer `2` instead of a list of variation tags to the second Vary() invocation: this is a; 1076shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; 1077 ; 1078\note Currently, VariationsFor() and RResultMap are in the `ROOT::RDF::Experimental` namespace, to indicate that these; 1079 interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related; 1080 programming model will be streamlined in future versions.; 1081 ; 1082\note Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to; 1083 call \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" on them. These limitations will be lifted in future releases.; 1084 ; 1085See the Vary() method for more information and [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) ; 1086for an example usage of Vary and \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" in the analysis.; 1087 ; 1088\anchor rnode; 1089### RDataFrame objects as function arguments and return values; 1090RDataFrame variables/nodes are relatively cheap to copy and it's possible to both pass them to (or move them into); 1091functions and to return them from functions. Howev",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:64650,Usability,simpl,simpler,64650,"nformation and [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) ; 1086for an example usage of Vary and \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" in the analysis.; 1087 ; 1088\anchor rnode; 1089### RDataFrame objects as function arguments and return values; 1090RDataFrame variables/nodes are relatively cheap to copy and it's possible to both pass them to (or move them into); 1091functions and to return them from functions. However, in general each dataframe node will have a different C++ type,; 1092which includes all available compile-time information about what that node does. One way to cope with this complication; 1093is to use template functions and/or C++14 auto return types:; 1094~~~{.cpp}; 1095template <typename RDF>; 1096auto ApplySomeFilters(RDF df); 1097{; 1098 return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; 1099}; 1100~~~; 1101 ; 1102A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be; 1103converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode:; 1104~~~{.cpp}; 1105// a function that conditionally adds a Range to an RDataFrame node.; 1106RNode MaybeAddRange(RNode df, bool mustAddRange); 1107{; 1108 return mustAddRange ? df.Range(1) : df;; 1109}; 1110// use as :; 1111ROOT::RDataFrame df(10);; 1112auto maybeRangedDF = MaybeAddRange(df, true);; 1113~~~; 1114 ; 1115The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event; 1116loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function `ROOT.RDF.AsRNode`.; 1117 ; 1118\anchor RDFCollections; 1119### Storing RDataFrame objects in collections; 1120 ; 1121ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a `std::vector<RNode>` or a `std::map<std::string, RNode>`:; 1122 ; 1123~~~{.cp",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:65576,Usability,simpl,simple,65576,"1098 return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; 1099}; 1100~~~; 1101 ; 1102A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be; 1103converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode:; 1104~~~{.cpp}; 1105// a function that conditionally adds a Range to an RDataFrame node.; 1106RNode MaybeAddRange(RNode df, bool mustAddRange); 1107{; 1108 return mustAddRange ? df.Range(1) : df;; 1109}; 1110// use as :; 1111ROOT::RDataFrame df(10);; 1112auto maybeRangedDF = MaybeAddRange(df, true);; 1113~~~; 1114 ; 1115The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event; 1116loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function `ROOT.RDF.AsRNode`.; 1117 ; 1118\anchor RDFCollections; 1119### Storing RDataFrame objects in collections; 1120 ; 1121ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a `std::vector<RNode>` or a `std::map<std::string, RNode>`:; 1122 ; 1123~~~{.cpp}; 1124std::vector<ROOT::RDF::RNode> dfs;; 1125dfs.emplace_back(ROOT::RDataFrame(10));; 1126dfs.emplace_back(dfs[0].Define(""x"", ""42.f""));; 1127~~~; 1128 ; 1129\anchor callbacks; 1130### Executing callbacks every N events; 1131It's possible to schedule execution of arbitrary functions (callbacks) during the event loop.; 1132Callbacks can be used e.g. to inspect partial results of the analysis while the event loop is running,; 1133drawing a partially-filled histogram every time a certain number of new entries is processed, or; 1134displaying a progress bar while the event loop runs.; 1135 ; 1136For example one can draw an up-to-date version of a result histogram every 100 entries like this:; 1137~~~{.cpp}; 1138auto h = df.Histo1D(""x"");; 1139TCanvas c(""c"",""x hist"");; 1140h.OnPartialResult(100, [&c](TH1D &h_) { c.cd(); ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:66258,Usability,progress bar,progress bar,66258,"o ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event; 1116loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function `ROOT.RDF.AsRNode`.; 1117 ; 1118\anchor RDFCollections; 1119### Storing RDataFrame objects in collections; 1120 ; 1121ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a `std::vector<RNode>` or a `std::map<std::string, RNode>`:; 1122 ; 1123~~~{.cpp}; 1124std::vector<ROOT::RDF::RNode> dfs;; 1125dfs.emplace_back(ROOT::RDataFrame(10));; 1126dfs.emplace_back(dfs[0].Define(""x"", ""42.f""));; 1127~~~; 1128 ; 1129\anchor callbacks; 1130### Executing callbacks every N events; 1131It's possible to schedule execution of arbitrary functions (callbacks) during the event loop.; 1132Callbacks can be used e.g. to inspect partial results of the analysis while the event loop is running,; 1133drawing a partially-filled histogram every time a certain number of new entries is processed, or; 1134displaying a progress bar while the event loop runs.; 1135 ; 1136For example one can draw an up-to-date version of a result histogram every 100 entries like this:; 1137~~~{.cpp}; 1138auto h = df.Histo1D(""x"");; 1139TCanvas c(""c"",""x hist"");; 1140h.OnPartialResult(100, [&c](TH1D &h_) { c.cd(); h_.Draw(); c.Update(); });; 1141// event loop runs here, this final `Draw` is executed after the event loop is finished; 1142h->Draw();; 1143~~~; 1144 ; 1145Callbacks are registered to a ROOT::RDF::RResultPtr and must be callables that takes a reference to the result type as argument; 1146and return nothing. RDataFrame will invoke registered callbacks passing partial action results as arguments to them; 1147(e.g. a histogram filled with a part of the selected events).; 1148 ; 1149Read more on ROOT::RDF::RResultPtr::OnPartialResult() and ROOT::RDF::RResultPtr::OnPartialResultSlot().; 1150 ; 1151\anchor default-branches; 1152### Default",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:74976,Usability,simpl,simple,74976,"trary code in the event loop with Foreach() and ForeachSlot(); 1277 ; 1278Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and; 1279executes the callable on the values of those columns for each event that passes all upstream selections.; 1280It can be used to perform actions that are not already available in the interface. For example, the following snippet; 1281evaluates the root mean square of column ""x"":; 1282~~~{.cpp}; 1283// Single-thread evaluation of RMS of column ""x"" using Foreach; 1284double sumSq = 0.;; 1285unsigned int n = 0;; 1286df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; 1287std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; 1288~~~; 1289In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach():; 1290thread will execute the expression concurrently.; 1291The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of `rms`; but; 1292this is probably too much head-scratch for such a simple operation.; 1293 ; 1294ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an; 1295additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame; 1296guarantees that ForeachSlot() will invoke the user expression with different `slot` parameters for different concurrent; 1297executions (see [Special helper columns: rdfentry_ and rdfslot_](\ref helper-cols) for more information on the slot parameter).; 1298We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"":; 1299~~~{.cpp}; 1300// Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; 1301ROOT::EnableImplicitMT();; 1302const unsigned int nSlots = df.GetNSlots();; 1303std::vector<double> sumSqs(nSlots, 0.);; 1304std::vector<unsigned int> ns(nSlots, 0);; 1305 ; 1306df.ForeachSlot([&sumSqs, &ns](unsigned int sl",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:78155,Usability,simpl,simple,78155,"propriate relationships and then instantiate an RDataFrame; 1327with the main tree:; 1328 ; 1329~~~{.cpp}; 1330TTree main([...]);; 1331TTree friend([...]);; 1332main.AddFriend(&friend, ""myFriend"");; 1333 ; 1334RDataFrame df(main);; 1335auto df2 = df.Filter(""myFriend.MyCol == 42"");; 1336~~~; 1337 ; 1338The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above,; 1339or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of; 1340""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; 1341 ; 1342\note A common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their; 1343 entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original; 1344 one: rows will be mismatched.; 1345 ; 1346Indexed friend trees provide a way to perform simple joins of multiple trees over a common column.; 1347When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the; 1348""index"" columns have a value identical to the one in the main one. For example, in Python:; 1349 ; 1350~~~{.py}; 1351main_tree = ...; 1352aux_tree = ...; 1353 ; 1354# If a friend tree has an index on `commonColumn`, when the main tree loads; 1355# a given row, it also loads the row of the friend tree that has the same; 1356# value of `commonColumn`; 1357aux_tree.BuildIndex(""commonColumn""); 1358 ; 1359mainTree.AddFriend(aux_tree); 1360 ; 1361df = ROOT.RDataFrame(mainTree); 1362~~~; 1363 ; 1364RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode.; 1365 ; 1366\anchor other-file-formats; 1367### Reading data formats other than ROOT trees; 1368RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an AP",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:84088,Usability,simpl,simple,84088,"6 ; 1447More information (e.g. start and end of each multi-thread task) is printed using `ELogLevel.kDebug` and even more; 1448(e.g. a full dump of the generated code that RDataFrame just-in-time-compiles) using `ELogLevel.kDebug+10`.; 1449 ; 1450\anchor rdf-from-spec; 1451### Creating an RDataFrame from a dataset specification file; 1452 ; 1453RDataFrame can be created using a dataset specification JSON file: ; 1454 ; 1455~~~{.python}; 1456import ROOT; 1457 ; 1458df = ROOT.RDF.Experimental.FromSpec(""spec.json""); 1459~~~; 1460 ; 1461The input dataset specification JSON file needs to be provided by the user and it describes all necessary samples and; 1462their associated metadata information. The main required key is the ""samples"" (at least one sample is needed) and the; 1463required sub-keys for each sample are ""trees"" and ""files"". Additionally, one can specify a metadata dictionary for each; 1464sample in the ""metadata"" key.; 1465 ; 1466A simple example for the formatting of the specification in the JSON file is the following:; 1467 ; 1468~~~{.cpp}; 1469{; 1470 ""samples"": {; 1471 ""sampleA"": {; 1472 ""trees"": [""tree1"", ""tree2""],; 1473 ""files"": [""file1.root"", ""file2.root""],; 1474 ""metadata"": {; 1475 ""lumi"": 10000.0, ; 1476 ""xsec"": 1.0,; 1477 ""sample_category"" = ""data""; 1478 }; 1479 },; 1480 ""sampleB"": {; 1481 ""trees"": [""tree3"", ""tree4""],; 1482 ""files"": [""file3.root"", ""file4.root""],; 1483 ""metadata"": {; 1484 ""lumi"": 0.5, ; 1485 ""xsec"": 1.5,; 1486 ""sample_category"" = ""MC_background""; 1487 }; 1488 }; 1489 }; 1490}; 1491~~~; 1492 ; 1493The metadata information from the specification file can be then accessed using the DefinePerSample function.; 1494For example, to access luminosity information (stored as a double):; 1495 ; 1496~~~{.python}; 1497df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); 1498~~~; 1499 ; 1500or sample_category information (stored as a string):; 1501 ; 1502~~~{.python}; 1503df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_ca",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:85552,Usability,progress bar,progress bar,85552,"ec"": 1.5,; 1486 ""sample_category"" = ""MC_background""; 1487 }; 1488 }; 1489 }; 1490}; 1491~~~; 1492 ; 1493The metadata information from the specification file can be then accessed using the DefinePerSample function.; 1494For example, to access luminosity information (stored as a double):; 1495 ; 1496~~~{.python}; 1497df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); 1498~~~; 1499 ; 1500or sample_category information (stored as a string):; 1501 ; 1502~~~{.python}; 1503df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); 1504~~~; 1505 ; 1506or directly the filename:; 1507 ; 1508~~~{.python}; 1509df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); 1510~~~; 1511 ; 1512An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also; 1513provides a corresponding exemplary JSON file for the dataset specification.; 1514 ; 1515\anchor progressbar; 1516### Adding a progress bar ; 1517 ; 1518A progress bar showing the processed event statistics can be added to any RDataFrame program.; 1519The event statistics include elapsed time, currently processed file, currently processed events, the rate of event processing ; 1520and an estimated remaining time (per file being processed). It is recorded and printed in the terminal every m events and every ; 1521n seconds (by default m = 1000 and n = 1). The ProgressBar can be also added when the multithread (MT) mode is enabled. ; 1522 ; 1523ProgressBar is added after creating the dataframe object (df):; 1524~~~{.cpp}; 1525ROOT::RDataFrame df(""tree"", ""file.root"");; 1526ROOT::RDF::Experimental::AddProgressBar(df);; 1527~~~; 1528 ; 1529Alternatively, RDataFrame can be cast to an RNode first, giving the user more flexibility ; 1530For example, it can be called at any computational node, such as Filter or Define, not only the head node,; 1531with no change to the ProgressBar function itself (please see the [Efficient analysis in Python](#python) ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:85580,Usability,progress bar,progress bar,85580,"ec"": 1.5,; 1486 ""sample_category"" = ""MC_background""; 1487 }; 1488 }; 1489 }; 1490}; 1491~~~; 1492 ; 1493The metadata information from the specification file can be then accessed using the DefinePerSample function.; 1494For example, to access luminosity information (stored as a double):; 1495 ; 1496~~~{.python}; 1497df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); 1498~~~; 1499 ; 1500or sample_category information (stored as a string):; 1501 ; 1502~~~{.python}; 1503df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); 1504~~~; 1505 ; 1506or directly the filename:; 1507 ; 1508~~~{.python}; 1509df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); 1510~~~; 1511 ; 1512An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also; 1513provides a corresponding exemplary JSON file for the dataset specification.; 1514 ; 1515\anchor progressbar; 1516### Adding a progress bar ; 1517 ; 1518A progress bar showing the processed event statistics can be added to any RDataFrame program.; 1519The event statistics include elapsed time, currently processed file, currently processed events, the rate of event processing ; 1520and an estimated remaining time (per file being processed). It is recorded and printed in the terminal every m events and every ; 1521n seconds (by default m = 1000 and n = 1). The ProgressBar can be also added when the multithread (MT) mode is enabled. ; 1522 ; 1523ProgressBar is added after creating the dataframe object (df):; 1524~~~{.cpp}; 1525ROOT::RDataFrame df(""tree"", ""file.root"");; 1526ROOT::RDF::Experimental::AddProgressBar(df);; 1527~~~; 1528 ; 1529Alternatively, RDataFrame can be cast to an RNode first, giving the user more flexibility ; 1530For example, it can be called at any computational node, such as Filter or Define, not only the head node,; 1531with no change to the ProgressBar function itself (please see the [Efficient analysis in Python](#python) ",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/RDataFrame_8cxx_source.html:86840,Usability,progress bar,progress bars,86840,"maining time (per file being processed). It is recorded and printed in the terminal every m events and every ; 1521n seconds (by default m = 1000 and n = 1). The ProgressBar can be also added when the multithread (MT) mode is enabled. ; 1522 ; 1523ProgressBar is added after creating the dataframe object (df):; 1524~~~{.cpp}; 1525ROOT::RDataFrame df(""tree"", ""file.root"");; 1526ROOT::RDF::Experimental::AddProgressBar(df);; 1527~~~; 1528 ; 1529Alternatively, RDataFrame can be cast to an RNode first, giving the user more flexibility ; 1530For example, it can be called at any computational node, such as Filter or Define, not only the head node,; 1531with no change to the ProgressBar function itself (please see the [Efficient analysis in Python](#python) ; 1532section for appropriate usage in Python): ; 1533~~~{.cpp}; 1534ROOT::RDataFrame df(""tree"", ""file.root"");; 1535auto df_1 = ROOT::RDF::RNode(df.Filter(""x>1""));; 1536ROOT::RDF::Experimental::AddProgressBar(df_1);; 1537~~~; 1538Examples of implemented progress bars can be seen by running [Higgs to Four Lepton tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8py_source.html) and [Dimuon tutorial](https://root.cern/doc/master/df102__NanoAODDimuonAnalysis_8C.html). ; 1539 ; 1540*/; 1541// clang-format on; 1542 ; 1543namespace ROOT {; 1544 ; 1545using ROOT::RDF::ColumnNames_t;; 1546using ColumnNamesPtr_t = std::shared_ptr<const ColumnNames_t>;; 1547 ; 1548////////////////////////////////////////////////////////////////////////////; 1549/// \brief Build the dataframe.; 1550/// \param[in] treeName Name of the tree contained in the directory; 1551/// \param[in] dirPtr TDirectory where the tree is stored, e.g. a TFile.; 1552/// \param[in] defaultColumns Collection of default columns.; 1553///; 1554/// The default columns are looked at in case no column is specified in the; 1555/// booking of actions or transformations.; 1556/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1557RDataF",MatchSource.WIKI,doc/v632/RDataFrame_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html
https://root.cern/doc/v632/release-notes.html:3604,Availability,redundant,redundant,3604,"adlener, DESY,; Lorenzo Moneta, CERN/EP-SFT,; Alja Mrak Tadel, UCSD/CMS,; Axel Naumann, CERN/EP-SFT,; Dante Niewenhuis, VU Amsterdam; Luis Antonio Obis Aparicio, University of Zaragoza, Ianna Osborne, Princeton University,; Vincenzo Eduardo Padulano, CERN/EP-SFT,; Danilo Piparo, CERN/EP-SFT,; Fons Rademakers, CERN/IT,; Jonas Rembser, CERN/EP-SFT,; Andrea Rizzi, University of Pisa,; Andre Sailer, CERN/EP-SFT,; Garima Singh, ETH,; Juraj Smiesko, CERN/RCS-PRJ-FC, Pavlo Svirin, National Technical University of Ukraine,; Maciej Szymanski, Argonne,; Christian Tacke, Darmstadt University,; Matevz Tadel, UCSD/CMS,; Alvaro Tolosa Delgado, CERN/RCS-PRJ-FC,; Devajith Valaparambil Sreeramaswamy, CERN/EP-SFT,; Peter Van Gemmeren, Argonne,; Vassil Vassilev, Princeton/CMS,; Wouter Verkerke, NIKHEF/ATLAS, Stefan Wunsch; Deprecation and Removal. The RooFit legacy iterators are deprecated and will be removed in ROOT 6.34 (see section “RooFit libraries”); Some memory-unsafe RooFit interfaces were removed; Some redundant RooDataSet constructors are deprecated and will be removed in ROOT 6.34. Please use the RooDataSet constructors that take RooFit command arguments instead; ROOT does not longer support Python 2. The minimum required Python version to build ROOT is 3.8.; Support for wildcard imports like from ROOT import * is dropped from PyROOT; Support for external (ie. non-builtin) libAfterImage is now deprecated and it will be removed in next release 6.34.; The TList::TList(TObject*) constructor is deprecated and will be removed in ROOT 6.34; The deprecated TProofOutputList::TProofOutputList(TObject *o) constructor was removed. Core Libraries; The Cling interpreter now relies on LLVM version 16.; I/O Libraries; hadd respects compression settings; Fixed a bug that was previously changing the compression settings to a single digit number instead of the full value (by default 101).; TTree Libraries; Add files from subdirectories with TChain::Add globbing; It is now possible to add file",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:5717,Availability,robust,robustness,5717,"TChain::Add(""/path/to/tree/*/*.root""); grabs all the root files with the path /path/to/tree/somedir/file.root (but not /path/to/tree/file.root and /path/to/tree/somedir/anotherdir/file.root).; Another example:; TChain::Add(""/path/to/tree/subdir[0-9]/*.root""); This grabs all the root files in subdirectories that have a name starting with subdir and ending with some digit.; Improved efficiency of TTree friends with indices; TTreeIndex and TChainIndex classes now implement the Clone method such that it does not use the ROOT I/O to clone the index but just does a copy in memory. Notably, this improves processing efficiency for RDataFrame in multithreaded execution since the same index must be copied over to all the threads and attached to the current tree for proper event matching.; RNTuple; ROOT’s experimental successor of TTree has seen a number of updates since the last release. Specifically, 6.32 includes the following changes:. A major refactoring of the interface, improving consistency across different parts and improving overall robustness. Note that this is a breaking change with regard to 6.30!; The on-disk format has been updated to release candidate 2. It will not be possible to read RNTuples written in the previous format anymore.; Support has been added for several new field types: std::unordered_set<T>, std::map<K,V>, std::unordered_map<K,V>; Support has been added for on-disk half-precision (IEEE 754-2008 16-bit) float fields. This can be enabled through RField<float>::SetHalfPrecision(). On reading, values of such fields are represented as regular, 32-bit floats.; A new RNTupleInspector utility class has been added, to provide information about the on-disk metadata of an RNTuple.; A new RNTupleParallelWriter class has been added, providing (initial) support for parallel writing of RNTuples.; A new static method RFieldBase::Check() has been added, which produces a support status report of a type with regards to RNTuple I/O.; A new internal RNTupleMerger cl",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:10933,Availability,error,error,10933,"rams{pdf.getParameters(nullptr)};; Also some virtual RooFit functions like RooAbsReal::createIntegral() are returning a different type conditional on ROOFIT_MEMORY_SAFE_INTERFACES. If you are overriding such a function, you need to use the RooFit::OwningPtr return type, which is an alias for std::unique_ptr in memory-safe mode or an alias for a raw pointer otherwise.; RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(...) const override; {; std::unique_ptr<RooAbsReal> integral;; // Prepare a std::unique_ptr as the return value; ...; // Use the RooFit::makeOwningPtr<T>() helper to translate the; // std::unique_ptr to the actual return type (either std::unique_ptr<T> or T*).; return RooFit::makeOwningPtr<RooAbsReal>(std::move(integral));; }; The biggest application of the memory-safe interfaces is to spot memory leaks in RooFit-based frameworks. If you make sure that your framework compiles both with and without ROOFIT_MEMORY_SAFE_INTERFACES, you can get rid of all memory leaks related to RooFit user error! After making the necessary changes, you can remove the marco definition again to keep backwards compatibility.; Note that the memory-safe interfaces might become the default at some point, so doing this backwards-compatible migration early is strongly encouraged and appreciated.; Removal of some memory-unsafe interfaces. The final bool takeOwnership parameter of the RooAddition and RooStats::HistFactory::PiecewiseInterpolation constructors was removed. This is to avoid situations where ownership is not clear to the compiler. Now, ownership of the input RooAbsArgs is never passed in the constructor. If you want the pass input ownership to the created object, please use addOwnedComponents. If you want to be extra safe, make sure the inputs are in an owning collection and then std::move the collection, so that the ownership is always clear.; Example:; RooArgList sumSet;; sumSet.add(*(new RooRealVar(""var1"", ""var1"", 1.0)));; sumSet.add(*(new RooRealVar(""var2"", ""v",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:16903,Availability,robust,robust,16903,"ialize function useful to run initialization code at the beginning of every task on a worker will now run only in the worker processes. Previously, it was also run eagerly at the point of calling, that is in the main user process. This is done to better separate the user driver environment and the worker environments. If necessary, the function passed to initialize can be called directly by the user in the main application to reproduce the same effect as before.; Some internal details of the RDataFrame implementation were reworked to decrease memory usage and runtime of programs with very deep computation graphs (more than O(10K) nodes in the same branch). Preliminary tests indicate between 30% and a factor 2.5 in memory decrease. This improvement is transparent for RDataFrame users. Graphics backends; The ROOT release 6.32 brings a lot of impressive enhancements to the Web Graphics package, greatly surpassing the features and capabilities of version 6.30. This update provides users with a more robust Web Graphics. The JSROOT version has been updated to v7.7. 2D Graphics Libraries. TMultiGraph: Add the objects from the list of functions in legend produce by TLegend.; Implement the IsInside method for TEllipse, TCrown and TDiamond. Also, a new graphics example inside.C has been added.; Two new methods in TColor: ListColors() and GetColorByname().; Make sure the option L draws closed polygon for TH2Poly.; Use Tex Gyre fonts for sans serif (similar to Helvetica) .; The new method TPad::ModifiedUpdate is short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().; Improve SetTextSize error: show code and values.; Very long text string generated a wrong SVG file.; Fix the option SAME works for TGraph2D.; Implement the title for the palette of a TH3.; Fix typo in TLegend::PaintPrimitives() and improve the exclusion graphs legend.; SetParameters(…) or SetParameter(…) on a TF1 reset the properties of the axis tha",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:17562,Availability,error,error,17562,"nary tests indicate between 30% and a factor 2.5 in memory decrease. This improvement is transparent for RDataFrame users. Graphics backends; The ROOT release 6.32 brings a lot of impressive enhancements to the Web Graphics package, greatly surpassing the features and capabilities of version 6.30. This update provides users with a more robust Web Graphics. The JSROOT version has been updated to v7.7. 2D Graphics Libraries. TMultiGraph: Add the objects from the list of functions in legend produce by TLegend.; Implement the IsInside method for TEllipse, TCrown and TDiamond. Also, a new graphics example inside.C has been added.; Two new methods in TColor: ListColors() and GetColorByname().; Make sure the option L draws closed polygon for TH2Poly.; Use Tex Gyre fonts for sans serif (similar to Helvetica) .; The new method TPad::ModifiedUpdate is short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().; Improve SetTextSize error: show code and values.; Very long text string generated a wrong SVG file.; Fix the option SAME works for TGraph2D.; Implement the title for the palette of a TH3.; Fix typo in TLegend::PaintPrimitives() and improve the exclusion graphs legend.; SetParameters(…) or SetParameter(…) on a TF1 reset the properties of the axis that have been previously defined. This was due to the Update() that was done after the parameters definition.; Update fonts’ documentation (CMS request).; Delaunay triangles were computed by the package triangle.c included in the ROOT code. This package had several problems: - It was not maintained anymore. - Its license was not compatible with LGPL. It is now replaced by the CDT package which is properly maintained and has a license (MLP) compatible with LGPL. 3D Graphics Libraries; REve. Introduce lightweight visualization of instanced shapes on the level of 100.000 instances. This is integrated in digit visualization of the type REveBoxSet. List of typed instance",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:25382,Availability,error,error,25382,"tHub based build system.; Bugs and Issues fixed in this release; More than 200 items were addressed for this release. The full list is:. [#15621] - Buffer overflow in TBranch::Init; [#15610] - Memory leak in TTree getattr pythonization; [#15590] - Infinite recursion in TFile::Open; [#15460] - TEnum::GetEnum(“B”)->GetUnderlyingType() does not following typedefs; [#15413] - Fails to build with cuDNN version 9; [#15406] - TEnum::GetEnum does not seem to see ‘through’ using statements.; [#15399] - Memory leak with jitted nodes if the execution is never triggered; [#15396] - [TMVA] Pymva test (Keras) failing on 632 and main; [#15370] - Broken link in HS3 printout; [#15340] - Webgraphics: canvas displayed, but many error printed; [#15253] - C++ standard not propagated via CMake anymore; [#15197] - RBDT does not support xgboost inference; [#15156] - Segfault in TMVA::Experimental::SOFIE::RModel::Streamer; [#15139] - cmake option -Dall=YES breaks the cmake; [#15118] - jsoninterface does not build if provided with RapidYAML; [#15108] - Turn off clang-format for Linkdef files; [#15090] - TClass::GetClassInfo() is not thread safe; [#15077] - Passing different floating point types to RVec utility functions; [#15048] - [ntuple] Handling of virtual inheritance broken; [#15040] - RDataFrame Inaccurate example of progress bar from documentation; [#15028] - RDataFrame Unable to cacheread remote file; [#15027] - spurrious cmake message about AfterImage with -Dminimal=ON; [#14981] - RVecs leak memory with np.asarray in pyROOT; [#14964] - ROOT-HEAD fails with “cling interactive line includer >>>: fatal error: module file ‘[snip]/Vc.pcm’ not found: module file not found”; [#14958] - ROOT_HEAD failed with error message: Fail to detect cryptographic random generator; [#14921] - ROOT Fails to build macOS 14.4 arm64 Xcode 15.3; [#14914] - VecOps::Take with default argument doesn’t check correctly the out of boundary condition; [#14910] - hadd issue when using parallelization together with in",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:26273,Availability,error,error,26273,"[TMVA] Pymva test (Keras) failing on 632 and main; [#15370] - Broken link in HS3 printout; [#15340] - Webgraphics: canvas displayed, but many error printed; [#15253] - C++ standard not propagated via CMake anymore; [#15197] - RBDT does not support xgboost inference; [#15156] - Segfault in TMVA::Experimental::SOFIE::RModel::Streamer; [#15139] - cmake option -Dall=YES breaks the cmake; [#15118] - jsoninterface does not build if provided with RapidYAML; [#15108] - Turn off clang-format for Linkdef files; [#15090] - TClass::GetClassInfo() is not thread safe; [#15077] - Passing different floating point types to RVec utility functions; [#15048] - [ntuple] Handling of virtual inheritance broken; [#15040] - RDataFrame Inaccurate example of progress bar from documentation; [#15028] - RDataFrame Unable to cacheread remote file; [#15027] - spurrious cmake message about AfterImage with -Dminimal=ON; [#14981] - RVecs leak memory with np.asarray in pyROOT; [#14964] - ROOT-HEAD fails with “cling interactive line includer >>>: fatal error: module file ‘[snip]/Vc.pcm’ not found: module file not found”; [#14958] - ROOT_HEAD failed with error message: Fail to detect cryptographic random generator; [#14921] - ROOT Fails to build macOS 14.4 arm64 Xcode 15.3; [#14914] - VecOps::Take with default argument doesn’t check correctly the out of boundary condition; [#14910] - hadd issue when using parallelization together with indirect file; [#14902] - compilation error; [#14863] - [hist] TH1::SaveAs missing default option argument causes compilation errors; [#14855] - TRatioPlot crashes if loaded from the file; [#14842] - TRatioplot gives “different” results with Web Graphics; [#14838] - Problems with Confidence Band of TRatioPlot; [#14801] - TEfficiency drawing to .C is broken; [#14793] - 6.26 cannot read file written with 6.30.4; [#14772] - [cling] Undocumented behaviour of root macro_C.so; [#14767] - rootn.exe instant crash on startup; [#14765] - TGenPhaseSpace weight normalization; [#14748]",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:26376,Availability,error,error,26376,inted; [#15253] - C++ standard not propagated via CMake anymore; [#15197] - RBDT does not support xgboost inference; [#15156] - Segfault in TMVA::Experimental::SOFIE::RModel::Streamer; [#15139] - cmake option -Dall=YES breaks the cmake; [#15118] - jsoninterface does not build if provided with RapidYAML; [#15108] - Turn off clang-format for Linkdef files; [#15090] - TClass::GetClassInfo() is not thread safe; [#15077] - Passing different floating point types to RVec utility functions; [#15048] - [ntuple] Handling of virtual inheritance broken; [#15040] - RDataFrame Inaccurate example of progress bar from documentation; [#15028] - RDataFrame Unable to cacheread remote file; [#15027] - spurrious cmake message about AfterImage with -Dminimal=ON; [#14981] - RVecs leak memory with np.asarray in pyROOT; [#14964] - ROOT-HEAD fails with “cling interactive line includer >>>: fatal error: module file ‘[snip]/Vc.pcm’ not found: module file not found”; [#14958] - ROOT_HEAD failed with error message: Fail to detect cryptographic random generator; [#14921] - ROOT Fails to build macOS 14.4 arm64 Xcode 15.3; [#14914] - VecOps::Take with default argument doesn’t check correctly the out of boundary condition; [#14910] - hadd issue when using parallelization together with indirect file; [#14902] - compilation error; [#14863] - [hist] TH1::SaveAs missing default option argument causes compilation errors; [#14855] - TRatioPlot crashes if loaded from the file; [#14842] - TRatioplot gives “different” results with Web Graphics; [#14838] - Problems with Confidence Band of TRatioPlot; [#14801] - TEfficiency drawing to .C is broken; [#14793] - 6.26 cannot read file written with 6.30.4; [#14772] - [cling] Undocumented behaviour of root macro_C.so; [#14767] - rootn.exe instant crash on startup; [#14765] - TGenPhaseSpace weight normalization; [#14748] - [ntuple] Show and PrintInfo does not work for friend RNTuples; [#14601] - std::source_location not found when running with c++20 enabled; [#14599] ,MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:26700,Availability,error,error,26700,"90] - TClass::GetClassInfo() is not thread safe; [#15077] - Passing different floating point types to RVec utility functions; [#15048] - [ntuple] Handling of virtual inheritance broken; [#15040] - RDataFrame Inaccurate example of progress bar from documentation; [#15028] - RDataFrame Unable to cacheread remote file; [#15027] - spurrious cmake message about AfterImage with -Dminimal=ON; [#14981] - RVecs leak memory with np.asarray in pyROOT; [#14964] - ROOT-HEAD fails with “cling interactive line includer >>>: fatal error: module file ‘[snip]/Vc.pcm’ not found: module file not found”; [#14958] - ROOT_HEAD failed with error message: Fail to detect cryptographic random generator; [#14921] - ROOT Fails to build macOS 14.4 arm64 Xcode 15.3; [#14914] - VecOps::Take with default argument doesn’t check correctly the out of boundary condition; [#14910] - hadd issue when using parallelization together with indirect file; [#14902] - compilation error; [#14863] - [hist] TH1::SaveAs missing default option argument causes compilation errors; [#14855] - TRatioPlot crashes if loaded from the file; [#14842] - TRatioplot gives “different” results with Web Graphics; [#14838] - Problems with Confidence Band of TRatioPlot; [#14801] - TEfficiency drawing to .C is broken; [#14793] - 6.26 cannot read file written with 6.30.4; [#14772] - [cling] Undocumented behaviour of root macro_C.so; [#14767] - rootn.exe instant crash on startup; [#14765] - TGenPhaseSpace weight normalization; [#14748] - [ntuple] Show and PrintInfo does not work for friend RNTuples; [#14601] - std::source_location not found when running with c++20 enabled; [#14599] - The example th2polyUSA.C needs re-labelling; [#14598] - A “printf” change the behaviour of a macro …; [#14595] - Problem when creating dictionary in Osx 12.7, Xcode 14.2; [#14594] - Provide file.root request in THttpServer; [#14593] - Build fails with CLING_DEBUG=1 set; [#14586] - [ROOT-6317] using namespace statement does not provoke autoload; [#14576] - [",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:26788,Availability,error,errors,26788,"90] - TClass::GetClassInfo() is not thread safe; [#15077] - Passing different floating point types to RVec utility functions; [#15048] - [ntuple] Handling of virtual inheritance broken; [#15040] - RDataFrame Inaccurate example of progress bar from documentation; [#15028] - RDataFrame Unable to cacheread remote file; [#15027] - spurrious cmake message about AfterImage with -Dminimal=ON; [#14981] - RVecs leak memory with np.asarray in pyROOT; [#14964] - ROOT-HEAD fails with “cling interactive line includer >>>: fatal error: module file ‘[snip]/Vc.pcm’ not found: module file not found”; [#14958] - ROOT_HEAD failed with error message: Fail to detect cryptographic random generator; [#14921] - ROOT Fails to build macOS 14.4 arm64 Xcode 15.3; [#14914] - VecOps::Take with default argument doesn’t check correctly the out of boundary condition; [#14910] - hadd issue when using parallelization together with indirect file; [#14902] - compilation error; [#14863] - [hist] TH1::SaveAs missing default option argument causes compilation errors; [#14855] - TRatioPlot crashes if loaded from the file; [#14842] - TRatioplot gives “different” results with Web Graphics; [#14838] - Problems with Confidence Band of TRatioPlot; [#14801] - TEfficiency drawing to .C is broken; [#14793] - 6.26 cannot read file written with 6.30.4; [#14772] - [cling] Undocumented behaviour of root macro_C.so; [#14767] - rootn.exe instant crash on startup; [#14765] - TGenPhaseSpace weight normalization; [#14748] - [ntuple] Show and PrintInfo does not work for friend RNTuples; [#14601] - std::source_location not found when running with c++20 enabled; [#14599] - The example th2polyUSA.C needs re-labelling; [#14598] - A “printf” change the behaviour of a macro …; [#14595] - Problem when creating dictionary in Osx 12.7, Xcode 14.2; [#14594] - Provide file.root request in THttpServer; [#14593] - Build fails with CLING_DEBUG=1 set; [#14586] - [ROOT-6317] using namespace statement does not provoke autoload; [#14576] - [",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:28903,Availability,failure,failure,28903,"Angular units used in HTML doc of TGLViewer::SetPerspectiveCamera are wrong; [#14575] - [ROOT-10196] boundary check in TH1::AddBinContent is missing; [#14569] - [ROOT-8348] Segmentation Fault in TMVA::DecisionTreeNode::Print; [#14562] - [ROOT-5009] TClass::SetDeclFile: second parameter wrong type; [#14553] - [ROOT-10909] Add TMVA python dependencies to the requirements.txt; [#14547] - [ROOT-9200] With Cocoa backend sometimes need two ProcessEvents to show Canvas; [#14528] - Bug in TFoam::GetIntNorm; [#14510] - Large computation graphs cause serious memory and runtime overhead; [#14509] - ROOT segfaults on riscv64; [#14508] - Using LZMA compression with RNTupleWriter leads to memory corruption; [#14499] - It is not possible to set the Title of the palette for a 3D axis; [#14462] - Parser for I/O customization rule is too strict.; [#14458] - Crash when doing Weighted Likelihood fit; [#14453] - Implement IsInside for TEllipse; [#14401] - The red frame around the selected pad of the webgui is not configurable; [#14385] - Strange behavior with TF1 and SetParameters; [#14381] - Legend entry for exclusion graph; [#14376] - build failure with mysql 8.3; [#14372] - File with mtime equal to 0 are ignored by Cling.; [#14333] - “Empty plot” for df014_CSVDataSource.C; [#14331] - Unexpected behaviour when using the Project3D function to make a TH2 from a TH3; [#14329] - [RF] RDataFrameToRooFit - Clarification on returned object; [#14324] - Compatibility Issue with thisroot.sh and zsh; [#14320] - [RF] Wrong analytic integrals when using Gaussians with sigma depending on the observable; [#14303] - Test failure with nbconvert-7.14; [#14302] - The command “root –notebook” is not allowed on Windows 11; [#14277] - Cling triggers a huge number of openat calls when loading libraries; [#14263] - [tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; [#14256] - TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; [#14244] - String ",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:29377,Availability,failure,failure,29377," and runtime overhead; [#14509] - ROOT segfaults on riscv64; [#14508] - Using LZMA compression with RNTupleWriter leads to memory corruption; [#14499] - It is not possible to set the Title of the palette for a 3D axis; [#14462] - Parser for I/O customization rule is too strict.; [#14458] - Crash when doing Weighted Likelihood fit; [#14453] - Implement IsInside for TEllipse; [#14401] - The red frame around the selected pad of the webgui is not configurable; [#14385] - Strange behavior with TF1 and SetParameters; [#14381] - Legend entry for exclusion graph; [#14376] - build failure with mysql 8.3; [#14372] - File with mtime equal to 0 are ignored by Cling.; [#14333] - “Empty plot” for df014_CSVDataSource.C; [#14331] - Unexpected behaviour when using the Project3D function to make a TH2 from a TH3; [#14329] - [RF] RDataFrameToRooFit - Clarification on returned object; [#14324] - Compatibility Issue with thisroot.sh and zsh; [#14320] - [RF] Wrong analytic integrals when using Gaussians with sigma depending on the observable; [#14303] - Test failure with nbconvert-7.14; [#14302] - The command “root –notebook” is not allowed on Windows 11; [#14277] - Cling triggers a huge number of openat calls when loading libraries; [#14263] - [tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; [#14256] - TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; [#14244] - String comparison operators defined in TString.h should be defined as constexpr; [#14229] - [6.30] root-config –git-revision broken; [#14225] - [RF] Segmentation fault in ROOT 6.30 workspace creation; [#14223] - Extremely long startup time when loading dictionaries with pyroot; [#14219] - [cling] Use deduction guides for llvm::ArrayRef; [#14211] - Implement value printing for std::source_location; [#14205] - [cling] Replace llvm::Optional and llvm::None with std::optional; [#14199] - Memory hoarding triggered by the TPluginManager; [#14188] - cmake find_package R",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:29918,Availability,fault,fault,29918,"6] - build failure with mysql 8.3; [#14372] - File with mtime equal to 0 are ignored by Cling.; [#14333] - “Empty plot” for df014_CSVDataSource.C; [#14331] - Unexpected behaviour when using the Project3D function to make a TH2 from a TH3; [#14329] - [RF] RDataFrameToRooFit - Clarification on returned object; [#14324] - Compatibility Issue with thisroot.sh and zsh; [#14320] - [RF] Wrong analytic integrals when using Gaussians with sigma depending on the observable; [#14303] - Test failure with nbconvert-7.14; [#14302] - The command “root –notebook” is not allowed on Windows 11; [#14277] - Cling triggers a huge number of openat calls when loading libraries; [#14263] - [tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; [#14256] - TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; [#14244] - String comparison operators defined in TString.h should be defined as constexpr; [#14229] - [6.30] root-config –git-revision broken; [#14225] - [RF] Segmentation fault in ROOT 6.30 workspace creation; [#14223] - Extremely long startup time when loading dictionaries with pyroot; [#14219] - [cling] Use deduction guides for llvm::ArrayRef; [#14211] - Implement value printing for std::source_location; [#14205] - [cling] Replace llvm::Optional and llvm::None with std::optional; [#14199] - Memory hoarding triggered by the TPluginManager; [#14188] - cmake find_package ROOT 6.30 broken: it requires nlohmann-json; [#14163] - cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; [#14162] - RooFFTConvPdf is not working for ROOT 6.30/02; [#14157] - Minuit2 standalone build: StandAlone.cmake looks for the wrong path for VERSION_FILE; [#14113] - The find_package(root) command fails when using Root installed via Homebrew.; [#14101] - Missing documentation for RDataSetSpec; [#14097] - Cleaner stack traces in python; [#14085] - thisroot.sh does not recognize bash when running in qemu-x86_64; [#14084] - [n",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:31491,Availability,error,error,31491,"ohmann-json; [#14163] - cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; [#14162] - RooFFTConvPdf is not working for ROOT 6.30/02; [#14157] - Minuit2 standalone build: StandAlone.cmake looks for the wrong path for VERSION_FILE; [#14113] - The find_package(root) command fails when using Root installed via Homebrew.; [#14101] - Missing documentation for RDataSetSpec; [#14097] - Cleaner stack traces in python; [#14085] - thisroot.sh does not recognize bash when running in qemu-x86_64; [#14084] - [ntuple] RRecordField creation crashes when TStreamerInfo has insufficient information; [#14075] - [FreeBSD] root.exe crash at end of compilation during modules.idx generation; [#14068] - ROOT 6.30/00 reports root-config --version as 6.30.00; [#14064] - Include Tex Gyre Heros in ROOT fonts; [#14032] - TPaveText has problems when label is set; [#14030] - Allow zero-copy RNTuple bulk reading; [#13965] - [Cling] Assertion fails with wrong but innocent code; [#13962] - THnSparse::Scale() unsparsifies; [#13877] - [ntuple] Segfault when processing recursive classes; [#13865] - [FreeBSD] cling cmake error; [#13861] - Remove all traces of Python2 from the ROOT codebase in preparation for 6.32/00; [#13851] - Test crash with GCC 13 and C++20; [#13834] - Can’t open TBrowser locally after upgrading macos “Apple M2 14.0 (23A344)”; [#13825] - builtin libpng too old; [#13815] - Cling (rightfully) confused about forward-declared template specializations; [#13697] - Unexpected behaviour of KSTest with toys (“X” option) for identical histograms; [#13659] - rootprint/rootls missing recursive traversal; [#13623] - Add directory wildcarding in TChain; [#13531] - Huge RAM consumption of the hadd command for input files with several directories; [#13511] - TMapFile can’t work; [#13497] - Assertion failure in TMVA with vector iterators incompatible error on Windows; [#13441] - error in root-generated code for cubic spline (TSpline3); [#13421] - [MSVC] ROOT builds u",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:32187,Availability,failure,failure,32187, fonts; [#14032] - TPaveText has problems when label is set; [#14030] - Allow zero-copy RNTuple bulk reading; [#13965] - [Cling] Assertion fails with wrong but innocent code; [#13962] - THnSparse::Scale() unsparsifies; [#13877] - [ntuple] Segfault when processing recursive classes; [#13865] - [FreeBSD] cling cmake error; [#13861] - Remove all traces of Python2 from the ROOT codebase in preparation for 6.32/00; [#13851] - Test crash with GCC 13 and C++20; [#13834] - Can’t open TBrowser locally after upgrading macos “Apple M2 14.0 (23A344)”; [#13825] - builtin libpng too old; [#13815] - Cling (rightfully) confused about forward-declared template specializations; [#13697] - Unexpected behaviour of KSTest with toys (“X” option) for identical histograms; [#13659] - rootprint/rootls missing recursive traversal; [#13623] - Add directory wildcarding in TChain; [#13531] - Huge RAM consumption of the hadd command for input files with several directories; [#13511] - TMapFile can’t work; [#13497] - Assertion failure in TMVA with vector iterators incompatible error on Windows; [#13441] - error in root-generated code for cubic spline (TSpline3); [#13421] - [MSVC] ROOT builds under msvc option /permissive- with error C4576; [#13359] - Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; [#13288] - [cling] long double type incorrectly parsed by interpreter; [#13155] - TMVA doesn’t compile with pytorch 2.0.1; [#13130] - Valgrind reports leak when constructing TChain; [#13110] - Bug in TDecompBase::DiagProd; [#13079] - Builtin TBB library sometimes not found (or more exactly the one install in /usr/lib sometimes take priority); [#13041] - TVirtualFitter::GetFitter() unexpectedly returns NULL on macOS 12 and 13 with Xcode 14; [#13019] - LLVM assertion failure in HandleUnionActiveMemberChange; [#12993] - std::source_location not working in the interpreter; [#12959] - [ntuple] Distinguish between connecting a page sink and a page s,MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:32238,Availability,error,error,32238, fonts; [#14032] - TPaveText has problems when label is set; [#14030] - Allow zero-copy RNTuple bulk reading; [#13965] - [Cling] Assertion fails with wrong but innocent code; [#13962] - THnSparse::Scale() unsparsifies; [#13877] - [ntuple] Segfault when processing recursive classes; [#13865] - [FreeBSD] cling cmake error; [#13861] - Remove all traces of Python2 from the ROOT codebase in preparation for 6.32/00; [#13851] - Test crash with GCC 13 and C++20; [#13834] - Can’t open TBrowser locally after upgrading macos “Apple M2 14.0 (23A344)”; [#13825] - builtin libpng too old; [#13815] - Cling (rightfully) confused about forward-declared template specializations; [#13697] - Unexpected behaviour of KSTest with toys (“X” option) for identical histograms; [#13659] - rootprint/rootls missing recursive traversal; [#13623] - Add directory wildcarding in TChain; [#13531] - Huge RAM consumption of the hadd command for input files with several directories; [#13511] - TMapFile can’t work; [#13497] - Assertion failure in TMVA with vector iterators incompatible error on Windows; [#13441] - error in root-generated code for cubic spline (TSpline3); [#13421] - [MSVC] ROOT builds under msvc option /permissive- with error C4576; [#13359] - Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; [#13288] - [cling] long double type incorrectly parsed by interpreter; [#13155] - TMVA doesn’t compile with pytorch 2.0.1; [#13130] - Valgrind reports leak when constructing TChain; [#13110] - Bug in TDecompBase::DiagProd; [#13079] - Builtin TBB library sometimes not found (or more exactly the one install in /usr/lib sometimes take priority); [#13041] - TVirtualFitter::GetFitter() unexpectedly returns NULL on macOS 12 and 13 with Xcode 14; [#13019] - LLVM assertion failure in HandleUnionActiveMemberChange; [#12993] - std::source_location not working in the interpreter; [#12959] - [ntuple] Distinguish between connecting a page sink and a page s,MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:32267,Availability,error,error,32267, fonts; [#14032] - TPaveText has problems when label is set; [#14030] - Allow zero-copy RNTuple bulk reading; [#13965] - [Cling] Assertion fails with wrong but innocent code; [#13962] - THnSparse::Scale() unsparsifies; [#13877] - [ntuple] Segfault when processing recursive classes; [#13865] - [FreeBSD] cling cmake error; [#13861] - Remove all traces of Python2 from the ROOT codebase in preparation for 6.32/00; [#13851] - Test crash with GCC 13 and C++20; [#13834] - Can’t open TBrowser locally after upgrading macos “Apple M2 14.0 (23A344)”; [#13825] - builtin libpng too old; [#13815] - Cling (rightfully) confused about forward-declared template specializations; [#13697] - Unexpected behaviour of KSTest with toys (“X” option) for identical histograms; [#13659] - rootprint/rootls missing recursive traversal; [#13623] - Add directory wildcarding in TChain; [#13531] - Huge RAM consumption of the hadd command for input files with several directories; [#13511] - TMapFile can’t work; [#13497] - Assertion failure in TMVA with vector iterators incompatible error on Windows; [#13441] - error in root-generated code for cubic spline (TSpline3); [#13421] - [MSVC] ROOT builds under msvc option /permissive- with error C4576; [#13359] - Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; [#13288] - [cling] long double type incorrectly parsed by interpreter; [#13155] - TMVA doesn’t compile with pytorch 2.0.1; [#13130] - Valgrind reports leak when constructing TChain; [#13110] - Bug in TDecompBase::DiagProd; [#13079] - Builtin TBB library sometimes not found (or more exactly the one install in /usr/lib sometimes take priority); [#13041] - TVirtualFitter::GetFitter() unexpectedly returns NULL on macOS 12 and 13 with Xcode 14; [#13019] - LLVM assertion failure in HandleUnionActiveMemberChange; [#12993] - std::source_location not working in the interpreter; [#12959] - [ntuple] Distinguish between connecting a page sink and a page s,MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:32391,Availability,error,error,32391, fonts; [#14032] - TPaveText has problems when label is set; [#14030] - Allow zero-copy RNTuple bulk reading; [#13965] - [Cling] Assertion fails with wrong but innocent code; [#13962] - THnSparse::Scale() unsparsifies; [#13877] - [ntuple] Segfault when processing recursive classes; [#13865] - [FreeBSD] cling cmake error; [#13861] - Remove all traces of Python2 from the ROOT codebase in preparation for 6.32/00; [#13851] - Test crash with GCC 13 and C++20; [#13834] - Can’t open TBrowser locally after upgrading macos “Apple M2 14.0 (23A344)”; [#13825] - builtin libpng too old; [#13815] - Cling (rightfully) confused about forward-declared template specializations; [#13697] - Unexpected behaviour of KSTest with toys (“X” option) for identical histograms; [#13659] - rootprint/rootls missing recursive traversal; [#13623] - Add directory wildcarding in TChain; [#13531] - Huge RAM consumption of the hadd command for input files with several directories; [#13511] - TMapFile can’t work; [#13497] - Assertion failure in TMVA with vector iterators incompatible error on Windows; [#13441] - error in root-generated code for cubic spline (TSpline3); [#13421] - [MSVC] ROOT builds under msvc option /permissive- with error C4576; [#13359] - Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; [#13288] - [cling] long double type incorrectly parsed by interpreter; [#13155] - TMVA doesn’t compile with pytorch 2.0.1; [#13130] - Valgrind reports leak when constructing TChain; [#13110] - Bug in TDecompBase::DiagProd; [#13079] - Builtin TBB library sometimes not found (or more exactly the one install in /usr/lib sometimes take priority); [#13041] - TVirtualFitter::GetFitter() unexpectedly returns NULL on macOS 12 and 13 with Xcode 14; [#13019] - LLVM assertion failure in HandleUnionActiveMemberChange; [#12993] - std::source_location not working in the interpreter; [#12959] - [ntuple] Distinguish between connecting a page sink and a page s,MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:32995,Availability,failure,failure,32995,missing recursive traversal; [#13623] - Add directory wildcarding in TChain; [#13531] - Huge RAM consumption of the hadd command for input files with several directories; [#13511] - TMapFile can’t work; [#13497] - Assertion failure in TMVA with vector iterators incompatible error on Windows; [#13441] - error in root-generated code for cubic spline (TSpline3); [#13421] - [MSVC] ROOT builds under msvc option /permissive- with error C4576; [#13359] - Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; [#13288] - [cling] long double type incorrectly parsed by interpreter; [#13155] - TMVA doesn’t compile with pytorch 2.0.1; [#13130] - Valgrind reports leak when constructing TChain; [#13110] - Bug in TDecompBase::DiagProd; [#13079] - Builtin TBB library sometimes not found (or more exactly the one install in /usr/lib sometimes take priority); [#13041] - TVirtualFitter::GetFitter() unexpectedly returns NULL on macOS 12 and 13 with Xcode 14; [#13019] - LLVM assertion failure in HandleUnionActiveMemberChange; [#12993] - std::source_location not working in the interpreter; [#12959] - [ntuple] Distinguish between connecting a page sink and a page source in RColumn; [#12783] - [IO] Writing HistFactory model file twice gives strange results since ROOT 6.26.02; [#12770] - tmva/sofie_parsers does not build with latest Protobuf (22.x); [#12744] - wrong Python version found during build; [#12718] - A crash when trying to initialise a vector from a >1D numpy array in PyROOT; [#12685] - TEnum::GetEnum does NOT process typedefs; [#12644] - Can’t find cxxabi.h and build module ‘ROOT_Foundation_Stage1_NoRTTI’ when building from source on Macos; [#12631] - Unable to build master with external XROOTD; [#12621] - [I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; [#12592] - [doc] TProfile bin error documentation is not correct; [#12591] - Allow partial enablement of modules; [#12527] - MacOS build f,MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:33856,Availability,error,error,33856,"l in /usr/lib sometimes take priority); [#13041] - TVirtualFitter::GetFitter() unexpectedly returns NULL on macOS 12 and 13 with Xcode 14; [#13019] - LLVM assertion failure in HandleUnionActiveMemberChange; [#12993] - std::source_location not working in the interpreter; [#12959] - [ntuple] Distinguish between connecting a page sink and a page source in RColumn; [#12783] - [IO] Writing HistFactory model file twice gives strange results since ROOT 6.26.02; [#12770] - tmva/sofie_parsers does not build with latest Protobuf (22.x); [#12744] - wrong Python version found during build; [#12718] - A crash when trying to initialise a vector from a >1D numpy array in PyROOT; [#12685] - TEnum::GetEnum does NOT process typedefs; [#12644] - Can’t find cxxabi.h and build module ‘ROOT_Foundation_Stage1_NoRTTI’ when building from source on Macos; [#12631] - Unable to build master with external XROOTD; [#12621] - [I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; [#12592] - [doc] TProfile bin error documentation is not correct; [#12591] - Allow partial enablement of modules; [#12527] - MacOS build fails if configured without cocoa; [#12492] - The problem with building ROOT v6-26-10 in debug mode on ubuntu 20.04; [#12230] - Wrong conversion from Numpy Array to std.vector when using the wrong type; [#12091] - TSpline SaveAs not using equidistant and loss of precision; [#11924] - PyROOT: wrong overload resolution for C++ functions from python; [#11901] - Binary distribution for Ubutu 22.04 is broken (on WSL2); [#11750] - FindXROOTD adds libraries to link against irrespective of xrootd version used; [#11746] - TH2::Fill(const char namex, const char namey, Double_t w) doesn’t update fTsumwxy; [#11743] - CMake >= 3.24 fails to build LZMA: WARNING: ‘aclocal-1.15’ is missing on your system.; [#11673] - [ntuple] Consider making REntry::AddValue() publicly accessible; [#11667] - [cling] GetClassSharedLibs fails to find several classes; [#11653] - TFile plugin",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:36263,Availability,failure,failures,36263, pythonizing vector; [#11484] - roottest/root/meta/genreflex/ROOT-5768 needs to be enabled; [#11411] - PyROOT Python list of strings -> std::initializer_list< std::string > conversion is broken; [#11395] - Migrate to pcre2; [#11353] - Compiled program with libNew.so crash; [#11304] - WW option for fit functions as the W option; [#11238] - an old bug in ROOT v6 TAB completion ?; [#11197] - Build github release into version release procedure; [#11190] - ROOT compiled with -Ddev=ON crashes when type # in ROOT session; [#11021] - [Fit Panel] Fitting to Gaus + Pol0 in two steps is unnecessarily hard; [#10891] - [RF] Deletion order of objects in RooFit/RooStats tutorials should not matter in Python; [#10871] - [DF][ntuple] Better task splitting with RDF+RNTuple; [#10866] - ACLiC flags parsing for compiler command line options broken in certain cases; [#10684] - PyROOT Cannot use SofieFunctor in Python; [#10664] - [ntuple] Expose fixed-size arrays as RVecs in RDF datasource; [#10395] - [core] CleanCompiledMacros behavior; [#10222] - Suspicious behavior of TUnuran::SampleMulti; [#10221] - ROOT interpreter built with C++17 does not find std::optional without including it first; [#10146] - Byte swapped floats in TMVA sofie on big endian architectures (s390x); [#10061] - Distributed RDataFrame test failures on Mac/ARM; [#9917] - SetRange and SetRangeUser fail silently; [#9594] - Systematic build failure of ROOT master in the LCG DEBUG builds since Jan 15th; [#9524] - Failure to build/run when MACOSX_DEPLOYMENT_TARGET is set to 11 or higher; [#9514] - Printed SVG image contains newline cutting through XML tags; [#9489] - [RF] Cannot turn off useless messages with RooMCStudy unbinned fits + Progress bar would be better.; [#9292] - Integer overflow in TTreeCache::FillBuffer; [#8959] - ninja clean does not remove modules.idx; [#8952] - Make hadd return a non-zero exit code when encountering a corrupted file; [#8942] - cannot buid the dependent project; [#8794] - [TGNumberEntry] ce,MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:36362,Availability,failure,failure,36362, pythonizing vector; [#11484] - roottest/root/meta/genreflex/ROOT-5768 needs to be enabled; [#11411] - PyROOT Python list of strings -> std::initializer_list< std::string > conversion is broken; [#11395] - Migrate to pcre2; [#11353] - Compiled program with libNew.so crash; [#11304] - WW option for fit functions as the W option; [#11238] - an old bug in ROOT v6 TAB completion ?; [#11197] - Build github release into version release procedure; [#11190] - ROOT compiled with -Ddev=ON crashes when type # in ROOT session; [#11021] - [Fit Panel] Fitting to Gaus + Pol0 in two steps is unnecessarily hard; [#10891] - [RF] Deletion order of objects in RooFit/RooStats tutorials should not matter in Python; [#10871] - [DF][ntuple] Better task splitting with RDF+RNTuple; [#10866] - ACLiC flags parsing for compiler command line options broken in certain cases; [#10684] - PyROOT Cannot use SofieFunctor in Python; [#10664] - [ntuple] Expose fixed-size arrays as RVecs in RDF datasource; [#10395] - [core] CleanCompiledMacros behavior; [#10222] - Suspicious behavior of TUnuran::SampleMulti; [#10221] - ROOT interpreter built with C++17 does not find std::optional without including it first; [#10146] - Byte swapped floats in TMVA sofie on big endian architectures (s390x); [#10061] - Distributed RDataFrame test failures on Mac/ARM; [#9917] - SetRange and SetRangeUser fail silently; [#9594] - Systematic build failure of ROOT master in the LCG DEBUG builds since Jan 15th; [#9524] - Failure to build/run when MACOSX_DEPLOYMENT_TARGET is set to 11 or higher; [#9514] - Printed SVG image contains newline cutting through XML tags; [#9489] - [RF] Cannot turn off useless messages with RooMCStudy unbinned fits + Progress bar would be better.; [#9292] - Integer overflow in TTreeCache::FillBuffer; [#8959] - ninja clean does not remove modules.idx; [#8952] - Make hadd return a non-zero exit code when encountering a corrupted file; [#8942] - cannot buid the dependent project; [#8794] - [TGNumberEntry] ce,MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:38562,Availability,fault,fault,38562,"72] - TExecutorCRTP::Map() should support void; [#7871] - Usability of TExecutor::MapReduce; [#7845] - Improve TMatrix reference documentation; [#7805] - Inconsistent and unintuitive behaviour of TFormula::SetParNames and TFormula::SetParameters; [#7774] - Unreasonably slow behaviour of CompileMacro; [#7699] - [VecOps] Make free functions in VecOps better visible; [#7686] - PyROOT Segfault when creating proxy to derived class with multiple overloads; [#7669] - Inconsistent behaviour in wildcard import; [#7644] - Provide in the cmake configuration the C++ standard which was used to compile ROOT; [#7627] - Fix TMVA group links; [#7159] - TNetXNGFile::Open fails with double slash (//) in path; [#7128] - Cannot build ROOT if another ROOT at /usr/local; [#6900] - mathmore: invalid roots for a quartic polynomial; [#6811] - Bug displaying several 3D objects such as TGraph2D on the same canvas; [#6755] - Greek letter epsilon not rendered correctly using TLatex with OpenGL.CanvasPreferGL option, segmentation fault.; [#6753] - CMake dependency on Python: use targets; [#6616] - hadd writes files with unspecified compression algorithm; [#6438] - hadd –help prints wrong usage info; [#6384] - cxx-standard should not be in CMAKE_CXX_FLAGS; [ROOT-3358] - SetRootSys() improperly sets $ROOTSYS; [ROOT-6424] - Bogus template names suggested by autocompletion; [ROOT-6581] - .x stress.cxx(1) broken; [ROOT-6713] - Root attempts to stream null pointers to abstract classes; [ROOT-6867] - forward declaration ‘payload’ inadvertently (?) unloaded; [ROOT-7280] - Memory leaks due to erroneous use of ExpandPathName; [ROOT-7801] - Typo in TMultiDimFit::MakeRealCode(); [ROOT-7289] - Documentation for TMath::fooI distributions foo unclear; [ROOT-7970] - Failure to use implicit auto with initializer lists; [ROOT-8042] - Allocating buffer close to INT_MAX throws exceptions; [ROOT-8051] - When projecting THn into TH1, TH2 or TH3, bin labels on the involved axis are lost; [ROOT-8259] - Minuit constantly",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:40297,Availability,error,error,40297,"ion ‘payload’ inadvertently (?) unloaded; [ROOT-7280] - Memory leaks due to erroneous use of ExpandPathName; [ROOT-7801] - Typo in TMultiDimFit::MakeRealCode(); [ROOT-7289] - Documentation for TMath::fooI distributions foo unclear; [ROOT-7970] - Failure to use implicit auto with initializer lists; [ROOT-8042] - Allocating buffer close to INT_MAX throws exceptions; [ROOT-8051] - When projecting THn into TH1, TH2 or TH3, bin labels on the involved axis are lost; [ROOT-8259] - Minuit constantly modifies debug message even though it is never printed; [ROOT-8274] - “ComputeIntegral” member function of THnBase.h always returns 1; [ROOT-8384] - GenVectors objects should tell how many dimensions they have; [ROOT-8501] - TMultiLayerPerceptron destructor can cause double delete of memory]; [ROOT-8458] - Templated constructor overload resolution in PyROOT; [ROOT-8644] - PyRoot - Initializer-list support; [ROOT-8712] - TGeoBBox::AreOverlapping does not catch all intersections; [ROOT-8800] - Support rvalue-reference parameters in PyROOT; [ROOT-8801] - Support variadic template arguments of methods and functions in PyROOT; [ROOT-8919] - Eigenvalues delivered in wrong format; [ROOT-9000] - TSpline3; [ROOT-9076] - Missing symbol after syntax error; [ROOT-9083] - ROOT crashes on usage of undeclared identifier; [ROOT-9088] - Variable destruction issue when macro executed line by line.; [ROOT-9159] - Function pointers not supported in PyROOT; [ROOT-9181] - Crash value-printing the std::vector read from a TTreeReaderArray from root prompt; [ROOT-9261] - TMatrixTSparse fails to transpose non-square matrices; [ROOT-9284] - BUG (See description note) PyDoubleBuffer tolist and numpy array cause segfault.; [ROOT-9313] - Crash in TFile::Close on Fedora, ROOT v6.10; [ROOT-9320] - Make GenVector data structures constexpr; [ROOT-9321] - Dictionary generation: type normalization issue in pcm file; [ROOT-9448] - libNew returns nullptr instead of implementing operator new, has many warnings; [ROOT-",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:41509,Availability,fault,fault,41509,"] - BUG (See description note) PyDoubleBuffer tolist and numpy array cause segfault.; [ROOT-9313] - Crash in TFile::Close on Fedora, ROOT v6.10; [ROOT-9320] - Make GenVector data structures constexpr; [ROOT-9321] - Dictionary generation: type normalization issue in pcm file; [ROOT-9448] - libNew returns nullptr instead of implementing operator new, has many warnings; [ROOT-9983] - [DOC] hadd –help does not show description and epilogue; [ROOT-10033] - ROOT::EnableImplicitMT: Number of threads in scheduling environments; [ROOT-10231] - TMatrixD(a,TMatrixD::kInvMult,b) requires b.GetNcols() = a.GetNcols(); [ROOT-10320] - ROOT/meta does not support anonymous unions/structs; [ROOT-10425] - Missing symbols not reported as missing anymore; [ROOT-10546] - RDataFrame cannot be interrupted from PyROOT; [ROOT-10593] - Segmentation fault when calling a not-yet-defined function from ROOT interpreter; [ROOT-10607] - Several ROOT 7 tests fail when assertions are enabled; [ROOT-10613] - Configuration does not fail when fail-on-missing is ON and cudnn is not found; [ROOT-10621] - Segfault if TFile is used with TRint in teardown; [ROOT-10705] - The “x” and “x0” options in THnBase::PrintEntries misbehave; [ROOT-10789] - some cppyy examples do not work under ROOT; [ROOT-10827] - Missing contribution of extended term in the error Correction for extended weighted likelihood fits; [ROOT-10859] - std.make_shared[T] does not work on macOS; [ROOT-10866] - Numerical instabilities when calculating the derivatives for the asymptotically correct erros; [ROOT-10958] - jupyter notebook does not render geometries with new pyroot; [ROOT-10977] - Exit code 0 with failing C++ notebook in nbconvert; [ROOT-11006] - [TTreeReader] Crash when reading array branch. Release 6.32.02; Published on June 18, 2024; Items addressed in this release. [#7236] - Memory leak in TFile::WriteObjectAny, depending on data type; [#10075] - Difficult to configure Xrootd to use non-builtin openssl; [#14051] - [web graphics] W",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:42002,Availability,error,error,42002,"] - BUG (See description note) PyDoubleBuffer tolist and numpy array cause segfault.; [ROOT-9313] - Crash in TFile::Close on Fedora, ROOT v6.10; [ROOT-9320] - Make GenVector data structures constexpr; [ROOT-9321] - Dictionary generation: type normalization issue in pcm file; [ROOT-9448] - libNew returns nullptr instead of implementing operator new, has many warnings; [ROOT-9983] - [DOC] hadd –help does not show description and epilogue; [ROOT-10033] - ROOT::EnableImplicitMT: Number of threads in scheduling environments; [ROOT-10231] - TMatrixD(a,TMatrixD::kInvMult,b) requires b.GetNcols() = a.GetNcols(); [ROOT-10320] - ROOT/meta does not support anonymous unions/structs; [ROOT-10425] - Missing symbols not reported as missing anymore; [ROOT-10546] - RDataFrame cannot be interrupted from PyROOT; [ROOT-10593] - Segmentation fault when calling a not-yet-defined function from ROOT interpreter; [ROOT-10607] - Several ROOT 7 tests fail when assertions are enabled; [ROOT-10613] - Configuration does not fail when fail-on-missing is ON and cudnn is not found; [ROOT-10621] - Segfault if TFile is used with TRint in teardown; [ROOT-10705] - The “x” and “x0” options in THnBase::PrintEntries misbehave; [ROOT-10789] - some cppyy examples do not work under ROOT; [ROOT-10827] - Missing contribution of extended term in the error Correction for extended weighted likelihood fits; [ROOT-10859] - std.make_shared[T] does not work on macOS; [ROOT-10866] - Numerical instabilities when calculating the derivatives for the asymptotically correct erros; [ROOT-10958] - jupyter notebook does not render geometries with new pyroot; [ROOT-10977] - Exit code 0 with failing C++ notebook in nbconvert; [ROOT-11006] - [TTreeReader] Crash when reading array branch. Release 6.32.02; Published on June 18, 2024; Items addressed in this release. [#7236] - Memory leak in TFile::WriteObjectAny, depending on data type; [#10075] - Difficult to configure Xrootd to use non-builtin openssl; [#14051] - [web graphics] W",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:42787,Availability,error,error,42787,"t found; [ROOT-10621] - Segfault if TFile is used with TRint in teardown; [ROOT-10705] - The “x” and “x0” options in THnBase::PrintEntries misbehave; [ROOT-10789] - some cppyy examples do not work under ROOT; [ROOT-10827] - Missing contribution of extended term in the error Correction for extended weighted likelihood fits; [ROOT-10859] - std.make_shared[T] does not work on macOS; [ROOT-10866] - Numerical instabilities when calculating the derivatives for the asymptotically correct erros; [ROOT-10958] - jupyter notebook does not render geometries with new pyroot; [ROOT-10977] - Exit code 0 with failing C++ notebook in nbconvert; [ROOT-11006] - [TTreeReader] Crash when reading array branch. Release 6.32.02; Published on June 18, 2024; Items addressed in this release. [#7236] - Memory leak in TFile::WriteObjectAny, depending on data type; [#10075] - Difficult to configure Xrootd to use non-builtin openssl; [#14051] - [web graphics] Web graphics resizes canvas despite canvas size definition in the macro; [#15321] - [MSVC] Root is failed with error G694476FC: static_assert failed “Unexpected size”; [#15405] - [RF] ExternalConstraints documentation incorrect for RooMCStudy; [#15430] - Test failures with Python 3.13; [#15473] - Segmentation fault when building with the mold linker; [#15498] - gPad is not consistent in pyROOT with web canvas; [#15511] - Possible memory corruption in cling; [#15579] - Performance regression (slowdown) in ALICE event generation; [#15686] - JITted code changes the execution order of computation graph nodes; [#15688] - PyROOT TProfile2D::Fill ambiguities preventing use of some signatures in pyROOT; [#15690] - [RF] SegFault in RooBernstein::fillBuffer; [#15694] - [RF] New RooFit EvalBackend returning incorrect result for binned likelihoods; [#15703] - Leaking memory though strings in PyROOT; [#15727] - Windows CMake project cannot find_library() after integrating with ROOT.; [#15751] - [RF] Using a conditional RooProdPdf in a multi-channel fit sp",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:42936,Availability,failure,failures,42936,"t found; [ROOT-10621] - Segfault if TFile is used with TRint in teardown; [ROOT-10705] - The “x” and “x0” options in THnBase::PrintEntries misbehave; [ROOT-10789] - some cppyy examples do not work under ROOT; [ROOT-10827] - Missing contribution of extended term in the error Correction for extended weighted likelihood fits; [ROOT-10859] - std.make_shared[T] does not work on macOS; [ROOT-10866] - Numerical instabilities when calculating the derivatives for the asymptotically correct erros; [ROOT-10958] - jupyter notebook does not render geometries with new pyroot; [ROOT-10977] - Exit code 0 with failing C++ notebook in nbconvert; [ROOT-11006] - [TTreeReader] Crash when reading array branch. Release 6.32.02; Published on June 18, 2024; Items addressed in this release. [#7236] - Memory leak in TFile::WriteObjectAny, depending on data type; [#10075] - Difficult to configure Xrootd to use non-builtin openssl; [#14051] - [web graphics] Web graphics resizes canvas despite canvas size definition in the macro; [#15321] - [MSVC] Root is failed with error G694476FC: static_assert failed “Unexpected size”; [#15405] - [RF] ExternalConstraints documentation incorrect for RooMCStudy; [#15430] - Test failures with Python 3.13; [#15473] - Segmentation fault when building with the mold linker; [#15498] - gPad is not consistent in pyROOT with web canvas; [#15511] - Possible memory corruption in cling; [#15579] - Performance regression (slowdown) in ALICE event generation; [#15686] - JITted code changes the execution order of computation graph nodes; [#15688] - PyROOT TProfile2D::Fill ambiguities preventing use of some signatures in pyROOT; [#15690] - [RF] SegFault in RooBernstein::fillBuffer; [#15694] - [RF] New RooFit EvalBackend returning incorrect result for binned likelihoods; [#15703] - Leaking memory though strings in PyROOT; [#15727] - Windows CMake project cannot find_library() after integrating with ROOT.; [#15751] - [RF] Using a conditional RooProdPdf in a multi-channel fit sp",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:42987,Availability,fault,fault,42987,"0977] - Exit code 0 with failing C++ notebook in nbconvert; [ROOT-11006] - [TTreeReader] Crash when reading array branch. Release 6.32.02; Published on June 18, 2024; Items addressed in this release. [#7236] - Memory leak in TFile::WriteObjectAny, depending on data type; [#10075] - Difficult to configure Xrootd to use non-builtin openssl; [#14051] - [web graphics] Web graphics resizes canvas despite canvas size definition in the macro; [#15321] - [MSVC] Root is failed with error G694476FC: static_assert failed “Unexpected size”; [#15405] - [RF] ExternalConstraints documentation incorrect for RooMCStudy; [#15430] - Test failures with Python 3.13; [#15473] - Segmentation fault when building with the mold linker; [#15498] - gPad is not consistent in pyROOT with web canvas; [#15511] - Possible memory corruption in cling; [#15579] - Performance regression (slowdown) in ALICE event generation; [#15686] - JITted code changes the execution order of computation graph nodes; [#15688] - PyROOT TProfile2D::Fill ambiguities preventing use of some signatures in pyROOT; [#15690] - [RF] SegFault in RooBernstein::fillBuffer; [#15694] - [RF] New RooFit EvalBackend returning incorrect result for binned likelihoods; [#15703] - Leaking memory though strings in PyROOT; [#15727] - Windows CMake project cannot find_library() after integrating with ROOT.; [#15751] - [RF] Using a conditional RooProdPdf in a multi-channel fit spawns too many integrals with new CPU evaluation backend; [#15791] - JS ROOT does not draw tprofile2d correctly with “TEXT” draw option; [#15799] - pyunittests-pyroot-pyz-ttree-setbranchaddress segfaults with Python 3.13; [ROOT-7412] - Strange results looking for nested types; [ROOT-8439] - PyROOT does not treat exceptions properly in overloaded methods; [ROOT-9307] - TPad::GetListOfPrimitives() double deletion error in TList::Clear(). Release 6.32.04; Published on August 14, 2024; Items addressed in this release. [#7223] - [RF] RDataFrame to RooDataSet/RooDataHist conve",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:44148,Availability,error,error,44148,"t in pyROOT with web canvas; [#15511] - Possible memory corruption in cling; [#15579] - Performance regression (slowdown) in ALICE event generation; [#15686] - JITted code changes the execution order of computation graph nodes; [#15688] - PyROOT TProfile2D::Fill ambiguities preventing use of some signatures in pyROOT; [#15690] - [RF] SegFault in RooBernstein::fillBuffer; [#15694] - [RF] New RooFit EvalBackend returning incorrect result for binned likelihoods; [#15703] - Leaking memory though strings in PyROOT; [#15727] - Windows CMake project cannot find_library() after integrating with ROOT.; [#15751] - [RF] Using a conditional RooProdPdf in a multi-channel fit spawns too many integrals with new CPU evaluation backend; [#15791] - JS ROOT does not draw tprofile2d correctly with “TEXT” draw option; [#15799] - pyunittests-pyroot-pyz-ttree-setbranchaddress segfaults with Python 3.13; [ROOT-7412] - Strange results looking for nested types; [ROOT-8439] - PyROOT does not treat exceptions properly in overloaded methods; [ROOT-9307] - TPad::GetListOfPrimitives() double deletion error in TList::Clear(). Release 6.32.04; Published on August 14, 2024; Items addressed in this release. [#7223] - [RF] RDataFrame to RooDataSet/RooDataHist conversion; [#7782] - [RF] Allow to set nbins for RooPlot (or disallow); [#9838] - [RF] RooCurve::Average() overestimating average values of standard precision curves on small; [#11565] - [RF] Crash in RooStats::ToyMCSample::GenerateToyData; [#13387] - Please recover SrvAuthenticate from libSrvAuth library; [#14541] - [ROOT-6193] Editor for palette axis cannot set title properties; [#15104] - new PyROOT/cppyy fails to pickle enums; [#15161] - Attribute (getitem) differences for PyROOT objects in ROOT master; [#15234] - cppyy - wrong object type when iterating over a polymorphic container; [#15269] - Iterators in pyROOT working differently in ROOT master compared to 6.30/02; [#15315] - PyROOT Example with inheriting from ROOT.Math.IMultiGenFunction",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:44565,Availability,recover,recover,44565," find_library() after integrating with ROOT.; [#15751] - [RF] Using a conditional RooProdPdf in a multi-channel fit spawns too many integrals with new CPU evaluation backend; [#15791] - JS ROOT does not draw tprofile2d correctly with “TEXT” draw option; [#15799] - pyunittests-pyroot-pyz-ttree-setbranchaddress segfaults with Python 3.13; [ROOT-7412] - Strange results looking for nested types; [ROOT-8439] - PyROOT does not treat exceptions properly in overloaded methods; [ROOT-9307] - TPad::GetListOfPrimitives() double deletion error in TList::Clear(). Release 6.32.04; Published on August 14, 2024; Items addressed in this release. [#7223] - [RF] RDataFrame to RooDataSet/RooDataHist conversion; [#7782] - [RF] Allow to set nbins for RooPlot (or disallow); [#9838] - [RF] RooCurve::Average() overestimating average values of standard precision curves on small; [#11565] - [RF] Crash in RooStats::ToyMCSample::GenerateToyData; [#13387] - Please recover SrvAuthenticate from libSrvAuth library; [#14541] - [ROOT-6193] Editor for palette axis cannot set title properties; [#15104] - new PyROOT/cppyy fails to pickle enums; [#15161] - Attribute (getitem) differences for PyROOT objects in ROOT master; [#15234] - cppyy - wrong object type when iterating over a polymorphic container; [#15269] - Iterators in pyROOT working differently in ROOT master compared to 6.30/02; [#15315] - PyROOT Example with inheriting from ROOT.Math.IMultiGenFunction doesn’t work after recent cppyy upgrade; [#15425] - TTreeProcessorMP processes events multiple times when there are more threads than entries; [#15755] - [RF][HS3] Higgs discovery workspaces roundtrip; [#15874] - [Hist] Backwards compatibility broken for THnSparseL in 6.32; [#15887] - Broken plot .C macros for default Name() argument in plotOn(); [#15977] - [gui] Event StatusBar does not work well when TMarker outside of zoom region; [#15986] - Problems with TUri compilation; [#16031] - VecOps binary functions not using the right types; [#16038] - ",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:45636,Availability,error,error,45636,"ooStats::ToyMCSample::GenerateToyData; [#13387] - Please recover SrvAuthenticate from libSrvAuth library; [#14541] - [ROOT-6193] Editor for palette axis cannot set title properties; [#15104] - new PyROOT/cppyy fails to pickle enums; [#15161] - Attribute (getitem) differences for PyROOT objects in ROOT master; [#15234] - cppyy - wrong object type when iterating over a polymorphic container; [#15269] - Iterators in pyROOT working differently in ROOT master compared to 6.30/02; [#15315] - PyROOT Example with inheriting from ROOT.Math.IMultiGenFunction doesn’t work after recent cppyy upgrade; [#15425] - TTreeProcessorMP processes events multiple times when there are more threads than entries; [#15755] - [RF][HS3] Higgs discovery workspaces roundtrip; [#15874] - [Hist] Backwards compatibility broken for THnSparseL in 6.32; [#15887] - Broken plot .C macros for default Name() argument in plotOn(); [#15977] - [gui] Event StatusBar does not work well when TMarker outside of zoom region; [#15986] - Problems with TUri compilation; [#16031] - VecOps binary functions not using the right types; [#16038] - Could NOT find Vdt error when using 6.32.02 docker image; [#16087] - [docs] Potential typo in function name case: DistanceToPrimitive; [#16201] - PyROOT Support most recent numba version 0.60.0 intervals; [ROOT-6286] - Reading a TChain and TTreeCache; [ROOT-7991] - THnSparse::ProjectionND yields disfunctional histogram; [ROOT-8238] - TPrincipal tries to make histograms with nbin=0; [ROOT-8519] - Bug when use simple math functions in TTree::SetAlias(). Release 6.32.06; Published on September 22, 2024; Items addressed in this release; This is the first ROOT release supporting macOS 15 Sequoia. [#15178] - ROOT generates CMake warnings when building from the tarball; [#16219] - Module map on the new XCode version for macos15-beta; [#16249] - Iterating with a range for does one extra iteration; [ROOT-10902] - SMatrix read from TTree contains all zeroes. HEAD of the v6-32-00-patches br",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:1223,Deployability,release,release,1223,"ngs. TTree Libraries; Add files from subdirectories with TChain::Add globbing; Improved efficiency of TTree friends with indices. RNTuple; Histogram Libraries; Parallelism; RooFit Libraries; New CPU likelihood evaluation backend by default; Asymptotically correct uncertainties for extended unbinned likelihood fits; Compile your code with memory safe interfaces; Removal of some memory-unsafe interfaces; Deprecation of legacy iterators; Deprecation of legacy test statistics classes in public interface; Change of RooParamHistFunc; Renaming of some RooFit classes. RDataFrame; Graphics backends; 2D Graphics Libraries; 3D Graphics Libraries; REve. PROOF Libraries; PyROOT; Different representation of std::string; No more implicit conversion of static size char buffer to Python strings; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; Removal of Python 2 support; More usage of the public cppyy API. Class Reference Guide; Build, Configuration and Testing Infrastructure; Bugs and Issues fixed in this release; Release 6.32.02; Items addressed in this release. Release 6.32.04; Items addressed in this release. Release 6.32.06; Items addressed in this release. HEAD of the v6-32-00-patches branch. Introduction; ROOT version 6.32.00 was released on 28 May 2024. This release is a long term support one, ideal for inclusion in production or data taking software stacks of experiments.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Anton Alkin, Sungkyunkwan University; Guilherme Amadio, CERN/IT,; Abhigyan Acherjee, University of Cincinnati,; Bertrand Bellenot, CERN/EP-SFT,; Jakob Blomer, CERN/EP-SFT,; Rene Brun,; Carsten Burgard, DESY; Will Buttinger, RAL,; Philippe Canal, FNAL,; Jolly Chen, CERN/EP-SFT,; Olivier Couet, CERN/EP-SFT,; Marta Czurylo, CERN/EP-SFT,; Monica Dessole, CERN/EP-SFT,; Mattias Ellert, Uppsala University,; Gerri Ganis, CERN/EP-SFT,; Florine de Geus, CERN/University of Tw",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:1273,Deployability,release,release,1273,"roved efficiency of TTree friends with indices. RNTuple; Histogram Libraries; Parallelism; RooFit Libraries; New CPU likelihood evaluation backend by default; Asymptotically correct uncertainties for extended unbinned likelihood fits; Compile your code with memory safe interfaces; Removal of some memory-unsafe interfaces; Deprecation of legacy iterators; Deprecation of legacy test statistics classes in public interface; Change of RooParamHistFunc; Renaming of some RooFit classes. RDataFrame; Graphics backends; 2D Graphics Libraries; 3D Graphics Libraries; REve. PROOF Libraries; PyROOT; Different representation of std::string; No more implicit conversion of static size char buffer to Python strings; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; Removal of Python 2 support; More usage of the public cppyy API. Class Reference Guide; Build, Configuration and Testing Infrastructure; Bugs and Issues fixed in this release; Release 6.32.02; Items addressed in this release. Release 6.32.04; Items addressed in this release. Release 6.32.06; Items addressed in this release. HEAD of the v6-32-00-patches branch. Introduction; ROOT version 6.32.00 was released on 28 May 2024. This release is a long term support one, ideal for inclusion in production or data taking software stacks of experiments.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Anton Alkin, Sungkyunkwan University; Guilherme Amadio, CERN/IT,; Abhigyan Acherjee, University of Cincinnati,; Bertrand Bellenot, CERN/EP-SFT,; Jakob Blomer, CERN/EP-SFT,; Rene Brun,; Carsten Burgard, DESY; Will Buttinger, RAL,; Philippe Canal, FNAL,; Jolly Chen, CERN/EP-SFT,; Olivier Couet, CERN/EP-SFT,; Marta Czurylo, CERN/EP-SFT,; Monica Dessole, CERN/EP-SFT,; Mattias Ellert, Uppsala University,; Gerri Ganis, CERN/EP-SFT,; Florine de Geus, CERN/University of Twente,; Andrei Gheata, CERN/EP-SFT,; Bernhard Manfred Gruber,; Enrico Guiraud, Jona",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:1323,Deployability,release,release,1323,"Tuple; Histogram Libraries; Parallelism; RooFit Libraries; New CPU likelihood evaluation backend by default; Asymptotically correct uncertainties for extended unbinned likelihood fits; Compile your code with memory safe interfaces; Removal of some memory-unsafe interfaces; Deprecation of legacy iterators; Deprecation of legacy test statistics classes in public interface; Change of RooParamHistFunc; Renaming of some RooFit classes. RDataFrame; Graphics backends; 2D Graphics Libraries; 3D Graphics Libraries; REve. PROOF Libraries; PyROOT; Different representation of std::string; No more implicit conversion of static size char buffer to Python strings; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; Removal of Python 2 support; More usage of the public cppyy API. Class Reference Guide; Build, Configuration and Testing Infrastructure; Bugs and Issues fixed in this release; Release 6.32.02; Items addressed in this release. Release 6.32.04; Items addressed in this release. Release 6.32.06; Items addressed in this release. HEAD of the v6-32-00-patches branch. Introduction; ROOT version 6.32.00 was released on 28 May 2024. This release is a long term support one, ideal for inclusion in production or data taking software stacks of experiments.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Anton Alkin, Sungkyunkwan University; Guilherme Amadio, CERN/IT,; Abhigyan Acherjee, University of Cincinnati,; Bertrand Bellenot, CERN/EP-SFT,; Jakob Blomer, CERN/EP-SFT,; Rene Brun,; Carsten Burgard, DESY; Will Buttinger, RAL,; Philippe Canal, FNAL,; Jolly Chen, CERN/EP-SFT,; Olivier Couet, CERN/EP-SFT,; Marta Czurylo, CERN/EP-SFT,; Monica Dessole, CERN/EP-SFT,; Mattias Ellert, Uppsala University,; Gerri Ganis, CERN/EP-SFT,; Florine de Geus, CERN/University of Twente,; Andrei Gheata, CERN/EP-SFT,; Bernhard Manfred Gruber,; Enrico Guiraud, Jonas Hahnfeld, CERN/Goethe University Frankfurt,; Fer",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:1373,Deployability,release,release,1373,"braries; New CPU likelihood evaluation backend by default; Asymptotically correct uncertainties for extended unbinned likelihood fits; Compile your code with memory safe interfaces; Removal of some memory-unsafe interfaces; Deprecation of legacy iterators; Deprecation of legacy test statistics classes in public interface; Change of RooParamHistFunc; Renaming of some RooFit classes. RDataFrame; Graphics backends; 2D Graphics Libraries; 3D Graphics Libraries; REve. PROOF Libraries; PyROOT; Different representation of std::string; No more implicit conversion of static size char buffer to Python strings; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; Removal of Python 2 support; More usage of the public cppyy API. Class Reference Guide; Build, Configuration and Testing Infrastructure; Bugs and Issues fixed in this release; Release 6.32.02; Items addressed in this release. Release 6.32.04; Items addressed in this release. Release 6.32.06; Items addressed in this release. HEAD of the v6-32-00-patches branch. Introduction; ROOT version 6.32.00 was released on 28 May 2024. This release is a long term support one, ideal for inclusion in production or data taking software stacks of experiments.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Anton Alkin, Sungkyunkwan University; Guilherme Amadio, CERN/IT,; Abhigyan Acherjee, University of Cincinnati,; Bertrand Bellenot, CERN/EP-SFT,; Jakob Blomer, CERN/EP-SFT,; Rene Brun,; Carsten Burgard, DESY; Will Buttinger, RAL,; Philippe Canal, FNAL,; Jolly Chen, CERN/EP-SFT,; Olivier Couet, CERN/EP-SFT,; Marta Czurylo, CERN/EP-SFT,; Monica Dessole, CERN/EP-SFT,; Mattias Ellert, Uppsala University,; Gerri Ganis, CERN/EP-SFT,; Florine de Geus, CERN/University of Twente,; Andrei Gheata, CERN/EP-SFT,; Bernhard Manfred Gruber,; Enrico Guiraud, Jonas Hahnfeld, CERN/Goethe University Frankfurt,; Fernando Hueso Gonzalez, University of Valencia; Atti",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:1403,Deployability,patch,patches,1403,"on backend by default; Asymptotically correct uncertainties for extended unbinned likelihood fits; Compile your code with memory safe interfaces; Removal of some memory-unsafe interfaces; Deprecation of legacy iterators; Deprecation of legacy test statistics classes in public interface; Change of RooParamHistFunc; Renaming of some RooFit classes. RDataFrame; Graphics backends; 2D Graphics Libraries; 3D Graphics Libraries; REve. PROOF Libraries; PyROOT; Different representation of std::string; No more implicit conversion of static size char buffer to Python strings; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; Removal of Python 2 support; More usage of the public cppyy API. Class Reference Guide; Build, Configuration and Testing Infrastructure; Bugs and Issues fixed in this release; Release 6.32.02; Items addressed in this release. Release 6.32.04; Items addressed in this release. Release 6.32.06; Items addressed in this release. HEAD of the v6-32-00-patches branch. Introduction; ROOT version 6.32.00 was released on 28 May 2024. This release is a long term support one, ideal for inclusion in production or data taking software stacks of experiments.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Anton Alkin, Sungkyunkwan University; Guilherme Amadio, CERN/IT,; Abhigyan Acherjee, University of Cincinnati,; Bertrand Bellenot, CERN/EP-SFT,; Jakob Blomer, CERN/EP-SFT,; Rene Brun,; Carsten Burgard, DESY; Will Buttinger, RAL,; Philippe Canal, FNAL,; Jolly Chen, CERN/EP-SFT,; Olivier Couet, CERN/EP-SFT,; Marta Czurylo, CERN/EP-SFT,; Monica Dessole, CERN/EP-SFT,; Mattias Ellert, Uppsala University,; Gerri Ganis, CERN/EP-SFT,; Florine de Geus, CERN/University of Twente,; Andrei Gheata, CERN/EP-SFT,; Bernhard Manfred Gruber,; Enrico Guiraud, Jonas Hahnfeld, CERN/Goethe University Frankfurt,; Fernando Hueso Gonzalez, University of Valencia; Attila Krasznahorkay, CERN/EP-ADP-OS,; Wi",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:1458,Deployability,release,released,1458,"ended unbinned likelihood fits; Compile your code with memory safe interfaces; Removal of some memory-unsafe interfaces; Deprecation of legacy iterators; Deprecation of legacy test statistics classes in public interface; Change of RooParamHistFunc; Renaming of some RooFit classes. RDataFrame; Graphics backends; 2D Graphics Libraries; 3D Graphics Libraries; REve. PROOF Libraries; PyROOT; Different representation of std::string; No more implicit conversion of static size char buffer to Python strings; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; Removal of Python 2 support; More usage of the public cppyy API. Class Reference Guide; Build, Configuration and Testing Infrastructure; Bugs and Issues fixed in this release; Release 6.32.02; Items addressed in this release. Release 6.32.04; Items addressed in this release. Release 6.32.06; Items addressed in this release. HEAD of the v6-32-00-patches branch. Introduction; ROOT version 6.32.00 was released on 28 May 2024. This release is a long term support one, ideal for inclusion in production or data taking software stacks of experiments.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Anton Alkin, Sungkyunkwan University; Guilherme Amadio, CERN/IT,; Abhigyan Acherjee, University of Cincinnati,; Bertrand Bellenot, CERN/EP-SFT,; Jakob Blomer, CERN/EP-SFT,; Rene Brun,; Carsten Burgard, DESY; Will Buttinger, RAL,; Philippe Canal, FNAL,; Jolly Chen, CERN/EP-SFT,; Olivier Couet, CERN/EP-SFT,; Marta Czurylo, CERN/EP-SFT,; Monica Dessole, CERN/EP-SFT,; Mattias Ellert, Uppsala University,; Gerri Ganis, CERN/EP-SFT,; Florine de Geus, CERN/University of Twente,; Andrei Gheata, CERN/EP-SFT,; Bernhard Manfred Gruber,; Enrico Guiraud, Jonas Hahnfeld, CERN/Goethe University Frankfurt,; Fernando Hueso Gonzalez, University of Valencia; Attila Krasznahorkay, CERN/EP-ADP-OS,; Wim Lavrijsen, LBL,; Dennis Klein, GSI,; Christoph Langenbruch, Heide",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:1488,Deployability,release,release,1488,"; Removal of some memory-unsafe interfaces; Deprecation of legacy iterators; Deprecation of legacy test statistics classes in public interface; Change of RooParamHistFunc; Renaming of some RooFit classes. RDataFrame; Graphics backends; 2D Graphics Libraries; 3D Graphics Libraries; REve. PROOF Libraries; PyROOT; Different representation of std::string; No more implicit conversion of static size char buffer to Python strings; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; Removal of Python 2 support; More usage of the public cppyy API. Class Reference Guide; Build, Configuration and Testing Infrastructure; Bugs and Issues fixed in this release; Release 6.32.02; Items addressed in this release. Release 6.32.04; Items addressed in this release. Release 6.32.06; Items addressed in this release. HEAD of the v6-32-00-patches branch. Introduction; ROOT version 6.32.00 was released on 28 May 2024. This release is a long term support one, ideal for inclusion in production or data taking software stacks of experiments.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Anton Alkin, Sungkyunkwan University; Guilherme Amadio, CERN/IT,; Abhigyan Acherjee, University of Cincinnati,; Bertrand Bellenot, CERN/EP-SFT,; Jakob Blomer, CERN/EP-SFT,; Rene Brun,; Carsten Burgard, DESY; Will Buttinger, RAL,; Philippe Canal, FNAL,; Jolly Chen, CERN/EP-SFT,; Olivier Couet, CERN/EP-SFT,; Marta Czurylo, CERN/EP-SFT,; Monica Dessole, CERN/EP-SFT,; Mattias Ellert, Uppsala University,; Gerri Ganis, CERN/EP-SFT,; Florine de Geus, CERN/University of Twente,; Andrei Gheata, CERN/EP-SFT,; Bernhard Manfred Gruber,; Enrico Guiraud, Jonas Hahnfeld, CERN/Goethe University Frankfurt,; Fernando Hueso Gonzalez, University of Valencia; Attila Krasznahorkay, CERN/EP-ADP-OS,; Wim Lavrijsen, LBL,; Dennis Klein, GSI,; Christoph Langenbruch, Heidelberg University/LHCb,; Sergey Linev, GSI,; Javier Lopez-Gomez,; Pere Mato, ",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:4047,Deployability,release,release,4047,"ima Singh, ETH,; Juraj Smiesko, CERN/RCS-PRJ-FC, Pavlo Svirin, National Technical University of Ukraine,; Maciej Szymanski, Argonne,; Christian Tacke, Darmstadt University,; Matevz Tadel, UCSD/CMS,; Alvaro Tolosa Delgado, CERN/RCS-PRJ-FC,; Devajith Valaparambil Sreeramaswamy, CERN/EP-SFT,; Peter Van Gemmeren, Argonne,; Vassil Vassilev, Princeton/CMS,; Wouter Verkerke, NIKHEF/ATLAS, Stefan Wunsch; Deprecation and Removal. The RooFit legacy iterators are deprecated and will be removed in ROOT 6.34 (see section “RooFit libraries”); Some memory-unsafe RooFit interfaces were removed; Some redundant RooDataSet constructors are deprecated and will be removed in ROOT 6.34. Please use the RooDataSet constructors that take RooFit command arguments instead; ROOT does not longer support Python 2. The minimum required Python version to build ROOT is 3.8.; Support for wildcard imports like from ROOT import * is dropped from PyROOT; Support for external (ie. non-builtin) libAfterImage is now deprecated and it will be removed in next release 6.34.; The TList::TList(TObject*) constructor is deprecated and will be removed in ROOT 6.34; The deprecated TProofOutputList::TProofOutputList(TObject *o) constructor was removed. Core Libraries; The Cling interpreter now relies on LLVM version 16.; I/O Libraries; hadd respects compression settings; Fixed a bug that was previously changing the compression settings to a single digit number instead of the full value (by default 101).; TTree Libraries; Add files from subdirectories with TChain::Add globbing; It is now possible to add files from multiple subdirectories with TChain::Add globbing. For example,; TChain::Add(""/path/to/tree/*/*.root""); grabs all the root files with the path /path/to/tree/somedir/file.root (but not /path/to/tree/file.root and /path/to/tree/somedir/anotherdir/file.root).; Another example:; TChain::Add(""/path/to/tree/subdir[0-9]/*.root""); This grabs all the root files in subdirectories that have a name starting with subdir",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:5528,Deployability,update,updates,5528,"; Add files from subdirectories with TChain::Add globbing; It is now possible to add files from multiple subdirectories with TChain::Add globbing. For example,; TChain::Add(""/path/to/tree/*/*.root""); grabs all the root files with the path /path/to/tree/somedir/file.root (but not /path/to/tree/file.root and /path/to/tree/somedir/anotherdir/file.root).; Another example:; TChain::Add(""/path/to/tree/subdir[0-9]/*.root""); This grabs all the root files in subdirectories that have a name starting with subdir and ending with some digit.; Improved efficiency of TTree friends with indices; TTreeIndex and TChainIndex classes now implement the Clone method such that it does not use the ROOT I/O to clone the index but just does a copy in memory. Notably, this improves processing efficiency for RDataFrame in multithreaded execution since the same index must be copied over to all the threads and attached to the current tree for proper event matching.; RNTuple; ROOT’s experimental successor of TTree has seen a number of updates since the last release. Specifically, 6.32 includes the following changes:. A major refactoring of the interface, improving consistency across different parts and improving overall robustness. Note that this is a breaking change with regard to 6.30!; The on-disk format has been updated to release candidate 2. It will not be possible to read RNTuples written in the previous format anymore.; Support has been added for several new field types: std::unordered_set<T>, std::map<K,V>, std::unordered_map<K,V>; Support has been added for on-disk half-precision (IEEE 754-2008 16-bit) float fields. This can be enabled through RField<float>::SetHalfPrecision(). On reading, values of such fields are represented as regular, 32-bit floats.; A new RNTupleInspector utility class has been added, to provide information about the on-disk metadata of an RNTuple.; A new RNTupleParallelWriter class has been added, providing (initial) support for parallel writing of RNTuples.; A ne",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:5551,Deployability,release,release,5551,"; Add files from subdirectories with TChain::Add globbing; It is now possible to add files from multiple subdirectories with TChain::Add globbing. For example,; TChain::Add(""/path/to/tree/*/*.root""); grabs all the root files with the path /path/to/tree/somedir/file.root (but not /path/to/tree/file.root and /path/to/tree/somedir/anotherdir/file.root).; Another example:; TChain::Add(""/path/to/tree/subdir[0-9]/*.root""); This grabs all the root files in subdirectories that have a name starting with subdir and ending with some digit.; Improved efficiency of TTree friends with indices; TTreeIndex and TChainIndex classes now implement the Clone method such that it does not use the ROOT I/O to clone the index but just does a copy in memory. Notably, this improves processing efficiency for RDataFrame in multithreaded execution since the same index must be copied over to all the threads and attached to the current tree for proper event matching.; RNTuple; ROOT’s experimental successor of TTree has seen a number of updates since the last release. Specifically, 6.32 includes the following changes:. A major refactoring of the interface, improving consistency across different parts and improving overall robustness. Note that this is a breaking change with regard to 6.30!; The on-disk format has been updated to release candidate 2. It will not be possible to read RNTuples written in the previous format anymore.; Support has been added for several new field types: std::unordered_set<T>, std::map<K,V>, std::unordered_map<K,V>; Support has been added for on-disk half-precision (IEEE 754-2008 16-bit) float fields. This can be enabled through RField<float>::SetHalfPrecision(). On reading, values of such fields are represented as regular, 32-bit floats.; A new RNTupleInspector utility class has been added, to provide information about the on-disk metadata of an RNTuple.; A new RNTupleParallelWriter class has been added, providing (initial) support for parallel writing of RNTuples.; A ne",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:5815,Deployability,update,updated,5815,"d /path/to/tree/somedir/anotherdir/file.root).; Another example:; TChain::Add(""/path/to/tree/subdir[0-9]/*.root""); This grabs all the root files in subdirectories that have a name starting with subdir and ending with some digit.; Improved efficiency of TTree friends with indices; TTreeIndex and TChainIndex classes now implement the Clone method such that it does not use the ROOT I/O to clone the index but just does a copy in memory. Notably, this improves processing efficiency for RDataFrame in multithreaded execution since the same index must be copied over to all the threads and attached to the current tree for proper event matching.; RNTuple; ROOT’s experimental successor of TTree has seen a number of updates since the last release. Specifically, 6.32 includes the following changes:. A major refactoring of the interface, improving consistency across different parts and improving overall robustness. Note that this is a breaking change with regard to 6.30!; The on-disk format has been updated to release candidate 2. It will not be possible to read RNTuples written in the previous format anymore.; Support has been added for several new field types: std::unordered_set<T>, std::map<K,V>, std::unordered_map<K,V>; Support has been added for on-disk half-precision (IEEE 754-2008 16-bit) float fields. This can be enabled through RField<float>::SetHalfPrecision(). On reading, values of such fields are represented as regular, 32-bit floats.; A new RNTupleInspector utility class has been added, to provide information about the on-disk metadata of an RNTuple.; A new RNTupleParallelWriter class has been added, providing (initial) support for parallel writing of RNTuples.; A new static method RFieldBase::Check() has been added, which produces a support status report of a type with regards to RNTuple I/O.; A new internal RNTupleMerger class has been added, enabling the merging of different page sources into one page sink. This also means that RNTuples can be merged through hadd.",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:5826,Deployability,release,release,5826,"d /path/to/tree/somedir/anotherdir/file.root).; Another example:; TChain::Add(""/path/to/tree/subdir[0-9]/*.root""); This grabs all the root files in subdirectories that have a name starting with subdir and ending with some digit.; Improved efficiency of TTree friends with indices; TTreeIndex and TChainIndex classes now implement the Clone method such that it does not use the ROOT I/O to clone the index but just does a copy in memory. Notably, this improves processing efficiency for RDataFrame in multithreaded execution since the same index must be copied over to all the threads and attached to the current tree for proper event matching.; RNTuple; ROOT’s experimental successor of TTree has seen a number of updates since the last release. Specifically, 6.32 includes the following changes:. A major refactoring of the interface, improving consistency across different parts and improving overall robustness. Note that this is a breaking change with regard to 6.30!; The on-disk format has been updated to release candidate 2. It will not be possible to read RNTuples written in the previous format anymore.; Support has been added for several new field types: std::unordered_set<T>, std::map<K,V>, std::unordered_map<K,V>; Support has been added for on-disk half-precision (IEEE 754-2008 16-bit) float fields. This can be enabled through RField<float>::SetHalfPrecision(). On reading, values of such fields are represented as regular, 32-bit floats.; A new RNTupleInspector utility class has been added, to provide information about the on-disk metadata of an RNTuple.; A new RNTupleParallelWriter class has been added, providing (initial) support for parallel writing of RNTuples.; A new static method RFieldBase::Check() has been added, which produces a support status report of a type with regards to RNTuple I/O.; A new internal RNTupleMerger class has been added, enabling the merging of different page sources into one page sink. This also means that RNTuples can be merged through hadd.",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:7215,Deployability,integrat,integration,7215,"32-bit floats.; A new RNTupleInspector utility class has been added, to provide information about the on-disk metadata of an RNTuple.; A new RNTupleParallelWriter class has been added, providing (initial) support for parallel writing of RNTuples.; A new static method RFieldBase::Check() has been added, which produces a support status report of a type with regards to RNTuple I/O.; A new internal RNTupleMerger class has been added, enabling the merging of different page sources into one page sink. This also means that RNTuples can be merged through hadd.; Zero-copy bulk reading has been added, with extra optimizations for ROOT::RVec fields.; It is now possible to use the RNTupleView with an external address with type erasure, e.g.:; std::shared_ptr<void> data{new float()};; auto view = reader->GetView(""pt"", data);; This enables use cases such as reading one specific entry of one specific field into a previously allocated memory location.; Further integration with RDataFrame: it is now possible to create RDataFrame for chains of RNTuples. This addition also comes with improvements to the multi-threaded work scheduling.; Many additional bug fixes and improvements. Please, report any issues regarding the above mentioned features should you encounter them. RNTuple is still in pre-production. The on-disk format is scheduled to be finalized by the end of 2024. Thus, we appreciate feedback and suggestions for improvement.; Histogram Libraries. Implement the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum().; Print a warning when the range given to TAxis::SetRange is invalid.; Fix projection name in TH3 as requested here. Parallelism. The ROOT::Experimental::TFuture template has been removed. RooFit Libraries; New CPU likelihood evaluation backend by default; The new vectorizing CPU evaluation backend is not the default for RooFit likelihoods. Likelihood minimization is now up to 10x faster on a single CPU core.; If you experience unexpected problems rela",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:16716,Deployability,release,release,16716,"ion would be thrown only at a JIT-ting time, before the start of the computations.; Distributed RDataFrame now supports processing an RNTuple dataset.; In distributed RDataFrame, the initialize function useful to run initialization code at the beginning of every task on a worker will now run only in the worker processes. Previously, it was also run eagerly at the point of calling, that is in the main user process. This is done to better separate the user driver environment and the worker environments. If necessary, the function passed to initialize can be called directly by the user in the main application to reproduce the same effect as before.; Some internal details of the RDataFrame implementation were reworked to decrease memory usage and runtime of programs with very deep computation graphs (more than O(10K) nodes in the same branch). Preliminary tests indicate between 30% and a factor 2.5 in memory decrease. This improvement is transparent for RDataFrame users. Graphics backends; The ROOT release 6.32 brings a lot of impressive enhancements to the Web Graphics package, greatly surpassing the features and capabilities of version 6.30. This update provides users with a more robust Web Graphics. The JSROOT version has been updated to v7.7. 2D Graphics Libraries. TMultiGraph: Add the objects from the list of functions in legend produce by TLegend.; Implement the IsInside method for TEllipse, TCrown and TDiamond. Also, a new graphics example inside.C has been added.; Two new methods in TColor: ListColors() and GetColorByname().; Make sure the option L draws closed polygon for TH2Poly.; Use Tex Gyre fonts for sans serif (similar to Helvetica) .; The new method TPad::ModifiedUpdate is short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().; Improve SetTextSize error: show code and values.; Very long text string generated a wrong SVG file.; Fix the option SAME works for TGraph2D.; Implement the title for",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:16869,Deployability,update,update,16869,"ialize function useful to run initialization code at the beginning of every task on a worker will now run only in the worker processes. Previously, it was also run eagerly at the point of calling, that is in the main user process. This is done to better separate the user driver environment and the worker environments. If necessary, the function passed to initialize can be called directly by the user in the main application to reproduce the same effect as before.; Some internal details of the RDataFrame implementation were reworked to decrease memory usage and runtime of programs with very deep computation graphs (more than O(10K) nodes in the same branch). Preliminary tests indicate between 30% and a factor 2.5 in memory decrease. This improvement is transparent for RDataFrame users. Graphics backends; The ROOT release 6.32 brings a lot of impressive enhancements to the Web Graphics package, greatly surpassing the features and capabilities of version 6.30. This update provides users with a more robust Web Graphics. The JSROOT version has been updated to v7.7. 2D Graphics Libraries. TMultiGraph: Add the objects from the list of functions in legend produce by TLegend.; Implement the IsInside method for TEllipse, TCrown and TDiamond. Also, a new graphics example inside.C has been added.; Two new methods in TColor: ListColors() and GetColorByname().; Make sure the option L draws closed polygon for TH2Poly.; Use Tex Gyre fonts for sans serif (similar to Helvetica) .; The new method TPad::ModifiedUpdate is short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().; Improve SetTextSize error: show code and values.; Very long text string generated a wrong SVG file.; Fix the option SAME works for TGraph2D.; Implement the title for the palette of a TH3.; Fix typo in TLegend::PaintPrimitives() and improve the exclusion graphs legend.; SetParameters(…) or SetParameter(…) on a TF1 reset the properties of the axis tha",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:16952,Deployability,update,updated,16952,"t the beginning of every task on a worker will now run only in the worker processes. Previously, it was also run eagerly at the point of calling, that is in the main user process. This is done to better separate the user driver environment and the worker environments. If necessary, the function passed to initialize can be called directly by the user in the main application to reproduce the same effect as before.; Some internal details of the RDataFrame implementation were reworked to decrease memory usage and runtime of programs with very deep computation graphs (more than O(10K) nodes in the same branch). Preliminary tests indicate between 30% and a factor 2.5 in memory decrease. This improvement is transparent for RDataFrame users. Graphics backends; The ROOT release 6.32 brings a lot of impressive enhancements to the Web Graphics package, greatly surpassing the features and capabilities of version 6.30. This update provides users with a more robust Web Graphics. The JSROOT version has been updated to v7.7. 2D Graphics Libraries. TMultiGraph: Add the objects from the list of functions in legend produce by TLegend.; Implement the IsInside method for TEllipse, TCrown and TDiamond. Also, a new graphics example inside.C has been added.; Two new methods in TColor: ListColors() and GetColorByname().; Make sure the option L draws closed polygon for TH2Poly.; Use Tex Gyre fonts for sans serif (similar to Helvetica) .; The new method TPad::ModifiedUpdate is short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().; Improve SetTextSize error: show code and values.; Very long text string generated a wrong SVG file.; Fix the option SAME works for TGraph2D.; Implement the title for the palette of a TH3.; Fix typo in TLegend::PaintPrimitives() and improve the exclusion graphs legend.; SetParameters(…) or SetParameter(…) on a TF1 reset the properties of the axis that have been previously defined. This was due to the ",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:18485,Deployability,integrat,integrated,18485," an additional ProcessEvents().; Improve SetTextSize error: show code and values.; Very long text string generated a wrong SVG file.; Fix the option SAME works for TGraph2D.; Implement the title for the palette of a TH3.; Fix typo in TLegend::PaintPrimitives() and improve the exclusion graphs legend.; SetParameters(…) or SetParameter(…) on a TF1 reset the properties of the axis that have been previously defined. This was due to the Update() that was done after the parameters definition.; Update fonts’ documentation (CMS request).; Delaunay triangles were computed by the package triangle.c included in the ROOT code. This package had several problems: - It was not maintained anymore. - Its license was not compatible with LGPL. It is now replaced by the CDT package which is properly maintained and has a license (MLP) compatible with LGPL. 3D Graphics Libraries; REve. Introduce lightweight visualization of instanced shapes on the level of 100.000 instances. This is integrated in digit visualization of the type REveBoxSet. List of typed instances are boxes, hexagons, and cones. The digit sets support different types of transformation: positioning, rotation, and scaling in different combinations. With the digit set a palette GUI interface has also been added to enable setting digits threshold and value to color mapping. REveBoxSet screenshot with cone shape type. The set is using value to color map with overflow and underflow mark. The single REveBoxet object has a secondary selection enabled, where one can set a custom tooltip on mouse hover of an individual instance. Update version of RenderCore to fix tone mapping of transparent objects. PROOF Libraries; By default, PROOF is not configured and built any more. It will be deprecated in the future given that its functionality is now provided by the superior RDataFrame and its distributed version, DistRDF.; PyROOT; PyROOT was rebased on the latest version of the cppyy library. This means PyROOT benefits from many upstream ",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:19731,Deployability,upgrade,upgrade,19731,"tte GUI interface has also been added to enable setting digits threshold and value to color mapping. REveBoxSet screenshot with cone shape type. The set is using value to color map with overflow and underflow mark. The single REveBoxet object has a secondary selection enabled, where one can set a custom tooltip on mouse hover of an individual instance. Update version of RenderCore to fix tone mapping of transparent objects. PROOF Libraries; By default, PROOF is not configured and built any more. It will be deprecated in the future given that its functionality is now provided by the superior RDataFrame and its distributed version, DistRDF.; PyROOT; PyROOT was rebased on the latest version of the cppyy library. This means PyROOT benefits from many upstream improvements and fixes, for example related to the conversion of NumPy arrays to vectors, implicit conversion from nested Python tuples to nested initializer lists, and improved overload resolution.; Related to this cppyy upgrade, there are some changes in PyROOT behavior.; Different representation of std::string; Calling repr() on a cppyy.gbl.std.string object now comes with a “b” prefix, i.e. a bytes object is returned instead of a Python string. This is an intentional change for better unicode support.; See: https://github.com/root-project/root/issues/15153#issuecomment-2040504962; No more implicit conversion of static size char buffer to Python strings; A static size character buffer of type char[n] is not converted to a Python string anymore. The reason for this: since it was previously assumed the string was null-terminated, there was no way to get the bytes after a null, even if you wanted to.; import ROOT. ROOT.gInterpreter.Declare(""""""; struct Struct { char char_buffer[5] {}; }; // struct with char[n]; void fill_char_buffer(Struct & st) {; std::string foo{""foo""};; std::memcpy(st.char_buffer, foo.data(), foo.size());; }; """"""). struct = ROOT.Struct(); ROOT.fill_char_buffer(struct); char_buffer = struct.char_buf",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:22667,Deployability,configurat,configuration,22667,"ictionary-like syntax, you can also get objects with names that don’t qualify as a Python variable. Here is a short demo:; import ROOT. with ROOT.TFile.Open(""my_file.root"", ""RECREATE"") as my_file:. # Populate the TFile with simple objects.; my_file.WriteObject(ROOT.std.string(""hello world""), ""my_string""); my_file.WriteObject(ROOT.vector[""int""]([1, 2, 3]), ""my vector""). print(my_file[""my_string""]) # new syntax; print(my_file.my_string) # old deprecated syntax. # With the dictionary syntax, you can also use names that don't qualify as; # a Python variable:; print(my_file[""my vector""]); # print(my_file.my vector) # the old syntax would not work here!; The old pythonization with the __getattr__ syntax still works, but emits a deprecation warning and will be removed from ROOT 6.34.; Removal of Python 2 support; ROOT does no longer support Python 2. The minimum Python version necessary to use ROOT in a Python application is 3.8. As a consequence, any reference to Python 2 in ROOT code was removed and certain configuration options are no longer usable, e.g. root-config --python2-version; cmake -Dpyroot-python2. The cmake build system now looks for the standard Python3 package and previously custom Python-related cmake variables are now just the ones automatically produced by cmake (see https://cmake.org/cmake/help/latest/module/FindPython.html).; More usage of the public cppyy API; Many implementation details of the ROOT pythonizations were moved from C++ functions to pure Python bindings using the public cppyy API. This helps in the integration with the tool but also improves code efficiency and memory usage.; Class Reference Guide. Define missing doxygen groups.; Fix a few typos in the THStack documentation.; Small fixes in the THistPainter documentation.; Improve the TColor documentation: use modern C++ in the examples.; Make sure the python examples do not generate wrong namespaces in the documentation.; The dataframe tutorials json spec files were not displayed proper",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:23202,Deployability,integrat,integration,23202,"ctor""]); # print(my_file.my vector) # the old syntax would not work here!; The old pythonization with the __getattr__ syntax still works, but emits a deprecation warning and will be removed from ROOT 6.34.; Removal of Python 2 support; ROOT does no longer support Python 2. The minimum Python version necessary to use ROOT in a Python application is 3.8. As a consequence, any reference to Python 2 in ROOT code was removed and certain configuration options are no longer usable, e.g. root-config --python2-version; cmake -Dpyroot-python2. The cmake build system now looks for the standard Python3 package and previously custom Python-related cmake variables are now just the ones automatically produced by cmake (see https://cmake.org/cmake/help/latest/module/FindPython.html).; More usage of the public cppyy API; Many implementation details of the ROOT pythonizations were moved from C++ functions to pure Python bindings using the public cppyy API. This helps in the integration with the tool but also improves code efficiency and memory usage.; Class Reference Guide. Define missing doxygen groups.; Fix a few typos in the THStack documentation.; Small fixes in the THistPainter documentation.; Improve the TColor documentation: use modern C++ in the examples.; Make sure the python examples do not generate wrong namespaces in the documentation.; The dataframe tutorials json spec files were not displayed properly. Moreover there was no direct correspondence between the code source and the json file. Those files do not have any doc in them. With a direct link to the GitHub source file the dependency between source code and json is now more obvious.; Document how to remove shadow of TPave, as it was not evident (only explanations were hidden here and there in the forum).; Improve the SetFillColorAlpha documentation.; Simplify some graphics examples: arrow.C, crown.C, diamond.C and ellipse.C.; Fix a typo in the documentation of TGraph::SetHighlight in TGraph.cxx.; Change the marker st",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:24614,Deployability,integrat,integrated,24614,"ed properly. Moreover there was no direct correspondence between the code source and the json file. Those files do not have any doc in them. With a direct link to the GitHub source file the dependency between source code and json is now more obvious.; Document how to remove shadow of TPave, as it was not evident (only explanations were hidden here and there in the forum).; Improve the SetFillColorAlpha documentation.; Simplify some graphics examples: arrow.C, crown.C, diamond.C and ellipse.C.; Fix a typo in the documentation of TGraph::SetHighlight in TGraph.cxx.; Change the marker style in the tutorial df014_CSVDataSource.; Remove useless settings in the tutorial scatter.C.; Fix the tutorial h1analysisTreeReader.C.; Fix doxygen formatting in TGNumberEntry.cxx.; Avoid the CDT documentation to appear in the reference guide.; Remove last references to the old ROOT drupal website. Build, Configuration and Testing Infrastructure; Release v6.32.00 is the first one integrated and tested entirely through the new GitHub based build system.; Bugs and Issues fixed in this release; More than 200 items were addressed for this release. The full list is:. [#15621] - Buffer overflow in TBranch::Init; [#15610] - Memory leak in TTree getattr pythonization; [#15590] - Infinite recursion in TFile::Open; [#15460] - TEnum::GetEnum(“B”)->GetUnderlyingType() does not following typedefs; [#15413] - Fails to build with cuDNN version 9; [#15406] - TEnum::GetEnum does not seem to see ‘through’ using statements.; [#15399] - Memory leak with jitted nodes if the execution is never triggered; [#15396] - [TMVA] Pymva test (Keras) failing on 632 and main; [#15370] - Broken link in HS3 printout; [#15340] - Webgraphics: canvas displayed, but many error printed; [#15253] - C++ standard not propagated via CMake anymore; [#15197] - RBDT does not support xgboost inference; [#15156] - Segfault in TMVA::Experimental::SOFIE::RModel::Streamer; [#15139] - cmake option -Dall=YES breaks the cmake; [#15118] - jso",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:24719,Deployability,release,release,24719," file. Those files do not have any doc in them. With a direct link to the GitHub source file the dependency between source code and json is now more obvious.; Document how to remove shadow of TPave, as it was not evident (only explanations were hidden here and there in the forum).; Improve the SetFillColorAlpha documentation.; Simplify some graphics examples: arrow.C, crown.C, diamond.C and ellipse.C.; Fix a typo in the documentation of TGraph::SetHighlight in TGraph.cxx.; Change the marker style in the tutorial df014_CSVDataSource.; Remove useless settings in the tutorial scatter.C.; Fix the tutorial h1analysisTreeReader.C.; Fix doxygen formatting in TGNumberEntry.cxx.; Avoid the CDT documentation to appear in the reference guide.; Remove last references to the old ROOT drupal website. Build, Configuration and Testing Infrastructure; Release v6.32.00 is the first one integrated and tested entirely through the new GitHub based build system.; Bugs and Issues fixed in this release; More than 200 items were addressed for this release. The full list is:. [#15621] - Buffer overflow in TBranch::Init; [#15610] - Memory leak in TTree getattr pythonization; [#15590] - Infinite recursion in TFile::Open; [#15460] - TEnum::GetEnum(“B”)->GetUnderlyingType() does not following typedefs; [#15413] - Fails to build with cuDNN version 9; [#15406] - TEnum::GetEnum does not seem to see ‘through’ using statements.; [#15399] - Memory leak with jitted nodes if the execution is never triggered; [#15396] - [TMVA] Pymva test (Keras) failing on 632 and main; [#15370] - Broken link in HS3 printout; [#15340] - Webgraphics: canvas displayed, but many error printed; [#15253] - C++ standard not propagated via CMake anymore; [#15197] - RBDT does not support xgboost inference; [#15156] - Segfault in TMVA::Experimental::SOFIE::RModel::Streamer; [#15139] - cmake option -Dall=YES breaks the cmake; [#15118] - jsoninterface does not build if provided with RapidYAML; [#15108] - Turn off clang-format for Li",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:24772,Deployability,release,release,24772," file. Those files do not have any doc in them. With a direct link to the GitHub source file the dependency between source code and json is now more obvious.; Document how to remove shadow of TPave, as it was not evident (only explanations were hidden here and there in the forum).; Improve the SetFillColorAlpha documentation.; Simplify some graphics examples: arrow.C, crown.C, diamond.C and ellipse.C.; Fix a typo in the documentation of TGraph::SetHighlight in TGraph.cxx.; Change the marker style in the tutorial df014_CSVDataSource.; Remove useless settings in the tutorial scatter.C.; Fix the tutorial h1analysisTreeReader.C.; Fix doxygen formatting in TGNumberEntry.cxx.; Avoid the CDT documentation to appear in the reference guide.; Remove last references to the old ROOT drupal website. Build, Configuration and Testing Infrastructure; Release v6.32.00 is the first one integrated and tested entirely through the new GitHub based build system.; Bugs and Issues fixed in this release; More than 200 items were addressed for this release. The full list is:. [#15621] - Buffer overflow in TBranch::Init; [#15610] - Memory leak in TTree getattr pythonization; [#15590] - Infinite recursion in TFile::Open; [#15460] - TEnum::GetEnum(“B”)->GetUnderlyingType() does not following typedefs; [#15413] - Fails to build with cuDNN version 9; [#15406] - TEnum::GetEnum does not seem to see ‘through’ using statements.; [#15399] - Memory leak with jitted nodes if the execution is never triggered; [#15396] - [TMVA] Pymva test (Keras) failing on 632 and main; [#15370] - Broken link in HS3 printout; [#15340] - Webgraphics: canvas displayed, but many error printed; [#15253] - C++ standard not propagated via CMake anymore; [#15197] - RBDT does not support xgboost inference; [#15156] - Segfault in TMVA::Experimental::SOFIE::RModel::Streamer; [#15139] - cmake option -Dall=YES breaks the cmake; [#15118] - jsoninterface does not build if provided with RapidYAML; [#15108] - Turn off clang-format for Li",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:30685,Deployability,install,installed,30685,"nstead of privately; [#14256] - TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; [#14244] - String comparison operators defined in TString.h should be defined as constexpr; [#14229] - [6.30] root-config –git-revision broken; [#14225] - [RF] Segmentation fault in ROOT 6.30 workspace creation; [#14223] - Extremely long startup time when loading dictionaries with pyroot; [#14219] - [cling] Use deduction guides for llvm::ArrayRef; [#14211] - Implement value printing for std::source_location; [#14205] - [cling] Replace llvm::Optional and llvm::None with std::optional; [#14199] - Memory hoarding triggered by the TPluginManager; [#14188] - cmake find_package ROOT 6.30 broken: it requires nlohmann-json; [#14163] - cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; [#14162] - RooFFTConvPdf is not working for ROOT 6.30/02; [#14157] - Minuit2 standalone build: StandAlone.cmake looks for the wrong path for VERSION_FILE; [#14113] - The find_package(root) command fails when using Root installed via Homebrew.; [#14101] - Missing documentation for RDataSetSpec; [#14097] - Cleaner stack traces in python; [#14085] - thisroot.sh does not recognize bash when running in qemu-x86_64; [#14084] - [ntuple] RRecordField creation crashes when TStreamerInfo has insufficient information; [#14075] - [FreeBSD] root.exe crash at end of compilation during modules.idx generation; [#14068] - ROOT 6.30/00 reports root-config --version as 6.30.00; [#14064] - Include Tex Gyre Heros in ROOT fonts; [#14032] - TPaveText has problems when label is set; [#14030] - Allow zero-copy RNTuple bulk reading; [#13965] - [Cling] Assertion fails with wrong but innocent code; [#13962] - THnSparse::Scale() unsparsifies; [#13877] - [ntuple] Segfault when processing recursive classes; [#13865] - [FreeBSD] cling cmake error; [#13861] - Remove all traces of Python2 from the ROOT codebase in preparation for 6.32/00; [#13851] - Test crash with GCC 13 and C++20; [#1383",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:32824,Deployability,install,install,32824,missing recursive traversal; [#13623] - Add directory wildcarding in TChain; [#13531] - Huge RAM consumption of the hadd command for input files with several directories; [#13511] - TMapFile can’t work; [#13497] - Assertion failure in TMVA with vector iterators incompatible error on Windows; [#13441] - error in root-generated code for cubic spline (TSpline3); [#13421] - [MSVC] ROOT builds under msvc option /permissive- with error C4576; [#13359] - Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; [#13288] - [cling] long double type incorrectly parsed by interpreter; [#13155] - TMVA doesn’t compile with pytorch 2.0.1; [#13130] - Valgrind reports leak when constructing TChain; [#13110] - Bug in TDecompBase::DiagProd; [#13079] - Builtin TBB library sometimes not found (or more exactly the one install in /usr/lib sometimes take priority); [#13041] - TVirtualFitter::GetFitter() unexpectedly returns NULL on macOS 12 and 13 with Xcode 14; [#13019] - LLVM assertion failure in HandleUnionActiveMemberChange; [#12993] - std::source_location not working in the interpreter; [#12959] - [ntuple] Distinguish between connecting a page sink and a page source in RColumn; [#12783] - [IO] Writing HistFactory model file twice gives strange results since ROOT 6.26.02; [#12770] - tmva/sofie_parsers does not build with latest Protobuf (22.x); [#12744] - wrong Python version found during build; [#12718] - A crash when trying to initialise a vector from a >1D numpy array in PyROOT; [#12685] - TEnum::GetEnum does NOT process typedefs; [#12644] - Can’t find cxxabi.h and build module ‘ROOT_Foundation_Stage1_NoRTTI’ when building from source on Macos; [#12631] - Unable to build master with external XROOTD; [#12621] - [I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; [#12592] - [doc] TProfile bin error documentation is not correct; [#12591] - Allow partial enablement of modules; [#12527] - MacOS build f,MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:34548,Deployability,update,update,34548,"m a >1D numpy array in PyROOT; [#12685] - TEnum::GetEnum does NOT process typedefs; [#12644] - Can’t find cxxabi.h and build module ‘ROOT_Foundation_Stage1_NoRTTI’ when building from source on Macos; [#12631] - Unable to build master with external XROOTD; [#12621] - [I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; [#12592] - [doc] TProfile bin error documentation is not correct; [#12591] - Allow partial enablement of modules; [#12527] - MacOS build fails if configured without cocoa; [#12492] - The problem with building ROOT v6-26-10 in debug mode on ubuntu 20.04; [#12230] - Wrong conversion from Numpy Array to std.vector when using the wrong type; [#12091] - TSpline SaveAs not using equidistant and loss of precision; [#11924] - PyROOT: wrong overload resolution for C++ functions from python; [#11901] - Binary distribution for Ubutu 22.04 is broken (on WSL2); [#11750] - FindXROOTD adds libraries to link against irrespective of xrootd version used; [#11746] - TH2::Fill(const char namex, const char namey, Double_t w) doesn’t update fTsumwxy; [#11743] - CMake >= 3.24 fails to build LZMA: WARNING: ‘aclocal-1.15’ is missing on your system.; [#11673] - [ntuple] Consider making REntry::AddValue() publicly accessible; [#11667] - [cling] GetClassSharedLibs fails to find several classes; [#11653] - TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; [#11596] - cppyy does not retrieve correct size of type when pythonizing vector; [#11484] - roottest/root/meta/genreflex/ROOT-5768 needs to be enabled; [#11411] - PyROOT Python list of strings -> std::initializer_list< std::string > conversion is broken; [#11395] - Migrate to pcre2; [#11353] - Compiled program with libNew.so crash; [#11304] - WW option for fit functions as the W option; [#11238] - an old bug in ROOT v6 TAB completion ?; [#11197] - Build github release into version release procedure; [#11190] - ROOT compiled with -Ddev=ON crashes when type # in ROOT sessio",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:35359,Deployability,release,release,35359, pythonizing vector; [#11484] - roottest/root/meta/genreflex/ROOT-5768 needs to be enabled; [#11411] - PyROOT Python list of strings -> std::initializer_list< std::string > conversion is broken; [#11395] - Migrate to pcre2; [#11353] - Compiled program with libNew.so crash; [#11304] - WW option for fit functions as the W option; [#11238] - an old bug in ROOT v6 TAB completion ?; [#11197] - Build github release into version release procedure; [#11190] - ROOT compiled with -Ddev=ON crashes when type # in ROOT session; [#11021] - [Fit Panel] Fitting to Gaus + Pol0 in two steps is unnecessarily hard; [#10891] - [RF] Deletion order of objects in RooFit/RooStats tutorials should not matter in Python; [#10871] - [DF][ntuple] Better task splitting with RDF+RNTuple; [#10866] - ACLiC flags parsing for compiler command line options broken in certain cases; [#10684] - PyROOT Cannot use SofieFunctor in Python; [#10664] - [ntuple] Expose fixed-size arrays as RVecs in RDF datasource; [#10395] - [core] CleanCompiledMacros behavior; [#10222] - Suspicious behavior of TUnuran::SampleMulti; [#10221] - ROOT interpreter built with C++17 does not find std::optional without including it first; [#10146] - Byte swapped floats in TMVA sofie on big endian architectures (s390x); [#10061] - Distributed RDataFrame test failures on Mac/ARM; [#9917] - SetRange and SetRangeUser fail silently; [#9594] - Systematic build failure of ROOT master in the LCG DEBUG builds since Jan 15th; [#9524] - Failure to build/run when MACOSX_DEPLOYMENT_TARGET is set to 11 or higher; [#9514] - Printed SVG image contains newline cutting through XML tags; [#9489] - [RF] Cannot turn off useless messages with RooMCStudy unbinned fits + Progress bar would be better.; [#9292] - Integer overflow in TTreeCache::FillBuffer; [#8959] - ninja clean does not remove modules.idx; [#8952] - Make hadd return a non-zero exit code when encountering a corrupted file; [#8942] - cannot buid the dependent project; [#8794] - [TGNumberEntry] ce,MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:35380,Deployability,release,release,35380, pythonizing vector; [#11484] - roottest/root/meta/genreflex/ROOT-5768 needs to be enabled; [#11411] - PyROOT Python list of strings -> std::initializer_list< std::string > conversion is broken; [#11395] - Migrate to pcre2; [#11353] - Compiled program with libNew.so crash; [#11304] - WW option for fit functions as the W option; [#11238] - an old bug in ROOT v6 TAB completion ?; [#11197] - Build github release into version release procedure; [#11190] - ROOT compiled with -Ddev=ON crashes when type # in ROOT session; [#11021] - [Fit Panel] Fitting to Gaus + Pol0 in two steps is unnecessarily hard; [#10891] - [RF] Deletion order of objects in RooFit/RooStats tutorials should not matter in Python; [#10871] - [DF][ntuple] Better task splitting with RDF+RNTuple; [#10866] - ACLiC flags parsing for compiler command line options broken in certain cases; [#10684] - PyROOT Cannot use SofieFunctor in Python; [#10664] - [ntuple] Expose fixed-size arrays as RVecs in RDF datasource; [#10395] - [core] CleanCompiledMacros behavior; [#10222] - Suspicious behavior of TUnuran::SampleMulti; [#10221] - ROOT interpreter built with C++17 does not find std::optional without including it first; [#10146] - Byte swapped floats in TMVA sofie on big endian architectures (s390x); [#10061] - Distributed RDataFrame test failures on Mac/ARM; [#9917] - SetRange and SetRangeUser fail silently; [#9594] - Systematic build failure of ROOT master in the LCG DEBUG builds since Jan 15th; [#9524] - Failure to build/run when MACOSX_DEPLOYMENT_TARGET is set to 11 or higher; [#9514] - Printed SVG image contains newline cutting through XML tags; [#9489] - [RF] Cannot turn off useless messages with RooMCStudy unbinned fits + Progress bar would be better.; [#9292] - Integer overflow in TTreeCache::FillBuffer; [#8959] - ninja clean does not remove modules.idx; [#8952] - Make hadd return a non-zero exit code when encountering a corrupted file; [#8942] - cannot buid the dependent project; [#8794] - [TGNumberEntry] ce,MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:38086,Deployability,configurat,configuration,38086,"+ Progress bar would be better.; [#9292] - Integer overflow in TTreeCache::FillBuffer; [#8959] - ninja clean does not remove modules.idx; [#8952] - Make hadd return a non-zero exit code when encountering a corrupted file; [#8942] - cannot buid the dependent project; [#8794] - [TGNumberEntry] centiseconds; [#8720] - Apply TChain::SetImplicitMT() to underlying trees; [#8639] - (RDataFrame) AsNumpy returns Boolean branches as ‘object’ dtype numpy arrays; [#8582] - TThreadTimer behavior; [#8581] - [ntuple] RNTupleModel columns ownership issue; [#8517] - Add integer support to TVectorT; [#8494] - cling crashes on conditional parameter in template; [#8260] - Build system cannot detect version of oneTBB; [#8148] - Document TMethodCall class limitations; [#7950] - Assertion exception including header file with GaudiPython module; [#7900] - Support spectator variables in RReader; [#7872] - TExecutorCRTP::Map() should support void; [#7871] - Usability of TExecutor::MapReduce; [#7845] - Improve TMatrix reference documentation; [#7805] - Inconsistent and unintuitive behaviour of TFormula::SetParNames and TFormula::SetParameters; [#7774] - Unreasonably slow behaviour of CompileMacro; [#7699] - [VecOps] Make free functions in VecOps better visible; [#7686] - PyROOT Segfault when creating proxy to derived class with multiple overloads; [#7669] - Inconsistent behaviour in wildcard import; [#7644] - Provide in the cmake configuration the C++ standard which was used to compile ROOT; [#7627] - Fix TMVA group links; [#7159] - TNetXNGFile::Open fails with double slash (//) in path; [#7128] - Cannot build ROOT if another ROOT at /usr/local; [#6900] - mathmore: invalid roots for a quartic polynomial; [#6811] - Bug displaying several 3D objects such as TGraph2D on the same canvas; [#6755] - Greek letter epsilon not rendered correctly using TLatex with OpenGL.CanvasPreferGL option, segmentation fault.; [#6753] - CMake dependency on Python: use targets; [#6616] - hadd writes files with unspe",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:42500,Deployability,release,release,42500,"OOT; [ROOT-10593] - Segmentation fault when calling a not-yet-defined function from ROOT interpreter; [ROOT-10607] - Several ROOT 7 tests fail when assertions are enabled; [ROOT-10613] - Configuration does not fail when fail-on-missing is ON and cudnn is not found; [ROOT-10621] - Segfault if TFile is used with TRint in teardown; [ROOT-10705] - The “x” and “x0” options in THnBase::PrintEntries misbehave; [ROOT-10789] - some cppyy examples do not work under ROOT; [ROOT-10827] - Missing contribution of extended term in the error Correction for extended weighted likelihood fits; [ROOT-10859] - std.make_shared[T] does not work on macOS; [ROOT-10866] - Numerical instabilities when calculating the derivatives for the asymptotically correct erros; [ROOT-10958] - jupyter notebook does not render geometries with new pyroot; [ROOT-10977] - Exit code 0 with failing C++ notebook in nbconvert; [ROOT-11006] - [TTreeReader] Crash when reading array branch. Release 6.32.02; Published on June 18, 2024; Items addressed in this release. [#7236] - Memory leak in TFile::WriteObjectAny, depending on data type; [#10075] - Difficult to configure Xrootd to use non-builtin openssl; [#14051] - [web graphics] Web graphics resizes canvas despite canvas size definition in the macro; [#15321] - [MSVC] Root is failed with error G694476FC: static_assert failed “Unexpected size”; [#15405] - [RF] ExternalConstraints documentation incorrect for RooMCStudy; [#15430] - Test failures with Python 3.13; [#15473] - Segmentation fault when building with the mold linker; [#15498] - gPad is not consistent in pyROOT with web canvas; [#15511] - Possible memory corruption in cling; [#15579] - Performance regression (slowdown) in ALICE event generation; [#15686] - JITted code changes the execution order of computation graph nodes; [#15688] - PyROOT TProfile2D::Fill ambiguities preventing use of some signatures in pyROOT; [#15690] - [RF] SegFault in RooBernstein::fillBuffer; [#15694] - [RF] New RooFit EvalBackend re",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:43638,Deployability,integrat,integrating,43638,"0977] - Exit code 0 with failing C++ notebook in nbconvert; [ROOT-11006] - [TTreeReader] Crash when reading array branch. Release 6.32.02; Published on June 18, 2024; Items addressed in this release. [#7236] - Memory leak in TFile::WriteObjectAny, depending on data type; [#10075] - Difficult to configure Xrootd to use non-builtin openssl; [#14051] - [web graphics] Web graphics resizes canvas despite canvas size definition in the macro; [#15321] - [MSVC] Root is failed with error G694476FC: static_assert failed “Unexpected size”; [#15405] - [RF] ExternalConstraints documentation incorrect for RooMCStudy; [#15430] - Test failures with Python 3.13; [#15473] - Segmentation fault when building with the mold linker; [#15498] - gPad is not consistent in pyROOT with web canvas; [#15511] - Possible memory corruption in cling; [#15579] - Performance regression (slowdown) in ALICE event generation; [#15686] - JITted code changes the execution order of computation graph nodes; [#15688] - PyROOT TProfile2D::Fill ambiguities preventing use of some signatures in pyROOT; [#15690] - [RF] SegFault in RooBernstein::fillBuffer; [#15694] - [RF] New RooFit EvalBackend returning incorrect result for binned likelihoods; [#15703] - Leaking memory though strings in PyROOT; [#15727] - Windows CMake project cannot find_library() after integrating with ROOT.; [#15751] - [RF] Using a conditional RooProdPdf in a multi-channel fit spawns too many integrals with new CPU evaluation backend; [#15791] - JS ROOT does not draw tprofile2d correctly with “TEXT” draw option; [#15799] - pyunittests-pyroot-pyz-ttree-setbranchaddress segfaults with Python 3.13; [ROOT-7412] - Strange results looking for nested types; [ROOT-8439] - PyROOT does not treat exceptions properly in overloaded methods; [ROOT-9307] - TPad::GetListOfPrimitives() double deletion error in TList::Clear(). Release 6.32.04; Published on August 14, 2024; Items addressed in this release. [#7223] - [RF] RDataFrame to RooDataSet/RooDataHist conve",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:44244,Deployability,release,release,44244,"- JITted code changes the execution order of computation graph nodes; [#15688] - PyROOT TProfile2D::Fill ambiguities preventing use of some signatures in pyROOT; [#15690] - [RF] SegFault in RooBernstein::fillBuffer; [#15694] - [RF] New RooFit EvalBackend returning incorrect result for binned likelihoods; [#15703] - Leaking memory though strings in PyROOT; [#15727] - Windows CMake project cannot find_library() after integrating with ROOT.; [#15751] - [RF] Using a conditional RooProdPdf in a multi-channel fit spawns too many integrals with new CPU evaluation backend; [#15791] - JS ROOT does not draw tprofile2d correctly with “TEXT” draw option; [#15799] - pyunittests-pyroot-pyz-ttree-setbranchaddress segfaults with Python 3.13; [ROOT-7412] - Strange results looking for nested types; [ROOT-8439] - PyROOT does not treat exceptions properly in overloaded methods; [ROOT-9307] - TPad::GetListOfPrimitives() double deletion error in TList::Clear(). Release 6.32.04; Published on August 14, 2024; Items addressed in this release. [#7223] - [RF] RDataFrame to RooDataSet/RooDataHist conversion; [#7782] - [RF] Allow to set nbins for RooPlot (or disallow); [#9838] - [RF] RooCurve::Average() overestimating average values of standard precision curves on small; [#11565] - [RF] Crash in RooStats::ToyMCSample::GenerateToyData; [#13387] - Please recover SrvAuthenticate from libSrvAuth library; [#14541] - [ROOT-6193] Editor for palette axis cannot set title properties; [#15104] - new PyROOT/cppyy fails to pickle enums; [#15161] - Attribute (getitem) differences for PyROOT objects in ROOT master; [#15234] - cppyy - wrong object type when iterating over a polymorphic container; [#15269] - Iterators in pyROOT working differently in ROOT master compared to 6.30/02; [#15315] - PyROOT Example with inheriting from ROOT.Math.IMultiGenFunction doesn’t work after recent cppyy upgrade; [#15425] - TTreeProcessorMP processes events multiple times when there are more threads than entries; [#15755] - [R",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:45095,Deployability,upgrade,upgrade,45095," Published on August 14, 2024; Items addressed in this release. [#7223] - [RF] RDataFrame to RooDataSet/RooDataHist conversion; [#7782] - [RF] Allow to set nbins for RooPlot (or disallow); [#9838] - [RF] RooCurve::Average() overestimating average values of standard precision curves on small; [#11565] - [RF] Crash in RooStats::ToyMCSample::GenerateToyData; [#13387] - Please recover SrvAuthenticate from libSrvAuth library; [#14541] - [ROOT-6193] Editor for palette axis cannot set title properties; [#15104] - new PyROOT/cppyy fails to pickle enums; [#15161] - Attribute (getitem) differences for PyROOT objects in ROOT master; [#15234] - cppyy - wrong object type when iterating over a polymorphic container; [#15269] - Iterators in pyROOT working differently in ROOT master compared to 6.30/02; [#15315] - PyROOT Example with inheriting from ROOT.Math.IMultiGenFunction doesn’t work after recent cppyy upgrade; [#15425] - TTreeProcessorMP processes events multiple times when there are more threads than entries; [#15755] - [RF][HS3] Higgs discovery workspaces roundtrip; [#15874] - [Hist] Backwards compatibility broken for THnSparseL in 6.32; [#15887] - Broken plot .C macros for default Name() argument in plotOn(); [#15977] - [gui] Event StatusBar does not work well when TMarker outside of zoom region; [#15986] - Problems with TUri compilation; [#16031] - VecOps binary functions not using the right types; [#16038] - Could NOT find Vdt error when using 6.32.02 docker image; [#16087] - [docs] Potential typo in function name case: DistanceToPrimitive; [#16201] - PyROOT Support most recent numba version 0.60.0 intervals; [ROOT-6286] - Reading a TChain and TTreeCache; [ROOT-7991] - THnSparse::ProjectionND yields disfunctional histogram; [ROOT-8238] - TPrincipal tries to make histograms with nbin=0; [ROOT-8519] - Bug when use simple math functions in TTree::SetAlias(). Release 6.32.06; Published on September 22, 2024; Items addressed in this release; This is the first ROOT release sup",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:46147,Deployability,release,release,46147,"::ToyMCSample::GenerateToyData; [#13387] - Please recover SrvAuthenticate from libSrvAuth library; [#14541] - [ROOT-6193] Editor for palette axis cannot set title properties; [#15104] - new PyROOT/cppyy fails to pickle enums; [#15161] - Attribute (getitem) differences for PyROOT objects in ROOT master; [#15234] - cppyy - wrong object type when iterating over a polymorphic container; [#15269] - Iterators in pyROOT working differently in ROOT master compared to 6.30/02; [#15315] - PyROOT Example with inheriting from ROOT.Math.IMultiGenFunction doesn’t work after recent cppyy upgrade; [#15425] - TTreeProcessorMP processes events multiple times when there are more threads than entries; [#15755] - [RF][HS3] Higgs discovery workspaces roundtrip; [#15874] - [Hist] Backwards compatibility broken for THnSparseL in 6.32; [#15887] - Broken plot .C macros for default Name() argument in plotOn(); [#15977] - [gui] Event StatusBar does not work well when TMarker outside of zoom region; [#15986] - Problems with TUri compilation; [#16031] - VecOps binary functions not using the right types; [#16038] - Could NOT find Vdt error when using 6.32.02 docker image; [#16087] - [docs] Potential typo in function name case: DistanceToPrimitive; [#16201] - PyROOT Support most recent numba version 0.60.0 intervals; [ROOT-6286] - Reading a TChain and TTreeCache; [ROOT-7991] - THnSparse::ProjectionND yields disfunctional histogram; [ROOT-8238] - TPrincipal tries to make histograms with nbin=0; [ROOT-8519] - Bug when use simple math functions in TTree::SetAlias(). Release 6.32.06; Published on September 22, 2024; Items addressed in this release; This is the first ROOT release supporting macOS 15 Sequoia. [#15178] - ROOT generates CMake warnings when building from the tarball; [#16219] - Module map on the new XCode version for macos15-beta; [#16249] - Iterating with a range for does one extra iteration; [ROOT-10902] - SMatrix read from TTree contains all zeroes. HEAD of the v6-32-00-patches branch. ",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:46179,Deployability,release,release,46179,"::ToyMCSample::GenerateToyData; [#13387] - Please recover SrvAuthenticate from libSrvAuth library; [#14541] - [ROOT-6193] Editor for palette axis cannot set title properties; [#15104] - new PyROOT/cppyy fails to pickle enums; [#15161] - Attribute (getitem) differences for PyROOT objects in ROOT master; [#15234] - cppyy - wrong object type when iterating over a polymorphic container; [#15269] - Iterators in pyROOT working differently in ROOT master compared to 6.30/02; [#15315] - PyROOT Example with inheriting from ROOT.Math.IMultiGenFunction doesn’t work after recent cppyy upgrade; [#15425] - TTreeProcessorMP processes events multiple times when there are more threads than entries; [#15755] - [RF][HS3] Higgs discovery workspaces roundtrip; [#15874] - [Hist] Backwards compatibility broken for THnSparseL in 6.32; [#15887] - Broken plot .C macros for default Name() argument in plotOn(); [#15977] - [gui] Event StatusBar does not work well when TMarker outside of zoom region; [#15986] - Problems with TUri compilation; [#16031] - VecOps binary functions not using the right types; [#16038] - Could NOT find Vdt error when using 6.32.02 docker image; [#16087] - [docs] Potential typo in function name case: DistanceToPrimitive; [#16201] - PyROOT Support most recent numba version 0.60.0 intervals; [ROOT-6286] - Reading a TChain and TTreeCache; [ROOT-7991] - THnSparse::ProjectionND yields disfunctional histogram; [ROOT-8238] - TPrincipal tries to make histograms with nbin=0; [ROOT-8519] - Bug when use simple math functions in TTree::SetAlias(). Release 6.32.06; Published on September 22, 2024; Items addressed in this release; This is the first ROOT release supporting macOS 15 Sequoia. [#15178] - ROOT generates CMake warnings when building from the tarball; [#16219] - Module map on the new XCode version for macos15-beta; [#16249] - Iterating with a range for does one extra iteration; [ROOT-10902] - SMatrix read from TTree contains all zeroes. HEAD of the v6-32-00-patches branch. ",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:46499,Deployability,patch,patches,46499,"::ToyMCSample::GenerateToyData; [#13387] - Please recover SrvAuthenticate from libSrvAuth library; [#14541] - [ROOT-6193] Editor for palette axis cannot set title properties; [#15104] - new PyROOT/cppyy fails to pickle enums; [#15161] - Attribute (getitem) differences for PyROOT objects in ROOT master; [#15234] - cppyy - wrong object type when iterating over a polymorphic container; [#15269] - Iterators in pyROOT working differently in ROOT master compared to 6.30/02; [#15315] - PyROOT Example with inheriting from ROOT.Math.IMultiGenFunction doesn’t work after recent cppyy upgrade; [#15425] - TTreeProcessorMP processes events multiple times when there are more threads than entries; [#15755] - [RF][HS3] Higgs discovery workspaces roundtrip; [#15874] - [Hist] Backwards compatibility broken for THnSparseL in 6.32; [#15887] - Broken plot .C macros for default Name() argument in plotOn(); [#15977] - [gui] Event StatusBar does not work well when TMarker outside of zoom region; [#15986] - Problems with TUri compilation; [#16031] - VecOps binary functions not using the right types; [#16038] - Could NOT find Vdt error when using 6.32.02 docker image; [#16087] - [docs] Potential typo in function name case: DistanceToPrimitive; [#16201] - PyROOT Support most recent numba version 0.60.0 intervals; [ROOT-6286] - Reading a TChain and TTreeCache; [ROOT-7991] - THnSparse::ProjectionND yields disfunctional histogram; [ROOT-8238] - TPrincipal tries to make histograms with nbin=0; [ROOT-8519] - Bug when use simple math functions in TTree::SetAlias(). Release 6.32.06; Published on September 22, 2024; Items addressed in this release; This is the first ROOT release supporting macOS 15 Sequoia. [#15178] - ROOT generates CMake warnings when building from the tarball; [#16219] - Module map on the new XCode version for macos15-beta; [#16249] - Iterating with a range for does one extra iteration; [ROOT-10902] - SMatrix read from TTree contains all zeroes. HEAD of the v6-32-00-patches branch. ",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:7179,Energy Efficiency,allocate,allocated,7179," 754-2008 16-bit) float fields. This can be enabled through RField<float>::SetHalfPrecision(). On reading, values of such fields are represented as regular, 32-bit floats.; A new RNTupleInspector utility class has been added, to provide information about the on-disk metadata of an RNTuple.; A new RNTupleParallelWriter class has been added, providing (initial) support for parallel writing of RNTuples.; A new static method RFieldBase::Check() has been added, which produces a support status report of a type with regards to RNTuple I/O.; A new internal RNTupleMerger class has been added, enabling the merging of different page sources into one page sink. This also means that RNTuples can be merged through hadd.; Zero-copy bulk reading has been added, with extra optimizations for ROOT::RVec fields.; It is now possible to use the RNTupleView with an external address with type erasure, e.g.:; std::shared_ptr<void> data{new float()};; auto view = reader->GetView(""pt"", data);; This enables use cases such as reading one specific entry of one specific field into a previously allocated memory location.; Further integration with RDataFrame: it is now possible to create RDataFrame for chains of RNTuples. This addition also comes with improvements to the multi-threaded work scheduling.; Many additional bug fixes and improvements. Please, report any issues regarding the above mentioned features should you encounter them. RNTuple is still in pre-production. The on-disk format is scheduled to be finalized by the end of 2024. Thus, we appreciate feedback and suggestions for improvement.; Histogram Libraries. Implement the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum().; Print a warning when the range given to TAxis::SetRange is invalid.; Fix projection name in TH3 as requested here. Parallelism. The ROOT::Experimental::TFuture template has been removed. RooFit Libraries; New CPU likelihood evaluation backend by default; The new vectorizing CPU evaluation backend ",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:7378,Energy Efficiency,schedul,scheduling,7378,"about the on-disk metadata of an RNTuple.; A new RNTupleParallelWriter class has been added, providing (initial) support for parallel writing of RNTuples.; A new static method RFieldBase::Check() has been added, which produces a support status report of a type with regards to RNTuple I/O.; A new internal RNTupleMerger class has been added, enabling the merging of different page sources into one page sink. This also means that RNTuples can be merged through hadd.; Zero-copy bulk reading has been added, with extra optimizations for ROOT::RVec fields.; It is now possible to use the RNTupleView with an external address with type erasure, e.g.:; std::shared_ptr<void> data{new float()};; auto view = reader->GetView(""pt"", data);; This enables use cases such as reading one specific entry of one specific field into a previously allocated memory location.; Further integration with RDataFrame: it is now possible to create RDataFrame for chains of RNTuples. This addition also comes with improvements to the multi-threaded work scheduling.; Many additional bug fixes and improvements. Please, report any issues regarding the above mentioned features should you encounter them. RNTuple is still in pre-production. The on-disk format is scheduled to be finalized by the end of 2024. Thus, we appreciate feedback and suggestions for improvement.; Histogram Libraries. Implement the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum().; Print a warning when the range given to TAxis::SetRange is invalid.; Fix projection name in TH3 as requested here. Parallelism. The ROOT::Experimental::TFuture template has been removed. RooFit Libraries; New CPU likelihood evaluation backend by default; The new vectorizing CPU evaluation backend is not the default for RooFit likelihoods. Likelihood minimization is now up to 10x faster on a single CPU core.; If you experience unexpected problems related to the likelihood evaluation, you can revert back to the old backend by passing RooFit::",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:7585,Energy Efficiency,schedul,scheduled,7585,"rt of a type with regards to RNTuple I/O.; A new internal RNTupleMerger class has been added, enabling the merging of different page sources into one page sink. This also means that RNTuples can be merged through hadd.; Zero-copy bulk reading has been added, with extra optimizations for ROOT::RVec fields.; It is now possible to use the RNTupleView with an external address with type erasure, e.g.:; std::shared_ptr<void> data{new float()};; auto view = reader->GetView(""pt"", data);; This enables use cases such as reading one specific entry of one specific field into a previously allocated memory location.; Further integration with RDataFrame: it is now possible to create RDataFrame for chains of RNTuples. This addition also comes with improvements to the multi-threaded work scheduling.; Many additional bug fixes and improvements. Please, report any issues regarding the above mentioned features should you encounter them. RNTuple is still in pre-production. The on-disk format is scheduled to be finalized by the end of 2024. Thus, we appreciate feedback and suggestions for improvement.; Histogram Libraries. Implement the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum().; Print a warning when the range given to TAxis::SetRange is invalid.; Fix projection name in TH3 as requested here. Parallelism. The ROOT::Experimental::TFuture template has been removed. RooFit Libraries; New CPU likelihood evaluation backend by default; The new vectorizing CPU evaluation backend is not the default for RooFit likelihoods. Likelihood minimization is now up to 10x faster on a single CPU core.; If you experience unexpected problems related to the likelihood evaluation, you can revert back to the old backend by passing RooFit::EvalBackend(""legacy"") to RooAbsPdf::fitTo() or RooAbsPdf::createNLL().; In case you observe any slowdowns with the new likelihood evaluation, please open a GitHub issue about this, as such a performance regression is considered a bug.; Asymptotical",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:14328,Energy Efficiency,adapt,adapt,14328,"nd the headers will be removed in ROOT 6.34:. RooAbsTestStatistic; RooAbsOptTestStatistic; RooNLLVar; RooChi2Var; RooXYChi2Var. Please use the higher-level functions RooAbsPdf::createNLL() and RooAbsPdf::createChi2() if you want to create objects that represent test statistics.; Change of RooParamHistFunc; The RooParamHistFunc didn’t take any observable RooRealVar as constructor argument. It assumes as observable the internal variables in the passed RooDataHist. This means it was in most contexts unusable, because the input can’t be changed, other than loading a different bin in the dataset.; Furthermore, there was actually a constructor that took a RooAbsArg x, but it was simply ignored.; To fix all these problems, the existing constructors were replaced by a new one that takes the observable explicitly.; Since the old constructors resulted in wrong computation graphs that caused trouble with the new CPU evaluation backend, they had to be removed without deprecation. Please adapt your code if necessary.; Renaming of some RooFit classes; The RooPower was renamed to RooPowerSum, and RooExpPoly was renamed to RooLegacyExpPoly.; This was a necessary change, because the names of these classes introduced in ROOT 6.28 collided with some classes in CMS combine, which were around already long before. Therefore, the classes had to be renamed to not cause any problems for CMS.; In the unlikeliy case where you should have used these new classes for analysis already, please adapt your code to the new names and re-create your workspaces.; RDataFrame. The RDataFrame constructors that take in input one or more file names (or globs thereof) will now infer the format of the dataset, either TTree or RNTuple, that is stored in the first input file. When multiple files are specified, it is assumed that all other files contain a coherent dataset of the same format and with the same schema, exactly as it used to happen with TChain. This automatic inference further contributes towards a ze",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:14825,Energy Efficiency,adapt,adapt,14825,"is means it was in most contexts unusable, because the input can’t be changed, other than loading a different bin in the dataset.; Furthermore, there was actually a constructor that took a RooAbsArg x, but it was simply ignored.; To fix all these problems, the existing constructors were replaced by a new one that takes the observable explicitly.; Since the old constructors resulted in wrong computation graphs that caused trouble with the new CPU evaluation backend, they had to be removed without deprecation. Please adapt your code if necessary.; Renaming of some RooFit classes; The RooPower was renamed to RooPowerSum, and RooExpPoly was renamed to RooLegacyExpPoly.; This was a necessary change, because the names of these classes introduced in ROOT 6.28 collided with some classes in CMS combine, which were around already long before. Therefore, the classes had to be renamed to not cause any problems for CMS.; In the unlikeliy case where you should have used these new classes for analysis already, please adapt your code to the new names and re-create your workspaces.; RDataFrame. The RDataFrame constructors that take in input one or more file names (or globs thereof) will now infer the format of the dataset, either TTree or RNTuple, that is stored in the first input file. When multiple files are specified, it is assumed that all other files contain a coherent dataset of the same format and with the same schema, exactly as it used to happen with TChain. This automatic inference further contributes towards a zero-code-change experience when moving from processing a TTree to processing an RNTuple dataset while using an RDataFrame. It also introduces a backwards-incompatible behaviour, i.e. now the constructor needs to open one file in order to infer the dataset type. This means that if the file does not exist, the constructor will throw an exception. Previously, an exception would be thrown only at a JIT-ting time, before the start of the computations.; Distributed RDataF",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:32060,Energy Efficiency,consumption,consumption,32060, fonts; [#14032] - TPaveText has problems when label is set; [#14030] - Allow zero-copy RNTuple bulk reading; [#13965] - [Cling] Assertion fails with wrong but innocent code; [#13962] - THnSparse::Scale() unsparsifies; [#13877] - [ntuple] Segfault when processing recursive classes; [#13865] - [FreeBSD] cling cmake error; [#13861] - Remove all traces of Python2 from the ROOT codebase in preparation for 6.32/00; [#13851] - Test crash with GCC 13 and C++20; [#13834] - Can’t open TBrowser locally after upgrading macos “Apple M2 14.0 (23A344)”; [#13825] - builtin libpng too old; [#13815] - Cling (rightfully) confused about forward-declared template specializations; [#13697] - Unexpected behaviour of KSTest with toys (“X” option) for identical histograms; [#13659] - rootprint/rootls missing recursive traversal; [#13623] - Add directory wildcarding in TChain; [#13531] - Huge RAM consumption of the hadd command for input files with several directories; [#13511] - TMapFile can’t work; [#13497] - Assertion failure in TMVA with vector iterators incompatible error on Windows; [#13441] - error in root-generated code for cubic spline (TSpline3); [#13421] - [MSVC] ROOT builds under msvc option /permissive- with error C4576; [#13359] - Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; [#13288] - [cling] long double type incorrectly parsed by interpreter; [#13155] - TMVA doesn’t compile with pytorch 2.0.1; [#13130] - Valgrind reports leak when constructing TChain; [#13110] - Bug in TDecompBase::DiagProd; [#13079] - Builtin TBB library sometimes not found (or more exactly the one install in /usr/lib sometimes take priority); [#13041] - TVirtualFitter::GetFitter() unexpectedly returns NULL on macOS 12 and 13 with Xcode 14; [#13019] - LLVM assertion failure in HandleUnionActiveMemberChange; [#12993] - std::source_location not working in the interpreter; [#12959] - [ntuple] Distinguish between connecting a page sink and a page s,MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:41177,Energy Efficiency,schedul,scheduling,41177,"00] - Support rvalue-reference parameters in PyROOT; [ROOT-8801] - Support variadic template arguments of methods and functions in PyROOT; [ROOT-8919] - Eigenvalues delivered in wrong format; [ROOT-9000] - TSpline3; [ROOT-9076] - Missing symbol after syntax error; [ROOT-9083] - ROOT crashes on usage of undeclared identifier; [ROOT-9088] - Variable destruction issue when macro executed line by line.; [ROOT-9159] - Function pointers not supported in PyROOT; [ROOT-9181] - Crash value-printing the std::vector read from a TTreeReaderArray from root prompt; [ROOT-9261] - TMatrixTSparse fails to transpose non-square matrices; [ROOT-9284] - BUG (See description note) PyDoubleBuffer tolist and numpy array cause segfault.; [ROOT-9313] - Crash in TFile::Close on Fedora, ROOT v6.10; [ROOT-9320] - Make GenVector data structures constexpr; [ROOT-9321] - Dictionary generation: type normalization issue in pcm file; [ROOT-9448] - libNew returns nullptr instead of implementing operator new, has many warnings; [ROOT-9983] - [DOC] hadd –help does not show description and epilogue; [ROOT-10033] - ROOT::EnableImplicitMT: Number of threads in scheduling environments; [ROOT-10231] - TMatrixD(a,TMatrixD::kInvMult,b) requires b.GetNcols() = a.GetNcols(); [ROOT-10320] - ROOT/meta does not support anonymous unions/structs; [ROOT-10425] - Missing symbols not reported as missing anymore; [ROOT-10546] - RDataFrame cannot be interrupted from PyROOT; [ROOT-10593] - Segmentation fault when calling a not-yet-defined function from ROOT interpreter; [ROOT-10607] - Several ROOT 7 tests fail when assertions are enabled; [ROOT-10613] - Configuration does not fail when fail-on-missing is ON and cudnn is not found; [ROOT-10621] - Segfault if TFile is used with TRint in teardown; [ROOT-10705] - The “x” and “x0” options in THnBase::PrintEntries misbehave; [ROOT-10789] - some cppyy examples do not work under ROOT; [ROOT-10827] - Missing contribution of extended term in the error Correction for extended weighte",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:533,Integrability,interface,interfaces,533,". ROOT Version 6.32 Release Notes. ROOT Version 6.32 Release Notes; 2024-05-26. Introduction; Deprecation and Removal; Core Libraries; I/O Libraries; hadd respects compression settings. TTree Libraries; Add files from subdirectories with TChain::Add globbing; Improved efficiency of TTree friends with indices. RNTuple; Histogram Libraries; Parallelism; RooFit Libraries; New CPU likelihood evaluation backend by default; Asymptotically correct uncertainties for extended unbinned likelihood fits; Compile your code with memory safe interfaces; Removal of some memory-unsafe interfaces; Deprecation of legacy iterators; Deprecation of legacy test statistics classes in public interface; Change of RooParamHistFunc; Renaming of some RooFit classes. RDataFrame; Graphics backends; 2D Graphics Libraries; 3D Graphics Libraries; REve. PROOF Libraries; PyROOT; Different representation of std::string; No more implicit conversion of static size char buffer to Python strings; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; Removal of Python 2 support; More usage of the public cppyy API. Class Reference Guide; Build, Configuration and Testing Infrastructure; Bugs and Issues fixed in this release; Release 6.32.02; Items addressed in this release. Release 6.32.04; Items addressed in this release. Release 6.32.06; Items addressed in this release. HEAD of the v6-32-00-patches branch. Introduction; ROOT version 6.32.00 was released on 28 May 2024. This release is a long term support one, ideal for inclusion in production or data taking software stacks of experiments.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Anton Alkin, Sungkyunkwan University; Guilherme Amadio, CERN/IT,; Abhigyan Acherjee, University of Cincinnati,; Bertrand Bellenot, CERN/EP-SFT,; Jakob Blomer, CERN/EP-SFT,; Rene Brun,; Carsten Burgard, DESY; Will Buttinger, RAL,; Philippe Canal, FNAL,; Jolly Chen, CERN/EP-SFT,; Olivier Co",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:575,Integrability,interface,interfaces,575,". ROOT Version 6.32 Release Notes. ROOT Version 6.32 Release Notes; 2024-05-26. Introduction; Deprecation and Removal; Core Libraries; I/O Libraries; hadd respects compression settings. TTree Libraries; Add files from subdirectories with TChain::Add globbing; Improved efficiency of TTree friends with indices. RNTuple; Histogram Libraries; Parallelism; RooFit Libraries; New CPU likelihood evaluation backend by default; Asymptotically correct uncertainties for extended unbinned likelihood fits; Compile your code with memory safe interfaces; Removal of some memory-unsafe interfaces; Deprecation of legacy iterators; Deprecation of legacy test statistics classes in public interface; Change of RooParamHistFunc; Renaming of some RooFit classes. RDataFrame; Graphics backends; 2D Graphics Libraries; 3D Graphics Libraries; REve. PROOF Libraries; PyROOT; Different representation of std::string; No more implicit conversion of static size char buffer to Python strings; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; Removal of Python 2 support; More usage of the public cppyy API. Class Reference Guide; Build, Configuration and Testing Infrastructure; Bugs and Issues fixed in this release; Release 6.32.02; Items addressed in this release. Release 6.32.04; Items addressed in this release. Release 6.32.06; Items addressed in this release. HEAD of the v6-32-00-patches branch. Introduction; ROOT version 6.32.00 was released on 28 May 2024. This release is a long term support one, ideal for inclusion in production or data taking software stacks of experiments.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Anton Alkin, Sungkyunkwan University; Guilherme Amadio, CERN/IT,; Abhigyan Acherjee, University of Cincinnati,; Bertrand Bellenot, CERN/EP-SFT,; Jakob Blomer, CERN/EP-SFT,; Rene Brun,; Carsten Burgard, DESY; Will Buttinger, RAL,; Philippe Canal, FNAL,; Jolly Chen, CERN/EP-SFT,; Olivier Co",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:676,Integrability,interface,interface,676,". ROOT Version 6.32 Release Notes. ROOT Version 6.32 Release Notes; 2024-05-26. Introduction; Deprecation and Removal; Core Libraries; I/O Libraries; hadd respects compression settings. TTree Libraries; Add files from subdirectories with TChain::Add globbing; Improved efficiency of TTree friends with indices. RNTuple; Histogram Libraries; Parallelism; RooFit Libraries; New CPU likelihood evaluation backend by default; Asymptotically correct uncertainties for extended unbinned likelihood fits; Compile your code with memory safe interfaces; Removal of some memory-unsafe interfaces; Deprecation of legacy iterators; Deprecation of legacy test statistics classes in public interface; Change of RooParamHistFunc; Renaming of some RooFit classes. RDataFrame; Graphics backends; 2D Graphics Libraries; 3D Graphics Libraries; REve. PROOF Libraries; PyROOT; Different representation of std::string; No more implicit conversion of static size char buffer to Python strings; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; Removal of Python 2 support; More usage of the public cppyy API. Class Reference Guide; Build, Configuration and Testing Infrastructure; Bugs and Issues fixed in this release; Release 6.32.02; Items addressed in this release. Release 6.32.04; Items addressed in this release. Release 6.32.06; Items addressed in this release. HEAD of the v6-32-00-patches branch. Introduction; ROOT version 6.32.00 was released on 28 May 2024. This release is a long term support one, ideal for inclusion in production or data taking software stacks of experiments.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Anton Alkin, Sungkyunkwan University; Guilherme Amadio, CERN/IT,; Abhigyan Acherjee, University of Cincinnati,; Bertrand Bellenot, CERN/EP-SFT,; Jakob Blomer, CERN/EP-SFT,; Rene Brun,; Carsten Burgard, DESY; Will Buttinger, RAL,; Philippe Canal, FNAL,; Jolly Chen, CERN/EP-SFT,; Olivier Co",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:3574,Integrability,interface,interfaces,3574,"adlener, DESY,; Lorenzo Moneta, CERN/EP-SFT,; Alja Mrak Tadel, UCSD/CMS,; Axel Naumann, CERN/EP-SFT,; Dante Niewenhuis, VU Amsterdam; Luis Antonio Obis Aparicio, University of Zaragoza, Ianna Osborne, Princeton University,; Vincenzo Eduardo Padulano, CERN/EP-SFT,; Danilo Piparo, CERN/EP-SFT,; Fons Rademakers, CERN/IT,; Jonas Rembser, CERN/EP-SFT,; Andrea Rizzi, University of Pisa,; Andre Sailer, CERN/EP-SFT,; Garima Singh, ETH,; Juraj Smiesko, CERN/RCS-PRJ-FC, Pavlo Svirin, National Technical University of Ukraine,; Maciej Szymanski, Argonne,; Christian Tacke, Darmstadt University,; Matevz Tadel, UCSD/CMS,; Alvaro Tolosa Delgado, CERN/RCS-PRJ-FC,; Devajith Valaparambil Sreeramaswamy, CERN/EP-SFT,; Peter Van Gemmeren, Argonne,; Vassil Vassilev, Princeton/CMS,; Wouter Verkerke, NIKHEF/ATLAS, Stefan Wunsch; Deprecation and Removal. The RooFit legacy iterators are deprecated and will be removed in ROOT 6.34 (see section “RooFit libraries”); Some memory-unsafe RooFit interfaces were removed; Some redundant RooDataSet constructors are deprecated and will be removed in ROOT 6.34. Please use the RooDataSet constructors that take RooFit command arguments instead; ROOT does not longer support Python 2. The minimum required Python version to build ROOT is 3.8.; Support for wildcard imports like from ROOT import * is dropped from PyROOT; Support for external (ie. non-builtin) libAfterImage is now deprecated and it will be removed in next release 6.34.; The TList::TList(TObject*) constructor is deprecated and will be removed in ROOT 6.34; The deprecated TProofOutputList::TProofOutputList(TObject *o) constructor was removed. Core Libraries; The Cling interpreter now relies on LLVM version 16.; I/O Libraries; hadd respects compression settings; Fixed a bug that was previously changing the compression settings to a single digit number instead of the full value (by default 101).; TTree Libraries; Add files from subdirectories with TChain::Add globbing; It is now possible to add file",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:5639,Integrability,interface,interface,5639,"TChain::Add(""/path/to/tree/*/*.root""); grabs all the root files with the path /path/to/tree/somedir/file.root (but not /path/to/tree/file.root and /path/to/tree/somedir/anotherdir/file.root).; Another example:; TChain::Add(""/path/to/tree/subdir[0-9]/*.root""); This grabs all the root files in subdirectories that have a name starting with subdir and ending with some digit.; Improved efficiency of TTree friends with indices; TTreeIndex and TChainIndex classes now implement the Clone method such that it does not use the ROOT I/O to clone the index but just does a copy in memory. Notably, this improves processing efficiency for RDataFrame in multithreaded execution since the same index must be copied over to all the threads and attached to the current tree for proper event matching.; RNTuple; ROOT’s experimental successor of TTree has seen a number of updates since the last release. Specifically, 6.32 includes the following changes:. A major refactoring of the interface, improving consistency across different parts and improving overall robustness. Note that this is a breaking change with regard to 6.30!; The on-disk format has been updated to release candidate 2. It will not be possible to read RNTuples written in the previous format anymore.; Support has been added for several new field types: std::unordered_set<T>, std::map<K,V>, std::unordered_map<K,V>; Support has been added for on-disk half-precision (IEEE 754-2008 16-bit) float fields. This can be enabled through RField<float>::SetHalfPrecision(). On reading, values of such fields are represented as regular, 32-bit floats.; A new RNTupleInspector utility class has been added, to provide information about the on-disk metadata of an RNTuple.; A new RNTupleParallelWriter class has been added, providing (initial) support for parallel writing of RNTuples.; A new static method RFieldBase::Check() has been added, which produces a support status report of a type with regards to RNTuple I/O.; A new internal RNTupleMerger cl",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:7215,Integrability,integrat,integration,7215,"32-bit floats.; A new RNTupleInspector utility class has been added, to provide information about the on-disk metadata of an RNTuple.; A new RNTupleParallelWriter class has been added, providing (initial) support for parallel writing of RNTuples.; A new static method RFieldBase::Check() has been added, which produces a support status report of a type with regards to RNTuple I/O.; A new internal RNTupleMerger class has been added, enabling the merging of different page sources into one page sink. This also means that RNTuples can be merged through hadd.; Zero-copy bulk reading has been added, with extra optimizations for ROOT::RVec fields.; It is now possible to use the RNTupleView with an external address with type erasure, e.g.:; std::shared_ptr<void> data{new float()};; auto view = reader->GetView(""pt"", data);; This enables use cases such as reading one specific entry of one specific field into a previously allocated memory location.; Further integration with RDataFrame: it is now possible to create RDataFrame for chains of RNTuples. This addition also comes with improvements to the multi-threaded work scheduling.; Many additional bug fixes and improvements. Please, report any issues regarding the above mentioned features should you encounter them. RNTuple is still in pre-production. The on-disk format is scheduled to be finalized by the end of 2024. Thus, we appreciate feedback and suggestions for improvement.; Histogram Libraries. Implement the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum().; Print a warning when the range given to TAxis::SetRange is invalid.; Fix projection name in TH3 as requested here. Parallelism. The ROOT::Experimental::TFuture template has been removed. RooFit Libraries; New CPU likelihood evaluation backend by default; The new vectorizing CPU evaluation backend is not the default for RooFit likelihoods. Likelihood minimization is now up to 10x faster on a single CPU core.; If you experience unexpected problems rela",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:9196,Integrability,interface,interfaces,9196,"lated to the likelihood evaluation, you can revert back to the old backend by passing RooFit::EvalBackend(""legacy"") to RooAbsPdf::fitTo() or RooAbsPdf::createNLL().; In case you observe any slowdowns with the new likelihood evaluation, please open a GitHub issue about this, as such a performance regression is considered a bug.; Asymptotically correct uncertainties for extended unbinned likelihood fits; Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method when using the RooFit::AsymptoticError() command argument in RooAbsPdf::fitTo(). See also this writeup on extended weighted fits that is also linked from the reference guide. The pull request that introduced this feature might also be a good reference.; Compile your code with memory safe interfaces; If you define the ROOFIT_MEMORY_SAFE_INTERFACES preprocessor macro, the RooFit interface changes in a way such that memory leaks are avoided.; The most prominent effect of this change is that many functions that used to return an owning pointer (e.g., a pointer to an object that you need to manually delete) are then returning a std::unique_pt for automatic memory management.; For example this code would not compile anymore, because there is the risk that the caller forgets to delete params:; RooArgSet * params = pdf.getParameters(nullptr);; If you wrap such return values in a std::unique_ptr, then your code will compile both with and without memory safe interfaces:; std::unique_ptr<RooArgSet> params{pdf.getParameters(nullptr)};; Also some virtual RooFit functions like RooAbsReal::createIntegral() are returning a different type conditional on ROOFIT_MEMORY_SAFE_INTERFACES. If you are overriding such a function, you need to use the RooFit::OwningPtr return type, which is an alias for std::unique_ptr in memory-safe mode or an alias f",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:9287,Integrability,interface,interface,9287,"lated to the likelihood evaluation, you can revert back to the old backend by passing RooFit::EvalBackend(""legacy"") to RooAbsPdf::fitTo() or RooAbsPdf::createNLL().; In case you observe any slowdowns with the new likelihood evaluation, please open a GitHub issue about this, as such a performance regression is considered a bug.; Asymptotically correct uncertainties for extended unbinned likelihood fits; Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method when using the RooFit::AsymptoticError() command argument in RooAbsPdf::fitTo(). See also this writeup on extended weighted fits that is also linked from the reference guide. The pull request that introduced this feature might also be a good reference.; Compile your code with memory safe interfaces; If you define the ROOFIT_MEMORY_SAFE_INTERFACES preprocessor macro, the RooFit interface changes in a way such that memory leaks are avoided.; The most prominent effect of this change is that many functions that used to return an owning pointer (e.g., a pointer to an object that you need to manually delete) are then returning a std::unique_pt for automatic memory management.; For example this code would not compile anymore, because there is the risk that the caller forgets to delete params:; RooArgSet * params = pdf.getParameters(nullptr);; If you wrap such return values in a std::unique_ptr, then your code will compile both with and without memory safe interfaces:; std::unique_ptr<RooArgSet> params{pdf.getParameters(nullptr)};; Also some virtual RooFit functions like RooAbsReal::createIntegral() are returning a different type conditional on ROOFIT_MEMORY_SAFE_INTERFACES. If you are overriding such a function, you need to use the RooFit::OwningPtr return type, which is an alias for std::unique_ptr in memory-safe mode or an alias f",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:9762,Integrability,wrap,wrap,9762,"xtended unbinned maximum likelihood fits to use the asymptotically correct method when using the RooFit::AsymptoticError() command argument in RooAbsPdf::fitTo(). See also this writeup on extended weighted fits that is also linked from the reference guide. The pull request that introduced this feature might also be a good reference.; Compile your code with memory safe interfaces; If you define the ROOFIT_MEMORY_SAFE_INTERFACES preprocessor macro, the RooFit interface changes in a way such that memory leaks are avoided.; The most prominent effect of this change is that many functions that used to return an owning pointer (e.g., a pointer to an object that you need to manually delete) are then returning a std::unique_pt for automatic memory management.; For example this code would not compile anymore, because there is the risk that the caller forgets to delete params:; RooArgSet * params = pdf.getParameters(nullptr);; If you wrap such return values in a std::unique_ptr, then your code will compile both with and without memory safe interfaces:; std::unique_ptr<RooArgSet> params{pdf.getParameters(nullptr)};; Also some virtual RooFit functions like RooAbsReal::createIntegral() are returning a different type conditional on ROOFIT_MEMORY_SAFE_INTERFACES. If you are overriding such a function, you need to use the RooFit::OwningPtr return type, which is an alias for std::unique_ptr in memory-safe mode or an alias for a raw pointer otherwise.; RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(...) const override; {; std::unique_ptr<RooAbsReal> integral;; // Prepare a std::unique_ptr as the return value; ...; // Use the RooFit::makeOwningPtr<T>() helper to translate the; // std::unique_ptr to the actual return type (either std::unique_ptr<T> or T*).; return RooFit::makeOwningPtr<RooAbsReal>(std::move(integral));; }; The biggest application of the memory-safe interfaces is to spot memory leaks in RooFit-based frameworks. If you make sure that your framework compiles both ",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:9870,Integrability,interface,interfaces,9870,"xtended unbinned maximum likelihood fits to use the asymptotically correct method when using the RooFit::AsymptoticError() command argument in RooAbsPdf::fitTo(). See also this writeup on extended weighted fits that is also linked from the reference guide. The pull request that introduced this feature might also be a good reference.; Compile your code with memory safe interfaces; If you define the ROOFIT_MEMORY_SAFE_INTERFACES preprocessor macro, the RooFit interface changes in a way such that memory leaks are avoided.; The most prominent effect of this change is that many functions that used to return an owning pointer (e.g., a pointer to an object that you need to manually delete) are then returning a std::unique_pt for automatic memory management.; For example this code would not compile anymore, because there is the risk that the caller forgets to delete params:; RooArgSet * params = pdf.getParameters(nullptr);; If you wrap such return values in a std::unique_ptr, then your code will compile both with and without memory safe interfaces:; std::unique_ptr<RooArgSet> params{pdf.getParameters(nullptr)};; Also some virtual RooFit functions like RooAbsReal::createIntegral() are returning a different type conditional on ROOFIT_MEMORY_SAFE_INTERFACES. If you are overriding such a function, you need to use the RooFit::OwningPtr return type, which is an alias for std::unique_ptr in memory-safe mode or an alias for a raw pointer otherwise.; RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(...) const override; {; std::unique_ptr<RooAbsReal> integral;; // Prepare a std::unique_ptr as the return value; ...; // Use the RooFit::makeOwningPtr<T>() helper to translate the; // std::unique_ptr to the actual return type (either std::unique_ptr<T> or T*).; return RooFit::makeOwningPtr<RooAbsReal>(std::move(integral));; }; The biggest application of the memory-safe interfaces is to spot memory leaks in RooFit-based frameworks. If you make sure that your framework compiles both ",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:10712,Integrability,interface,interfaces,10712,"o delete params:; RooArgSet * params = pdf.getParameters(nullptr);; If you wrap such return values in a std::unique_ptr, then your code will compile both with and without memory safe interfaces:; std::unique_ptr<RooArgSet> params{pdf.getParameters(nullptr)};; Also some virtual RooFit functions like RooAbsReal::createIntegral() are returning a different type conditional on ROOFIT_MEMORY_SAFE_INTERFACES. If you are overriding such a function, you need to use the RooFit::OwningPtr return type, which is an alias for std::unique_ptr in memory-safe mode or an alias for a raw pointer otherwise.; RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(...) const override; {; std::unique_ptr<RooAbsReal> integral;; // Prepare a std::unique_ptr as the return value; ...; // Use the RooFit::makeOwningPtr<T>() helper to translate the; // std::unique_ptr to the actual return type (either std::unique_ptr<T> or T*).; return RooFit::makeOwningPtr<RooAbsReal>(std::move(integral));; }; The biggest application of the memory-safe interfaces is to spot memory leaks in RooFit-based frameworks. If you make sure that your framework compiles both with and without ROOFIT_MEMORY_SAFE_INTERFACES, you can get rid of all memory leaks related to RooFit user error! After making the necessary changes, you can remove the marco definition again to keep backwards compatibility.; Note that the memory-safe interfaces might become the default at some point, so doing this backwards-compatible migration early is strongly encouraged and appreciated.; Removal of some memory-unsafe interfaces. The final bool takeOwnership parameter of the RooAddition and RooStats::HistFactory::PiecewiseInterpolation constructors was removed. This is to avoid situations where ownership is not clear to the compiler. Now, ownership of the input RooAbsArgs is never passed in the constructor. If you want the pass input ownership to the created object, please use addOwnedComponents. If you want to be extra safe, make sure the inputs",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:11078,Integrability,interface,interfaces,11078,"u need to use the RooFit::OwningPtr return type, which is an alias for std::unique_ptr in memory-safe mode or an alias for a raw pointer otherwise.; RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(...) const override; {; std::unique_ptr<RooAbsReal> integral;; // Prepare a std::unique_ptr as the return value; ...; // Use the RooFit::makeOwningPtr<T>() helper to translate the; // std::unique_ptr to the actual return type (either std::unique_ptr<T> or T*).; return RooFit::makeOwningPtr<RooAbsReal>(std::move(integral));; }; The biggest application of the memory-safe interfaces is to spot memory leaks in RooFit-based frameworks. If you make sure that your framework compiles both with and without ROOFIT_MEMORY_SAFE_INTERFACES, you can get rid of all memory leaks related to RooFit user error! After making the necessary changes, you can remove the marco definition again to keep backwards compatibility.; Note that the memory-safe interfaces might become the default at some point, so doing this backwards-compatible migration early is strongly encouraged and appreciated.; Removal of some memory-unsafe interfaces. The final bool takeOwnership parameter of the RooAddition and RooStats::HistFactory::PiecewiseInterpolation constructors was removed. This is to avoid situations where ownership is not clear to the compiler. Now, ownership of the input RooAbsArgs is never passed in the constructor. If you want the pass input ownership to the created object, please use addOwnedComponents. If you want to be extra safe, make sure the inputs are in an owning collection and then std::move the collection, so that the ownership is always clear.; Example:; RooArgList sumSet;; sumSet.add(*(new RooRealVar(""var1"", ""var1"", 1.0)));; sumSet.add(*(new RooRealVar(""var2"", ""var2"", 3.0)));; RooAddition addition{""addition"", ""addition"", sumSet, /*takeOwnership=*/true};; should become:; RooArgList sumSet;; sumSet.addOwned(std::make_unique<RooRealVar>(""var1"", ""var1"", 1.0));; sumSet.addOwned(std::mak",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:11251,Integrability,interface,interfaces,11251," or an alias for a raw pointer otherwise.; RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(...) const override; {; std::unique_ptr<RooAbsReal> integral;; // Prepare a std::unique_ptr as the return value; ...; // Use the RooFit::makeOwningPtr<T>() helper to translate the; // std::unique_ptr to the actual return type (either std::unique_ptr<T> or T*).; return RooFit::makeOwningPtr<RooAbsReal>(std::move(integral));; }; The biggest application of the memory-safe interfaces is to spot memory leaks in RooFit-based frameworks. If you make sure that your framework compiles both with and without ROOFIT_MEMORY_SAFE_INTERFACES, you can get rid of all memory leaks related to RooFit user error! After making the necessary changes, you can remove the marco definition again to keep backwards compatibility.; Note that the memory-safe interfaces might become the default at some point, so doing this backwards-compatible migration early is strongly encouraged and appreciated.; Removal of some memory-unsafe interfaces. The final bool takeOwnership parameter of the RooAddition and RooStats::HistFactory::PiecewiseInterpolation constructors was removed. This is to avoid situations where ownership is not clear to the compiler. Now, ownership of the input RooAbsArgs is never passed in the constructor. If you want the pass input ownership to the created object, please use addOwnedComponents. If you want to be extra safe, make sure the inputs are in an owning collection and then std::move the collection, so that the ownership is always clear.; Example:; RooArgList sumSet;; sumSet.add(*(new RooRealVar(""var1"", ""var1"", 1.0)));; sumSet.add(*(new RooRealVar(""var2"", ""var2"", 3.0)));; RooAddition addition{""addition"", ""addition"", sumSet, /*takeOwnership=*/true};; should become:; RooArgList sumSet;; sumSet.addOwned(std::make_unique<RooRealVar>(""var1"", ""var1"", 1.0));; sumSet.addOwned(std::make_unique<RooRealVar>(""var2"", ""var2"", 3.0));; RooAddition addition{""addition"", ""addition"", sumSet};; additi",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:12484,Integrability,interface,interfaces,12484,"rship of the input RooAbsArgs is never passed in the constructor. If you want the pass input ownership to the created object, please use addOwnedComponents. If you want to be extra safe, make sure the inputs are in an owning collection and then std::move the collection, so that the ownership is always clear.; Example:; RooArgList sumSet;; sumSet.add(*(new RooRealVar(""var1"", ""var1"", 1.0)));; sumSet.add(*(new RooRealVar(""var2"", ""var2"", 3.0)));; RooAddition addition{""addition"", ""addition"", sumSet, /*takeOwnership=*/true};; should become:; RooArgList sumSet;; sumSet.addOwned(std::make_unique<RooRealVar>(""var1"", ""var1"", 1.0));; sumSet.addOwned(std::make_unique<RooRealVar>(""var2"", ""var2"", 3.0));; RooAddition addition{""addition"", ""addition"", sumSet};; addition.addOwnedComponents(std::move(sumSet));. Deprecation of legacy iterators; The following methods related to the RooFit legacy iterators are deprecated and will be removed in ROOT 6.34. They should be replaced with the suitable STL-compatible interfaces, or you can just use range-based loops:. RooAbsArg::clientIterator(): use clients() and begin(), end() or range-based loops instead; RooAbsArg::valueClientIterator(): use valueClients(); RooAbsArg::shapeClientIterator(): use shapeClients(); RooAbsArg::serverIterator(): use servers(); RooAbsArg::valueClientMIterator(): use valueClients(); RooAbsArg::shapeClientMIterator(): use shapeClients(); RooAbsArg::serverMIterator(): use servers(); RooAbsCollection::createIterator(): use begin(), end() and range-based for loops; RooAbsCollection::iterator(): same; RooAbsCollection::fwdIterator(): same; RooWorkspace::componentIterator(): use RooWorkspace::components() with range-based loop. Deprecation of legacy test statistics classes in public interface; Instantiating the following classes and even including their header files is deprecated, and the headers will be removed in ROOT 6.34:. RooAbsTestStatistic; RooAbsOptTestStatistic; RooNLLVar; RooChi2Var; RooXYChi2Var. Please use the ",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:13237,Integrability,interface,interface,13237,"));. Deprecation of legacy iterators; The following methods related to the RooFit legacy iterators are deprecated and will be removed in ROOT 6.34. They should be replaced with the suitable STL-compatible interfaces, or you can just use range-based loops:. RooAbsArg::clientIterator(): use clients() and begin(), end() or range-based loops instead; RooAbsArg::valueClientIterator(): use valueClients(); RooAbsArg::shapeClientIterator(): use shapeClients(); RooAbsArg::serverIterator(): use servers(); RooAbsArg::valueClientMIterator(): use valueClients(); RooAbsArg::shapeClientMIterator(): use shapeClients(); RooAbsArg::serverMIterator(): use servers(); RooAbsCollection::createIterator(): use begin(), end() and range-based for loops; RooAbsCollection::iterator(): same; RooAbsCollection::fwdIterator(): same; RooWorkspace::componentIterator(): use RooWorkspace::components() with range-based loop. Deprecation of legacy test statistics classes in public interface; Instantiating the following classes and even including their header files is deprecated, and the headers will be removed in ROOT 6.34:. RooAbsTestStatistic; RooAbsOptTestStatistic; RooNLLVar; RooChi2Var; RooXYChi2Var. Please use the higher-level functions RooAbsPdf::createNLL() and RooAbsPdf::createChi2() if you want to create objects that represent test statistics.; Change of RooParamHistFunc; The RooParamHistFunc didn’t take any observable RooRealVar as constructor argument. It assumes as observable the internal variables in the passed RooDataHist. This means it was in most contexts unusable, because the input can’t be changed, other than loading a different bin in the dataset.; Furthermore, there was actually a constructor that took a RooAbsArg x, but it was simply ignored.; To fix all these problems, the existing constructors were replaced by a new one that takes the observable explicitly.; Since the old constructors resulted in wrong computation graphs that caused trouble with the new CPU evaluation backend, the",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:18485,Integrability,integrat,integrated,18485," an additional ProcessEvents().; Improve SetTextSize error: show code and values.; Very long text string generated a wrong SVG file.; Fix the option SAME works for TGraph2D.; Implement the title for the palette of a TH3.; Fix typo in TLegend::PaintPrimitives() and improve the exclusion graphs legend.; SetParameters(…) or SetParameter(…) on a TF1 reset the properties of the axis that have been previously defined. This was due to the Update() that was done after the parameters definition.; Update fonts’ documentation (CMS request).; Delaunay triangles were computed by the package triangle.c included in the ROOT code. This package had several problems: - It was not maintained anymore. - Its license was not compatible with LGPL. It is now replaced by the CDT package which is properly maintained and has a license (MLP) compatible with LGPL. 3D Graphics Libraries; REve. Introduce lightweight visualization of instanced shapes on the level of 100.000 instances. This is integrated in digit visualization of the type REveBoxSet. List of typed instances are boxes, hexagons, and cones. The digit sets support different types of transformation: positioning, rotation, and scaling in different combinations. With the digit set a palette GUI interface has also been added to enable setting digits threshold and value to color mapping. REveBoxSet screenshot with cone shape type. The set is using value to color map with overflow and underflow mark. The single REveBoxet object has a secondary selection enabled, where one can set a custom tooltip on mouse hover of an individual instance. Update version of RenderCore to fix tone mapping of transparent objects. PROOF Libraries; By default, PROOF is not configured and built any more. It will be deprecated in the future given that its functionality is now provided by the superior RDataFrame and its distributed version, DistRDF.; PyROOT; PyROOT was rebased on the latest version of the cppyy library. This means PyROOT benefits from many upstream ",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:18752,Integrability,interface,interface,18752," the exclusion graphs legend.; SetParameters(…) or SetParameter(…) on a TF1 reset the properties of the axis that have been previously defined. This was due to the Update() that was done after the parameters definition.; Update fonts’ documentation (CMS request).; Delaunay triangles were computed by the package triangle.c included in the ROOT code. This package had several problems: - It was not maintained anymore. - Its license was not compatible with LGPL. It is now replaced by the CDT package which is properly maintained and has a license (MLP) compatible with LGPL. 3D Graphics Libraries; REve. Introduce lightweight visualization of instanced shapes on the level of 100.000 instances. This is integrated in digit visualization of the type REveBoxSet. List of typed instances are boxes, hexagons, and cones. The digit sets support different types of transformation: positioning, rotation, and scaling in different combinations. With the digit set a palette GUI interface has also been added to enable setting digits threshold and value to color mapping. REveBoxSet screenshot with cone shape type. The set is using value to color map with overflow and underflow mark. The single REveBoxet object has a secondary selection enabled, where one can set a custom tooltip on mouse hover of an individual instance. Update version of RenderCore to fix tone mapping of transparent objects. PROOF Libraries; By default, PROOF is not configured and built any more. It will be deprecated in the future given that its functionality is now provided by the superior RDataFrame and its distributed version, DistRDF.; PyROOT; PyROOT was rebased on the latest version of the cppyy library. This means PyROOT benefits from many upstream improvements and fixes, for example related to the conversion of NumPy arrays to vectors, implicit conversion from nested Python tuples to nested initializer lists, and improved overload resolution.; Related to this cppyy upgrade, there are some changes in PyROOT behavior",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:23202,Integrability,integrat,integration,23202,"ctor""]); # print(my_file.my vector) # the old syntax would not work here!; The old pythonization with the __getattr__ syntax still works, but emits a deprecation warning and will be removed from ROOT 6.34.; Removal of Python 2 support; ROOT does no longer support Python 2. The minimum Python version necessary to use ROOT in a Python application is 3.8. As a consequence, any reference to Python 2 in ROOT code was removed and certain configuration options are no longer usable, e.g. root-config --python2-version; cmake -Dpyroot-python2. The cmake build system now looks for the standard Python3 package and previously custom Python-related cmake variables are now just the ones automatically produced by cmake (see https://cmake.org/cmake/help/latest/module/FindPython.html).; More usage of the public cppyy API; Many implementation details of the ROOT pythonizations were moved from C++ functions to pure Python bindings using the public cppyy API. This helps in the integration with the tool but also improves code efficiency and memory usage.; Class Reference Guide. Define missing doxygen groups.; Fix a few typos in the THStack documentation.; Small fixes in the THistPainter documentation.; Improve the TColor documentation: use modern C++ in the examples.; Make sure the python examples do not generate wrong namespaces in the documentation.; The dataframe tutorials json spec files were not displayed properly. Moreover there was no direct correspondence between the code source and the json file. Those files do not have any doc in them. With a direct link to the GitHub source file the dependency between source code and json is now more obvious.; Document how to remove shadow of TPave, as it was not evident (only explanations were hidden here and there in the forum).; Improve the SetFillColorAlpha documentation.; Simplify some graphics examples: arrow.C, crown.C, diamond.C and ellipse.C.; Fix a typo in the documentation of TGraph::SetHighlight in TGraph.cxx.; Change the marker st",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:23830,Integrability,depend,dependency,23830,"e and previously custom Python-related cmake variables are now just the ones automatically produced by cmake (see https://cmake.org/cmake/help/latest/module/FindPython.html).; More usage of the public cppyy API; Many implementation details of the ROOT pythonizations were moved from C++ functions to pure Python bindings using the public cppyy API. This helps in the integration with the tool but also improves code efficiency and memory usage.; Class Reference Guide. Define missing doxygen groups.; Fix a few typos in the THStack documentation.; Small fixes in the THistPainter documentation.; Improve the TColor documentation: use modern C++ in the examples.; Make sure the python examples do not generate wrong namespaces in the documentation.; The dataframe tutorials json spec files were not displayed properly. Moreover there was no direct correspondence between the code source and the json file. Those files do not have any doc in them. With a direct link to the GitHub source file the dependency between source code and json is now more obvious.; Document how to remove shadow of TPave, as it was not evident (only explanations were hidden here and there in the forum).; Improve the SetFillColorAlpha documentation.; Simplify some graphics examples: arrow.C, crown.C, diamond.C and ellipse.C.; Fix a typo in the documentation of TGraph::SetHighlight in TGraph.cxx.; Change the marker style in the tutorial df014_CSVDataSource.; Remove useless settings in the tutorial scatter.C.; Fix the tutorial h1analysisTreeReader.C.; Fix doxygen formatting in TGNumberEntry.cxx.; Avoid the CDT documentation to appear in the reference guide.; Remove last references to the old ROOT drupal website. Build, Configuration and Testing Infrastructure; Release v6.32.00 is the first one integrated and tested entirely through the new GitHub based build system.; Bugs and Issues fixed in this release; More than 200 items were addressed for this release. The full list is:. [#15621] - Buffer overflow in TBran",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:24614,Integrability,integrat,integrated,24614,"ed properly. Moreover there was no direct correspondence between the code source and the json file. Those files do not have any doc in them. With a direct link to the GitHub source file the dependency between source code and json is now more obvious.; Document how to remove shadow of TPave, as it was not evident (only explanations were hidden here and there in the forum).; Improve the SetFillColorAlpha documentation.; Simplify some graphics examples: arrow.C, crown.C, diamond.C and ellipse.C.; Fix a typo in the documentation of TGraph::SetHighlight in TGraph.cxx.; Change the marker style in the tutorial df014_CSVDataSource.; Remove useless settings in the tutorial scatter.C.; Fix the tutorial h1analysisTreeReader.C.; Fix doxygen formatting in TGNumberEntry.cxx.; Avoid the CDT documentation to appear in the reference guide.; Remove last references to the old ROOT drupal website. Build, Configuration and Testing Infrastructure; Release v6.32.00 is the first one integrated and tested entirely through the new GitHub based build system.; Bugs and Issues fixed in this release; More than 200 items were addressed for this release. The full list is:. [#15621] - Buffer overflow in TBranch::Init; [#15610] - Memory leak in TTree getattr pythonization; [#15590] - Infinite recursion in TFile::Open; [#15460] - TEnum::GetEnum(“B”)->GetUnderlyingType() does not following typedefs; [#15413] - Fails to build with cuDNN version 9; [#15406] - TEnum::GetEnum does not seem to see ‘through’ using statements.; [#15399] - Memory leak with jitted nodes if the execution is never triggered; [#15396] - [TMVA] Pymva test (Keras) failing on 632 and main; [#15370] - Broken link in HS3 printout; [#15340] - Webgraphics: canvas displayed, but many error printed; [#15253] - C++ standard not propagated via CMake anymore; [#15197] - RBDT does not support xgboost inference; [#15156] - Segfault in TMVA::Experimental::SOFIE::RModel::Streamer; [#15139] - cmake option -Dall=YES breaks the cmake; [#15118] - jso",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:26097,Integrability,message,message,26097,"tHub based build system.; Bugs and Issues fixed in this release; More than 200 items were addressed for this release. The full list is:. [#15621] - Buffer overflow in TBranch::Init; [#15610] - Memory leak in TTree getattr pythonization; [#15590] - Infinite recursion in TFile::Open; [#15460] - TEnum::GetEnum(“B”)->GetUnderlyingType() does not following typedefs; [#15413] - Fails to build with cuDNN version 9; [#15406] - TEnum::GetEnum does not seem to see ‘through’ using statements.; [#15399] - Memory leak with jitted nodes if the execution is never triggered; [#15396] - [TMVA] Pymva test (Keras) failing on 632 and main; [#15370] - Broken link in HS3 printout; [#15340] - Webgraphics: canvas displayed, but many error printed; [#15253] - C++ standard not propagated via CMake anymore; [#15197] - RBDT does not support xgboost inference; [#15156] - Segfault in TMVA::Experimental::SOFIE::RModel::Streamer; [#15139] - cmake option -Dall=YES breaks the cmake; [#15118] - jsoninterface does not build if provided with RapidYAML; [#15108] - Turn off clang-format for Linkdef files; [#15090] - TClass::GetClassInfo() is not thread safe; [#15077] - Passing different floating point types to RVec utility functions; [#15048] - [ntuple] Handling of virtual inheritance broken; [#15040] - RDataFrame Inaccurate example of progress bar from documentation; [#15028] - RDataFrame Unable to cacheread remote file; [#15027] - spurrious cmake message about AfterImage with -Dminimal=ON; [#14981] - RVecs leak memory with np.asarray in pyROOT; [#14964] - ROOT-HEAD fails with “cling interactive line includer >>>: fatal error: module file ‘[snip]/Vc.pcm’ not found: module file not found”; [#14958] - ROOT_HEAD failed with error message: Fail to detect cryptographic random generator; [#14921] - ROOT Fails to build macOS 14.4 arm64 Xcode 15.3; [#14914] - VecOps::Take with default argument doesn’t check correctly the out of boundary condition; [#14910] - hadd issue when using parallelization together with in",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:26382,Integrability,message,message,26382,inted; [#15253] - C++ standard not propagated via CMake anymore; [#15197] - RBDT does not support xgboost inference; [#15156] - Segfault in TMVA::Experimental::SOFIE::RModel::Streamer; [#15139] - cmake option -Dall=YES breaks the cmake; [#15118] - jsoninterface does not build if provided with RapidYAML; [#15108] - Turn off clang-format for Linkdef files; [#15090] - TClass::GetClassInfo() is not thread safe; [#15077] - Passing different floating point types to RVec utility functions; [#15048] - [ntuple] Handling of virtual inheritance broken; [#15040] - RDataFrame Inaccurate example of progress bar from documentation; [#15028] - RDataFrame Unable to cacheread remote file; [#15027] - spurrious cmake message about AfterImage with -Dminimal=ON; [#14981] - RVecs leak memory with np.asarray in pyROOT; [#14964] - ROOT-HEAD fails with “cling interactive line includer >>>: fatal error: module file ‘[snip]/Vc.pcm’ not found: module file not found”; [#14958] - ROOT_HEAD failed with error message: Fail to detect cryptographic random generator; [#14921] - ROOT Fails to build macOS 14.4 arm64 Xcode 15.3; [#14914] - VecOps::Take with default argument doesn’t check correctly the out of boundary condition; [#14910] - hadd issue when using parallelization together with indirect file; [#14902] - compilation error; [#14863] - [hist] TH1::SaveAs missing default option argument causes compilation errors; [#14855] - TRatioPlot crashes if loaded from the file; [#14842] - TRatioplot gives “different” results with Web Graphics; [#14838] - Problems with Confidence Band of TRatioPlot; [#14801] - TEfficiency drawing to .C is broken; [#14793] - 6.26 cannot read file written with 6.30.4; [#14772] - [cling] Undocumented behaviour of root macro_C.so; [#14767] - rootn.exe instant crash on startup; [#14765] - TGenPhaseSpace weight normalization; [#14748] - [ntuple] Show and PrintInfo does not work for friend RNTuples; [#14601] - std::source_location not found when running with c++20 enabled; [#14599] ,MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:28102,Integrability,depend,dependencies,28102," TRatioplot gives “different” results with Web Graphics; [#14838] - Problems with Confidence Band of TRatioPlot; [#14801] - TEfficiency drawing to .C is broken; [#14793] - 6.26 cannot read file written with 6.30.4; [#14772] - [cling] Undocumented behaviour of root macro_C.so; [#14767] - rootn.exe instant crash on startup; [#14765] - TGenPhaseSpace weight normalization; [#14748] - [ntuple] Show and PrintInfo does not work for friend RNTuples; [#14601] - std::source_location not found when running with c++20 enabled; [#14599] - The example th2polyUSA.C needs re-labelling; [#14598] - A “printf” change the behaviour of a macro …; [#14595] - Problem when creating dictionary in Osx 12.7, Xcode 14.2; [#14594] - Provide file.root request in THttpServer; [#14593] - Build fails with CLING_DEBUG=1 set; [#14586] - [ROOT-6317] using namespace statement does not provoke autoload; [#14576] - [ROOT-7155] Angular units used in HTML doc of TGLViewer::SetPerspectiveCamera are wrong; [#14575] - [ROOT-10196] boundary check in TH1::AddBinContent is missing; [#14569] - [ROOT-8348] Segmentation Fault in TMVA::DecisionTreeNode::Print; [#14562] - [ROOT-5009] TClass::SetDeclFile: second parameter wrong type; [#14553] - [ROOT-10909] Add TMVA python dependencies to the requirements.txt; [#14547] - [ROOT-9200] With Cocoa backend sometimes need two ProcessEvents to show Canvas; [#14528] - Bug in TFoam::GetIntNorm; [#14510] - Large computation graphs cause serious memory and runtime overhead; [#14509] - ROOT segfaults on riscv64; [#14508] - Using LZMA compression with RNTupleWriter leads to memory corruption; [#14499] - It is not possible to set the Title of the palette for a 3D axis; [#14462] - Parser for I/O customization rule is too strict.; [#14458] - Crash when doing Weighted Likelihood fit; [#14453] - Implement IsInside for TEllipse; [#14401] - The red frame around the selected pad of the webgui is not configurable; [#14385] - Strange behavior with TF1 and SetParameters; [#14381] - Legend ent",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:29332,Integrability,depend,depending,29332," and runtime overhead; [#14509] - ROOT segfaults on riscv64; [#14508] - Using LZMA compression with RNTupleWriter leads to memory corruption; [#14499] - It is not possible to set the Title of the palette for a 3D axis; [#14462] - Parser for I/O customization rule is too strict.; [#14458] - Crash when doing Weighted Likelihood fit; [#14453] - Implement IsInside for TEllipse; [#14401] - The red frame around the selected pad of the webgui is not configurable; [#14385] - Strange behavior with TF1 and SetParameters; [#14381] - Legend entry for exclusion graph; [#14376] - build failure with mysql 8.3; [#14372] - File with mtime equal to 0 are ignored by Cling.; [#14333] - “Empty plot” for df014_CSVDataSource.C; [#14331] - Unexpected behaviour when using the Project3D function to make a TH2 from a TH3; [#14329] - [RF] RDataFrameToRooFit - Clarification on returned object; [#14324] - Compatibility Issue with thisroot.sh and zsh; [#14320] - [RF] Wrong analytic integrals when using Gaussians with sigma depending on the observable; [#14303] - Test failure with nbconvert-7.14; [#14302] - The command “root –notebook” is not allowed on Windows 11; [#14277] - Cling triggers a huge number of openat calls when loading libraries; [#14263] - [tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; [#14256] - TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; [#14244] - String comparison operators defined in TString.h should be defined as constexpr; [#14229] - [6.30] root-config –git-revision broken; [#14225] - [RF] Segmentation fault in ROOT 6.30 workspace creation; [#14223] - Extremely long startup time when loading dictionaries with pyroot; [#14219] - [cling] Use deduction guides for llvm::ArrayRef; [#14211] - Implement value printing for std::source_location; [#14205] - [cling] Replace llvm::Optional and llvm::None with std::optional; [#14199] - Memory hoarding triggered by the TPluginManager; [#14188] - cmake find_package R",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:36620,Integrability,message,messages,36620, pythonizing vector; [#11484] - roottest/root/meta/genreflex/ROOT-5768 needs to be enabled; [#11411] - PyROOT Python list of strings -> std::initializer_list< std::string > conversion is broken; [#11395] - Migrate to pcre2; [#11353] - Compiled program with libNew.so crash; [#11304] - WW option for fit functions as the W option; [#11238] - an old bug in ROOT v6 TAB completion ?; [#11197] - Build github release into version release procedure; [#11190] - ROOT compiled with -Ddev=ON crashes when type # in ROOT session; [#11021] - [Fit Panel] Fitting to Gaus + Pol0 in two steps is unnecessarily hard; [#10891] - [RF] Deletion order of objects in RooFit/RooStats tutorials should not matter in Python; [#10871] - [DF][ntuple] Better task splitting with RDF+RNTuple; [#10866] - ACLiC flags parsing for compiler command line options broken in certain cases; [#10684] - PyROOT Cannot use SofieFunctor in Python; [#10664] - [ntuple] Expose fixed-size arrays as RVecs in RDF datasource; [#10395] - [core] CleanCompiledMacros behavior; [#10222] - Suspicious behavior of TUnuran::SampleMulti; [#10221] - ROOT interpreter built with C++17 does not find std::optional without including it first; [#10146] - Byte swapped floats in TMVA sofie on big endian architectures (s390x); [#10061] - Distributed RDataFrame test failures on Mac/ARM; [#9917] - SetRange and SetRangeUser fail silently; [#9594] - Systematic build failure of ROOT master in the LCG DEBUG builds since Jan 15th; [#9524] - Failure to build/run when MACOSX_DEPLOYMENT_TARGET is set to 11 or higher; [#9514] - Printed SVG image contains newline cutting through XML tags; [#9489] - [RF] Cannot turn off useless messages with RooMCStudy unbinned fits + Progress bar would be better.; [#9292] - Integer overflow in TTreeCache::FillBuffer; [#8959] - ninja clean does not remove modules.idx; [#8952] - Make hadd return a non-zero exit code when encountering a corrupted file; [#8942] - cannot buid the dependent project; [#8794] - [TGNumberEntry] ce,MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:36907,Integrability,depend,dependent,36907,"+ Progress bar would be better.; [#9292] - Integer overflow in TTreeCache::FillBuffer; [#8959] - ninja clean does not remove modules.idx; [#8952] - Make hadd return a non-zero exit code when encountering a corrupted file; [#8942] - cannot buid the dependent project; [#8794] - [TGNumberEntry] centiseconds; [#8720] - Apply TChain::SetImplicitMT() to underlying trees; [#8639] - (RDataFrame) AsNumpy returns Boolean branches as ‘object’ dtype numpy arrays; [#8582] - TThreadTimer behavior; [#8581] - [ntuple] RNTupleModel columns ownership issue; [#8517] - Add integer support to TVectorT; [#8494] - cling crashes on conditional parameter in template; [#8260] - Build system cannot detect version of oneTBB; [#8148] - Document TMethodCall class limitations; [#7950] - Assertion exception including header file with GaudiPython module; [#7900] - Support spectator variables in RReader; [#7872] - TExecutorCRTP::Map() should support void; [#7871] - Usability of TExecutor::MapReduce; [#7845] - Improve TMatrix reference documentation; [#7805] - Inconsistent and unintuitive behaviour of TFormula::SetParNames and TFormula::SetParameters; [#7774] - Unreasonably slow behaviour of CompileMacro; [#7699] - [VecOps] Make free functions in VecOps better visible; [#7686] - PyROOT Segfault when creating proxy to derived class with multiple overloads; [#7669] - Inconsistent behaviour in wildcard import; [#7644] - Provide in the cmake configuration the C++ standard which was used to compile ROOT; [#7627] - Fix TMVA group links; [#7159] - TNetXNGFile::Open fails with double slash (//) in path; [#7128] - Cannot build ROOT if another ROOT at /usr/local; [#6900] - mathmore: invalid roots for a quartic polynomial; [#6811] - Bug displaying several 3D objects such as TGraph2D on the same canvas; [#6755] - Greek letter epsilon not rendered correctly using TLatex with OpenGL.CanvasPreferGL option, segmentation fault.; [#6753] - CMake dependency on Python: use targets; [#6616] - hadd writes files with unspe",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:38586,Integrability,depend,dependency,38586,"rmula::SetParNames and TFormula::SetParameters; [#7774] - Unreasonably slow behaviour of CompileMacro; [#7699] - [VecOps] Make free functions in VecOps better visible; [#7686] - PyROOT Segfault when creating proxy to derived class with multiple overloads; [#7669] - Inconsistent behaviour in wildcard import; [#7644] - Provide in the cmake configuration the C++ standard which was used to compile ROOT; [#7627] - Fix TMVA group links; [#7159] - TNetXNGFile::Open fails with double slash (//) in path; [#7128] - Cannot build ROOT if another ROOT at /usr/local; [#6900] - mathmore: invalid roots for a quartic polynomial; [#6811] - Bug displaying several 3D objects such as TGraph2D on the same canvas; [#6755] - Greek letter epsilon not rendered correctly using TLatex with OpenGL.CanvasPreferGL option, segmentation fault.; [#6753] - CMake dependency on Python: use targets; [#6616] - hadd writes files with unspecified compression algorithm; [#6438] - hadd –help prints wrong usage info; [#6384] - cxx-standard should not be in CMAKE_CXX_FLAGS; [ROOT-3358] - SetRootSys() improperly sets $ROOTSYS; [ROOT-6424] - Bogus template names suggested by autocompletion; [ROOT-6581] - .x stress.cxx(1) broken; [ROOT-6713] - Root attempts to stream null pointers to abstract classes; [ROOT-6867] - forward declaration ‘payload’ inadvertently (?) unloaded; [ROOT-7280] - Memory leaks due to erroneous use of ExpandPathName; [ROOT-7801] - Typo in TMultiDimFit::MakeRealCode(); [ROOT-7289] - Documentation for TMath::fooI distributions foo unclear; [ROOT-7970] - Failure to use implicit auto with initializer lists; [ROOT-8042] - Allocating buffer close to INT_MAX throws exceptions; [ROOT-8051] - When projecting THn into TH1, TH2 or TH3, bin labels on the involved axis are lost; [ROOT-8259] - Minuit constantly modifies debug message even though it is never printed; [ROOT-8274] - “ComputeIntegral” member function of THnBase.h always returns 1; [ROOT-8384] - GenVectors objects should tell how many dimension",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:39563,Integrability,message,message,39563,"/local; [#6900] - mathmore: invalid roots for a quartic polynomial; [#6811] - Bug displaying several 3D objects such as TGraph2D on the same canvas; [#6755] - Greek letter epsilon not rendered correctly using TLatex with OpenGL.CanvasPreferGL option, segmentation fault.; [#6753] - CMake dependency on Python: use targets; [#6616] - hadd writes files with unspecified compression algorithm; [#6438] - hadd –help prints wrong usage info; [#6384] - cxx-standard should not be in CMAKE_CXX_FLAGS; [ROOT-3358] - SetRootSys() improperly sets $ROOTSYS; [ROOT-6424] - Bogus template names suggested by autocompletion; [ROOT-6581] - .x stress.cxx(1) broken; [ROOT-6713] - Root attempts to stream null pointers to abstract classes; [ROOT-6867] - forward declaration ‘payload’ inadvertently (?) unloaded; [ROOT-7280] - Memory leaks due to erroneous use of ExpandPathName; [ROOT-7801] - Typo in TMultiDimFit::MakeRealCode(); [ROOT-7289] - Documentation for TMath::fooI distributions foo unclear; [ROOT-7970] - Failure to use implicit auto with initializer lists; [ROOT-8042] - Allocating buffer close to INT_MAX throws exceptions; [ROOT-8051] - When projecting THn into TH1, TH2 or TH3, bin labels on the involved axis are lost; [ROOT-8259] - Minuit constantly modifies debug message even though it is never printed; [ROOT-8274] - “ComputeIntegral” member function of THnBase.h always returns 1; [ROOT-8384] - GenVectors objects should tell how many dimensions they have; [ROOT-8501] - TMultiLayerPerceptron destructor can cause double delete of memory]; [ROOT-8458] - Templated constructor overload resolution in PyROOT; [ROOT-8644] - PyRoot - Initializer-list support; [ROOT-8712] - TGeoBBox::AreOverlapping does not catch all intersections; [ROOT-8800] - Support rvalue-reference parameters in PyROOT; [ROOT-8801] - Support variadic template arguments of methods and functions in PyROOT; [ROOT-8919] - Eigenvalues delivered in wrong format; [ROOT-9000] - TSpline3; [ROOT-9076] - Missing symbol after syntax e",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:42557,Integrability,depend,depending,42557,"t found; [ROOT-10621] - Segfault if TFile is used with TRint in teardown; [ROOT-10705] - The “x” and “x0” options in THnBase::PrintEntries misbehave; [ROOT-10789] - some cppyy examples do not work under ROOT; [ROOT-10827] - Missing contribution of extended term in the error Correction for extended weighted likelihood fits; [ROOT-10859] - std.make_shared[T] does not work on macOS; [ROOT-10866] - Numerical instabilities when calculating the derivatives for the asymptotically correct erros; [ROOT-10958] - jupyter notebook does not render geometries with new pyroot; [ROOT-10977] - Exit code 0 with failing C++ notebook in nbconvert; [ROOT-11006] - [TTreeReader] Crash when reading array branch. Release 6.32.02; Published on June 18, 2024; Items addressed in this release. [#7236] - Memory leak in TFile::WriteObjectAny, depending on data type; [#10075] - Difficult to configure Xrootd to use non-builtin openssl; [#14051] - [web graphics] Web graphics resizes canvas despite canvas size definition in the macro; [#15321] - [MSVC] Root is failed with error G694476FC: static_assert failed “Unexpected size”; [#15405] - [RF] ExternalConstraints documentation incorrect for RooMCStudy; [#15430] - Test failures with Python 3.13; [#15473] - Segmentation fault when building with the mold linker; [#15498] - gPad is not consistent in pyROOT with web canvas; [#15511] - Possible memory corruption in cling; [#15579] - Performance regression (slowdown) in ALICE event generation; [#15686] - JITted code changes the execution order of computation graph nodes; [#15688] - PyROOT TProfile2D::Fill ambiguities preventing use of some signatures in pyROOT; [#15690] - [RF] SegFault in RooBernstein::fillBuffer; [#15694] - [RF] New RooFit EvalBackend returning incorrect result for binned likelihoods; [#15703] - Leaking memory though strings in PyROOT; [#15727] - Windows CMake project cannot find_library() after integrating with ROOT.; [#15751] - [RF] Using a conditional RooProdPdf in a multi-channel fit sp",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:43638,Integrability,integrat,integrating,43638,"0977] - Exit code 0 with failing C++ notebook in nbconvert; [ROOT-11006] - [TTreeReader] Crash when reading array branch. Release 6.32.02; Published on June 18, 2024; Items addressed in this release. [#7236] - Memory leak in TFile::WriteObjectAny, depending on data type; [#10075] - Difficult to configure Xrootd to use non-builtin openssl; [#14051] - [web graphics] Web graphics resizes canvas despite canvas size definition in the macro; [#15321] - [MSVC] Root is failed with error G694476FC: static_assert failed “Unexpected size”; [#15405] - [RF] ExternalConstraints documentation incorrect for RooMCStudy; [#15430] - Test failures with Python 3.13; [#15473] - Segmentation fault when building with the mold linker; [#15498] - gPad is not consistent in pyROOT with web canvas; [#15511] - Possible memory corruption in cling; [#15579] - Performance regression (slowdown) in ALICE event generation; [#15686] - JITted code changes the execution order of computation graph nodes; [#15688] - PyROOT TProfile2D::Fill ambiguities preventing use of some signatures in pyROOT; [#15690] - [RF] SegFault in RooBernstein::fillBuffer; [#15694] - [RF] New RooFit EvalBackend returning incorrect result for binned likelihoods; [#15703] - Leaking memory though strings in PyROOT; [#15727] - Windows CMake project cannot find_library() after integrating with ROOT.; [#15751] - [RF] Using a conditional RooProdPdf in a multi-channel fit spawns too many integrals with new CPU evaluation backend; [#15791] - JS ROOT does not draw tprofile2d correctly with “TEXT” draw option; [#15799] - pyunittests-pyroot-pyz-ttree-setbranchaddress segfaults with Python 3.13; [ROOT-7412] - Strange results looking for nested types; [ROOT-8439] - PyROOT does not treat exceptions properly in overloaded methods; [ROOT-9307] - TPad::GetListOfPrimitives() double deletion error in TList::Clear(). Release 6.32.04; Published on August 14, 2024; Items addressed in this release. [#7223] - [RF] RDataFrame to RooDataSet/RooDataHist conve",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:463,Modifiability,extend,extended,463,". ROOT Version 6.32 Release Notes. ROOT Version 6.32 Release Notes; 2024-05-26. Introduction; Deprecation and Removal; Core Libraries; I/O Libraries; hadd respects compression settings. TTree Libraries; Add files from subdirectories with TChain::Add globbing; Improved efficiency of TTree friends with indices. RNTuple; Histogram Libraries; Parallelism; RooFit Libraries; New CPU likelihood evaluation backend by default; Asymptotically correct uncertainties for extended unbinned likelihood fits; Compile your code with memory safe interfaces; Removal of some memory-unsafe interfaces; Deprecation of legacy iterators; Deprecation of legacy test statistics classes in public interface; Change of RooParamHistFunc; Renaming of some RooFit classes. RDataFrame; Graphics backends; 2D Graphics Libraries; 3D Graphics Libraries; REve. PROOF Libraries; PyROOT; Different representation of std::string; No more implicit conversion of static size char buffer to Python strings; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; Removal of Python 2 support; More usage of the public cppyy API. Class Reference Guide; Build, Configuration and Testing Infrastructure; Bugs and Issues fixed in this release; Release 6.32.02; Items addressed in this release. Release 6.32.04; Items addressed in this release. Release 6.32.06; Items addressed in this release. HEAD of the v6-32-00-patches branch. Introduction; ROOT version 6.32.00 was released on 28 May 2024. This release is a long term support one, ideal for inclusion in production or data taking software stacks of experiments.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Anton Alkin, Sungkyunkwan University; Guilherme Amadio, CERN/IT,; Abhigyan Acherjee, University of Cincinnati,; Bertrand Bellenot, CERN/EP-SFT,; Jakob Blomer, CERN/EP-SFT,; Rene Brun,; Carsten Burgard, DESY; Will Buttinger, RAL,; Philippe Canal, FNAL,; Jolly Chen, CERN/EP-SFT,; Olivier Co",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:5620,Modifiability,refactor,refactoring,5620,"TChain::Add(""/path/to/tree/*/*.root""); grabs all the root files with the path /path/to/tree/somedir/file.root (but not /path/to/tree/file.root and /path/to/tree/somedir/anotherdir/file.root).; Another example:; TChain::Add(""/path/to/tree/subdir[0-9]/*.root""); This grabs all the root files in subdirectories that have a name starting with subdir and ending with some digit.; Improved efficiency of TTree friends with indices; TTreeIndex and TChainIndex classes now implement the Clone method such that it does not use the ROOT I/O to clone the index but just does a copy in memory. Notably, this improves processing efficiency for RDataFrame in multithreaded execution since the same index must be copied over to all the threads and attached to the current tree for proper event matching.; RNTuple; ROOT’s experimental successor of TTree has seen a number of updates since the last release. Specifically, 6.32 includes the following changes:. A major refactoring of the interface, improving consistency across different parts and improving overall robustness. Note that this is a breaking change with regard to 6.30!; The on-disk format has been updated to release candidate 2. It will not be possible to read RNTuples written in the previous format anymore.; Support has been added for several new field types: std::unordered_set<T>, std::map<K,V>, std::unordered_map<K,V>; Support has been added for on-disk half-precision (IEEE 754-2008 16-bit) float fields. This can be enabled through RField<float>::SetHalfPrecision(). On reading, values of such fields are represented as regular, 32-bit floats.; A new RNTupleInspector utility class has been added, to provide information about the on-disk metadata of an RNTuple.; A new RNTupleParallelWriter class has been added, providing (initial) support for parallel writing of RNTuples.; A new static method RFieldBase::Check() has been added, which produces a support status report of a type with regards to RNTuple I/O.; A new internal RNTupleMerger cl",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:8625,Modifiability,extend,extended,8625,"ement.; Histogram Libraries. Implement the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum().; Print a warning when the range given to TAxis::SetRange is invalid.; Fix projection name in TH3 as requested here. Parallelism. The ROOT::Experimental::TFuture template has been removed. RooFit Libraries; New CPU likelihood evaluation backend by default; The new vectorizing CPU evaluation backend is not the default for RooFit likelihoods. Likelihood minimization is now up to 10x faster on a single CPU core.; If you experience unexpected problems related to the likelihood evaluation, you can revert back to the old backend by passing RooFit::EvalBackend(""legacy"") to RooAbsPdf::fitTo() or RooAbsPdf::createNLL().; In case you observe any slowdowns with the new likelihood evaluation, please open a GitHub issue about this, as such a performance regression is considered a bug.; Asymptotically correct uncertainties for extended unbinned likelihood fits; Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method when using the RooFit::AsymptoticError() command argument in RooAbsPdf::fitTo(). See also this writeup on extended weighted fits that is also linked from the reference guide. The pull request that introduced this feature might also be a good reference.; Compile your code with memory safe interfaces; If you define the ROOFIT_MEMORY_SAFE_INTERFACES preprocessor macro, the RooFit interface changes in a way such that memory leaks are avoided.; The most prominent effect of this change is that many functions that used to return an owning pointer (e.g., a pointer to an object that you need to manually delete) are then returning a std::unique_pt for automatic memory management.; For example this code would not compile anymore, because there is the risk that the caller forgets t",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:8687,Modifiability,extend,extended,8687,"ement.; Histogram Libraries. Implement the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum().; Print a warning when the range given to TAxis::SetRange is invalid.; Fix projection name in TH3 as requested here. Parallelism. The ROOT::Experimental::TFuture template has been removed. RooFit Libraries; New CPU likelihood evaluation backend by default; The new vectorizing CPU evaluation backend is not the default for RooFit likelihoods. Likelihood minimization is now up to 10x faster on a single CPU core.; If you experience unexpected problems related to the likelihood evaluation, you can revert back to the old backend by passing RooFit::EvalBackend(""legacy"") to RooAbsPdf::fitTo() or RooAbsPdf::createNLL().; In case you observe any slowdowns with the new likelihood evaluation, please open a GitHub issue about this, as such a performance regression is considered a bug.; Asymptotically correct uncertainties for extended unbinned likelihood fits; Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method when using the RooFit::AsymptoticError() command argument in RooAbsPdf::fitTo(). See also this writeup on extended weighted fits that is also linked from the reference guide. The pull request that introduced this feature might also be a good reference.; Compile your code with memory safe interfaces; If you define the ROOFIT_MEMORY_SAFE_INTERFACES preprocessor macro, the RooFit interface changes in a way such that memory leaks are avoided.; The most prominent effect of this change is that many functions that used to return an owning pointer (e.g., a pointer to an object that you need to manually delete) are then returning a std::unique_pt for automatic memory management.; For example this code would not compile anymore, because there is the risk that the caller forgets t",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:8824,Modifiability,extend,extended,8824,"e in TH3 as requested here. Parallelism. The ROOT::Experimental::TFuture template has been removed. RooFit Libraries; New CPU likelihood evaluation backend by default; The new vectorizing CPU evaluation backend is not the default for RooFit likelihoods. Likelihood minimization is now up to 10x faster on a single CPU core.; If you experience unexpected problems related to the likelihood evaluation, you can revert back to the old backend by passing RooFit::EvalBackend(""legacy"") to RooAbsPdf::fitTo() or RooAbsPdf::createNLL().; In case you observe any slowdowns with the new likelihood evaluation, please open a GitHub issue about this, as such a performance regression is considered a bug.; Asymptotically correct uncertainties for extended unbinned likelihood fits; Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method when using the RooFit::AsymptoticError() command argument in RooAbsPdf::fitTo(). See also this writeup on extended weighted fits that is also linked from the reference guide. The pull request that introduced this feature might also be a good reference.; Compile your code with memory safe interfaces; If you define the ROOFIT_MEMORY_SAFE_INTERFACES preprocessor macro, the RooFit interface changes in a way such that memory leaks are avoided.; The most prominent effect of this change is that many functions that used to return an owning pointer (e.g., a pointer to an object that you need to manually delete) are then returning a std::unique_pt for automatic memory management.; For example this code would not compile anymore, because there is the risk that the caller forgets to delete params:; RooArgSet * params = pdf.getParameters(nullptr);; If you wrap such return values in a std::unique_ptr, then your code will compile both with and without memory safe interfaces:; std::u",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:9013,Modifiability,extend,extended,9013,"on backend by default; The new vectorizing CPU evaluation backend is not the default for RooFit likelihoods. Likelihood minimization is now up to 10x faster on a single CPU core.; If you experience unexpected problems related to the likelihood evaluation, you can revert back to the old backend by passing RooFit::EvalBackend(""legacy"") to RooAbsPdf::fitTo() or RooAbsPdf::createNLL().; In case you observe any slowdowns with the new likelihood evaluation, please open a GitHub issue about this, as such a performance regression is considered a bug.; Asymptotically correct uncertainties for extended unbinned likelihood fits; Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method when using the RooFit::AsymptoticError() command argument in RooAbsPdf::fitTo(). See also this writeup on extended weighted fits that is also linked from the reference guide. The pull request that introduced this feature might also be a good reference.; Compile your code with memory safe interfaces; If you define the ROOFIT_MEMORY_SAFE_INTERFACES preprocessor macro, the RooFit interface changes in a way such that memory leaks are avoided.; The most prominent effect of this change is that many functions that used to return an owning pointer (e.g., a pointer to an object that you need to manually delete) are then returning a std::unique_pt for automatic memory management.; For example this code would not compile anymore, because there is the risk that the caller forgets to delete params:; RooArgSet * params = pdf.getParameters(nullptr);; If you wrap such return values in a std::unique_ptr, then your code will compile both with and without memory safe interfaces:; std::unique_ptr<RooArgSet> params{pdf.getParameters(nullptr)};; Also some virtual RooFit functions like RooAbsReal::createIntegral() are returning a di",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:13768,Modifiability,variab,variables,13768,"se servers(); RooAbsArg::valueClientMIterator(): use valueClients(); RooAbsArg::shapeClientMIterator(): use shapeClients(); RooAbsArg::serverMIterator(): use servers(); RooAbsCollection::createIterator(): use begin(), end() and range-based for loops; RooAbsCollection::iterator(): same; RooAbsCollection::fwdIterator(): same; RooWorkspace::componentIterator(): use RooWorkspace::components() with range-based loop. Deprecation of legacy test statistics classes in public interface; Instantiating the following classes and even including their header files is deprecated, and the headers will be removed in ROOT 6.34:. RooAbsTestStatistic; RooAbsOptTestStatistic; RooNLLVar; RooChi2Var; RooXYChi2Var. Please use the higher-level functions RooAbsPdf::createNLL() and RooAbsPdf::createChi2() if you want to create objects that represent test statistics.; Change of RooParamHistFunc; The RooParamHistFunc didn’t take any observable RooRealVar as constructor argument. It assumes as observable the internal variables in the passed RooDataHist. This means it was in most contexts unusable, because the input can’t be changed, other than loading a different bin in the dataset.; Furthermore, there was actually a constructor that took a RooAbsArg x, but it was simply ignored.; To fix all these problems, the existing constructors were replaced by a new one that takes the observable explicitly.; Since the old constructors resulted in wrong computation graphs that caused trouble with the new CPU evaluation backend, they had to be removed without deprecation. Please adapt your code if necessary.; Renaming of some RooFit classes; The RooPower was renamed to RooPowerSum, and RooExpPoly was renamed to RooLegacyExpPoly.; This was a necessary change, because the names of these classes introduced in ROOT 6.28 collided with some classes in CMS combine, which were around already long before. Therefore, the classes had to be renamed to not cause any problems for CMS.; In the unlikeliy case where you should",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:14328,Modifiability,adapt,adapt,14328,"nd the headers will be removed in ROOT 6.34:. RooAbsTestStatistic; RooAbsOptTestStatistic; RooNLLVar; RooChi2Var; RooXYChi2Var. Please use the higher-level functions RooAbsPdf::createNLL() and RooAbsPdf::createChi2() if you want to create objects that represent test statistics.; Change of RooParamHistFunc; The RooParamHistFunc didn’t take any observable RooRealVar as constructor argument. It assumes as observable the internal variables in the passed RooDataHist. This means it was in most contexts unusable, because the input can’t be changed, other than loading a different bin in the dataset.; Furthermore, there was actually a constructor that took a RooAbsArg x, but it was simply ignored.; To fix all these problems, the existing constructors were replaced by a new one that takes the observable explicitly.; Since the old constructors resulted in wrong computation graphs that caused trouble with the new CPU evaluation backend, they had to be removed without deprecation. Please adapt your code if necessary.; Renaming of some RooFit classes; The RooPower was renamed to RooPowerSum, and RooExpPoly was renamed to RooLegacyExpPoly.; This was a necessary change, because the names of these classes introduced in ROOT 6.28 collided with some classes in CMS combine, which were around already long before. Therefore, the classes had to be renamed to not cause any problems for CMS.; In the unlikeliy case where you should have used these new classes for analysis already, please adapt your code to the new names and re-create your workspaces.; RDataFrame. The RDataFrame constructors that take in input one or more file names (or globs thereof) will now infer the format of the dataset, either TTree or RNTuple, that is stored in the first input file. When multiple files are specified, it is assumed that all other files contain a coherent dataset of the same format and with the same schema, exactly as it used to happen with TChain. This automatic inference further contributes towards a ze",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:14825,Modifiability,adapt,adapt,14825,"is means it was in most contexts unusable, because the input can’t be changed, other than loading a different bin in the dataset.; Furthermore, there was actually a constructor that took a RooAbsArg x, but it was simply ignored.; To fix all these problems, the existing constructors were replaced by a new one that takes the observable explicitly.; Since the old constructors resulted in wrong computation graphs that caused trouble with the new CPU evaluation backend, they had to be removed without deprecation. Please adapt your code if necessary.; Renaming of some RooFit classes; The RooPower was renamed to RooPowerSum, and RooExpPoly was renamed to RooLegacyExpPoly.; This was a necessary change, because the names of these classes introduced in ROOT 6.28 collided with some classes in CMS combine, which were around already long before. Therefore, the classes had to be renamed to not cause any problems for CMS.; In the unlikeliy case where you should have used these new classes for analysis already, please adapt your code to the new names and re-create your workspaces.; RDataFrame. The RDataFrame constructors that take in input one or more file names (or globs thereof) will now infer the format of the dataset, either TTree or RNTuple, that is stored in the first input file. When multiple files are specified, it is assumed that all other files contain a coherent dataset of the same format and with the same schema, exactly as it used to happen with TChain. This automatic inference further contributes towards a zero-code-change experience when moving from processing a TTree to processing an RNTuple dataset while using an RDataFrame. It also introduces a backwards-incompatible behaviour, i.e. now the constructor needs to open one file in order to infer the dataset type. This means that if the file does not exist, the constructor will throw an exception. Previously, an exception would be thrown only at a JIT-ting time, before the start of the computations.; Distributed RDataF",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:16756,Modifiability,enhance,enhancements,16756,"tributed RDataFrame now supports processing an RNTuple dataset.; In distributed RDataFrame, the initialize function useful to run initialization code at the beginning of every task on a worker will now run only in the worker processes. Previously, it was also run eagerly at the point of calling, that is in the main user process. This is done to better separate the user driver environment and the worker environments. If necessary, the function passed to initialize can be called directly by the user in the main application to reproduce the same effect as before.; Some internal details of the RDataFrame implementation were reworked to decrease memory usage and runtime of programs with very deep computation graphs (more than O(10K) nodes in the same branch). Preliminary tests indicate between 30% and a factor 2.5 in memory decrease. This improvement is transparent for RDataFrame users. Graphics backends; The ROOT release 6.32 brings a lot of impressive enhancements to the Web Graphics package, greatly surpassing the features and capabilities of version 6.30. This update provides users with a more robust Web Graphics. The JSROOT version has been updated to v7.7. 2D Graphics Libraries. TMultiGraph: Add the objects from the list of functions in legend produce by TLegend.; Implement the IsInside method for TEllipse, TCrown and TDiamond. Also, a new graphics example inside.C has been added.; Two new methods in TColor: ListColors() and GetColorByname().; Make sure the option L draws closed polygon for TH2Poly.; Use Tex Gyre fonts for sans serif (similar to Helvetica) .; The new method TPad::ModifiedUpdate is short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().; Improve SetTextSize error: show code and values.; Very long text string generated a wrong SVG file.; Fix the option SAME works for TGraph2D.; Implement the title for the palette of a TH3.; Fix typo in TLegend::PaintPrimitives() and improve the exclusi",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:19214,Modifiability,config,configured,19214,"icense was not compatible with LGPL. It is now replaced by the CDT package which is properly maintained and has a license (MLP) compatible with LGPL. 3D Graphics Libraries; REve. Introduce lightweight visualization of instanced shapes on the level of 100.000 instances. This is integrated in digit visualization of the type REveBoxSet. List of typed instances are boxes, hexagons, and cones. The digit sets support different types of transformation: positioning, rotation, and scaling in different combinations. With the digit set a palette GUI interface has also been added to enable setting digits threshold and value to color mapping. REveBoxSet screenshot with cone shape type. The set is using value to color map with overflow and underflow mark. The single REveBoxet object has a secondary selection enabled, where one can set a custom tooltip on mouse hover of an individual instance. Update version of RenderCore to fix tone mapping of transparent objects. PROOF Libraries; By default, PROOF is not configured and built any more. It will be deprecated in the future given that its functionality is now provided by the superior RDataFrame and its distributed version, DistRDF.; PyROOT; PyROOT was rebased on the latest version of the cppyy library. This means PyROOT benefits from many upstream improvements and fixes, for example related to the conversion of NumPy arrays to vectors, implicit conversion from nested Python tuples to nested initializer lists, and improved overload resolution.; Related to this cppyy upgrade, there are some changes in PyROOT behavior.; Different representation of std::string; Calling repr() on a cppyy.gbl.std.string object now comes with a “b” prefix, i.e. a bytes object is returned instead of a Python string. This is an intentional change for better unicode support.; See: https://github.com/root-project/root/issues/15153#issuecomment-2040504962; No more implicit conversion of static size char buffer to Python strings; A static size character buffer of",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:21615,Modifiability,variab,variables,21615,"r[n]; void fill_char_buffer(Struct & st) {; std::string foo{""foo""};; std::memcpy(st.char_buffer, foo.data(), foo.size());; }; """"""). struct = ROOT.Struct(); ROOT.fill_char_buffer(struct); char_buffer = struct.char_buffer. # With thew new cppyy, you get access to the lower level buffer instead of a; # Python string:; print(""struct.char_buffer : "", char_buffer). # However, you can turn the buffer into a string very easily with as_string():; print(""struct.char_buffer.as_string(): "", char_buffer.as_string()); The output of this script with ROOT 6.32:; struct.char_buffer : <cppyy.LowLevelView object at 0x74c7a2682fb0>; struct.char_buffer.as_string(): foo; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; The new recommended way to get objects from a TFile or any TDirectory in general is now via __getitem__:; tree = my_file[""my_tree""] # instead of my_file.my_tree; This is more consistent with other Python collections (like dictionaries), makes sure that member functions can’t be confused with branch names, and easily allows you to use string variables as keys.; With the new dictionary-like syntax, you can also get objects with names that don’t qualify as a Python variable. Here is a short demo:; import ROOT. with ROOT.TFile.Open(""my_file.root"", ""RECREATE"") as my_file:. # Populate the TFile with simple objects.; my_file.WriteObject(ROOT.std.string(""hello world""), ""my_string""); my_file.WriteObject(ROOT.vector[""int""]([1, 2, 3]), ""my vector""). print(my_file[""my_string""]) # new syntax; print(my_file.my_string) # old deprecated syntax. # With the dictionary syntax, you can also use names that don't qualify as; # a Python variable:; print(my_file[""my vector""]); # print(my_file.my vector) # the old syntax would not work here!; The old pythonization with the __getattr__ syntax still works, but emits a deprecation warning and will be removed from ROOT 6.34.; Removal of Python 2 support; ROOT does no longer support Python 2. The minimum Python versi",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:21739,Modifiability,variab,variable,21739,"fill_char_buffer(struct); char_buffer = struct.char_buffer. # With thew new cppyy, you get access to the lower level buffer instead of a; # Python string:; print(""struct.char_buffer : "", char_buffer). # However, you can turn the buffer into a string very easily with as_string():; print(""struct.char_buffer.as_string(): "", char_buffer.as_string()); The output of this script with ROOT 6.32:; struct.char_buffer : <cppyy.LowLevelView object at 0x74c7a2682fb0>; struct.char_buffer.as_string(): foo; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; The new recommended way to get objects from a TFile or any TDirectory in general is now via __getitem__:; tree = my_file[""my_tree""] # instead of my_file.my_tree; This is more consistent with other Python collections (like dictionaries), makes sure that member functions can’t be confused with branch names, and easily allows you to use string variables as keys.; With the new dictionary-like syntax, you can also get objects with names that don’t qualify as a Python variable. Here is a short demo:; import ROOT. with ROOT.TFile.Open(""my_file.root"", ""RECREATE"") as my_file:. # Populate the TFile with simple objects.; my_file.WriteObject(ROOT.std.string(""hello world""), ""my_string""); my_file.WriteObject(ROOT.vector[""int""]([1, 2, 3]), ""my vector""). print(my_file[""my_string""]) # new syntax; print(my_file.my_string) # old deprecated syntax. # With the dictionary syntax, you can also use names that don't qualify as; # a Python variable:; print(my_file[""my vector""]); # print(my_file.my vector) # the old syntax would not work here!; The old pythonization with the __getattr__ syntax still works, but emits a deprecation warning and will be removed from ROOT 6.34.; Removal of Python 2 support; ROOT does no longer support Python 2. The minimum Python version necessary to use ROOT in a Python application is 3.8. As a consequence, any reference to Python 2 in ROOT code was removed and certain configuration options ar",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:22200,Modifiability,variab,variable,22200,"o; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; The new recommended way to get objects from a TFile or any TDirectory in general is now via __getitem__:; tree = my_file[""my_tree""] # instead of my_file.my_tree; This is more consistent with other Python collections (like dictionaries), makes sure that member functions can’t be confused with branch names, and easily allows you to use string variables as keys.; With the new dictionary-like syntax, you can also get objects with names that don’t qualify as a Python variable. Here is a short demo:; import ROOT. with ROOT.TFile.Open(""my_file.root"", ""RECREATE"") as my_file:. # Populate the TFile with simple objects.; my_file.WriteObject(ROOT.std.string(""hello world""), ""my_string""); my_file.WriteObject(ROOT.vector[""int""]([1, 2, 3]), ""my vector""). print(my_file[""my_string""]) # new syntax; print(my_file.my_string) # old deprecated syntax. # With the dictionary syntax, you can also use names that don't qualify as; # a Python variable:; print(my_file[""my vector""]); # print(my_file.my vector) # the old syntax would not work here!; The old pythonization with the __getattr__ syntax still works, but emits a deprecation warning and will be removed from ROOT 6.34.; Removal of Python 2 support; ROOT does no longer support Python 2. The minimum Python version necessary to use ROOT in a Python application is 3.8. As a consequence, any reference to Python 2 in ROOT code was removed and certain configuration options are no longer usable, e.g. root-config --python2-version; cmake -Dpyroot-python2. The cmake build system now looks for the standard Python3 package and previously custom Python-related cmake variables are now just the ones automatically produced by cmake (see https://cmake.org/cmake/help/latest/module/FindPython.html).; More usage of the public cppyy API; Many implementation details of the ROOT pythonizations were moved from C++ functions to pure Python bindings using the public cppyy API. ",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:22667,Modifiability,config,configuration,22667,"ictionary-like syntax, you can also get objects with names that don’t qualify as a Python variable. Here is a short demo:; import ROOT. with ROOT.TFile.Open(""my_file.root"", ""RECREATE"") as my_file:. # Populate the TFile with simple objects.; my_file.WriteObject(ROOT.std.string(""hello world""), ""my_string""); my_file.WriteObject(ROOT.vector[""int""]([1, 2, 3]), ""my vector""). print(my_file[""my_string""]) # new syntax; print(my_file.my_string) # old deprecated syntax. # With the dictionary syntax, you can also use names that don't qualify as; # a Python variable:; print(my_file[""my vector""]); # print(my_file.my vector) # the old syntax would not work here!; The old pythonization with the __getattr__ syntax still works, but emits a deprecation warning and will be removed from ROOT 6.34.; Removal of Python 2 support; ROOT does no longer support Python 2. The minimum Python version necessary to use ROOT in a Python application is 3.8. As a consequence, any reference to Python 2 in ROOT code was removed and certain configuration options are no longer usable, e.g. root-config --python2-version; cmake -Dpyroot-python2. The cmake build system now looks for the standard Python3 package and previously custom Python-related cmake variables are now just the ones automatically produced by cmake (see https://cmake.org/cmake/help/latest/module/FindPython.html).; More usage of the public cppyy API; Many implementation details of the ROOT pythonizations were moved from C++ functions to pure Python bindings using the public cppyy API. This helps in the integration with the tool but also improves code efficiency and memory usage.; Class Reference Guide. Define missing doxygen groups.; Fix a few typos in the THStack documentation.; Small fixes in the THistPainter documentation.; Improve the TColor documentation: use modern C++ in the examples.; Make sure the python examples do not generate wrong namespaces in the documentation.; The dataframe tutorials json spec files were not displayed proper",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:22721,Modifiability,config,config,22721,"iable. Here is a short demo:; import ROOT. with ROOT.TFile.Open(""my_file.root"", ""RECREATE"") as my_file:. # Populate the TFile with simple objects.; my_file.WriteObject(ROOT.std.string(""hello world""), ""my_string""); my_file.WriteObject(ROOT.vector[""int""]([1, 2, 3]), ""my vector""). print(my_file[""my_string""]) # new syntax; print(my_file.my_string) # old deprecated syntax. # With the dictionary syntax, you can also use names that don't qualify as; # a Python variable:; print(my_file[""my vector""]); # print(my_file.my vector) # the old syntax would not work here!; The old pythonization with the __getattr__ syntax still works, but emits a deprecation warning and will be removed from ROOT 6.34.; Removal of Python 2 support; ROOT does no longer support Python 2. The minimum Python version necessary to use ROOT in a Python application is 3.8. As a consequence, any reference to Python 2 in ROOT code was removed and certain configuration options are no longer usable, e.g. root-config --python2-version; cmake -Dpyroot-python2. The cmake build system now looks for the standard Python3 package and previously custom Python-related cmake variables are now just the ones automatically produced by cmake (see https://cmake.org/cmake/help/latest/module/FindPython.html).; More usage of the public cppyy API; Many implementation details of the ROOT pythonizations were moved from C++ functions to pure Python bindings using the public cppyy API. This helps in the integration with the tool but also improves code efficiency and memory usage.; Class Reference Guide. Define missing doxygen groups.; Fix a few typos in the THStack documentation.; Small fixes in the THistPainter documentation.; Improve the TColor documentation: use modern C++ in the examples.; Make sure the python examples do not generate wrong namespaces in the documentation.; The dataframe tutorials json spec files were not displayed properly. Moreover there was no direct correspondence between the code source and the json file. Tho",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:22880,Modifiability,variab,variables,22880,"e with simple objects.; my_file.WriteObject(ROOT.std.string(""hello world""), ""my_string""); my_file.WriteObject(ROOT.vector[""int""]([1, 2, 3]), ""my vector""). print(my_file[""my_string""]) # new syntax; print(my_file.my_string) # old deprecated syntax. # With the dictionary syntax, you can also use names that don't qualify as; # a Python variable:; print(my_file[""my vector""]); # print(my_file.my vector) # the old syntax would not work here!; The old pythonization with the __getattr__ syntax still works, but emits a deprecation warning and will be removed from ROOT 6.34.; Removal of Python 2 support; ROOT does no longer support Python 2. The minimum Python version necessary to use ROOT in a Python application is 3.8. As a consequence, any reference to Python 2 in ROOT code was removed and certain configuration options are no longer usable, e.g. root-config --python2-version; cmake -Dpyroot-python2. The cmake build system now looks for the standard Python3 package and previously custom Python-related cmake variables are now just the ones automatically produced by cmake (see https://cmake.org/cmake/help/latest/module/FindPython.html).; More usage of the public cppyy API; Many implementation details of the ROOT pythonizations were moved from C++ functions to pure Python bindings using the public cppyy API. This helps in the integration with the tool but also improves code efficiency and memory usage.; Class Reference Guide. Define missing doxygen groups.; Fix a few typos in the THStack documentation.; Small fixes in the THistPainter documentation.; Improve the TColor documentation: use modern C++ in the examples.; Make sure the python examples do not generate wrong namespaces in the documentation.; The dataframe tutorials json spec files were not displayed properly. Moreover there was no direct correspondence between the code source and the json file. Those files do not have any doc in them. With a direct link to the GitHub source file the dependency between source code and js",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:25918,Modifiability,inherit,inheritance,25918,"tHub based build system.; Bugs and Issues fixed in this release; More than 200 items were addressed for this release. The full list is:. [#15621] - Buffer overflow in TBranch::Init; [#15610] - Memory leak in TTree getattr pythonization; [#15590] - Infinite recursion in TFile::Open; [#15460] - TEnum::GetEnum(“B”)->GetUnderlyingType() does not following typedefs; [#15413] - Fails to build with cuDNN version 9; [#15406] - TEnum::GetEnum does not seem to see ‘through’ using statements.; [#15399] - Memory leak with jitted nodes if the execution is never triggered; [#15396] - [TMVA] Pymva test (Keras) failing on 632 and main; [#15370] - Broken link in HS3 printout; [#15340] - Webgraphics: canvas displayed, but many error printed; [#15253] - C++ standard not propagated via CMake anymore; [#15197] - RBDT does not support xgboost inference; [#15156] - Segfault in TMVA::Experimental::SOFIE::RModel::Streamer; [#15139] - cmake option -Dall=YES breaks the cmake; [#15118] - jsoninterface does not build if provided with RapidYAML; [#15108] - Turn off clang-format for Linkdef files; [#15090] - TClass::GetClassInfo() is not thread safe; [#15077] - Passing different floating point types to RVec utility functions; [#15048] - [ntuple] Handling of virtual inheritance broken; [#15040] - RDataFrame Inaccurate example of progress bar from documentation; [#15028] - RDataFrame Unable to cacheread remote file; [#15027] - spurrious cmake message about AfterImage with -Dminimal=ON; [#14981] - RVecs leak memory with np.asarray in pyROOT; [#14964] - ROOT-HEAD fails with “cling interactive line includer >>>: fatal error: module file ‘[snip]/Vc.pcm’ not found: module file not found”; [#14958] - ROOT_HEAD failed with error message: Fail to detect cryptographic random generator; [#14921] - ROOT Fails to build macOS 14.4 arm64 Xcode 15.3; [#14914] - VecOps::Take with default argument doesn’t check correctly the out of boundary condition; [#14910] - hadd issue when using parallelization together with in",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:28771,Modifiability,config,configurable,28771,"Angular units used in HTML doc of TGLViewer::SetPerspectiveCamera are wrong; [#14575] - [ROOT-10196] boundary check in TH1::AddBinContent is missing; [#14569] - [ROOT-8348] Segmentation Fault in TMVA::DecisionTreeNode::Print; [#14562] - [ROOT-5009] TClass::SetDeclFile: second parameter wrong type; [#14553] - [ROOT-10909] Add TMVA python dependencies to the requirements.txt; [#14547] - [ROOT-9200] With Cocoa backend sometimes need two ProcessEvents to show Canvas; [#14528] - Bug in TFoam::GetIntNorm; [#14510] - Large computation graphs cause serious memory and runtime overhead; [#14509] - ROOT segfaults on riscv64; [#14508] - Using LZMA compression with RNTupleWriter leads to memory corruption; [#14499] - It is not possible to set the Title of the palette for a 3D axis; [#14462] - Parser for I/O customization rule is too strict.; [#14458] - Crash when doing Weighted Likelihood fit; [#14453] - Implement IsInside for TEllipse; [#14401] - The red frame around the selected pad of the webgui is not configurable; [#14385] - Strange behavior with TF1 and SetParameters; [#14381] - Legend entry for exclusion graph; [#14376] - build failure with mysql 8.3; [#14372] - File with mtime equal to 0 are ignored by Cling.; [#14333] - “Empty plot” for df014_CSVDataSource.C; [#14331] - Unexpected behaviour when using the Project3D function to make a TH2 from a TH3; [#14329] - [RF] RDataFrameToRooFit - Clarification on returned object; [#14324] - Compatibility Issue with thisroot.sh and zsh; [#14320] - [RF] Wrong analytic integrals when using Gaussians with sigma depending on the observable; [#14303] - Test failure with nbconvert-7.14; [#14302] - The command “root –notebook” is not allowed on Windows 11; [#14277] - Cling triggers a huge number of openat calls when loading libraries; [#14263] - [tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; [#14256] - TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; [#14244] - String ",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:29860,Modifiability,config,config,29860,"6] - build failure with mysql 8.3; [#14372] - File with mtime equal to 0 are ignored by Cling.; [#14333] - “Empty plot” for df014_CSVDataSource.C; [#14331] - Unexpected behaviour when using the Project3D function to make a TH2 from a TH3; [#14329] - [RF] RDataFrameToRooFit - Clarification on returned object; [#14324] - Compatibility Issue with thisroot.sh and zsh; [#14320] - [RF] Wrong analytic integrals when using Gaussians with sigma depending on the observable; [#14303] - Test failure with nbconvert-7.14; [#14302] - The command “root –notebook” is not allowed on Windows 11; [#14277] - Cling triggers a huge number of openat calls when loading libraries; [#14263] - [tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; [#14256] - TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; [#14244] - String comparison operators defined in TString.h should be defined as constexpr; [#14229] - [6.30] root-config –git-revision broken; [#14225] - [RF] Segmentation fault in ROOT 6.30 workspace creation; [#14223] - Extremely long startup time when loading dictionaries with pyroot; [#14219] - [cling] Use deduction guides for llvm::ArrayRef; [#14211] - Implement value printing for std::source_location; [#14205] - [cling] Replace llvm::Optional and llvm::None with std::optional; [#14199] - Memory hoarding triggered by the TPluginManager; [#14188] - cmake find_package ROOT 6.30 broken: it requires nlohmann-json; [#14163] - cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; [#14162] - RooFFTConvPdf is not working for ROOT 6.30/02; [#14157] - Minuit2 standalone build: StandAlone.cmake looks for the wrong path for VERSION_FILE; [#14113] - The find_package(root) command fails when using Root installed via Homebrew.; [#14101] - Missing documentation for RDataSetSpec; [#14097] - Cleaner stack traces in python; [#14085] - thisroot.sh does not recognize bash when running in qemu-x86_64; [#14084] - [n",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:31105,Modifiability,config,config,31105,"Implement value printing for std::source_location; [#14205] - [cling] Replace llvm::Optional and llvm::None with std::optional; [#14199] - Memory hoarding triggered by the TPluginManager; [#14188] - cmake find_package ROOT 6.30 broken: it requires nlohmann-json; [#14163] - cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; [#14162] - RooFFTConvPdf is not working for ROOT 6.30/02; [#14157] - Minuit2 standalone build: StandAlone.cmake looks for the wrong path for VERSION_FILE; [#14113] - The find_package(root) command fails when using Root installed via Homebrew.; [#14101] - Missing documentation for RDataSetSpec; [#14097] - Cleaner stack traces in python; [#14085] - thisroot.sh does not recognize bash when running in qemu-x86_64; [#14084] - [ntuple] RRecordField creation crashes when TStreamerInfo has insufficient information; [#14075] - [FreeBSD] root.exe crash at end of compilation during modules.idx generation; [#14068] - ROOT 6.30/00 reports root-config --version as 6.30.00; [#14064] - Include Tex Gyre Heros in ROOT fonts; [#14032] - TPaveText has problems when label is set; [#14030] - Allow zero-copy RNTuple bulk reading; [#13965] - [Cling] Assertion fails with wrong but innocent code; [#13962] - THnSparse::Scale() unsparsifies; [#13877] - [ntuple] Segfault when processing recursive classes; [#13865] - [FreeBSD] cling cmake error; [#13861] - Remove all traces of Python2 from the ROOT codebase in preparation for 6.32/00; [#13851] - Test crash with GCC 13 and C++20; [#13834] - Can’t open TBrowser locally after upgrading macos “Apple M2 14.0 (23A344)”; [#13825] - builtin libpng too old; [#13815] - Cling (rightfully) confused about forward-declared template specializations; [#13697] - Unexpected behaviour of KSTest with toys (“X” option) for identical histograms; [#13659] - rootprint/rootls missing recursive traversal; [#13623] - Add directory wildcarding in TChain; [#13531] - Huge RAM consumption of the hadd command for input files",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:33972,Modifiability,config,configured,33972,"l in /usr/lib sometimes take priority); [#13041] - TVirtualFitter::GetFitter() unexpectedly returns NULL on macOS 12 and 13 with Xcode 14; [#13019] - LLVM assertion failure in HandleUnionActiveMemberChange; [#12993] - std::source_location not working in the interpreter; [#12959] - [ntuple] Distinguish between connecting a page sink and a page source in RColumn; [#12783] - [IO] Writing HistFactory model file twice gives strange results since ROOT 6.26.02; [#12770] - tmva/sofie_parsers does not build with latest Protobuf (22.x); [#12744] - wrong Python version found during build; [#12718] - A crash when trying to initialise a vector from a >1D numpy array in PyROOT; [#12685] - TEnum::GetEnum does NOT process typedefs; [#12644] - Can’t find cxxabi.h and build module ‘ROOT_Foundation_Stage1_NoRTTI’ when building from source on Macos; [#12631] - Unable to build master with external XROOTD; [#12621] - [I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; [#12592] - [doc] TProfile bin error documentation is not correct; [#12591] - Allow partial enablement of modules; [#12527] - MacOS build fails if configured without cocoa; [#12492] - The problem with building ROOT v6-26-10 in debug mode on ubuntu 20.04; [#12230] - Wrong conversion from Numpy Array to std.vector when using the wrong type; [#12091] - TSpline SaveAs not using equidistant and loss of precision; [#11924] - PyROOT: wrong overload resolution for C++ functions from python; [#11901] - Binary distribution for Ubutu 22.04 is broken (on WSL2); [#11750] - FindXROOTD adds libraries to link against irrespective of xrootd version used; [#11746] - TH2::Fill(const char namex, const char namey, Double_t w) doesn’t update fTsumwxy; [#11743] - CMake >= 3.24 fails to build LZMA: WARNING: ‘aclocal-1.15’ is missing on your system.; [#11673] - [ntuple] Consider making REntry::AddValue() publicly accessible; [#11667] - [cling] GetClassSharedLibs fails to find several classes; [#11653] - TFile plugin",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:34825,Modifiability,plugin,plugins,34825," [#12527] - MacOS build fails if configured without cocoa; [#12492] - The problem with building ROOT v6-26-10 in debug mode on ubuntu 20.04; [#12230] - Wrong conversion from Numpy Array to std.vector when using the wrong type; [#12091] - TSpline SaveAs not using equidistant and loss of precision; [#11924] - PyROOT: wrong overload resolution for C++ functions from python; [#11901] - Binary distribution for Ubutu 22.04 is broken (on WSL2); [#11750] - FindXROOTD adds libraries to link against irrespective of xrootd version used; [#11746] - TH2::Fill(const char namex, const char namey, Double_t w) doesn’t update fTsumwxy; [#11743] - CMake >= 3.24 fails to build LZMA: WARNING: ‘aclocal-1.15’ is missing on your system.; [#11673] - [ntuple] Consider making REntry::AddValue() publicly accessible; [#11667] - [cling] GetClassSharedLibs fails to find several classes; [#11653] - TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; [#11596] - cppyy does not retrieve correct size of type when pythonizing vector; [#11484] - roottest/root/meta/genreflex/ROOT-5768 needs to be enabled; [#11411] - PyROOT Python list of strings -> std::initializer_list< std::string > conversion is broken; [#11395] - Migrate to pcre2; [#11353] - Compiled program with libNew.so crash; [#11304] - WW option for fit functions as the W option; [#11238] - an old bug in ROOT v6 TAB completion ?; [#11197] - Build github release into version release procedure; [#11190] - ROOT compiled with -Ddev=ON crashes when type # in ROOT session; [#11021] - [Fit Panel] Fitting to Gaus + Pol0 in two steps is unnecessarily hard; [#10891] - [RF] Deletion order of objects in RooFit/RooStats tutorials should not matter in Python; [#10871] - [DF][ntuple] Better task splitting with RDF+RNTuple; [#10866] - ACLiC flags parsing for compiler command line options broken in certain cases; [#10684] - PyROOT Cannot use SofieFunctor in Python; [#10664] - [ntuple] Expose fixed-size arrays as RVecs in RDF datasource; [#1",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:37521,Modifiability,variab,variables,37521,"+ Progress bar would be better.; [#9292] - Integer overflow in TTreeCache::FillBuffer; [#8959] - ninja clean does not remove modules.idx; [#8952] - Make hadd return a non-zero exit code when encountering a corrupted file; [#8942] - cannot buid the dependent project; [#8794] - [TGNumberEntry] centiseconds; [#8720] - Apply TChain::SetImplicitMT() to underlying trees; [#8639] - (RDataFrame) AsNumpy returns Boolean branches as ‘object’ dtype numpy arrays; [#8582] - TThreadTimer behavior; [#8581] - [ntuple] RNTupleModel columns ownership issue; [#8517] - Add integer support to TVectorT; [#8494] - cling crashes on conditional parameter in template; [#8260] - Build system cannot detect version of oneTBB; [#8148] - Document TMethodCall class limitations; [#7950] - Assertion exception including header file with GaudiPython module; [#7900] - Support spectator variables in RReader; [#7872] - TExecutorCRTP::Map() should support void; [#7871] - Usability of TExecutor::MapReduce; [#7845] - Improve TMatrix reference documentation; [#7805] - Inconsistent and unintuitive behaviour of TFormula::SetParNames and TFormula::SetParameters; [#7774] - Unreasonably slow behaviour of CompileMacro; [#7699] - [VecOps] Make free functions in VecOps better visible; [#7686] - PyROOT Segfault when creating proxy to derived class with multiple overloads; [#7669] - Inconsistent behaviour in wildcard import; [#7644] - Provide in the cmake configuration the C++ standard which was used to compile ROOT; [#7627] - Fix TMVA group links; [#7159] - TNetXNGFile::Open fails with double slash (//) in path; [#7128] - Cannot build ROOT if another ROOT at /usr/local; [#6900] - mathmore: invalid roots for a quartic polynomial; [#6811] - Bug displaying several 3D objects such as TGraph2D on the same canvas; [#6755] - Greek letter epsilon not rendered correctly using TLatex with OpenGL.CanvasPreferGL option, segmentation fault.; [#6753] - CMake dependency on Python: use targets; [#6616] - hadd writes files with unspe",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:38086,Modifiability,config,configuration,38086,"+ Progress bar would be better.; [#9292] - Integer overflow in TTreeCache::FillBuffer; [#8959] - ninja clean does not remove modules.idx; [#8952] - Make hadd return a non-zero exit code when encountering a corrupted file; [#8942] - cannot buid the dependent project; [#8794] - [TGNumberEntry] centiseconds; [#8720] - Apply TChain::SetImplicitMT() to underlying trees; [#8639] - (RDataFrame) AsNumpy returns Boolean branches as ‘object’ dtype numpy arrays; [#8582] - TThreadTimer behavior; [#8581] - [ntuple] RNTupleModel columns ownership issue; [#8517] - Add integer support to TVectorT; [#8494] - cling crashes on conditional parameter in template; [#8260] - Build system cannot detect version of oneTBB; [#8148] - Document TMethodCall class limitations; [#7950] - Assertion exception including header file with GaudiPython module; [#7900] - Support spectator variables in RReader; [#7872] - TExecutorCRTP::Map() should support void; [#7871] - Usability of TExecutor::MapReduce; [#7845] - Improve TMatrix reference documentation; [#7805] - Inconsistent and unintuitive behaviour of TFormula::SetParNames and TFormula::SetParameters; [#7774] - Unreasonably slow behaviour of CompileMacro; [#7699] - [VecOps] Make free functions in VecOps better visible; [#7686] - PyROOT Segfault when creating proxy to derived class with multiple overloads; [#7669] - Inconsistent behaviour in wildcard import; [#7644] - Provide in the cmake configuration the C++ standard which was used to compile ROOT; [#7627] - Fix TMVA group links; [#7159] - TNetXNGFile::Open fails with double slash (//) in path; [#7128] - Cannot build ROOT if another ROOT at /usr/local; [#6900] - mathmore: invalid roots for a quartic polynomial; [#6811] - Bug displaying several 3D objects such as TGraph2D on the same canvas; [#6755] - Greek letter epsilon not rendered correctly using TLatex with OpenGL.CanvasPreferGL option, segmentation fault.; [#6753] - CMake dependency on Python: use targets; [#6616] - hadd writes files with unspe",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:41981,Modifiability,extend,extended,41981,"] - BUG (See description note) PyDoubleBuffer tolist and numpy array cause segfault.; [ROOT-9313] - Crash in TFile::Close on Fedora, ROOT v6.10; [ROOT-9320] - Make GenVector data structures constexpr; [ROOT-9321] - Dictionary generation: type normalization issue in pcm file; [ROOT-9448] - libNew returns nullptr instead of implementing operator new, has many warnings; [ROOT-9983] - [DOC] hadd –help does not show description and epilogue; [ROOT-10033] - ROOT::EnableImplicitMT: Number of threads in scheduling environments; [ROOT-10231] - TMatrixD(a,TMatrixD::kInvMult,b) requires b.GetNcols() = a.GetNcols(); [ROOT-10320] - ROOT/meta does not support anonymous unions/structs; [ROOT-10425] - Missing symbols not reported as missing anymore; [ROOT-10546] - RDataFrame cannot be interrupted from PyROOT; [ROOT-10593] - Segmentation fault when calling a not-yet-defined function from ROOT interpreter; [ROOT-10607] - Several ROOT 7 tests fail when assertions are enabled; [ROOT-10613] - Configuration does not fail when fail-on-missing is ON and cudnn is not found; [ROOT-10621] - Segfault if TFile is used with TRint in teardown; [ROOT-10705] - The “x” and “x0” options in THnBase::PrintEntries misbehave; [ROOT-10789] - some cppyy examples do not work under ROOT; [ROOT-10827] - Missing contribution of extended term in the error Correction for extended weighted likelihood fits; [ROOT-10859] - std.make_shared[T] does not work on macOS; [ROOT-10866] - Numerical instabilities when calculating the derivatives for the asymptotically correct erros; [ROOT-10958] - jupyter notebook does not render geometries with new pyroot; [ROOT-10977] - Exit code 0 with failing C++ notebook in nbconvert; [ROOT-11006] - [TTreeReader] Crash when reading array branch. Release 6.32.02; Published on June 18, 2024; Items addressed in this release. [#7236] - Memory leak in TFile::WriteObjectAny, depending on data type; [#10075] - Difficult to configure Xrootd to use non-builtin openssl; [#14051] - [web graphics] W",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:42023,Modifiability,extend,extended,42023,"] - BUG (See description note) PyDoubleBuffer tolist and numpy array cause segfault.; [ROOT-9313] - Crash in TFile::Close on Fedora, ROOT v6.10; [ROOT-9320] - Make GenVector data structures constexpr; [ROOT-9321] - Dictionary generation: type normalization issue in pcm file; [ROOT-9448] - libNew returns nullptr instead of implementing operator new, has many warnings; [ROOT-9983] - [DOC] hadd –help does not show description and epilogue; [ROOT-10033] - ROOT::EnableImplicitMT: Number of threads in scheduling environments; [ROOT-10231] - TMatrixD(a,TMatrixD::kInvMult,b) requires b.GetNcols() = a.GetNcols(); [ROOT-10320] - ROOT/meta does not support anonymous unions/structs; [ROOT-10425] - Missing symbols not reported as missing anymore; [ROOT-10546] - RDataFrame cannot be interrupted from PyROOT; [ROOT-10593] - Segmentation fault when calling a not-yet-defined function from ROOT interpreter; [ROOT-10607] - Several ROOT 7 tests fail when assertions are enabled; [ROOT-10613] - Configuration does not fail when fail-on-missing is ON and cudnn is not found; [ROOT-10621] - Segfault if TFile is used with TRint in teardown; [ROOT-10705] - The “x” and “x0” options in THnBase::PrintEntries misbehave; [ROOT-10789] - some cppyy examples do not work under ROOT; [ROOT-10827] - Missing contribution of extended term in the error Correction for extended weighted likelihood fits; [ROOT-10859] - std.make_shared[T] does not work on macOS; [ROOT-10866] - Numerical instabilities when calculating the derivatives for the asymptotically correct erros; [ROOT-10958] - jupyter notebook does not render geometries with new pyroot; [ROOT-10977] - Exit code 0 with failing C++ notebook in nbconvert; [ROOT-11006] - [TTreeReader] Crash when reading array branch. Release 6.32.02; Published on June 18, 2024; Items addressed in this release. [#7236] - Memory leak in TFile::WriteObjectAny, depending on data type; [#10075] - Difficult to configure Xrootd to use non-builtin openssl; [#14051] - [web graphics] W",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:42605,Modifiability,config,configure,42605,"t found; [ROOT-10621] - Segfault if TFile is used with TRint in teardown; [ROOT-10705] - The “x” and “x0” options in THnBase::PrintEntries misbehave; [ROOT-10789] - some cppyy examples do not work under ROOT; [ROOT-10827] - Missing contribution of extended term in the error Correction for extended weighted likelihood fits; [ROOT-10859] - std.make_shared[T] does not work on macOS; [ROOT-10866] - Numerical instabilities when calculating the derivatives for the asymptotically correct erros; [ROOT-10958] - jupyter notebook does not render geometries with new pyroot; [ROOT-10977] - Exit code 0 with failing C++ notebook in nbconvert; [ROOT-11006] - [TTreeReader] Crash when reading array branch. Release 6.32.02; Published on June 18, 2024; Items addressed in this release. [#7236] - Memory leak in TFile::WriteObjectAny, depending on data type; [#10075] - Difficult to configure Xrootd to use non-builtin openssl; [#14051] - [web graphics] Web graphics resizes canvas despite canvas size definition in the macro; [#15321] - [MSVC] Root is failed with error G694476FC: static_assert failed “Unexpected size”; [#15405] - [RF] ExternalConstraints documentation incorrect for RooMCStudy; [#15430] - Test failures with Python 3.13; [#15473] - Segmentation fault when building with the mold linker; [#15498] - gPad is not consistent in pyROOT with web canvas; [#15511] - Possible memory corruption in cling; [#15579] - Performance regression (slowdown) in ALICE event generation; [#15686] - JITted code changes the execution order of computation graph nodes; [#15688] - PyROOT TProfile2D::Fill ambiguities preventing use of some signatures in pyROOT; [#15690] - [RF] SegFault in RooBernstein::fillBuffer; [#15694] - [RF] New RooFit EvalBackend returning incorrect result for binned likelihoods; [#15703] - Leaking memory though strings in PyROOT; [#15727] - Windows CMake project cannot find_library() after integrating with ROOT.; [#15751] - [RF] Using a conditional RooProdPdf in a multi-channel fit sp",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:44878,Modifiability,polymorphi,polymorphic,44878," find_library() after integrating with ROOT.; [#15751] - [RF] Using a conditional RooProdPdf in a multi-channel fit spawns too many integrals with new CPU evaluation backend; [#15791] - JS ROOT does not draw tprofile2d correctly with “TEXT” draw option; [#15799] - pyunittests-pyroot-pyz-ttree-setbranchaddress segfaults with Python 3.13; [ROOT-7412] - Strange results looking for nested types; [ROOT-8439] - PyROOT does not treat exceptions properly in overloaded methods; [ROOT-9307] - TPad::GetListOfPrimitives() double deletion error in TList::Clear(). Release 6.32.04; Published on August 14, 2024; Items addressed in this release. [#7223] - [RF] RDataFrame to RooDataSet/RooDataHist conversion; [#7782] - [RF] Allow to set nbins for RooPlot (or disallow); [#9838] - [RF] RooCurve::Average() overestimating average values of standard precision curves on small; [#11565] - [RF] Crash in RooStats::ToyMCSample::GenerateToyData; [#13387] - Please recover SrvAuthenticate from libSrvAuth library; [#14541] - [ROOT-6193] Editor for palette axis cannot set title properties; [#15104] - new PyROOT/cppyy fails to pickle enums; [#15161] - Attribute (getitem) differences for PyROOT objects in ROOT master; [#15234] - cppyy - wrong object type when iterating over a polymorphic container; [#15269] - Iterators in pyROOT working differently in ROOT master compared to 6.30/02; [#15315] - PyROOT Example with inheriting from ROOT.Math.IMultiGenFunction doesn’t work after recent cppyy upgrade; [#15425] - TTreeProcessorMP processes events multiple times when there are more threads than entries; [#15755] - [RF][HS3] Higgs discovery workspaces roundtrip; [#15874] - [Hist] Backwards compatibility broken for THnSparseL in 6.32; [#15887] - Broken plot .C macros for default Name() argument in plotOn(); [#15977] - [gui] Event StatusBar does not work well when TMarker outside of zoom region; [#15986] - Problems with TUri compilation; [#16031] - VecOps binary functions not using the right types; [#16038] - ",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:45019,Modifiability,inherit,inheriting,45019," [ROOT-8439] - PyROOT does not treat exceptions properly in overloaded methods; [ROOT-9307] - TPad::GetListOfPrimitives() double deletion error in TList::Clear(). Release 6.32.04; Published on August 14, 2024; Items addressed in this release. [#7223] - [RF] RDataFrame to RooDataSet/RooDataHist conversion; [#7782] - [RF] Allow to set nbins for RooPlot (or disallow); [#9838] - [RF] RooCurve::Average() overestimating average values of standard precision curves on small; [#11565] - [RF] Crash in RooStats::ToyMCSample::GenerateToyData; [#13387] - Please recover SrvAuthenticate from libSrvAuth library; [#14541] - [ROOT-6193] Editor for palette axis cannot set title properties; [#15104] - new PyROOT/cppyy fails to pickle enums; [#15161] - Attribute (getitem) differences for PyROOT objects in ROOT master; [#15234] - cppyy - wrong object type when iterating over a polymorphic container; [#15269] - Iterators in pyROOT working differently in ROOT master compared to 6.30/02; [#15315] - PyROOT Example with inheriting from ROOT.Math.IMultiGenFunction doesn’t work after recent cppyy upgrade; [#15425] - TTreeProcessorMP processes events multiple times when there are more threads than entries; [#15755] - [RF][HS3] Higgs discovery workspaces roundtrip; [#15874] - [Hist] Backwards compatibility broken for THnSparseL in 6.32; [#15887] - Broken plot .C macros for default Name() argument in plotOn(); [#15977] - [gui] Event StatusBar does not work well when TMarker outside of zoom region; [#15986] - Problems with TUri compilation; [#16031] - VecOps binary functions not using the right types; [#16038] - Could NOT find Vdt error when using 6.32.02 docker image; [#16087] - [docs] Potential typo in function name case: DistanceToPrimitive; [#16201] - PyROOT Support most recent numba version 0.60.0 intervals; [ROOT-6286] - Reading a TChain and TTreeCache; [ROOT-7991] - THnSparse::ProjectionND yields disfunctional histogram; [ROOT-8238] - TPrincipal tries to make histograms with nbin=0; [ROOT-851",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:6866,Performance,optimiz,optimizations,6866," be possible to read RNTuples written in the previous format anymore.; Support has been added for several new field types: std::unordered_set<T>, std::map<K,V>, std::unordered_map<K,V>; Support has been added for on-disk half-precision (IEEE 754-2008 16-bit) float fields. This can be enabled through RField<float>::SetHalfPrecision(). On reading, values of such fields are represented as regular, 32-bit floats.; A new RNTupleInspector utility class has been added, to provide information about the on-disk metadata of an RNTuple.; A new RNTupleParallelWriter class has been added, providing (initial) support for parallel writing of RNTuples.; A new static method RFieldBase::Check() has been added, which produces a support status report of a type with regards to RNTuple I/O.; A new internal RNTupleMerger class has been added, enabling the merging of different page sources into one page sink. This also means that RNTuples can be merged through hadd.; Zero-copy bulk reading has been added, with extra optimizations for ROOT::RVec fields.; It is now possible to use the RNTupleView with an external address with type erasure, e.g.:; std::shared_ptr<void> data{new float()};; auto view = reader->GetView(""pt"", data);; This enables use cases such as reading one specific entry of one specific field into a previously allocated memory location.; Further integration with RDataFrame: it is now possible to create RDataFrame for chains of RNTuples. This addition also comes with improvements to the multi-threaded work scheduling.; Many additional bug fixes and improvements. Please, report any issues regarding the above mentioned features should you encounter them. RNTuple is still in pre-production. The on-disk format is scheduled to be finalized by the end of 2024. Thus, we appreciate feedback and suggestions for improvement.; Histogram Libraries. Implement the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum().; Print a warning when the range given to TAxis::SetRange ",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:7358,Performance,multi-thread,multi-threaded,7358,"about the on-disk metadata of an RNTuple.; A new RNTupleParallelWriter class has been added, providing (initial) support for parallel writing of RNTuples.; A new static method RFieldBase::Check() has been added, which produces a support status report of a type with regards to RNTuple I/O.; A new internal RNTupleMerger class has been added, enabling the merging of different page sources into one page sink. This also means that RNTuples can be merged through hadd.; Zero-copy bulk reading has been added, with extra optimizations for ROOT::RVec fields.; It is now possible to use the RNTupleView with an external address with type erasure, e.g.:; std::shared_ptr<void> data{new float()};; auto view = reader->GetView(""pt"", data);; This enables use cases such as reading one specific entry of one specific field into a previously allocated memory location.; Further integration with RDataFrame: it is now possible to create RDataFrame for chains of RNTuples. This addition also comes with improvements to the multi-threaded work scheduling.; Many additional bug fixes and improvements. Please, report any issues regarding the above mentioned features should you encounter them. RNTuple is still in pre-production. The on-disk format is scheduled to be finalized by the end of 2024. Thus, we appreciate feedback and suggestions for improvement.; Histogram Libraries. Implement the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum().; Print a warning when the range given to TAxis::SetRange is invalid.; Fix projection name in TH3 as requested here. Parallelism. The ROOT::Experimental::TFuture template has been removed. RooFit Libraries; New CPU likelihood evaluation backend by default; The new vectorizing CPU evaluation backend is not the default for RooFit likelihoods. Likelihood minimization is now up to 10x faster on a single CPU core.; If you experience unexpected problems related to the likelihood evaluation, you can revert back to the old backend by passing RooFit::",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:8539,Performance,perform,performance,8539,"should you encounter them. RNTuple is still in pre-production. The on-disk format is scheduled to be finalized by the end of 2024. Thus, we appreciate feedback and suggestions for improvement.; Histogram Libraries. Implement the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum().; Print a warning when the range given to TAxis::SetRange is invalid.; Fix projection name in TH3 as requested here. Parallelism. The ROOT::Experimental::TFuture template has been removed. RooFit Libraries; New CPU likelihood evaluation backend by default; The new vectorizing CPU evaluation backend is not the default for RooFit likelihoods. Likelihood minimization is now up to 10x faster on a single CPU core.; If you experience unexpected problems related to the likelihood evaluation, you can revert back to the old backend by passing RooFit::EvalBackend(""legacy"") to RooAbsPdf::fitTo() or RooAbsPdf::createNLL().; In case you observe any slowdowns with the new likelihood evaluation, please open a GitHub issue about this, as such a performance regression is considered a bug.; Asymptotically correct uncertainties for extended unbinned likelihood fits; Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method when using the RooFit::AsymptoticError() command argument in RooAbsPdf::fitTo(). See also this writeup on extended weighted fits that is also linked from the reference guide. The pull request that introduced this feature might also be a good reference.; Compile your code with memory safe interfaces; If you define the ROOFIT_MEMORY_SAFE_INTERFACES preprocessor macro, the RooFit interface changes in a way such that memory leaks are avoided.; The most prominent effect of this change is that many functions that used to return an owning pointer (e.g., a pointer to an object that you need to ",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:13897,Performance,load,loading,13897,"use shapeClients(); RooAbsArg::serverMIterator(): use servers(); RooAbsCollection::createIterator(): use begin(), end() and range-based for loops; RooAbsCollection::iterator(): same; RooAbsCollection::fwdIterator(): same; RooWorkspace::componentIterator(): use RooWorkspace::components() with range-based loop. Deprecation of legacy test statistics classes in public interface; Instantiating the following classes and even including their header files is deprecated, and the headers will be removed in ROOT 6.34:. RooAbsTestStatistic; RooAbsOptTestStatistic; RooNLLVar; RooChi2Var; RooXYChi2Var. Please use the higher-level functions RooAbsPdf::createNLL() and RooAbsPdf::createChi2() if you want to create objects that represent test statistics.; Change of RooParamHistFunc; The RooParamHistFunc didn’t take any observable RooRealVar as constructor argument. It assumes as observable the internal variables in the passed RooDataHist. This means it was in most contexts unusable, because the input can’t be changed, other than loading a different bin in the dataset.; Furthermore, there was actually a constructor that took a RooAbsArg x, but it was simply ignored.; To fix all these problems, the existing constructors were replaced by a new one that takes the observable explicitly.; Since the old constructors resulted in wrong computation graphs that caused trouble with the new CPU evaluation backend, they had to be removed without deprecation. Please adapt your code if necessary.; Renaming of some RooFit classes; The RooPower was renamed to RooPowerSum, and RooExpPoly was renamed to RooLegacyExpPoly.; This was a necessary change, because the names of these classes introduced in ROOT 6.28 collided with some classes in CMS combine, which were around already long before. Therefore, the classes had to be renamed to not cause any problems for CMS.; In the unlikeliy case where you should have used these new classes for analysis already, please adapt your code to the new names and re-creat",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:17501,Performance,perform,performs,17501,"phs (more than O(10K) nodes in the same branch). Preliminary tests indicate between 30% and a factor 2.5 in memory decrease. This improvement is transparent for RDataFrame users. Graphics backends; The ROOT release 6.32 brings a lot of impressive enhancements to the Web Graphics package, greatly surpassing the features and capabilities of version 6.30. This update provides users with a more robust Web Graphics. The JSROOT version has been updated to v7.7. 2D Graphics Libraries. TMultiGraph: Add the objects from the list of functions in legend produce by TLegend.; Implement the IsInside method for TEllipse, TCrown and TDiamond. Also, a new graphics example inside.C has been added.; Two new methods in TColor: ListColors() and GetColorByname().; Make sure the option L draws closed polygon for TH2Poly.; Use Tex Gyre fonts for sans serif (similar to Helvetica) .; The new method TPad::ModifiedUpdate is short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().; Improve SetTextSize error: show code and values.; Very long text string generated a wrong SVG file.; Fix the option SAME works for TGraph2D.; Implement the title for the palette of a TH3.; Fix typo in TLegend::PaintPrimitives() and improve the exclusion graphs legend.; SetParameters(…) or SetParameter(…) on a TF1 reset the properties of the axis that have been previously defined. This was due to the Update() that was done after the parameters definition.; Update fonts’ documentation (CMS request).; Delaunay triangles were computed by the package triangle.c included in the ROOT code. This package had several problems: - It was not maintained anymore. - Its license was not compatible with LGPL. It is now replaced by the CDT package which is properly maintained and has a license (MLP) compatible with LGPL. 3D Graphics Libraries; REve. Introduce lightweight visualization of instanced shapes on the level of 100.000 instances. This is integrated in digit visu",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:26047,Performance,cache,cacheread,26047,"tHub based build system.; Bugs and Issues fixed in this release; More than 200 items were addressed for this release. The full list is:. [#15621] - Buffer overflow in TBranch::Init; [#15610] - Memory leak in TTree getattr pythonization; [#15590] - Infinite recursion in TFile::Open; [#15460] - TEnum::GetEnum(“B”)->GetUnderlyingType() does not following typedefs; [#15413] - Fails to build with cuDNN version 9; [#15406] - TEnum::GetEnum does not seem to see ‘through’ using statements.; [#15399] - Memory leak with jitted nodes if the execution is never triggered; [#15396] - [TMVA] Pymva test (Keras) failing on 632 and main; [#15370] - Broken link in HS3 printout; [#15340] - Webgraphics: canvas displayed, but many error printed; [#15253] - C++ standard not propagated via CMake anymore; [#15197] - RBDT does not support xgboost inference; [#15156] - Segfault in TMVA::Experimental::SOFIE::RModel::Streamer; [#15139] - cmake option -Dall=YES breaks the cmake; [#15118] - jsoninterface does not build if provided with RapidYAML; [#15108] - Turn off clang-format for Linkdef files; [#15090] - TClass::GetClassInfo() is not thread safe; [#15077] - Passing different floating point types to RVec utility functions; [#15048] - [ntuple] Handling of virtual inheritance broken; [#15040] - RDataFrame Inaccurate example of progress bar from documentation; [#15028] - RDataFrame Unable to cacheread remote file; [#15027] - spurrious cmake message about AfterImage with -Dminimal=ON; [#14981] - RVecs leak memory with np.asarray in pyROOT; [#14964] - ROOT-HEAD fails with “cling interactive line includer >>>: fatal error: module file ‘[snip]/Vc.pcm’ not found: module file not found”; [#14958] - ROOT_HEAD failed with error message: Fail to detect cryptographic random generator; [#14921] - ROOT Fails to build macOS 14.4 arm64 Xcode 15.3; [#14914] - VecOps::Take with default argument doesn’t check correctly the out of boundary condition; [#14910] - hadd issue when using parallelization together with in",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:26829,Performance,load,loaded,26829,"90] - TClass::GetClassInfo() is not thread safe; [#15077] - Passing different floating point types to RVec utility functions; [#15048] - [ntuple] Handling of virtual inheritance broken; [#15040] - RDataFrame Inaccurate example of progress bar from documentation; [#15028] - RDataFrame Unable to cacheread remote file; [#15027] - spurrious cmake message about AfterImage with -Dminimal=ON; [#14981] - RVecs leak memory with np.asarray in pyROOT; [#14964] - ROOT-HEAD fails with “cling interactive line includer >>>: fatal error: module file ‘[snip]/Vc.pcm’ not found: module file not found”; [#14958] - ROOT_HEAD failed with error message: Fail to detect cryptographic random generator; [#14921] - ROOT Fails to build macOS 14.4 arm64 Xcode 15.3; [#14914] - VecOps::Take with default argument doesn’t check correctly the out of boundary condition; [#14910] - hadd issue when using parallelization together with indirect file; [#14902] - compilation error; [#14863] - [hist] TH1::SaveAs missing default option argument causes compilation errors; [#14855] - TRatioPlot crashes if loaded from the file; [#14842] - TRatioplot gives “different” results with Web Graphics; [#14838] - Problems with Confidence Band of TRatioPlot; [#14801] - TEfficiency drawing to .C is broken; [#14793] - 6.26 cannot read file written with 6.30.4; [#14772] - [cling] Undocumented behaviour of root macro_C.so; [#14767] - rootn.exe instant crash on startup; [#14765] - TGenPhaseSpace weight normalization; [#14748] - [ntuple] Show and PrintInfo does not work for friend RNTuples; [#14601] - std::source_location not found when running with c++20 enabled; [#14599] - The example th2polyUSA.C needs re-labelling; [#14598] - A “printf” change the behaviour of a macro …; [#14595] - Problem when creating dictionary in Osx 12.7, Xcode 14.2; [#14594] - Provide file.root request in THttpServer; [#14593] - Build fails with CLING_DEBUG=1 set; [#14586] - [ROOT-6317] using namespace statement does not provoke autoload; [#14576] - [",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:29537,Performance,load,loading,29537,"r I/O customization rule is too strict.; [#14458] - Crash when doing Weighted Likelihood fit; [#14453] - Implement IsInside for TEllipse; [#14401] - The red frame around the selected pad of the webgui is not configurable; [#14385] - Strange behavior with TF1 and SetParameters; [#14381] - Legend entry for exclusion graph; [#14376] - build failure with mysql 8.3; [#14372] - File with mtime equal to 0 are ignored by Cling.; [#14333] - “Empty plot” for df014_CSVDataSource.C; [#14331] - Unexpected behaviour when using the Project3D function to make a TH2 from a TH3; [#14329] - [RF] RDataFrameToRooFit - Clarification on returned object; [#14324] - Compatibility Issue with thisroot.sh and zsh; [#14320] - [RF] Wrong analytic integrals when using Gaussians with sigma depending on the observable; [#14303] - Test failure with nbconvert-7.14; [#14302] - The command “root –notebook” is not allowed on Windows 11; [#14277] - Cling triggers a huge number of openat calls when loading libraries; [#14263] - [tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; [#14256] - TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; [#14244] - String comparison operators defined in TString.h should be defined as constexpr; [#14229] - [6.30] root-config –git-revision broken; [#14225] - [RF] Segmentation fault in ROOT 6.30 workspace creation; [#14223] - Extremely long startup time when loading dictionaries with pyroot; [#14219] - [cling] Use deduction guides for llvm::ArrayRef; [#14211] - Implement value printing for std::source_location; [#14205] - [cling] Replace llvm::Optional and llvm::None with std::optional; [#14199] - Memory hoarding triggered by the TPluginManager; [#14188] - cmake find_package ROOT 6.30 broken: it requires nlohmann-json; [#14163] - cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; [#14162] - RooFFTConvPdf is not working for ROOT 6.30/02; [#14157] - Minuit2 standalone build: Sta",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:30001,Performance,load,loading,30001,"#14329] - [RF] RDataFrameToRooFit - Clarification on returned object; [#14324] - Compatibility Issue with thisroot.sh and zsh; [#14320] - [RF] Wrong analytic integrals when using Gaussians with sigma depending on the observable; [#14303] - Test failure with nbconvert-7.14; [#14302] - The command “root –notebook” is not allowed on Windows 11; [#14277] - Cling triggers a huge number of openat calls when loading libraries; [#14263] - [tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; [#14256] - TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; [#14244] - String comparison operators defined in TString.h should be defined as constexpr; [#14229] - [6.30] root-config –git-revision broken; [#14225] - [RF] Segmentation fault in ROOT 6.30 workspace creation; [#14223] - Extremely long startup time when loading dictionaries with pyroot; [#14219] - [cling] Use deduction guides for llvm::ArrayRef; [#14211] - Implement value printing for std::source_location; [#14205] - [cling] Replace llvm::Optional and llvm::None with std::optional; [#14199] - Memory hoarding triggered by the TPluginManager; [#14188] - cmake find_package ROOT 6.30 broken: it requires nlohmann-json; [#14163] - cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; [#14162] - RooFFTConvPdf is not working for ROOT 6.30/02; [#14157] - Minuit2 standalone build: StandAlone.cmake looks for the wrong path for VERSION_FILE; [#14113] - The find_package(root) command fails when using Root installed via Homebrew.; [#14101] - Missing documentation for RDataSetSpec; [#14097] - Cleaner stack traces in python; [#14085] - thisroot.sh does not recognize bash when running in qemu-x86_64; [#14084] - [ntuple] RRecordField creation crashes when TStreamerInfo has insufficient information; [#14075] - [FreeBSD] root.exe crash at end of compilation during modules.idx generation; [#14068] - ROOT 6.30/00 reports root-config --version as 6.30.00;",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:33771,Performance,multi-thread,multi-thread,33771,"l in /usr/lib sometimes take priority); [#13041] - TVirtualFitter::GetFitter() unexpectedly returns NULL on macOS 12 and 13 with Xcode 14; [#13019] - LLVM assertion failure in HandleUnionActiveMemberChange; [#12993] - std::source_location not working in the interpreter; [#12959] - [ntuple] Distinguish between connecting a page sink and a page source in RColumn; [#12783] - [IO] Writing HistFactory model file twice gives strange results since ROOT 6.26.02; [#12770] - tmva/sofie_parsers does not build with latest Protobuf (22.x); [#12744] - wrong Python version found during build; [#12718] - A crash when trying to initialise a vector from a >1D numpy array in PyROOT; [#12685] - TEnum::GetEnum does NOT process typedefs; [#12644] - Can’t find cxxabi.h and build module ‘ROOT_Foundation_Stage1_NoRTTI’ when building from source on Macos; [#12631] - Unable to build master with external XROOTD; [#12621] - [I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; [#12592] - [doc] TProfile bin error documentation is not correct; [#12591] - Allow partial enablement of modules; [#12527] - MacOS build fails if configured without cocoa; [#12492] - The problem with building ROOT v6-26-10 in debug mode on ubuntu 20.04; [#12230] - Wrong conversion from Numpy Array to std.vector when using the wrong type; [#12091] - TSpline SaveAs not using equidistant and loss of precision; [#11924] - PyROOT: wrong overload resolution for C++ functions from python; [#11901] - Binary distribution for Ubutu 22.04 is broken (on WSL2); [#11750] - FindXROOTD adds libraries to link against irrespective of xrootd version used; [#11746] - TH2::Fill(const char namex, const char namey, Double_t w) doesn’t update fTsumwxy; [#11743] - CMake >= 3.24 fails to build LZMA: WARNING: ‘aclocal-1.15’ is missing on your system.; [#11673] - [ntuple] Consider making REntry::AddValue() publicly accessible; [#11667] - [cling] GetClassSharedLibs fails to find several classes; [#11653] - TFile plugin",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:33813,Performance,bottleneck,bottlenecks,33813,"l in /usr/lib sometimes take priority); [#13041] - TVirtualFitter::GetFitter() unexpectedly returns NULL on macOS 12 and 13 with Xcode 14; [#13019] - LLVM assertion failure in HandleUnionActiveMemberChange; [#12993] - std::source_location not working in the interpreter; [#12959] - [ntuple] Distinguish between connecting a page sink and a page source in RColumn; [#12783] - [IO] Writing HistFactory model file twice gives strange results since ROOT 6.26.02; [#12770] - tmva/sofie_parsers does not build with latest Protobuf (22.x); [#12744] - wrong Python version found during build; [#12718] - A crash when trying to initialise a vector from a >1D numpy array in PyROOT; [#12685] - TEnum::GetEnum does NOT process typedefs; [#12644] - Can’t find cxxabi.h and build module ‘ROOT_Foundation_Stage1_NoRTTI’ when building from source on Macos; [#12631] - Unable to build master with external XROOTD; [#12621] - [I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; [#12592] - [doc] TProfile bin error documentation is not correct; [#12591] - Allow partial enablement of modules; [#12527] - MacOS build fails if configured without cocoa; [#12492] - The problem with building ROOT v6-26-10 in debug mode on ubuntu 20.04; [#12230] - Wrong conversion from Numpy Array to std.vector when using the wrong type; [#12091] - TSpline SaveAs not using equidistant and loss of precision; [#11924] - PyROOT: wrong overload resolution for C++ functions from python; [#11901] - Binary distribution for Ubutu 22.04 is broken (on WSL2); [#11750] - FindXROOTD adds libraries to link against irrespective of xrootd version used; [#11746] - TH2::Fill(const char namex, const char namey, Double_t w) doesn’t update fTsumwxy; [#11743] - CMake >= 3.24 fails to build LZMA: WARNING: ‘aclocal-1.15’ is missing on your system.; [#11673] - [ntuple] Consider making REntry::AddValue() publicly accessible; [#11667] - [cling] GetClassSharedLibs fails to find several classes; [#11653] - TFile plugin",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:528,Safety,safe,safe,528,". ROOT Version 6.32 Release Notes. ROOT Version 6.32 Release Notes; 2024-05-26. Introduction; Deprecation and Removal; Core Libraries; I/O Libraries; hadd respects compression settings. TTree Libraries; Add files from subdirectories with TChain::Add globbing; Improved efficiency of TTree friends with indices. RNTuple; Histogram Libraries; Parallelism; RooFit Libraries; New CPU likelihood evaluation backend by default; Asymptotically correct uncertainties for extended unbinned likelihood fits; Compile your code with memory safe interfaces; Removal of some memory-unsafe interfaces; Deprecation of legacy iterators; Deprecation of legacy test statistics classes in public interface; Change of RooParamHistFunc; Renaming of some RooFit classes. RDataFrame; Graphics backends; 2D Graphics Libraries; 3D Graphics Libraries; REve. PROOF Libraries; PyROOT; Different representation of std::string; No more implicit conversion of static size char buffer to Python strings; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; Removal of Python 2 support; More usage of the public cppyy API. Class Reference Guide; Build, Configuration and Testing Infrastructure; Bugs and Issues fixed in this release; Release 6.32.02; Items addressed in this release. Release 6.32.04; Items addressed in this release. Release 6.32.06; Items addressed in this release. HEAD of the v6-32-00-patches branch. Introduction; ROOT version 6.32.00 was released on 28 May 2024. This release is a long term support one, ideal for inclusion in production or data taking software stacks of experiments.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Anton Alkin, Sungkyunkwan University; Guilherme Amadio, CERN/IT,; Abhigyan Acherjee, University of Cincinnati,; Bertrand Bellenot, CERN/EP-SFT,; Jakob Blomer, CERN/EP-SFT,; Rene Brun,; Carsten Burgard, DESY; Will Buttinger, RAL,; Philippe Canal, FNAL,; Jolly Chen, CERN/EP-SFT,; Olivier Co",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:568,Safety,unsafe,unsafe,568,". ROOT Version 6.32 Release Notes. ROOT Version 6.32 Release Notes; 2024-05-26. Introduction; Deprecation and Removal; Core Libraries; I/O Libraries; hadd respects compression settings. TTree Libraries; Add files from subdirectories with TChain::Add globbing; Improved efficiency of TTree friends with indices. RNTuple; Histogram Libraries; Parallelism; RooFit Libraries; New CPU likelihood evaluation backend by default; Asymptotically correct uncertainties for extended unbinned likelihood fits; Compile your code with memory safe interfaces; Removal of some memory-unsafe interfaces; Deprecation of legacy iterators; Deprecation of legacy test statistics classes in public interface; Change of RooParamHistFunc; Renaming of some RooFit classes. RDataFrame; Graphics backends; 2D Graphics Libraries; 3D Graphics Libraries; REve. PROOF Libraries; PyROOT; Different representation of std::string; No more implicit conversion of static size char buffer to Python strings; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; Removal of Python 2 support; More usage of the public cppyy API. Class Reference Guide; Build, Configuration and Testing Infrastructure; Bugs and Issues fixed in this release; Release 6.32.02; Items addressed in this release. Release 6.32.04; Items addressed in this release. Release 6.32.06; Items addressed in this release. HEAD of the v6-32-00-patches branch. Introduction; ROOT version 6.32.00 was released on 28 May 2024. This release is a long term support one, ideal for inclusion in production or data taking software stacks of experiments.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Anton Alkin, Sungkyunkwan University; Guilherme Amadio, CERN/IT,; Abhigyan Acherjee, University of Cincinnati,; Bertrand Bellenot, CERN/EP-SFT,; Jakob Blomer, CERN/EP-SFT,; Rene Brun,; Carsten Burgard, DESY; Will Buttinger, RAL,; Philippe Canal, FNAL,; Jolly Chen, CERN/EP-SFT,; Olivier Co",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:3560,Safety,unsafe,unsafe,3560,"adlener, DESY,; Lorenzo Moneta, CERN/EP-SFT,; Alja Mrak Tadel, UCSD/CMS,; Axel Naumann, CERN/EP-SFT,; Dante Niewenhuis, VU Amsterdam; Luis Antonio Obis Aparicio, University of Zaragoza, Ianna Osborne, Princeton University,; Vincenzo Eduardo Padulano, CERN/EP-SFT,; Danilo Piparo, CERN/EP-SFT,; Fons Rademakers, CERN/IT,; Jonas Rembser, CERN/EP-SFT,; Andrea Rizzi, University of Pisa,; Andre Sailer, CERN/EP-SFT,; Garima Singh, ETH,; Juraj Smiesko, CERN/RCS-PRJ-FC, Pavlo Svirin, National Technical University of Ukraine,; Maciej Szymanski, Argonne,; Christian Tacke, Darmstadt University,; Matevz Tadel, UCSD/CMS,; Alvaro Tolosa Delgado, CERN/RCS-PRJ-FC,; Devajith Valaparambil Sreeramaswamy, CERN/EP-SFT,; Peter Van Gemmeren, Argonne,; Vassil Vassilev, Princeton/CMS,; Wouter Verkerke, NIKHEF/ATLAS, Stefan Wunsch; Deprecation and Removal. The RooFit legacy iterators are deprecated and will be removed in ROOT 6.34 (see section “RooFit libraries”); Some memory-unsafe RooFit interfaces were removed; Some redundant RooDataSet constructors are deprecated and will be removed in ROOT 6.34. Please use the RooDataSet constructors that take RooFit command arguments instead; ROOT does not longer support Python 2. The minimum required Python version to build ROOT is 3.8.; Support for wildcard imports like from ROOT import * is dropped from PyROOT; Support for external (ie. non-builtin) libAfterImage is now deprecated and it will be removed in next release 6.34.; The TList::TList(TObject*) constructor is deprecated and will be removed in ROOT 6.34; The deprecated TProofOutputList::TProofOutputList(TObject *o) constructor was removed. Core Libraries; The Cling interpreter now relies on LLVM version 16.; I/O Libraries; hadd respects compression settings; Fixed a bug that was previously changing the compression settings to a single digit number instead of the full value (by default 101).; TTree Libraries; Add files from subdirectories with TChain::Add globbing; It is now possible to add file",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:3604,Safety,redund,redundant,3604,"adlener, DESY,; Lorenzo Moneta, CERN/EP-SFT,; Alja Mrak Tadel, UCSD/CMS,; Axel Naumann, CERN/EP-SFT,; Dante Niewenhuis, VU Amsterdam; Luis Antonio Obis Aparicio, University of Zaragoza, Ianna Osborne, Princeton University,; Vincenzo Eduardo Padulano, CERN/EP-SFT,; Danilo Piparo, CERN/EP-SFT,; Fons Rademakers, CERN/IT,; Jonas Rembser, CERN/EP-SFT,; Andrea Rizzi, University of Pisa,; Andre Sailer, CERN/EP-SFT,; Garima Singh, ETH,; Juraj Smiesko, CERN/RCS-PRJ-FC, Pavlo Svirin, National Technical University of Ukraine,; Maciej Szymanski, Argonne,; Christian Tacke, Darmstadt University,; Matevz Tadel, UCSD/CMS,; Alvaro Tolosa Delgado, CERN/RCS-PRJ-FC,; Devajith Valaparambil Sreeramaswamy, CERN/EP-SFT,; Peter Van Gemmeren, Argonne,; Vassil Vassilev, Princeton/CMS,; Wouter Verkerke, NIKHEF/ATLAS, Stefan Wunsch; Deprecation and Removal. The RooFit legacy iterators are deprecated and will be removed in ROOT 6.34 (see section “RooFit libraries”); Some memory-unsafe RooFit interfaces were removed; Some redundant RooDataSet constructors are deprecated and will be removed in ROOT 6.34. Please use the RooDataSet constructors that take RooFit command arguments instead; ROOT does not longer support Python 2. The minimum required Python version to build ROOT is 3.8.; Support for wildcard imports like from ROOT import * is dropped from PyROOT; Support for external (ie. non-builtin) libAfterImage is now deprecated and it will be removed in next release 6.34.; The TList::TList(TObject*) constructor is deprecated and will be removed in ROOT 6.34; The deprecated TProofOutputList::TProofOutputList(TObject *o) constructor was removed. Core Libraries; The Cling interpreter now relies on LLVM version 16.; I/O Libraries; hadd respects compression settings; Fixed a bug that was previously changing the compression settings to a single digit number instead of the full value (by default 101).; TTree Libraries; Add files from subdirectories with TChain::Add globbing; It is now possible to add file",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:9191,Safety,safe,safe,9191,"lated to the likelihood evaluation, you can revert back to the old backend by passing RooFit::EvalBackend(""legacy"") to RooAbsPdf::fitTo() or RooAbsPdf::createNLL().; In case you observe any slowdowns with the new likelihood evaluation, please open a GitHub issue about this, as such a performance regression is considered a bug.; Asymptotically correct uncertainties for extended unbinned likelihood fits; Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method when using the RooFit::AsymptoticError() command argument in RooAbsPdf::fitTo(). See also this writeup on extended weighted fits that is also linked from the reference guide. The pull request that introduced this feature might also be a good reference.; Compile your code with memory safe interfaces; If you define the ROOFIT_MEMORY_SAFE_INTERFACES preprocessor macro, the RooFit interface changes in a way such that memory leaks are avoided.; The most prominent effect of this change is that many functions that used to return an owning pointer (e.g., a pointer to an object that you need to manually delete) are then returning a std::unique_pt for automatic memory management.; For example this code would not compile anymore, because there is the risk that the caller forgets to delete params:; RooArgSet * params = pdf.getParameters(nullptr);; If you wrap such return values in a std::unique_ptr, then your code will compile both with and without memory safe interfaces:; std::unique_ptr<RooArgSet> params{pdf.getParameters(nullptr)};; Also some virtual RooFit functions like RooAbsReal::createIntegral() are returning a different type conditional on ROOFIT_MEMORY_SAFE_INTERFACES. If you are overriding such a function, you need to use the RooFit::OwningPtr return type, which is an alias for std::unique_ptr in memory-safe mode or an alias f",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:9341,Safety,avoid,avoided,9341,"lated to the likelihood evaluation, you can revert back to the old backend by passing RooFit::EvalBackend(""legacy"") to RooAbsPdf::fitTo() or RooAbsPdf::createNLL().; In case you observe any slowdowns with the new likelihood evaluation, please open a GitHub issue about this, as such a performance regression is considered a bug.; Asymptotically correct uncertainties for extended unbinned likelihood fits; Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method when using the RooFit::AsymptoticError() command argument in RooAbsPdf::fitTo(). See also this writeup on extended weighted fits that is also linked from the reference guide. The pull request that introduced this feature might also be a good reference.; Compile your code with memory safe interfaces; If you define the ROOFIT_MEMORY_SAFE_INTERFACES preprocessor macro, the RooFit interface changes in a way such that memory leaks are avoided.; The most prominent effect of this change is that many functions that used to return an owning pointer (e.g., a pointer to an object that you need to manually delete) are then returning a std::unique_pt for automatic memory management.; For example this code would not compile anymore, because there is the risk that the caller forgets to delete params:; RooArgSet * params = pdf.getParameters(nullptr);; If you wrap such return values in a std::unique_ptr, then your code will compile both with and without memory safe interfaces:; std::unique_ptr<RooArgSet> params{pdf.getParameters(nullptr)};; Also some virtual RooFit functions like RooAbsReal::createIntegral() are returning a different type conditional on ROOFIT_MEMORY_SAFE_INTERFACES. If you are overriding such a function, you need to use the RooFit::OwningPtr return type, which is an alias for std::unique_ptr in memory-safe mode or an alias f",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:9657,Safety,risk,risk,9657,"s; Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method when using the RooFit::AsymptoticError() command argument in RooAbsPdf::fitTo(). See also this writeup on extended weighted fits that is also linked from the reference guide. The pull request that introduced this feature might also be a good reference.; Compile your code with memory safe interfaces; If you define the ROOFIT_MEMORY_SAFE_INTERFACES preprocessor macro, the RooFit interface changes in a way such that memory leaks are avoided.; The most prominent effect of this change is that many functions that used to return an owning pointer (e.g., a pointer to an object that you need to manually delete) are then returning a std::unique_pt for automatic memory management.; For example this code would not compile anymore, because there is the risk that the caller forgets to delete params:; RooArgSet * params = pdf.getParameters(nullptr);; If you wrap such return values in a std::unique_ptr, then your code will compile both with and without memory safe interfaces:; std::unique_ptr<RooArgSet> params{pdf.getParameters(nullptr)};; Also some virtual RooFit functions like RooAbsReal::createIntegral() are returning a different type conditional on ROOFIT_MEMORY_SAFE_INTERFACES. If you are overriding such a function, you need to use the RooFit::OwningPtr return type, which is an alias for std::unique_ptr in memory-safe mode or an alias for a raw pointer otherwise.; RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(...) const override; {; std::unique_ptr<RooAbsReal> integral;; // Prepare a std::unique_ptr as the return value; ...; // Use the RooFit::makeOwningPtr<T>() helper to translate the; // std::unique_ptr to the actual return type (either std::unique_ptr<T> or T*).; return RooFit::makeOwningPtr<RooAbsReal>(std::move(integ",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:9865,Safety,safe,safe,9865,"xtended unbinned maximum likelihood fits to use the asymptotically correct method when using the RooFit::AsymptoticError() command argument in RooAbsPdf::fitTo(). See also this writeup on extended weighted fits that is also linked from the reference guide. The pull request that introduced this feature might also be a good reference.; Compile your code with memory safe interfaces; If you define the ROOFIT_MEMORY_SAFE_INTERFACES preprocessor macro, the RooFit interface changes in a way such that memory leaks are avoided.; The most prominent effect of this change is that many functions that used to return an owning pointer (e.g., a pointer to an object that you need to manually delete) are then returning a std::unique_pt for automatic memory management.; For example this code would not compile anymore, because there is the risk that the caller forgets to delete params:; RooArgSet * params = pdf.getParameters(nullptr);; If you wrap such return values in a std::unique_ptr, then your code will compile both with and without memory safe interfaces:; std::unique_ptr<RooArgSet> params{pdf.getParameters(nullptr)};; Also some virtual RooFit functions like RooAbsReal::createIntegral() are returning a different type conditional on ROOFIT_MEMORY_SAFE_INTERFACES. If you are overriding such a function, you need to use the RooFit::OwningPtr return type, which is an alias for std::unique_ptr in memory-safe mode or an alias for a raw pointer otherwise.; RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(...) const override; {; std::unique_ptr<RooAbsReal> integral;; // Prepare a std::unique_ptr as the return value; ...; // Use the RooFit::makeOwningPtr<T>() helper to translate the; // std::unique_ptr to the actual return type (either std::unique_ptr<T> or T*).; return RooFit::makeOwningPtr<RooAbsReal>(std::move(integral));; }; The biggest application of the memory-safe interfaces is to spot memory leaks in RooFit-based frameworks. If you make sure that your framework compiles both ",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:10231,Safety,safe,safe,10231,"mory safe interfaces; If you define the ROOFIT_MEMORY_SAFE_INTERFACES preprocessor macro, the RooFit interface changes in a way such that memory leaks are avoided.; The most prominent effect of this change is that many functions that used to return an owning pointer (e.g., a pointer to an object that you need to manually delete) are then returning a std::unique_pt for automatic memory management.; For example this code would not compile anymore, because there is the risk that the caller forgets to delete params:; RooArgSet * params = pdf.getParameters(nullptr);; If you wrap such return values in a std::unique_ptr, then your code will compile both with and without memory safe interfaces:; std::unique_ptr<RooArgSet> params{pdf.getParameters(nullptr)};; Also some virtual RooFit functions like RooAbsReal::createIntegral() are returning a different type conditional on ROOFIT_MEMORY_SAFE_INTERFACES. If you are overriding such a function, you need to use the RooFit::OwningPtr return type, which is an alias for std::unique_ptr in memory-safe mode or an alias for a raw pointer otherwise.; RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(...) const override; {; std::unique_ptr<RooAbsReal> integral;; // Prepare a std::unique_ptr as the return value; ...; // Use the RooFit::makeOwningPtr<T>() helper to translate the; // std::unique_ptr to the actual return type (either std::unique_ptr<T> or T*).; return RooFit::makeOwningPtr<RooAbsReal>(std::move(integral));; }; The biggest application of the memory-safe interfaces is to spot memory leaks in RooFit-based frameworks. If you make sure that your framework compiles both with and without ROOFIT_MEMORY_SAFE_INTERFACES, you can get rid of all memory leaks related to RooFit user error! After making the necessary changes, you can remove the marco definition again to keep backwards compatibility.; Note that the memory-safe interfaces might become the default at some point, so doing this backwards-compatible migration early is stro",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:10707,Safety,safe,safe,10707,"o delete params:; RooArgSet * params = pdf.getParameters(nullptr);; If you wrap such return values in a std::unique_ptr, then your code will compile both with and without memory safe interfaces:; std::unique_ptr<RooArgSet> params{pdf.getParameters(nullptr)};; Also some virtual RooFit functions like RooAbsReal::createIntegral() are returning a different type conditional on ROOFIT_MEMORY_SAFE_INTERFACES. If you are overriding such a function, you need to use the RooFit::OwningPtr return type, which is an alias for std::unique_ptr in memory-safe mode or an alias for a raw pointer otherwise.; RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(...) const override; {; std::unique_ptr<RooAbsReal> integral;; // Prepare a std::unique_ptr as the return value; ...; // Use the RooFit::makeOwningPtr<T>() helper to translate the; // std::unique_ptr to the actual return type (either std::unique_ptr<T> or T*).; return RooFit::makeOwningPtr<RooAbsReal>(std::move(integral));; }; The biggest application of the memory-safe interfaces is to spot memory leaks in RooFit-based frameworks. If you make sure that your framework compiles both with and without ROOFIT_MEMORY_SAFE_INTERFACES, you can get rid of all memory leaks related to RooFit user error! After making the necessary changes, you can remove the marco definition again to keep backwards compatibility.; Note that the memory-safe interfaces might become the default at some point, so doing this backwards-compatible migration early is strongly encouraged and appreciated.; Removal of some memory-unsafe interfaces. The final bool takeOwnership parameter of the RooAddition and RooStats::HistFactory::PiecewiseInterpolation constructors was removed. This is to avoid situations where ownership is not clear to the compiler. Now, ownership of the input RooAbsArgs is never passed in the constructor. If you want the pass input ownership to the created object, please use addOwnedComponents. If you want to be extra safe, make sure the inputs",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:11073,Safety,safe,safe,11073,"u need to use the RooFit::OwningPtr return type, which is an alias for std::unique_ptr in memory-safe mode or an alias for a raw pointer otherwise.; RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(...) const override; {; std::unique_ptr<RooAbsReal> integral;; // Prepare a std::unique_ptr as the return value; ...; // Use the RooFit::makeOwningPtr<T>() helper to translate the; // std::unique_ptr to the actual return type (either std::unique_ptr<T> or T*).; return RooFit::makeOwningPtr<RooAbsReal>(std::move(integral));; }; The biggest application of the memory-safe interfaces is to spot memory leaks in RooFit-based frameworks. If you make sure that your framework compiles both with and without ROOFIT_MEMORY_SAFE_INTERFACES, you can get rid of all memory leaks related to RooFit user error! After making the necessary changes, you can remove the marco definition again to keep backwards compatibility.; Note that the memory-safe interfaces might become the default at some point, so doing this backwards-compatible migration early is strongly encouraged and appreciated.; Removal of some memory-unsafe interfaces. The final bool takeOwnership parameter of the RooAddition and RooStats::HistFactory::PiecewiseInterpolation constructors was removed. This is to avoid situations where ownership is not clear to the compiler. Now, ownership of the input RooAbsArgs is never passed in the constructor. If you want the pass input ownership to the created object, please use addOwnedComponents. If you want to be extra safe, make sure the inputs are in an owning collection and then std::move the collection, so that the ownership is always clear.; Example:; RooArgList sumSet;; sumSet.add(*(new RooRealVar(""var1"", ""var1"", 1.0)));; sumSet.add(*(new RooRealVar(""var2"", ""var2"", 3.0)));; RooAddition addition{""addition"", ""addition"", sumSet, /*takeOwnership=*/true};; should become:; RooArgList sumSet;; sumSet.addOwned(std::make_unique<RooRealVar>(""var1"", ""var1"", 1.0));; sumSet.addOwned(std::mak",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:11244,Safety,unsafe,unsafe,11244," or an alias for a raw pointer otherwise.; RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(...) const override; {; std::unique_ptr<RooAbsReal> integral;; // Prepare a std::unique_ptr as the return value; ...; // Use the RooFit::makeOwningPtr<T>() helper to translate the; // std::unique_ptr to the actual return type (either std::unique_ptr<T> or T*).; return RooFit::makeOwningPtr<RooAbsReal>(std::move(integral));; }; The biggest application of the memory-safe interfaces is to spot memory leaks in RooFit-based frameworks. If you make sure that your framework compiles both with and without ROOFIT_MEMORY_SAFE_INTERFACES, you can get rid of all memory leaks related to RooFit user error! After making the necessary changes, you can remove the marco definition again to keep backwards compatibility.; Note that the memory-safe interfaces might become the default at some point, so doing this backwards-compatible migration early is strongly encouraged and appreciated.; Removal of some memory-unsafe interfaces. The final bool takeOwnership parameter of the RooAddition and RooStats::HistFactory::PiecewiseInterpolation constructors was removed. This is to avoid situations where ownership is not clear to the compiler. Now, ownership of the input RooAbsArgs is never passed in the constructor. If you want the pass input ownership to the created object, please use addOwnedComponents. If you want to be extra safe, make sure the inputs are in an owning collection and then std::move the collection, so that the ownership is always clear.; Example:; RooArgList sumSet;; sumSet.add(*(new RooRealVar(""var1"", ""var1"", 1.0)));; sumSet.add(*(new RooRealVar(""var2"", ""var2"", 3.0)));; RooAddition addition{""addition"", ""addition"", sumSet, /*takeOwnership=*/true};; should become:; RooArgList sumSet;; sumSet.addOwned(std::make_unique<RooRealVar>(""var1"", ""var1"", 1.0));; sumSet.addOwned(std::make_unique<RooRealVar>(""var2"", ""var2"", 3.0));; RooAddition addition{""addition"", ""addition"", sumSet};; additi",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:11408,Safety,avoid,avoid,11408,"s the return value; ...; // Use the RooFit::makeOwningPtr<T>() helper to translate the; // std::unique_ptr to the actual return type (either std::unique_ptr<T> or T*).; return RooFit::makeOwningPtr<RooAbsReal>(std::move(integral));; }; The biggest application of the memory-safe interfaces is to spot memory leaks in RooFit-based frameworks. If you make sure that your framework compiles both with and without ROOFIT_MEMORY_SAFE_INTERFACES, you can get rid of all memory leaks related to RooFit user error! After making the necessary changes, you can remove the marco definition again to keep backwards compatibility.; Note that the memory-safe interfaces might become the default at some point, so doing this backwards-compatible migration early is strongly encouraged and appreciated.; Removal of some memory-unsafe interfaces. The final bool takeOwnership parameter of the RooAddition and RooStats::HistFactory::PiecewiseInterpolation constructors was removed. This is to avoid situations where ownership is not clear to the compiler. Now, ownership of the input RooAbsArgs is never passed in the constructor. If you want the pass input ownership to the created object, please use addOwnedComponents. If you want to be extra safe, make sure the inputs are in an owning collection and then std::move the collection, so that the ownership is always clear.; Example:; RooArgList sumSet;; sumSet.add(*(new RooRealVar(""var1"", ""var1"", 1.0)));; sumSet.add(*(new RooRealVar(""var2"", ""var2"", 3.0)));; RooAddition addition{""addition"", ""addition"", sumSet, /*takeOwnership=*/true};; should become:; RooArgList sumSet;; sumSet.addOwned(std::make_unique<RooRealVar>(""var1"", ""var1"", 1.0));; sumSet.addOwned(std::make_unique<RooRealVar>(""var2"", ""var2"", 3.0));; RooAddition addition{""addition"", ""addition"", sumSet};; addition.addOwnedComponents(std::move(sumSet));. Deprecation of legacy iterators; The following methods related to the RooFit legacy iterators are deprecated and will be removed in ROOT 6.34. They s",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:11661,Safety,safe,safe,11661,"interfaces is to spot memory leaks in RooFit-based frameworks. If you make sure that your framework compiles both with and without ROOFIT_MEMORY_SAFE_INTERFACES, you can get rid of all memory leaks related to RooFit user error! After making the necessary changes, you can remove the marco definition again to keep backwards compatibility.; Note that the memory-safe interfaces might become the default at some point, so doing this backwards-compatible migration early is strongly encouraged and appreciated.; Removal of some memory-unsafe interfaces. The final bool takeOwnership parameter of the RooAddition and RooStats::HistFactory::PiecewiseInterpolation constructors was removed. This is to avoid situations where ownership is not clear to the compiler. Now, ownership of the input RooAbsArgs is never passed in the constructor. If you want the pass input ownership to the created object, please use addOwnedComponents. If you want to be extra safe, make sure the inputs are in an owning collection and then std::move the collection, so that the ownership is always clear.; Example:; RooArgList sumSet;; sumSet.add(*(new RooRealVar(""var1"", ""var1"", 1.0)));; sumSet.add(*(new RooRealVar(""var2"", ""var2"", 3.0)));; RooAddition addition{""addition"", ""addition"", sumSet, /*takeOwnership=*/true};; should become:; RooArgList sumSet;; sumSet.addOwned(std::make_unique<RooRealVar>(""var1"", ""var1"", 1.0));; sumSet.addOwned(std::make_unique<RooRealVar>(""var2"", ""var2"", 3.0));; RooAddition addition{""addition"", ""addition"", sumSet};; addition.addOwnedComponents(std::move(sumSet));. Deprecation of legacy iterators; The following methods related to the RooFit legacy iterators are deprecated and will be removed in ROOT 6.34. They should be replaced with the suitable STL-compatible interfaces, or you can just use range-based loops:. RooAbsArg::clientIterator(): use clients() and begin(), end() or range-based loops instead; RooAbsArg::valueClientIterator(): use valueClients(); RooAbsArg::shapeClientIterator(",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:25795,Safety,safe,safe,25795,"tHub based build system.; Bugs and Issues fixed in this release; More than 200 items were addressed for this release. The full list is:. [#15621] - Buffer overflow in TBranch::Init; [#15610] - Memory leak in TTree getattr pythonization; [#15590] - Infinite recursion in TFile::Open; [#15460] - TEnum::GetEnum(“B”)->GetUnderlyingType() does not following typedefs; [#15413] - Fails to build with cuDNN version 9; [#15406] - TEnum::GetEnum does not seem to see ‘through’ using statements.; [#15399] - Memory leak with jitted nodes if the execution is never triggered; [#15396] - [TMVA] Pymva test (Keras) failing on 632 and main; [#15370] - Broken link in HS3 printout; [#15340] - Webgraphics: canvas displayed, but many error printed; [#15253] - C++ standard not propagated via CMake anymore; [#15197] - RBDT does not support xgboost inference; [#15156] - Segfault in TMVA::Experimental::SOFIE::RModel::Streamer; [#15139] - cmake option -Dall=YES breaks the cmake; [#15118] - jsoninterface does not build if provided with RapidYAML; [#15108] - Turn off clang-format for Linkdef files; [#15090] - TClass::GetClassInfo() is not thread safe; [#15077] - Passing different floating point types to RVec utility functions; [#15048] - [ntuple] Handling of virtual inheritance broken; [#15040] - RDataFrame Inaccurate example of progress bar from documentation; [#15028] - RDataFrame Unable to cacheread remote file; [#15027] - spurrious cmake message about AfterImage with -Dminimal=ON; [#14981] - RVecs leak memory with np.asarray in pyROOT; [#14964] - ROOT-HEAD fails with “cling interactive line includer >>>: fatal error: module file ‘[snip]/Vc.pcm’ not found: module file not found”; [#14958] - ROOT_HEAD failed with error message: Fail to detect cryptographic random generator; [#14921] - ROOT Fails to build macOS 14.4 arm64 Xcode 15.3; [#14914] - VecOps::Take with default argument doesn’t check correctly the out of boundary condition; [#14910] - hadd issue when using parallelization together with in",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:26399,Safety,detect,detect,26399,inted; [#15253] - C++ standard not propagated via CMake anymore; [#15197] - RBDT does not support xgboost inference; [#15156] - Segfault in TMVA::Experimental::SOFIE::RModel::Streamer; [#15139] - cmake option -Dall=YES breaks the cmake; [#15118] - jsoninterface does not build if provided with RapidYAML; [#15108] - Turn off clang-format for Linkdef files; [#15090] - TClass::GetClassInfo() is not thread safe; [#15077] - Passing different floating point types to RVec utility functions; [#15048] - [ntuple] Handling of virtual inheritance broken; [#15040] - RDataFrame Inaccurate example of progress bar from documentation; [#15028] - RDataFrame Unable to cacheread remote file; [#15027] - spurrious cmake message about AfterImage with -Dminimal=ON; [#14981] - RVecs leak memory with np.asarray in pyROOT; [#14964] - ROOT-HEAD fails with “cling interactive line includer >>>: fatal error: module file ‘[snip]/Vc.pcm’ not found: module file not found”; [#14958] - ROOT_HEAD failed with error message: Fail to detect cryptographic random generator; [#14921] - ROOT Fails to build macOS 14.4 arm64 Xcode 15.3; [#14914] - VecOps::Take with default argument doesn’t check correctly the out of boundary condition; [#14910] - hadd issue when using parallelization together with indirect file; [#14902] - compilation error; [#14863] - [hist] TH1::SaveAs missing default option argument causes compilation errors; [#14855] - TRatioPlot crashes if loaded from the file; [#14842] - TRatioplot gives “different” results with Web Graphics; [#14838] - Problems with Confidence Band of TRatioPlot; [#14801] - TEfficiency drawing to .C is broken; [#14793] - 6.26 cannot read file written with 6.30.4; [#14772] - [cling] Undocumented behaviour of root macro_C.so; [#14767] - rootn.exe instant crash on startup; [#14765] - TGenPhaseSpace weight normalization; [#14748] - [ntuple] Show and PrintInfo does not work for friend RNTuples; [#14601] - std::source_location not found when running with c++20 enabled; [#14599] ,MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:37340,Safety,detect,detect,37340,"+ Progress bar would be better.; [#9292] - Integer overflow in TTreeCache::FillBuffer; [#8959] - ninja clean does not remove modules.idx; [#8952] - Make hadd return a non-zero exit code when encountering a corrupted file; [#8942] - cannot buid the dependent project; [#8794] - [TGNumberEntry] centiseconds; [#8720] - Apply TChain::SetImplicitMT() to underlying trees; [#8639] - (RDataFrame) AsNumpy returns Boolean branches as ‘object’ dtype numpy arrays; [#8582] - TThreadTimer behavior; [#8581] - [ntuple] RNTupleModel columns ownership issue; [#8517] - Add integer support to TVectorT; [#8494] - cling crashes on conditional parameter in template; [#8260] - Build system cannot detect version of oneTBB; [#8148] - Document TMethodCall class limitations; [#7950] - Assertion exception including header file with GaudiPython module; [#7900] - Support spectator variables in RReader; [#7872] - TExecutorCRTP::Map() should support void; [#7871] - Usability of TExecutor::MapReduce; [#7845] - Improve TMatrix reference documentation; [#7805] - Inconsistent and unintuitive behaviour of TFormula::SetParNames and TFormula::SetParameters; [#7774] - Unreasonably slow behaviour of CompileMacro; [#7699] - [VecOps] Make free functions in VecOps better visible; [#7686] - PyROOT Segfault when creating proxy to derived class with multiple overloads; [#7669] - Inconsistent behaviour in wildcard import; [#7644] - Provide in the cmake configuration the C++ standard which was used to compile ROOT; [#7627] - Fix TMVA group links; [#7159] - TNetXNGFile::Open fails with double slash (//) in path; [#7128] - Cannot build ROOT if another ROOT at /usr/local; [#6900] - mathmore: invalid roots for a quartic polynomial; [#6811] - Bug displaying several 3D objects such as TGraph2D on the same canvas; [#6755] - Greek letter epsilon not rendered correctly using TLatex with OpenGL.CanvasPreferGL option, segmentation fault.; [#6753] - CMake dependency on Python: use targets; [#6616] - hadd writes files with unspe",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:44565,Safety,recover,recover,44565," find_library() after integrating with ROOT.; [#15751] - [RF] Using a conditional RooProdPdf in a multi-channel fit spawns too many integrals with new CPU evaluation backend; [#15791] - JS ROOT does not draw tprofile2d correctly with “TEXT” draw option; [#15799] - pyunittests-pyroot-pyz-ttree-setbranchaddress segfaults with Python 3.13; [ROOT-7412] - Strange results looking for nested types; [ROOT-8439] - PyROOT does not treat exceptions properly in overloaded methods; [ROOT-9307] - TPad::GetListOfPrimitives() double deletion error in TList::Clear(). Release 6.32.04; Published on August 14, 2024; Items addressed in this release. [#7223] - [RF] RDataFrame to RooDataSet/RooDataHist conversion; [#7782] - [RF] Allow to set nbins for RooPlot (or disallow); [#9838] - [RF] RooCurve::Average() overestimating average values of standard precision curves on small; [#11565] - [RF] Crash in RooStats::ToyMCSample::GenerateToyData; [#13387] - Please recover SrvAuthenticate from libSrvAuth library; [#14541] - [ROOT-6193] Editor for palette axis cannot set title properties; [#15104] - new PyROOT/cppyy fails to pickle enums; [#15161] - Attribute (getitem) differences for PyROOT objects in ROOT master; [#15234] - cppyy - wrong object type when iterating over a polymorphic container; [#15269] - Iterators in pyROOT working differently in ROOT master compared to 6.30/02; [#15315] - PyROOT Example with inheriting from ROOT.Math.IMultiGenFunction doesn’t work after recent cppyy upgrade; [#15425] - TTreeProcessorMP processes events multiple times when there are more threads than entries; [#15755] - [RF][HS3] Higgs discovery workspaces roundtrip; [#15874] - [Hist] Backwards compatibility broken for THnSparseL in 6.32; [#15887] - Broken plot .C macros for default Name() argument in plotOn(); [#15977] - [gui] Event StatusBar does not work well when TMarker outside of zoom region; [#15986] - Problems with TUri compilation; [#16031] - VecOps binary functions not using the right types; [#16038] - ",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:20781,Security,access,access,20781,"tion of std::string; Calling repr() on a cppyy.gbl.std.string object now comes with a “b” prefix, i.e. a bytes object is returned instead of a Python string. This is an intentional change for better unicode support.; See: https://github.com/root-project/root/issues/15153#issuecomment-2040504962; No more implicit conversion of static size char buffer to Python strings; A static size character buffer of type char[n] is not converted to a Python string anymore. The reason for this: since it was previously assumed the string was null-terminated, there was no way to get the bytes after a null, even if you wanted to.; import ROOT. ROOT.gInterpreter.Declare(""""""; struct Struct { char char_buffer[5] {}; }; // struct with char[n]; void fill_char_buffer(Struct & st) {; std::string foo{""foo""};; std::memcpy(st.char_buffer, foo.data(), foo.size());; }; """"""). struct = ROOT.Struct(); ROOT.fill_char_buffer(struct); char_buffer = struct.char_buffer. # With thew new cppyy, you get access to the lower level buffer instead of a; # Python string:; print(""struct.char_buffer : "", char_buffer). # However, you can turn the buffer into a string very easily with as_string():; print(""struct.char_buffer.as_string(): "", char_buffer.as_string()); The output of this script with ROOT 6.32:; struct.char_buffer : <cppyy.LowLevelView object at 0x74c7a2682fb0>; struct.char_buffer.as_string(): foo; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; The new recommended way to get objects from a TFile or any TDirectory in general is now via __getitem__:; tree = my_file[""my_tree""] # instead of my_file.my_tree; This is more consistent with other Python collections (like dictionaries), makes sure that member functions can’t be confused with branch names, and easily allows you to use string variables as keys.; With the new dictionary-like syntax, you can also get objects with names that don’t qualify as a Python variable. Here is a short demo:; import ROOT. with ROOT.TFile.Open",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:34727,Security,access,accessible,34727," [#12527] - MacOS build fails if configured without cocoa; [#12492] - The problem with building ROOT v6-26-10 in debug mode on ubuntu 20.04; [#12230] - Wrong conversion from Numpy Array to std.vector when using the wrong type; [#12091] - TSpline SaveAs not using equidistant and loss of precision; [#11924] - PyROOT: wrong overload resolution for C++ functions from python; [#11901] - Binary distribution for Ubutu 22.04 is broken (on WSL2); [#11750] - FindXROOTD adds libraries to link against irrespective of xrootd version used; [#11746] - TH2::Fill(const char namex, const char namey, Double_t w) doesn’t update fTsumwxy; [#11743] - CMake >= 3.24 fails to build LZMA: WARNING: ‘aclocal-1.15’ is missing on your system.; [#11673] - [ntuple] Consider making REntry::AddValue() publicly accessible; [#11667] - [cling] GetClassSharedLibs fails to find several classes; [#11653] - TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; [#11596] - cppyy does not retrieve correct size of type when pythonizing vector; [#11484] - roottest/root/meta/genreflex/ROOT-5768 needs to be enabled; [#11411] - PyROOT Python list of strings -> std::initializer_list< std::string > conversion is broken; [#11395] - Migrate to pcre2; [#11353] - Compiled program with libNew.so crash; [#11304] - WW option for fit functions as the W option; [#11238] - an old bug in ROOT v6 TAB completion ?; [#11197] - Build github release into version release procedure; [#11190] - ROOT compiled with -Ddev=ON crashes when type # in ROOT session; [#11021] - [Fit Panel] Fitting to Gaus + Pol0 in two steps is unnecessarily hard; [#10891] - [RF] Deletion order of objects in RooFit/RooStats tutorials should not matter in Python; [#10871] - [DF][ntuple] Better task splitting with RDF+RNTuple; [#10866] - ACLiC flags parsing for compiler command line options broken in certain cases; [#10684] - PyROOT Cannot use SofieFunctor in Python; [#10664] - [ntuple] Expose fixed-size arrays as RVecs in RDF datasource; [#1",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:642,Testability,test,test,642,". ROOT Version 6.32 Release Notes. ROOT Version 6.32 Release Notes; 2024-05-26. Introduction; Deprecation and Removal; Core Libraries; I/O Libraries; hadd respects compression settings. TTree Libraries; Add files from subdirectories with TChain::Add globbing; Improved efficiency of TTree friends with indices. RNTuple; Histogram Libraries; Parallelism; RooFit Libraries; New CPU likelihood evaluation backend by default; Asymptotically correct uncertainties for extended unbinned likelihood fits; Compile your code with memory safe interfaces; Removal of some memory-unsafe interfaces; Deprecation of legacy iterators; Deprecation of legacy test statistics classes in public interface; Change of RooParamHistFunc; Renaming of some RooFit classes. RDataFrame; Graphics backends; 2D Graphics Libraries; 3D Graphics Libraries; REve. PROOF Libraries; PyROOT; Different representation of std::string; No more implicit conversion of static size char buffer to Python strings; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; Removal of Python 2 support; More usage of the public cppyy API. Class Reference Guide; Build, Configuration and Testing Infrastructure; Bugs and Issues fixed in this release; Release 6.32.02; Items addressed in this release. Release 6.32.04; Items addressed in this release. Release 6.32.06; Items addressed in this release. HEAD of the v6-32-00-patches branch. Introduction; ROOT version 6.32.00 was released on 28 May 2024. This release is a long term support one, ideal for inclusion in production or data taking software stacks of experiments.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Anton Alkin, Sungkyunkwan University; Guilherme Amadio, CERN/IT,; Abhigyan Acherjee, University of Cincinnati,; Bertrand Bellenot, CERN/EP-SFT,; Jakob Blomer, CERN/EP-SFT,; Rene Brun,; Carsten Burgard, DESY; Will Buttinger, RAL,; Philippe Canal, FNAL,; Jolly Chen, CERN/EP-SFT,; Olivier Co",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:13203,Testability,test,test,13203,"));. Deprecation of legacy iterators; The following methods related to the RooFit legacy iterators are deprecated and will be removed in ROOT 6.34. They should be replaced with the suitable STL-compatible interfaces, or you can just use range-based loops:. RooAbsArg::clientIterator(): use clients() and begin(), end() or range-based loops instead; RooAbsArg::valueClientIterator(): use valueClients(); RooAbsArg::shapeClientIterator(): use shapeClients(); RooAbsArg::serverIterator(): use servers(); RooAbsArg::valueClientMIterator(): use valueClients(); RooAbsArg::shapeClientMIterator(): use shapeClients(); RooAbsArg::serverMIterator(): use servers(); RooAbsCollection::createIterator(): use begin(), end() and range-based for loops; RooAbsCollection::iterator(): same; RooAbsCollection::fwdIterator(): same; RooWorkspace::componentIterator(): use RooWorkspace::components() with range-based loop. Deprecation of legacy test statistics classes in public interface; Instantiating the following classes and even including their header files is deprecated, and the headers will be removed in ROOT 6.34:. RooAbsTestStatistic; RooAbsOptTestStatistic; RooNLLVar; RooChi2Var; RooXYChi2Var. Please use the higher-level functions RooAbsPdf::createNLL() and RooAbsPdf::createChi2() if you want to create objects that represent test statistics.; Change of RooParamHistFunc; The RooParamHistFunc didn’t take any observable RooRealVar as constructor argument. It assumes as observable the internal variables in the passed RooDataHist. This means it was in most contexts unusable, because the input can’t be changed, other than loading a different bin in the dataset.; Furthermore, there was actually a constructor that took a RooAbsArg x, but it was simply ignored.; To fix all these problems, the existing constructors were replaced by a new one that takes the observable explicitly.; Since the old constructors resulted in wrong computation graphs that caused trouble with the new CPU evaluation backend, the",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:13600,Testability,test,test,13600,"bsArg::clientIterator(): use clients() and begin(), end() or range-based loops instead; RooAbsArg::valueClientIterator(): use valueClients(); RooAbsArg::shapeClientIterator(): use shapeClients(); RooAbsArg::serverIterator(): use servers(); RooAbsArg::valueClientMIterator(): use valueClients(); RooAbsArg::shapeClientMIterator(): use shapeClients(); RooAbsArg::serverMIterator(): use servers(); RooAbsCollection::createIterator(): use begin(), end() and range-based for loops; RooAbsCollection::iterator(): same; RooAbsCollection::fwdIterator(): same; RooWorkspace::componentIterator(): use RooWorkspace::components() with range-based loop. Deprecation of legacy test statistics classes in public interface; Instantiating the following classes and even including their header files is deprecated, and the headers will be removed in ROOT 6.34:. RooAbsTestStatistic; RooAbsOptTestStatistic; RooNLLVar; RooChi2Var; RooXYChi2Var. Please use the higher-level functions RooAbsPdf::createNLL() and RooAbsPdf::createChi2() if you want to create objects that represent test statistics.; Change of RooParamHistFunc; The RooParamHistFunc didn’t take any observable RooRealVar as constructor argument. It assumes as observable the internal variables in the passed RooDataHist. This means it was in most contexts unusable, because the input can’t be changed, other than loading a different bin in the dataset.; Furthermore, there was actually a constructor that took a RooAbsArg x, but it was simply ignored.; To fix all these problems, the existing constructors were replaced by a new one that takes the observable explicitly.; Since the old constructors resulted in wrong computation graphs that caused trouble with the new CPU evaluation backend, they had to be removed without deprecation. Please adapt your code if necessary.; Renaming of some RooFit classes; The RooPower was renamed to RooPowerSum, and RooExpPoly was renamed to RooLegacyExpPoly.; This was a necessary change, because the names of these cla",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:16570,Testability,test,tests,16570,"e dataset type. This means that if the file does not exist, the constructor will throw an exception. Previously, an exception would be thrown only at a JIT-ting time, before the start of the computations.; Distributed RDataFrame now supports processing an RNTuple dataset.; In distributed RDataFrame, the initialize function useful to run initialization code at the beginning of every task on a worker will now run only in the worker processes. Previously, it was also run eagerly at the point of calling, that is in the main user process. This is done to better separate the user driver environment and the worker environments. If necessary, the function passed to initialize can be called directly by the user in the main application to reproduce the same effect as before.; Some internal details of the RDataFrame implementation were reworked to decrease memory usage and runtime of programs with very deep computation graphs (more than O(10K) nodes in the same branch). Preliminary tests indicate between 30% and a factor 2.5 in memory decrease. This improvement is transparent for RDataFrame users. Graphics backends; The ROOT release 6.32 brings a lot of impressive enhancements to the Web Graphics package, greatly surpassing the features and capabilities of version 6.30. This update provides users with a more robust Web Graphics. The JSROOT version has been updated to v7.7. 2D Graphics Libraries. TMultiGraph: Add the objects from the list of functions in legend produce by TLegend.; Implement the IsInside method for TEllipse, TCrown and TDiamond. Also, a new graphics example inside.C has been added.; Two new methods in TColor: ListColors() and GetColorByname().; Make sure the option L draws closed polygon for TH2Poly.; Use Tex Gyre fonts for sans serif (similar to Helvetica) .; The new method TPad::ModifiedUpdate is short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().; Improve SetTextSize error: show code and va",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:24629,Testability,test,tested,24629,"ed properly. Moreover there was no direct correspondence between the code source and the json file. Those files do not have any doc in them. With a direct link to the GitHub source file the dependency between source code and json is now more obvious.; Document how to remove shadow of TPave, as it was not evident (only explanations were hidden here and there in the forum).; Improve the SetFillColorAlpha documentation.; Simplify some graphics examples: arrow.C, crown.C, diamond.C and ellipse.C.; Fix a typo in the documentation of TGraph::SetHighlight in TGraph.cxx.; Change the marker style in the tutorial df014_CSVDataSource.; Remove useless settings in the tutorial scatter.C.; Fix the tutorial h1analysisTreeReader.C.; Fix doxygen formatting in TGNumberEntry.cxx.; Avoid the CDT documentation to appear in the reference guide.; Remove last references to the old ROOT drupal website. Build, Configuration and Testing Infrastructure; Release v6.32.00 is the first one integrated and tested entirely through the new GitHub based build system.; Bugs and Issues fixed in this release; More than 200 items were addressed for this release. The full list is:. [#15621] - Buffer overflow in TBranch::Init; [#15610] - Memory leak in TTree getattr pythonization; [#15590] - Infinite recursion in TFile::Open; [#15460] - TEnum::GetEnum(“B”)->GetUnderlyingType() does not following typedefs; [#15413] - Fails to build with cuDNN version 9; [#15406] - TEnum::GetEnum does not seem to see ‘through’ using statements.; [#15399] - Memory leak with jitted nodes if the execution is never triggered; [#15396] - [TMVA] Pymva test (Keras) failing on 632 and main; [#15370] - Broken link in HS3 printout; [#15340] - Webgraphics: canvas displayed, but many error printed; [#15253] - C++ standard not propagated via CMake anymore; [#15197] - RBDT does not support xgboost inference; [#15156] - Segfault in TMVA::Experimental::SOFIE::RModel::Streamer; [#15139] - cmake option -Dall=YES breaks the cmake; [#15118] - jso",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:25253,Testability,test,test,25253,"tHub based build system.; Bugs and Issues fixed in this release; More than 200 items were addressed for this release. The full list is:. [#15621] - Buffer overflow in TBranch::Init; [#15610] - Memory leak in TTree getattr pythonization; [#15590] - Infinite recursion in TFile::Open; [#15460] - TEnum::GetEnum(“B”)->GetUnderlyingType() does not following typedefs; [#15413] - Fails to build with cuDNN version 9; [#15406] - TEnum::GetEnum does not seem to see ‘through’ using statements.; [#15399] - Memory leak with jitted nodes if the execution is never triggered; [#15396] - [TMVA] Pymva test (Keras) failing on 632 and main; [#15370] - Broken link in HS3 printout; [#15340] - Webgraphics: canvas displayed, but many error printed; [#15253] - C++ standard not propagated via CMake anymore; [#15197] - RBDT does not support xgboost inference; [#15156] - Segfault in TMVA::Experimental::SOFIE::RModel::Streamer; [#15139] - cmake option -Dall=YES breaks the cmake; [#15118] - jsoninterface does not build if provided with RapidYAML; [#15108] - Turn off clang-format for Linkdef files; [#15090] - TClass::GetClassInfo() is not thread safe; [#15077] - Passing different floating point types to RVec utility functions; [#15048] - [ntuple] Handling of virtual inheritance broken; [#15040] - RDataFrame Inaccurate example of progress bar from documentation; [#15028] - RDataFrame Unable to cacheread remote file; [#15027] - spurrious cmake message about AfterImage with -Dminimal=ON; [#14981] - RVecs leak memory with np.asarray in pyROOT; [#14964] - ROOT-HEAD fails with “cling interactive line includer >>>: fatal error: module file ‘[snip]/Vc.pcm’ not found: module file not found”; [#14958] - ROOT_HEAD failed with error message: Fail to detect cryptographic random generator; [#14921] - ROOT Fails to build macOS 14.4 arm64 Xcode 15.3; [#14914] - VecOps::Take with default argument doesn’t check correctly the out of boundary condition; [#14910] - hadd issue when using parallelization together with in",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:32985,Testability,assert,assertion,32985,missing recursive traversal; [#13623] - Add directory wildcarding in TChain; [#13531] - Huge RAM consumption of the hadd command for input files with several directories; [#13511] - TMapFile can’t work; [#13497] - Assertion failure in TMVA with vector iterators incompatible error on Windows; [#13441] - error in root-generated code for cubic spline (TSpline3); [#13421] - [MSVC] ROOT builds under msvc option /permissive- with error C4576; [#13359] - Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; [#13288] - [cling] long double type incorrectly parsed by interpreter; [#13155] - TMVA doesn’t compile with pytorch 2.0.1; [#13130] - Valgrind reports leak when constructing TChain; [#13110] - Bug in TDecompBase::DiagProd; [#13079] - Builtin TBB library sometimes not found (or more exactly the one install in /usr/lib sometimes take priority); [#13041] - TVirtualFitter::GetFitter() unexpectedly returns NULL on macOS 12 and 13 with Xcode 14; [#13019] - LLVM assertion failure in HandleUnionActiveMemberChange; [#12993] - std::source_location not working in the interpreter; [#12959] - [ntuple] Distinguish between connecting a page sink and a page source in RColumn; [#12783] - [IO] Writing HistFactory model file twice gives strange results since ROOT 6.26.02; [#12770] - tmva/sofie_parsers does not build with latest Protobuf (22.x); [#12744] - wrong Python version found during build; [#12718] - A crash when trying to initialise a vector from a >1D numpy array in PyROOT; [#12685] - TEnum::GetEnum does NOT process typedefs; [#12644] - Can’t find cxxabi.h and build module ‘ROOT_Foundation_Stage1_NoRTTI’ when building from source on Macos; [#12631] - Unable to build master with external XROOTD; [#12621] - [I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; [#12592] - [doc] TProfile bin error documentation is not correct; [#12591] - Allow partial enablement of modules; [#12527] - MacOS build f,MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:36258,Testability,test,test,36258, pythonizing vector; [#11484] - roottest/root/meta/genreflex/ROOT-5768 needs to be enabled; [#11411] - PyROOT Python list of strings -> std::initializer_list< std::string > conversion is broken; [#11395] - Migrate to pcre2; [#11353] - Compiled program with libNew.so crash; [#11304] - WW option for fit functions as the W option; [#11238] - an old bug in ROOT v6 TAB completion ?; [#11197] - Build github release into version release procedure; [#11190] - ROOT compiled with -Ddev=ON crashes when type # in ROOT session; [#11021] - [Fit Panel] Fitting to Gaus + Pol0 in two steps is unnecessarily hard; [#10891] - [RF] Deletion order of objects in RooFit/RooStats tutorials should not matter in Python; [#10871] - [DF][ntuple] Better task splitting with RDF+RNTuple; [#10866] - ACLiC flags parsing for compiler command line options broken in certain cases; [#10684] - PyROOT Cannot use SofieFunctor in Python; [#10664] - [ntuple] Expose fixed-size arrays as RVecs in RDF datasource; [#10395] - [core] CleanCompiledMacros behavior; [#10222] - Suspicious behavior of TUnuran::SampleMulti; [#10221] - ROOT interpreter built with C++17 does not find std::optional without including it first; [#10146] - Byte swapped floats in TMVA sofie on big endian architectures (s390x); [#10061] - Distributed RDataFrame test failures on Mac/ARM; [#9917] - SetRange and SetRangeUser fail silently; [#9594] - Systematic build failure of ROOT master in the LCG DEBUG builds since Jan 15th; [#9524] - Failure to build/run when MACOSX_DEPLOYMENT_TARGET is set to 11 or higher; [#9514] - Printed SVG image contains newline cutting through XML tags; [#9489] - [RF] Cannot turn off useless messages with RooMCStudy unbinned fits + Progress bar would be better.; [#9292] - Integer overflow in TTreeCache::FillBuffer; [#8959] - ninja clean does not remove modules.idx; [#8952] - Make hadd return a non-zero exit code when encountering a corrupted file; [#8942] - cannot buid the dependent project; [#8794] - [TGNumberEntry] ce,MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:41608,Testability,test,tests,41608,"] - BUG (See description note) PyDoubleBuffer tolist and numpy array cause segfault.; [ROOT-9313] - Crash in TFile::Close on Fedora, ROOT v6.10; [ROOT-9320] - Make GenVector data structures constexpr; [ROOT-9321] - Dictionary generation: type normalization issue in pcm file; [ROOT-9448] - libNew returns nullptr instead of implementing operator new, has many warnings; [ROOT-9983] - [DOC] hadd –help does not show description and epilogue; [ROOT-10033] - ROOT::EnableImplicitMT: Number of threads in scheduling environments; [ROOT-10231] - TMatrixD(a,TMatrixD::kInvMult,b) requires b.GetNcols() = a.GetNcols(); [ROOT-10320] - ROOT/meta does not support anonymous unions/structs; [ROOT-10425] - Missing symbols not reported as missing anymore; [ROOT-10546] - RDataFrame cannot be interrupted from PyROOT; [ROOT-10593] - Segmentation fault when calling a not-yet-defined function from ROOT interpreter; [ROOT-10607] - Several ROOT 7 tests fail when assertions are enabled; [ROOT-10613] - Configuration does not fail when fail-on-missing is ON and cudnn is not found; [ROOT-10621] - Segfault if TFile is used with TRint in teardown; [ROOT-10705] - The “x” and “x0” options in THnBase::PrintEntries misbehave; [ROOT-10789] - some cppyy examples do not work under ROOT; [ROOT-10827] - Missing contribution of extended term in the error Correction for extended weighted likelihood fits; [ROOT-10859] - std.make_shared[T] does not work on macOS; [ROOT-10866] - Numerical instabilities when calculating the derivatives for the asymptotically correct erros; [ROOT-10958] - jupyter notebook does not render geometries with new pyroot; [ROOT-10977] - Exit code 0 with failing C++ notebook in nbconvert; [ROOT-11006] - [TTreeReader] Crash when reading array branch. Release 6.32.02; Published on June 18, 2024; Items addressed in this release. [#7236] - Memory leak in TFile::WriteObjectAny, depending on data type; [#10075] - Difficult to configure Xrootd to use non-builtin openssl; [#14051] - [web graphics] W",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:41624,Testability,assert,assertions,41624,"] - BUG (See description note) PyDoubleBuffer tolist and numpy array cause segfault.; [ROOT-9313] - Crash in TFile::Close on Fedora, ROOT v6.10; [ROOT-9320] - Make GenVector data structures constexpr; [ROOT-9321] - Dictionary generation: type normalization issue in pcm file; [ROOT-9448] - libNew returns nullptr instead of implementing operator new, has many warnings; [ROOT-9983] - [DOC] hadd –help does not show description and epilogue; [ROOT-10033] - ROOT::EnableImplicitMT: Number of threads in scheduling environments; [ROOT-10231] - TMatrixD(a,TMatrixD::kInvMult,b) requires b.GetNcols() = a.GetNcols(); [ROOT-10320] - ROOT/meta does not support anonymous unions/structs; [ROOT-10425] - Missing symbols not reported as missing anymore; [ROOT-10546] - RDataFrame cannot be interrupted from PyROOT; [ROOT-10593] - Segmentation fault when calling a not-yet-defined function from ROOT interpreter; [ROOT-10607] - Several ROOT 7 tests fail when assertions are enabled; [ROOT-10613] - Configuration does not fail when fail-on-missing is ON and cudnn is not found; [ROOT-10621] - Segfault if TFile is used with TRint in teardown; [ROOT-10705] - The “x” and “x0” options in THnBase::PrintEntries misbehave; [ROOT-10789] - some cppyy examples do not work under ROOT; [ROOT-10827] - Missing contribution of extended term in the error Correction for extended weighted likelihood fits; [ROOT-10859] - std.make_shared[T] does not work on macOS; [ROOT-10866] - Numerical instabilities when calculating the derivatives for the asymptotically correct erros; [ROOT-10958] - jupyter notebook does not render geometries with new pyroot; [ROOT-10977] - Exit code 0 with failing C++ notebook in nbconvert; [ROOT-11006] - [TTreeReader] Crash when reading array branch. Release 6.32.02; Published on June 18, 2024; Items addressed in this release. [#7236] - Memory leak in TFile::WriteObjectAny, depending on data type; [#10075] - Difficult to configure Xrootd to use non-builtin openssl; [#14051] - [web graphics] W",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:7651,Usability,feedback,feedback,7651,"Merger class has been added, enabling the merging of different page sources into one page sink. This also means that RNTuples can be merged through hadd.; Zero-copy bulk reading has been added, with extra optimizations for ROOT::RVec fields.; It is now possible to use the RNTupleView with an external address with type erasure, e.g.:; std::shared_ptr<void> data{new float()};; auto view = reader->GetView(""pt"", data);; This enables use cases such as reading one specific entry of one specific field into a previously allocated memory location.; Further integration with RDataFrame: it is now possible to create RDataFrame for chains of RNTuples. This addition also comes with improvements to the multi-threaded work scheduling.; Many additional bug fixes and improvements. Please, report any issues regarding the above mentioned features should you encounter them. RNTuple is still in pre-production. The on-disk format is scheduled to be finalized by the end of 2024. Thus, we appreciate feedback and suggestions for improvement.; Histogram Libraries. Implement the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum().; Print a warning when the range given to TAxis::SetRange is invalid.; Fix projection name in TH3 as requested here. Parallelism. The ROOT::Experimental::TFuture template has been removed. RooFit Libraries; New CPU likelihood evaluation backend by default; The new vectorizing CPU evaluation backend is not the default for RooFit likelihoods. Likelihood minimization is now up to 10x faster on a single CPU core.; If you experience unexpected problems related to the likelihood evaluation, you can revert back to the old backend by passing RooFit::EvalBackend(""legacy"") to RooAbsPdf::fitTo() or RooAbsPdf::createNLL().; In case you observe any slowdowns with the new likelihood evaluation, please open a GitHub issue about this, as such a performance regression is considered a bug.; Asymptotically correct uncertainties for extended unbinned likelihood fits; A",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:9075,Usability,guid,guide,9075,"on backend by default; The new vectorizing CPU evaluation backend is not the default for RooFit likelihoods. Likelihood minimization is now up to 10x faster on a single CPU core.; If you experience unexpected problems related to the likelihood evaluation, you can revert back to the old backend by passing RooFit::EvalBackend(""legacy"") to RooAbsPdf::fitTo() or RooAbsPdf::createNLL().; In case you observe any slowdowns with the new likelihood evaluation, please open a GitHub issue about this, as such a performance regression is considered a bug.; Asymptotically correct uncertainties for extended unbinned likelihood fits; Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method when using the RooFit::AsymptoticError() command argument in RooAbsPdf::fitTo(). See also this writeup on extended weighted fits that is also linked from the reference guide. The pull request that introduced this feature might also be a good reference.; Compile your code with memory safe interfaces; If you define the ROOFIT_MEMORY_SAFE_INTERFACES preprocessor macro, the RooFit interface changes in a way such that memory leaks are avoided.; The most prominent effect of this change is that many functions that used to return an owning pointer (e.g., a pointer to an object that you need to manually delete) are then returning a std::unique_pt for automatic memory management.; For example this code would not compile anymore, because there is the risk that the caller forgets to delete params:; RooArgSet * params = pdf.getParameters(nullptr);; If you wrap such return values in a std::unique_ptr, then your code will compile both with and without memory safe interfaces:; std::unique_ptr<RooArgSet> params{pdf.getParameters(nullptr)};; Also some virtual RooFit functions like RooAbsReal::createIntegral() are returning a di",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:11448,Usability,clear,clear,11448,"s the return value; ...; // Use the RooFit::makeOwningPtr<T>() helper to translate the; // std::unique_ptr to the actual return type (either std::unique_ptr<T> or T*).; return RooFit::makeOwningPtr<RooAbsReal>(std::move(integral));; }; The biggest application of the memory-safe interfaces is to spot memory leaks in RooFit-based frameworks. If you make sure that your framework compiles both with and without ROOFIT_MEMORY_SAFE_INTERFACES, you can get rid of all memory leaks related to RooFit user error! After making the necessary changes, you can remove the marco definition again to keep backwards compatibility.; Note that the memory-safe interfaces might become the default at some point, so doing this backwards-compatible migration early is strongly encouraged and appreciated.; Removal of some memory-unsafe interfaces. The final bool takeOwnership parameter of the RooAddition and RooStats::HistFactory::PiecewiseInterpolation constructors was removed. This is to avoid situations where ownership is not clear to the compiler. Now, ownership of the input RooAbsArgs is never passed in the constructor. If you want the pass input ownership to the created object, please use addOwnedComponents. If you want to be extra safe, make sure the inputs are in an owning collection and then std::move the collection, so that the ownership is always clear.; Example:; RooArgList sumSet;; sumSet.add(*(new RooRealVar(""var1"", ""var1"", 1.0)));; sumSet.add(*(new RooRealVar(""var2"", ""var2"", 3.0)));; RooAddition addition{""addition"", ""addition"", sumSet, /*takeOwnership=*/true};; should become:; RooArgList sumSet;; sumSet.addOwned(std::make_unique<RooRealVar>(""var1"", ""var1"", 1.0));; sumSet.addOwned(std::make_unique<RooRealVar>(""var2"", ""var2"", 3.0));; RooAddition addition{""addition"", ""addition"", sumSet};; addition.addOwnedComponents(std::move(sumSet));. Deprecation of legacy iterators; The following methods related to the RooFit legacy iterators are deprecated and will be removed in ROOT 6.34. They s",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:11783,Usability,clear,clear,11783,"interfaces is to spot memory leaks in RooFit-based frameworks. If you make sure that your framework compiles both with and without ROOFIT_MEMORY_SAFE_INTERFACES, you can get rid of all memory leaks related to RooFit user error! After making the necessary changes, you can remove the marco definition again to keep backwards compatibility.; Note that the memory-safe interfaces might become the default at some point, so doing this backwards-compatible migration early is strongly encouraged and appreciated.; Removal of some memory-unsafe interfaces. The final bool takeOwnership parameter of the RooAddition and RooStats::HistFactory::PiecewiseInterpolation constructors was removed. This is to avoid situations where ownership is not clear to the compiler. Now, ownership of the input RooAbsArgs is never passed in the constructor. If you want the pass input ownership to the created object, please use addOwnedComponents. If you want to be extra safe, make sure the inputs are in an owning collection and then std::move the collection, so that the ownership is always clear.; Example:; RooArgList sumSet;; sumSet.add(*(new RooRealVar(""var1"", ""var1"", 1.0)));; sumSet.add(*(new RooRealVar(""var2"", ""var2"", 3.0)));; RooAddition addition{""addition"", ""addition"", sumSet, /*takeOwnership=*/true};; should become:; RooArgList sumSet;; sumSet.addOwned(std::make_unique<RooRealVar>(""var1"", ""var1"", 1.0));; sumSet.addOwned(std::make_unique<RooRealVar>(""var2"", ""var2"", 3.0));; RooAddition addition{""addition"", ""addition"", sumSet};; addition.addOwnedComponents(std::move(sumSet));. Deprecation of legacy iterators; The following methods related to the RooFit legacy iterators are deprecated and will be removed in ROOT 6.34. They should be replaced with the suitable STL-compatible interfaces, or you can just use range-based loops:. RooAbsArg::clientIterator(): use clients() and begin(), end() or range-based loops instead; RooAbsArg::valueClientIterator(): use valueClients(); RooAbsArg::shapeClientIterator(",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:14020,Usability,simpl,simply,14020,"nd() and range-based for loops; RooAbsCollection::iterator(): same; RooAbsCollection::fwdIterator(): same; RooWorkspace::componentIterator(): use RooWorkspace::components() with range-based loop. Deprecation of legacy test statistics classes in public interface; Instantiating the following classes and even including their header files is deprecated, and the headers will be removed in ROOT 6.34:. RooAbsTestStatistic; RooAbsOptTestStatistic; RooNLLVar; RooChi2Var; RooXYChi2Var. Please use the higher-level functions RooAbsPdf::createNLL() and RooAbsPdf::createChi2() if you want to create objects that represent test statistics.; Change of RooParamHistFunc; The RooParamHistFunc didn’t take any observable RooRealVar as constructor argument. It assumes as observable the internal variables in the passed RooDataHist. This means it was in most contexts unusable, because the input can’t be changed, other than loading a different bin in the dataset.; Furthermore, there was actually a constructor that took a RooAbsArg x, but it was simply ignored.; To fix all these problems, the existing constructors were replaced by a new one that takes the observable explicitly.; Since the old constructors resulted in wrong computation graphs that caused trouble with the new CPU evaluation backend, they had to be removed without deprecation. Please adapt your code if necessary.; Renaming of some RooFit classes; The RooPower was renamed to RooPowerSum, and RooExpPoly was renamed to RooLegacyExpPoly.; This was a necessary change, because the names of these classes introduced in ROOT 6.28 collided with some classes in CMS combine, which were around already long before. Therefore, the classes had to be renamed to not cause any problems for CMS.; In the unlikeliy case where you should have used these new classes for analysis already, please adapt your code to the new names and re-create your workspaces.; RDataFrame. The RDataFrame constructors that take in input one or more file names (or globs ther",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:21873,Usability,simpl,simple,21873,"ffer : "", char_buffer). # However, you can turn the buffer into a string very easily with as_string():; print(""struct.char_buffer.as_string(): "", char_buffer.as_string()); The output of this script with ROOT 6.32:; struct.char_buffer : <cppyy.LowLevelView object at 0x74c7a2682fb0>; struct.char_buffer.as_string(): foo; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; The new recommended way to get objects from a TFile or any TDirectory in general is now via __getitem__:; tree = my_file[""my_tree""] # instead of my_file.my_tree; This is more consistent with other Python collections (like dictionaries), makes sure that member functions can’t be confused with branch names, and easily allows you to use string variables as keys.; With the new dictionary-like syntax, you can also get objects with names that don’t qualify as a Python variable. Here is a short demo:; import ROOT. with ROOT.TFile.Open(""my_file.root"", ""RECREATE"") as my_file:. # Populate the TFile with simple objects.; my_file.WriteObject(ROOT.std.string(""hello world""), ""my_string""); my_file.WriteObject(ROOT.vector[""int""]([1, 2, 3]), ""my vector""). print(my_file[""my_string""]) # new syntax; print(my_file.my_string) # old deprecated syntax. # With the dictionary syntax, you can also use names that don't qualify as; # a Python variable:; print(my_file[""my vector""]); # print(my_file.my vector) # the old syntax would not work here!; The old pythonization with the __getattr__ syntax still works, but emits a deprecation warning and will be removed from ROOT 6.34.; Removal of Python 2 support; ROOT does no longer support Python 2. The minimum Python version necessary to use ROOT in a Python application is 3.8. As a consequence, any reference to Python 2 in ROOT code was removed and certain configuration options are no longer usable, e.g. root-config --python2-version; cmake -Dpyroot-python2. The cmake build system now looks for the standard Python3 package and previously custom Python-r",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:22703,Usability,usab,usable,22703,"ictionary-like syntax, you can also get objects with names that don’t qualify as a Python variable. Here is a short demo:; import ROOT. with ROOT.TFile.Open(""my_file.root"", ""RECREATE"") as my_file:. # Populate the TFile with simple objects.; my_file.WriteObject(ROOT.std.string(""hello world""), ""my_string""); my_file.WriteObject(ROOT.vector[""int""]([1, 2, 3]), ""my vector""). print(my_file[""my_string""]) # new syntax; print(my_file.my_string) # old deprecated syntax. # With the dictionary syntax, you can also use names that don't qualify as; # a Python variable:; print(my_file[""my vector""]); # print(my_file.my vector) # the old syntax would not work here!; The old pythonization with the __getattr__ syntax still works, but emits a deprecation warning and will be removed from ROOT 6.34.; Removal of Python 2 support; ROOT does no longer support Python 2. The minimum Python version necessary to use ROOT in a Python application is 3.8. As a consequence, any reference to Python 2 in ROOT code was removed and certain configuration options are no longer usable, e.g. root-config --python2-version; cmake -Dpyroot-python2. The cmake build system now looks for the standard Python3 package and previously custom Python-related cmake variables are now just the ones automatically produced by cmake (see https://cmake.org/cmake/help/latest/module/FindPython.html).; More usage of the public cppyy API; Many implementation details of the ROOT pythonizations were moved from C++ functions to pure Python bindings using the public cppyy API. This helps in the integration with the tool but also improves code efficiency and memory usage.; Class Reference Guide. Define missing doxygen groups.; Fix a few typos in the THStack documentation.; Small fixes in the THistPainter documentation.; Improve the TColor documentation: use modern C++ in the examples.; Make sure the python examples do not generate wrong namespaces in the documentation.; The dataframe tutorials json spec files were not displayed proper",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:24468,Usability,guid,guide,24468," TColor documentation: use modern C++ in the examples.; Make sure the python examples do not generate wrong namespaces in the documentation.; The dataframe tutorials json spec files were not displayed properly. Moreover there was no direct correspondence between the code source and the json file. Those files do not have any doc in them. With a direct link to the GitHub source file the dependency between source code and json is now more obvious.; Document how to remove shadow of TPave, as it was not evident (only explanations were hidden here and there in the forum).; Improve the SetFillColorAlpha documentation.; Simplify some graphics examples: arrow.C, crown.C, diamond.C and ellipse.C.; Fix a typo in the documentation of TGraph::SetHighlight in TGraph.cxx.; Change the marker style in the tutorial df014_CSVDataSource.; Remove useless settings in the tutorial scatter.C.; Fix the tutorial h1analysisTreeReader.C.; Fix doxygen formatting in TGNumberEntry.cxx.; Avoid the CDT documentation to appear in the reference guide.; Remove last references to the old ROOT drupal website. Build, Configuration and Testing Infrastructure; Release v6.32.00 is the first one integrated and tested entirely through the new GitHub based build system.; Bugs and Issues fixed in this release; More than 200 items were addressed for this release. The full list is:. [#15621] - Buffer overflow in TBranch::Init; [#15610] - Memory leak in TTree getattr pythonization; [#15590] - Infinite recursion in TFile::Open; [#15460] - TEnum::GetEnum(“B”)->GetUnderlyingType() does not following typedefs; [#15413] - Fails to build with cuDNN version 9; [#15406] - TEnum::GetEnum does not seem to see ‘through’ using statements.; [#15399] - Memory leak with jitted nodes if the execution is never triggered; [#15396] - [TMVA] Pymva test (Keras) failing on 632 and main; [#15370] - Broken link in HS3 printout; [#15340] - Webgraphics: canvas displayed, but many error printed; [#15253] - C++ standard not propagated via CMa",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:25982,Usability,progress bar,progress bar,25982,"tHub based build system.; Bugs and Issues fixed in this release; More than 200 items were addressed for this release. The full list is:. [#15621] - Buffer overflow in TBranch::Init; [#15610] - Memory leak in TTree getattr pythonization; [#15590] - Infinite recursion in TFile::Open; [#15460] - TEnum::GetEnum(“B”)->GetUnderlyingType() does not following typedefs; [#15413] - Fails to build with cuDNN version 9; [#15406] - TEnum::GetEnum does not seem to see ‘through’ using statements.; [#15399] - Memory leak with jitted nodes if the execution is never triggered; [#15396] - [TMVA] Pymva test (Keras) failing on 632 and main; [#15370] - Broken link in HS3 printout; [#15340] - Webgraphics: canvas displayed, but many error printed; [#15253] - C++ standard not propagated via CMake anymore; [#15197] - RBDT does not support xgboost inference; [#15156] - Segfault in TMVA::Experimental::SOFIE::RModel::Streamer; [#15139] - cmake option -Dall=YES breaks the cmake; [#15118] - jsoninterface does not build if provided with RapidYAML; [#15108] - Turn off clang-format for Linkdef files; [#15090] - TClass::GetClassInfo() is not thread safe; [#15077] - Passing different floating point types to RVec utility functions; [#15048] - [ntuple] Handling of virtual inheritance broken; [#15040] - RDataFrame Inaccurate example of progress bar from documentation; [#15028] - RDataFrame Unable to cacheread remote file; [#15027] - spurrious cmake message about AfterImage with -Dminimal=ON; [#14981] - RVecs leak memory with np.asarray in pyROOT; [#14964] - ROOT-HEAD fails with “cling interactive line includer >>>: fatal error: module file ‘[snip]/Vc.pcm’ not found: module file not found”; [#14958] - ROOT_HEAD failed with error message: Fail to detect cryptographic random generator; [#14921] - ROOT Fails to build macOS 14.4 arm64 Xcode 15.3; [#14914] - VecOps::Take with default argument doesn’t check correctly the out of boundary condition; [#14910] - hadd issue when using parallelization together with in",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:30068,Usability,guid,guides,30068,"#14329] - [RF] RDataFrameToRooFit - Clarification on returned object; [#14324] - Compatibility Issue with thisroot.sh and zsh; [#14320] - [RF] Wrong analytic integrals when using Gaussians with sigma depending on the observable; [#14303] - Test failure with nbconvert-7.14; [#14302] - The command “root –notebook” is not allowed on Windows 11; [#14277] - Cling triggers a huge number of openat calls when loading libraries; [#14263] - [tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; [#14256] - TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; [#14244] - String comparison operators defined in TString.h should be defined as constexpr; [#14229] - [6.30] root-config –git-revision broken; [#14225] - [RF] Segmentation fault in ROOT 6.30 workspace creation; [#14223] - Extremely long startup time when loading dictionaries with pyroot; [#14219] - [cling] Use deduction guides for llvm::ArrayRef; [#14211] - Implement value printing for std::source_location; [#14205] - [cling] Replace llvm::Optional and llvm::None with std::optional; [#14199] - Memory hoarding triggered by the TPluginManager; [#14188] - cmake find_package ROOT 6.30 broken: it requires nlohmann-json; [#14163] - cmake find_package ROOT broken with 6.30, nlohmann and vdt are builtin but not found; [#14162] - RooFFTConvPdf is not working for ROOT 6.30/02; [#14157] - Minuit2 standalone build: StandAlone.cmake looks for the wrong path for VERSION_FILE; [#14113] - The find_package(root) command fails when using Root installed via Homebrew.; [#14101] - Missing documentation for RDataSetSpec; [#14097] - Cleaner stack traces in python; [#14085] - thisroot.sh does not recognize bash when running in qemu-x86_64; [#14084] - [ntuple] RRecordField creation crashes when TStreamerInfo has insufficient information; [#14075] - [FreeBSD] root.exe crash at end of compilation during modules.idx generation; [#14068] - ROOT 6.30/00 reports root-config --version as 6.30.00;",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/release-notes.html:46029,Usability,simpl,simple,46029,"::ToyMCSample::GenerateToyData; [#13387] - Please recover SrvAuthenticate from libSrvAuth library; [#14541] - [ROOT-6193] Editor for palette axis cannot set title properties; [#15104] - new PyROOT/cppyy fails to pickle enums; [#15161] - Attribute (getitem) differences for PyROOT objects in ROOT master; [#15234] - cppyy - wrong object type when iterating over a polymorphic container; [#15269] - Iterators in pyROOT working differently in ROOT master compared to 6.30/02; [#15315] - PyROOT Example with inheriting from ROOT.Math.IMultiGenFunction doesn’t work after recent cppyy upgrade; [#15425] - TTreeProcessorMP processes events multiple times when there are more threads than entries; [#15755] - [RF][HS3] Higgs discovery workspaces roundtrip; [#15874] - [Hist] Backwards compatibility broken for THnSparseL in 6.32; [#15887] - Broken plot .C macros for default Name() argument in plotOn(); [#15977] - [gui] Event StatusBar does not work well when TMarker outside of zoom region; [#15986] - Problems with TUri compilation; [#16031] - VecOps binary functions not using the right types; [#16038] - Could NOT find Vdt error when using 6.32.02 docker image; [#16087] - [docs] Potential typo in function name case: DistanceToPrimitive; [#16201] - PyROOT Support most recent numba version 0.60.0 intervals; [ROOT-6286] - Reading a TChain and TTreeCache; [ROOT-7991] - THnSparse::ProjectionND yields disfunctional histogram; [ROOT-8238] - TPrincipal tries to make histograms with nbin=0; [ROOT-8519] - Bug when use simple math functions in TTree::SetAlias(). Release 6.32.06; Published on September 22, 2024; Items addressed in this release; This is the first ROOT release supporting macOS 15 Sequoia. [#15178] - ROOT generates CMake warnings when building from the tarball; [#16219] - Module map on the new XCode version for macos15-beta; [#16249] - Iterating with a range for does one extra iteration; [ROOT-10902] - SMatrix read from TTree contains all zeroes. HEAD of the v6-32-00-patches branch. ",MatchSource.WIKI,doc/v632/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/release-notes.html
https://root.cern/doc/v632/RElement_8cxx_source.html:9086,Deployability,configurat,configuration,9086,"le::RElement::GetTitlevirtual std::string GetTitle() constTitle of browsable (optional)Definition RElement.hxx:71; ROOT::Browsable::RElement::ComparePathsstatic int ComparePaths(const RElementPath_t &path1, const RElementPath_t &path2)Compare two paths, Returns number of elements matches in both paths.Definition RElement.cxx:145; ROOT::Browsable::RElement::GetPathAsStringstatic std::string GetPathAsString(const RElementPath_t &path)Converts element path back to string.Definition RElement.cxx:160; ROOT::Browsable::RElement::GetSubElementstatic std::shared_ptr< RElement > GetSubElement(std::shared_ptr< RElement > &elem, const RElementPath_t &path)Returns sub element.Definition RElement.cxx:69; ROOT::Browsable::RElement::CreateItemvirtual std::unique_ptr< RItem > CreateItem() constReturns item with element description.Definition RElement.cxx:105; ROOT::Browsable::RElement::ParsePathstatic RElementPath_t ParsePath(const std::string &str)Parse string path to produce RElementPath_t One should avoid to use string pathes as much as possible...Definition RElement.cxx:116; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; TBufferJSON::ConvertToJSONstatic TString ConvertToJSON(const TObject *obj, Int_t compact=0, const char *member_name=nullptr)Converts object, inherited from TObject class, to JSON string Lower digit of compact parameter define...Definition TBufferJSON.cxx:522; TString::Dataconst char * Data() constDefinition TString.h:376; nconst Int_t nDefinition legend1.C:16; ROOT::BrowsableDefinition RAnyObjectHolder.hxx:15; ROOT::Browsable::RElementPath_tstd::vector< std::string > RElementPath_tDefinition RElement.hxx:20; ROOT::BrowsableLogROOT::Experimental::RLogChannel & BrowsableLog()Log channel for Browsable diagnostics.Definition RElement.cxx:20; slashTCanvas * slash()Definition slash.C:1. guibrowsablesrcRElement.cxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:07:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/RElement_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RElement_8cxx_source.html
https://root.cern/doc/v632/RElement_8cxx_source.html:6339,Integrability,depend,depends,6339,"tract index from name; 175/// Index coded by client with `###<indx>$$$` suffix; 176/// Such coding used by browser to identify element by index; 177 ; 178int RElement::ExtractItemIndex(std::string &name); 179{; 180 auto p1 = name.rfind(""###""), p2 = name.rfind(""$$$"");; 181 if ((p1 == std::string::npos) || (p2 == std::string::npos) || (p1 >= p2) || (p2 != name.length()-3)) return -1;; 182 ; 183 int indx = std::stoi(name.substr(p1+3,p2-p1-3));; 184 name.resize(p1);; 185 return indx;; 186}; RElement.hxx; RItem.hxx; RLevelIter.hxx; RLogger.hxx; TBufferJSON.h; namechar name[80]Definition TGX11.cxx:110; ROOT::Browsable::RElement::GetNamevirtual std::string GetName() const =0Name of browsable, must be provided in derived classes.; ROOT::Browsable::RElement::GetContentKindstatic EContentKind GetContentKind(const std::string &kind)Find item with specified name Default implementation, should work for all.Definition RElement.cxx:52; ROOT::Browsable::RElement::GetContentvirtual std::string GetContent(const std::string &=""text"")Returns element content, depends from kind.Definition RElement.cxx:90; ROOT::Browsable::RElement::EContentKindEContentKindDefinition RElement.hxx:37; ROOT::Browsable::RElement::kFileName@ kFileName""filename"" - file name if applicableDefinition RElement.hxx:44; ROOT::Browsable::RElement::kNone@ kNonenot recognizedDefinition RElement.hxx:38; ROOT::Browsable::RElement::kJpeg@ kJpeg""jpg"" or ""jpeg"" - plain jpg binary code, returned inside std::stringDefinition RElement.hxx:42; ROOT::Browsable::RElement::kPng@ kPng""png"" - plain png binary code, returned inside std::stringDefinition RElement.hxx:41; ROOT::Browsable::RElement::kJson@ kJson""json"" representation of object, can be used in code editorDefinition RElement.hxx:43; ROOT::Browsable::RElement::kText@ kText""text"" - plain text for code editorDefinition RElement.hxx:39; ROOT::Browsable::RElement::kImage@ kImage""image64"" - base64 for supported image formats (png/gif/gpeg)Definition RElement.hxx:40; ROOT::Browsa",MatchSource.WIKI,doc/v632/RElement_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RElement_8cxx_source.html
https://root.cern/doc/v632/RElement_8cxx_source.html:9086,Modifiability,config,configuration,9086,"le::RElement::GetTitlevirtual std::string GetTitle() constTitle of browsable (optional)Definition RElement.hxx:71; ROOT::Browsable::RElement::ComparePathsstatic int ComparePaths(const RElementPath_t &path1, const RElementPath_t &path2)Compare two paths, Returns number of elements matches in both paths.Definition RElement.cxx:145; ROOT::Browsable::RElement::GetPathAsStringstatic std::string GetPathAsString(const RElementPath_t &path)Converts element path back to string.Definition RElement.cxx:160; ROOT::Browsable::RElement::GetSubElementstatic std::shared_ptr< RElement > GetSubElement(std::shared_ptr< RElement > &elem, const RElementPath_t &path)Returns sub element.Definition RElement.cxx:69; ROOT::Browsable::RElement::CreateItemvirtual std::unique_ptr< RItem > CreateItem() constReturns item with element description.Definition RElement.cxx:105; ROOT::Browsable::RElement::ParsePathstatic RElementPath_t ParsePath(const std::string &str)Parse string path to produce RElementPath_t One should avoid to use string pathes as much as possible...Definition RElement.cxx:116; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; TBufferJSON::ConvertToJSONstatic TString ConvertToJSON(const TObject *obj, Int_t compact=0, const char *member_name=nullptr)Converts object, inherited from TObject class, to JSON string Lower digit of compact parameter define...Definition TBufferJSON.cxx:522; TString::Dataconst char * Data() constDefinition TString.h:376; nconst Int_t nDefinition legend1.C:16; ROOT::BrowsableDefinition RAnyObjectHolder.hxx:15; ROOT::Browsable::RElementPath_tstd::vector< std::string > RElementPath_tDefinition RElement.hxx:20; ROOT::BrowsableLogROOT::Experimental::RLogChannel & BrowsableLog()Log channel for Browsable diagnostics.Definition RElement.cxx:20; slashTCanvas * slash()Definition slash.C:1. guibrowsablesrcRElement.cxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:07:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/RElement_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RElement_8cxx_source.html
https://root.cern/doc/v632/RElement_8cxx_source.html:9288,Modifiability,inherit,inherited,9288,"le::RElement::GetTitlevirtual std::string GetTitle() constTitle of browsable (optional)Definition RElement.hxx:71; ROOT::Browsable::RElement::ComparePathsstatic int ComparePaths(const RElementPath_t &path1, const RElementPath_t &path2)Compare two paths, Returns number of elements matches in both paths.Definition RElement.cxx:145; ROOT::Browsable::RElement::GetPathAsStringstatic std::string GetPathAsString(const RElementPath_t &path)Converts element path back to string.Definition RElement.cxx:160; ROOT::Browsable::RElement::GetSubElementstatic std::shared_ptr< RElement > GetSubElement(std::shared_ptr< RElement > &elem, const RElementPath_t &path)Returns sub element.Definition RElement.cxx:69; ROOT::Browsable::RElement::CreateItemvirtual std::unique_ptr< RItem > CreateItem() constReturns item with element description.Definition RElement.cxx:105; ROOT::Browsable::RElement::ParsePathstatic RElementPath_t ParsePath(const std::string &str)Parse string path to produce RElementPath_t One should avoid to use string pathes as much as possible...Definition RElement.cxx:116; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; TBufferJSON::ConvertToJSONstatic TString ConvertToJSON(const TObject *obj, Int_t compact=0, const char *member_name=nullptr)Converts object, inherited from TObject class, to JSON string Lower digit of compact parameter define...Definition TBufferJSON.cxx:522; TString::Dataconst char * Data() constDefinition TString.h:376; nconst Int_t nDefinition legend1.C:16; ROOT::BrowsableDefinition RAnyObjectHolder.hxx:15; ROOT::Browsable::RElementPath_tstd::vector< std::string > RElementPath_tDefinition RElement.hxx:20; ROOT::BrowsableLogROOT::Experimental::RLogChannel & BrowsableLog()Log channel for Browsable diagnostics.Definition RElement.cxx:20; slashTCanvas * slash()Definition slash.C:1. guibrowsablesrcRElement.cxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:07:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/RElement_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RElement_8cxx_source.html
https://root.cern/doc/v632/RElement_8cxx_source.html:3599,Safety,avoid,avoid,3599,"th_t &path); 70{; 71 auto curr = elem;; 72 ; 73 for (auto &itemname : path) {; 74 if (!curr); 75 return nullptr;; 76 ; 77 auto iter = curr->GetChildsIter();; 78 if (!iter || !iter->Find(itemname)); 79 return nullptr;; 80 ; 81 curr = iter->GetElement();; 82 }; 83 ; 84 return curr;; 85}; 86 ; 87/////////////////////////////////////////////////////////////////////; 88/// Returns string content like text file content or json representation; 89 ; 90std::string RElement::GetContent(const std::string &kind); 91{; 92 if (GetContentKind(kind) == kJson) {; 93 auto obj = GetObject();; 94 if (obj); 95 return TBufferJSON::ConvertToJSON(obj->GetObject(), obj->GetClass()).Data();; 96 }; 97 ; 98 return """"s;; 99}; 100 ; 101 ; 102/////////////////////////////////////////////////////////////////////; 103/// Returns item with element description; 104 ; 105std::unique_ptr<RItem> RElement::CreateItem() const; 106{; 107 auto item = std::make_unique<RItem>(GetName());; 108 item->SetTitle(GetTitle());; 109 return item;; 110}; 111 ; 112/////////////////////////////////////////////////////////////////////; 113/// Parse string path to produce RElementPath_t; 114/// One should avoid to use string pathes as much as possible; 115 ; 116RElementPath_t RElement::ParsePath(const std::string &strpath); 117{; 118 RElementPath_t arr;; 119 if (strpath.empty()); 120 return arr;; 121 ; 122 std::string slash = ""/"";; 123 ; 124 std::string::size_type previous = 0;; 125 if (strpath[0] == slash[0]) previous++;; 126 ; 127 auto current = strpath.find(slash, previous);; 128 while (current != std::string::npos) {; 129 if (current > previous); 130 arr.emplace_back(strpath.substr(previous, current - previous));; 131 previous = current + 1;; 132 current = strpath.find(slash, previous);; 133 }; 134 ; 135 if (previous < strpath.length()); 136 arr.emplace_back(strpath.substr(previous));; 137 ; 138 return arr;; 139}; 140 ; 141/////////////////////////////////////////////////////////////////////; 142/// Compare two paths,; ",MatchSource.WIKI,doc/v632/RElement_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RElement_8cxx_source.html
https://root.cern/doc/v632/RElement_8cxx_source.html:8971,Safety,avoid,avoid,8971,"wser to...Definition RElement.cxx:178; ROOT::Browsable::RElement::GetTitlevirtual std::string GetTitle() constTitle of browsable (optional)Definition RElement.hxx:71; ROOT::Browsable::RElement::ComparePathsstatic int ComparePaths(const RElementPath_t &path1, const RElementPath_t &path2)Compare two paths, Returns number of elements matches in both paths.Definition RElement.cxx:145; ROOT::Browsable::RElement::GetPathAsStringstatic std::string GetPathAsString(const RElementPath_t &path)Converts element path back to string.Definition RElement.cxx:160; ROOT::Browsable::RElement::GetSubElementstatic std::shared_ptr< RElement > GetSubElement(std::shared_ptr< RElement > &elem, const RElementPath_t &path)Returns sub element.Definition RElement.cxx:69; ROOT::Browsable::RElement::CreateItemvirtual std::unique_ptr< RItem > CreateItem() constReturns item with element description.Definition RElement.cxx:105; ROOT::Browsable::RElement::ParsePathstatic RElementPath_t ParsePath(const std::string &str)Parse string path to produce RElementPath_t One should avoid to use string pathes as much as possible...Definition RElement.cxx:116; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; TBufferJSON::ConvertToJSONstatic TString ConvertToJSON(const TObject *obj, Int_t compact=0, const char *member_name=nullptr)Converts object, inherited from TObject class, to JSON string Lower digit of compact parameter define...Definition TBufferJSON.cxx:522; TString::Dataconst char * Data() constDefinition TString.h:376; nconst Int_t nDefinition legend1.C:16; ROOT::BrowsableDefinition RAnyObjectHolder.hxx:15; ROOT::Browsable::RElementPath_tstd::vector< std::string > RElementPath_tDefinition RElement.hxx:20; ROOT::BrowsableLogROOT::Experimental::RLogChannel & BrowsableLog()Log channel for Browsable diagnostics.Definition RElement.cxx:20; slashTCanvas * slash()Definition slash.C:1. guibrowsablesrcRElement.cxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1",MatchSource.WIKI,doc/v632/RElement_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RElement_8cxx_source.html
https://root.cern/doc/v632/RElement_8cxx_source.html:9082,Testability,log,log,9082,"le::RElement::GetTitlevirtual std::string GetTitle() constTitle of browsable (optional)Definition RElement.hxx:71; ROOT::Browsable::RElement::ComparePathsstatic int ComparePaths(const RElementPath_t &path1, const RElementPath_t &path2)Compare two paths, Returns number of elements matches in both paths.Definition RElement.cxx:145; ROOT::Browsable::RElement::GetPathAsStringstatic std::string GetPathAsString(const RElementPath_t &path)Converts element path back to string.Definition RElement.cxx:160; ROOT::Browsable::RElement::GetSubElementstatic std::shared_ptr< RElement > GetSubElement(std::shared_ptr< RElement > &elem, const RElementPath_t &path)Returns sub element.Definition RElement.cxx:69; ROOT::Browsable::RElement::CreateItemvirtual std::unique_ptr< RItem > CreateItem() constReturns item with element description.Definition RElement.cxx:105; ROOT::Browsable::RElement::ParsePathstatic RElementPath_t ParsePath(const std::string &str)Parse string path to produce RElementPath_t One should avoid to use string pathes as much as possible...Definition RElement.cxx:116; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; TBufferJSON::ConvertToJSONstatic TString ConvertToJSON(const TObject *obj, Int_t compact=0, const char *member_name=nullptr)Converts object, inherited from TObject class, to JSON string Lower digit of compact parameter define...Definition TBufferJSON.cxx:522; TString::Dataconst char * Data() constDefinition TString.h:376; nconst Int_t nDefinition legend1.C:16; ROOT::BrowsableDefinition RAnyObjectHolder.hxx:15; ROOT::Browsable::RElementPath_tstd::vector< std::string > RElementPath_tDefinition RElement.hxx:20; ROOT::BrowsableLogROOT::Experimental::RLogChannel & BrowsableLog()Log channel for Browsable diagnostics.Definition RElement.cxx:20; slashTCanvas * slash()Definition slash.C:1. guibrowsablesrcRElement.cxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:07:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/RElement_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RElement_8cxx_source.html
https://root.cern/doc/v632/RFileDialog_8hxx_source.html:6408,Deployability,update,update,6408,"::GetNameFiltersconst auto & GetNameFilters() constReturns array of name filters.Definition RFileDialog.hxx:94; ROOT::RFileDialog::Dialogstatic std::string Dialog(EDialogTypes kind, const std::string &title, const std::string &fname)Start specified dialog type.Definition RFileDialog.cxx:374; ROOT::RFileDialog::fWebWindowstd::shared_ptr< RWebWindow > fWebWindow! web window for file dialogDefinition RFileDialog.hxx:58; ROOT::RFileDialog::fKindEDialogTypes fKind! dialog kind OpenFile, SaveAs, NewFileDefinition RFileDialog.hxx:53; ROOT::RFileDialog::GetFileNameconst std::string & GetFileName() constDefinition RFileDialog.hxx:112; ROOT::RFileDialog::GetCanChangePathbool GetCanChangePath() constReturns true if working path can be change with gui elements.Definition RFileDialog.hxx:100; ROOT::RFileDialog::fCallbackRFileDialogCallback_t fCallback! function receiving result, called onceDefinition RFileDialog.hxx:64; ROOT::RFileDialog::Showvoid Show(const RWebDisplayArgs &args="""")Show or update RFileDialog in web window If web window already started - just refresh it like ""reload...Definition RFileDialog.cxx:113; ROOT::RFileDialog::InvokeCallBackvoid InvokeCallBack()Invoke specified callback.Definition RFileDialog.cxx:360; ROOT::RFileDialog::SaveAsstatic std::string SaveAs(const std::string &title="""", const std::string &fname="""")Start SaveAs dialog.Definition RFileDialog.cxx:404; ROOT::RFileDialog::GetSelectedFilterstd::string GetSelectedFilter() constReturns selected filter Can differ from specified value - if it does not match to existing entry in N...Definition RFileDialog.cxx:160; ROOT::RFileDialog::RWebWindowPluginfriend class Details::RWebWindowPluginDefinition RFileDialog.hxx:42; ROOT::RFileDialog::SetNameFiltersvoid SetNameFilters(const std::vector< std::string > &arr)Set array of name filters like ""Text files (*.txt)"", ""Any files (*)"", ""Image files (*png *....Definition RFileDialog.hxx:92; ROOT::RFileDialog::ProcessMsgvoid ProcessMsg(unsigned connid, const std::strin",MatchSource.WIKI,doc/v632/RFileDialog_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RFileDialog_8hxx_source.html
https://root.cern/doc/v632/RFileDialog_8hxx_source.html:1133,Integrability,message,message,1133,"h>; 22 ; 23namespace ROOT {; 24 ; 25namespace Details {; 26 class RWebWindowPlugin;; 27}; 28 ; 29/** \class ROOT::RFileDialog; 30\ingroup rbrowser; 31Initial message send to client to configure layout; 32*/; 33 ; 34/// function signature for file dialog call-backs; 35/// argument is selected file name; 36using RFileDialogCallback_t = std::function<void(const std::string &)>;; 37 ; 38 ; 39/** Web-based FileDialog */; 40 ; 41class RFileDialog {; 42 friend class Details::RWebWindowPlugin;; 43public:; 44 ; 45 enum EDialogTypes {; 46 kOpenFile,; 47 kSaveAs,; 48 kNewFile; 49 };; 50 ; 51protected:; 52 ; 53 EDialogTypes fKind{kOpenFile}; ///<! dialog kind OpenFile, SaveAs, NewFile; 54 std::string fTitle; ///<! title, when not specified default will be used; 55 RBrowserData fBrowsable; ///<! central browsing element; 56 bool fCanChangePath{true}; ///<! if working path can be changed via gui elements; 57 ; 58 std::shared_ptr<RWebWindow> fWebWindow; ///<! web window for file dialog; 59 ; 60 bool fDidSelect{false}; ///<! t",MatchSource.WIKI,doc/v632/RFileDialog_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RFileDialog_8hxx_source.html
https://root.cern/doc/v632/RFileDialog_8hxx_source.html:9017,Integrability,message,message,9017,"FileDialog::kOpenFile@ kOpenFileDefinition RFileDialog.hxx:46; ROOT::RFileDialog::kNewFile@ kNewFileDefinition RFileDialog.hxx:48; ROOT::RFileDialog::kSaveAs@ kSaveAsDefinition RFileDialog.hxx:47; ROOT::RFileDialog::Hidevoid Hide()Hide ROOT Browser.Definition RFileDialog.cxx:127; ROOT::RFileDialog::GetRegexpstd::string GetRegexp(const std::string &name) constReturns regexp for selected filter String should have form ""Filter name (*.ext1 *....Definition RFileDialog.cxx:191; ROOT::RFileDialog::fSelectedFilterstd::string fSelectedFilter! name of selected filterDefinition RFileDialog.hxx:61; ROOT::RFileDialog::SetCanChangePathvoid SetCanChangePath(bool on=true)Configure if working path in dialog can be changed via gui elements.Definition RFileDialog.hxx:97; ROOT::RFileDialog::SendChPathMsgvoid SendChPathMsg(unsigned connid)Sends new data after change current directory.Definition RFileDialog.cxx:255; ROOT::RFileDialog::IsMessageToStartDialogstatic bool IsMessageToStartDialog(const std::string &msg)Check if this could be the message send by client to start new file dialog If returns true,...Definition RFileDialog.cxx:424; ROOT::RFileDialog::GetWorkingPathstd::string GetWorkingPath() constReturns current working path.Definition RFileDialog.cxx:351; ROOT::RFileDialog::TypeAsStringstatic std::string TypeAsString(EDialogTypes kind)Returns dialog type as string String value used for configuring JS-side.Definition RFileDialog.cxx:136; ROOT::RFileDialog::NewFilestatic std::string NewFile(const std::string &title="""", const std::string &fname="""")Start NewFile dialog.Definition RFileDialog.cxx:414; ROOT::RFileDialog::SetSelectedFiltervoid SetSelectedFilter(const std::string &name)Configure selected filter Has to be one of the string from NameFilters entry.Definition RFileDialog.cxx:151; ROOT::RFileDialog::Embedstatic std::shared_ptr< RFileDialog > Embed(const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args)Create dialog instance to use as embedded di",MatchSource.WIKI,doc/v632/RFileDialog_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RFileDialog_8hxx_source.html
https://root.cern/doc/v632/RFileDialog_8hxx_source.html:10594,Integrability,message,message,10594,"finition RFileDialog.cxx:414; ROOT::RFileDialog::SetSelectedFiltervoid SetSelectedFilter(const std::string &name)Configure selected filter Has to be one of the string from NameFilters entry.Definition RFileDialog.cxx:151; ROOT::RFileDialog::Embedstatic std::shared_ptr< RFileDialog > Embed(const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args)Create dialog instance to use as embedded dialog inside other widget Embedded dialog started on the c...Definition RFileDialog.cxx:437; ROOT::RFileDialog::SetCallbackvoid SetCallback(RFileDialogCallback_t callback)Assign callback.Definition RFileDialog.cxx:101; ROOT::RFileDialog::fBrowsableRBrowserData fBrowsable! central browsing elementDefinition RFileDialog.hxx:55; ROOT::RFileDialog::fTitlestd::string fTitle! title, when not specified default will be usedDefinition RFileDialog.hxx:54; ROOT::RFileDialog::IsCompletedbool IsCompleted() constDefinition RFileDialog.hxx:111; ROOT::RFileDialog::SendInitMsgvoid SendInitMsg(unsigned connid)Sends initial message to the client.Definition RFileDialog.cxx:229; ROOT::RFileDialog::GetTypeconst EDialogTypes & GetType() constDefinition RFileDialog.hxx:86; ROOT::RFileDialog::SetWorkingPathvoid SetWorkingPath(const std::string &)Change current working path of file dialog If dialog already shown, change will be immediately applie...Definition RFileDialog.cxx:337; ROOT::RFileDialog::~RFileDialogvirtual ~RFileDialog()destructorDefinition RFileDialog.cxx:90; ROOT::RFileDialog::fSelectstd::string fSelect! result of file selectionDefinition RFileDialog.hxx:63; ROOT::RWebDisplayArgsHolds different arguments for starting browser with RWebDisplayHandle::Display() method.Definition RWebDisplayArgs.hxx:33; ROOT::MacOSX::DetailsDefinition TMacOSXSystem.h:30; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::RFileDialogCallback_tstd::function< void(const std::string &)> RFileDia",MatchSource.WIKI,doc/v632/RFileDialog_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RFileDialog_8hxx_source.html
https://root.cern/doc/v632/RFileDialog_8hxx_source.html:1159,Modifiability,config,configure,1159,"h>; 22 ; 23namespace ROOT {; 24 ; 25namespace Details {; 26 class RWebWindowPlugin;; 27}; 28 ; 29/** \class ROOT::RFileDialog; 30\ingroup rbrowser; 31Initial message send to client to configure layout; 32*/; 33 ; 34/// function signature for file dialog call-backs; 35/// argument is selected file name; 36using RFileDialogCallback_t = std::function<void(const std::string &)>;; 37 ; 38 ; 39/** Web-based FileDialog */; 40 ; 41class RFileDialog {; 42 friend class Details::RWebWindowPlugin;; 43public:; 44 ; 45 enum EDialogTypes {; 46 kOpenFile,; 47 kSaveAs,; 48 kNewFile; 49 };; 50 ; 51protected:; 52 ; 53 EDialogTypes fKind{kOpenFile}; ///<! dialog kind OpenFile, SaveAs, NewFile; 54 std::string fTitle; ///<! title, when not specified default will be used; 55 RBrowserData fBrowsable; ///<! central browsing element; 56 bool fCanChangePath{true}; ///<! if working path can be changed via gui elements; 57 ; 58 std::shared_ptr<RWebWindow> fWebWindow; ///<! web window for file dialog; 59 ; 60 bool fDidSelect{false}; ///<! t",MatchSource.WIKI,doc/v632/RFileDialog_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RFileDialog_8hxx_source.html
https://root.cern/doc/v632/RFileDialog_8hxx_source.html:9377,Modifiability,config,configuring,9377,"st std::string &name) constReturns regexp for selected filter String should have form ""Filter name (*.ext1 *....Definition RFileDialog.cxx:191; ROOT::RFileDialog::fSelectedFilterstd::string fSelectedFilter! name of selected filterDefinition RFileDialog.hxx:61; ROOT::RFileDialog::SetCanChangePathvoid SetCanChangePath(bool on=true)Configure if working path in dialog can be changed via gui elements.Definition RFileDialog.hxx:97; ROOT::RFileDialog::SendChPathMsgvoid SendChPathMsg(unsigned connid)Sends new data after change current directory.Definition RFileDialog.cxx:255; ROOT::RFileDialog::IsMessageToStartDialogstatic bool IsMessageToStartDialog(const std::string &msg)Check if this could be the message send by client to start new file dialog If returns true,...Definition RFileDialog.cxx:424; ROOT::RFileDialog::GetWorkingPathstd::string GetWorkingPath() constReturns current working path.Definition RFileDialog.cxx:351; ROOT::RFileDialog::TypeAsStringstatic std::string TypeAsString(EDialogTypes kind)Returns dialog type as string String value used for configuring JS-side.Definition RFileDialog.cxx:136; ROOT::RFileDialog::NewFilestatic std::string NewFile(const std::string &title="""", const std::string &fname="""")Start NewFile dialog.Definition RFileDialog.cxx:414; ROOT::RFileDialog::SetSelectedFiltervoid SetSelectedFilter(const std::string &name)Configure selected filter Has to be one of the string from NameFilters entry.Definition RFileDialog.cxx:151; ROOT::RFileDialog::Embedstatic std::shared_ptr< RFileDialog > Embed(const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args)Create dialog instance to use as embedded dialog inside other widget Embedded dialog started on the c...Definition RFileDialog.cxx:437; ROOT::RFileDialog::SetCallbackvoid SetCallback(RFileDialogCallback_t callback)Assign callback.Definition RFileDialog.cxx:101; ROOT::RFileDialog::fBrowsableRBrowserData fBrowsable! central browsing elementDefinition RFileDialog.hxx:55; ROOT::R",MatchSource.WIKI,doc/v632/RFileDialog_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RFileDialog_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:14778,Availability,recover,recover,14778,"sc.emplace_back(node ? node->GetNumber() - offset : 0);; 529 TGeoVolume *vol = node ? node->GetVolume() : topvolume;; 530 ; 531 auto &desc = fDesc[cnt++];; 532 ; 533 sortarr.emplace_back(&desc);; 534 ; 535 desc.name = node ? node->GetName() : vol->GetName();; 536 ; 537 auto shape = dynamic_cast<TGeoBBox *>(vol->GetShape());; 538 if (shape) {; 539 desc.vol = TMath::Sqrt(shape->GetDX() * shape->GetDX() + shape->GetDY() * shape->GetDY() +; 540 shape->GetDZ() * shape->GetDZ());; 541 desc.nfaces = CountShapeFaces(shape);; 542 }; 543 ; 544 CopyMaterialProperties(vol, desc);; 545 ; 546 auto chlds = node ? node->GetNodes() : vol->GetNodes();; 547 ; 548 PackMatrix(desc.matr, node ? node->GetMatrix() : nullptr);; 549 ; 550 if (chlds); 551 for (int n = 0; n <= chlds->GetLast(); ++n) {; 552 auto chld = dynamic_cast<TGeoNode *>(chlds->At(n));; 553 desc.chlds.emplace_back(chld->GetNumber() - offset);; 554 }; 555 }; 556 ; 557 // recover numbers; 558 cnt = 0;; 559 for (auto node : fNodes) {; 560 auto number = numbers[cnt++];; 561 if (node); 562 node->SetNumber(number);; 563 }; 564 ; 565 // sort in volume descent order; 566 std::sort(sortarr.begin(), sortarr.end(), [](RGeomNode *a, RGeomNode *b) { return a->vol > b->vol; });; 567 ; 568 cnt = 0;; 569 for (auto &elem : sortarr) {; 570 fSortMap.emplace_back(elem->id);; 571 elem->sortid = cnt++; // keep place in sorted array to correctly apply cut; 572 }; 573 ; 574 MarkVisible(); // set visibility flags; 575 ; 576 ProduceIdShifts();; 577}; 578 ; 579/////////////////////////////////////////////////////////////////////; 580/// Get volume for specified nodeid; 581/// If specific volume was configured, it will be returned for nodeid==0; 582 ; 583TGeoVolume *RGeomDescription::GetVolume(int nodeid); 584{; 585 auto node = fNodes[nodeid];; 586 if (node); 587 return node->GetVolume();; 588 return nodeid == 0 ? fDrawVolume : nullptr;; 589}; 590 ; 591/////////////////////////////////////////////////////////////////////; 592/// Set visibility flag f",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:40340,Availability,avail,available,40340,"92 break;; 1293 ; 1294 // desc.SetDisplayed(true);; 1295 }; 1296 ; 1297 // finally we should create data for streaming to the client; 1298 // it includes list of visible nodes and rawdata; 1299 ; 1300 RGeomDrawing drawing;; 1301 ResetRndrInfos();; 1302 bool has_shape = false;; 1303 ; 1304 ScanNodes(true, level, [&, this](RGeomNode &node, std::vector<int> &stack, bool, int seqid) {; 1305 if ((node.sortid < fDrawIdCut) && (viscnt[node.id] > 0)) {; 1306 drawing.visibles.emplace_back(node.id, seqid, stack);; 1307 ; 1308 auto &item = drawing.visibles.back();; 1309 item.color = node.color;; 1310 item.opacity = node.opacity;; 1311 ; 1312 auto volume = GetVolume(node.id);; 1313 ; 1314 auto &sd = MakeShapeDescr(volume->GetShape());; 1315 ; 1316 item.ri = sd.rndr_info();; 1317 if (sd.has_shape()); 1318 has_shape = true;; 1319 }; 1320 return true;; 1321 });; 1322 ; 1323 CollectNodes(drawing, all_nodes);; 1324 ; 1325 return MakeDrawingJson(drawing, has_shape);; 1326}; 1327 ; 1328/////////////////////////////////////////////////////////////////////; 1329/// Check if there is draw data available; 1330 ; 1331bool RGeomDescription::HasDrawData() const; 1332{; 1333 TLockGuard lock(fMutex);; 1334 return (fDrawJson.length() > 0) && (fDrawIdCut > 0);; 1335}; 1336 ; 1337/////////////////////////////////////////////////////////////////////; 1338/// Produces search data if necessary; 1339 ; 1340void RGeomDescription::ProduceSearchData(); 1341{; 1342 TLockGuard lock(fMutex);; 1343 ; 1344 if (fSearch.empty() || !fSearchJson.empty()); 1345 return;; 1346 ; 1347 std::string hjson;; 1348 ; 1349 SearchVisibles(fSearch, hjson, fSearchJson);; 1350 ; 1351 (void)hjson; // not used here; 1352}; 1353 ; 1354/////////////////////////////////////////////////////////////////////; 1355/// Collect all information required to draw geometry on the client; 1356/// This includes list of each visible nodes, meshes and matrixes; 1357 ; 1358void RGeomDescription::ProduceDrawData(); 1359{; 1360 auto json = ProduceJs",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:48831,Availability,failure,failure,48831," seqid, stack);; 1568 ; 1569 // no need to transfer shape if it provided with main drawing list; 1570 // also no binary will be transported when too many matches are there; 1571 if (!send_rawdata || (node.sortid < fDrawIdCut)) {; 1572 // do not include render data; 1573 return true;; 1574 }; 1575 ; 1576 auto &item = drawing.visibles.back();; 1577 auto volume = GetVolume(node.id);; 1578 ; 1579 item.color = node.color;; 1580 item.opacity = node.opacity;; 1581 ; 1582 auto &sd = MakeShapeDescr(volume->GetShape());; 1583 ; 1584 item.ri = sd.rndr_info();; 1585 if (sd.has_shape()); 1586 has_shape = true;; 1587 return true;; 1588 });; 1589 ; 1590 hjson = ""FESCR:""s + TBufferJSON::ToJSON(&found_desc, GetJsonComp()).Data();; 1591 ; 1592 CollectNodes(drawing);; 1593 ; 1594 json = ""FDRAW:""s + MakeDrawingJson(drawing, has_shape);; 1595 ; 1596 return nmatches;; 1597}; 1598 ; 1599/////////////////////////////////////////////////////////////////////////////////; 1600/// Returns nodeid for given stack array, returns -1 in case of failure; 1601 ; 1602int RGeomDescription::FindNodeId(const std::vector<int> &stack); 1603{; 1604 TLockGuard lock(fMutex);; 1605 ; 1606 int nodeid = 0;; 1607 ; 1608 for (auto &chindx : stack) {; 1609 auto &node = fDesc[nodeid];; 1610 if (chindx >= (int)node.chlds.size()); 1611 return -1;; 1612 nodeid = node.chlds[chindx];; 1613 }; 1614 ; 1615 return nodeid;; 1616}; 1617 ; 1618/////////////////////////////////////////////////////////////////////////////////; 1619/// Creates stack for given array of ids, first element always should be 0; 1620 ; 1621std::vector<int> RGeomDescription::MakeStackByIds(const std::vector<int> &ids); 1622{; 1623 TLockGuard lock(fMutex);; 1624 ; 1625 std::vector<int> stack;; 1626 ; 1627 if (ids.empty()); 1628 return stack;; 1629 ; 1630 if (ids[0] != 0) {; 1631 printf(""Wrong first id\n"");; 1632 return stack;; 1633 }; 1634 ; 1635 int nodeid = 0;; 1636 ; 1637 for (unsigned k = 1; k < ids.size(); ++k) {; 1638 ; 1639 int prntid = nodeid;; 1",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:51336,Availability,failure,failure,51336,"turn stack;; 1659}; 1660 ; 1661/////////////////////////////////////////////////////////////////////////////////; 1662/// Produce stack based on string path; 1663/// Used to highlight geo volumes by browser hover event; 1664 ; 1665std::vector<int> RGeomDescription::MakeStackByPath(const std::vector<std::string> &path); 1666{; 1667 TLockGuard lock(fMutex);; 1668 ; 1669 std::vector<int> res;; 1670 ; 1671 RGeomBrowserIter iter(*this);; 1672 ; 1673 if (iter.Navigate(path)); 1674 res = MakeStackByIds(iter.CurrentIds());; 1675 ; 1676 return res;; 1677}; 1678 ; 1679/////////////////////////////////////////////////////////////////////////////////; 1680/// Produce list of node ids for given stack; 1681/// If found nodes preselected - use their ids; 1682 ; 1683std::vector<int> RGeomDescription::MakeIdsByStack(const std::vector<int> &stack); 1684{; 1685 TLockGuard lock(fMutex);; 1686 ; 1687 std::vector<int> ids;; 1688 ; 1689 ids.emplace_back(0);; 1690 int nodeid = 0;; 1691 bool failure = false;; 1692 ; 1693 for (auto s : stack) {; 1694 auto &chlds = fDesc[nodeid].chlds;; 1695 if (s >= (int)chlds.size()) {; 1696 failure = true;; 1697 break;; 1698 }; 1699 ; 1700 ids.emplace_back(chlds[s]);; 1701 ; 1702 nodeid = chlds[s];; 1703 }; 1704 ; 1705 if (failure) {; 1706 printf(""Fail to convert stack into list of nodes\n"");; 1707 ids.clear();; 1708 }; 1709 ; 1710 return ids;; 1711}; 1712 ; 1713/////////////////////////////////////////////////////////////////////////////////; 1714/// Returns path string for provided stack; 1715 ; 1716std::vector<std::string> RGeomDescription::MakePathByStack(const std::vector<int> &stack); 1717{; 1718 TLockGuard lock(fMutex);; 1719 ; 1720 std::vector<std::string> path;; 1721 ; 1722 auto ids = MakeIdsByStack(stack);; 1723 path.reserve(ids.size());; 1724for (auto &id : ids); 1725 path.emplace_back(fDesc[id].name);; 1726 ; 1727 return path;; 1728}; 1729 ; 1730/////////////////////////////////////////////////////////////////////////////////; 1731/// Return str",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:51472,Availability,failure,failure,51472,"ased on string path; 1663/// Used to highlight geo volumes by browser hover event; 1664 ; 1665std::vector<int> RGeomDescription::MakeStackByPath(const std::vector<std::string> &path); 1666{; 1667 TLockGuard lock(fMutex);; 1668 ; 1669 std::vector<int> res;; 1670 ; 1671 RGeomBrowserIter iter(*this);; 1672 ; 1673 if (iter.Navigate(path)); 1674 res = MakeStackByIds(iter.CurrentIds());; 1675 ; 1676 return res;; 1677}; 1678 ; 1679/////////////////////////////////////////////////////////////////////////////////; 1680/// Produce list of node ids for given stack; 1681/// If found nodes preselected - use their ids; 1682 ; 1683std::vector<int> RGeomDescription::MakeIdsByStack(const std::vector<int> &stack); 1684{; 1685 TLockGuard lock(fMutex);; 1686 ; 1687 std::vector<int> ids;; 1688 ; 1689 ids.emplace_back(0);; 1690 int nodeid = 0;; 1691 bool failure = false;; 1692 ; 1693 for (auto s : stack) {; 1694 auto &chlds = fDesc[nodeid].chlds;; 1695 if (s >= (int)chlds.size()) {; 1696 failure = true;; 1697 break;; 1698 }; 1699 ; 1700 ids.emplace_back(chlds[s]);; 1701 ; 1702 nodeid = chlds[s];; 1703 }; 1704 ; 1705 if (failure) {; 1706 printf(""Fail to convert stack into list of nodes\n"");; 1707 ids.clear();; 1708 }; 1709 ; 1710 return ids;; 1711}; 1712 ; 1713/////////////////////////////////////////////////////////////////////////////////; 1714/// Returns path string for provided stack; 1715 ; 1716std::vector<std::string> RGeomDescription::MakePathByStack(const std::vector<int> &stack); 1717{; 1718 TLockGuard lock(fMutex);; 1719 ; 1720 std::vector<std::string> path;; 1721 ; 1722 auto ids = MakeIdsByStack(stack);; 1723 path.reserve(ids.size());; 1724for (auto &id : ids); 1725 path.emplace_back(fDesc[id].name);; 1726 ; 1727 return path;; 1728}; 1729 ; 1730/////////////////////////////////////////////////////////////////////////////////; 1731/// Return string with only part of nodes description which were modified; 1732/// Checks also volume; 1733 ; 1734std::string RGeomDescription::Produc",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:51607,Availability,failure,failure,51607,"Description::MakeStackByPath(const std::vector<std::string> &path); 1666{; 1667 TLockGuard lock(fMutex);; 1668 ; 1669 std::vector<int> res;; 1670 ; 1671 RGeomBrowserIter iter(*this);; 1672 ; 1673 if (iter.Navigate(path)); 1674 res = MakeStackByIds(iter.CurrentIds());; 1675 ; 1676 return res;; 1677}; 1678 ; 1679/////////////////////////////////////////////////////////////////////////////////; 1680/// Produce list of node ids for given stack; 1681/// If found nodes preselected - use their ids; 1682 ; 1683std::vector<int> RGeomDescription::MakeIdsByStack(const std::vector<int> &stack); 1684{; 1685 TLockGuard lock(fMutex);; 1686 ; 1687 std::vector<int> ids;; 1688 ; 1689 ids.emplace_back(0);; 1690 int nodeid = 0;; 1691 bool failure = false;; 1692 ; 1693 for (auto s : stack) {; 1694 auto &chlds = fDesc[nodeid].chlds;; 1695 if (s >= (int)chlds.size()) {; 1696 failure = true;; 1697 break;; 1698 }; 1699 ; 1700 ids.emplace_back(chlds[s]);; 1701 ; 1702 nodeid = chlds[s];; 1703 }; 1704 ; 1705 if (failure) {; 1706 printf(""Fail to convert stack into list of nodes\n"");; 1707 ids.clear();; 1708 }; 1709 ; 1710 return ids;; 1711}; 1712 ; 1713/////////////////////////////////////////////////////////////////////////////////; 1714/// Returns path string for provided stack; 1715 ; 1716std::vector<std::string> RGeomDescription::MakePathByStack(const std::vector<int> &stack); 1717{; 1718 TLockGuard lock(fMutex);; 1719 ; 1720 std::vector<std::string> path;; 1721 ; 1722 auto ids = MakeIdsByStack(stack);; 1723 path.reserve(ids.size());; 1724for (auto &id : ids); 1725 path.emplace_back(fDesc[id].name);; 1726 ; 1727 return path;; 1728}; 1729 ; 1730/////////////////////////////////////////////////////////////////////////////////; 1731/// Return string with only part of nodes description which were modified; 1732/// Checks also volume; 1733 ; 1734std::string RGeomDescription::ProduceModifyReply(int nodeid); 1735{; 1736 TLockGuard lock(fMutex);; 1737 ; 1738 std::vector<RGeomNodeBase *> nodes;; 173",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:75202,Availability,avail,available,75202,"d::string &req="""")Find description object for requested shape If not exists - will be created.Definition RGeomData.cxx:767; ROOT::RGeomDescription::fDescstd::vector< RGeomNode > fDesc! converted description, send to clientDefinition RGeomData.hxx:243; ROOT::RGeomDescription::PackMatrixvoid PackMatrix(std::vector< float > &arr, TGeoMatrix *matr)Pack matrix into vector, which can be send to client Following sizes can be used for vector: 0 - Iden...Definition RGeomData.cxx:341; ROOT::RGeomDescription::ProduceDrawingForbool ProduceDrawingFor(int nodeid, std::string &json, bool check_volume=false)Produce shape rendering data for given stack All nodes, which are referencing same shape will be tran...Definition RGeomData.cxx:1757; ROOT::RGeomDescription::MakeNodeInfostd::unique_ptr< RGeomNodeInfo > MakeNodeInfo(const std::vector< int > &stack)Change visibility for specified element Returns true if changes was performed.Definition RGeomData.cxx:1899; ROOT::RGeomDescription::HasDrawDatabool HasDrawData() constCheck if there is draw data available.Definition RGeomData.cxx:1331; ROOT::RGeomDescription::MakeIdsByStackstd::vector< int > MakeIdsByStack(const std::vector< int > &stack)Produce list of node ids for given stack If found nodes preselected - use their ids.Definition RGeomData.cxx:1683; ROOT::RGeomDescription::MarkVisibleint MarkVisible(bool on_screen=false)Set visibility flag for each nodes.Definition RGeomData.cxx:594; ROOT::RGeomDescription::SetVisLevelvoid SetVisLevel(int lvl=3)Set maximal visible level.Definition RGeomData.hxx:327; ROOT::RGeomDescription::IssueSignalvoid IssueSignal(const void *handler, const std::string &kind)Issue signal, which distributed on all handlers - excluding source handler.Definition RGeomData.cxx:293; ROOT::RGeomDescription::GetUsedNSegmentsint GetUsedNSegments(int min=20)Returns really used number of cylindrical segments.Definition RGeomData.cxx:922; ROOT::RGeomDescription::IsPrincipalEndNodebool IsPrincipalEndNode(int nodeid)return tru",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:84384,Availability,failure,failure,84384," nodesDefinition RGeomData.hxx:258; ROOT::RGeomDescription::fDrawVolumeTGeoVolume * fDrawVolume! select volume independent from TGeoManagerDefinition RGeomData.hxx:246; ROOT::RGeomDescription::CountShapeFacesint CountShapeFaces(TGeoShape *shape)Count number of faces for the shape.Definition RGeomData.cxx:937; ROOT::RGeomDescription::MakeShapeDescrShapeDescr & MakeShapeDescr(TGeoShape *shape)Find description object and create render information.Definition RGeomData.cxx:1070; ROOT::RGeomDescription::FindShapeDescrShapeDescr & FindShapeDescr(TGeoShape *shape)Find description object for requested shape If not exists - will be created.Definition RGeomData.cxx:857; ROOT::RGeomDescription::fDrawJsonstd::string fDrawJson! JSON with main nodes drawn by clientDefinition RGeomData.hxx:257; ROOT::RGeomDescription::RemoveSignalHandlervoid RemoveSignalHandler(const void *handler)Remove signal handler.Definition RGeomData.cxx:321; ROOT::RGeomDescription::FindNodeIdint FindNodeId(const std::vector< int > &stack)Returns nodeid for given stack array, returns -1 in case of failure.Definition RGeomData.cxx:1602; ROOT::RGeomDescription::ProduceIdShiftsvoid ProduceIdShifts()Count total number of visible childs under each node.Definition RGeomData.cxx:629; ROOT::RGeomDescription::ProduceModifyReplystd::string ProduceModifyReply(int nodeid)Return string with only part of nodes description which were modified Checks also volume.Definition RGeomData.cxx:1734; ROOT::RGeomDescription::ResetRndrInfosvoid ResetRndrInfos()Reset shape info, which used to pack binary data.Definition RGeomData.cxx:1201; ROOT::RGeomDescription::GetNSegmentsint GetNSegments() constReturn of segments for cylindrical shapes, if 0 - default value will be used.Definition RGeomData.hxx:344; ROOT::RGeomDescription::fNodesstd::vector< TGeoNode * > fNodes! flat list of all nodesDefinition RGeomData.hxx:242; ROOT::RGeomDescription::GetJsonCompint GetJsonComp() constReturns JSON compression level for data transfer.Definition RG",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:63370,Deployability,configurat,configuration,63370,"2068 ; 2069 RGeomBrowserIter giter(*this);; 2070 ; 2071 if (!giter.Navigate(path)); 2072 return false;; 2073 ; 2074 auto stack = MakeStackByIds(giter.CurrentIds());; 2075 ; 2076 for (auto iter = fVisibility.begin(); iter != fVisibility.end(); iter++); 2077 if (compare_stacks(iter->stack, stack) == 0) {; 2078 fVisibility.erase(iter);; 2079 ClearDrawData();; 2080 return true;; 2081 }; 2082 ; 2083 return false;; 2084}; 2085 ; 2086/////////////////////////////////////////////////////////////////////////////////; 2087/// Reset all custom visibility settings; 2088 ; 2089bool RGeomDescription::ClearAllPhysVisibility(); 2090{; 2091 TLockGuard lock(fMutex);; 2092 ; 2093 if (fVisibility.empty()); 2094 return false;; 2095 ; 2096 fVisibility.clear();; 2097 ClearDrawData();; 2098 return true;; 2099}; 2100 ; 2101/////////////////////////////////////////////////////////////////////////////////; 2102/// Change configuration by client; 2103/// Returns true if any parameter was really changed; 2104 ; 2105bool RGeomDescription::ChangeConfiguration(const std::string &json); 2106{; 2107 auto cfg = TBufferJSON::FromJSON<RGeomConfig>(json);; 2108 if (!cfg); 2109 return false;; 2110 ; 2111 TLockGuard lock(fMutex);; 2112 ; 2113 auto json1 = TBufferJSON::ToJSON(cfg.get());; 2114 auto json2 = TBufferJSON::ToJSON(&fCfg);; 2115 ; 2116 if (json1 == json2); 2117 return false;; 2118 ; 2119 fCfg = *cfg; // use assign; 2120 ; 2121 ClearDrawData();; 2122 ; 2123 return true;; 2124}; 2125 ; 2126/////////////////////////////////////////////////////////////////////////////////; 2127/// Change search query and belongs to it json string; 2128/// Returns true if any parameter was really changed; 2129 ; 2130bool RGeomDescription::SetSearch(const std::string &query, const std::string &json); 2131{; 2132 TLockGuard lock(fMutex);; 2133 ; 2134 bool changed = (fSearch != query) || (fSearchJson != json);; 2135 fSearch = query;; 2136 fSearchJson = json;; 2137 return changed;; 2138}; 2139 ; 2140/////////////////////",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:64546,Deployability,configurat,configuration,64546,"awData();; 2098 return true;; 2099}; 2100 ; 2101/////////////////////////////////////////////////////////////////////////////////; 2102/// Change configuration by client; 2103/// Returns true if any parameter was really changed; 2104 ; 2105bool RGeomDescription::ChangeConfiguration(const std::string &json); 2106{; 2107 auto cfg = TBufferJSON::FromJSON<RGeomConfig>(json);; 2108 if (!cfg); 2109 return false;; 2110 ; 2111 TLockGuard lock(fMutex);; 2112 ; 2113 auto json1 = TBufferJSON::ToJSON(cfg.get());; 2114 auto json2 = TBufferJSON::ToJSON(&fCfg);; 2115 ; 2116 if (json1 == json2); 2117 return false;; 2118 ; 2119 fCfg = *cfg; // use assign; 2120 ; 2121 ClearDrawData();; 2122 ; 2123 return true;; 2124}; 2125 ; 2126/////////////////////////////////////////////////////////////////////////////////; 2127/// Change search query and belongs to it json string; 2128/// Returns true if any parameter was really changed; 2129 ; 2130bool RGeomDescription::SetSearch(const std::string &query, const std::string &json); 2131{; 2132 TLockGuard lock(fMutex);; 2133 ; 2134 bool changed = (fSearch != query) || (fSearchJson != json);; 2135 fSearch = query;; 2136 fSearchJson = json;; 2137 return changed;; 2138}; 2139 ; 2140/////////////////////////////////////////////////////////////////////////////////; 2141/// Save geometry configuration as C++ macro; 2142 ; 2143void RGeomDescription::SavePrimitive(std::ostream &fs, const std::string &name); 2144{; 2145 std::string prefix = "" "";; 2146 ; 2147 if (fCfg.vislevel != 0); 2148 fs << prefix << name << ""SetVisLevel("" << fCfg.vislevel << "");"" << std::endl;; 2149 if (fCfg.maxnumnodes != 0); 2150 fs << prefix << name << ""SetMaxVisNodes("" << fCfg.maxnumnodes << "");"" << std::endl;; 2151 if (fCfg.maxnumfaces != 0); 2152 fs << prefix << name << ""SetMaxVisFaces("" << fCfg.maxnumfaces << "");"" << std::endl;; 2153 if (fCfg.showtop); 2154 fs << prefix << name << ""SetTopVisible(true);"" << std::endl;; 2155 if (fCfg.build_shapes != 1); 2156 fs << prefix << name <",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:69369,Deployability,configurat,configuration,69369,"om_t Atom_t Time_t UChar_t lenDefinition TGWin32VirtualXProxy.cxx:249; funcsOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void funcsDefinition TGWin32VirtualXProxy.cxx:142; fsOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize fsDefinition TGWin32VirtualXProxy.cxx:102; namechar name[80]Definition TGX11.cxx:110; TGeoBBox.h; TGeoBoolNode.h; TGeoCompositeShape.h; TGeoCone.h; TGeoEltu.h; TGeoHype.h; TGeoManager.h; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; TGeoMaterial.h; TGeoMatrix.h; TGeoMedium.h; TGeoNode.h; TGeoParaboloid.h; TGeoPcon.h; TGeoPgon.h; TGeoScaledShape.h; TGeoSphere.h; TGeoTessellated.h; TGeoTorus.h; TGeoTube.h; TGeoVolume.h; TGeoXtru.h; TMath.h; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; TRegexp.h; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; ROOT::RBrowserReplyReply on browser request.Definition RBrowserReply.hxx:27; ROOT::RBrowserReply::pathstd::vector< std::string > pathreply pathDefinition RBrowserReply.hxx:29; ROOT::RBrowserReply::nodesstd::vector< const Browsable::RItem * > nodeslist of pointers, no ownership!Definition RBrowserReply.hxx:32; ROOT::RBrowserReply::firstint firstfirst node in returned listDefinition RBrowserReply.hxx:31; ROOT::RBrowserReply::nchildsint nchildstotal number of childs in the nodeDefinition RBrowserReply.hxx:30; ROOT::RGeomBrowserIterIterator of hierarchical geometry structures.Definition RGeomData.cxx:60; ROOT::RGeomBrowserIter::Enterbool Enter()Definition RGeomData.cxx:89; ROOT::RGeomBrowserIter::Leavebool Leave()Definition RGeomData.cxx:111; ROOT::RGeomBrowserIter::RGeomBrowserIterRGeomBrowserIter(RGeomDescription &desc)Definition RGeomData.cxx:71; ROOT::RGeomBrowserIter::fNodeIdint fNodeIdDefinition RGeomData.cxx:65; ROOT::",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:73333,Deployability,configurat,configuration,73333,"mConfig::showtopbool showtopshow geometry top volume, off by defaultDefinition RGeomData.hxx:167; ROOT::RGeomConfig::maxnumfacesint maxnumfacesmaximal number of facesDefinition RGeomData.hxx:166; ROOT::RGeomConfig::vislevelint vislevelvisible levelDefinition RGeomData.hxx:164; ROOT::RGeomConfig::maxnumnodesint maxnumnodesmaximal number of nodesDefinition RGeomData.hxx:165; ROOT::RGeomConfig::drawoptstd::string drawoptdraw options for TGeoPainterDefinition RGeomData.hxx:170; ROOT::RGeomConfig::build_shapesint build_shapeswhen shapes build on server 0 - never, 1 - TGeoComposite, 2 - plus non-cylindrical,...Definition RGeomData.hxx:168; ROOT::RGeomConfig::nsegmint nsegmnumber of segments for cylindrical shapesDefinition RGeomData.hxx:169; ROOT::RGeomDescription::ShapeDescrDefinition RGeomData.hxx:214; ROOT::RGeomDescription::ShapeDescr::idint id! sequential idDefinition RGeomData.hxx:216; ROOT::RGeomDescriptionDefinition RGeomData.hxx:210; ROOT::RGeomDescription::fCfgRGeomConfig fCfg! configuration parameter editable from GUIDefinition RGeomData.hxx:264; ROOT::RGeomDescription::fSignalsstd::vector< std::pair< const void *, RGeomSignalFunc_t > > fSignals! registered signalsDefinition RGeomData.hxx:268; ROOT::RGeomDescription::IsPhysNodeVisibleint IsPhysNodeVisible(const std::vector< int > &stack)Check if there special settings for specified physical node returns -1 if nothing is found.Definition RGeomData.cxx:2043; ROOT::RGeomDescription::fSelectedStackstd::vector< int > fSelectedStack! selected branch of geometry by stackDefinition RGeomData.hxx:247; ROOT::RGeomDescription::SetMaxVisNodesvoid SetMaxVisNodes(int cnt)Set maximal number of nodes which should be selected for drawing.Definition RGeomData.hxx:317; ROOT::RGeomDescription::ProcessBrowserRequeststd::string ProcessBrowserRequest(const std::string &req="""")Find description object for requested shape If not exists - will be created.Definition RGeomData.cxx:767; ROOT::RGeomDescription::fDescstd::vector< RGeomNode > f",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:78880,Deployability,configurat,configuration,78880,"oid SetMaxVisFaces(int cnt)Set maximal number of faces which should be selected for drawing.Definition RGeomData.hxx:322; ROOT::RGeomDescription::IsPreferredOfflinebool IsPreferredOffline() constIs offline operations preferred.Definition RGeomData.hxx:361; ROOT::RGeomDescription::fShapesstd::vector< ShapeDescr > fShapes! shapes with created descriptionsDefinition RGeomData.hxx:253; ROOT::RGeomDescription::fJsonCompint fJsonComp! default JSON compressionDefinition RGeomData.hxx:261; ROOT::RGeomDescription::ChangeNodeVisibilitybool ChangeNodeVisibility(const std::vector< std::string > &path, bool on)Change visibility for specified element Returns true if changes was performed.Definition RGeomData.cxx:1850; ROOT::RGeomDescription::fSearchstd::string fSearch! search string in hierarchyDefinition RGeomData.hxx:255; ROOT::RGeomDescription::fSearchJsonstd::string fSearchJson! drawing json for searchDefinition RGeomData.hxx:256; ROOT::RGeomDescription::SavePrimitivevoid SavePrimitive(std::ostream &fs, const std::string &name)Save geometry configuration as C++ macro.Definition RGeomData.cxx:2143; ROOT::RGeomDescription::ClearAllPhysVisibilitybool ClearAllPhysVisibility()Reset all custom visibility settings.Definition RGeomData.cxx:2089; ROOT::RGeomDescription::MakeDrawingJsonstd::string MakeDrawingJson(RGeomDrawing &drawing, bool has_shapes=false)Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in thi...Definition RGeomData.cxx:1826; ROOT::RGeomDescription::fActualLevelint fActualLevel! level can be reduced when selecting nodesDefinition RGeomData.hxx:259; ROOT::RGeomDescription::GetVolumeTGeoVolume * GetVolume(int nodeid)Get volume for specified nodeid If specific volume was configured, it will be returned for nodeid==0.Definition RGeomData.cxx:583; ROOT::RGeomDescription::GetNumNodesint GetNumNodes() constNumber of unique nodes in the geometry.Definition RGeomData.hxx:369; ROOT::RGeomDescription::ProduceDrawDatavoid ProduceDraw",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:82077,Deployability,configurat,configuration,82077,"r< int > fSortMap! nodes in order large -> smaller volumeDefinition RGeomData.hxx:252; ROOT::RGeomDescription::ProduceJsonstd::string ProduceJson(bool all_nodes=false)Produce JSON string which can be directly used with build function from JSROOT to create three....Definition RGeomData.cxx:1230; ROOT::RGeomDescription::ClearDrawDatavoid ClearDrawData()Clear raw data. Will be rebuild when next connection will be established.Definition RGeomData.cxx:1370; ROOT::RGeomDescription::MakePathByStackstd::vector< std::string > MakePathByStack(const std::vector< int > &stack)Returns path string for provided stack.Definition RGeomData.cxx:1716; ROOT::RGeomDescription::fMutexTVirtualMutex * fMutex! external mutex used to protect all dataDefinition RGeomData.hxx:266; ROOT::RGeomDescription::AddSignalHandlervoid AddSignalHandler(const void *handler, RGeomSignalFunc_t func)Add signal handler.Definition RGeomData.cxx:312; ROOT::RGeomDescription::ChangeConfigurationbool ChangeConfiguration(const std::string &json)Change configuration by client Returns true if any parameter was really changed.Definition RGeomData.cxx:2105; ROOT::RGeomDescription::CopyMaterialPropertiesvoid CopyMaterialProperties(TGeoVolume *vol, RGeomNode &node)Copy material properties.Definition RGeomData.cxx:1159; ROOT::RGeomDescription::MakeStackByPathstd::vector< int > MakeStackByPath(const std::vector< std::string > &path)Produce stack based on string path Used to highlight geo volumes by browser hover event.Definition RGeomData.cxx:1665; ROOT::RGeomDescription::ScanNodesint ScanNodes(bool only_visible, int maxlvl, RGeomScanFunc_t func)Iterate over all nodes and call function for visible.Definition RGeomData.cxx:653; ROOT::RGeomDescription::IsBuildShapesint IsBuildShapes() constReturns true if binary 3D model build already by C++ server (default)Definition RGeomData.hxx:339; ROOT::RGeomDescription::ProduceSearchDatavoid ProduceSearchData()Produces search data if necessary.Definition RGeomData.cxx:1340; ROOT::RGeom",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:85963,Deployability,configurat,configurationsDefinition,85963,"tNSegments() constReturn of segments for cylindrical shapes, if 0 - default value will be used.Definition RGeomData.hxx:344; ROOT::RGeomDescription::fNodesstd::vector< TGeoNode * > fNodes! flat list of all nodesDefinition RGeomData.hxx:242; ROOT::RGeomDescription::GetJsonCompint GetJsonComp() constReturns JSON compression level for data transfer.Definition RGeomData.hxx:354; ROOT::RGeomDescription::Buildvoid Build(TGeoManager *mgr, const std::string &volname="""")Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes....Definition RGeomData.cxx:425; ROOT::RGeomDrawingObject with full description for drawing geometry It includes list of visible items and list of nodes...Definition RGeomData.hxx:177; ROOT::RGeomDrawing::numnodesint numnodestotal number of nodes in descriptionDefinition RGeomData.hxx:180; ROOT::RGeomDrawing::visiblesstd::vector< RGeomVisible > visiblesall visible itemsDefinition RGeomData.hxx:182; ROOT::RGeomDrawing::cfgRGeomConfig * cfgcurrent configurationsDefinition RGeomData.hxx:179; ROOT::RGeomDrawing::nodesstd::vector< RGeomNode * > nodesall used nodes to display visible items and not known for clientDefinition RGeomData.hxx:181; ROOT::RGeomNodeBase::materialstd::string materialname of the materialDefinition RGeomData.hxx:53; ROOT::RGeomNodeBase::sortidint sortid! place in sorted array, to check cuts, or id of original node when used search structuresDefinition RGeomData.hxx:54; ROOT::RGeomNodeBase::colorstd::string colorrgb code in hex formatDefinition RGeomData.hxx:52; ROOT::RGeomNodeBase::idint idnode id, index in arrayDefinition RGeomData.hxx:46; ROOT::RGeomNodeFull node description including matrices and other attributes.Definition RGeomData.hxx:71; ROOT::RGeomNode::opacityfloat opacity! opacity of the colorDefinition RGeomData.hxx:78; TAttFill::GetFillColorvirtual Color_t GetFillColor() constReturn the fill area color.Definition TAttFill.h:30; TAttLine::GetLineColorvirtual Color_t GetLineColor() constRe",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:47116,Energy Efficiency,reduce,reduced,47116,"of nodes, used for search; 1517 std::vector<int> found_map(fDesc.size(), -1); ///<! mapping between nodeid - > foundid; 1518 ; 1519 // these are only selected nodes to produce hierarchy; 1520 ; 1521 found_desc.emplace_back(0);; 1522 found_desc[0].vis = fDesc[0].vis;; 1523 found_desc[0].name = fDesc[0].name;; 1524 found_desc[0].color = fDesc[0].color;; 1525 found_map[0] = 0;; 1526 ; 1527 ResetRndrInfos();; 1528 ; 1529 RGeomDrawing drawing;; 1530 bool has_shape = true;; 1531 ; 1532 ScanNodes(false, 0, [&, this](RGeomNode &node, std::vector<int> &stack, bool is_vis, int seqid) {; 1533 // select only nodes which should match; 1534 if (!match_func(node)); 1535 return true;; 1536 ; 1537 // add entries into hierarchy of found elements; 1538 int prntid = 0;; 1539 for (auto &s : stack) {; 1540 int chldid = fDesc[prntid].chlds[s];; 1541 if (found_map[chldid] <= 0) {; 1542 int newid = found_desc.size();; 1543 found_desc.emplace_back(newid); // potentially original id can be used here; 1544 found_map[chldid] = newid; // re-map into reduced hierarchy; 1545 ; 1546 found_desc.back().vis = fDesc[chldid].vis;; 1547 found_desc.back().name = fDesc[chldid].name;; 1548 found_desc.back().color = fDesc[chldid].color;; 1549 found_desc.back().material = fDesc[chldid].material;; 1550 }; 1551 ; 1552 auto pid = found_map[prntid];; 1553 auto cid = found_map[chldid];; 1554 ; 1555 // now add entry into childs lists; 1556 auto &pchlds = found_desc[pid].chlds;; 1557 if (std::find(pchlds.begin(), pchlds.end(), cid) == pchlds.end()); 1558 pchlds.emplace_back(cid);; 1559 ; 1560 prntid = chldid;; 1561 }; 1562 ; 1563 // no need to add visibles; 1564 if (!is_vis); 1565 return true;; 1566 ; 1567 drawing.visibles.emplace_back(node.id, seqid, stack);; 1568 ; 1569 // no need to transfer shape if it provided with main drawing list; 1570 // also no binary will be transported when too many matches are there; 1571 if (!send_rawdata || (node.sortid < fDrawIdCut)) {; 1572 // do not include render data; 1573 return ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:79395,Energy Efficiency,reduce,reduced,79395,"sibility(const std::vector< std::string > &path, bool on)Change visibility for specified element Returns true if changes was performed.Definition RGeomData.cxx:1850; ROOT::RGeomDescription::fSearchstd::string fSearch! search string in hierarchyDefinition RGeomData.hxx:255; ROOT::RGeomDescription::fSearchJsonstd::string fSearchJson! drawing json for searchDefinition RGeomData.hxx:256; ROOT::RGeomDescription::SavePrimitivevoid SavePrimitive(std::ostream &fs, const std::string &name)Save geometry configuration as C++ macro.Definition RGeomData.cxx:2143; ROOT::RGeomDescription::ClearAllPhysVisibilitybool ClearAllPhysVisibility()Reset all custom visibility settings.Definition RGeomData.cxx:2089; ROOT::RGeomDescription::MakeDrawingJsonstd::string MakeDrawingJson(RGeomDrawing &drawing, bool has_shapes=false)Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in thi...Definition RGeomData.cxx:1826; ROOT::RGeomDescription::fActualLevelint fActualLevel! level can be reduced when selecting nodesDefinition RGeomData.hxx:259; ROOT::RGeomDescription::GetVolumeTGeoVolume * GetVolume(int nodeid)Get volume for specified nodeid If specific volume was configured, it will be returned for nodeid==0.Definition RGeomData.cxx:583; ROOT::RGeomDescription::GetNumNodesint GetNumNodes() constNumber of unique nodes in the geometry.Definition RGeomData.hxx:369; ROOT::RGeomDescription::ProduceDrawDatavoid ProduceDrawData()Collect all information required to draw geometry on the client This includes list of each visible no...Definition RGeomData.cxx:1358; ROOT::RGeomDescription::SetNSegmentsvoid SetNSegments(int n=0)Set number of segments for cylindrical shapes, if 0 - default value will be used.Definition RGeomData.hxx:342; ROOT::RGeomDescription::SetPhysNodeVisibilitybool SetPhysNodeVisibility(const std::vector< std::string > &path, bool on=true)Set visibility of physical node by path It overrules TGeo visibility flags - but only for specific ph...Defin",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:15494,Modifiability,config,configured,15494,"0 if (chlds); 551 for (int n = 0; n <= chlds->GetLast(); ++n) {; 552 auto chld = dynamic_cast<TGeoNode *>(chlds->At(n));; 553 desc.chlds.emplace_back(chld->GetNumber() - offset);; 554 }; 555 }; 556 ; 557 // recover numbers; 558 cnt = 0;; 559 for (auto node : fNodes) {; 560 auto number = numbers[cnt++];; 561 if (node); 562 node->SetNumber(number);; 563 }; 564 ; 565 // sort in volume descent order; 566 std::sort(sortarr.begin(), sortarr.end(), [](RGeomNode *a, RGeomNode *b) { return a->vol > b->vol; });; 567 ; 568 cnt = 0;; 569 for (auto &elem : sortarr) {; 570 fSortMap.emplace_back(elem->id);; 571 elem->sortid = cnt++; // keep place in sorted array to correctly apply cut; 572 }; 573 ; 574 MarkVisible(); // set visibility flags; 575 ; 576 ProduceIdShifts();; 577}; 578 ; 579/////////////////////////////////////////////////////////////////////; 580/// Get volume for specified nodeid; 581/// If specific volume was configured, it will be returned for nodeid==0; 582 ; 583TGeoVolume *RGeomDescription::GetVolume(int nodeid); 584{; 585 auto node = fNodes[nodeid];; 586 if (node); 587 return node->GetVolume();; 588 return nodeid == 0 ? fDrawVolume : nullptr;; 589}; 590 ; 591/////////////////////////////////////////////////////////////////////; 592/// Set visibility flag for each nodes; 593 ; 594int RGeomDescription::MarkVisible(bool on_screen); 595{; 596 int res = 0;; 597 for (int nodeid = 0; nodeid < (int)fNodes.size(); nodeid++) {; 598 ; 599 auto node = fNodes[nodeid];; 600 auto vol = GetVolume(nodeid);; 601 auto &desc = fDesc[nodeid];; 602 desc.vis = 0;; 603 desc.nochlds = false;; 604 ; 605 if (on_screen) {; 606 if (!node || node->IsOnScreen()); 607 desc.vis = 99;; 608 } else {; 609 if (vol->IsVisible() && !vol->TestAttBit(TGeoAtt::kVisNone)); 610 desc.vis = 99;; 611 ; 612 if (node && !node->IsVisDaughters()); 613 desc.nochlds = true;; 614 ; 615 if ((desc.vis > 0) && (!desc.chlds.empty()) && !desc.nochlds); 616 desc.vis = 1;; 617 }; 618 ; 619 if (desc.IsVisible() && desc.Can",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:36464,Modifiability,config,configured,36464,"85 ; 1186 if (col) {; 1187 TString colbuf;; 1188 colbuf.Form(""#%02x%02x%02x"", (int)(col->GetRed() * 255), (int)(col->GetGreen() * 255),; 1189 (int)(col->GetBlue() * 255));; 1190 node.color = colbuf.Data();; 1191 if (node.opacity == 1.); 1192 node.opacity = col->GetAlpha();; 1193 } else {; 1194 node.color.clear();; 1195 }; 1196}; 1197 ; 1198/////////////////////////////////////////////////////////////////////; 1199/// Reset shape info, which used to pack binary data; 1200 ; 1201void RGeomDescription::ResetRndrInfos(); 1202{; 1203 for (auto &s : fShapes); 1204 s.reset();; 1205}; 1206 ; 1207/////////////////////////////////////////////////////////////////////; 1208/// Produce JSON string which can be directly used with `build`; 1209/// function from JSROOT to create three.js model of configured geometry; 1210///; 1211/// Collect all information required to draw geometry on the client; 1212/// This includes list of each visible nodes, meshes and matrixes; 1213/// If @param all_nodes is true, all existing nodes will be provided,; 1214/// which allows to create complete nodes hierarchy on client side; 1215///; 1216/// Example of usage:; 1217///; 1218/// void geom() {; 1219/// auto f = TFile::Open(""file_name.root"");; 1220/// auto vol = f->Get<TGeoVolume>(""object_name"");; 1221/// ROOT::RGeomDescription desc;; 1222/// desc.Build(vol);; 1223/// std::ofstream fout(""geom.json"");; 1224/// fout << desc.ProduceJson();; 1225/// }; 1226///; 1227/// In JSROOT one loads data from JSON file and call `build` function to; 1228/// produce three.js model. Also see example in tutorials/webgui/geom/ folder; 1229 ; 1230std::string RGeomDescription::ProduceJson(bool all_nodes); 1231{; 1232 TLockGuard lock(fMutex);; 1233 ; 1234 std::vector<int> viscnt(fDesc.size(), 0);; 1235 ; 1236 int level = GetVisLevel();; 1237 ; 1238 // first count how many times each individual node appears; 1239 int numnodes = ScanNodes(true, level, [&viscnt](RGeomNode &node, std::vector<int> &, bool, int) {; 1240 viscnt[n",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:44097,Modifiability,config,configurable,44097," 2);; 1433 kind = 2;; 1434 }; 1435 ; 1436 TRegexp regexp(test.c_str());; 1437 ; 1438 auto match_func = [&regexp, kind](RGeomNode &node) {; 1439 return (node.vol > 0) && (TString(node.GetArg(kind)).Index(regexp) >= 0);; 1440 };; 1441 ; 1442 // first count how many times each individual node appears; 1443 ScanNodes(false, 0,; 1444 [&nodescnt, &viscnt, &match_func, &nmatches](RGeomNode &node, std::vector<int> &, bool is_vis, int) {; 1445 if (match_func(node)) {; 1446 nmatches++;; 1447 nodescnt[node.id]++;; 1448 if (is_vis); 1449 viscnt[node.id]++;; 1450 };; 1451 return true;; 1452 });; 1453 ; 1454 // do not send too much data, limit could be made configurable later; 1455 if (nmatches == 0) {; 1456 hjson = ""FOUND:NO"";; 1457 return nmatches;; 1458 }; 1459 ; 1460 if ((GetMaxVisNodes() > 0) && (nmatches > 10 * GetMaxVisNodes())) {; 1461 hjson = ""FOUND:Too many "" + std::to_string(nmatches);; 1462 return nmatches;; 1463 }; 1464 ; 1465 // now build all necessary shapes and check number of faces - not too many; 1466 ; 1467 int totalnumfaces = 0, totalnumnodes = 0, scnt = 0;; 1468 bool send_rawdata = true;; 1469 ; 1470 // build all shapes in volume decreasing order; 1471 for (auto &sid : fSortMap) {; 1472 if (scnt++ < fDrawIdCut); 1473 continue; // no need to send most significant shapes; 1474 ; 1475 if (viscnt[sid] == 0); 1476 continue; // this node is not used at all; 1477 ; 1478 auto &desc = fDesc[sid];; 1479 if ((viscnt[sid] <= 0) && (desc.vol <= 0)); 1480 continue;; 1481 ; 1482 auto shape = GetVolume(sid)->GetShape();; 1483 if (!shape); 1484 continue;; 1485 ; 1486 // create shape raw data; 1487 auto &shape_descr = MakeShapeDescr(shape);; 1488 ; 1489 // should not happen, but just in case; 1490 if (shape_descr.nfaces <= 0) {; 1491 R__LOG_ERROR(RGeomLog()) << ""No faces for the shape "" << shape->GetName() << "" class "" << shape->ClassName();; 1492 continue;; 1493 }; 1494 ; 1495 // check how many faces are created; 1496 totalnumfaces += shape_descr.nfaces * viscnt[sid];; 1497 i",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:63370,Modifiability,config,configuration,63370,"2068 ; 2069 RGeomBrowserIter giter(*this);; 2070 ; 2071 if (!giter.Navigate(path)); 2072 return false;; 2073 ; 2074 auto stack = MakeStackByIds(giter.CurrentIds());; 2075 ; 2076 for (auto iter = fVisibility.begin(); iter != fVisibility.end(); iter++); 2077 if (compare_stacks(iter->stack, stack) == 0) {; 2078 fVisibility.erase(iter);; 2079 ClearDrawData();; 2080 return true;; 2081 }; 2082 ; 2083 return false;; 2084}; 2085 ; 2086/////////////////////////////////////////////////////////////////////////////////; 2087/// Reset all custom visibility settings; 2088 ; 2089bool RGeomDescription::ClearAllPhysVisibility(); 2090{; 2091 TLockGuard lock(fMutex);; 2092 ; 2093 if (fVisibility.empty()); 2094 return false;; 2095 ; 2096 fVisibility.clear();; 2097 ClearDrawData();; 2098 return true;; 2099}; 2100 ; 2101/////////////////////////////////////////////////////////////////////////////////; 2102/// Change configuration by client; 2103/// Returns true if any parameter was really changed; 2104 ; 2105bool RGeomDescription::ChangeConfiguration(const std::string &json); 2106{; 2107 auto cfg = TBufferJSON::FromJSON<RGeomConfig>(json);; 2108 if (!cfg); 2109 return false;; 2110 ; 2111 TLockGuard lock(fMutex);; 2112 ; 2113 auto json1 = TBufferJSON::ToJSON(cfg.get());; 2114 auto json2 = TBufferJSON::ToJSON(&fCfg);; 2115 ; 2116 if (json1 == json2); 2117 return false;; 2118 ; 2119 fCfg = *cfg; // use assign; 2120 ; 2121 ClearDrawData();; 2122 ; 2123 return true;; 2124}; 2125 ; 2126/////////////////////////////////////////////////////////////////////////////////; 2127/// Change search query and belongs to it json string; 2128/// Returns true if any parameter was really changed; 2129 ; 2130bool RGeomDescription::SetSearch(const std::string &query, const std::string &json); 2131{; 2132 TLockGuard lock(fMutex);; 2133 ; 2134 bool changed = (fSearch != query) || (fSearchJson != json);; 2135 fSearch = query;; 2136 fSearchJson = json;; 2137 return changed;; 2138}; 2139 ; 2140/////////////////////",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:64546,Modifiability,config,configuration,64546,"awData();; 2098 return true;; 2099}; 2100 ; 2101/////////////////////////////////////////////////////////////////////////////////; 2102/// Change configuration by client; 2103/// Returns true if any parameter was really changed; 2104 ; 2105bool RGeomDescription::ChangeConfiguration(const std::string &json); 2106{; 2107 auto cfg = TBufferJSON::FromJSON<RGeomConfig>(json);; 2108 if (!cfg); 2109 return false;; 2110 ; 2111 TLockGuard lock(fMutex);; 2112 ; 2113 auto json1 = TBufferJSON::ToJSON(cfg.get());; 2114 auto json2 = TBufferJSON::ToJSON(&fCfg);; 2115 ; 2116 if (json1 == json2); 2117 return false;; 2118 ; 2119 fCfg = *cfg; // use assign; 2120 ; 2121 ClearDrawData();; 2122 ; 2123 return true;; 2124}; 2125 ; 2126/////////////////////////////////////////////////////////////////////////////////; 2127/// Change search query and belongs to it json string; 2128/// Returns true if any parameter was really changed; 2129 ; 2130bool RGeomDescription::SetSearch(const std::string &query, const std::string &json); 2131{; 2132 TLockGuard lock(fMutex);; 2133 ; 2134 bool changed = (fSearch != query) || (fSearchJson != json);; 2135 fSearch = query;; 2136 fSearchJson = json;; 2137 return changed;; 2138}; 2139 ; 2140/////////////////////////////////////////////////////////////////////////////////; 2141/// Save geometry configuration as C++ macro; 2142 ; 2143void RGeomDescription::SavePrimitive(std::ostream &fs, const std::string &name); 2144{; 2145 std::string prefix = "" "";; 2146 ; 2147 if (fCfg.vislevel != 0); 2148 fs << prefix << name << ""SetVisLevel("" << fCfg.vislevel << "");"" << std::endl;; 2149 if (fCfg.maxnumnodes != 0); 2150 fs << prefix << name << ""SetMaxVisNodes("" << fCfg.maxnumnodes << "");"" << std::endl;; 2151 if (fCfg.maxnumfaces != 0); 2152 fs << prefix << name << ""SetMaxVisFaces("" << fCfg.maxnumfaces << "");"" << std::endl;; 2153 if (fCfg.showtop); 2154 fs << prefix << name << ""SetTopVisible(true);"" << std::endl;; 2155 if (fCfg.build_shapes != 1); 2156 fs << prefix << name <",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:69369,Modifiability,config,configuration,69369,"om_t Atom_t Time_t UChar_t lenDefinition TGWin32VirtualXProxy.cxx:249; funcsOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void funcsDefinition TGWin32VirtualXProxy.cxx:142; fsOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize fsDefinition TGWin32VirtualXProxy.cxx:102; namechar name[80]Definition TGX11.cxx:110; TGeoBBox.h; TGeoBoolNode.h; TGeoCompositeShape.h; TGeoCone.h; TGeoEltu.h; TGeoHype.h; TGeoManager.h; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; TGeoMaterial.h; TGeoMatrix.h; TGeoMedium.h; TGeoNode.h; TGeoParaboloid.h; TGeoPcon.h; TGeoPgon.h; TGeoScaledShape.h; TGeoSphere.h; TGeoTessellated.h; TGeoTorus.h; TGeoTube.h; TGeoVolume.h; TGeoXtru.h; TMath.h; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; TRegexp.h; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; ROOT::RBrowserReplyReply on browser request.Definition RBrowserReply.hxx:27; ROOT::RBrowserReply::pathstd::vector< std::string > pathreply pathDefinition RBrowserReply.hxx:29; ROOT::RBrowserReply::nodesstd::vector< const Browsable::RItem * > nodeslist of pointers, no ownership!Definition RBrowserReply.hxx:32; ROOT::RBrowserReply::firstint firstfirst node in returned listDefinition RBrowserReply.hxx:31; ROOT::RBrowserReply::nchildsint nchildstotal number of childs in the nodeDefinition RBrowserReply.hxx:30; ROOT::RGeomBrowserIterIterator of hierarchical geometry structures.Definition RGeomData.cxx:60; ROOT::RGeomBrowserIter::Enterbool Enter()Definition RGeomData.cxx:89; ROOT::RGeomBrowserIter::Leavebool Leave()Definition RGeomData.cxx:111; ROOT::RGeomBrowserIter::RGeomBrowserIterRGeomBrowserIter(RGeomDescription &desc)Definition RGeomData.cxx:71; ROOT::RGeomBrowserIter::fNodeIdint fNodeIdDefinition RGeomData.cxx:65; ROOT::",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:73333,Modifiability,config,configuration,73333,"mConfig::showtopbool showtopshow geometry top volume, off by defaultDefinition RGeomData.hxx:167; ROOT::RGeomConfig::maxnumfacesint maxnumfacesmaximal number of facesDefinition RGeomData.hxx:166; ROOT::RGeomConfig::vislevelint vislevelvisible levelDefinition RGeomData.hxx:164; ROOT::RGeomConfig::maxnumnodesint maxnumnodesmaximal number of nodesDefinition RGeomData.hxx:165; ROOT::RGeomConfig::drawoptstd::string drawoptdraw options for TGeoPainterDefinition RGeomData.hxx:170; ROOT::RGeomConfig::build_shapesint build_shapeswhen shapes build on server 0 - never, 1 - TGeoComposite, 2 - plus non-cylindrical,...Definition RGeomData.hxx:168; ROOT::RGeomConfig::nsegmint nsegmnumber of segments for cylindrical shapesDefinition RGeomData.hxx:169; ROOT::RGeomDescription::ShapeDescrDefinition RGeomData.hxx:214; ROOT::RGeomDescription::ShapeDescr::idint id! sequential idDefinition RGeomData.hxx:216; ROOT::RGeomDescriptionDefinition RGeomData.hxx:210; ROOT::RGeomDescription::fCfgRGeomConfig fCfg! configuration parameter editable from GUIDefinition RGeomData.hxx:264; ROOT::RGeomDescription::fSignalsstd::vector< std::pair< const void *, RGeomSignalFunc_t > > fSignals! registered signalsDefinition RGeomData.hxx:268; ROOT::RGeomDescription::IsPhysNodeVisibleint IsPhysNodeVisible(const std::vector< int > &stack)Check if there special settings for specified physical node returns -1 if nothing is found.Definition RGeomData.cxx:2043; ROOT::RGeomDescription::fSelectedStackstd::vector< int > fSelectedStack! selected branch of geometry by stackDefinition RGeomData.hxx:247; ROOT::RGeomDescription::SetMaxVisNodesvoid SetMaxVisNodes(int cnt)Set maximal number of nodes which should be selected for drawing.Definition RGeomData.hxx:317; ROOT::RGeomDescription::ProcessBrowserRequeststd::string ProcessBrowserRequest(const std::string &req="""")Find description object for requested shape If not exists - will be created.Definition RGeomData.cxx:767; ROOT::RGeomDescription::fDescstd::vector< RGeomNode > f",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:78880,Modifiability,config,configuration,78880,"oid SetMaxVisFaces(int cnt)Set maximal number of faces which should be selected for drawing.Definition RGeomData.hxx:322; ROOT::RGeomDescription::IsPreferredOfflinebool IsPreferredOffline() constIs offline operations preferred.Definition RGeomData.hxx:361; ROOT::RGeomDescription::fShapesstd::vector< ShapeDescr > fShapes! shapes with created descriptionsDefinition RGeomData.hxx:253; ROOT::RGeomDescription::fJsonCompint fJsonComp! default JSON compressionDefinition RGeomData.hxx:261; ROOT::RGeomDescription::ChangeNodeVisibilitybool ChangeNodeVisibility(const std::vector< std::string > &path, bool on)Change visibility for specified element Returns true if changes was performed.Definition RGeomData.cxx:1850; ROOT::RGeomDescription::fSearchstd::string fSearch! search string in hierarchyDefinition RGeomData.hxx:255; ROOT::RGeomDescription::fSearchJsonstd::string fSearchJson! drawing json for searchDefinition RGeomData.hxx:256; ROOT::RGeomDescription::SavePrimitivevoid SavePrimitive(std::ostream &fs, const std::string &name)Save geometry configuration as C++ macro.Definition RGeomData.cxx:2143; ROOT::RGeomDescription::ClearAllPhysVisibilitybool ClearAllPhysVisibility()Reset all custom visibility settings.Definition RGeomData.cxx:2089; ROOT::RGeomDescription::MakeDrawingJsonstd::string MakeDrawingJson(RGeomDrawing &drawing, bool has_shapes=false)Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in thi...Definition RGeomData.cxx:1826; ROOT::RGeomDescription::fActualLevelint fActualLevel! level can be reduced when selecting nodesDefinition RGeomData.hxx:259; ROOT::RGeomDescription::GetVolumeTGeoVolume * GetVolume(int nodeid)Get volume for specified nodeid If specific volume was configured, it will be returned for nodeid==0.Definition RGeomData.cxx:583; ROOT::RGeomDescription::GetNumNodesint GetNumNodes() constNumber of unique nodes in the geometry.Definition RGeomData.hxx:369; ROOT::RGeomDescription::ProduceDrawDatavoid ProduceDraw",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:79575,Modifiability,config,configured,79575,"Data.cxx:1850; ROOT::RGeomDescription::fSearchstd::string fSearch! search string in hierarchyDefinition RGeomData.hxx:255; ROOT::RGeomDescription::fSearchJsonstd::string fSearchJson! drawing json for searchDefinition RGeomData.hxx:256; ROOT::RGeomDescription::SavePrimitivevoid SavePrimitive(std::ostream &fs, const std::string &name)Save geometry configuration as C++ macro.Definition RGeomData.cxx:2143; ROOT::RGeomDescription::ClearAllPhysVisibilitybool ClearAllPhysVisibility()Reset all custom visibility settings.Definition RGeomData.cxx:2089; ROOT::RGeomDescription::MakeDrawingJsonstd::string MakeDrawingJson(RGeomDrawing &drawing, bool has_shapes=false)Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in thi...Definition RGeomData.cxx:1826; ROOT::RGeomDescription::fActualLevelint fActualLevel! level can be reduced when selecting nodesDefinition RGeomData.hxx:259; ROOT::RGeomDescription::GetVolumeTGeoVolume * GetVolume(int nodeid)Get volume for specified nodeid If specific volume was configured, it will be returned for nodeid==0.Definition RGeomData.cxx:583; ROOT::RGeomDescription::GetNumNodesint GetNumNodes() constNumber of unique nodes in the geometry.Definition RGeomData.hxx:369; ROOT::RGeomDescription::ProduceDrawDatavoid ProduceDrawData()Collect all information required to draw geometry on the client This includes list of each visible no...Definition RGeomData.cxx:1358; ROOT::RGeomDescription::SetNSegmentsvoid SetNSegments(int n=0)Set number of segments for cylindrical shapes, if 0 - default value will be used.Definition RGeomData.hxx:342; ROOT::RGeomDescription::SetPhysNodeVisibilitybool SetPhysNodeVisibility(const std::vector< std::string > &path, bool on=true)Set visibility of physical node by path It overrules TGeo visibility flags - but only for specific ph...Definition RGeomData.cxx:1970; ROOT::RGeomDescription::ClearPhysNodeVisibilitybool ClearPhysNodeVisibility(const std::vector< std::string > &path)Reset custo",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:82077,Modifiability,config,configuration,82077,"r< int > fSortMap! nodes in order large -> smaller volumeDefinition RGeomData.hxx:252; ROOT::RGeomDescription::ProduceJsonstd::string ProduceJson(bool all_nodes=false)Produce JSON string which can be directly used with build function from JSROOT to create three....Definition RGeomData.cxx:1230; ROOT::RGeomDescription::ClearDrawDatavoid ClearDrawData()Clear raw data. Will be rebuild when next connection will be established.Definition RGeomData.cxx:1370; ROOT::RGeomDescription::MakePathByStackstd::vector< std::string > MakePathByStack(const std::vector< int > &stack)Returns path string for provided stack.Definition RGeomData.cxx:1716; ROOT::RGeomDescription::fMutexTVirtualMutex * fMutex! external mutex used to protect all dataDefinition RGeomData.hxx:266; ROOT::RGeomDescription::AddSignalHandlervoid AddSignalHandler(const void *handler, RGeomSignalFunc_t func)Add signal handler.Definition RGeomData.cxx:312; ROOT::RGeomDescription::ChangeConfigurationbool ChangeConfiguration(const std::string &json)Change configuration by client Returns true if any parameter was really changed.Definition RGeomData.cxx:2105; ROOT::RGeomDescription::CopyMaterialPropertiesvoid CopyMaterialProperties(TGeoVolume *vol, RGeomNode &node)Copy material properties.Definition RGeomData.cxx:1159; ROOT::RGeomDescription::MakeStackByPathstd::vector< int > MakeStackByPath(const std::vector< std::string > &path)Produce stack based on string path Used to highlight geo volumes by browser hover event.Definition RGeomData.cxx:1665; ROOT::RGeomDescription::ScanNodesint ScanNodes(bool only_visible, int maxlvl, RGeomScanFunc_t func)Iterate over all nodes and call function for visible.Definition RGeomData.cxx:653; ROOT::RGeomDescription::IsBuildShapesint IsBuildShapes() constReturns true if binary 3D model build already by C++ server (default)Definition RGeomData.hxx:339; ROOT::RGeomDescription::ProduceSearchDatavoid ProduceSearchData()Produces search data if necessary.Definition RGeomData.cxx:1340; ROOT::RGeom",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:85963,Modifiability,config,configurationsDefinition,85963,"tNSegments() constReturn of segments for cylindrical shapes, if 0 - default value will be used.Definition RGeomData.hxx:344; ROOT::RGeomDescription::fNodesstd::vector< TGeoNode * > fNodes! flat list of all nodesDefinition RGeomData.hxx:242; ROOT::RGeomDescription::GetJsonCompint GetJsonComp() constReturns JSON compression level for data transfer.Definition RGeomData.hxx:354; ROOT::RGeomDescription::Buildvoid Build(TGeoManager *mgr, const std::string &volname="""")Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes....Definition RGeomData.cxx:425; ROOT::RGeomDrawingObject with full description for drawing geometry It includes list of visible items and list of nodes...Definition RGeomData.hxx:177; ROOT::RGeomDrawing::numnodesint numnodestotal number of nodes in descriptionDefinition RGeomData.hxx:180; ROOT::RGeomDrawing::visiblesstd::vector< RGeomVisible > visiblesall visible itemsDefinition RGeomData.hxx:182; ROOT::RGeomDrawing::cfgRGeomConfig * cfgcurrent configurationsDefinition RGeomData.hxx:179; ROOT::RGeomDrawing::nodesstd::vector< RGeomNode * > nodesall used nodes to display visible items and not known for clientDefinition RGeomData.hxx:181; ROOT::RGeomNodeBase::materialstd::string materialname of the materialDefinition RGeomData.hxx:53; ROOT::RGeomNodeBase::sortidint sortid! place in sorted array, to check cuts, or id of original node when used search structuresDefinition RGeomData.hxx:54; ROOT::RGeomNodeBase::colorstd::string colorrgb code in hex formatDefinition RGeomData.hxx:52; ROOT::RGeomNodeBase::idint idnode id, index in arrayDefinition RGeomData.hxx:46; ROOT::RGeomNodeFull node description including matrices and other attributes.Definition RGeomData.hxx:71; ROOT::RGeomNode::opacityfloat opacity! opacity of the colorDefinition RGeomData.hxx:78; TAttFill::GetFillColorvirtual Color_t GetFillColor() constReturn the fill area color.Definition TAttFill.h:30; TAttLine::GetLineColorvirtual Color_t GetLineColor() constRe",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:37142,Performance,load,loads,37142,"01void RGeomDescription::ResetRndrInfos(); 1202{; 1203 for (auto &s : fShapes); 1204 s.reset();; 1205}; 1206 ; 1207/////////////////////////////////////////////////////////////////////; 1208/// Produce JSON string which can be directly used with `build`; 1209/// function from JSROOT to create three.js model of configured geometry; 1210///; 1211/// Collect all information required to draw geometry on the client; 1212/// This includes list of each visible nodes, meshes and matrixes; 1213/// If @param all_nodes is true, all existing nodes will be provided,; 1214/// which allows to create complete nodes hierarchy on client side; 1215///; 1216/// Example of usage:; 1217///; 1218/// void geom() {; 1219/// auto f = TFile::Open(""file_name.root"");; 1220/// auto vol = f->Get<TGeoVolume>(""object_name"");; 1221/// ROOT::RGeomDescription desc;; 1222/// desc.Build(vol);; 1223/// std::ofstream fout(""geom.json"");; 1224/// fout << desc.ProduceJson();; 1225/// }; 1226///; 1227/// In JSROOT one loads data from JSON file and call `build` function to; 1228/// produce three.js model. Also see example in tutorials/webgui/geom/ folder; 1229 ; 1230std::string RGeomDescription::ProduceJson(bool all_nodes); 1231{; 1232 TLockGuard lock(fMutex);; 1233 ; 1234 std::vector<int> viscnt(fDesc.size(), 0);; 1235 ; 1236 int level = GetVisLevel();; 1237 ; 1238 // first count how many times each individual node appears; 1239 int numnodes = ScanNodes(true, level, [&viscnt](RGeomNode &node, std::vector<int> &, bool, int) {; 1240 viscnt[node.id]++;; 1241 return true;; 1242 });; 1243 ; 1244 if (GetMaxVisNodes() > 0) {; 1245 while ((numnodes > GetMaxVisNodes()) && (level > 1)) {; 1246 level--;; 1247 viscnt.assign(viscnt.size(), 0);; 1248 numnodes = ScanNodes(true, level, [&viscnt](RGeomNode &node, std::vector<int> &, bool, int) {; 1249 viscnt[node.id]++;; 1250 return true;; 1251 });; 1252 }; 1253 }; 1254 ; 1255 fActualLevel = level;; 1256 fDrawIdCut = 0;; 1257 ; 1258 int totalnumfaces = 0, totalnumnodes = 0;; ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:41762,Performance,cache,cached,41762,";; 1346 ; 1347 std::string hjson;; 1348 ; 1349 SearchVisibles(fSearch, hjson, fSearchJson);; 1350 ; 1351 (void)hjson; // not used here; 1352}; 1353 ; 1354/////////////////////////////////////////////////////////////////////; 1355/// Collect all information required to draw geometry on the client; 1356/// This includes list of each visible nodes, meshes and matrixes; 1357 ; 1358void RGeomDescription::ProduceDrawData(); 1359{; 1360 auto json = ProduceJson();; 1361 ; 1362 TLockGuard lock(fMutex);; 1363 ; 1364 fDrawJson = ""GDRAW:""s + json;; 1365}; 1366 ; 1367/////////////////////////////////////////////////////////////////////; 1368/// Clear raw data. Will be rebuild when next connection will be established; 1369 ; 1370void RGeomDescription::ClearDrawData(); 1371{; 1372 TLockGuard lock(fMutex);; 1373 ; 1374 fDrawJson.clear();; 1375 fSearchJson.clear();; 1376}; 1377 ; 1378/////////////////////////////////////////////////////////////////////; 1379/// Clear cached data, need to be clear when connection broken; 1380 ; 1381void RGeomDescription::ClearCache(); 1382{; 1383 ClearDrawData();; 1384 ; 1385 TLockGuard lock(fMutex);; 1386 fShapes.clear();; 1387 fSearch.clear();; 1388}; 1389 ; 1390/////////////////////////////////////////////////////////////////////; 1391/// return true when node used in main geometry drawing and does not have childs; 1392/// for such nodes one could provide optimize toggling of visibility flags; 1393 ; 1394bool RGeomDescription::IsPrincipalEndNode(int nodeid); 1395{; 1396 TLockGuard lock(fMutex);; 1397 ; 1398 if ((nodeid < 0) || (nodeid >= (int)fDesc.size())); 1399 return false;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406/////////////////////////////////////////////////////////////////////; 1407/// Search visible nodes for provided name; 1408/// If number of found elements less than 100, create description and shapes for ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:42194,Performance,optimiz,optimize,42194,"id RGeomDescription::ProduceDrawData(); 1359{; 1360 auto json = ProduceJson();; 1361 ; 1362 TLockGuard lock(fMutex);; 1363 ; 1364 fDrawJson = ""GDRAW:""s + json;; 1365}; 1366 ; 1367/////////////////////////////////////////////////////////////////////; 1368/// Clear raw data. Will be rebuild when next connection will be established; 1369 ; 1370void RGeomDescription::ClearDrawData(); 1371{; 1372 TLockGuard lock(fMutex);; 1373 ; 1374 fDrawJson.clear();; 1375 fSearchJson.clear();; 1376}; 1377 ; 1378/////////////////////////////////////////////////////////////////////; 1379/// Clear cached data, need to be clear when connection broken; 1380 ; 1381void RGeomDescription::ClearCache(); 1382{; 1383 ClearDrawData();; 1384 ; 1385 TLockGuard lock(fMutex);; 1386 fShapes.clear();; 1387 fSearch.clear();; 1388}; 1389 ; 1390/////////////////////////////////////////////////////////////////////; 1391/// return true when node used in main geometry drawing and does not have childs; 1392/// for such nodes one could provide optimize toggling of visibility flags; 1393 ; 1394bool RGeomDescription::IsPrincipalEndNode(int nodeid); 1395{; 1396 TLockGuard lock(fMutex);; 1397 ; 1398 if ((nodeid < 0) || (nodeid >= (int)fDesc.size())); 1399 return false;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406/////////////////////////////////////////////////////////////////////; 1407/// Search visible nodes for provided name; 1408/// If number of found elements less than 100, create description and shapes for them; 1409/// Returns number of match elements; 1410 ; 1411int RGeomDescription::SearchVisibles(const std::string &find, std::string &hjson, std::string &json); 1412{; 1413 TLockGuard lock(fMutex);; 1414 ; 1415 hjson.clear();; 1416 json.clear();; 1417 ; 1418 if (find.empty()) {; 1419 hjson = ""FOUND:RESET"";; 1420 return 0;; 1421 }; 1422 ; 1423 std::vector<int> nodescnt(fDesc.size()",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:56159,Performance,perform,performed,56159,"::string RGeomDescription::MakeDrawingJson(RGeomDrawing &drawing, bool has_shapes); 1827{; 1828 int comp = GetJsonComp();; 1829 ; 1830 if (!has_shapes || (comp < TBufferJSON::kSkipTypeInfo)); 1831 return TBufferJSON::ToJSON(&drawing, comp).Data();; 1832 ; 1833 comp = comp % TBufferJSON::kSkipTypeInfo; // no typeinfo skipping; 1834 ; 1835 TBufferJSON json;; 1836 json.SetCompact(comp);; 1837 json.SetSkipClassInfo(TClass::GetClass<RGeomDrawing>());; 1838 json.SetSkipClassInfo(TClass::GetClass<RGeomNode>());; 1839 json.SetSkipClassInfo(TClass::GetClass<RGeomVisible>());; 1840 json.SetSkipClassInfo(TClass::GetClass<RGeomShapeRenderInfo>());; 1841 json.SetSkipClassInfo(TClass::GetClass<RGeomRawRenderInfo>());; 1842 ; 1843 return json.StoreObject(&drawing, TClass::GetClass<RGeomDrawing>()).Data();; 1844}; 1845 ; 1846/////////////////////////////////////////////////////////////////////////////////; 1847/// Change visibility for specified element; 1848/// Returns true if changes was performed; 1849 ; 1850bool RGeomDescription::ChangeNodeVisibility(const std::vector<std::string> &path, bool selected); 1851{; 1852 TLockGuard lock(fMutex);; 1853 ; 1854 RGeomBrowserIter giter(*this);; 1855 if (!giter.Navigate(path)); 1856 return false;; 1857 ; 1858 auto nodeid = giter.GetNodeId();; 1859 ; 1860 auto &dnode = fDesc[nodeid];; 1861 ; 1862 auto vol = GetVolume(nodeid);; 1863 ; 1864 // nothing changed; 1865 if (vol->IsVisible() == selected); 1866 return false;; 1867 ; 1868 dnode.vis = selected ? 99 : 0;; 1869 vol->SetVisibility(selected);; 1870 if (!dnode.chlds.empty()) {; 1871 if (selected); 1872 dnode.vis = 1; // visibility disabled when any child; 1873 vol->SetVisDaughters(selected);; 1874 }; 1875 ; 1876 int id = 0;; 1877 for (auto &desc : fDesc); 1878 if (GetVolume(id++) == vol); 1879 desc.vis = dnode.vis;; 1880 ; 1881 auto stack = MakeStackByIds(giter.CurrentIds());; 1882 ; 1883 // any change in logical node visibility erase individual physical node settings; 1884 for (auto iter =",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:57620,Performance,perform,performed,57620,"1866 return false;; 1867 ; 1868 dnode.vis = selected ? 99 : 0;; 1869 vol->SetVisibility(selected);; 1870 if (!dnode.chlds.empty()) {; 1871 if (selected); 1872 dnode.vis = 1; // visibility disabled when any child; 1873 vol->SetVisDaughters(selected);; 1874 }; 1875 ; 1876 int id = 0;; 1877 for (auto &desc : fDesc); 1878 if (GetVolume(id++) == vol); 1879 desc.vis = dnode.vis;; 1880 ; 1881 auto stack = MakeStackByIds(giter.CurrentIds());; 1882 ; 1883 // any change in logical node visibility erase individual physical node settings; 1884 for (auto iter = fVisibility.begin(); iter != fVisibility.end(); iter++); 1885 if (compare_stacks(iter->stack, stack) == 0) {; 1886 fVisibility.erase(iter);; 1887 break;; 1888 }; 1889 ; 1890 ClearDrawData(); // after change raw data is no longer valid; 1891 ; 1892 return true;; 1893}; 1894 ; 1895/////////////////////////////////////////////////////////////////////////////////; 1896/// Change visibility for specified element; 1897/// Returns true if changes was performed; 1898 ; 1899std::unique_ptr<RGeomNodeInfo> RGeomDescription::MakeNodeInfo(const std::vector<int> &stack); 1900{; 1901 auto path = MakePathByStack(stack);; 1902 ; 1903 TLockGuard lock(fMutex);; 1904 ; 1905 std::unique_ptr<RGeomNodeInfo> res;; 1906 ; 1907 RGeomBrowserIter iter(*this);; 1908 ; 1909 if (iter.Navigate(path)) {; 1910 ; 1911 auto node = fNodes[iter.GetNodeId()];; 1912 ; 1913 auto &desc = fDesc[iter.GetNodeId()];; 1914 ; 1915 res = std::make_unique<RGeomNodeInfo>();; 1916 ; 1917 res->path = path;; 1918 res->node_name = node ? node->GetName() : ""node_name"";; 1919 res->node_type = node ? node->ClassName() : ""no class"";; 1920 ; 1921 auto vol = GetVolume(iter.GetNodeId());; 1922 ; 1923 TGeoShape *shape = vol ? vol->GetShape() : nullptr;; 1924 ; 1925 if (shape) {; 1926 res->shape_name = shape->GetName();; 1927 res->shape_type = shape->ClassName();; 1928 }; 1929 ; 1930 if (shape && desc.CanDisplay()) {; 1931 ; 1932 auto &shape_descr = MakeShapeDescr(shape);; 1933 ; 1934 ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:75074,Performance,perform,performed,75074,"imal number of nodes which should be selected for drawing.Definition RGeomData.hxx:317; ROOT::RGeomDescription::ProcessBrowserRequeststd::string ProcessBrowserRequest(const std::string &req="""")Find description object for requested shape If not exists - will be created.Definition RGeomData.cxx:767; ROOT::RGeomDescription::fDescstd::vector< RGeomNode > fDesc! converted description, send to clientDefinition RGeomData.hxx:243; ROOT::RGeomDescription::PackMatrixvoid PackMatrix(std::vector< float > &arr, TGeoMatrix *matr)Pack matrix into vector, which can be send to client Following sizes can be used for vector: 0 - Iden...Definition RGeomData.cxx:341; ROOT::RGeomDescription::ProduceDrawingForbool ProduceDrawingFor(int nodeid, std::string &json, bool check_volume=false)Produce shape rendering data for given stack All nodes, which are referencing same shape will be tran...Definition RGeomData.cxx:1757; ROOT::RGeomDescription::MakeNodeInfostd::unique_ptr< RGeomNodeInfo > MakeNodeInfo(const std::vector< int > &stack)Change visibility for specified element Returns true if changes was performed.Definition RGeomData.cxx:1899; ROOT::RGeomDescription::HasDrawDatabool HasDrawData() constCheck if there is draw data available.Definition RGeomData.cxx:1331; ROOT::RGeomDescription::MakeIdsByStackstd::vector< int > MakeIdsByStack(const std::vector< int > &stack)Produce list of node ids for given stack If found nodes preselected - use their ids.Definition RGeomData.cxx:1683; ROOT::RGeomDescription::MarkVisibleint MarkVisible(bool on_screen=false)Set visibility flag for each nodes.Definition RGeomData.cxx:594; ROOT::RGeomDescription::SetVisLevelvoid SetVisLevel(int lvl=3)Set maximal visible level.Definition RGeomData.hxx:327; ROOT::RGeomDescription::IssueSignalvoid IssueSignal(const void *handler, const std::string &kind)Issue signal, which distributed on all handlers - excluding source handler.Definition RGeomData.cxx:293; ROOT::RGeomDescription::GetUsedNSegmentsint GetUsedNSegments(int",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:77386,Performance,cache,cached,77386,"on)Change search query and belongs to it json string Returns true if any parameter was really changed.Definition RGeomData.cxx:2130; ROOT::RGeomDescription::fVisibilitystd::vector< RGeomNodeVisibility > fVisibility! custom visibility flags for physical nodesDefinition RGeomData.hxx:244; ROOT::RGeomDescription::SelectTopbool SelectTop(const std::vector< std::string > &path)Select top node by path Used by the client to change active node Returns true if selected node was ch...Definition RGeomData.cxx:1946; ROOT::RGeomDescription::GetMaxVisNodesint GetMaxVisNodes() constReturns maximal visible number of nodes, ignored when non-positive.Definition RGeomData.hxx:319; ROOT::RGeomDescription::GetVisLevelint GetVisLevel() constReturns maximal visible level.Definition RGeomData.hxx:329; ROOT::RGeomDescription::GetMaxVisFacesint GetMaxVisFaces() constReturns maximal visible number of faces, ignored when non-positive.Definition RGeomData.hxx:324; ROOT::RGeomDescription::ClearCachevoid ClearCache()Clear cached data, need to be clear when connection broken.Definition RGeomData.cxx:1381; ROOT::RGeomDescription::ClearDescriptionvoid ClearDescription()Clear geometry description.Definition RGeomData.cxx:478; ROOT::RGeomDescription::MakeStackByIdsstd::vector< int > MakeStackByIds(const std::vector< int > &ids)Creates stack for given array of ids, first element always should be 0.Definition RGeomData.cxx:1621; ROOT::RGeomDescription::SetMaxVisFacesvoid SetMaxVisFaces(int cnt)Set maximal number of faces which should be selected for drawing.Definition RGeomData.hxx:322; ROOT::RGeomDescription::IsPreferredOfflinebool IsPreferredOffline() constIs offline operations preferred.Definition RGeomData.hxx:361; ROOT::RGeomDescription::fShapesstd::vector< ShapeDescr > fShapes! shapes with created descriptionsDefinition RGeomData.hxx:253; ROOT::RGeomDescription::fJsonCompint fJsonComp! default JSON compressionDefinition RGeomData.hxx:261; ROOT::RGeomDescription::ChangeNodeVisibilitybool ChangeNodeV",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:78506,Performance,perform,performed,78506,"ar when connection broken.Definition RGeomData.cxx:1381; ROOT::RGeomDescription::ClearDescriptionvoid ClearDescription()Clear geometry description.Definition RGeomData.cxx:478; ROOT::RGeomDescription::MakeStackByIdsstd::vector< int > MakeStackByIds(const std::vector< int > &ids)Creates stack for given array of ids, first element always should be 0.Definition RGeomData.cxx:1621; ROOT::RGeomDescription::SetMaxVisFacesvoid SetMaxVisFaces(int cnt)Set maximal number of faces which should be selected for drawing.Definition RGeomData.hxx:322; ROOT::RGeomDescription::IsPreferredOfflinebool IsPreferredOffline() constIs offline operations preferred.Definition RGeomData.hxx:361; ROOT::RGeomDescription::fShapesstd::vector< ShapeDescr > fShapes! shapes with created descriptionsDefinition RGeomData.hxx:253; ROOT::RGeomDescription::fJsonCompint fJsonComp! default JSON compressionDefinition RGeomData.hxx:261; ROOT::RGeomDescription::ChangeNodeVisibilitybool ChangeNodeVisibility(const std::vector< std::string > &path, bool on)Change visibility for specified element Returns true if changes was performed.Definition RGeomData.cxx:1850; ROOT::RGeomDescription::fSearchstd::string fSearch! search string in hierarchyDefinition RGeomData.hxx:255; ROOT::RGeomDescription::fSearchJsonstd::string fSearchJson! drawing json for searchDefinition RGeomData.hxx:256; ROOT::RGeomDescription::SavePrimitivevoid SavePrimitive(std::ostream &fs, const std::string &name)Save geometry configuration as C++ macro.Definition RGeomData.cxx:2143; ROOT::RGeomDescription::ClearAllPhysVisibilitybool ClearAllPhysVisibility()Reset all custom visibility settings.Definition RGeomData.cxx:2089; ROOT::RGeomDescription::MakeDrawingJsonstd::string MakeDrawingJson(RGeomDrawing &drawing, bool has_shapes=false)Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in thi...Definition RGeomData.cxx:1826; ROOT::RGeomDescription::fActualLevelint fActualLevel! level can be reduced when select",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:7307,Safety,avoid,avoid,7307,"(), len2 = stack2.size(), len = (len1 < len2) ? len1 : len2, indx = 0;; 273 while (indx < len) {; 274 if (stack1[indx] < stack2[indx]); 275 return -1;; 276 if (stack1[indx] > stack2[indx]); 277 return 1;; 278 ++indx;; 279 }; 280 ; 281 if (len1 < len2); 282 return -1;; 283 if (len1 > len2); 284 return 1;; 285 ; 286 return 0;; 287}; 288} // namespace; 289 ; 290/////////////////////////////////////////////////////////////////////; 291/// Issue signal, which distributed on all handlers - excluding source handler; 292 ; 293void RGeomDescription::IssueSignal(const void *handler, const std::string &kind); 294{; 295 std::vector<RGeomSignalFunc_t> funcs;; 296 ; 297 {; 298 TLockGuard lock(fMutex);; 299 for (auto &pair : fSignals); 300 if (!handler || (pair.first != handler)); 301 funcs.emplace_back(pair.second);; 302 }; 303 ; 304 // invoke signal outside locked mutex to avoid any locking; 305 for (auto func : funcs); 306 func(kind);; 307}; 308 ; 309/////////////////////////////////////////////////////////////////////; 310/// Add signal handler; 311 ; 312void RGeomDescription::AddSignalHandler(const void *handler, RGeomSignalFunc_t func); 313{; 314 TLockGuard lock(fMutex);; 315 fSignals.emplace_back(handler, func);; 316}; 317 ; 318/////////////////////////////////////////////////////////////////////; 319/// Remove signal handler; 320 ; 321void RGeomDescription::RemoveSignalHandler(const void *handler); 322{; 323 TLockGuard lock(fMutex);; 324 ; 325 for (auto iter = fSignals.begin(); iter != fSignals.end(); ++iter); 326 if (handler == iter->first) {; 327 fSignals.erase(iter);; 328 return;; 329 }; 330}; 331 ; 332/////////////////////////////////////////////////////////////////////; 333/// Pack matrix into vector, which can be send to client; 334/// Following sizes can be used for vector:; 335/// 0 - Identity matrix; 336/// 3 - Translation; 337/// 4 - Scale (last element always 1); 338/// 9 - Rotation; 339/// 16 - Full size; 340 ; 341void RGeomDescription::PackMatrix(std::vector<f",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:14778,Safety,recover,recover,14778,"sc.emplace_back(node ? node->GetNumber() - offset : 0);; 529 TGeoVolume *vol = node ? node->GetVolume() : topvolume;; 530 ; 531 auto &desc = fDesc[cnt++];; 532 ; 533 sortarr.emplace_back(&desc);; 534 ; 535 desc.name = node ? node->GetName() : vol->GetName();; 536 ; 537 auto shape = dynamic_cast<TGeoBBox *>(vol->GetShape());; 538 if (shape) {; 539 desc.vol = TMath::Sqrt(shape->GetDX() * shape->GetDX() + shape->GetDY() * shape->GetDY() +; 540 shape->GetDZ() * shape->GetDZ());; 541 desc.nfaces = CountShapeFaces(shape);; 542 }; 543 ; 544 CopyMaterialProperties(vol, desc);; 545 ; 546 auto chlds = node ? node->GetNodes() : vol->GetNodes();; 547 ; 548 PackMatrix(desc.matr, node ? node->GetMatrix() : nullptr);; 549 ; 550 if (chlds); 551 for (int n = 0; n <= chlds->GetLast(); ++n) {; 552 auto chld = dynamic_cast<TGeoNode *>(chlds->At(n));; 553 desc.chlds.emplace_back(chld->GetNumber() - offset);; 554 }; 555 }; 556 ; 557 // recover numbers; 558 cnt = 0;; 559 for (auto node : fNodes) {; 560 auto number = numbers[cnt++];; 561 if (node); 562 node->SetNumber(number);; 563 }; 564 ; 565 // sort in volume descent order; 566 std::sort(sortarr.begin(), sortarr.end(), [](RGeomNode *a, RGeomNode *b) { return a->vol > b->vol; });; 567 ; 568 cnt = 0;; 569 for (auto &elem : sortarr) {; 570 fSortMap.emplace_back(elem->id);; 571 elem->sortid = cnt++; // keep place in sorted array to correctly apply cut; 572 }; 573 ; 574 MarkVisible(); // set visibility flags; 575 ; 576 ProduceIdShifts();; 577}; 578 ; 579/////////////////////////////////////////////////////////////////////; 580/// Get volume for specified nodeid; 581/// If specific volume was configured, it will be returned for nodeid==0; 582 ; 583TGeoVolume *RGeomDescription::GetVolume(int nodeid); 584{; 585 auto node = fNodes[nodeid];; 586 if (node); 587 return node->GetVolume();; 588 return nodeid == 0 ? fDrawVolume : nullptr;; 589}; 590 ; 591/////////////////////////////////////////////////////////////////////; 592/// Set visibility flag f",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:39119,Safety,avoid,avoid,39119,"lnumnodes = 0;; 1259 ; 1260 // for (auto &node : fDesc); 1261 // node.SetDisplayed(false);; 1262 ; 1263 // build all shapes in volume decreasing order; 1264 for (auto &sid : fSortMap) {; 1265 fDrawIdCut++; //; 1266 auto &desc = fDesc[sid];; 1267 ; 1268 if ((viscnt[sid] <= 0) || (desc.vol <= 0)); 1269 continue;; 1270 ; 1271 auto shape = GetVolume(sid)->GetShape();; 1272 if (!shape); 1273 continue;; 1274 ; 1275 // now we need to create TEveGeoPolyShape, which can provide all rendering data; 1276 auto &shape_descr = MakeShapeDescr(shape);; 1277 ; 1278 // should not happen, but just in case; 1279 if (shape_descr.nfaces <= 0) {; 1280 R__LOG_ERROR(RGeomLog()) << ""No faces for the shape "" << shape->GetName() << "" class "" << shape->ClassName();; 1281 continue;; 1282 }; 1283 ; 1284 // check how many faces are created; 1285 totalnumfaces += shape_descr.nfaces * viscnt[sid];; 1286 if ((GetMaxVisFaces() > 0) && (totalnumfaces > GetMaxVisFaces())); 1287 break;; 1288 ; 1289 // also avoid too many nodes; 1290 totalnumnodes += viscnt[sid];; 1291 if ((GetMaxVisNodes() > 0) && (totalnumnodes > GetMaxVisNodes())); 1292 break;; 1293 ; 1294 // desc.SetDisplayed(true);; 1295 }; 1296 ; 1297 // finally we should create data for streaming to the client; 1298 // it includes list of visible nodes and rawdata; 1299 ; 1300 RGeomDrawing drawing;; 1301 ResetRndrInfos();; 1302 bool has_shape = false;; 1303 ; 1304 ScanNodes(true, level, [&, this](RGeomNode &node, std::vector<int> &stack, bool, int seqid) {; 1305 if ((node.sortid < fDrawIdCut) && (viscnt[node.id] > 0)) {; 1306 drawing.visibles.emplace_back(node.id, seqid, stack);; 1307 ; 1308 auto &item = drawing.visibles.back();; 1309 item.color = node.color;; 1310 item.opacity = node.opacity;; 1311 ; 1312 auto volume = GetVolume(node.id);; 1313 ; 1314 auto &sd = MakeShapeDescr(volume->GetShape());; 1315 ; 1316 item.ri = sd.rndr_info();; 1317 if (sd.has_shape()); 1318 has_shape = true;; 1319 }; 1320 return true;; 1321 });; 1322 ; 1323 CollectNodes(d",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:45582,Safety,avoid,avoid,45582,"76 continue; // this node is not used at all; 1477 ; 1478 auto &desc = fDesc[sid];; 1479 if ((viscnt[sid] <= 0) && (desc.vol <= 0)); 1480 continue;; 1481 ; 1482 auto shape = GetVolume(sid)->GetShape();; 1483 if (!shape); 1484 continue;; 1485 ; 1486 // create shape raw data; 1487 auto &shape_descr = MakeShapeDescr(shape);; 1488 ; 1489 // should not happen, but just in case; 1490 if (shape_descr.nfaces <= 0) {; 1491 R__LOG_ERROR(RGeomLog()) << ""No faces for the shape "" << shape->GetName() << "" class "" << shape->ClassName();; 1492 continue;; 1493 }; 1494 ; 1495 // check how many faces are created; 1496 totalnumfaces += shape_descr.nfaces * viscnt[sid];; 1497 if ((GetMaxVisFaces() > 0) && (totalnumfaces > GetMaxVisFaces())) {; 1498 send_rawdata = false;; 1499 break;; 1500 }; 1501 ; 1502 // also avoid too many nodes; 1503 totalnumnodes += viscnt[sid];; 1504 if ((GetMaxVisNodes() > 0) && (totalnumnodes > GetMaxVisNodes())) {; 1505 send_rawdata = false;; 1506 break;; 1507 }; 1508 }; 1509 ; 1510 // only for debug purposes - remove later; 1511 // send_rawdata = false;; 1512 ; 1513 // finally we should create data for streaming to the client; 1514 // it includes list of visible nodes and rawdata (if there is enough space); 1515 ; 1516 std::vector<RGeomNodeBase> found_desc; ///<! hierarchy of nodes, used for search; 1517 std::vector<int> found_map(fDesc.size(), -1); ///<! mapping between nodeid - > foundid; 1518 ; 1519 // these are only selected nodes to produce hierarchy; 1520 ; 1521 found_desc.emplace_back(0);; 1522 found_desc[0].vis = fDesc[0].vis;; 1523 found_desc[0].name = fDesc[0].name;; 1524 found_desc[0].color = fDesc[0].color;; 1525 found_map[0] = 0;; 1526 ; 1527 ResetRndrInfos();; 1528 ; 1529 RGeomDrawing drawing;; 1530 bool has_shape = true;; 1531 ; 1532 ScanNodes(false, 0, [&, this](RGeomNode &node, std::vector<int> &stack, bool is_vis, int seqid) {; 1533 // select only nodes which should match; 1534 if (!match_func(node)); 1535 return true;; 1536 ; 1537 // add entr",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:8957,Testability,test,test,8957,"ck matrix into vector, which can be send to client; 334/// Following sizes can be used for vector:; 335/// 0 - Identity matrix; 336/// 3 - Translation; 337/// 4 - Scale (last element always 1); 338/// 9 - Rotation; 339/// 16 - Full size; 340 ; 341void RGeomDescription::PackMatrix(std::vector<float> &vect, TGeoMatrix *matr); 342{; 343 vect.clear();; 344 ; 345 if (!matr || matr->IsIdentity()); 346 return;; 347 ; 348 auto trans = matr->GetTranslation();; 349 auto scale = matr->GetScale();; 350 auto rotate = matr->GetRotationMatrix();; 351 ; 352 bool is_translate = matr->IsA() == TGeoTranslation::Class(), is_scale = matr->IsA() == TGeoScale::Class(),; 353 is_rotate = matr->IsA() == TGeoRotation::Class();; 354 ; 355 if (!is_translate && !is_scale && !is_rotate) {; 356 // check if trivial matrix; 357 ; 358 auto test = [](double val, double chk) { return (val == chk) || (TMath::Abs(val - chk) < 1e-20); };; 359 ; 360 bool no_scale = test(scale[0], 1) && test(scale[1], 1) && test(scale[2], 1);; 361 bool no_trans = test(trans[0], 0) && test(trans[1], 0) && test(trans[2], 0);; 362 bool no_rotate = test(rotate[0], 1) && test(rotate[1], 0) && test(rotate[2], 0) && test(rotate[3], 0) &&; 363 test(rotate[4], 1) && test(rotate[5], 0) && test(rotate[6], 0) && test(rotate[7], 0) &&; 364 test(rotate[8], 1);; 365 ; 366 if (no_scale && no_trans && no_rotate); 367 return;; 368 ; 369 if (no_scale && no_trans && !no_rotate) {; 370 is_rotate = true;; 371 } else if (no_scale && !no_trans && no_rotate) {; 372 is_translate = true;; 373 } else if (!no_scale && no_trans && no_rotate) {; 374 is_scale = true;; 375 }; 376 }; 377 ; 378 if (is_translate) {; 379 vect.resize(3);; 380 vect[0] = trans[0];; 381 vect[1] = trans[1];; 382 vect[2] = trans[2];; 383 return;; 384 }; 385 ; 386 if (is_scale) {; 387 vect.resize(4);; 388 vect[0] = scale[0];; 389 vect[1] = scale[1];; 390 vect[2] = scale[2];; 391 vect[3] = 1;; 392 return;; 393 }; 394 ; 395 if (is_rotate) {; 396 vect.resize(9);; 397 for (int n = 0; n < ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:9079,Testability,test,test,9079,"ck matrix into vector, which can be send to client; 334/// Following sizes can be used for vector:; 335/// 0 - Identity matrix; 336/// 3 - Translation; 337/// 4 - Scale (last element always 1); 338/// 9 - Rotation; 339/// 16 - Full size; 340 ; 341void RGeomDescription::PackMatrix(std::vector<float> &vect, TGeoMatrix *matr); 342{; 343 vect.clear();; 344 ; 345 if (!matr || matr->IsIdentity()); 346 return;; 347 ; 348 auto trans = matr->GetTranslation();; 349 auto scale = matr->GetScale();; 350 auto rotate = matr->GetRotationMatrix();; 351 ; 352 bool is_translate = matr->IsA() == TGeoTranslation::Class(), is_scale = matr->IsA() == TGeoScale::Class(),; 353 is_rotate = matr->IsA() == TGeoRotation::Class();; 354 ; 355 if (!is_translate && !is_scale && !is_rotate) {; 356 // check if trivial matrix; 357 ; 358 auto test = [](double val, double chk) { return (val == chk) || (TMath::Abs(val - chk) < 1e-20); };; 359 ; 360 bool no_scale = test(scale[0], 1) && test(scale[1], 1) && test(scale[2], 1);; 361 bool no_trans = test(trans[0], 0) && test(trans[1], 0) && test(trans[2], 0);; 362 bool no_rotate = test(rotate[0], 1) && test(rotate[1], 0) && test(rotate[2], 0) && test(rotate[3], 0) &&; 363 test(rotate[4], 1) && test(rotate[5], 0) && test(rotate[6], 0) && test(rotate[7], 0) &&; 364 test(rotate[8], 1);; 365 ; 366 if (no_scale && no_trans && no_rotate); 367 return;; 368 ; 369 if (no_scale && no_trans && !no_rotate) {; 370 is_rotate = true;; 371 } else if (no_scale && !no_trans && no_rotate) {; 372 is_translate = true;; 373 } else if (!no_scale && no_trans && no_rotate) {; 374 is_scale = true;; 375 }; 376 }; 377 ; 378 if (is_translate) {; 379 vect.resize(3);; 380 vect[0] = trans[0];; 381 vect[1] = trans[1];; 382 vect[2] = trans[2];; 383 return;; 384 }; 385 ; 386 if (is_scale) {; 387 vect.resize(4);; 388 vect[0] = scale[0];; 389 vect[1] = scale[1];; 390 vect[2] = scale[2];; 391 vect[3] = 1;; 392 return;; 393 }; 394 ; 395 if (is_rotate) {; 396 vect.resize(9);; 397 for (int n = 0; n < ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:9100,Testability,test,test,9100,"ck matrix into vector, which can be send to client; 334/// Following sizes can be used for vector:; 335/// 0 - Identity matrix; 336/// 3 - Translation; 337/// 4 - Scale (last element always 1); 338/// 9 - Rotation; 339/// 16 - Full size; 340 ; 341void RGeomDescription::PackMatrix(std::vector<float> &vect, TGeoMatrix *matr); 342{; 343 vect.clear();; 344 ; 345 if (!matr || matr->IsIdentity()); 346 return;; 347 ; 348 auto trans = matr->GetTranslation();; 349 auto scale = matr->GetScale();; 350 auto rotate = matr->GetRotationMatrix();; 351 ; 352 bool is_translate = matr->IsA() == TGeoTranslation::Class(), is_scale = matr->IsA() == TGeoScale::Class(),; 353 is_rotate = matr->IsA() == TGeoRotation::Class();; 354 ; 355 if (!is_translate && !is_scale && !is_rotate) {; 356 // check if trivial matrix; 357 ; 358 auto test = [](double val, double chk) { return (val == chk) || (TMath::Abs(val - chk) < 1e-20); };; 359 ; 360 bool no_scale = test(scale[0], 1) && test(scale[1], 1) && test(scale[2], 1);; 361 bool no_trans = test(trans[0], 0) && test(trans[1], 0) && test(trans[2], 0);; 362 bool no_rotate = test(rotate[0], 1) && test(rotate[1], 0) && test(rotate[2], 0) && test(rotate[3], 0) &&; 363 test(rotate[4], 1) && test(rotate[5], 0) && test(rotate[6], 0) && test(rotate[7], 0) &&; 364 test(rotate[8], 1);; 365 ; 366 if (no_scale && no_trans && no_rotate); 367 return;; 368 ; 369 if (no_scale && no_trans && !no_rotate) {; 370 is_rotate = true;; 371 } else if (no_scale && !no_trans && no_rotate) {; 372 is_translate = true;; 373 } else if (!no_scale && no_trans && no_rotate) {; 374 is_scale = true;; 375 }; 376 }; 377 ; 378 if (is_translate) {; 379 vect.resize(3);; 380 vect[0] = trans[0];; 381 vect[1] = trans[1];; 382 vect[2] = trans[2];; 383 return;; 384 }; 385 ; 386 if (is_scale) {; 387 vect.resize(4);; 388 vect[0] = scale[0];; 389 vect[1] = scale[1];; 390 vect[2] = scale[2];; 391 vect[3] = 1;; 392 return;; 393 }; 394 ; 395 if (is_rotate) {; 396 vect.resize(9);; 397 for (int n = 0; n < ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:9121,Testability,test,test,9121,"ck matrix into vector, which can be send to client; 334/// Following sizes can be used for vector:; 335/// 0 - Identity matrix; 336/// 3 - Translation; 337/// 4 - Scale (last element always 1); 338/// 9 - Rotation; 339/// 16 - Full size; 340 ; 341void RGeomDescription::PackMatrix(std::vector<float> &vect, TGeoMatrix *matr); 342{; 343 vect.clear();; 344 ; 345 if (!matr || matr->IsIdentity()); 346 return;; 347 ; 348 auto trans = matr->GetTranslation();; 349 auto scale = matr->GetScale();; 350 auto rotate = matr->GetRotationMatrix();; 351 ; 352 bool is_translate = matr->IsA() == TGeoTranslation::Class(), is_scale = matr->IsA() == TGeoScale::Class(),; 353 is_rotate = matr->IsA() == TGeoRotation::Class();; 354 ; 355 if (!is_translate && !is_scale && !is_rotate) {; 356 // check if trivial matrix; 357 ; 358 auto test = [](double val, double chk) { return (val == chk) || (TMath::Abs(val - chk) < 1e-20); };; 359 ; 360 bool no_scale = test(scale[0], 1) && test(scale[1], 1) && test(scale[2], 1);; 361 bool no_trans = test(trans[0], 0) && test(trans[1], 0) && test(trans[2], 0);; 362 bool no_rotate = test(rotate[0], 1) && test(rotate[1], 0) && test(rotate[2], 0) && test(rotate[3], 0) &&; 363 test(rotate[4], 1) && test(rotate[5], 0) && test(rotate[6], 0) && test(rotate[7], 0) &&; 364 test(rotate[8], 1);; 365 ; 366 if (no_scale && no_trans && no_rotate); 367 return;; 368 ; 369 if (no_scale && no_trans && !no_rotate) {; 370 is_rotate = true;; 371 } else if (no_scale && !no_trans && no_rotate) {; 372 is_translate = true;; 373 } else if (!no_scale && no_trans && no_rotate) {; 374 is_scale = true;; 375 }; 376 }; 377 ; 378 if (is_translate) {; 379 vect.resize(3);; 380 vect[0] = trans[0];; 381 vect[1] = trans[1];; 382 vect[2] = trans[2];; 383 return;; 384 }; 385 ; 386 if (is_scale) {; 387 vect.resize(4);; 388 vect[0] = scale[0];; 389 vect[1] = scale[1];; 390 vect[2] = scale[2];; 391 vect[3] = 1;; 392 return;; 393 }; 394 ; 395 if (is_rotate) {; 396 vect.resize(9);; 397 for (int n = 0; n < ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:9161,Testability,test,test,9161,"ck matrix into vector, which can be send to client; 334/// Following sizes can be used for vector:; 335/// 0 - Identity matrix; 336/// 3 - Translation; 337/// 4 - Scale (last element always 1); 338/// 9 - Rotation; 339/// 16 - Full size; 340 ; 341void RGeomDescription::PackMatrix(std::vector<float> &vect, TGeoMatrix *matr); 342{; 343 vect.clear();; 344 ; 345 if (!matr || matr->IsIdentity()); 346 return;; 347 ; 348 auto trans = matr->GetTranslation();; 349 auto scale = matr->GetScale();; 350 auto rotate = matr->GetRotationMatrix();; 351 ; 352 bool is_translate = matr->IsA() == TGeoTranslation::Class(), is_scale = matr->IsA() == TGeoScale::Class(),; 353 is_rotate = matr->IsA() == TGeoRotation::Class();; 354 ; 355 if (!is_translate && !is_scale && !is_rotate) {; 356 // check if trivial matrix; 357 ; 358 auto test = [](double val, double chk) { return (val == chk) || (TMath::Abs(val - chk) < 1e-20); };; 359 ; 360 bool no_scale = test(scale[0], 1) && test(scale[1], 1) && test(scale[2], 1);; 361 bool no_trans = test(trans[0], 0) && test(trans[1], 0) && test(trans[2], 0);; 362 bool no_rotate = test(rotate[0], 1) && test(rotate[1], 0) && test(rotate[2], 0) && test(rotate[3], 0) &&; 363 test(rotate[4], 1) && test(rotate[5], 0) && test(rotate[6], 0) && test(rotate[7], 0) &&; 364 test(rotate[8], 1);; 365 ; 366 if (no_scale && no_trans && no_rotate); 367 return;; 368 ; 369 if (no_scale && no_trans && !no_rotate) {; 370 is_rotate = true;; 371 } else if (no_scale && !no_trans && no_rotate) {; 372 is_translate = true;; 373 } else if (!no_scale && no_trans && no_rotate) {; 374 is_scale = true;; 375 }; 376 }; 377 ; 378 if (is_translate) {; 379 vect.resize(3);; 380 vect[0] = trans[0];; 381 vect[1] = trans[1];; 382 vect[2] = trans[2];; 383 return;; 384 }; 385 ; 386 if (is_scale) {; 387 vect.resize(4);; 388 vect[0] = scale[0];; 389 vect[1] = scale[1];; 390 vect[2] = scale[2];; 391 vect[3] = 1;; 392 return;; 393 }; 394 ; 395 if (is_rotate) {; 396 vect.resize(9);; 397 for (int n = 0; n < ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:9182,Testability,test,test,9182,"ck matrix into vector, which can be send to client; 334/// Following sizes can be used for vector:; 335/// 0 - Identity matrix; 336/// 3 - Translation; 337/// 4 - Scale (last element always 1); 338/// 9 - Rotation; 339/// 16 - Full size; 340 ; 341void RGeomDescription::PackMatrix(std::vector<float> &vect, TGeoMatrix *matr); 342{; 343 vect.clear();; 344 ; 345 if (!matr || matr->IsIdentity()); 346 return;; 347 ; 348 auto trans = matr->GetTranslation();; 349 auto scale = matr->GetScale();; 350 auto rotate = matr->GetRotationMatrix();; 351 ; 352 bool is_translate = matr->IsA() == TGeoTranslation::Class(), is_scale = matr->IsA() == TGeoScale::Class(),; 353 is_rotate = matr->IsA() == TGeoRotation::Class();; 354 ; 355 if (!is_translate && !is_scale && !is_rotate) {; 356 // check if trivial matrix; 357 ; 358 auto test = [](double val, double chk) { return (val == chk) || (TMath::Abs(val - chk) < 1e-20); };; 359 ; 360 bool no_scale = test(scale[0], 1) && test(scale[1], 1) && test(scale[2], 1);; 361 bool no_trans = test(trans[0], 0) && test(trans[1], 0) && test(trans[2], 0);; 362 bool no_rotate = test(rotate[0], 1) && test(rotate[1], 0) && test(rotate[2], 0) && test(rotate[3], 0) &&; 363 test(rotate[4], 1) && test(rotate[5], 0) && test(rotate[6], 0) && test(rotate[7], 0) &&; 364 test(rotate[8], 1);; 365 ; 366 if (no_scale && no_trans && no_rotate); 367 return;; 368 ; 369 if (no_scale && no_trans && !no_rotate) {; 370 is_rotate = true;; 371 } else if (no_scale && !no_trans && no_rotate) {; 372 is_translate = true;; 373 } else if (!no_scale && no_trans && no_rotate) {; 374 is_scale = true;; 375 }; 376 }; 377 ; 378 if (is_translate) {; 379 vect.resize(3);; 380 vect[0] = trans[0];; 381 vect[1] = trans[1];; 382 vect[2] = trans[2];; 383 return;; 384 }; 385 ; 386 if (is_scale) {; 387 vect.resize(4);; 388 vect[0] = scale[0];; 389 vect[1] = scale[1];; 390 vect[2] = scale[2];; 391 vect[3] = 1;; 392 return;; 393 }; 394 ; 395 if (is_rotate) {; 396 vect.resize(9);; 397 for (int n = 0; n < ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:9203,Testability,test,test,9203,"ck matrix into vector, which can be send to client; 334/// Following sizes can be used for vector:; 335/// 0 - Identity matrix; 336/// 3 - Translation; 337/// 4 - Scale (last element always 1); 338/// 9 - Rotation; 339/// 16 - Full size; 340 ; 341void RGeomDescription::PackMatrix(std::vector<float> &vect, TGeoMatrix *matr); 342{; 343 vect.clear();; 344 ; 345 if (!matr || matr->IsIdentity()); 346 return;; 347 ; 348 auto trans = matr->GetTranslation();; 349 auto scale = matr->GetScale();; 350 auto rotate = matr->GetRotationMatrix();; 351 ; 352 bool is_translate = matr->IsA() == TGeoTranslation::Class(), is_scale = matr->IsA() == TGeoScale::Class(),; 353 is_rotate = matr->IsA() == TGeoRotation::Class();; 354 ; 355 if (!is_translate && !is_scale && !is_rotate) {; 356 // check if trivial matrix; 357 ; 358 auto test = [](double val, double chk) { return (val == chk) || (TMath::Abs(val - chk) < 1e-20); };; 359 ; 360 bool no_scale = test(scale[0], 1) && test(scale[1], 1) && test(scale[2], 1);; 361 bool no_trans = test(trans[0], 0) && test(trans[1], 0) && test(trans[2], 0);; 362 bool no_rotate = test(rotate[0], 1) && test(rotate[1], 0) && test(rotate[2], 0) && test(rotate[3], 0) &&; 363 test(rotate[4], 1) && test(rotate[5], 0) && test(rotate[6], 0) && test(rotate[7], 0) &&; 364 test(rotate[8], 1);; 365 ; 366 if (no_scale && no_trans && no_rotate); 367 return;; 368 ; 369 if (no_scale && no_trans && !no_rotate) {; 370 is_rotate = true;; 371 } else if (no_scale && !no_trans && no_rotate) {; 372 is_translate = true;; 373 } else if (!no_scale && no_trans && no_rotate) {; 374 is_scale = true;; 375 }; 376 }; 377 ; 378 if (is_translate) {; 379 vect.resize(3);; 380 vect[0] = trans[0];; 381 vect[1] = trans[1];; 382 vect[2] = trans[2];; 383 return;; 384 }; 385 ; 386 if (is_scale) {; 387 vect.resize(4);; 388 vect[0] = scale[0];; 389 vect[1] = scale[1];; 390 vect[2] = scale[2];; 391 vect[3] = 1;; 392 return;; 393 }; 394 ; 395 if (is_rotate) {; 396 vect.resize(9);; 397 for (int n = 0; n < ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:9244,Testability,test,test,9244,"ck matrix into vector, which can be send to client; 334/// Following sizes can be used for vector:; 335/// 0 - Identity matrix; 336/// 3 - Translation; 337/// 4 - Scale (last element always 1); 338/// 9 - Rotation; 339/// 16 - Full size; 340 ; 341void RGeomDescription::PackMatrix(std::vector<float> &vect, TGeoMatrix *matr); 342{; 343 vect.clear();; 344 ; 345 if (!matr || matr->IsIdentity()); 346 return;; 347 ; 348 auto trans = matr->GetTranslation();; 349 auto scale = matr->GetScale();; 350 auto rotate = matr->GetRotationMatrix();; 351 ; 352 bool is_translate = matr->IsA() == TGeoTranslation::Class(), is_scale = matr->IsA() == TGeoScale::Class(),; 353 is_rotate = matr->IsA() == TGeoRotation::Class();; 354 ; 355 if (!is_translate && !is_scale && !is_rotate) {; 356 // check if trivial matrix; 357 ; 358 auto test = [](double val, double chk) { return (val == chk) || (TMath::Abs(val - chk) < 1e-20); };; 359 ; 360 bool no_scale = test(scale[0], 1) && test(scale[1], 1) && test(scale[2], 1);; 361 bool no_trans = test(trans[0], 0) && test(trans[1], 0) && test(trans[2], 0);; 362 bool no_rotate = test(rotate[0], 1) && test(rotate[1], 0) && test(rotate[2], 0) && test(rotate[3], 0) &&; 363 test(rotate[4], 1) && test(rotate[5], 0) && test(rotate[6], 0) && test(rotate[7], 0) &&; 364 test(rotate[8], 1);; 365 ; 366 if (no_scale && no_trans && no_rotate); 367 return;; 368 ; 369 if (no_scale && no_trans && !no_rotate) {; 370 is_rotate = true;; 371 } else if (no_scale && !no_trans && no_rotate) {; 372 is_translate = true;; 373 } else if (!no_scale && no_trans && no_rotate) {; 374 is_scale = true;; 375 }; 376 }; 377 ; 378 if (is_translate) {; 379 vect.resize(3);; 380 vect[0] = trans[0];; 381 vect[1] = trans[1];; 382 vect[2] = trans[2];; 383 return;; 384 }; 385 ; 386 if (is_scale) {; 387 vect.resize(4);; 388 vect[0] = scale[0];; 389 vect[1] = scale[1];; 390 vect[2] = scale[2];; 391 vect[3] = 1;; 392 return;; 393 }; 394 ; 395 if (is_rotate) {; 396 vect.resize(9);; 397 for (int n = 0; n < ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:9266,Testability,test,test,9266,"ck matrix into vector, which can be send to client; 334/// Following sizes can be used for vector:; 335/// 0 - Identity matrix; 336/// 3 - Translation; 337/// 4 - Scale (last element always 1); 338/// 9 - Rotation; 339/// 16 - Full size; 340 ; 341void RGeomDescription::PackMatrix(std::vector<float> &vect, TGeoMatrix *matr); 342{; 343 vect.clear();; 344 ; 345 if (!matr || matr->IsIdentity()); 346 return;; 347 ; 348 auto trans = matr->GetTranslation();; 349 auto scale = matr->GetScale();; 350 auto rotate = matr->GetRotationMatrix();; 351 ; 352 bool is_translate = matr->IsA() == TGeoTranslation::Class(), is_scale = matr->IsA() == TGeoScale::Class(),; 353 is_rotate = matr->IsA() == TGeoRotation::Class();; 354 ; 355 if (!is_translate && !is_scale && !is_rotate) {; 356 // check if trivial matrix; 357 ; 358 auto test = [](double val, double chk) { return (val == chk) || (TMath::Abs(val - chk) < 1e-20); };; 359 ; 360 bool no_scale = test(scale[0], 1) && test(scale[1], 1) && test(scale[2], 1);; 361 bool no_trans = test(trans[0], 0) && test(trans[1], 0) && test(trans[2], 0);; 362 bool no_rotate = test(rotate[0], 1) && test(rotate[1], 0) && test(rotate[2], 0) && test(rotate[3], 0) &&; 363 test(rotate[4], 1) && test(rotate[5], 0) && test(rotate[6], 0) && test(rotate[7], 0) &&; 364 test(rotate[8], 1);; 365 ; 366 if (no_scale && no_trans && no_rotate); 367 return;; 368 ; 369 if (no_scale && no_trans && !no_rotate) {; 370 is_rotate = true;; 371 } else if (no_scale && !no_trans && no_rotate) {; 372 is_translate = true;; 373 } else if (!no_scale && no_trans && no_rotate) {; 374 is_scale = true;; 375 }; 376 }; 377 ; 378 if (is_translate) {; 379 vect.resize(3);; 380 vect[0] = trans[0];; 381 vect[1] = trans[1];; 382 vect[2] = trans[2];; 383 return;; 384 }; 385 ; 386 if (is_scale) {; 387 vect.resize(4);; 388 vect[0] = scale[0];; 389 vect[1] = scale[1];; 390 vect[2] = scale[2];; 391 vect[3] = 1;; 392 return;; 393 }; 394 ; 395 if (is_rotate) {; 396 vect.resize(9);; 397 for (int n = 0; n < ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:9288,Testability,test,test,9288,"ck matrix into vector, which can be send to client; 334/// Following sizes can be used for vector:; 335/// 0 - Identity matrix; 336/// 3 - Translation; 337/// 4 - Scale (last element always 1); 338/// 9 - Rotation; 339/// 16 - Full size; 340 ; 341void RGeomDescription::PackMatrix(std::vector<float> &vect, TGeoMatrix *matr); 342{; 343 vect.clear();; 344 ; 345 if (!matr || matr->IsIdentity()); 346 return;; 347 ; 348 auto trans = matr->GetTranslation();; 349 auto scale = matr->GetScale();; 350 auto rotate = matr->GetRotationMatrix();; 351 ; 352 bool is_translate = matr->IsA() == TGeoTranslation::Class(), is_scale = matr->IsA() == TGeoScale::Class(),; 353 is_rotate = matr->IsA() == TGeoRotation::Class();; 354 ; 355 if (!is_translate && !is_scale && !is_rotate) {; 356 // check if trivial matrix; 357 ; 358 auto test = [](double val, double chk) { return (val == chk) || (TMath::Abs(val - chk) < 1e-20); };; 359 ; 360 bool no_scale = test(scale[0], 1) && test(scale[1], 1) && test(scale[2], 1);; 361 bool no_trans = test(trans[0], 0) && test(trans[1], 0) && test(trans[2], 0);; 362 bool no_rotate = test(rotate[0], 1) && test(rotate[1], 0) && test(rotate[2], 0) && test(rotate[3], 0) &&; 363 test(rotate[4], 1) && test(rotate[5], 0) && test(rotate[6], 0) && test(rotate[7], 0) &&; 364 test(rotate[8], 1);; 365 ; 366 if (no_scale && no_trans && no_rotate); 367 return;; 368 ; 369 if (no_scale && no_trans && !no_rotate) {; 370 is_rotate = true;; 371 } else if (no_scale && !no_trans && no_rotate) {; 372 is_translate = true;; 373 } else if (!no_scale && no_trans && no_rotate) {; 374 is_scale = true;; 375 }; 376 }; 377 ; 378 if (is_translate) {; 379 vect.resize(3);; 380 vect[0] = trans[0];; 381 vect[1] = trans[1];; 382 vect[2] = trans[2];; 383 return;; 384 }; 385 ; 386 if (is_scale) {; 387 vect.resize(4);; 388 vect[0] = scale[0];; 389 vect[1] = scale[1];; 390 vect[2] = scale[2];; 391 vect[3] = 1;; 392 return;; 393 }; 394 ; 395 if (is_rotate) {; 396 vect.resize(9);; 397 for (int n = 0; n < ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:9310,Testability,test,test,9310,"ck matrix into vector, which can be send to client; 334/// Following sizes can be used for vector:; 335/// 0 - Identity matrix; 336/// 3 - Translation; 337/// 4 - Scale (last element always 1); 338/// 9 - Rotation; 339/// 16 - Full size; 340 ; 341void RGeomDescription::PackMatrix(std::vector<float> &vect, TGeoMatrix *matr); 342{; 343 vect.clear();; 344 ; 345 if (!matr || matr->IsIdentity()); 346 return;; 347 ; 348 auto trans = matr->GetTranslation();; 349 auto scale = matr->GetScale();; 350 auto rotate = matr->GetRotationMatrix();; 351 ; 352 bool is_translate = matr->IsA() == TGeoTranslation::Class(), is_scale = matr->IsA() == TGeoScale::Class(),; 353 is_rotate = matr->IsA() == TGeoRotation::Class();; 354 ; 355 if (!is_translate && !is_scale && !is_rotate) {; 356 // check if trivial matrix; 357 ; 358 auto test = [](double val, double chk) { return (val == chk) || (TMath::Abs(val - chk) < 1e-20); };; 359 ; 360 bool no_scale = test(scale[0], 1) && test(scale[1], 1) && test(scale[2], 1);; 361 bool no_trans = test(trans[0], 0) && test(trans[1], 0) && test(trans[2], 0);; 362 bool no_rotate = test(rotate[0], 1) && test(rotate[1], 0) && test(rotate[2], 0) && test(rotate[3], 0) &&; 363 test(rotate[4], 1) && test(rotate[5], 0) && test(rotate[6], 0) && test(rotate[7], 0) &&; 364 test(rotate[8], 1);; 365 ; 366 if (no_scale && no_trans && no_rotate); 367 return;; 368 ; 369 if (no_scale && no_trans && !no_rotate) {; 370 is_rotate = true;; 371 } else if (no_scale && !no_trans && no_rotate) {; 372 is_translate = true;; 373 } else if (!no_scale && no_trans && no_rotate) {; 374 is_scale = true;; 375 }; 376 }; 377 ; 378 if (is_translate) {; 379 vect.resize(3);; 380 vect[0] = trans[0];; 381 vect[1] = trans[1];; 382 vect[2] = trans[2];; 383 return;; 384 }; 385 ; 386 if (is_scale) {; 387 vect.resize(4);; 388 vect[0] = scale[0];; 389 vect[1] = scale[1];; 390 vect[2] = scale[2];; 391 vect[3] = 1;; 392 return;; 393 }; 394 ; 395 if (is_rotate) {; 396 vect.resize(9);; 397 for (int n = 0; n < ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:9337,Testability,test,test,9337,"ck matrix into vector, which can be send to client; 334/// Following sizes can be used for vector:; 335/// 0 - Identity matrix; 336/// 3 - Translation; 337/// 4 - Scale (last element always 1); 338/// 9 - Rotation; 339/// 16 - Full size; 340 ; 341void RGeomDescription::PackMatrix(std::vector<float> &vect, TGeoMatrix *matr); 342{; 343 vect.clear();; 344 ; 345 if (!matr || matr->IsIdentity()); 346 return;; 347 ; 348 auto trans = matr->GetTranslation();; 349 auto scale = matr->GetScale();; 350 auto rotate = matr->GetRotationMatrix();; 351 ; 352 bool is_translate = matr->IsA() == TGeoTranslation::Class(), is_scale = matr->IsA() == TGeoScale::Class(),; 353 is_rotate = matr->IsA() == TGeoRotation::Class();; 354 ; 355 if (!is_translate && !is_scale && !is_rotate) {; 356 // check if trivial matrix; 357 ; 358 auto test = [](double val, double chk) { return (val == chk) || (TMath::Abs(val - chk) < 1e-20); };; 359 ; 360 bool no_scale = test(scale[0], 1) && test(scale[1], 1) && test(scale[2], 1);; 361 bool no_trans = test(trans[0], 0) && test(trans[1], 0) && test(trans[2], 0);; 362 bool no_rotate = test(rotate[0], 1) && test(rotate[1], 0) && test(rotate[2], 0) && test(rotate[3], 0) &&; 363 test(rotate[4], 1) && test(rotate[5], 0) && test(rotate[6], 0) && test(rotate[7], 0) &&; 364 test(rotate[8], 1);; 365 ; 366 if (no_scale && no_trans && no_rotate); 367 return;; 368 ; 369 if (no_scale && no_trans && !no_rotate) {; 370 is_rotate = true;; 371 } else if (no_scale && !no_trans && no_rotate) {; 372 is_translate = true;; 373 } else if (!no_scale && no_trans && no_rotate) {; 374 is_scale = true;; 375 }; 376 }; 377 ; 378 if (is_translate) {; 379 vect.resize(3);; 380 vect[0] = trans[0];; 381 vect[1] = trans[1];; 382 vect[2] = trans[2];; 383 return;; 384 }; 385 ; 386 if (is_scale) {; 387 vect.resize(4);; 388 vect[0] = scale[0];; 389 vect[1] = scale[1];; 390 vect[2] = scale[2];; 391 vect[3] = 1;; 392 return;; 393 }; 394 ; 395 if (is_rotate) {; 396 vect.resize(9);; 397 for (int n = 0; n < ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:9359,Testability,test,test,9359,"ck matrix into vector, which can be send to client; 334/// Following sizes can be used for vector:; 335/// 0 - Identity matrix; 336/// 3 - Translation; 337/// 4 - Scale (last element always 1); 338/// 9 - Rotation; 339/// 16 - Full size; 340 ; 341void RGeomDescription::PackMatrix(std::vector<float> &vect, TGeoMatrix *matr); 342{; 343 vect.clear();; 344 ; 345 if (!matr || matr->IsIdentity()); 346 return;; 347 ; 348 auto trans = matr->GetTranslation();; 349 auto scale = matr->GetScale();; 350 auto rotate = matr->GetRotationMatrix();; 351 ; 352 bool is_translate = matr->IsA() == TGeoTranslation::Class(), is_scale = matr->IsA() == TGeoScale::Class(),; 353 is_rotate = matr->IsA() == TGeoRotation::Class();; 354 ; 355 if (!is_translate && !is_scale && !is_rotate) {; 356 // check if trivial matrix; 357 ; 358 auto test = [](double val, double chk) { return (val == chk) || (TMath::Abs(val - chk) < 1e-20); };; 359 ; 360 bool no_scale = test(scale[0], 1) && test(scale[1], 1) && test(scale[2], 1);; 361 bool no_trans = test(trans[0], 0) && test(trans[1], 0) && test(trans[2], 0);; 362 bool no_rotate = test(rotate[0], 1) && test(rotate[1], 0) && test(rotate[2], 0) && test(rotate[3], 0) &&; 363 test(rotate[4], 1) && test(rotate[5], 0) && test(rotate[6], 0) && test(rotate[7], 0) &&; 364 test(rotate[8], 1);; 365 ; 366 if (no_scale && no_trans && no_rotate); 367 return;; 368 ; 369 if (no_scale && no_trans && !no_rotate) {; 370 is_rotate = true;; 371 } else if (no_scale && !no_trans && no_rotate) {; 372 is_translate = true;; 373 } else if (!no_scale && no_trans && no_rotate) {; 374 is_scale = true;; 375 }; 376 }; 377 ; 378 if (is_translate) {; 379 vect.resize(3);; 380 vect[0] = trans[0];; 381 vect[1] = trans[1];; 382 vect[2] = trans[2];; 383 return;; 384 }; 385 ; 386 if (is_scale) {; 387 vect.resize(4);; 388 vect[0] = scale[0];; 389 vect[1] = scale[1];; 390 vect[2] = scale[2];; 391 vect[3] = 1;; 392 return;; 393 }; 394 ; 395 if (is_rotate) {; 396 vect.resize(9);; 397 for (int n = 0; n < ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:9381,Testability,test,test,9381,"ck matrix into vector, which can be send to client; 334/// Following sizes can be used for vector:; 335/// 0 - Identity matrix; 336/// 3 - Translation; 337/// 4 - Scale (last element always 1); 338/// 9 - Rotation; 339/// 16 - Full size; 340 ; 341void RGeomDescription::PackMatrix(std::vector<float> &vect, TGeoMatrix *matr); 342{; 343 vect.clear();; 344 ; 345 if (!matr || matr->IsIdentity()); 346 return;; 347 ; 348 auto trans = matr->GetTranslation();; 349 auto scale = matr->GetScale();; 350 auto rotate = matr->GetRotationMatrix();; 351 ; 352 bool is_translate = matr->IsA() == TGeoTranslation::Class(), is_scale = matr->IsA() == TGeoScale::Class(),; 353 is_rotate = matr->IsA() == TGeoRotation::Class();; 354 ; 355 if (!is_translate && !is_scale && !is_rotate) {; 356 // check if trivial matrix; 357 ; 358 auto test = [](double val, double chk) { return (val == chk) || (TMath::Abs(val - chk) < 1e-20); };; 359 ; 360 bool no_scale = test(scale[0], 1) && test(scale[1], 1) && test(scale[2], 1);; 361 bool no_trans = test(trans[0], 0) && test(trans[1], 0) && test(trans[2], 0);; 362 bool no_rotate = test(rotate[0], 1) && test(rotate[1], 0) && test(rotate[2], 0) && test(rotate[3], 0) &&; 363 test(rotate[4], 1) && test(rotate[5], 0) && test(rotate[6], 0) && test(rotate[7], 0) &&; 364 test(rotate[8], 1);; 365 ; 366 if (no_scale && no_trans && no_rotate); 367 return;; 368 ; 369 if (no_scale && no_trans && !no_rotate) {; 370 is_rotate = true;; 371 } else if (no_scale && !no_trans && no_rotate) {; 372 is_translate = true;; 373 } else if (!no_scale && no_trans && no_rotate) {; 374 is_scale = true;; 375 }; 376 }; 377 ; 378 if (is_translate) {; 379 vect.resize(3);; 380 vect[0] = trans[0];; 381 vect[1] = trans[1];; 382 vect[2] = trans[2];; 383 return;; 384 }; 385 ; 386 if (is_scale) {; 387 vect.resize(4);; 388 vect[0] = scale[0];; 389 vect[1] = scale[1];; 390 vect[2] = scale[2];; 391 vect[3] = 1;; 392 return;; 393 }; 394 ; 395 if (is_rotate) {; 396 vect.resize(9);; 397 for (int n = 0; n < ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:9403,Testability,test,test,9403,"ck matrix into vector, which can be send to client; 334/// Following sizes can be used for vector:; 335/// 0 - Identity matrix; 336/// 3 - Translation; 337/// 4 - Scale (last element always 1); 338/// 9 - Rotation; 339/// 16 - Full size; 340 ; 341void RGeomDescription::PackMatrix(std::vector<float> &vect, TGeoMatrix *matr); 342{; 343 vect.clear();; 344 ; 345 if (!matr || matr->IsIdentity()); 346 return;; 347 ; 348 auto trans = matr->GetTranslation();; 349 auto scale = matr->GetScale();; 350 auto rotate = matr->GetRotationMatrix();; 351 ; 352 bool is_translate = matr->IsA() == TGeoTranslation::Class(), is_scale = matr->IsA() == TGeoScale::Class(),; 353 is_rotate = matr->IsA() == TGeoRotation::Class();; 354 ; 355 if (!is_translate && !is_scale && !is_rotate) {; 356 // check if trivial matrix; 357 ; 358 auto test = [](double val, double chk) { return (val == chk) || (TMath::Abs(val - chk) < 1e-20); };; 359 ; 360 bool no_scale = test(scale[0], 1) && test(scale[1], 1) && test(scale[2], 1);; 361 bool no_trans = test(trans[0], 0) && test(trans[1], 0) && test(trans[2], 0);; 362 bool no_rotate = test(rotate[0], 1) && test(rotate[1], 0) && test(rotate[2], 0) && test(rotate[3], 0) &&; 363 test(rotate[4], 1) && test(rotate[5], 0) && test(rotate[6], 0) && test(rotate[7], 0) &&; 364 test(rotate[8], 1);; 365 ; 366 if (no_scale && no_trans && no_rotate); 367 return;; 368 ; 369 if (no_scale && no_trans && !no_rotate) {; 370 is_rotate = true;; 371 } else if (no_scale && !no_trans && no_rotate) {; 372 is_translate = true;; 373 } else if (!no_scale && no_trans && no_rotate) {; 374 is_scale = true;; 375 }; 376 }; 377 ; 378 if (is_translate) {; 379 vect.resize(3);; 380 vect[0] = trans[0];; 381 vect[1] = trans[1];; 382 vect[2] = trans[2];; 383 return;; 384 }; 385 ; 386 if (is_scale) {; 387 vect.resize(4);; 388 vect[0] = scale[0];; 389 vect[1] = scale[1];; 390 vect[2] = scale[2];; 391 vect[3] = 1;; 392 return;; 393 }; 394 ; 395 if (is_rotate) {; 396 vect.resize(9);; 397 for (int n = 0; n < ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:9430,Testability,test,test,9430,"ck matrix into vector, which can be send to client; 334/// Following sizes can be used for vector:; 335/// 0 - Identity matrix; 336/// 3 - Translation; 337/// 4 - Scale (last element always 1); 338/// 9 - Rotation; 339/// 16 - Full size; 340 ; 341void RGeomDescription::PackMatrix(std::vector<float> &vect, TGeoMatrix *matr); 342{; 343 vect.clear();; 344 ; 345 if (!matr || matr->IsIdentity()); 346 return;; 347 ; 348 auto trans = matr->GetTranslation();; 349 auto scale = matr->GetScale();; 350 auto rotate = matr->GetRotationMatrix();; 351 ; 352 bool is_translate = matr->IsA() == TGeoTranslation::Class(), is_scale = matr->IsA() == TGeoScale::Class(),; 353 is_rotate = matr->IsA() == TGeoRotation::Class();; 354 ; 355 if (!is_translate && !is_scale && !is_rotate) {; 356 // check if trivial matrix; 357 ; 358 auto test = [](double val, double chk) { return (val == chk) || (TMath::Abs(val - chk) < 1e-20); };; 359 ; 360 bool no_scale = test(scale[0], 1) && test(scale[1], 1) && test(scale[2], 1);; 361 bool no_trans = test(trans[0], 0) && test(trans[1], 0) && test(trans[2], 0);; 362 bool no_rotate = test(rotate[0], 1) && test(rotate[1], 0) && test(rotate[2], 0) && test(rotate[3], 0) &&; 363 test(rotate[4], 1) && test(rotate[5], 0) && test(rotate[6], 0) && test(rotate[7], 0) &&; 364 test(rotate[8], 1);; 365 ; 366 if (no_scale && no_trans && no_rotate); 367 return;; 368 ; 369 if (no_scale && no_trans && !no_rotate) {; 370 is_rotate = true;; 371 } else if (no_scale && !no_trans && no_rotate) {; 372 is_translate = true;; 373 } else if (!no_scale && no_trans && no_rotate) {; 374 is_scale = true;; 375 }; 376 }; 377 ; 378 if (is_translate) {; 379 vect.resize(3);; 380 vect[0] = trans[0];; 381 vect[1] = trans[1];; 382 vect[2] = trans[2];; 383 return;; 384 }; 385 ; 386 if (is_scale) {; 387 vect.resize(4);; 388 vect[0] = scale[0];; 389 vect[1] = scale[1];; 390 vect[2] = scale[2];; 391 vect[3] = 1;; 392 return;; 393 }; 394 ; 395 if (is_rotate) {; 396 vect.resize(9);; 397 for (int n = 0; n < ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:11061,Testability,log,logic,11061,"400 }; 401 ; 402 vect.resize(16);; 403 vect[0] = rotate[0];; 404 vect[4] = rotate[1];; 405 vect[8] = rotate[2];; 406 vect[12] = trans[0];; 407 vect[1] = rotate[3];; 408 vect[5] = rotate[4];; 409 vect[9] = rotate[5];; 410 vect[13] = trans[1];; 411 vect[2] = rotate[6];; 412 vect[6] = rotate[7];; 413 vect[10] = rotate[8];; 414 vect[14] = trans[2];; 415 vect[3] = 0;; 416 vect[7] = 0;; 417 vect[11] = 0;; 418 vect[15] = 1;; 419}; 420 ; 421/////////////////////////////////////////////////////////////////////; 422/// Collect information about geometry hierarchy into flat list; 423/// like it done in JSROOT ClonedNodes.createClones; 424 ; 425void RGeomDescription::Build(TGeoManager *mgr, const std::string &volname); 426{; 427 ClearDescription();; 428 if (!mgr); 429 return;; 430 ; 431 TLockGuard lock(fMutex);; 432 ; 433 // by top node visibility always enabled and harm logic; 434 // later visibility can be controlled by other means; 435 // mgr->GetTopNode()->GetVolume()->SetVisibility(kFALSE);; 436 ; 437 int maxnodes = mgr->GetMaxVisNodes();; 438 ; 439 SetNSegments(mgr->GetNsegments());; 440 SetVisLevel(mgr->GetVisLevel());; 441 SetMaxVisNodes(maxnodes);; 442 SetMaxVisFaces((maxnodes > 5000 ? 5000 : (maxnodes < 1000 ? 1000 : maxnodes)) * 100);; 443 ; 444 auto topnode = mgr->GetTopNode();; 445 ; 446 BuildDescription(topnode, topnode->GetVolume());; 447 ; 448 if (!volname.empty()) {; 449 auto vol = mgr->GetVolume(volname.c_str());; 450 RGeomBrowserIter iter(*this);; 451 if (vol && (vol != topnode->GetVolume()) && iter.Navigate(vol)); 452 fSelectedStack = MakeStackByIds(iter.CurrentIds());; 453 }; 454}; 455 ; 456/////////////////////////////////////////////////////////////////////; 457/// Collect information about geometry from single volume; 458/// like it done in JSROOT ClonedNodes.createClones; 459 ; 460void RGeomDescription::Build(TGeoVolume *vol); 461{; 462 ClearDescription();; 463 if (!vol); 464 return;; 465 ; 466 TLockGuard lock(fMutex);; 467 ; 468 fDrawVolume = vol;; 469 ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:18380,Testability,log,logic,18380,"ll function for visible; 652 ; 653int RGeomDescription::ScanNodes(bool only_visible, int maxlvl, RGeomScanFunc_t func); 654{; 655 if (fDesc.empty()); 656 return 0;; 657 ; 658 std::vector<int> stack;; 659 stack.reserve(25); // reserve enough space for most use-cases; 660 int counter = 0;; 661 auto viter = fVisibility.begin();; 662 ; 663 using ScanFunc_t = std::function<int(int, int, bool)>;; 664 ; 665 ScanFunc_t scan_func = [&, this](int nodeid, int lvl, bool is_inside) {; 666 if (!is_inside && (fSelectedStack == stack)); 667 is_inside = true;; 668 ; 669 auto &desc = fDesc[nodeid];; 670 auto desc_vis = desc.vis;; 671 int res = 0;; 672 ; 673 if (desc.nochlds && (lvl > 0)); 674 lvl = 0;; 675 ; 676 bool can_display = desc.CanDisplay(), scan_childs = true;; 677 ; 678 if ((viter != fVisibility.end()) && (compare_stacks(viter->stack, stack) == 0)) {; 679 can_display = scan_childs = viter->visible;; 680 desc_vis = !viter->visible ? 0 : (!desc.chlds.empty() ? 1 : 99);; 681 viter++;; 682 }; 683 ; 684 // same logic as in JSROOT ClonedNodes.scanVisible; 685 bool is_visible = (lvl >= 0) && (desc_vis > lvl) && can_display && is_inside;; 686 ; 687 if (is_visible || !only_visible); 688 if (func(desc, stack, is_visible, counter)); 689 res++;; 690 ; 691 counter++; // count sequence id of current position in scan, will be used later for merging drawing lists; 692 ; 693 if ((!desc.chlds.empty()) && (((lvl > 0) && scan_childs) || !only_visible)) {; 694 auto pos = stack.size();; 695 stack.emplace_back(0);; 696 for (unsigned k = 0; k < desc.chlds.size(); ++k) {; 697 stack[pos] = k; // stack provides index in list of childs; 698 res += scan_func(desc.chlds[k], is_inside ? lvl - 1 : lvl, is_inside);; 699 }; 700 stack.pop_back();; 701 } else {; 702 counter += desc.idshift;; 703 }; 704 ; 705 return res;; 706 };; 707 ; 708 if (!maxlvl && (GetVisLevel() > 0)); 709 maxlvl = GetVisLevel();; 710 if (!maxlvl); 711 maxlvl = 4;; 712 if (maxlvl > 97); 713 maxlvl = 97; // check while vis property of no",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:43260,Testability,test,test,43260,"mDescription::IsPrincipalEndNode(int nodeid); 1395{; 1396 TLockGuard lock(fMutex);; 1397 ; 1398 if ((nodeid < 0) || (nodeid >= (int)fDesc.size())); 1399 return false;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406/////////////////////////////////////////////////////////////////////; 1407/// Search visible nodes for provided name; 1408/// If number of found elements less than 100, create description and shapes for them; 1409/// Returns number of match elements; 1410 ; 1411int RGeomDescription::SearchVisibles(const std::string &find, std::string &hjson, std::string &json); 1412{; 1413 TLockGuard lock(fMutex);; 1414 ; 1415 hjson.clear();; 1416 json.clear();; 1417 ; 1418 if (find.empty()) {; 1419 hjson = ""FOUND:RESET"";; 1420 return 0;; 1421 }; 1422 ; 1423 std::vector<int> nodescnt(fDesc.size(), 0), viscnt(fDesc.size(), 0);; 1424 ; 1425 int nmatches = 0;; 1426 std::string test = find;; 1427 int kind = 0;; 1428 if (test.compare(0, 2, ""c:"") == 0) {; 1429 test.erase(0, 2);; 1430 kind = 1;; 1431 } else if (test.compare(0, 2, ""m:"") == 0) {; 1432 test.erase(0, 2);; 1433 kind = 2;; 1434 }; 1435 ; 1436 TRegexp regexp(test.c_str());; 1437 ; 1438 auto match_func = [&regexp, kind](RGeomNode &node) {; 1439 return (node.vol > 0) && (TString(node.GetArg(kind)).Index(regexp) >= 0);; 1440 };; 1441 ; 1442 // first count how many times each individual node appears; 1443 ScanNodes(false, 0,; 1444 [&nodescnt, &viscnt, &match_func, &nmatches](RGeomNode &node, std::vector<int> &, bool is_vis, int) {; 1445 if (match_func(node)) {; 1446 nmatches++;; 1447 nodescnt[node.id]++;; 1448 if (is_vis); 1449 viscnt[node.id]++;; 1450 };; 1451 return true;; 1452 });; 1453 ; 1454 // do not send too much data, limit could be made configurable later; 1455 if (nmatches == 0) {; 1456 hjson = ""FOUND:NO"";; 1457 return nmatches;; 1458 }; 1459 ; 1460 if ((GetMaxVisNodes() > 0) && (nmatches >",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:43303,Testability,test,test,43303,"mDescription::IsPrincipalEndNode(int nodeid); 1395{; 1396 TLockGuard lock(fMutex);; 1397 ; 1398 if ((nodeid < 0) || (nodeid >= (int)fDesc.size())); 1399 return false;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406/////////////////////////////////////////////////////////////////////; 1407/// Search visible nodes for provided name; 1408/// If number of found elements less than 100, create description and shapes for them; 1409/// Returns number of match elements; 1410 ; 1411int RGeomDescription::SearchVisibles(const std::string &find, std::string &hjson, std::string &json); 1412{; 1413 TLockGuard lock(fMutex);; 1414 ; 1415 hjson.clear();; 1416 json.clear();; 1417 ; 1418 if (find.empty()) {; 1419 hjson = ""FOUND:RESET"";; 1420 return 0;; 1421 }; 1422 ; 1423 std::vector<int> nodescnt(fDesc.size(), 0), viscnt(fDesc.size(), 0);; 1424 ; 1425 int nmatches = 0;; 1426 std::string test = find;; 1427 int kind = 0;; 1428 if (test.compare(0, 2, ""c:"") == 0) {; 1429 test.erase(0, 2);; 1430 kind = 1;; 1431 } else if (test.compare(0, 2, ""m:"") == 0) {; 1432 test.erase(0, 2);; 1433 kind = 2;; 1434 }; 1435 ; 1436 TRegexp regexp(test.c_str());; 1437 ; 1438 auto match_func = [&regexp, kind](RGeomNode &node) {; 1439 return (node.vol > 0) && (TString(node.GetArg(kind)).Index(regexp) >= 0);; 1440 };; 1441 ; 1442 // first count how many times each individual node appears; 1443 ScanNodes(false, 0,; 1444 [&nodescnt, &viscnt, &match_func, &nmatches](RGeomNode &node, std::vector<int> &, bool is_vis, int) {; 1445 if (match_func(node)) {; 1446 nmatches++;; 1447 nodescnt[node.id]++;; 1448 if (is_vis); 1449 viscnt[node.id]++;; 1450 };; 1451 return true;; 1452 });; 1453 ; 1454 // do not send too much data, limit could be made configurable later; 1455 if (nmatches == 0) {; 1456 hjson = ""FOUND:NO"";; 1457 return nmatches;; 1458 }; 1459 ; 1460 if ((GetMaxVisNodes() > 0) && (nmatches >",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:43342,Testability,test,test,43342,"fMutex);; 1397 ; 1398 if ((nodeid < 0) || (nodeid >= (int)fDesc.size())); 1399 return false;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406/////////////////////////////////////////////////////////////////////; 1407/// Search visible nodes for provided name; 1408/// If number of found elements less than 100, create description and shapes for them; 1409/// Returns number of match elements; 1410 ; 1411int RGeomDescription::SearchVisibles(const std::string &find, std::string &hjson, std::string &json); 1412{; 1413 TLockGuard lock(fMutex);; 1414 ; 1415 hjson.clear();; 1416 json.clear();; 1417 ; 1418 if (find.empty()) {; 1419 hjson = ""FOUND:RESET"";; 1420 return 0;; 1421 }; 1422 ; 1423 std::vector<int> nodescnt(fDesc.size(), 0), viscnt(fDesc.size(), 0);; 1424 ; 1425 int nmatches = 0;; 1426 std::string test = find;; 1427 int kind = 0;; 1428 if (test.compare(0, 2, ""c:"") == 0) {; 1429 test.erase(0, 2);; 1430 kind = 1;; 1431 } else if (test.compare(0, 2, ""m:"") == 0) {; 1432 test.erase(0, 2);; 1433 kind = 2;; 1434 }; 1435 ; 1436 TRegexp regexp(test.c_str());; 1437 ; 1438 auto match_func = [&regexp, kind](RGeomNode &node) {; 1439 return (node.vol > 0) && (TString(node.GetArg(kind)).Index(regexp) >= 0);; 1440 };; 1441 ; 1442 // first count how many times each individual node appears; 1443 ScanNodes(false, 0,; 1444 [&nodescnt, &viscnt, &match_func, &nmatches](RGeomNode &node, std::vector<int> &, bool is_vis, int) {; 1445 if (match_func(node)) {; 1446 nmatches++;; 1447 nodescnt[node.id]++;; 1448 if (is_vis); 1449 viscnt[node.id]++;; 1450 };; 1451 return true;; 1452 });; 1453 ; 1454 // do not send too much data, limit could be made configurable later; 1455 if (nmatches == 0) {; 1456 hjson = ""FOUND:NO"";; 1457 return nmatches;; 1458 }; 1459 ; 1460 if ((GetMaxVisNodes() > 0) && (nmatches > 10 * GetMaxVisNodes())) {; 1461 hjson = ""FOUND:Too many "" + std::to_strin",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:43393,Testability,test,test,43393,"deid >= (int)fDesc.size())); 1399 return false;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406/////////////////////////////////////////////////////////////////////; 1407/// Search visible nodes for provided name; 1408/// If number of found elements less than 100, create description and shapes for them; 1409/// Returns number of match elements; 1410 ; 1411int RGeomDescription::SearchVisibles(const std::string &find, std::string &hjson, std::string &json); 1412{; 1413 TLockGuard lock(fMutex);; 1414 ; 1415 hjson.clear();; 1416 json.clear();; 1417 ; 1418 if (find.empty()) {; 1419 hjson = ""FOUND:RESET"";; 1420 return 0;; 1421 }; 1422 ; 1423 std::vector<int> nodescnt(fDesc.size(), 0), viscnt(fDesc.size(), 0);; 1424 ; 1425 int nmatches = 0;; 1426 std::string test = find;; 1427 int kind = 0;; 1428 if (test.compare(0, 2, ""c:"") == 0) {; 1429 test.erase(0, 2);; 1430 kind = 1;; 1431 } else if (test.compare(0, 2, ""m:"") == 0) {; 1432 test.erase(0, 2);; 1433 kind = 2;; 1434 }; 1435 ; 1436 TRegexp regexp(test.c_str());; 1437 ; 1438 auto match_func = [&regexp, kind](RGeomNode &node) {; 1439 return (node.vol > 0) && (TString(node.GetArg(kind)).Index(regexp) >= 0);; 1440 };; 1441 ; 1442 // first count how many times each individual node appears; 1443 ScanNodes(false, 0,; 1444 [&nodescnt, &viscnt, &match_func, &nmatches](RGeomNode &node, std::vector<int> &, bool is_vis, int) {; 1445 if (match_func(node)) {; 1446 nmatches++;; 1447 nodescnt[node.id]++;; 1448 if (is_vis); 1449 viscnt[node.id]++;; 1450 };; 1451 return true;; 1452 });; 1453 ; 1454 // do not send too much data, limit could be made configurable later; 1455 if (nmatches == 0) {; 1456 hjson = ""FOUND:NO"";; 1457 return nmatches;; 1458 }; 1459 ; 1460 if ((GetMaxVisNodes() > 0) && (nmatches > 10 * GetMaxVisNodes())) {; 1461 hjson = ""FOUND:Too many "" + std::to_string(nmatches);; 1462 return nmatches;; 1463 }; ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:43432,Testability,test,test,43432,"e;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406/////////////////////////////////////////////////////////////////////; 1407/// Search visible nodes for provided name; 1408/// If number of found elements less than 100, create description and shapes for them; 1409/// Returns number of match elements; 1410 ; 1411int RGeomDescription::SearchVisibles(const std::string &find, std::string &hjson, std::string &json); 1412{; 1413 TLockGuard lock(fMutex);; 1414 ; 1415 hjson.clear();; 1416 json.clear();; 1417 ; 1418 if (find.empty()) {; 1419 hjson = ""FOUND:RESET"";; 1420 return 0;; 1421 }; 1422 ; 1423 std::vector<int> nodescnt(fDesc.size(), 0), viscnt(fDesc.size(), 0);; 1424 ; 1425 int nmatches = 0;; 1426 std::string test = find;; 1427 int kind = 0;; 1428 if (test.compare(0, 2, ""c:"") == 0) {; 1429 test.erase(0, 2);; 1430 kind = 1;; 1431 } else if (test.compare(0, 2, ""m:"") == 0) {; 1432 test.erase(0, 2);; 1433 kind = 2;; 1434 }; 1435 ; 1436 TRegexp regexp(test.c_str());; 1437 ; 1438 auto match_func = [&regexp, kind](RGeomNode &node) {; 1439 return (node.vol > 0) && (TString(node.GetArg(kind)).Index(regexp) >= 0);; 1440 };; 1441 ; 1442 // first count how many times each individual node appears; 1443 ScanNodes(false, 0,; 1444 [&nodescnt, &viscnt, &match_func, &nmatches](RGeomNode &node, std::vector<int> &, bool is_vis, int) {; 1445 if (match_func(node)) {; 1446 nmatches++;; 1447 nodescnt[node.id]++;; 1448 if (is_vis); 1449 viscnt[node.id]++;; 1450 };; 1451 return true;; 1452 });; 1453 ; 1454 // do not send too much data, limit could be made configurable later; 1455 if (nmatches == 0) {; 1456 hjson = ""FOUND:NO"";; 1457 return nmatches;; 1458 }; 1459 ; 1460 if ((GetMaxVisNodes() > 0) && (nmatches > 10 * GetMaxVisNodes())) {; 1461 hjson = ""FOUND:Too many "" + std::to_string(nmatches);; 1462 return nmatches;; 1463 }; 1464 ; 1465 // now build all necessary shapes",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:43502,Testability,test,test,43502,"3 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406/////////////////////////////////////////////////////////////////////; 1407/// Search visible nodes for provided name; 1408/// If number of found elements less than 100, create description and shapes for them; 1409/// Returns number of match elements; 1410 ; 1411int RGeomDescription::SearchVisibles(const std::string &find, std::string &hjson, std::string &json); 1412{; 1413 TLockGuard lock(fMutex);; 1414 ; 1415 hjson.clear();; 1416 json.clear();; 1417 ; 1418 if (find.empty()) {; 1419 hjson = ""FOUND:RESET"";; 1420 return 0;; 1421 }; 1422 ; 1423 std::vector<int> nodescnt(fDesc.size(), 0), viscnt(fDesc.size(), 0);; 1424 ; 1425 int nmatches = 0;; 1426 std::string test = find;; 1427 int kind = 0;; 1428 if (test.compare(0, 2, ""c:"") == 0) {; 1429 test.erase(0, 2);; 1430 kind = 1;; 1431 } else if (test.compare(0, 2, ""m:"") == 0) {; 1432 test.erase(0, 2);; 1433 kind = 2;; 1434 }; 1435 ; 1436 TRegexp regexp(test.c_str());; 1437 ; 1438 auto match_func = [&regexp, kind](RGeomNode &node) {; 1439 return (node.vol > 0) && (TString(node.GetArg(kind)).Index(regexp) >= 0);; 1440 };; 1441 ; 1442 // first count how many times each individual node appears; 1443 ScanNodes(false, 0,; 1444 [&nodescnt, &viscnt, &match_func, &nmatches](RGeomNode &node, std::vector<int> &, bool is_vis, int) {; 1445 if (match_func(node)) {; 1446 nmatches++;; 1447 nodescnt[node.id]++;; 1448 if (is_vis); 1449 viscnt[node.id]++;; 1450 };; 1451 return true;; 1452 });; 1453 ; 1454 // do not send too much data, limit could be made configurable later; 1455 if (nmatches == 0) {; 1456 hjson = ""FOUND:NO"";; 1457 return nmatches;; 1458 }; 1459 ; 1460 if ((GetMaxVisNodes() > 0) && (nmatches > 10 * GetMaxVisNodes())) {; 1461 hjson = ""FOUND:Too many "" + std::to_string(nmatches);; 1462 return nmatches;; 1463 }; 1464 ; 1465 // now build all necessary shapes and check number of faces - not too many; 1466 ; 1467",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:57085,Testability,log,logical,57085,"d element; 1848/// Returns true if changes was performed; 1849 ; 1850bool RGeomDescription::ChangeNodeVisibility(const std::vector<std::string> &path, bool selected); 1851{; 1852 TLockGuard lock(fMutex);; 1853 ; 1854 RGeomBrowserIter giter(*this);; 1855 if (!giter.Navigate(path)); 1856 return false;; 1857 ; 1858 auto nodeid = giter.GetNodeId();; 1859 ; 1860 auto &dnode = fDesc[nodeid];; 1861 ; 1862 auto vol = GetVolume(nodeid);; 1863 ; 1864 // nothing changed; 1865 if (vol->IsVisible() == selected); 1866 return false;; 1867 ; 1868 dnode.vis = selected ? 99 : 0;; 1869 vol->SetVisibility(selected);; 1870 if (!dnode.chlds.empty()) {; 1871 if (selected); 1872 dnode.vis = 1; // visibility disabled when any child; 1873 vol->SetVisDaughters(selected);; 1874 }; 1875 ; 1876 int id = 0;; 1877 for (auto &desc : fDesc); 1878 if (GetVolume(id++) == vol); 1879 desc.vis = dnode.vis;; 1880 ; 1881 auto stack = MakeStackByIds(giter.CurrentIds());; 1882 ; 1883 // any change in logical node visibility erase individual physical node settings; 1884 for (auto iter = fVisibility.begin(); iter != fVisibility.end(); iter++); 1885 if (compare_stacks(iter->stack, stack) == 0) {; 1886 fVisibility.erase(iter);; 1887 break;; 1888 }; 1889 ; 1890 ClearDrawData(); // after change raw data is no longer valid; 1891 ; 1892 return true;; 1893}; 1894 ; 1895/////////////////////////////////////////////////////////////////////////////////; 1896/// Change visibility for specified element; 1897/// Returns true if changes was performed; 1898 ; 1899std::unique_ptr<RGeomNodeInfo> RGeomDescription::MakeNodeInfo(const std::vector<int> &stack); 1900{; 1901 auto path = MakePathByStack(stack);; 1902 ; 1903 TLockGuard lock(fMutex);; 1904 ; 1905 std::unique_ptr<RGeomNodeInfo> res;; 1906 ; 1907 RGeomBrowserIter iter(*this);; 1908 ; 1909 if (iter.Navigate(path)) {; 1910 ; 1911 auto node = fNodes[iter.GetNodeId()];; 1912 ; 1913 auto &desc = fDesc[iter.GetNodeId()];; 1914 ; 1915 res = std::make_unique<RGeomNodeInfo>();; 1",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:69365,Testability,log,log,69365,"om_t Atom_t Time_t UChar_t lenDefinition TGWin32VirtualXProxy.cxx:249; funcsOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void funcsDefinition TGWin32VirtualXProxy.cxx:142; fsOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize fsDefinition TGWin32VirtualXProxy.cxx:102; namechar name[80]Definition TGX11.cxx:110; TGeoBBox.h; TGeoBoolNode.h; TGeoCompositeShape.h; TGeoCone.h; TGeoEltu.h; TGeoHype.h; TGeoManager.h; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; TGeoMaterial.h; TGeoMatrix.h; TGeoMedium.h; TGeoNode.h; TGeoParaboloid.h; TGeoPcon.h; TGeoPgon.h; TGeoScaledShape.h; TGeoSphere.h; TGeoTessellated.h; TGeoTorus.h; TGeoTube.h; TGeoVolume.h; TGeoXtru.h; TMath.h; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; TRegexp.h; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; ROOT::RBrowserReplyReply on browser request.Definition RBrowserReply.hxx:27; ROOT::RBrowserReply::pathstd::vector< std::string > pathreply pathDefinition RBrowserReply.hxx:29; ROOT::RBrowserReply::nodesstd::vector< const Browsable::RItem * > nodeslist of pointers, no ownership!Definition RBrowserReply.hxx:32; ROOT::RBrowserReply::firstint firstfirst node in returned listDefinition RBrowserReply.hxx:31; ROOT::RBrowserReply::nchildsint nchildstotal number of childs in the nodeDefinition RBrowserReply.hxx:30; ROOT::RGeomBrowserIterIterator of hierarchical geometry structures.Definition RGeomData.cxx:60; ROOT::RGeomBrowserIter::Enterbool Enter()Definition RGeomData.cxx:89; ROOT::RGeomBrowserIter::Leavebool Leave()Definition RGeomData.cxx:111; ROOT::RGeomBrowserIter::RGeomBrowserIterRGeomBrowserIter(RGeomDescription &desc)Definition RGeomData.cxx:71; ROOT::RGeomBrowserIter::fNodeIdint fNodeIdDefinition RGeomData.cxx:65; ROOT::",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:4051,Usability,clear,clear,4051," = fNodeId;; 106 fChild = 0;; 107 fNodeId = node.chlds[fChild];; 108 return true;; 109 }; 110 ; 111 bool Leave(); 112 {; 113 if (fStackParents.empty()) {; 114 fNodeId = -1;; 115 return false;; 116 }; 117 fParentId = fStackParents.back();; 118 fChild = fStackChilds.back();; 119 ; 120 fStackParents.pop_back();; 121 fStackChilds.pop_back();; 122 ; 123 if (fParentId < 0) {; 124 fNodeId = 0;; 125 } else {; 126 fNodeId = fDesc.fDesc[fParentId].chlds[fChild];; 127 }; 128 return true;; 129 }; 130 ; 131 bool Next(); 132 {; 133 // does not have parents; 134 if ((fNodeId <= 0) || (fParentId < 0)) {; 135 Reset();; 136 return false;; 137 }; 138 ; 139 auto &prnt = fDesc.fDesc[fParentId];; 140 if (++fChild >= prnt.chlds.size()) {; 141 fNodeId = -1; // not valid node, only Leave can be called; 142 return false;; 143 }; 144 ; 145 fNodeId = prnt.chlds[fChild];; 146 return true;; 147 }; 148 ; 149 bool Reset(); 150 {; 151 fParentId = -1;; 152 fNodeId = -1;; 153 fChild = 0;; 154 fStackParents.clear();; 155 fStackChilds.clear();; 156 ; 157 return true;; 158 }; 159 ; 160 bool NextNode(); 161 {; 162 if (Enter()); 163 return true;; 164 ; 165 if (Next()); 166 return true;; 167 ; 168 while (Leave()) {; 169 if (Next()); 170 return true;; 171 }; 172 ; 173 return false;; 174 }; 175 ; 176 /** Navigate to specified path - path specified as string and should start with ""/"" */; 177 bool Navigate(const std::string &path); 178 {; 179 size_t pos = path.find('/');; 180 if (pos != 0); 181 return false;; 182 ; 183 Reset(); // set to the top of element; 184 ; 185 while (++pos < path.length()) {; 186 auto last = pos;; 187 ; 188 pos = path.find('/', last);; 189 ; 190 if (pos == std::string::npos); 191 pos = path.length();; 192 ; 193 std::string folder = path.substr(last, pos - last);; 194 ; 195 if (!Enter()); 196 return false;; 197 ; 198 bool find = false;; 199 ; 200 do {; 201 find = (folder.compare(GetName()) == 0);; 202 } while (!find && Next());; 203 ; 204 if (!find); 205 return false;; 206 }; 207 ; 208 re",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:4078,Usability,clear,clear,4078,"ts.back();; 118 fChild = fStackChilds.back();; 119 ; 120 fStackParents.pop_back();; 121 fStackChilds.pop_back();; 122 ; 123 if (fParentId < 0) {; 124 fNodeId = 0;; 125 } else {; 126 fNodeId = fDesc.fDesc[fParentId].chlds[fChild];; 127 }; 128 return true;; 129 }; 130 ; 131 bool Next(); 132 {; 133 // does not have parents; 134 if ((fNodeId <= 0) || (fParentId < 0)) {; 135 Reset();; 136 return false;; 137 }; 138 ; 139 auto &prnt = fDesc.fDesc[fParentId];; 140 if (++fChild >= prnt.chlds.size()) {; 141 fNodeId = -1; // not valid node, only Leave can be called; 142 return false;; 143 }; 144 ; 145 fNodeId = prnt.chlds[fChild];; 146 return true;; 147 }; 148 ; 149 bool Reset(); 150 {; 151 fParentId = -1;; 152 fNodeId = -1;; 153 fChild = 0;; 154 fStackParents.clear();; 155 fStackChilds.clear();; 156 ; 157 return true;; 158 }; 159 ; 160 bool NextNode(); 161 {; 162 if (Enter()); 163 return true;; 164 ; 165 if (Next()); 166 return true;; 167 ; 168 while (Leave()) {; 169 if (Next()); 170 return true;; 171 }; 172 ; 173 return false;; 174 }; 175 ; 176 /** Navigate to specified path - path specified as string and should start with ""/"" */; 177 bool Navigate(const std::string &path); 178 {; 179 size_t pos = path.find('/');; 180 if (pos != 0); 181 return false;; 182 ; 183 Reset(); // set to the top of element; 184 ; 185 while (++pos < path.length()) {; 186 auto last = pos;; 187 ; 188 pos = path.find('/', last);; 189 ; 190 if (pos == std::string::npos); 191 pos = path.length();; 192 ; 193 std::string folder = path.substr(last, pos - last);; 194 ; 195 if (!Enter()); 196 return false;; 197 ; 198 bool find = false;; 199 ; 200 do {; 201 find = (folder.compare(GetName()) == 0);; 202 } while (!find && Next());; 203 ; 204 if (!find); 205 return false;; 206 }; 207 ; 208 return true;; 209 }; 210 ; 211 /** Navigate to specified path */; 212 bool Navigate(const std::vector<std::string> &path); 213 {; 214 Reset(); // set to the top of element; 215 ; 216 for (auto &folder : path) {; 217 ; 218 if (!E",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:8481,Usability,clear,clear,8481,"ck matrix into vector, which can be send to client; 334/// Following sizes can be used for vector:; 335/// 0 - Identity matrix; 336/// 3 - Translation; 337/// 4 - Scale (last element always 1); 338/// 9 - Rotation; 339/// 16 - Full size; 340 ; 341void RGeomDescription::PackMatrix(std::vector<float> &vect, TGeoMatrix *matr); 342{; 343 vect.clear();; 344 ; 345 if (!matr || matr->IsIdentity()); 346 return;; 347 ; 348 auto trans = matr->GetTranslation();; 349 auto scale = matr->GetScale();; 350 auto rotate = matr->GetRotationMatrix();; 351 ; 352 bool is_translate = matr->IsA() == TGeoTranslation::Class(), is_scale = matr->IsA() == TGeoScale::Class(),; 353 is_rotate = matr->IsA() == TGeoRotation::Class();; 354 ; 355 if (!is_translate && !is_scale && !is_rotate) {; 356 // check if trivial matrix; 357 ; 358 auto test = [](double val, double chk) { return (val == chk) || (TMath::Abs(val - chk) < 1e-20); };; 359 ; 360 bool no_scale = test(scale[0], 1) && test(scale[1], 1) && test(scale[2], 1);; 361 bool no_trans = test(trans[0], 0) && test(trans[1], 0) && test(trans[2], 0);; 362 bool no_rotate = test(rotate[0], 1) && test(rotate[1], 0) && test(rotate[2], 0) && test(rotate[3], 0) &&; 363 test(rotate[4], 1) && test(rotate[5], 0) && test(rotate[6], 0) && test(rotate[7], 0) &&; 364 test(rotate[8], 1);; 365 ; 366 if (no_scale && no_trans && no_rotate); 367 return;; 368 ; 369 if (no_scale && no_trans && !no_rotate) {; 370 is_rotate = true;; 371 } else if (no_scale && !no_trans && no_rotate) {; 372 is_translate = true;; 373 } else if (!no_scale && no_trans && no_rotate) {; 374 is_scale = true;; 375 }; 376 }; 377 ; 378 if (is_translate) {; 379 vect.resize(3);; 380 vect[0] = trans[0];; 381 vect[1] = trans[1];; 382 vect[2] = trans[2];; 383 return;; 384 }; 385 ; 386 if (is_scale) {; 387 vect.resize(4);; 388 vect[0] = scale[0];; 389 vect[1] = scale[1];; 390 vect[2] = scale[2];; 391 vect[3] = 1;; 392 return;; 393 }; 394 ; 395 if (is_rotate) {; 396 vect.resize(9);; 397 for (int n = 0; n < ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:12211,Usability,clear,clear,12211,"42 SetMaxVisFaces((maxnodes > 5000 ? 5000 : (maxnodes < 1000 ? 1000 : maxnodes)) * 100);; 443 ; 444 auto topnode = mgr->GetTopNode();; 445 ; 446 BuildDescription(topnode, topnode->GetVolume());; 447 ; 448 if (!volname.empty()) {; 449 auto vol = mgr->GetVolume(volname.c_str());; 450 RGeomBrowserIter iter(*this);; 451 if (vol && (vol != topnode->GetVolume()) && iter.Navigate(vol)); 452 fSelectedStack = MakeStackByIds(iter.CurrentIds());; 453 }; 454}; 455 ; 456/////////////////////////////////////////////////////////////////////; 457/// Collect information about geometry from single volume; 458/// like it done in JSROOT ClonedNodes.createClones; 459 ; 460void RGeomDescription::Build(TGeoVolume *vol); 461{; 462 ClearDescription();; 463 if (!vol); 464 return;; 465 ; 466 TLockGuard lock(fMutex);; 467 ; 468 fDrawVolume = vol;; 469 ; 470 fSelectedStack.clear();; 471 ; 472 BuildDescription(nullptr, fDrawVolume);; 473}; 474 ; 475/////////////////////////////////////////////////////////////////////; 476/// Clear geometry description; 477 ; 478void RGeomDescription::ClearDescription(); 479{; 480 TLockGuard lock(fMutex);; 481 ; 482 fDesc.clear();; 483 fNodes.clear();; 484 fSortMap.clear();; 485 ClearDrawData();; 486 fDrawIdCut = 0;; 487 fDrawVolume = nullptr;; 488 fSelectedStack.clear();; 489}; 490 ; 491/////////////////////////////////////////////////////////////////////; 492/// Build geometry description; 493 ; 494void RGeomDescription::BuildDescription(TGeoNode *topnode, TGeoVolume *topvolume); 495{; 496 // vector to remember numbers; 497 std::vector<int> numbers;; 498 int offset = 1000000000;; 499 ; 500 // try to build flat list of all nodes; 501 TGeoNode *snode = topnode;; 502 TGeoIterator iter(topvolume);; 503 do {; 504 if (!snode) {; 505 numbers.emplace_back(offset);; 506 fNodes.emplace_back(nullptr);; 507 } else if (snode->GetNumber() >= offset) {; 508 // artificial offset already applied, used as identifier; 509 iter.Skip(); // no need to look inside; 510 } else {; 511 ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:12497,Usability,clear,clear,12497,"cription(topnode, topnode->GetVolume());; 447 ; 448 if (!volname.empty()) {; 449 auto vol = mgr->GetVolume(volname.c_str());; 450 RGeomBrowserIter iter(*this);; 451 if (vol && (vol != topnode->GetVolume()) && iter.Navigate(vol)); 452 fSelectedStack = MakeStackByIds(iter.CurrentIds());; 453 }; 454}; 455 ; 456/////////////////////////////////////////////////////////////////////; 457/// Collect information about geometry from single volume; 458/// like it done in JSROOT ClonedNodes.createClones; 459 ; 460void RGeomDescription::Build(TGeoVolume *vol); 461{; 462 ClearDescription();; 463 if (!vol); 464 return;; 465 ; 466 TLockGuard lock(fMutex);; 467 ; 468 fDrawVolume = vol;; 469 ; 470 fSelectedStack.clear();; 471 ; 472 BuildDescription(nullptr, fDrawVolume);; 473}; 474 ; 475/////////////////////////////////////////////////////////////////////; 476/// Clear geometry description; 477 ; 478void RGeomDescription::ClearDescription(); 479{; 480 TLockGuard lock(fMutex);; 481 ; 482 fDesc.clear();; 483 fNodes.clear();; 484 fSortMap.clear();; 485 ClearDrawData();; 486 fDrawIdCut = 0;; 487 fDrawVolume = nullptr;; 488 fSelectedStack.clear();; 489}; 490 ; 491/////////////////////////////////////////////////////////////////////; 492/// Build geometry description; 493 ; 494void RGeomDescription::BuildDescription(TGeoNode *topnode, TGeoVolume *topvolume); 495{; 496 // vector to remember numbers; 497 std::vector<int> numbers;; 498 int offset = 1000000000;; 499 ; 500 // try to build flat list of all nodes; 501 TGeoNode *snode = topnode;; 502 TGeoIterator iter(topvolume);; 503 do {; 504 if (!snode) {; 505 numbers.emplace_back(offset);; 506 fNodes.emplace_back(nullptr);; 507 } else if (snode->GetNumber() >= offset) {; 508 // artificial offset already applied, used as identifier; 509 iter.Skip(); // no need to look inside; 510 } else {; 511 numbers.emplace_back(snode->GetNumber());; 512 snode->SetNumber(offset + fNodes.size()); // use id with shift 1e9; 513 fNodes.emplace_back(snode);; 514 };",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:12518,Usability,clear,clear,12518,"ode->GetVolume());; 447 ; 448 if (!volname.empty()) {; 449 auto vol = mgr->GetVolume(volname.c_str());; 450 RGeomBrowserIter iter(*this);; 451 if (vol && (vol != topnode->GetVolume()) && iter.Navigate(vol)); 452 fSelectedStack = MakeStackByIds(iter.CurrentIds());; 453 }; 454}; 455 ; 456/////////////////////////////////////////////////////////////////////; 457/// Collect information about geometry from single volume; 458/// like it done in JSROOT ClonedNodes.createClones; 459 ; 460void RGeomDescription::Build(TGeoVolume *vol); 461{; 462 ClearDescription();; 463 if (!vol); 464 return;; 465 ; 466 TLockGuard lock(fMutex);; 467 ; 468 fDrawVolume = vol;; 469 ; 470 fSelectedStack.clear();; 471 ; 472 BuildDescription(nullptr, fDrawVolume);; 473}; 474 ; 475/////////////////////////////////////////////////////////////////////; 476/// Clear geometry description; 477 ; 478void RGeomDescription::ClearDescription(); 479{; 480 TLockGuard lock(fMutex);; 481 ; 482 fDesc.clear();; 483 fNodes.clear();; 484 fSortMap.clear();; 485 ClearDrawData();; 486 fDrawIdCut = 0;; 487 fDrawVolume = nullptr;; 488 fSelectedStack.clear();; 489}; 490 ; 491/////////////////////////////////////////////////////////////////////; 492/// Build geometry description; 493 ; 494void RGeomDescription::BuildDescription(TGeoNode *topnode, TGeoVolume *topvolume); 495{; 496 // vector to remember numbers; 497 std::vector<int> numbers;; 498 int offset = 1000000000;; 499 ; 500 // try to build flat list of all nodes; 501 TGeoNode *snode = topnode;; 502 TGeoIterator iter(topvolume);; 503 do {; 504 if (!snode) {; 505 numbers.emplace_back(offset);; 506 fNodes.emplace_back(nullptr);; 507 } else if (snode->GetNumber() >= offset) {; 508 // artificial offset already applied, used as identifier; 509 iter.Skip(); // no need to look inside; 510 } else {; 511 numbers.emplace_back(snode->GetNumber());; 512 snode->SetNumber(offset + fNodes.size()); // use id with shift 1e9; 513 fNodes.emplace_back(snode);; 514 }; 515 } while ((snode =",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:12541,Usability,clear,clear,12541,"o vol = mgr->GetVolume(volname.c_str());; 450 RGeomBrowserIter iter(*this);; 451 if (vol && (vol != topnode->GetVolume()) && iter.Navigate(vol)); 452 fSelectedStack = MakeStackByIds(iter.CurrentIds());; 453 }; 454}; 455 ; 456/////////////////////////////////////////////////////////////////////; 457/// Collect information about geometry from single volume; 458/// like it done in JSROOT ClonedNodes.createClones; 459 ; 460void RGeomDescription::Build(TGeoVolume *vol); 461{; 462 ClearDescription();; 463 if (!vol); 464 return;; 465 ; 466 TLockGuard lock(fMutex);; 467 ; 468 fDrawVolume = vol;; 469 ; 470 fSelectedStack.clear();; 471 ; 472 BuildDescription(nullptr, fDrawVolume);; 473}; 474 ; 475/////////////////////////////////////////////////////////////////////; 476/// Clear geometry description; 477 ; 478void RGeomDescription::ClearDescription(); 479{; 480 TLockGuard lock(fMutex);; 481 ; 482 fDesc.clear();; 483 fNodes.clear();; 484 fSortMap.clear();; 485 ClearDrawData();; 486 fDrawIdCut = 0;; 487 fDrawVolume = nullptr;; 488 fSelectedStack.clear();; 489}; 490 ; 491/////////////////////////////////////////////////////////////////////; 492/// Build geometry description; 493 ; 494void RGeomDescription::BuildDescription(TGeoNode *topnode, TGeoVolume *topvolume); 495{; 496 // vector to remember numbers; 497 std::vector<int> numbers;; 498 int offset = 1000000000;; 499 ; 500 // try to build flat list of all nodes; 501 TGeoNode *snode = topnode;; 502 TGeoIterator iter(topvolume);; 503 do {; 504 if (!snode) {; 505 numbers.emplace_back(offset);; 506 fNodes.emplace_back(nullptr);; 507 } else if (snode->GetNumber() >= offset) {; 508 // artificial offset already applied, used as identifier; 509 iter.Skip(); // no need to look inside; 510 } else {; 511 numbers.emplace_back(snode->GetNumber());; 512 snode->SetNumber(offset + fNodes.size()); // use id with shift 1e9; 513 fNodes.emplace_back(snode);; 514 }; 515 } while ((snode = iter()) != nullptr);; 516 ; 517 fDesc.reserve(fNodes.size())",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:12641,Usability,clear,clear,12641,"///; 457/// Collect information about geometry from single volume; 458/// like it done in JSROOT ClonedNodes.createClones; 459 ; 460void RGeomDescription::Build(TGeoVolume *vol); 461{; 462 ClearDescription();; 463 if (!vol); 464 return;; 465 ; 466 TLockGuard lock(fMutex);; 467 ; 468 fDrawVolume = vol;; 469 ; 470 fSelectedStack.clear();; 471 ; 472 BuildDescription(nullptr, fDrawVolume);; 473}; 474 ; 475/////////////////////////////////////////////////////////////////////; 476/// Clear geometry description; 477 ; 478void RGeomDescription::ClearDescription(); 479{; 480 TLockGuard lock(fMutex);; 481 ; 482 fDesc.clear();; 483 fNodes.clear();; 484 fSortMap.clear();; 485 ClearDrawData();; 486 fDrawIdCut = 0;; 487 fDrawVolume = nullptr;; 488 fSelectedStack.clear();; 489}; 490 ; 491/////////////////////////////////////////////////////////////////////; 492/// Build geometry description; 493 ; 494void RGeomDescription::BuildDescription(TGeoNode *topnode, TGeoVolume *topvolume); 495{; 496 // vector to remember numbers; 497 std::vector<int> numbers;; 498 int offset = 1000000000;; 499 ; 500 // try to build flat list of all nodes; 501 TGeoNode *snode = topnode;; 502 TGeoIterator iter(topvolume);; 503 do {; 504 if (!snode) {; 505 numbers.emplace_back(offset);; 506 fNodes.emplace_back(nullptr);; 507 } else if (snode->GetNumber() >= offset) {; 508 // artificial offset already applied, used as identifier; 509 iter.Skip(); // no need to look inside; 510 } else {; 511 numbers.emplace_back(snode->GetNumber());; 512 snode->SetNumber(offset + fNodes.size()); // use id with shift 1e9; 513 fNodes.emplace_back(snode);; 514 }; 515 } while ((snode = iter()) != nullptr);; 516 ; 517 fDesc.reserve(fNodes.size());; 518 fSortMap.reserve(fNodes.size());; 519 ; 520 // array for sorting; 521 std::vector<RGeomNode *> sortarr;; 522 sortarr.reserve(fNodes.size());; 523 ; 524 // create vector of desc and childs; 525 int cnt = 0;; 526 for (auto node : fNodes) {; 527 ; 528 fDesc.emplace_back(node ? node->GetN",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:31717,Usability,simpl,simple,31717,"e;; 1038 if ((hype->GetStIn() == 0) && (hype->GetStOut() == 0)); 1039 return countTubeFaces({hype->GetRmax(), hype->GetRmax()}, {hype->GetRmin(), hype->GetRmin()});; 1040 int radiusSegments = GetUsedNSegments(4), heightSegments = 30;; 1041 return radiusSegments * (heightSegments + 1) * ((hype->GetRmin() > 0.) ? 4 : 2);; 1042 } else if (shape->IsA() == TGeoTessellated::Class()) {; 1043 auto tess = (TGeoTessellated *)shape;; 1044 int numfaces = 0;; 1045 for (int i = 0; i < tess->GetNfacets(); ++i) {; 1046 if (tess->GetFacet(i).GetNvert() == 4); 1047 numfaces += 2;; 1048 else; 1049 numfaces += 1;; 1050 }; 1051 return numfaces;; 1052 } else if (shape->IsA() == TGeoScaledShape::Class()) {; 1053 auto scaled = (TGeoScaledShape *)shape;; 1054 return CountShapeFaces(scaled->GetShape());; 1055 } else if (shape->IsA() == TGeoCompositeShape::Class()) {; 1056 auto comp = (TGeoCompositeShape *)shape;; 1057 if (!comp->GetBoolNode()); 1058 return 0;; 1059 return CountShapeFaces(comp->GetBoolNode()->GetLeftShape()) +; 1060 CountShapeFaces(comp->GetBoolNode()->GetRightShape());; 1061 }; 1062 ; 1063 // many of simple shapes have 12 faces; 1064 return 12;; 1065}; 1066 ; 1067/////////////////////////////////////////////////////////////////////; 1068/// Find description object and create render information; 1069 ; 1070RGeomDescription::ShapeDescr &RGeomDescription::MakeShapeDescr(TGeoShape *shape); 1071{; 1072 auto &elem = FindShapeDescr(shape);; 1073 ; 1074 if (elem.nfaces == 0) {; 1075 ; 1076 int boundary = 3; //; 1077 if (shape->IsComposite()) {; 1078 // composite is most complex for client, therefore by default build on server; 1079 boundary = 1;; 1080 } else if (!shape->IsCylType()) {; 1081 // simple box geometry is compact and can be delivered as raw; 1082 boundary = 2;; 1083 }; 1084 ; 1085 if (IsBuildShapes() < boundary) {; 1086 elem.nfaces = 1;; 1087 elem.fShapeInfo.shape = shape;; 1088 } else {; 1089 ; 1090 int old_nsegm = -1;; 1091 if (fCfg.nsegm > 0 && gGeoManager) {; 1092 old_",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:32314,Usability,simpl,simple,32314,") == TGeoScaledShape::Class()) {; 1053 auto scaled = (TGeoScaledShape *)shape;; 1054 return CountShapeFaces(scaled->GetShape());; 1055 } else if (shape->IsA() == TGeoCompositeShape::Class()) {; 1056 auto comp = (TGeoCompositeShape *)shape;; 1057 if (!comp->GetBoolNode()); 1058 return 0;; 1059 return CountShapeFaces(comp->GetBoolNode()->GetLeftShape()) +; 1060 CountShapeFaces(comp->GetBoolNode()->GetRightShape());; 1061 }; 1062 ; 1063 // many of simple shapes have 12 faces; 1064 return 12;; 1065}; 1066 ; 1067/////////////////////////////////////////////////////////////////////; 1068/// Find description object and create render information; 1069 ; 1070RGeomDescription::ShapeDescr &RGeomDescription::MakeShapeDescr(TGeoShape *shape); 1071{; 1072 auto &elem = FindShapeDescr(shape);; 1073 ; 1074 if (elem.nfaces == 0) {; 1075 ; 1076 int boundary = 3; //; 1077 if (shape->IsComposite()) {; 1078 // composite is most complex for client, therefore by default build on server; 1079 boundary = 1;; 1080 } else if (!shape->IsCylType()) {; 1081 // simple box geometry is compact and can be delivered as raw; 1082 boundary = 2;; 1083 }; 1084 ; 1085 if (IsBuildShapes() < boundary) {; 1086 elem.nfaces = 1;; 1087 elem.fShapeInfo.shape = shape;; 1088 } else {; 1089 ; 1090 int old_nsegm = -1;; 1091 if (fCfg.nsegm > 0 && gGeoManager) {; 1092 old_nsegm = gGeoManager->GetNsegments();; 1093 gGeoManager->SetNsegments(fCfg.nsegm);; 1094 }; 1095 ; 1096 auto mesh = MakeGeoMesh(nullptr, shape);; 1097 ; 1098 if (old_nsegm > 0 && gGeoManager); 1099 gGeoManager->SetNsegments(old_nsegm);; 1100 ; 1101 Int_t num_vertices = mesh->NumberOfVertices(), num_polynoms = 0;; 1102 ; 1103 for (unsigned polyIndex = 0; polyIndex < mesh->NumberOfPolys(); ++polyIndex) {; 1104 ; 1105 auto size_of_polygon = mesh->SizeOfPoly(polyIndex);; 1106 ; 1107 if (size_of_polygon >= 3); 1108 num_polynoms += (size_of_polygon - 2);; 1109 }; 1110 ; 1111 Int_t index_buffer_size = num_polynoms * 3, // triangle indexes; 1112 vertex_buffer_s",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:35652,Usability,clear,clear,35652,"////////////////; 1157/// Copy material properties; 1158 ; 1159void RGeomDescription::CopyMaterialProperties(TGeoVolume *volume, RGeomNode &node); 1160{; 1161 if (!volume); 1162 return;; 1163 ; 1164 TColor *col = nullptr;; 1165 ; 1166 if ((volume->GetFillColor() > 1) && (volume->GetLineColor() == 1)); 1167 col = gROOT->GetColor(volume->GetFillColor());; 1168 else if (volume->GetLineColor() >= 0); 1169 col = gROOT->GetColor(volume->GetLineColor());; 1170 ; 1171 if (volume->GetMedium() && (volume->GetMedium() != TGeoVolume::DummyMedium()) &&; 1172 volume->GetMedium()->GetMaterial()) {; 1173 auto material = volume->GetMedium()->GetMaterial();; 1174 ; 1175 node.material = material->GetName();; 1176 ; 1177 auto fillstyle = material->GetFillStyle();; 1178 if ((fillstyle >= 3000) && (fillstyle <= 3100)); 1179 node.opacity = (3100 - fillstyle) / 100.;; 1180 if (!col); 1181 col = gROOT->GetColor(material->GetFillColor());; 1182 } else {; 1183 node.material.clear();; 1184 }; 1185 ; 1186 if (col) {; 1187 TString colbuf;; 1188 colbuf.Form(""#%02x%02x%02x"", (int)(col->GetRed() * 255), (int)(col->GetGreen() * 255),; 1189 (int)(col->GetBlue() * 255));; 1190 node.color = colbuf.Data();; 1191 if (node.opacity == 1.); 1192 node.opacity = col->GetAlpha();; 1193 } else {; 1194 node.color.clear();; 1195 }; 1196}; 1197 ; 1198/////////////////////////////////////////////////////////////////////; 1199/// Reset shape info, which used to pack binary data; 1200 ; 1201void RGeomDescription::ResetRndrInfos(); 1202{; 1203 for (auto &s : fShapes); 1204 s.reset();; 1205}; 1206 ; 1207/////////////////////////////////////////////////////////////////////; 1208/// Produce JSON string which can be directly used with `build`; 1209/// function from JSROOT to create three.js model of configured geometry; 1210///; 1211/// Collect all information required to draw geometry on the client; 1212/// This includes list of each visible nodes, meshes and matrixes; 1213/// If @param all_nodes is true, all existing no",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:35978,Usability,clear,clear,35978,"GetColor(volume->GetLineColor());; 1170 ; 1171 if (volume->GetMedium() && (volume->GetMedium() != TGeoVolume::DummyMedium()) &&; 1172 volume->GetMedium()->GetMaterial()) {; 1173 auto material = volume->GetMedium()->GetMaterial();; 1174 ; 1175 node.material = material->GetName();; 1176 ; 1177 auto fillstyle = material->GetFillStyle();; 1178 if ((fillstyle >= 3000) && (fillstyle <= 3100)); 1179 node.opacity = (3100 - fillstyle) / 100.;; 1180 if (!col); 1181 col = gROOT->GetColor(material->GetFillColor());; 1182 } else {; 1183 node.material.clear();; 1184 }; 1185 ; 1186 if (col) {; 1187 TString colbuf;; 1188 colbuf.Form(""#%02x%02x%02x"", (int)(col->GetRed() * 255), (int)(col->GetGreen() * 255),; 1189 (int)(col->GetBlue() * 255));; 1190 node.color = colbuf.Data();; 1191 if (node.opacity == 1.); 1192 node.opacity = col->GetAlpha();; 1193 } else {; 1194 node.color.clear();; 1195 }; 1196}; 1197 ; 1198/////////////////////////////////////////////////////////////////////; 1199/// Reset shape info, which used to pack binary data; 1200 ; 1201void RGeomDescription::ResetRndrInfos(); 1202{; 1203 for (auto &s : fShapes); 1204 s.reset();; 1205}; 1206 ; 1207/////////////////////////////////////////////////////////////////////; 1208/// Produce JSON string which can be directly used with `build`; 1209/// function from JSROOT to create three.js model of configured geometry; 1210///; 1211/// Collect all information required to draw geometry on the client; 1212/// This includes list of each visible nodes, meshes and matrixes; 1213/// If @param all_nodes is true, all existing nodes will be provided,; 1214/// which allows to create complete nodes hierarchy on client side; 1215///; 1216/// Example of usage:; 1217///; 1218/// void geom() {; 1219/// auto f = TFile::Open(""file_name.root"");; 1220/// auto vol = f->Get<TGeoVolume>(""object_name"");; 1221/// ROOT::RGeomDescription desc;; 1222/// desc.Build(vol);; 1223/// std::ofstream fout(""geom.json"");; 1224/// fout << desc.ProduceJson();; 1225/// }",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:41622,Usability,clear,clear,41622,"1339 ; 1340void RGeomDescription::ProduceSearchData(); 1341{; 1342 TLockGuard lock(fMutex);; 1343 ; 1344 if (fSearch.empty() || !fSearchJson.empty()); 1345 return;; 1346 ; 1347 std::string hjson;; 1348 ; 1349 SearchVisibles(fSearch, hjson, fSearchJson);; 1350 ; 1351 (void)hjson; // not used here; 1352}; 1353 ; 1354/////////////////////////////////////////////////////////////////////; 1355/// Collect all information required to draw geometry on the client; 1356/// This includes list of each visible nodes, meshes and matrixes; 1357 ; 1358void RGeomDescription::ProduceDrawData(); 1359{; 1360 auto json = ProduceJson();; 1361 ; 1362 TLockGuard lock(fMutex);; 1363 ; 1364 fDrawJson = ""GDRAW:""s + json;; 1365}; 1366 ; 1367/////////////////////////////////////////////////////////////////////; 1368/// Clear raw data. Will be rebuild when next connection will be established; 1369 ; 1370void RGeomDescription::ClearDrawData(); 1371{; 1372 TLockGuard lock(fMutex);; 1373 ; 1374 fDrawJson.clear();; 1375 fSearchJson.clear();; 1376}; 1377 ; 1378/////////////////////////////////////////////////////////////////////; 1379/// Clear cached data, need to be clear when connection broken; 1380 ; 1381void RGeomDescription::ClearCache(); 1382{; 1383 ClearDrawData();; 1384 ; 1385 TLockGuard lock(fMutex);; 1386 fShapes.clear();; 1387 fSearch.clear();; 1388}; 1389 ; 1390/////////////////////////////////////////////////////////////////////; 1391/// return true when node used in main geometry drawing and does not have childs; 1392/// for such nodes one could provide optimize toggling of visibility flags; 1393 ; 1394bool RGeomDescription::IsPrincipalEndNode(int nodeid); 1395{; 1396 TLockGuard lock(fMutex);; 1397 ; 1398 if ((nodeid < 0) || (nodeid >= (int)fDesc.size())); 1399 return false;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406///////////////////////////////////////////",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:41649,Usability,clear,clear,41649,";; 1346 ; 1347 std::string hjson;; 1348 ; 1349 SearchVisibles(fSearch, hjson, fSearchJson);; 1350 ; 1351 (void)hjson; // not used here; 1352}; 1353 ; 1354/////////////////////////////////////////////////////////////////////; 1355/// Collect all information required to draw geometry on the client; 1356/// This includes list of each visible nodes, meshes and matrixes; 1357 ; 1358void RGeomDescription::ProduceDrawData(); 1359{; 1360 auto json = ProduceJson();; 1361 ; 1362 TLockGuard lock(fMutex);; 1363 ; 1364 fDrawJson = ""GDRAW:""s + json;; 1365}; 1366 ; 1367/////////////////////////////////////////////////////////////////////; 1368/// Clear raw data. Will be rebuild when next connection will be established; 1369 ; 1370void RGeomDescription::ClearDrawData(); 1371{; 1372 TLockGuard lock(fMutex);; 1373 ; 1374 fDrawJson.clear();; 1375 fSearchJson.clear();; 1376}; 1377 ; 1378/////////////////////////////////////////////////////////////////////; 1379/// Clear cached data, need to be clear when connection broken; 1380 ; 1381void RGeomDescription::ClearCache(); 1382{; 1383 ClearDrawData();; 1384 ; 1385 TLockGuard lock(fMutex);; 1386 fShapes.clear();; 1387 fSearch.clear();; 1388}; 1389 ; 1390/////////////////////////////////////////////////////////////////////; 1391/// return true when node used in main geometry drawing and does not have childs; 1392/// for such nodes one could provide optimize toggling of visibility flags; 1393 ; 1394bool RGeomDescription::IsPrincipalEndNode(int nodeid); 1395{; 1396 TLockGuard lock(fMutex);; 1397 ; 1398 if ((nodeid < 0) || (nodeid >= (int)fDesc.size())); 1399 return false;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406/////////////////////////////////////////////////////////////////////; 1407/// Search visible nodes for provided name; 1408/// If number of found elements less than 100, create description and shapes for ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:41786,Usability,clear,clear,41786,";; 1346 ; 1347 std::string hjson;; 1348 ; 1349 SearchVisibles(fSearch, hjson, fSearchJson);; 1350 ; 1351 (void)hjson; // not used here; 1352}; 1353 ; 1354/////////////////////////////////////////////////////////////////////; 1355/// Collect all information required to draw geometry on the client; 1356/// This includes list of each visible nodes, meshes and matrixes; 1357 ; 1358void RGeomDescription::ProduceDrawData(); 1359{; 1360 auto json = ProduceJson();; 1361 ; 1362 TLockGuard lock(fMutex);; 1363 ; 1364 fDrawJson = ""GDRAW:""s + json;; 1365}; 1366 ; 1367/////////////////////////////////////////////////////////////////////; 1368/// Clear raw data. Will be rebuild when next connection will be established; 1369 ; 1370void RGeomDescription::ClearDrawData(); 1371{; 1372 TLockGuard lock(fMutex);; 1373 ; 1374 fDrawJson.clear();; 1375 fSearchJson.clear();; 1376}; 1377 ; 1378/////////////////////////////////////////////////////////////////////; 1379/// Clear cached data, need to be clear when connection broken; 1380 ; 1381void RGeomDescription::ClearCache(); 1382{; 1383 ClearDrawData();; 1384 ; 1385 TLockGuard lock(fMutex);; 1386 fShapes.clear();; 1387 fSearch.clear();; 1388}; 1389 ; 1390/////////////////////////////////////////////////////////////////////; 1391/// return true when node used in main geometry drawing and does not have childs; 1392/// for such nodes one could provide optimize toggling of visibility flags; 1393 ; 1394bool RGeomDescription::IsPrincipalEndNode(int nodeid); 1395{; 1396 TLockGuard lock(fMutex);; 1397 ; 1398 if ((nodeid < 0) || (nodeid >= (int)fDesc.size())); 1399 return false;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406/////////////////////////////////////////////////////////////////////; 1407/// Search visible nodes for provided name; 1408/// If number of found elements less than 100, create description and shapes for ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:41945,Usability,clear,clear,41945,"////////////////////////////////////////////////////////////////; 1355/// Collect all information required to draw geometry on the client; 1356/// This includes list of each visible nodes, meshes and matrixes; 1357 ; 1358void RGeomDescription::ProduceDrawData(); 1359{; 1360 auto json = ProduceJson();; 1361 ; 1362 TLockGuard lock(fMutex);; 1363 ; 1364 fDrawJson = ""GDRAW:""s + json;; 1365}; 1366 ; 1367/////////////////////////////////////////////////////////////////////; 1368/// Clear raw data. Will be rebuild when next connection will be established; 1369 ; 1370void RGeomDescription::ClearDrawData(); 1371{; 1372 TLockGuard lock(fMutex);; 1373 ; 1374 fDrawJson.clear();; 1375 fSearchJson.clear();; 1376}; 1377 ; 1378/////////////////////////////////////////////////////////////////////; 1379/// Clear cached data, need to be clear when connection broken; 1380 ; 1381void RGeomDescription::ClearCache(); 1382{; 1383 ClearDrawData();; 1384 ; 1385 TLockGuard lock(fMutex);; 1386 fShapes.clear();; 1387 fSearch.clear();; 1388}; 1389 ; 1390/////////////////////////////////////////////////////////////////////; 1391/// return true when node used in main geometry drawing and does not have childs; 1392/// for such nodes one could provide optimize toggling of visibility flags; 1393 ; 1394bool RGeomDescription::IsPrincipalEndNode(int nodeid); 1395{; 1396 TLockGuard lock(fMutex);; 1397 ; 1398 if ((nodeid < 0) || (nodeid >= (int)fDesc.size())); 1399 return false;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406/////////////////////////////////////////////////////////////////////; 1407/// Search visible nodes for provided name; 1408/// If number of found elements less than 100, create description and shapes for them; 1409/// Returns number of match elements; 1410 ; 1411int RGeomDescription::SearchVisibles(const std::string &find, std::string &hjson, std::string &json);",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:41968,Usability,clear,clear,41968,"id RGeomDescription::ProduceDrawData(); 1359{; 1360 auto json = ProduceJson();; 1361 ; 1362 TLockGuard lock(fMutex);; 1363 ; 1364 fDrawJson = ""GDRAW:""s + json;; 1365}; 1366 ; 1367/////////////////////////////////////////////////////////////////////; 1368/// Clear raw data. Will be rebuild when next connection will be established; 1369 ; 1370void RGeomDescription::ClearDrawData(); 1371{; 1372 TLockGuard lock(fMutex);; 1373 ; 1374 fDrawJson.clear();; 1375 fSearchJson.clear();; 1376}; 1377 ; 1378/////////////////////////////////////////////////////////////////////; 1379/// Clear cached data, need to be clear when connection broken; 1380 ; 1381void RGeomDescription::ClearCache(); 1382{; 1383 ClearDrawData();; 1384 ; 1385 TLockGuard lock(fMutex);; 1386 fShapes.clear();; 1387 fSearch.clear();; 1388}; 1389 ; 1390/////////////////////////////////////////////////////////////////////; 1391/// return true when node used in main geometry drawing and does not have childs; 1392/// for such nodes one could provide optimize toggling of visibility flags; 1393 ; 1394bool RGeomDescription::IsPrincipalEndNode(int nodeid); 1395{; 1396 TLockGuard lock(fMutex);; 1397 ; 1398 if ((nodeid < 0) || (nodeid >= (int)fDesc.size())); 1399 return false;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406/////////////////////////////////////////////////////////////////////; 1407/// Search visible nodes for provided name; 1408/// If number of found elements less than 100, create description and shapes for them; 1409/// Returns number of match elements; 1410 ; 1411int RGeomDescription::SearchVisibles(const std::string &find, std::string &hjson, std::string &json); 1412{; 1413 TLockGuard lock(fMutex);; 1414 ; 1415 hjson.clear();; 1416 json.clear();; 1417 ; 1418 if (find.empty()) {; 1419 hjson = ""FOUND:RESET"";; 1420 return 0;; 1421 }; 1422 ; 1423 std::vector<int> nodescnt(fDesc.size()",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:43014,Usability,clear,clear,43014,"/////////////////////////////////////////; 1391/// return true when node used in main geometry drawing and does not have childs; 1392/// for such nodes one could provide optimize toggling of visibility flags; 1393 ; 1394bool RGeomDescription::IsPrincipalEndNode(int nodeid); 1395{; 1396 TLockGuard lock(fMutex);; 1397 ; 1398 if ((nodeid < 0) || (nodeid >= (int)fDesc.size())); 1399 return false;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406/////////////////////////////////////////////////////////////////////; 1407/// Search visible nodes for provided name; 1408/// If number of found elements less than 100, create description and shapes for them; 1409/// Returns number of match elements; 1410 ; 1411int RGeomDescription::SearchVisibles(const std::string &find, std::string &hjson, std::string &json); 1412{; 1413 TLockGuard lock(fMutex);; 1414 ; 1415 hjson.clear();; 1416 json.clear();; 1417 ; 1418 if (find.empty()) {; 1419 hjson = ""FOUND:RESET"";; 1420 return 0;; 1421 }; 1422 ; 1423 std::vector<int> nodescnt(fDesc.size(), 0), viscnt(fDesc.size(), 0);; 1424 ; 1425 int nmatches = 0;; 1426 std::string test = find;; 1427 int kind = 0;; 1428 if (test.compare(0, 2, ""c:"") == 0) {; 1429 test.erase(0, 2);; 1430 kind = 1;; 1431 } else if (test.compare(0, 2, ""m:"") == 0) {; 1432 test.erase(0, 2);; 1433 kind = 2;; 1434 }; 1435 ; 1436 TRegexp regexp(test.c_str());; 1437 ; 1438 auto match_func = [&regexp, kind](RGeomNode &node) {; 1439 return (node.vol > 0) && (TString(node.GetArg(kind)).Index(regexp) >= 0);; 1440 };; 1441 ; 1442 // first count how many times each individual node appears; 1443 ScanNodes(false, 0,; 1444 [&nodescnt, &viscnt, &match_func, &nmatches](RGeomNode &node, std::vector<int> &, bool is_vis, int) {; 1445 if (match_func(node)) {; 1446 nmatches++;; 1447 nodescnt[node.id]++;; 1448 if (is_vis); 1449 viscnt[node.id]++;; 1450 };; 1451 return true;;",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:43034,Usability,clear,clear,43034,"////////////////; 1391/// return true when node used in main geometry drawing and does not have childs; 1392/// for such nodes one could provide optimize toggling of visibility flags; 1393 ; 1394bool RGeomDescription::IsPrincipalEndNode(int nodeid); 1395{; 1396 TLockGuard lock(fMutex);; 1397 ; 1398 if ((nodeid < 0) || (nodeid >= (int)fDesc.size())); 1399 return false;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406/////////////////////////////////////////////////////////////////////; 1407/// Search visible nodes for provided name; 1408/// If number of found elements less than 100, create description and shapes for them; 1409/// Returns number of match elements; 1410 ; 1411int RGeomDescription::SearchVisibles(const std::string &find, std::string &hjson, std::string &json); 1412{; 1413 TLockGuard lock(fMutex);; 1414 ; 1415 hjson.clear();; 1416 json.clear();; 1417 ; 1418 if (find.empty()) {; 1419 hjson = ""FOUND:RESET"";; 1420 return 0;; 1421 }; 1422 ; 1423 std::vector<int> nodescnt(fDesc.size(), 0), viscnt(fDesc.size(), 0);; 1424 ; 1425 int nmatches = 0;; 1426 std::string test = find;; 1427 int kind = 0;; 1428 if (test.compare(0, 2, ""c:"") == 0) {; 1429 test.erase(0, 2);; 1430 kind = 1;; 1431 } else if (test.compare(0, 2, ""m:"") == 0) {; 1432 test.erase(0, 2);; 1433 kind = 2;; 1434 }; 1435 ; 1436 TRegexp regexp(test.c_str());; 1437 ; 1438 auto match_func = [&regexp, kind](RGeomNode &node) {; 1439 return (node.vol > 0) && (TString(node.GetArg(kind)).Index(regexp) >= 0);; 1440 };; 1441 ; 1442 // first count how many times each individual node appears; 1443 ScanNodes(false, 0,; 1444 [&nodescnt, &viscnt, &match_func, &nmatches](RGeomNode &node, std::vector<int> &, bool is_vis, int) {; 1445 if (match_func(node)) {; 1446 nmatches++;; 1447 nodescnt[node.id]++;; 1448 if (is_vis); 1449 viscnt[node.id]++;; 1450 };; 1451 return true;; 1452 });; 1453 ; 1454 // ",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:49928,Usability,clear,clear,49928,"06 int nodeid = 0;; 1607 ; 1608 for (auto &chindx : stack) {; 1609 auto &node = fDesc[nodeid];; 1610 if (chindx >= (int)node.chlds.size()); 1611 return -1;; 1612 nodeid = node.chlds[chindx];; 1613 }; 1614 ; 1615 return nodeid;; 1616}; 1617 ; 1618/////////////////////////////////////////////////////////////////////////////////; 1619/// Creates stack for given array of ids, first element always should be 0; 1620 ; 1621std::vector<int> RGeomDescription::MakeStackByIds(const std::vector<int> &ids); 1622{; 1623 TLockGuard lock(fMutex);; 1624 ; 1625 std::vector<int> stack;; 1626 ; 1627 if (ids.empty()); 1628 return stack;; 1629 ; 1630 if (ids[0] != 0) {; 1631 printf(""Wrong first id\n"");; 1632 return stack;; 1633 }; 1634 ; 1635 int nodeid = 0;; 1636 ; 1637 for (unsigned k = 1; k < ids.size(); ++k) {; 1638 ; 1639 int prntid = nodeid;; 1640 nodeid = ids[k];; 1641 ; 1642 if (nodeid >= (int)fDesc.size()) {; 1643 printf(""Wrong node id %d\n"", nodeid);; 1644 stack.clear();; 1645 return stack;; 1646 }; 1647 auto &chlds = fDesc[prntid].chlds;; 1648 auto pos = std::find(chlds.begin(), chlds.end(), nodeid);; 1649 if (pos == chlds.end()) {; 1650 printf(""Wrong id %d not a child of %d - fail to find stack num %d\n"", nodeid, prntid, (int)chlds.size());; 1651 stack.clear();; 1652 return stack;; 1653 }; 1654 ; 1655 stack.emplace_back(std::distance(chlds.begin(), pos));; 1656 }; 1657 ; 1658 return stack;; 1659}; 1660 ; 1661/////////////////////////////////////////////////////////////////////////////////; 1662/// Produce stack based on string path; 1663/// Used to highlight geo volumes by browser hover event; 1664 ; 1665std::vector<int> RGeomDescription::MakeStackByPath(const std::vector<std::string> &path); 1666{; 1667 TLockGuard lock(fMutex);; 1668 ; 1669 std::vector<int> res;; 1670 ; 1671 RGeomBrowserIter iter(*this);; 1672 ; 1673 if (iter.Navigate(path)); 1674 res = MakeStackByIds(iter.CurrentIds());; 1675 ; 1676 return res;; 1677}; 1678 ; 1679/////////////////////////////////////////////",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:50226,Usability,clear,clear,50226,"////////////////////////////////////; 1619/// Creates stack for given array of ids, first element always should be 0; 1620 ; 1621std::vector<int> RGeomDescription::MakeStackByIds(const std::vector<int> &ids); 1622{; 1623 TLockGuard lock(fMutex);; 1624 ; 1625 std::vector<int> stack;; 1626 ; 1627 if (ids.empty()); 1628 return stack;; 1629 ; 1630 if (ids[0] != 0) {; 1631 printf(""Wrong first id\n"");; 1632 return stack;; 1633 }; 1634 ; 1635 int nodeid = 0;; 1636 ; 1637 for (unsigned k = 1; k < ids.size(); ++k) {; 1638 ; 1639 int prntid = nodeid;; 1640 nodeid = ids[k];; 1641 ; 1642 if (nodeid >= (int)fDesc.size()) {; 1643 printf(""Wrong node id %d\n"", nodeid);; 1644 stack.clear();; 1645 return stack;; 1646 }; 1647 auto &chlds = fDesc[prntid].chlds;; 1648 auto pos = std::find(chlds.begin(), chlds.end(), nodeid);; 1649 if (pos == chlds.end()) {; 1650 printf(""Wrong id %d not a child of %d - fail to find stack num %d\n"", nodeid, prntid, (int)chlds.size());; 1651 stack.clear();; 1652 return stack;; 1653 }; 1654 ; 1655 stack.emplace_back(std::distance(chlds.begin(), pos));; 1656 }; 1657 ; 1658 return stack;; 1659}; 1660 ; 1661/////////////////////////////////////////////////////////////////////////////////; 1662/// Produce stack based on string path; 1663/// Used to highlight geo volumes by browser hover event; 1664 ; 1665std::vector<int> RGeomDescription::MakeStackByPath(const std::vector<std::string> &path); 1666{; 1667 TLockGuard lock(fMutex);; 1668 ; 1669 std::vector<int> res;; 1670 ; 1671 RGeomBrowserIter iter(*this);; 1672 ; 1673 if (iter.Navigate(path)); 1674 res = MakeStackByIds(iter.CurrentIds());; 1675 ; 1676 return res;; 1677}; 1678 ; 1679/////////////////////////////////////////////////////////////////////////////////; 1680/// Produce list of node ids for given stack; 1681/// If found nodes preselected - use their ids; 1682 ; 1683std::vector<int> RGeomDescription::MakeIdsByStack(const std::vector<int> &stack); 1684{; 1685 TLockGuard lock(fMutex);; 1686 ; 1687 std::ve",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:51688,Usability,clear,clear,51688,"7}; 1678 ; 1679/////////////////////////////////////////////////////////////////////////////////; 1680/// Produce list of node ids for given stack; 1681/// If found nodes preselected - use their ids; 1682 ; 1683std::vector<int> RGeomDescription::MakeIdsByStack(const std::vector<int> &stack); 1684{; 1685 TLockGuard lock(fMutex);; 1686 ; 1687 std::vector<int> ids;; 1688 ; 1689 ids.emplace_back(0);; 1690 int nodeid = 0;; 1691 bool failure = false;; 1692 ; 1693 for (auto s : stack) {; 1694 auto &chlds = fDesc[nodeid].chlds;; 1695 if (s >= (int)chlds.size()) {; 1696 failure = true;; 1697 break;; 1698 }; 1699 ; 1700 ids.emplace_back(chlds[s]);; 1701 ; 1702 nodeid = chlds[s];; 1703 }; 1704 ; 1705 if (failure) {; 1706 printf(""Fail to convert stack into list of nodes\n"");; 1707 ids.clear();; 1708 }; 1709 ; 1710 return ids;; 1711}; 1712 ; 1713/////////////////////////////////////////////////////////////////////////////////; 1714/// Returns path string for provided stack; 1715 ; 1716std::vector<std::string> RGeomDescription::MakePathByStack(const std::vector<int> &stack); 1717{; 1718 TLockGuard lock(fMutex);; 1719 ; 1720 std::vector<std::string> path;; 1721 ; 1722 auto ids = MakeIdsByStack(stack);; 1723 path.reserve(ids.size());; 1724for (auto &id : ids); 1725 path.emplace_back(fDesc[id].name);; 1726 ; 1727 return path;; 1728}; 1729 ; 1730/////////////////////////////////////////////////////////////////////////////////; 1731/// Return string with only part of nodes description which were modified; 1732/// Checks also volume; 1733 ; 1734std::string RGeomDescription::ProduceModifyReply(int nodeid); 1735{; 1736 TLockGuard lock(fMutex);; 1737 ; 1738 std::vector<RGeomNodeBase *> nodes;; 1739 auto vol = GetVolume(nodeid);; 1740 ; 1741 // we take not only single node, but all there same volume is referenced; 1742 // nodes.push_back(&fDesc[nodeid]);; 1743 ; 1744 int id = 0;; 1745 for (auto &desc : fDesc); 1746 if (GetVolume(id++) == vol); 1747 nodes.emplace_back(&desc);; 1748 ; 1749 re",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:63202,Usability,clear,clear,63202,"2068 ; 2069 RGeomBrowserIter giter(*this);; 2070 ; 2071 if (!giter.Navigate(path)); 2072 return false;; 2073 ; 2074 auto stack = MakeStackByIds(giter.CurrentIds());; 2075 ; 2076 for (auto iter = fVisibility.begin(); iter != fVisibility.end(); iter++); 2077 if (compare_stacks(iter->stack, stack) == 0) {; 2078 fVisibility.erase(iter);; 2079 ClearDrawData();; 2080 return true;; 2081 }; 2082 ; 2083 return false;; 2084}; 2085 ; 2086/////////////////////////////////////////////////////////////////////////////////; 2087/// Reset all custom visibility settings; 2088 ; 2089bool RGeomDescription::ClearAllPhysVisibility(); 2090{; 2091 TLockGuard lock(fMutex);; 2092 ; 2093 if (fVisibility.empty()); 2094 return false;; 2095 ; 2096 fVisibility.clear();; 2097 ClearDrawData();; 2098 return true;; 2099}; 2100 ; 2101/////////////////////////////////////////////////////////////////////////////////; 2102/// Change configuration by client; 2103/// Returns true if any parameter was really changed; 2104 ; 2105bool RGeomDescription::ChangeConfiguration(const std::string &json); 2106{; 2107 auto cfg = TBufferJSON::FromJSON<RGeomConfig>(json);; 2108 if (!cfg); 2109 return false;; 2110 ; 2111 TLockGuard lock(fMutex);; 2112 ; 2113 auto json1 = TBufferJSON::ToJSON(cfg.get());; 2114 auto json2 = TBufferJSON::ToJSON(&fCfg);; 2115 ; 2116 if (json1 == json2); 2117 return false;; 2118 ; 2119 fCfg = *cfg; // use assign; 2120 ; 2121 ClearDrawData();; 2122 ; 2123 return true;; 2124}; 2125 ; 2126/////////////////////////////////////////////////////////////////////////////////; 2127/// Change search query and belongs to it json string; 2128/// Returns true if any parameter was really changed; 2129 ; 2130bool RGeomDescription::SetSearch(const std::string &query, const std::string &json); 2131{; 2132 TLockGuard lock(fMutex);; 2133 ; 2134 bool changed = (fSearch != query) || (fSearchJson != json);; 2135 fSearch = query;; 2136 fSearchJson = json;; 2137 return changed;; 2138}; 2139 ; 2140/////////////////////",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8cxx_source.html:77410,Usability,clear,clear,77410,"on)Change search query and belongs to it json string Returns true if any parameter was really changed.Definition RGeomData.cxx:2130; ROOT::RGeomDescription::fVisibilitystd::vector< RGeomNodeVisibility > fVisibility! custom visibility flags for physical nodesDefinition RGeomData.hxx:244; ROOT::RGeomDescription::SelectTopbool SelectTop(const std::vector< std::string > &path)Select top node by path Used by the client to change active node Returns true if selected node was ch...Definition RGeomData.cxx:1946; ROOT::RGeomDescription::GetMaxVisNodesint GetMaxVisNodes() constReturns maximal visible number of nodes, ignored when non-positive.Definition RGeomData.hxx:319; ROOT::RGeomDescription::GetVisLevelint GetVisLevel() constReturns maximal visible level.Definition RGeomData.hxx:329; ROOT::RGeomDescription::GetMaxVisFacesint GetMaxVisFaces() constReturns maximal visible number of faces, ignored when non-positive.Definition RGeomData.hxx:324; ROOT::RGeomDescription::ClearCachevoid ClearCache()Clear cached data, need to be clear when connection broken.Definition RGeomData.cxx:1381; ROOT::RGeomDescription::ClearDescriptionvoid ClearDescription()Clear geometry description.Definition RGeomData.cxx:478; ROOT::RGeomDescription::MakeStackByIdsstd::vector< int > MakeStackByIds(const std::vector< int > &ids)Creates stack for given array of ids, first element always should be 0.Definition RGeomData.cxx:1621; ROOT::RGeomDescription::SetMaxVisFacesvoid SetMaxVisFaces(int cnt)Set maximal number of faces which should be selected for drawing.Definition RGeomData.hxx:322; ROOT::RGeomDescription::IsPreferredOfflinebool IsPreferredOffline() constIs offline operations preferred.Definition RGeomData.hxx:361; ROOT::RGeomDescription::fShapesstd::vector< ShapeDescr > fShapes! shapes with created descriptionsDefinition RGeomData.hxx:253; ROOT::RGeomDescription::fJsonCompint fJsonComp! default JSON compressionDefinition RGeomData.hxx:261; ROOT::RGeomDescription::ChangeNodeVisibilitybool ChangeNodeV",MatchSource.WIKI,doc/v632/RGeomData_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:23417,Availability,avail,available,23417,"d::string &req="""")Find description object for requested shape If not exists - will be created.Definition RGeomData.cxx:767; ROOT::RGeomDescription::fDescstd::vector< RGeomNode > fDesc! converted description, send to clientDefinition RGeomData.hxx:243; ROOT::RGeomDescription::PackMatrixvoid PackMatrix(std::vector< float > &arr, TGeoMatrix *matr)Pack matrix into vector, which can be send to client Following sizes can be used for vector: 0 - Iden...Definition RGeomData.cxx:341; ROOT::RGeomDescription::ProduceDrawingForbool ProduceDrawingFor(int nodeid, std::string &json, bool check_volume=false)Produce shape rendering data for given stack All nodes, which are referencing same shape will be tran...Definition RGeomData.cxx:1757; ROOT::RGeomDescription::MakeNodeInfostd::unique_ptr< RGeomNodeInfo > MakeNodeInfo(const std::vector< int > &stack)Change visibility for specified element Returns true if changes was performed.Definition RGeomData.cxx:1899; ROOT::RGeomDescription::HasDrawDatabool HasDrawData() constCheck if there is draw data available.Definition RGeomData.cxx:1331; ROOT::RGeomDescription::MakeIdsByStackstd::vector< int > MakeIdsByStack(const std::vector< int > &stack)Produce list of node ids for given stack If found nodes preselected - use their ids.Definition RGeomData.cxx:1683; ROOT::RGeomDescription::MarkVisibleint MarkVisible(bool on_screen=false)Set visibility flag for each nodes.Definition RGeomData.cxx:594; ROOT::RGeomDescription::SetVisLevelvoid SetVisLevel(int lvl=3)Set maximal visible level.Definition RGeomData.hxx:327; ROOT::RGeomDescription::IssueSignalvoid IssueSignal(const void *handler, const std::string &kind)Issue signal, which distributed on all handlers - excluding source handler.Definition RGeomData.cxx:293; ROOT::RGeomDescription::GetUsedNSegmentsint GetUsedNSegments(int min=20)Returns really used number of cylindrical segments.Definition RGeomData.cxx:922; ROOT::RGeomDescription::IsPrincipalEndNodebool IsPrincipalEndNode(int nodeid)return tru",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:34886,Availability,failure,failure,34886,"information.Definition RGeomData.cxx:1070; ROOT::RGeomDescription::fPreferredOfflinebool fPreferredOffline! indicates that full description should be provided to clientDefinition RGeomData.hxx:260; ROOT::RGeomDescription::SetDrawOptionsvoid SetDrawOptions(const std::string &opt="""")Set draw options as string for JSROOT TGeoPainter.Definition RGeomData.hxx:347; ROOT::RGeomDescription::FindShapeDescrShapeDescr & FindShapeDescr(TGeoShape *shape)Find description object for requested shape If not exists - will be created.Definition RGeomData.cxx:857; ROOT::RGeomDescription::GetHighlightedItemstd::vector< int > GetHighlightedItem() constDefinition RGeomData.hxx:413; ROOT::RGeomDescription::fDrawJsonstd::string fDrawJson! JSON with main nodes drawn by clientDefinition RGeomData.hxx:257; ROOT::RGeomDescription::RemoveSignalHandlervoid RemoveSignalHandler(const void *handler)Remove signal handler.Definition RGeomData.cxx:321; ROOT::RGeomDescription::FindNodeIdint FindNodeId(const std::vector< int > &stack)Returns nodeid for given stack array, returns -1 in case of failure.Definition RGeomData.cxx:1602; ROOT::RGeomDescription::ProduceIdShiftsvoid ProduceIdShifts()Count total number of visible childs under each node.Definition RGeomData.cxx:629; ROOT::RGeomDescription::ProduceModifyReplystd::string ProduceModifyReply(int nodeid)Return string with only part of nodes description which were modified Checks also volume.Definition RGeomData.cxx:1734; ROOT::RGeomDescription::fActiveItemNamestd::string fActiveItemName! name of item which should be activated in hierarchyDefinition RGeomData.hxx:262; ROOT::RGeomDescription::GetActiveItemstd::string GetActiveItem() constDefinition RGeomData.hxx:441; ROOT::RGeomDescription::ResetRndrInfosvoid ResetRndrInfos()Reset shape info, which used to pack binary data.Definition RGeomData.cxx:1201; ROOT::RGeomDescription::GetSearchJsonstd::string GetSearchJson() constDefinition RGeomData.hxx:384; ROOT::RGeomDescription::GetNSegmentsint GetNSegments()",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:6352,Deployability,configurat,configurations,6352," _nodeid, int _seqid, const std::vector<int> &_stack) : nodeid(_nodeid), seqid(_seqid), stack(_stack) {}; 156};; 157 ; 158 ; 159/** Configuration parameters which can be configured on the client; 160 * Send as is to-from client */; 161 ; 162class RGeomConfig {; 163public:; 164 int vislevel{0}; ///< visible level; 165 int maxnumnodes{0}; ///< maximal number of nodes; 166 int maxnumfaces{0}; ///< maximal number of faces; 167 bool showtop{false}; ///< show geometry top volume, off by default; 168 int build_shapes{1}; ///< when shapes build on server 0 - never, 1 - TGeoComposite, 2 - plus non-cylindrical, 3 - all; 169 int nsegm{0}; ///< number of segments for cylindrical shapes; 170 std::string drawopt; ///< draw options for TGeoPainter; 171};; 172 ; 173 ; 174/** Object with full description for drawing geometry; 175 * It includes list of visible items and list of nodes required to build them */; 176 ; 177class RGeomDrawing {; 178public:; 179 RGeomConfig *cfg{nullptr}; ///< current configurations; 180 int numnodes{0}; ///< total number of nodes in description; 181 std::vector<RGeomNode*> nodes; ///< all used nodes to display visible items and not known for client; 182 std::vector<RGeomVisible> visibles; ///< all visible items; 183};; 184 ; 185 ; 186/** Node information including rendering data */; 187class RGeomNodeInfo {; 188public:; 189 std::vector<std::string> path; ///< full path to node; 190 std::string node_type; ///< node class name; 191 std::string node_name; ///< node name; 192 std::string shape_type; ///< shape type (if any); 193 std::string shape_name; ///< shape class name (if any); 194 ; 195 RGeomRenderInfo *ri{nullptr}; ///< rendering information (if applicable); 196};; 197 ; 198/** Custom settings for physical Node visibility */; 199class RGeomNodeVisibility {; 200public:; 201 std::vector<int> stack; ///< path to the node; 202 bool visible{false}; ///< visible flag; 203 RGeomNodeVisibility(const std::vector<int> &_stack, bool _visible) : stack(_stack), vis",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:9797,Deployability,configurat,configuration,9797,"ck; ///<! selected branch of geometry by stack; 248 ; 249 std::vector<int> fHighlightedStack; ///<! highlighted element by stack; 250 std::vector<int> fClickedStack; ///<! clicked element by stack; 251 ; 252 std::vector<int> fSortMap; ///<! nodes in order large -> smaller volume; 253 std::vector<ShapeDescr> fShapes; ///<! shapes with created descriptions; 254 ; 255 std::string fSearch; ///<! search string in hierarchy; 256 std::string fSearchJson; ///<! drawing json for search; 257 std::string fDrawJson; ///<! JSON with main nodes drawn by client; 258 int fDrawIdCut{0}; ///<! sortid used for selection of most-significant nodes; 259 int fActualLevel{0}; ///<! level can be reduced when selecting nodes; 260 bool fPreferredOffline{false}; ///<! indicates that full description should be provided to client; 261 int fJsonComp{0}; ///<! default JSON compression; 262 std::string fActiveItemName; ///<! name of item which should be activated in hierarchy; 263 ; 264 RGeomConfig fCfg; ///<! configuration parameter editable from GUI; 265 ; 266 TVirtualMutex *fMutex{nullptr}; ///<! external mutex used to protect all data; 267 ; 268 std::vector<std::pair<const void *, RGeomSignalFunc_t>> fSignals; ///<! registered signals; 269 ; 270 void PackMatrix(std::vector<float> &arr, TGeoMatrix *matr);; 271 ; 272 int MarkVisible(bool on_screen = false);; 273 ; 274 void ProduceIdShifts();; 275 ; 276 int ScanNodes(bool only_visible, int maxlvl, RGeomScanFunc_t func);; 277 ; 278 void ResetRndrInfos();; 279 ; 280 ShapeDescr &FindShapeDescr(TGeoShape *shape);; 281 ; 282 ShapeDescr &MakeShapeDescr(TGeoShape *shape);; 283 ; 284 int GetUsedNSegments(int min = 20);; 285 ; 286 int CountShapeFaces(TGeoShape *shape);; 287 ; 288 void CopyMaterialProperties(TGeoVolume *vol, RGeomNode &node);; 289 ; 290 void CollectNodes(RGeomDrawing &drawing, bool all_nodes = false);; 291 ; 292 std::string MakeDrawingJson(RGeomDrawing &drawing, bool has_shapes = false);; 293 ; 294 void ClearDescription();; 295 ; 296 void B",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:21548,Deployability,configurat,configuration,21548,"taDefinition RGeomData.hxx:218; ROOT::RGeomDescription::ShapeDescr::resetvoid reset()Definition RGeomData.hxx:234; ROOT::RGeomDescription::ShapeDescr::has_rawbool has_raw() constDefinition RGeomData.hxx:224; ROOT::RGeomDescription::ShapeDescr::fShapeInfoRGeomShapeRenderInfo fShapeInfo! shape itself as infoDefinition RGeomData.hxx:220; ROOT::RGeomDescription::ShapeDescr::fShapeTGeoShape * fShape! original shapeDefinition RGeomData.hxx:217; ROOT::RGeomDescription::ShapeDescr::rndr_infoRGeomRenderInfo * rndr_info()Provide render info for visible item.Definition RGeomData.hxx:227; ROOT::RGeomDescription::ShapeDescr::fRawInfoRGeomRawRenderInfo fRawInfo! raw render infoDefinition RGeomData.hxx:219; ROOT::RGeomDescription::ShapeDescr::ShapeDescrShapeDescr(TGeoShape *s)Definition RGeomData.hxx:221; ROOT::RGeomDescription::ShapeDescr::has_shapebool has_shape() constDefinition RGeomData.hxx:223; ROOT::RGeomDescriptionDefinition RGeomData.hxx:210; ROOT::RGeomDescription::fCfgRGeomConfig fCfg! configuration parameter editable from GUIDefinition RGeomData.hxx:264; ROOT::RGeomDescription::fSignalsstd::vector< std::pair< const void *, RGeomSignalFunc_t > > fSignals! registered signalsDefinition RGeomData.hxx:268; ROOT::RGeomDescription::IsPhysNodeVisibleint IsPhysNodeVisible(const std::vector< int > &stack)Check if there special settings for specified physical node returns -1 if nothing is found.Definition RGeomData.cxx:2043; ROOT::RGeomDescription::fSelectedStackstd::vector< int > fSelectedStack! selected branch of geometry by stackDefinition RGeomData.hxx:247; ROOT::RGeomDescription::SetMaxVisNodesvoid SetMaxVisNodes(int cnt)Set maximal number of nodes which should be selected for drawing.Definition RGeomData.hxx:317; ROOT::RGeomDescription::ProcessBrowserRequeststd::string ProcessBrowserRequest(const std::string &req="""")Find description object for requested shape If not exists - will be created.Definition RGeomData.cxx:767; ROOT::RGeomDescription::fDescstd::vector< RGeomNode > f",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:27755,Deployability,configurat,configuration,27755,"vector< ShapeDescr > fShapes! shapes with created descriptionsDefinition RGeomData.hxx:253; ROOT::RGeomDescription::GetSearchstd::string GetSearch() constDefinition RGeomData.hxx:383; ROOT::RGeomDescription::fJsonCompint fJsonComp! default JSON compressionDefinition RGeomData.hxx:261; ROOT::RGeomDescription::ChangeNodeVisibilitybool ChangeNodeVisibility(const std::vector< std::string > &path, bool on)Change visibility for specified element Returns true if changes was performed.Definition RGeomData.cxx:1850; ROOT::RGeomDescription::SetMutexvoid SetMutex(TVirtualMutex *mutex)Set mutex, it must be recursive one.Definition RGeomData.hxx:312; ROOT::RGeomDescription::RGeomDescriptionRGeomDescription()=default; ROOT::RGeomDescription::fSearchstd::string fSearch! search string in hierarchyDefinition RGeomData.hxx:255; ROOT::RGeomDescription::fSearchJsonstd::string fSearchJson! drawing json for searchDefinition RGeomData.hxx:256; ROOT::RGeomDescription::SavePrimitivevoid SavePrimitive(std::ostream &fs, const std::string &name)Save geometry configuration as C++ macro.Definition RGeomData.cxx:2143; ROOT::RGeomDescription::fHighlightedStackstd::vector< int > fHighlightedStack! highlighted element by stackDefinition RGeomData.hxx:249; ROOT::RGeomDescription::ClearAllPhysVisibilitybool ClearAllPhysVisibility()Reset all custom visibility settings.Definition RGeomData.cxx:2089; ROOT::RGeomDescription::MakeDrawingJsonstd::string MakeDrawingJson(RGeomDrawing &drawing, bool has_shapes=false)Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in thi...Definition RGeomData.cxx:1826; ROOT::RGeomDescription::fActualLevelint fActualLevel! level can be reduced when selecting nodesDefinition RGeomData.hxx:259; ROOT::RGeomDescription::GetVolumeTGeoVolume * GetVolume(int nodeid)Get volume for specified nodeid If specific volume was configured, it will be returned for nodeid==0.Definition RGeomData.cxx:583; ROOT::RGeomDescription::SetActiveItembool Set",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:31576,Deployability,configurat,configuration,31576,"r< int > fSortMap! nodes in order large -> smaller volumeDefinition RGeomData.hxx:252; ROOT::RGeomDescription::ProduceJsonstd::string ProduceJson(bool all_nodes=false)Produce JSON string which can be directly used with build function from JSROOT to create three....Definition RGeomData.cxx:1230; ROOT::RGeomDescription::ClearDrawDatavoid ClearDrawData()Clear raw data. Will be rebuild when next connection will be established.Definition RGeomData.cxx:1370; ROOT::RGeomDescription::MakePathByStackstd::vector< std::string > MakePathByStack(const std::vector< int > &stack)Returns path string for provided stack.Definition RGeomData.cxx:1716; ROOT::RGeomDescription::fMutexTVirtualMutex * fMutex! external mutex used to protect all dataDefinition RGeomData.hxx:266; ROOT::RGeomDescription::AddSignalHandlervoid AddSignalHandler(const void *handler, RGeomSignalFunc_t func)Add signal handler.Definition RGeomData.cxx:312; ROOT::RGeomDescription::ChangeConfigurationbool ChangeConfiguration(const std::string &json)Change configuration by client Returns true if any parameter was really changed.Definition RGeomData.cxx:2105; ROOT::RGeomDescription::CopyMaterialPropertiesvoid CopyMaterialProperties(TGeoVolume *vol, RGeomNode &node)Copy material properties.Definition RGeomData.cxx:1159; ROOT::RGeomDescription::GetClickedItemstd::vector< int > GetClickedItem() constDefinition RGeomData.hxx:427; ROOT::RGeomDescription::MakeStackByPathstd::vector< int > MakeStackByPath(const std::vector< std::string > &path)Produce stack based on string path Used to highlight geo volumes by browser hover event.Definition RGeomData.cxx:1665; ROOT::RGeomDescription::ScanNodesint ScanNodes(bool only_visible, int maxlvl, RGeomScanFunc_t func)Iterate over all nodes and call function for visible.Definition RGeomData.cxx:653; ROOT::RGeomDescription::IsBuildShapesint IsBuildShapes() constReturns true if binary 3D model build already by C++ server (default)Definition RGeomData.hxx:339; ROOT::RGeomDescription::ProduceS",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:37211,Deployability,configurat,configurationsDefinition,37211,"::RGeomDescription::GetJsonCompint GetJsonComp() constReturns JSON compression level for data transfer.Definition RGeomData.hxx:354; ROOT::RGeomDescription::Buildvoid Build(TGeoManager *mgr, const std::string &volname="""")Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes....Definition RGeomData.cxx:425; ROOT::RGeomDescription::fClickedStackstd::vector< int > fClickedStack! clicked element by stackDefinition RGeomData.hxx:250; ROOT::RGeomDescription::SetClickedItembool SetClickedItem(const std::vector< int > &stack)Definition RGeomData.hxx:419; ROOT::RGeomDrawingObject with full description for drawing geometry It includes list of visible items and list of nodes...Definition RGeomData.hxx:177; ROOT::RGeomDrawing::numnodesint numnodestotal number of nodes in descriptionDefinition RGeomData.hxx:180; ROOT::RGeomDrawing::visiblesstd::vector< RGeomVisible > visiblesall visible itemsDefinition RGeomData.hxx:182; ROOT::RGeomDrawing::cfgRGeomConfig * cfgcurrent configurationsDefinition RGeomData.hxx:179; ROOT::RGeomDrawing::nodesstd::vector< RGeomNode * > nodesall used nodes to display visible items and not known for clientDefinition RGeomData.hxx:181; ROOT::RGeomNodeBaseBase description of geometry node, required only to build hierarchy.Definition RGeomData.hxx:44; ROOT::RGeomNodeBase::IsVisiblebool IsVisible() constDefinition RGeomData.hxx:58; ROOT::RGeomNodeBase::visint visvisibility flag, 0 - off, 1 - only when level==0, 99 - alwaysDefinition RGeomData.hxx:49; ROOT::RGeomNodeBase::materialstd::string materialname of the materialDefinition RGeomData.hxx:53; ROOT::RGeomNodeBase::RGeomNodeBaseRGeomNodeBase(int _id=0)Definition RGeomData.hxx:56; ROOT::RGeomNodeBase::sortidint sortid! place in sorted array, to check cuts, or id of original node when used search structuresDefinition RGeomData.hxx:54; ROOT::RGeomNodeBase::nochldsbool nochldshow far in hierarchy depth should be scannedDefinition RGeomData.hxx:50; ROOT::RGeomNodeBase::c",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:2378,Energy Efficiency,reduce,reduced,2378," 47 std::string name; ///< node name; 48 std::vector<int> chlds; ///< list of childs id; 49 int vis{0}; ///< visibility flag, 0 - off, 1 - only when level==0, 99 - always; 50 bool nochlds{false}; ///< how far in hierarchy depth should be scanned; 51 ; 52 std::string color; ///< rgb code in hex format; 53 std::string material; ///< name of the material; 54 int sortid{0}; ///<! place in sorted array, to check cuts, or id of original node when used search structures; 55 ; 56 RGeomNodeBase(int _id = 0) : id(_id) {}; 57 ; 58 bool IsVisible() const { return vis > 0; }; 59 ; 60 /** Returns argument for regexp */; 61 const char *GetArg(int kind); 62 {; 63 if (kind == 1) return color.c_str();; 64 if (kind == 2) return material.c_str();; 65 return name.c_str();; 66 }; 67};; 68 ; 69/** Full node description including matrices and other attributes */; 70 ; 71class RGeomNode : public RGeomNodeBase {; 72public:; 73 std::vector<float> matr; ///< matrix for the node, can have reduced number of elements; 74 double vol{0}; ///<! volume estimation; 75 int nfaces{0}; ///<! number of shape faces; 76 int idshift{-1}; ///<! used to jump over then scan all geom hierarchy; 77 bool useflag{false}; ///<! extra flag, used for selection; 78 float opacity{1.}; ///<! opacity of the color; 79 ; 80 RGeomNode(int _id = 0) : RGeomNodeBase(_id) {}; 81 ; 82 /** True when there is shape and it can be displayed */; 83 bool CanDisplay() const { return (vol > 0.) && (nfaces > 0); }; 84};; 85 ; 86/** \class RGeoItem; 87\ingroup rbrowser; 88\brief Representation of single item in the geometry browser; 89*/; 90 ; 91class RGeoItem : public Browsable::RItem {; 92 ; 93protected:; 94 // this is part for browser, visible for I/O; 95 int id{0}; ///< node id; 96 std::string color; ///< color; 97 std::string material; ///< material; 98 int vis{0}; ///< visibility of logical node; 99 int pvis{0}; ///< visibility of physical node; 100 bool top{false}; ///< indicates if node selected as top; 101 ; 102public:; 103 ; 104 /",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:9484,Energy Efficiency,reduce,reduced,9484,"all nodes; 243 std::vector<RGeomNode> fDesc; ///<! converted description, send to client; 244 std::vector<RGeomNodeVisibility> fVisibility; ///<! custom visibility flags for physical nodes; 245 ; 246 TGeoVolume *fDrawVolume{nullptr};///<! select volume independent from TGeoManager; 247 std::vector<int> fSelectedStack; ///<! selected branch of geometry by stack; 248 ; 249 std::vector<int> fHighlightedStack; ///<! highlighted element by stack; 250 std::vector<int> fClickedStack; ///<! clicked element by stack; 251 ; 252 std::vector<int> fSortMap; ///<! nodes in order large -> smaller volume; 253 std::vector<ShapeDescr> fShapes; ///<! shapes with created descriptions; 254 ; 255 std::string fSearch; ///<! search string in hierarchy; 256 std::string fSearchJson; ///<! drawing json for search; 257 std::string fDrawJson; ///<! JSON with main nodes drawn by client; 258 int fDrawIdCut{0}; ///<! sortid used for selection of most-significant nodes; 259 int fActualLevel{0}; ///<! level can be reduced when selecting nodes; 260 bool fPreferredOffline{false}; ///<! indicates that full description should be provided to client; 261 int fJsonComp{0}; ///<! default JSON compression; 262 std::string fActiveItemName; ///<! name of item which should be activated in hierarchy; 263 ; 264 RGeomConfig fCfg; ///<! configuration parameter editable from GUI; 265 ; 266 TVirtualMutex *fMutex{nullptr}; ///<! external mutex used to protect all data; 267 ; 268 std::vector<std::pair<const void *, RGeomSignalFunc_t>> fSignals; ///<! registered signals; 269 ; 270 void PackMatrix(std::vector<float> &arr, TGeoMatrix *matr);; 271 ; 272 int MarkVisible(bool on_screen = false);; 273 ; 274 void ProduceIdShifts();; 275 ; 276 int ScanNodes(bool only_visible, int maxlvl, RGeomScanFunc_t func);; 277 ; 278 void ResetRndrInfos();; 279 ; 280 ShapeDescr &FindShapeDescr(TGeoShape *shape);; 281 ; 282 ShapeDescr &MakeShapeDescr(TGeoShape *shape);; 283 ; 284 int GetUsedNSegments(int min = 20);; 285 ; 286 int CountShapeF",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:28407,Energy Efficiency,reduce,reduced,28407,"nRGeomDescription()=default; ROOT::RGeomDescription::fSearchstd::string fSearch! search string in hierarchyDefinition RGeomData.hxx:255; ROOT::RGeomDescription::fSearchJsonstd::string fSearchJson! drawing json for searchDefinition RGeomData.hxx:256; ROOT::RGeomDescription::SavePrimitivevoid SavePrimitive(std::ostream &fs, const std::string &name)Save geometry configuration as C++ macro.Definition RGeomData.cxx:2143; ROOT::RGeomDescription::fHighlightedStackstd::vector< int > fHighlightedStack! highlighted element by stackDefinition RGeomData.hxx:249; ROOT::RGeomDescription::ClearAllPhysVisibilitybool ClearAllPhysVisibility()Reset all custom visibility settings.Definition RGeomData.cxx:2089; ROOT::RGeomDescription::MakeDrawingJsonstd::string MakeDrawingJson(RGeomDrawing &drawing, bool has_shapes=false)Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in thi...Definition RGeomData.cxx:1826; ROOT::RGeomDescription::fActualLevelint fActualLevel! level can be reduced when selecting nodesDefinition RGeomData.hxx:259; ROOT::RGeomDescription::GetVolumeTGeoVolume * GetVolume(int nodeid)Get volume for specified nodeid If specific volume was configured, it will be returned for nodeid==0.Definition RGeomData.cxx:583; ROOT::RGeomDescription::SetActiveItembool SetActiveItem(const std::string &itemname)Definition RGeomData.hxx:433; ROOT::RGeomDescription::GetNumNodesint GetNumNodes() constNumber of unique nodes in the geometry.Definition RGeomData.hxx:369; ROOT::RGeomDescription::SetTopVisiblevoid SetTopVisible(bool on=true)Set draw options as string for JSROOT TGeoPainter.Definition RGeomData.hxx:332; ROOT::RGeomDescription::ProduceDrawDatavoid ProduceDrawData()Collect all information required to draw geometry on the client This includes list of each visible no...Definition RGeomData.cxx:1358; ROOT::RGeomDescription::IsBuildbool IsBuild() constDefinition RGeomData.hxx:371; ROOT::RGeomDescription::SetNSegmentsvoid SetNSegments(int n=0)S",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:40332,Energy Efficiency,reduce,reduced,40332,"finition RGeomData.hxx:189; ROOT::RGeomNodeVisibilityCustom settings for physical Node visibility.Definition RGeomData.hxx:199; ROOT::RGeomNodeVisibility::RGeomNodeVisibilityRGeomNodeVisibility(const std::vector< int > &_stack, bool _visible)Definition RGeomData.hxx:203; ROOT::RGeomNodeVisibility::visiblebool visiblevisible flagDefinition RGeomData.hxx:202; ROOT::RGeomNodeVisibility::stackstd::vector< int > stackpath to the nodeDefinition RGeomData.hxx:201; ROOT::RGeomNodeFull node description including matrices and other attributes.Definition RGeomData.hxx:71; ROOT::RGeomNode::opacityfloat opacity! opacity of the colorDefinition RGeomData.hxx:78; ROOT::RGeomNode::idshiftint idshift! used to jump over then scan all geom hierarchyDefinition RGeomData.hxx:76; ROOT::RGeomNode::voldouble vol! volume estimationDefinition RGeomData.hxx:74; ROOT::RGeomNode::useflagbool useflag! extra flag, used for selectionDefinition RGeomData.hxx:77; ROOT::RGeomNode::matrstd::vector< float > matrmatrix for the node, can have reduced number of elementsDefinition RGeomData.hxx:73; ROOT::RGeomNode::RGeomNodeRGeomNode(int _id=0)Definition RGeomData.hxx:80; ROOT::RGeomNode::nfacesint nfaces! number of shape facesDefinition RGeomData.hxx:75; ROOT::RGeomNode::CanDisplaybool CanDisplay() constTrue when there is shape and it can be displayed.Definition RGeomData.hxx:83; ROOT::RGeomRawRenderInfoRender info with raw data.Definition RGeomData.hxx:127; ROOT::RGeomRawRenderInfo::idxstd::vector< int > idxvertex indexes, always trianglesDefinition RGeomData.hxx:130; ROOT::RGeomRawRenderInfo::rawstd::vector< unsigned char > rawfloat vertices as raw data, JSON_base64Definition RGeomData.hxx:129; ROOT::RGeomRawRenderInfo::~RGeomRawRenderInfo~RGeomRawRenderInfo() override=default; ROOT::RGeomRenderInfoBase class for render info block.Definition RGeomData.hxx:120; ROOT::RGeomRenderInfo::~RGeomRenderInfovirtual ~RGeomRenderInfo()=defaultvirtual destructor required for the I/O; ROOT::RGeomShapeRenderInfoRender ",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:43126,Integrability,interface,interface,43126,"mData.hxx:148; ROOT::RGeomVisible::colorstd::string colorcolor in rgb formatDefinition RGeomData.hxx:150; ROOT::RGeomVisible::RGeomVisibleRGeomVisible(int _nodeid, int _seqid, const std::vector< int > &_stack)Definition RGeomData.hxx:155; ROOT::RGeomVisible::riRGeomRenderInfo * rirender information for the shape, can be same for different nodesDefinition RGeomData.hxx:152; ROOT::RGeomVisible::opacitydouble opacityopacityDefinition RGeomData.hxx:151; ROOT::RGeomVisible::nodeidint nodeidselected node id,Definition RGeomData.hxx:147; ROOT::RGeomVisible::RGeomVisibleRGeomVisible()=default; ROOT::RGeomVisible::stackstd::vector< int > stackpath to the node, index in list of childsDefinition RGeomData.hxx:149; TGeoManagerThe manager class for any TGeo geometry.Definition TGeoManager.h:44; TGeoMatrixGeometrical transformation package.Definition TGeoMatrix.h:38; TGeoNodeA node represent a volume positioned inside another.They store links to both volumes and to the TGeoM...Definition TGeoNode.h:39; TGeoShapeBase abstract class for all shapes.Definition TGeoShape.h:25; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TLockGuardDefinition TVirtualMutex.h:70; TVirtualMutexThis class implements a mutex interface.Definition TVirtualMutex.h:32; bool; nconst Int_t nDefinition legend1.C:16; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::RGeomSignalFunc_tstd::function< void(const std::string &)> RGeomSignalFunc_tDefinition RGeomData.hxx:208; ROOT::RGeomLogExperimental::RLogChannel & RGeomLog()Log channel for Geomviewer diagnostics.Definition RGeomData.cxx:49; ROOT::RGeomScanFunc_tstd::function< bool(RGeomNode &, std::vector< int > &, bool, int)> RGeomScanFunc_tDefinition RGeomData.hxx:206. geomwebviewerincROOTRGeomData.hxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:07:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:5529,Modifiability,config,configured,5529,"5class RGeomShapeRenderInfo : public RGeomRenderInfo {; 136public:; 137 TGeoShape *shape{nullptr}; ///< original shape - can be much less than binary data; 138 ~RGeomShapeRenderInfo() override = default;; 139};; 140 ; 141 ; 142/** RGeomVisible contains description of visible node; 143 * It is path to the node plus reference to shape rendering data */; 144 ; 145class RGeomVisible {; 146public:; 147 int nodeid{0}; ///< selected node id,; 148 int seqid{0}; ///< sequence id, used for merging later; 149 std::vector<int> stack; ///< path to the node, index in list of childs; 150 std::string color; ///< color in rgb format; 151 double opacity{1}; ///< opacity; 152 RGeomRenderInfo *ri{nullptr}; ///< render information for the shape, can be same for different nodes; 153 ; 154 RGeomVisible() = default;; 155 RGeomVisible(int _nodeid, int _seqid, const std::vector<int> &_stack) : nodeid(_nodeid), seqid(_seqid), stack(_stack) {}; 156};; 157 ; 158 ; 159/** Configuration parameters which can be configured on the client; 160 * Send as is to-from client */; 161 ; 162class RGeomConfig {; 163public:; 164 int vislevel{0}; ///< visible level; 165 int maxnumnodes{0}; ///< maximal number of nodes; 166 int maxnumfaces{0}; ///< maximal number of faces; 167 bool showtop{false}; ///< show geometry top volume, off by default; 168 int build_shapes{1}; ///< when shapes build on server 0 - never, 1 - TGeoComposite, 2 - plus non-cylindrical, 3 - all; 169 int nsegm{0}; ///< number of segments for cylindrical shapes; 170 std::string drawopt; ///< draw options for TGeoPainter; 171};; 172 ; 173 ; 174/** Object with full description for drawing geometry; 175 * It includes list of visible items and list of nodes required to build them */; 176 ; 177class RGeomDrawing {; 178public:; 179 RGeomConfig *cfg{nullptr}; ///< current configurations; 180 int numnodes{0}; ///< total number of nodes in description; 181 std::vector<RGeomNode*> nodes; ///< all used nodes to display visible items and not known for clien",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:6352,Modifiability,config,configurations,6352," _nodeid, int _seqid, const std::vector<int> &_stack) : nodeid(_nodeid), seqid(_seqid), stack(_stack) {}; 156};; 157 ; 158 ; 159/** Configuration parameters which can be configured on the client; 160 * Send as is to-from client */; 161 ; 162class RGeomConfig {; 163public:; 164 int vislevel{0}; ///< visible level; 165 int maxnumnodes{0}; ///< maximal number of nodes; 166 int maxnumfaces{0}; ///< maximal number of faces; 167 bool showtop{false}; ///< show geometry top volume, off by default; 168 int build_shapes{1}; ///< when shapes build on server 0 - never, 1 - TGeoComposite, 2 - plus non-cylindrical, 3 - all; 169 int nsegm{0}; ///< number of segments for cylindrical shapes; 170 std::string drawopt; ///< draw options for TGeoPainter; 171};; 172 ; 173 ; 174/** Object with full description for drawing geometry; 175 * It includes list of visible items and list of nodes required to build them */; 176 ; 177class RGeomDrawing {; 178public:; 179 RGeomConfig *cfg{nullptr}; ///< current configurations; 180 int numnodes{0}; ///< total number of nodes in description; 181 std::vector<RGeomNode*> nodes; ///< all used nodes to display visible items and not known for client; 182 std::vector<RGeomVisible> visibles; ///< all visible items; 183};; 184 ; 185 ; 186/** Node information including rendering data */; 187class RGeomNodeInfo {; 188public:; 189 std::vector<std::string> path; ///< full path to node; 190 std::string node_type; ///< node class name; 191 std::string node_name; ///< node name; 192 std::string shape_type; ///< shape type (if any); 193 std::string shape_name; ///< shape class name (if any); 194 ; 195 RGeomRenderInfo *ri{nullptr}; ///< rendering information (if applicable); 196};; 197 ; 198/** Custom settings for physical Node visibility */; 199class RGeomNodeVisibility {; 200public:; 201 std::vector<int> stack; ///< path to the node; 202 bool visible{false}; ///< visible flag; 203 RGeomNodeVisibility(const std::vector<int> &_stack, bool _visible) : stack(_stack), vis",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:9797,Modifiability,config,configuration,9797,"ck; ///<! selected branch of geometry by stack; 248 ; 249 std::vector<int> fHighlightedStack; ///<! highlighted element by stack; 250 std::vector<int> fClickedStack; ///<! clicked element by stack; 251 ; 252 std::vector<int> fSortMap; ///<! nodes in order large -> smaller volume; 253 std::vector<ShapeDescr> fShapes; ///<! shapes with created descriptions; 254 ; 255 std::string fSearch; ///<! search string in hierarchy; 256 std::string fSearchJson; ///<! drawing json for search; 257 std::string fDrawJson; ///<! JSON with main nodes drawn by client; 258 int fDrawIdCut{0}; ///<! sortid used for selection of most-significant nodes; 259 int fActualLevel{0}; ///<! level can be reduced when selecting nodes; 260 bool fPreferredOffline{false}; ///<! indicates that full description should be provided to client; 261 int fJsonComp{0}; ///<! default JSON compression; 262 std::string fActiveItemName; ///<! name of item which should be activated in hierarchy; 263 ; 264 RGeomConfig fCfg; ///<! configuration parameter editable from GUI; 265 ; 266 TVirtualMutex *fMutex{nullptr}; ///<! external mutex used to protect all data; 267 ; 268 std::vector<std::pair<const void *, RGeomSignalFunc_t>> fSignals; ///<! registered signals; 269 ; 270 void PackMatrix(std::vector<float> &arr, TGeoMatrix *matr);; 271 ; 272 int MarkVisible(bool on_screen = false);; 273 ; 274 void ProduceIdShifts();; 275 ; 276 int ScanNodes(bool only_visible, int maxlvl, RGeomScanFunc_t func);; 277 ; 278 void ResetRndrInfos();; 279 ; 280 ShapeDescr &FindShapeDescr(TGeoShape *shape);; 281 ; 282 ShapeDescr &MakeShapeDescr(TGeoShape *shape);; 283 ; 284 int GetUsedNSegments(int min = 20);; 285 ; 286 int CountShapeFaces(TGeoShape *shape);; 287 ; 288 void CopyMaterialProperties(TGeoVolume *vol, RGeomNode &node);; 289 ; 290 void CollectNodes(RGeomDrawing &drawing, bool all_nodes = false);; 291 ; 292 std::string MakeDrawingJson(RGeomDrawing &drawing, bool has_shapes = false);; 293 ; 294 void ClearDescription();; 295 ; 296 void B",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:19568,Modifiability,config,configured,19568,"oItem::RGeoItemRGeoItem(const std::string &_name, int _nchilds, int _nodeid, const std::string &_color, const std::string &_material="""", int _vis=0, int _pvis=0)Definition RGeomData.hxx:107; ROOT::RGeoItem::colorstd::string colorcolorDefinition RGeomData.hxx:96; ROOT::RGeoItem::topbool topindicates if node selected as topDefinition RGeomData.hxx:100; ROOT::RGeoItem::SetTopvoid SetTop(bool on=true)Definition RGeomData.hxx:115; ROOT::RGeoItem::materialstd::string materialmaterialDefinition RGeomData.hxx:97; ROOT::RGeoItem::~RGeoItem~RGeoItem() override=default; ROOT::RGeoItem::pvisint pvisvisibility of physical nodeDefinition RGeomData.hxx:99; ROOT::RGeoItem::visint visvisibility of logical nodeDefinition RGeomData.hxx:98; ROOT::RGeoItem::idint idnode idDefinition RGeomData.hxx:95; ROOT::RGeoItem::RGeoItemRGeoItem()=defaultDefault constructor.; ROOT::RGeomBrowserIterIterator of hierarchical geometry structures.Definition RGeomData.cxx:60; ROOT::RGeomConfigConfiguration parameters which can be configured on the client Send as is to-from client.Definition RGeomData.hxx:162; ROOT::RGeomConfig::showtopbool showtopshow geometry top volume, off by defaultDefinition RGeomData.hxx:167; ROOT::RGeomConfig::maxnumfacesint maxnumfacesmaximal number of facesDefinition RGeomData.hxx:166; ROOT::RGeomConfig::vislevelint vislevelvisible levelDefinition RGeomData.hxx:164; ROOT::RGeomConfig::maxnumnodesint maxnumnodesmaximal number of nodesDefinition RGeomData.hxx:165; ROOT::RGeomConfig::drawoptstd::string drawoptdraw options for TGeoPainterDefinition RGeomData.hxx:170; ROOT::RGeomConfig::build_shapesint build_shapeswhen shapes build on server 0 - never, 1 - TGeoComposite, 2 - plus non-cylindrical,...Definition RGeomData.hxx:168; ROOT::RGeomConfig::nsegmint nsegmnumber of segments for cylindrical shapesDefinition RGeomData.hxx:169; ROOT::RGeomDescription::ShapeDescrDefinition RGeomData.hxx:214; ROOT::RGeomDescription::ShapeDescr::nfacesint nfaces! number of faces in render dataDefinitio",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:21548,Modifiability,config,configuration,21548,"taDefinition RGeomData.hxx:218; ROOT::RGeomDescription::ShapeDescr::resetvoid reset()Definition RGeomData.hxx:234; ROOT::RGeomDescription::ShapeDescr::has_rawbool has_raw() constDefinition RGeomData.hxx:224; ROOT::RGeomDescription::ShapeDescr::fShapeInfoRGeomShapeRenderInfo fShapeInfo! shape itself as infoDefinition RGeomData.hxx:220; ROOT::RGeomDescription::ShapeDescr::fShapeTGeoShape * fShape! original shapeDefinition RGeomData.hxx:217; ROOT::RGeomDescription::ShapeDescr::rndr_infoRGeomRenderInfo * rndr_info()Provide render info for visible item.Definition RGeomData.hxx:227; ROOT::RGeomDescription::ShapeDescr::fRawInfoRGeomRawRenderInfo fRawInfo! raw render infoDefinition RGeomData.hxx:219; ROOT::RGeomDescription::ShapeDescr::ShapeDescrShapeDescr(TGeoShape *s)Definition RGeomData.hxx:221; ROOT::RGeomDescription::ShapeDescr::has_shapebool has_shape() constDefinition RGeomData.hxx:223; ROOT::RGeomDescriptionDefinition RGeomData.hxx:210; ROOT::RGeomDescription::fCfgRGeomConfig fCfg! configuration parameter editable from GUIDefinition RGeomData.hxx:264; ROOT::RGeomDescription::fSignalsstd::vector< std::pair< const void *, RGeomSignalFunc_t > > fSignals! registered signalsDefinition RGeomData.hxx:268; ROOT::RGeomDescription::IsPhysNodeVisibleint IsPhysNodeVisible(const std::vector< int > &stack)Check if there special settings for specified physical node returns -1 if nothing is found.Definition RGeomData.cxx:2043; ROOT::RGeomDescription::fSelectedStackstd::vector< int > fSelectedStack! selected branch of geometry by stackDefinition RGeomData.hxx:247; ROOT::RGeomDescription::SetMaxVisNodesvoid SetMaxVisNodes(int cnt)Set maximal number of nodes which should be selected for drawing.Definition RGeomData.hxx:317; ROOT::RGeomDescription::ProcessBrowserRequeststd::string ProcessBrowserRequest(const std::string &req="""")Find description object for requested shape If not exists - will be created.Definition RGeomData.cxx:767; ROOT::RGeomDescription::fDescstd::vector< RGeomNode > f",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:27755,Modifiability,config,configuration,27755,"vector< ShapeDescr > fShapes! shapes with created descriptionsDefinition RGeomData.hxx:253; ROOT::RGeomDescription::GetSearchstd::string GetSearch() constDefinition RGeomData.hxx:383; ROOT::RGeomDescription::fJsonCompint fJsonComp! default JSON compressionDefinition RGeomData.hxx:261; ROOT::RGeomDescription::ChangeNodeVisibilitybool ChangeNodeVisibility(const std::vector< std::string > &path, bool on)Change visibility for specified element Returns true if changes was performed.Definition RGeomData.cxx:1850; ROOT::RGeomDescription::SetMutexvoid SetMutex(TVirtualMutex *mutex)Set mutex, it must be recursive one.Definition RGeomData.hxx:312; ROOT::RGeomDescription::RGeomDescriptionRGeomDescription()=default; ROOT::RGeomDescription::fSearchstd::string fSearch! search string in hierarchyDefinition RGeomData.hxx:255; ROOT::RGeomDescription::fSearchJsonstd::string fSearchJson! drawing json for searchDefinition RGeomData.hxx:256; ROOT::RGeomDescription::SavePrimitivevoid SavePrimitive(std::ostream &fs, const std::string &name)Save geometry configuration as C++ macro.Definition RGeomData.cxx:2143; ROOT::RGeomDescription::fHighlightedStackstd::vector< int > fHighlightedStack! highlighted element by stackDefinition RGeomData.hxx:249; ROOT::RGeomDescription::ClearAllPhysVisibilitybool ClearAllPhysVisibility()Reset all custom visibility settings.Definition RGeomData.cxx:2089; ROOT::RGeomDescription::MakeDrawingJsonstd::string MakeDrawingJson(RGeomDrawing &drawing, bool has_shapes=false)Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in thi...Definition RGeomData.cxx:1826; ROOT::RGeomDescription::fActualLevelint fActualLevel! level can be reduced when selecting nodesDefinition RGeomData.hxx:259; ROOT::RGeomDescription::GetVolumeTGeoVolume * GetVolume(int nodeid)Get volume for specified nodeid If specific volume was configured, it will be returned for nodeid==0.Definition RGeomData.cxx:583; ROOT::RGeomDescription::SetActiveItembool Set",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:28587,Modifiability,config,configured,28587,"cription::fSearchJsonstd::string fSearchJson! drawing json for searchDefinition RGeomData.hxx:256; ROOT::RGeomDescription::SavePrimitivevoid SavePrimitive(std::ostream &fs, const std::string &name)Save geometry configuration as C++ macro.Definition RGeomData.cxx:2143; ROOT::RGeomDescription::fHighlightedStackstd::vector< int > fHighlightedStack! highlighted element by stackDefinition RGeomData.hxx:249; ROOT::RGeomDescription::ClearAllPhysVisibilitybool ClearAllPhysVisibility()Reset all custom visibility settings.Definition RGeomData.cxx:2089; ROOT::RGeomDescription::MakeDrawingJsonstd::string MakeDrawingJson(RGeomDrawing &drawing, bool has_shapes=false)Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in thi...Definition RGeomData.cxx:1826; ROOT::RGeomDescription::fActualLevelint fActualLevel! level can be reduced when selecting nodesDefinition RGeomData.hxx:259; ROOT::RGeomDescription::GetVolumeTGeoVolume * GetVolume(int nodeid)Get volume for specified nodeid If specific volume was configured, it will be returned for nodeid==0.Definition RGeomData.cxx:583; ROOT::RGeomDescription::SetActiveItembool SetActiveItem(const std::string &itemname)Definition RGeomData.hxx:433; ROOT::RGeomDescription::GetNumNodesint GetNumNodes() constNumber of unique nodes in the geometry.Definition RGeomData.hxx:369; ROOT::RGeomDescription::SetTopVisiblevoid SetTopVisible(bool on=true)Set draw options as string for JSROOT TGeoPainter.Definition RGeomData.hxx:332; ROOT::RGeomDescription::ProduceDrawDatavoid ProduceDrawData()Collect all information required to draw geometry on the client This includes list of each visible no...Definition RGeomData.cxx:1358; ROOT::RGeomDescription::IsBuildbool IsBuild() constDefinition RGeomData.hxx:371; ROOT::RGeomDescription::SetNSegmentsvoid SetNSegments(int n=0)Set number of segments for cylindrical shapes, if 0 - default value will be used.Definition RGeomData.hxx:342; ROOT::RGeomDescription::GetTopVisiblebool ",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:31576,Modifiability,config,configuration,31576,"r< int > fSortMap! nodes in order large -> smaller volumeDefinition RGeomData.hxx:252; ROOT::RGeomDescription::ProduceJsonstd::string ProduceJson(bool all_nodes=false)Produce JSON string which can be directly used with build function from JSROOT to create three....Definition RGeomData.cxx:1230; ROOT::RGeomDescription::ClearDrawDatavoid ClearDrawData()Clear raw data. Will be rebuild when next connection will be established.Definition RGeomData.cxx:1370; ROOT::RGeomDescription::MakePathByStackstd::vector< std::string > MakePathByStack(const std::vector< int > &stack)Returns path string for provided stack.Definition RGeomData.cxx:1716; ROOT::RGeomDescription::fMutexTVirtualMutex * fMutex! external mutex used to protect all dataDefinition RGeomData.hxx:266; ROOT::RGeomDescription::AddSignalHandlervoid AddSignalHandler(const void *handler, RGeomSignalFunc_t func)Add signal handler.Definition RGeomData.cxx:312; ROOT::RGeomDescription::ChangeConfigurationbool ChangeConfiguration(const std::string &json)Change configuration by client Returns true if any parameter was really changed.Definition RGeomData.cxx:2105; ROOT::RGeomDescription::CopyMaterialPropertiesvoid CopyMaterialProperties(TGeoVolume *vol, RGeomNode &node)Copy material properties.Definition RGeomData.cxx:1159; ROOT::RGeomDescription::GetClickedItemstd::vector< int > GetClickedItem() constDefinition RGeomData.hxx:427; ROOT::RGeomDescription::MakeStackByPathstd::vector< int > MakeStackByPath(const std::vector< std::string > &path)Produce stack based on string path Used to highlight geo volumes by browser hover event.Definition RGeomData.cxx:1665; ROOT::RGeomDescription::ScanNodesint ScanNodes(bool only_visible, int maxlvl, RGeomScanFunc_t func)Iterate over all nodes and call function for visible.Definition RGeomData.cxx:653; ROOT::RGeomDescription::IsBuildShapesint IsBuildShapes() constReturns true if binary 3D model build already by C++ server (default)Definition RGeomData.hxx:339; ROOT::RGeomDescription::ProduceS",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:37211,Modifiability,config,configurationsDefinition,37211,"::RGeomDescription::GetJsonCompint GetJsonComp() constReturns JSON compression level for data transfer.Definition RGeomData.hxx:354; ROOT::RGeomDescription::Buildvoid Build(TGeoManager *mgr, const std::string &volname="""")Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes....Definition RGeomData.cxx:425; ROOT::RGeomDescription::fClickedStackstd::vector< int > fClickedStack! clicked element by stackDefinition RGeomData.hxx:250; ROOT::RGeomDescription::SetClickedItembool SetClickedItem(const std::vector< int > &stack)Definition RGeomData.hxx:419; ROOT::RGeomDrawingObject with full description for drawing geometry It includes list of visible items and list of nodes...Definition RGeomData.hxx:177; ROOT::RGeomDrawing::numnodesint numnodestotal number of nodes in descriptionDefinition RGeomData.hxx:180; ROOT::RGeomDrawing::visiblesstd::vector< RGeomVisible > visiblesall visible itemsDefinition RGeomData.hxx:182; ROOT::RGeomDrawing::cfgRGeomConfig * cfgcurrent configurationsDefinition RGeomData.hxx:179; ROOT::RGeomDrawing::nodesstd::vector< RGeomNode * > nodesall used nodes to display visible items and not known for clientDefinition RGeomData.hxx:181; ROOT::RGeomNodeBaseBase description of geometry node, required only to build hierarchy.Definition RGeomData.hxx:44; ROOT::RGeomNodeBase::IsVisiblebool IsVisible() constDefinition RGeomData.hxx:58; ROOT::RGeomNodeBase::visint visvisibility flag, 0 - off, 1 - only when level==0, 99 - alwaysDefinition RGeomData.hxx:49; ROOT::RGeomNodeBase::materialstd::string materialname of the materialDefinition RGeomData.hxx:53; ROOT::RGeomNodeBase::RGeomNodeBaseRGeomNodeBase(int _id=0)Definition RGeomData.hxx:56; ROOT::RGeomNodeBase::sortidint sortid! place in sorted array, to check cuts, or id of original node when used search structuresDefinition RGeomData.hxx:54; ROOT::RGeomNodeBase::nochldsbool nochldshow far in hierarchy depth should be scannedDefinition RGeomData.hxx:50; ROOT::RGeomNodeBase::c",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:23289,Performance,perform,performed,23289,"imal number of nodes which should be selected for drawing.Definition RGeomData.hxx:317; ROOT::RGeomDescription::ProcessBrowserRequeststd::string ProcessBrowserRequest(const std::string &req="""")Find description object for requested shape If not exists - will be created.Definition RGeomData.cxx:767; ROOT::RGeomDescription::fDescstd::vector< RGeomNode > fDesc! converted description, send to clientDefinition RGeomData.hxx:243; ROOT::RGeomDescription::PackMatrixvoid PackMatrix(std::vector< float > &arr, TGeoMatrix *matr)Pack matrix into vector, which can be send to client Following sizes can be used for vector: 0 - Iden...Definition RGeomData.cxx:341; ROOT::RGeomDescription::ProduceDrawingForbool ProduceDrawingFor(int nodeid, std::string &json, bool check_volume=false)Produce shape rendering data for given stack All nodes, which are referencing same shape will be tran...Definition RGeomData.cxx:1757; ROOT::RGeomDescription::MakeNodeInfostd::unique_ptr< RGeomNodeInfo > MakeNodeInfo(const std::vector< int > &stack)Change visibility for specified element Returns true if changes was performed.Definition RGeomData.cxx:1899; ROOT::RGeomDescription::HasDrawDatabool HasDrawData() constCheck if there is draw data available.Definition RGeomData.cxx:1331; ROOT::RGeomDescription::MakeIdsByStackstd::vector< int > MakeIdsByStack(const std::vector< int > &stack)Produce list of node ids for given stack If found nodes preselected - use their ids.Definition RGeomData.cxx:1683; ROOT::RGeomDescription::MarkVisibleint MarkVisible(bool on_screen=false)Set visibility flag for each nodes.Definition RGeomData.cxx:594; ROOT::RGeomDescription::SetVisLevelvoid SetVisLevel(int lvl=3)Set maximal visible level.Definition RGeomData.hxx:327; ROOT::RGeomDescription::IssueSignalvoid IssueSignal(const void *handler, const std::string &kind)Issue signal, which distributed on all handlers - excluding source handler.Definition RGeomData.cxx:293; ROOT::RGeomDescription::GetUsedNSegmentsint GetUsedNSegments(int",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:25872,Performance,cache,cached,25872,"eomData.hxx:244; ROOT::RGeomDescription::SetHighlightedItembool SetHighlightedItem(const std::vector< int > &stack)Definition RGeomData.hxx:405; ROOT::RGeomDescription::SetPreferredOfflinevoid SetPreferredOffline(bool on)Set preference of offline operations.Definition RGeomData.hxx:358; ROOT::RGeomDescription::SelectTopbool SelectTop(const std::vector< std::string > &path)Select top node by path Used by the client to change active node Returns true if selected node was ch...Definition RGeomData.cxx:1946; ROOT::RGeomDescription::GetMaxVisNodesint GetMaxVisNodes() constReturns maximal visible number of nodes, ignored when non-positive.Definition RGeomData.hxx:319; ROOT::RGeomDescription::GetVisLevelint GetVisLevel() constReturns maximal visible level.Definition RGeomData.hxx:329; ROOT::RGeomDescription::GetMaxVisFacesint GetMaxVisFaces() constReturns maximal visible number of faces, ignored when non-positive.Definition RGeomData.hxx:324; ROOT::RGeomDescription::ClearCachevoid ClearCache()Clear cached data, need to be clear when connection broken.Definition RGeomData.cxx:1381; ROOT::RGeomDescription::GetDrawJsonstd::string GetDrawJson() constDefinition RGeomData.hxx:382; ROOT::RGeomDescription::ClearDescriptionvoid ClearDescription()Clear geometry description.Definition RGeomData.cxx:478; ROOT::RGeomDescription::MakeStackByIdsstd::vector< int > MakeStackByIds(const std::vector< int > &ids)Creates stack for given array of ids, first element always should be 0.Definition RGeomData.cxx:1621; ROOT::RGeomDescription::SetMaxVisFacesvoid SetMaxVisFaces(int cnt)Set maximal number of faces which should be selected for drawing.Definition RGeomData.hxx:322; ROOT::RGeomDescription::IsPreferredOfflinebool IsPreferredOffline() constIs offline operations preferred.Definition RGeomData.hxx:361; ROOT::RGeomDescription::fShapesstd::vector< ShapeDescr > fShapes! shapes with created descriptionsDefinition RGeomData.hxx:253; ROOT::RGeomDescription::GetSearchstd::string GetSearch() constDefi",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:27180,Performance,perform,performed,27180,"ptionvoid ClearDescription()Clear geometry description.Definition RGeomData.cxx:478; ROOT::RGeomDescription::MakeStackByIdsstd::vector< int > MakeStackByIds(const std::vector< int > &ids)Creates stack for given array of ids, first element always should be 0.Definition RGeomData.cxx:1621; ROOT::RGeomDescription::SetMaxVisFacesvoid SetMaxVisFaces(int cnt)Set maximal number of faces which should be selected for drawing.Definition RGeomData.hxx:322; ROOT::RGeomDescription::IsPreferredOfflinebool IsPreferredOffline() constIs offline operations preferred.Definition RGeomData.hxx:361; ROOT::RGeomDescription::fShapesstd::vector< ShapeDescr > fShapes! shapes with created descriptionsDefinition RGeomData.hxx:253; ROOT::RGeomDescription::GetSearchstd::string GetSearch() constDefinition RGeomData.hxx:383; ROOT::RGeomDescription::fJsonCompint fJsonComp! default JSON compressionDefinition RGeomData.hxx:261; ROOT::RGeomDescription::ChangeNodeVisibilitybool ChangeNodeVisibility(const std::vector< std::string > &path, bool on)Change visibility for specified element Returns true if changes was performed.Definition RGeomData.cxx:1850; ROOT::RGeomDescription::SetMutexvoid SetMutex(TVirtualMutex *mutex)Set mutex, it must be recursive one.Definition RGeomData.hxx:312; ROOT::RGeomDescription::RGeomDescriptionRGeomDescription()=default; ROOT::RGeomDescription::fSearchstd::string fSearch! search string in hierarchyDefinition RGeomData.hxx:255; ROOT::RGeomDescription::fSearchJsonstd::string fSearchJson! drawing json for searchDefinition RGeomData.hxx:256; ROOT::RGeomDescription::SavePrimitivevoid SavePrimitive(std::ostream &fs, const std::string &name)Save geometry configuration as C++ macro.Definition RGeomData.cxx:2143; ROOT::RGeomDescription::fHighlightedStackstd::vector< int > fHighlightedStack! highlighted element by stackDefinition RGeomData.hxx:249; ROOT::RGeomDescription::ClearAllPhysVisibilitybool ClearAllPhysVisibility()Reset all custom visibility settings.Definition RGeomData.cxx:2",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:978,Safety,avoid,avoid,978,"/webviewer/inc/ROOT/RGeomData.hxx Source File. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. RGeomData.hxx. Go to the documentation of this file. 1// Author: Sergey Linev, 14.12.2018; 2 ; 3/*************************************************************************; 4 * Copyright (C) 1995-2023, Rene Brun and Fons Rademakers. *; 5 * All rights reserved. *; 6 * *; 7 * For the licensing terms see $ROOTSYS/LICENSE. *; 8 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 9 *************************************************************************/; 10 ; 11#ifndef ROOT7_RGeomData; 12#define ROOT7_RGeomData; 13 ; 14#include <vector>; 15#include <string>; 16#include <functional>; 17#include <memory>; 18 ; 19#include <ROOT/Browsable/RItem.hxx>; 20 ; 21#include ""TVirtualMutex.h""; 22 ; 23class TGeoNode;; 24class TGeoManager;; 25class TGeoShape;; 26class TGeoMatrix;; 27class TGeoVolume;; 28 ; 29// do not use namespace to avoid too long JSON; 30 ; 31namespace ROOT {; 32 ; 33class RGeomBrowserIter;; 34 ; 35namespace Experimental {; 36class RLogChannel;; 37} // namespace Experimental; 38 ; 39/// Log channel for Geomviewer diagnostics.; 40Experimental::RLogChannel &RGeomLog();; 41 ; 42/** Base description of geometry node, required only to build hierarchy */; 43 ; 44class RGeomNodeBase {; 45public:; 46 int id{0}; ///< node id, index in array; 47 std::string name; ///< node name; 48 std::vector<int> chlds; ///< list of childs id; 49 int vis{0}; ///< visibility flag, 0 - off, 1 - only when level==0, 99 - always; 50 bool nochlds{false}; ///< how far in hierarchy depth should be scanned; 51 ; 52 std::string color; ///< rgb code in hex format; 53 std::string material; ///< name of the material; 54 int sortid{0}; ///<! place in sorted array, to check cuts, or id of original node when used search structures; 55 ; 56 RGeomNodeBase(int _id = 0) : id(_id) {}; 57 ; 58 bool IsVisible() const { return vis > 0; }; 59 ; 60 /** Returns argument for regexp",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:14144,Safety,avoid,avoid,14144,"Segments(int n = 0) { TLockGuard lock(fMutex); fCfg.nsegm = n; }; 343 /** Return of segments for cylindrical shapes, if 0 - default value will be used */; 344 int GetNSegments() const { TLockGuard lock(fMutex); return fCfg.nsegm; }; 345 ; 346 /** Set draw options as string for JSROOT TGeoPainter */; 347 void SetDrawOptions(const std::string &opt = """") { TLockGuard lock(fMutex); fCfg.drawopt = opt; }; 348 /** Returns draw options, used for JSROOT TGeoPainter */; 349 std::string GetDrawOptions() const { TLockGuard lock(fMutex); return fCfg.drawopt; }; 350 ; 351 /** Set JSON compression level for data transfer */; 352 void SetJsonComp(int comp = 0) { TLockGuard lock(fMutex); fJsonComp = comp; }; 353 /** Returns JSON compression level for data transfer */; 354 int GetJsonComp() const { TLockGuard lock(fMutex); return fJsonComp; }; 355 ; 356 /** Set preference of offline operations.; 357 * Server provides more info to client from the begin on to avoid communication */; 358 void SetPreferredOffline(bool on) { TLockGuard lock(fMutex); fPreferredOffline = on; }; 359 /** Is offline operations preferred.; 360 * After get full description, client can do most operations without extra requests */; 361 bool IsPreferredOffline() const { TLockGuard lock(fMutex); return fPreferredOffline; }; 362 ; 363 ; 364 void Build(TGeoManager *mgr, const std::string &volname = """");; 365 ; 366 void Build(TGeoVolume *vol);; 367 ; 368 /** Number of unique nodes in the geometry */; 369 int GetNumNodes() const { TLockGuard lock(fMutex); return fDesc.size(); }; 370 ; 371 bool IsBuild() const { return GetNumNodes() > 0; }; 372 ; 373 std::string ProduceJson(bool all_nodes = false);; 374 ; 375 bool IsPrincipalEndNode(int nodeid);; 376 ; 377 std::string ProcessBrowserRequest(const std::string &req = """");; 378 ; 379 bool HasDrawData() const;; 380 void ProduceDrawData();; 381 void ProduceSearchData();; 382 std::string GetDrawJson() const { TLockGuard lock(fMutex); return fDrawJson; }; 383 std::string GetSear",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:3250,Testability,log,logical,3250,,MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:19252,Testability,log,logical,19252,"roxy.cxx:102; namechar name[80]Definition TGX11.cxx:110; TVirtualMutex.h; ROOT::Browsable::RItemRepresentation of single item in the browser.Definition RItem.hxx:23; ROOT::Browsable::RItem::RItemRItem()=default; ROOT::RGeoItemRepresentation of single item in the geometry browser.Definition RGeomData.hxx:91; ROOT::RGeoItem::RGeoItemRGeoItem(const std::string &_name, int _nchilds, int _nodeid, const std::string &_color, const std::string &_material="""", int _vis=0, int _pvis=0)Definition RGeomData.hxx:107; ROOT::RGeoItem::colorstd::string colorcolorDefinition RGeomData.hxx:96; ROOT::RGeoItem::topbool topindicates if node selected as topDefinition RGeomData.hxx:100; ROOT::RGeoItem::SetTopvoid SetTop(bool on=true)Definition RGeomData.hxx:115; ROOT::RGeoItem::materialstd::string materialmaterialDefinition RGeomData.hxx:97; ROOT::RGeoItem::~RGeoItem~RGeoItem() override=default; ROOT::RGeoItem::pvisint pvisvisibility of physical nodeDefinition RGeomData.hxx:99; ROOT::RGeoItem::visint visvisibility of logical nodeDefinition RGeomData.hxx:98; ROOT::RGeoItem::idint idnode idDefinition RGeomData.hxx:95; ROOT::RGeoItem::RGeoItemRGeoItem()=defaultDefault constructor.; ROOT::RGeomBrowserIterIterator of hierarchical geometry structures.Definition RGeomData.cxx:60; ROOT::RGeomConfigConfiguration parameters which can be configured on the client Send as is to-from client.Definition RGeomData.hxx:162; ROOT::RGeomConfig::showtopbool showtopshow geometry top volume, off by defaultDefinition RGeomData.hxx:167; ROOT::RGeomConfig::maxnumfacesint maxnumfacesmaximal number of facesDefinition RGeomData.hxx:166; ROOT::RGeomConfig::vislevelint vislevelvisible levelDefinition RGeomData.hxx:164; ROOT::RGeomConfig::maxnumnodesint maxnumnodesmaximal number of nodesDefinition RGeomData.hxx:165; ROOT::RGeomConfig::drawoptstd::string drawoptdraw options for TGeoPainterDefinition RGeomData.hxx:170; ROOT::RGeomConfig::build_shapesint build_shapeswhen shapes build on server 0 - never, 1 - TGeoComposite, 2 ",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:8402,Usability,clear,clear,8402,,MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RGeomData_8hxx_source.html:25896,Usability,clear,clear,25896,"eomData.hxx:244; ROOT::RGeomDescription::SetHighlightedItembool SetHighlightedItem(const std::vector< int > &stack)Definition RGeomData.hxx:405; ROOT::RGeomDescription::SetPreferredOfflinevoid SetPreferredOffline(bool on)Set preference of offline operations.Definition RGeomData.hxx:358; ROOT::RGeomDescription::SelectTopbool SelectTop(const std::vector< std::string > &path)Select top node by path Used by the client to change active node Returns true if selected node was ch...Definition RGeomData.cxx:1946; ROOT::RGeomDescription::GetMaxVisNodesint GetMaxVisNodes() constReturns maximal visible number of nodes, ignored when non-positive.Definition RGeomData.hxx:319; ROOT::RGeomDescription::GetVisLevelint GetVisLevel() constReturns maximal visible level.Definition RGeomData.hxx:329; ROOT::RGeomDescription::GetMaxVisFacesint GetMaxVisFaces() constReturns maximal visible number of faces, ignored when non-positive.Definition RGeomData.hxx:324; ROOT::RGeomDescription::ClearCachevoid ClearCache()Clear cached data, need to be clear when connection broken.Definition RGeomData.cxx:1381; ROOT::RGeomDescription::GetDrawJsonstd::string GetDrawJson() constDefinition RGeomData.hxx:382; ROOT::RGeomDescription::ClearDescriptionvoid ClearDescription()Clear geometry description.Definition RGeomData.cxx:478; ROOT::RGeomDescription::MakeStackByIdsstd::vector< int > MakeStackByIds(const std::vector< int > &ids)Creates stack for given array of ids, first element always should be 0.Definition RGeomData.cxx:1621; ROOT::RGeomDescription::SetMaxVisFacesvoid SetMaxVisFaces(int cnt)Set maximal number of faces which should be selected for drawing.Definition RGeomData.hxx:322; ROOT::RGeomDescription::IsPreferredOfflinebool IsPreferredOffline() constIs offline operations preferred.Definition RGeomData.hxx:361; ROOT::RGeomDescription::fShapesstd::vector< ShapeDescr > fShapes! shapes with created descriptionsDefinition RGeomData.hxx:253; ROOT::RGeomDescription::GetSearchstd::string GetSearch() constDefi",MatchSource.WIKI,doc/v632/RGeomData_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html
https://root.cern/doc/v632/RooLagrangianMorphFunc_8cxx.html:1142,Integrability,depend,dependency,1142," Namespaces |; Macros |; Typedefs |; Functions |; Variables ; RooLagrangianMorphFunc.cxx File Reference. #include ""Riostream.h""; #include ""RooAbsCollection.h""; #include ""RooArgList.h""; #include ""RooArgProxy.h""; #include ""RooArgSet.h""; #include ""RooBinning.h""; #include ""RooDataHist.h""; #include ""RooFormulaVar.h""; #include ""RooHistFunc.h""; #include ""RooLagrangianMorphFunc.h""; #include ""RooLinearCombination.h""; #include ""RooParamHistFunc.h""; #include ""RooProduct.h""; #include ""RooRealVar.h""; #include ""RooWorkspace.h""; #include ""RooFactoryWSTool.h""; #include ""ROOT/StringUtils.hxx""; #include ""TFile.h""; #include ""TFolder.h""; #include ""TH1.h""; #include ""TMap.h""; #include ""TParameter.h""; #include ""TRandom3.h""; #include <algorithm>; #include <array>; #include <cmath>; #include <cstddef>; #include <iostream>; #include <limits>; #include <map>; #include <memory>; #include <sstream>; #include <stdexcept>; #include <type_traits>; #include <typeinfo>; #include ""TDecompLU.h"". Include dependency graph for RooLagrangianMorphFunc.cxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  RooLagrangianMorphFunc::CacheElem;  ; struct  is_specialization< Test, Ref >;  ; struct  is_specialization< Ref< Args... >, Ref >;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  . Macros; #define NaN   std::numeric_limits<double>::quiet_NaN();  . Typedefs; typedef TMatrixD Matrix;  . Functions; Matrix diagMatrix (size_t n);  create a new diagonal matrix of size n ;  ; double invertMatrix (const Matrix &matrix, Matrix &inverse);  ; TMatrixD makeRootMatrix (const Matrix &in);  convert a matrix into a TMatrixD ;  ; Matrix makeSuperMatrix (const TMatrixD &in);  convert a TMatrixD into a Matrix ;  ; void printMatrix (const TMatrixD &mat);  write a matrix ;  ; template<class MatrixT > ; size_t size (const MatrixT &mat",MatchSource.WIKI,doc/v632/RooLagrangianMorphFunc_8cxx.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RooLagrangianMorphFunc_8cxx.html
https://root.cern/doc/v632/RRangeCast_8hxx_source.html:2815,Availability,error,error,2815," methods.; 65template <typename T>; 66constexpr auto hasBeginEnd(int) -> decltype(std::begin(std::declval<T>()), std::end(std::declval<T>()), true); 67{; 68 return true;; 69}; 70 ; 71template <typename>; 72constexpr bool hasBeginEnd(...); 73{; 74 return false;; 75}; 76 ; 77template <typename T, typename WrappedIterator_t, bool isDynamic>; 78class TypedIter {; 79 ; 80public:; 81 TypedIter(WrappedIterator_t const &iter) : fIter{iter} {}; 82 ; 83 TypedIter &operator++(); 84 {; 85 ++fIter;; 86 return *this;; 87 }; 88 TypedIter operator++(int); 89 {; 90 TypedIter tmp(*this);; 91 operator++();; 92 return tmp;; 93 }; 94 bool operator==(const TypedIter &rhs) const { return fIter == rhs.fIter; }; 95 bool operator!=(const TypedIter &rhs) const { return fIter != rhs.fIter; }; 96 ; 97 void swap(TypedIter &other) { fIter.swap(other.fIter); }; 98 ; 99 // We want to know at compile time whether dynamic_cast or static_cast is; 100 // used. First of all to avoid overhead, but also to avoid a compiler; 101 // error when using dynamic_cast on a non-polymorphic class. In C++17,; 102 // this can be done easily with `if constexpr`, but for the older; 103 // standards we have to use a more verbose alternative. Both ways are; 104 // explicitely implemented for different standards, so that when the; 105 // minimum C++ standard for ROOT is raised to C++17 it's easy to remember; 106 // that we can avoid much boilerplate code in this file.; 107#if (__cplusplus < 201700L); 108 T operator*() { return ROOT::Internal::RCast<T, isDynamic>::cast(*fIter); }; 109#else; 110 T operator*(); 111 {; 112 if constexpr (isDynamic) {; 113 return dynamic_cast<T>(*fIter);; 114 } else {; 115 if constexpr (std::is_polymorphic<RBaseType<T>>::value) {; 116 assert(dynamic_cast<T>(*fIter));; 117 }; 118 return static_cast<T>(*fIter);; 119 }; 120 }; 121#endif; 122 ; 123private:; 124 WrappedIterator_t fIter;; 125};; 126 ; 127} // namespace Internal; 128 ; 129/// Wraps any collection that can be used in range-based loops a",MatchSource.WIKI,doc/v632/RRangeCast_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RRangeCast_8hxx_source.html
https://root.cern/doc/v632/RRangeCast_8hxx_source.html:6082,Integrability,depend,depending,6082,"in range-based loops and applies; 157/// static_cast<T> to each element. This function can be used for example to; 158/// cast all objects in a RooAbsCollection when iterating over them.; 159/// Example:; 160/// ~~~{.cpp}; 161/// class ClassA {; 162/// public:; 163/// virtual ~ClassA() {}; 164/// };; 165/// class ClassB : public ClassA {; 166/// };; 167///; 168/// B b1, b2, b3;; 169/// std::vector<A const*> vec{&b1, &b2, &b3};; 170///; 171/// for(auto *b : ROOT::RangeStaticCast<B const*>(vec)) {; 172/// // do something with b; 173/// }; 174/// ~~~; 175/// Make sure to not use `auto const&` in the range-based loop, as this will; 176/// cause a range-loop-bind-reference warning with the clang compiler.; 177template <typename T, typename Range_t>; 178RRangeCast<T, false, Range_t> RangeStaticCast(Range_t &&coll); 179{; 180 return std::forward<Range_t>(coll);; 181}; 182// Overload for C-style arrays. It's not possible to make an overload of the; 183// RRangeCast constructor itself, because when the C-style array is forwarded; 184// it might decay depending on the compiler version.; 185template <typename T, typename U, std::size_t N>; 186RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]); 187{; 188 return std::span<U>(arr, arr + N);; 189}; 190 ; 191/// Takes any collection that can be used in range-based loops and applies; 192/// dynamic_cast<T> to each element. This function can be used for example to; 193/// cast all objects in a RooAbsCollection when iterating over them.; 194/// Example:; 195/// ~~~{.cpp}; 196///; 197/// class ClassA {; 198/// public:; 199/// virtual ~ClassA() {}; 200/// };; 201/// class ClassB : public ClassA {; 202/// };; 203///; 204/// A a1, a2;; 205/// B b1, b2, b3;; 206/// std::vector<A const*> vec{&b1, &a1, &b2, &a2, &b3};; 207///; 208/// for(auto *b : ROOT::RangeDynCast<B const*>(vec)) {; 209/// if(b) {; 210/// // do something with b; 211/// }; 212/// }; 213/// ~~~; 214/// Make sure to not use `auto const&` in the range-based loop, ",MatchSource.WIKI,doc/v632/RRangeCast_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RRangeCast_8hxx_source.html
https://root.cern/doc/v632/RRangeCast_8hxx_source.html:7456,Integrability,depend,depending,7456," to each element. This function can be used for example to; 193/// cast all objects in a RooAbsCollection when iterating over them.; 194/// Example:; 195/// ~~~{.cpp}; 196///; 197/// class ClassA {; 198/// public:; 199/// virtual ~ClassA() {}; 200/// };; 201/// class ClassB : public ClassA {; 202/// };; 203///; 204/// A a1, a2;; 205/// B b1, b2, b3;; 206/// std::vector<A const*> vec{&b1, &a1, &b2, &a2, &b3};; 207///; 208/// for(auto *b : ROOT::RangeDynCast<B const*>(vec)) {; 209/// if(b) {; 210/// // do something with b; 211/// }; 212/// }; 213/// ~~~; 214/// Make sure to not use `auto const&` in the range-based loop, as this will; 215/// cause a range-loop-bind-reference warning with the clang compiler.; 216template <typename T, typename Range_t>; 217RRangeCast<T, true, Range_t> RangeDynCast(Range_t &&coll); 218{; 219 return std::forward<Range_t>(coll);; 220}; 221// Overload for C-style arrays. It's not possible to make an overload of the; 222// RRangeCast constructor itself, because when the C-style array is forwarded; 223// it might decay depending on the compiler version.; 224template <typename T, typename U, std::size_t N>; 225RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]); 226{; 227 return std::span<U>(arr, arr + N);; 228}; 229 ; 230} // namespace ROOT; 231 ; 232#endif; RSpan.hxx; N#define N; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; ROOT::Internal::TypedIterDefinition RRangeCast.hxx:78; ROOT::Internal::TypedIter::operator*T operator*()Definition RRangeCast.hxx:108; ROOT::Internal::TypedIter::operator!=bool operator!=(const TypedIter &rhs) constDefinition RRangeCast.hxx:95; ROOT::Internal::TypedIter::TypedIterTypedIter(WrappedIterator_t const &iter)Definition RRangeCast.hxx:81; ROOT::Internal::TypedIter::operator==bool operator==(const TypedIter &rhs) constDefinition RRangeCast.hxx:94",MatchSource.WIKI,doc/v632/RRangeCast_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RRangeCast_8hxx_source.html
https://root.cern/doc/v632/RRangeCast_8hxx_source.html:2854,Modifiability,polymorphi,polymorphic,2854," methods.; 65template <typename T>; 66constexpr auto hasBeginEnd(int) -> decltype(std::begin(std::declval<T>()), std::end(std::declval<T>()), true); 67{; 68 return true;; 69}; 70 ; 71template <typename>; 72constexpr bool hasBeginEnd(...); 73{; 74 return false;; 75}; 76 ; 77template <typename T, typename WrappedIterator_t, bool isDynamic>; 78class TypedIter {; 79 ; 80public:; 81 TypedIter(WrappedIterator_t const &iter) : fIter{iter} {}; 82 ; 83 TypedIter &operator++(); 84 {; 85 ++fIter;; 86 return *this;; 87 }; 88 TypedIter operator++(int); 89 {; 90 TypedIter tmp(*this);; 91 operator++();; 92 return tmp;; 93 }; 94 bool operator==(const TypedIter &rhs) const { return fIter == rhs.fIter; }; 95 bool operator!=(const TypedIter &rhs) const { return fIter != rhs.fIter; }; 96 ; 97 void swap(TypedIter &other) { fIter.swap(other.fIter); }; 98 ; 99 // We want to know at compile time whether dynamic_cast or static_cast is; 100 // used. First of all to avoid overhead, but also to avoid a compiler; 101 // error when using dynamic_cast on a non-polymorphic class. In C++17,; 102 // this can be done easily with `if constexpr`, but for the older; 103 // standards we have to use a more verbose alternative. Both ways are; 104 // explicitely implemented for different standards, so that when the; 105 // minimum C++ standard for ROOT is raised to C++17 it's easy to remember; 106 // that we can avoid much boilerplate code in this file.; 107#if (__cplusplus < 201700L); 108 T operator*() { return ROOT::Internal::RCast<T, isDynamic>::cast(*fIter); }; 109#else; 110 T operator*(); 111 {; 112 if constexpr (isDynamic) {; 113 return dynamic_cast<T>(*fIter);; 114 } else {; 115 if constexpr (std::is_polymorphic<RBaseType<T>>::value) {; 116 assert(dynamic_cast<T>(*fIter));; 117 }; 118 return static_cast<T>(*fIter);; 119 }; 120 }; 121#endif; 122 ; 123private:; 124 WrappedIterator_t fIter;; 125};; 126 ; 127} // namespace Internal; 128 ; 129/// Wraps any collection that can be used in range-based loops a",MatchSource.WIKI,doc/v632/RRangeCast_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RRangeCast_8hxx_source.html
https://root.cern/doc/v632/RRangeCast_8hxx_source.html:2762,Safety,avoid,avoid,2762," methods.; 65template <typename T>; 66constexpr auto hasBeginEnd(int) -> decltype(std::begin(std::declval<T>()), std::end(std::declval<T>()), true); 67{; 68 return true;; 69}; 70 ; 71template <typename>; 72constexpr bool hasBeginEnd(...); 73{; 74 return false;; 75}; 76 ; 77template <typename T, typename WrappedIterator_t, bool isDynamic>; 78class TypedIter {; 79 ; 80public:; 81 TypedIter(WrappedIterator_t const &iter) : fIter{iter} {}; 82 ; 83 TypedIter &operator++(); 84 {; 85 ++fIter;; 86 return *this;; 87 }; 88 TypedIter operator++(int); 89 {; 90 TypedIter tmp(*this);; 91 operator++();; 92 return tmp;; 93 }; 94 bool operator==(const TypedIter &rhs) const { return fIter == rhs.fIter; }; 95 bool operator!=(const TypedIter &rhs) const { return fIter != rhs.fIter; }; 96 ; 97 void swap(TypedIter &other) { fIter.swap(other.fIter); }; 98 ; 99 // We want to know at compile time whether dynamic_cast or static_cast is; 100 // used. First of all to avoid overhead, but also to avoid a compiler; 101 // error when using dynamic_cast on a non-polymorphic class. In C++17,; 102 // this can be done easily with `if constexpr`, but for the older; 103 // standards we have to use a more verbose alternative. Both ways are; 104 // explicitely implemented for different standards, so that when the; 105 // minimum C++ standard for ROOT is raised to C++17 it's easy to remember; 106 // that we can avoid much boilerplate code in this file.; 107#if (__cplusplus < 201700L); 108 T operator*() { return ROOT::Internal::RCast<T, isDynamic>::cast(*fIter); }; 109#else; 110 T operator*(); 111 {; 112 if constexpr (isDynamic) {; 113 return dynamic_cast<T>(*fIter);; 114 } else {; 115 if constexpr (std::is_polymorphic<RBaseType<T>>::value) {; 116 assert(dynamic_cast<T>(*fIter));; 117 }; 118 return static_cast<T>(*fIter);; 119 }; 120 }; 121#endif; 122 ; 123private:; 124 WrappedIterator_t fIter;; 125};; 126 ; 127} // namespace Internal; 128 ; 129/// Wraps any collection that can be used in range-based loops a",MatchSource.WIKI,doc/v632/RRangeCast_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RRangeCast_8hxx_source.html
https://root.cern/doc/v632/RRangeCast_8hxx_source.html:2790,Safety,avoid,avoid,2790," methods.; 65template <typename T>; 66constexpr auto hasBeginEnd(int) -> decltype(std::begin(std::declval<T>()), std::end(std::declval<T>()), true); 67{; 68 return true;; 69}; 70 ; 71template <typename>; 72constexpr bool hasBeginEnd(...); 73{; 74 return false;; 75}; 76 ; 77template <typename T, typename WrappedIterator_t, bool isDynamic>; 78class TypedIter {; 79 ; 80public:; 81 TypedIter(WrappedIterator_t const &iter) : fIter{iter} {}; 82 ; 83 TypedIter &operator++(); 84 {; 85 ++fIter;; 86 return *this;; 87 }; 88 TypedIter operator++(int); 89 {; 90 TypedIter tmp(*this);; 91 operator++();; 92 return tmp;; 93 }; 94 bool operator==(const TypedIter &rhs) const { return fIter == rhs.fIter; }; 95 bool operator!=(const TypedIter &rhs) const { return fIter != rhs.fIter; }; 96 ; 97 void swap(TypedIter &other) { fIter.swap(other.fIter); }; 98 ; 99 // We want to know at compile time whether dynamic_cast or static_cast is; 100 // used. First of all to avoid overhead, but also to avoid a compiler; 101 // error when using dynamic_cast on a non-polymorphic class. In C++17,; 102 // this can be done easily with `if constexpr`, but for the older; 103 // standards we have to use a more verbose alternative. Both ways are; 104 // explicitely implemented for different standards, so that when the; 105 // minimum C++ standard for ROOT is raised to C++17 it's easy to remember; 106 // that we can avoid much boilerplate code in this file.; 107#if (__cplusplus < 201700L); 108 T operator*() { return ROOT::Internal::RCast<T, isDynamic>::cast(*fIter); }; 109#else; 110 T operator*(); 111 {; 112 if constexpr (isDynamic) {; 113 return dynamic_cast<T>(*fIter);; 114 } else {; 115 if constexpr (std::is_polymorphic<RBaseType<T>>::value) {; 116 assert(dynamic_cast<T>(*fIter));; 117 }; 118 return static_cast<T>(*fIter);; 119 }; 120 }; 121#endif; 122 ; 123private:; 124 WrappedIterator_t fIter;; 125};; 126 ; 127} // namespace Internal; 128 ; 129/// Wraps any collection that can be used in range-based loops a",MatchSource.WIKI,doc/v632/RRangeCast_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RRangeCast_8hxx_source.html
https://root.cern/doc/v632/RRangeCast_8hxx_source.html:3202,Safety,avoid,avoid,3202,"_t, bool isDynamic>; 78class TypedIter {; 79 ; 80public:; 81 TypedIter(WrappedIterator_t const &iter) : fIter{iter} {}; 82 ; 83 TypedIter &operator++(); 84 {; 85 ++fIter;; 86 return *this;; 87 }; 88 TypedIter operator++(int); 89 {; 90 TypedIter tmp(*this);; 91 operator++();; 92 return tmp;; 93 }; 94 bool operator==(const TypedIter &rhs) const { return fIter == rhs.fIter; }; 95 bool operator!=(const TypedIter &rhs) const { return fIter != rhs.fIter; }; 96 ; 97 void swap(TypedIter &other) { fIter.swap(other.fIter); }; 98 ; 99 // We want to know at compile time whether dynamic_cast or static_cast is; 100 // used. First of all to avoid overhead, but also to avoid a compiler; 101 // error when using dynamic_cast on a non-polymorphic class. In C++17,; 102 // this can be done easily with `if constexpr`, but for the older; 103 // standards we have to use a more verbose alternative. Both ways are; 104 // explicitely implemented for different standards, so that when the; 105 // minimum C++ standard for ROOT is raised to C++17 it's easy to remember; 106 // that we can avoid much boilerplate code in this file.; 107#if (__cplusplus < 201700L); 108 T operator*() { return ROOT::Internal::RCast<T, isDynamic>::cast(*fIter); }; 109#else; 110 T operator*(); 111 {; 112 if constexpr (isDynamic) {; 113 return dynamic_cast<T>(*fIter);; 114 } else {; 115 if constexpr (std::is_polymorphic<RBaseType<T>>::value) {; 116 assert(dynamic_cast<T>(*fIter));; 117 }; 118 return static_cast<T>(*fIter);; 119 }; 120 }; 121#endif; 122 ; 123private:; 124 WrappedIterator_t fIter;; 125};; 126 ; 127} // namespace Internal; 128 ; 129/// Wraps any collection that can be used in range-based loops and applies; 130/// `static_cast<T>` or `dynamic_cast<T>` to each element.; 131/// \tparam T The new type to convert to.; 132/// \tparam isDynamic If `true`, `dynamic_cast` is used, otherwise `static_cast` is used.; 133/// \tparam Range_t The type of the input range, which should be usually a reference type to avoid cop",MatchSource.WIKI,doc/v632/RRangeCast_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RRangeCast_8hxx_source.html
https://root.cern/doc/v632/RRangeCast_8hxx_source.html:4120,Safety,avoid,avoid,4120,"ndards, so that when the; 105 // minimum C++ standard for ROOT is raised to C++17 it's easy to remember; 106 // that we can avoid much boilerplate code in this file.; 107#if (__cplusplus < 201700L); 108 T operator*() { return ROOT::Internal::RCast<T, isDynamic>::cast(*fIter); }; 109#else; 110 T operator*(); 111 {; 112 if constexpr (isDynamic) {; 113 return dynamic_cast<T>(*fIter);; 114 } else {; 115 if constexpr (std::is_polymorphic<RBaseType<T>>::value) {; 116 assert(dynamic_cast<T>(*fIter));; 117 }; 118 return static_cast<T>(*fIter);; 119 }; 120 }; 121#endif; 122 ; 123private:; 124 WrappedIterator_t fIter;; 125};; 126 ; 127} // namespace Internal; 128 ; 129/// Wraps any collection that can be used in range-based loops and applies; 130/// `static_cast<T>` or `dynamic_cast<T>` to each element.; 131/// \tparam T The new type to convert to.; 132/// \tparam isDynamic If `true`, `dynamic_cast` is used, otherwise `static_cast` is used.; 133/// \tparam Range_t The type of the input range, which should be usually a reference type to avoid copying.; 134template <typename T, bool isDynamic, typename Range_t>; 135class RRangeCast {; 136 ; 137public:; 138 RRangeCast(Range_t &&inputRange) : fInputRange{inputRange}; 139 {; 140 static_assert(ROOT::Internal::hasBeginEnd<Range_t>(0),; 141 ""Type with no `begin` or `end` method passed to `RRangeCast`"");; 142 }; 143 ; 144 using const_iterator = Internal::TypedIter<T, decltype(std::cbegin(std::declval<Range_t>())), isDynamic>;; 145 const_iterator begin() const { return std::cbegin(fInputRange); }; 146 const_iterator end() const { return std::cend(fInputRange); }; 147 ; 148 using iterator = Internal::TypedIter<T, decltype(std::begin(std::declval<Range_t>())), isDynamic>;; 149 iterator begin() { return std::begin(fInputRange); }; 150 iterator end() { return std::end(fInputRange); }; 151 ; 152private:; 153 Range_t fInputRange;; 154};; 155 ; 156/// Takes any collection that can be used in range-based loops and applies; 157/// static_cast<T",MatchSource.WIKI,doc/v632/RRangeCast_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RRangeCast_8hxx_source.html
https://root.cern/doc/v632/RRangeCast_8hxx_source.html:1646,Testability,assert,assert,1646," 4/// \date 2021-08-04; 5 ; 6/*************************************************************************; 7 * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; 8 * All rights reserved. *; 9 * *; 10 * For the licensing terms see $ROOTSYS/LICENSE. *; 11 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 12 *************************************************************************/; 13 ; 14#ifndef ROOT_RRangeCast; 15#define ROOT_RRangeCast; 16 ; 17#include ""ROOT/RSpan.hxx""; 18 ; 19#include <cassert>; 20#include <iterator>; 21#include <type_traits>; 22#include <utility>; 23 ; 24namespace ROOT {; 25namespace Internal {; 26 ; 27template <typename T>; 28struct RBaseType {; 29 using type = typename std::remove_pointer<typename std::decay<T>::type>::type;; 30};; 31 ; 32#if (__cplusplus < 201700L); 33 ; 34template <typename T, bool isDynamic = true, bool isPolymorphic = std::is_polymorphic<RBaseType<T>>::value>; 35struct RCast {; 36 template <typename U>; 37 static T cast(U &&u); 38 {; 39 return dynamic_cast<T>(u);; 40 }; 41};; 42 ; 43template <typename T>; 44struct RCast<T, false, false> {; 45 template <typename U>; 46 static T cast(U &&u); 47 {; 48 return static_cast<T>(u);; 49 }; 50};; 51 ; 52template <typename T>; 53struct RCast<T, false, true> {; 54 template <typename U>; 55 static T cast(U &&u); 56 {; 57 assert(dynamic_cast<T>(u));; 58 return static_cast<T>(u);; 59 }; 60};; 61 ; 62#endif; 63 ; 64// For SFINAE-based checks for the existence of the `begin` and `end` methods.; 65template <typename T>; 66constexpr auto hasBeginEnd(int) -> decltype(std::begin(std::declval<T>()), std::end(std::declval<T>()), true); 67{; 68 return true;; 69}; 70 ; 71template <typename>; 72constexpr bool hasBeginEnd(...); 73{; 74 return false;; 75}; 76 ; 77template <typename T, typename WrappedIterator_t, bool isDynamic>; 78class TypedIter {; 79 ; 80public:; 81 TypedIter(WrappedIterator_t const &iter) : fIter{iter} {}; 82 ; 83 TypedIter &operator++(); 84 {; 85 ++fIter;; 86 ret",MatchSource.WIKI,doc/v632/RRangeCast_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RRangeCast_8hxx_source.html
https://root.cern/doc/v632/RRangeCast_8hxx_source.html:3544,Testability,assert,assert,3544,"Iter != rhs.fIter; }; 96 ; 97 void swap(TypedIter &other) { fIter.swap(other.fIter); }; 98 ; 99 // We want to know at compile time whether dynamic_cast or static_cast is; 100 // used. First of all to avoid overhead, but also to avoid a compiler; 101 // error when using dynamic_cast on a non-polymorphic class. In C++17,; 102 // this can be done easily with `if constexpr`, but for the older; 103 // standards we have to use a more verbose alternative. Both ways are; 104 // explicitely implemented for different standards, so that when the; 105 // minimum C++ standard for ROOT is raised to C++17 it's easy to remember; 106 // that we can avoid much boilerplate code in this file.; 107#if (__cplusplus < 201700L); 108 T operator*() { return ROOT::Internal::RCast<T, isDynamic>::cast(*fIter); }; 109#else; 110 T operator*(); 111 {; 112 if constexpr (isDynamic) {; 113 return dynamic_cast<T>(*fIter);; 114 } else {; 115 if constexpr (std::is_polymorphic<RBaseType<T>>::value) {; 116 assert(dynamic_cast<T>(*fIter));; 117 }; 118 return static_cast<T>(*fIter);; 119 }; 120 }; 121#endif; 122 ; 123private:; 124 WrappedIterator_t fIter;; 125};; 126 ; 127} // namespace Internal; 128 ; 129/// Wraps any collection that can be used in range-based loops and applies; 130/// `static_cast<T>` or `dynamic_cast<T>` to each element.; 131/// \tparam T The new type to convert to.; 132/// \tparam isDynamic If `true`, `dynamic_cast` is used, otherwise `static_cast` is used.; 133/// \tparam Range_t The type of the input range, which should be usually a reference type to avoid copying.; 134template <typename T, bool isDynamic, typename Range_t>; 135class RRangeCast {; 136 ; 137public:; 138 RRangeCast(Range_t &&inputRange) : fInputRange{inputRange}; 139 {; 140 static_assert(ROOT::Internal::hasBeginEnd<Range_t>(0),; 141 ""Type with no `begin` or `end` method passed to `RRangeCast`"");; 142 }; 143 ; 144 using const_iterator = Internal::TypedIter<T, decltype(std::cbegin(std::declval<Range_t>())), isDynamic>;; 14",MatchSource.WIKI,doc/v632/RRangeCast_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RRangeCast_8hxx_source.html
https://root.cern/doc/v632/RSha256_8hxx.html:333,Integrability,depend,dependency,333,". ROOT: core/foundation/res/ROOT/RSha256.hxx File Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Macros |; Typedefs |; Functions |; Variables ; RSha256.hxx File Reference. #include ""Rtypes.h""; #include <iostream>; #include <stdlib.h>; #include <stdint.h>. Include dependency graph for RSha256.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  ROOT::Internal::SHA256::sha256_t;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Internal;  ; namespace  ROOT::Internal::SHA256;  . Macros; #define _SHA256_UNROLL;  ; #define _SHA256_UNROLL2;  ; #define a(i)   T[(0 - (i)) & 7];  ; #define b(i)   T[(1 - (i)) & 7];  ; #define blk0(i)   (W[i] = data[i]);  ; #define blk2(i)   (W[i & 15] += s1(W[(i - 2) & 15]) + W[(i - 7) & 15] + s0(W[(i - 15) & 15]));  ; #define c(i)   T[(2 - (i)) & 7];  ; #define Ch(x, y, z)   (z ^ (x & (y ^ z)));  ; #define d(i)   T[(3 - (i)) & 7];  ; #define e(i)   T[(4 - (i)) & 7];  ; #define f(i)   T[(5 - (i)) & 7];  ; #define g(i)   T[(6 - (i)) & 7];  ; #define h(i)   T[(7 - (i)) & 7];  ; #define Maj(x, y, z)   ((x & y) | (z & (x | y)));  ; #define R(a, b, c, d, e, f, g, h, i);  ; #define ROTL16(v, n)   (U16V((uint16_t)(v) << (n)) | ((uint16_t)(v) >> (16 - (n))));  ; #define ROTL32(v, n)   (U32V((uint32_t)(v) << (n)) | ((uint32_t)(v) >> (32 - (n))));  ; #define ROTL64(v, n)   (U64V((uint64_t)(v) << (n)) | ((uint64_t)(v) >> (64 - (n))));  ; #define ROTL8(v, n)   (U8V((uint8_t)(v) << (n)) | ((uint8_t)(v) >> (8 - (n))));  ; #define ROTR16(v, n)   ROTL16(v, 16 - (n));  ; #define ROTR32(v, n)   ROTL32(v, 32 - (n));  ; #define ",MatchSource.WIKI,doc/v632/RSha256_8hxx.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RSha256_8hxx.html
https://root.cern/doc/v632/RSha256_8hxx_source.html:8191,Integrability,interface,interface,8191,"; 199#else; 200 for (j = 0; j < 8; j++); 201 state[j] += T[j];; 202#endif; 203 ; 204 /* Wipe variables */; 205 /* memset(W, 0, sizeof(W)); */; 206 /* memset(T, 0, sizeof(T)); */; 207}; 208 ; 209#undef S0; 210#undef S1; 211#undef s0; 212#undef s1; 213 ; 214static void sha256_write_byte_block(sha256_t *p); 215{; 216 uint32_t data32[16];; 217 unsigned i;; 218 for (i = 0; i < 16; i++); 219 data32[i] = ((uint32_t)(p->buffer[i * 4]) << 24) + ((uint32_t)(p->buffer[i * 4 + 1]) << 16) +; 220 ((uint32_t)(p->buffer[i * 4 + 2]) << 8) + ((uint32_t)(p->buffer[i * 4 + 3]));; 221 sha256_transform(p->state, data32);; 222}; 223 ; 224void sha256_update(sha256_t *p, const unsigned char *data, size_t size); 225{; 226 uint32_t curBufferPos = (uint32_t)p->count & 0x3F;; 227 while (size > 0) {; 228 p->buffer[curBufferPos++] = *data++;; 229 p->count++;; 230 size--;; 231 if (curBufferPos == 64) {; 232 curBufferPos = 0;; 233 sha256_write_byte_block(p);; 234 }; 235 }; 236}; 237 ; 238void sha256_final(sha256_t *p, unsigned char *digest); 239{; 240 uint64_t lenInBits = (p->count << 3);; 241 uint32_t curBufferPos = (uint32_t)p->count & 0x3F;; 242 unsigned i;; 243 p->buffer[curBufferPos++] = 0x80;; 244 while (curBufferPos != (64 - 8)) {; 245 curBufferPos &= 0x3F;; 246 if (curBufferPos == 0); 247 sha256_write_byte_block(p);; 248 p->buffer[curBufferPos++] = 0;; 249 }; 250 for (i = 0; i < 8; i++) {; 251 p->buffer[curBufferPos++] = (unsigned char)(lenInBits >> 56);; 252 lenInBits <<= 8;; 253 }; 254 sha256_write_byte_block(p);; 255 ; 256 for (i = 0; i < 8; i++) {; 257 *digest++ = (unsigned char)(p->state[i] >> 24);; 258 *digest++ = (unsigned char)(p->state[i] >> 16);; 259 *digest++ = (unsigned char)(p->state[i] >> 8);; 260 *digest++ = (unsigned char)(p->state[i]);; 261 }; 262 sha256_init(p);; 263}; 264 ; 265} // End NS SHA256; 266 ; 267void Sha256(const unsigned char *data, int len, ULong64_t *fDigest); 268{; 269 // Here the final cast is to match the interface of the C code and; 270 // the data member.",MatchSource.WIKI,doc/v632/RSha256_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RSha256_8hxx_source.html
https://root.cern/doc/v632/RSha256_8hxx_source.html:6335,Modifiability,variab,variables,6335,"tic void sha256_transform(uint32_t *state, const uint32_t *data); 159{; 160 uint32_t W[16] = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U};; 161 unsigned j;; 162#ifdef _SHA256_UNROLL2; 163 uint32_t a, b, c, d, e, f, g, h;; 164 a = state[0];; 165 b = state[1];; 166 c = state[2];; 167 d = state[3];; 168 e = state[4];; 169 f = state[5];; 170 g = state[6];; 171 h = state[7];; 172#else; 173 uint32_t T[8];; 174 for (j = 0; j < 8; j++); 175 T[j] = state[j];; 176#endif; 177 ; 178 for (j = 0; j < 64; j += 16) {; 179#if defined(_SHA256_UNROLL) || defined(_SHA256_UNROLL2); 180 RX_8(0);; 181 RX_8(8);; 182#else; 183 unsigned i;; 184 for (i = 0; i < 16; i++) {; 185 R(i);; 186 }; 187#endif; 188 }; 189 ; 190#ifdef _SHA256_UNROLL2; 191 state[0] += a;; 192 state[1] += b;; 193 state[2] += c;; 194 state[3] += d;; 195 state[4] += e;; 196 state[5] += f;; 197 state[6] += g;; 198 state[7] += h;; 199#else; 200 for (j = 0; j < 8; j++); 201 state[j] += T[j];; 202#endif; 203 ; 204 /* Wipe variables */; 205 /* memset(W, 0, sizeof(W)); */; 206 /* memset(T, 0, sizeof(T)); */; 207}; 208 ; 209#undef S0; 210#undef S1; 211#undef s0; 212#undef s1; 213 ; 214static void sha256_write_byte_block(sha256_t *p); 215{; 216 uint32_t data32[16];; 217 unsigned i;; 218 for (i = 0; i < 16; i++); 219 data32[i] = ((uint32_t)(p->buffer[i * 4]) << 24) + ((uint32_t)(p->buffer[i * 4 + 1]) << 16) +; 220 ((uint32_t)(p->buffer[i * 4 + 2]) << 8) + ((uint32_t)(p->buffer[i * 4 + 3]));; 221 sha256_transform(p->state, data32);; 222}; 223 ; 224void sha256_update(sha256_t *p, const unsigned char *data, size_t size); 225{; 226 uint32_t curBufferPos = (uint32_t)p->count & 0x3F;; 227 while (size > 0) {; 228 p->buffer[curBufferPos++] = *data++;; 229 p->count++;; 230 size--;; 231 if (curBufferPos == 64) {; 232 curBufferPos = 0;; 233 sha256_write_byte_block(p);; 234 }; 235 }; 236}; 237 ; 238void sha256_final(sha256_t *p, unsigned char *digest); 239{; 240 uint64_t lenInBits = (p->count << 3);; 241 uint32_t curBufferPo",MatchSource.WIKI,doc/v632/RSha256_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RSha256_8hxx_source.html
https://root.cern/doc/v632/RSha256_8hxx_source.html:2356,Performance,optimiz,optimization,2356,"; 44#define ROTL64(v, n) (U64V((uint64_t)(v) << (n)) | ((uint64_t)(v) >> (64 - (n)))); 45 ; 46#define ROTR32(v, n) ROTL32(v, 32 - (n)); 47#define ROTR64(v, n) ROTL64(v, 64 - (n)); 48 ; 49#endif; 50 ; 51#define ROTL8(v, n) (U8V((uint8_t)(v) << (n)) | ((uint8_t)(v) >> (8 - (n)))); 52 ; 53#define ROTL16(v, n) (U16V((uint16_t)(v) << (n)) | ((uint16_t)(v) >> (16 - (n)))); 54 ; 55#define ROTR8(v, n) ROTL8(v, 8 - (n)); 56#define ROTR16(v, n) ROTL16(v, 16 - (n)); 57 ; 58#define SHA256_DIGEST_SIZE 32; 59 ; 60typedef struct sha256_t {; 61 uint32_t state",MatchSource.WIKI,doc/v632/RSha256_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RSha256_8hxx_source.html
https://root.cern/doc/v632/RSha256_8hxx_source.html:8290,Security,hash,hash,8290,"[curBufferPos++] = 0x80;; 244 while (curBufferPos != (64 - 8)) {; 245 curBufferPos &= 0x3F;; 246 if (curBufferPos == 0); 247 sha256_write_byte_block(p);; 248 p->buffer[curBufferPos++] = 0;; 249 }; 250 for (i = 0; i < 8; i++) {; 251 p->buffer[curBufferPos++] = (unsigned char)(lenInBits >> 56);; 252 lenInBits <<= 8;; 253 }; 254 sha256_write_byte_block(p);; 255 ; 256 for (i = 0; i < 8; i++) {; 257 *digest++ = (unsigned char)(p->state[i] >> 24);; 258 *digest++ = (unsigned char)(p->state[i] >> 16);; 259 *digest++ = (unsigned char)(p->state[i] >> 8);; 260 *digest++ = (unsigned char)(p->state[i]);; 261 }; 262 sha256_init(p);; 263}; 264 ; 265} // End NS SHA256; 266 ; 267void Sha256(const unsigned char *data, int len, ULong64_t *fDigest); 268{; 269 // Here the final cast is to match the interface of the C code and; 270 // the data member. The length is the same!; 271 SHA256::sha256_t hash;; 272 SHA256::sha256_init(&hash);; 273 SHA256::sha256_update(&hash, data, len);; 274 SHA256::sha256_final(&hash, reinterpret_cast<unsigned char *>(fDigest));; 275}; 276 ; 277} // End NS Internal; 278} // End NS ROOT; 279 ; 280#endif; d#define d(i)Definition RSha256.hxx:102; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; c#define c(i)Definition RSha256.hxx:101; RX_8#define RX_8(i)Definition RSha256.hxx:115; g#define g(i)Definition RSha256.hxx:105; a#define a(i)Definition RSha256.hxx:99; h#define h(i)Definition RSha256.hxx:106; e#define e(i)Definition RSha256.hxx:103; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:81; Rtypes.h; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; lenOption_t Option_t TPoint TPoint const char GetTextMag",MatchSource.WIKI,doc/v632/RSha256_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RSha256_8hxx_source.html
https://root.cern/doc/v632/RSha256_8hxx_source.html:8322,Security,hash,hash,8322,"[curBufferPos++] = 0x80;; 244 while (curBufferPos != (64 - 8)) {; 245 curBufferPos &= 0x3F;; 246 if (curBufferPos == 0); 247 sha256_write_byte_block(p);; 248 p->buffer[curBufferPos++] = 0;; 249 }; 250 for (i = 0; i < 8; i++) {; 251 p->buffer[curBufferPos++] = (unsigned char)(lenInBits >> 56);; 252 lenInBits <<= 8;; 253 }; 254 sha256_write_byte_block(p);; 255 ; 256 for (i = 0; i < 8; i++) {; 257 *digest++ = (unsigned char)(p->state[i] >> 24);; 258 *digest++ = (unsigned char)(p->state[i] >> 16);; 259 *digest++ = (unsigned char)(p->state[i] >> 8);; 260 *digest++ = (unsigned char)(p->state[i]);; 261 }; 262 sha256_init(p);; 263}; 264 ; 265} // End NS SHA256; 266 ; 267void Sha256(const unsigned char *data, int len, ULong64_t *fDigest); 268{; 269 // Here the final cast is to match the interface of the C code and; 270 // the data member. The length is the same!; 271 SHA256::sha256_t hash;; 272 SHA256::sha256_init(&hash);; 273 SHA256::sha256_update(&hash, data, len);; 274 SHA256::sha256_final(&hash, reinterpret_cast<unsigned char *>(fDigest));; 275}; 276 ; 277} // End NS Internal; 278} // End NS ROOT; 279 ; 280#endif; d#define d(i)Definition RSha256.hxx:102; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; c#define c(i)Definition RSha256.hxx:101; RX_8#define RX_8(i)Definition RSha256.hxx:115; g#define g(i)Definition RSha256.hxx:105; a#define a(i)Definition RSha256.hxx:99; h#define h(i)Definition RSha256.hxx:106; e#define e(i)Definition RSha256.hxx:103; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:81; Rtypes.h; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; lenOption_t Option_t TPoint TPoint const char GetTextMag",MatchSource.WIKI,doc/v632/RSha256_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RSha256_8hxx_source.html
https://root.cern/doc/v632/RSha256_8hxx_source.html:8357,Security,hash,hash,8357,"[curBufferPos++] = 0x80;; 244 while (curBufferPos != (64 - 8)) {; 245 curBufferPos &= 0x3F;; 246 if (curBufferPos == 0); 247 sha256_write_byte_block(p);; 248 p->buffer[curBufferPos++] = 0;; 249 }; 250 for (i = 0; i < 8; i++) {; 251 p->buffer[curBufferPos++] = (unsigned char)(lenInBits >> 56);; 252 lenInBits <<= 8;; 253 }; 254 sha256_write_byte_block(p);; 255 ; 256 for (i = 0; i < 8; i++) {; 257 *digest++ = (unsigned char)(p->state[i] >> 24);; 258 *digest++ = (unsigned char)(p->state[i] >> 16);; 259 *digest++ = (unsigned char)(p->state[i] >> 8);; 260 *digest++ = (unsigned char)(p->state[i]);; 261 }; 262 sha256_init(p);; 263}; 264 ; 265} // End NS SHA256; 266 ; 267void Sha256(const unsigned char *data, int len, ULong64_t *fDigest); 268{; 269 // Here the final cast is to match the interface of the C code and; 270 // the data member. The length is the same!; 271 SHA256::sha256_t hash;; 272 SHA256::sha256_init(&hash);; 273 SHA256::sha256_update(&hash, data, len);; 274 SHA256::sha256_final(&hash, reinterpret_cast<unsigned char *>(fDigest));; 275}; 276 ; 277} // End NS Internal; 278} // End NS ROOT; 279 ; 280#endif; d#define d(i)Definition RSha256.hxx:102; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; c#define c(i)Definition RSha256.hxx:101; RX_8#define RX_8(i)Definition RSha256.hxx:115; g#define g(i)Definition RSha256.hxx:105; a#define a(i)Definition RSha256.hxx:99; h#define h(i)Definition RSha256.hxx:106; e#define e(i)Definition RSha256.hxx:103; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:81; Rtypes.h; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; lenOption_t Option_t TPoint TPoint const char GetTextMag",MatchSource.WIKI,doc/v632/RSha256_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RSha256_8hxx_source.html
https://root.cern/doc/v632/RSha256_8hxx_source.html:8402,Security,hash,hash,8402,"[curBufferPos++] = 0x80;; 244 while (curBufferPos != (64 - 8)) {; 245 curBufferPos &= 0x3F;; 246 if (curBufferPos == 0); 247 sha256_write_byte_block(p);; 248 p->buffer[curBufferPos++] = 0;; 249 }; 250 for (i = 0; i < 8; i++) {; 251 p->buffer[curBufferPos++] = (unsigned char)(lenInBits >> 56);; 252 lenInBits <<= 8;; 253 }; 254 sha256_write_byte_block(p);; 255 ; 256 for (i = 0; i < 8; i++) {; 257 *digest++ = (unsigned char)(p->state[i] >> 24);; 258 *digest++ = (unsigned char)(p->state[i] >> 16);; 259 *digest++ = (unsigned char)(p->state[i] >> 8);; 260 *digest++ = (unsigned char)(p->state[i]);; 261 }; 262 sha256_init(p);; 263}; 264 ; 265} // End NS SHA256; 266 ; 267void Sha256(const unsigned char *data, int len, ULong64_t *fDigest); 268{; 269 // Here the final cast is to match the interface of the C code and; 270 // the data member. The length is the same!; 271 SHA256::sha256_t hash;; 272 SHA256::sha256_init(&hash);; 273 SHA256::sha256_update(&hash, data, len);; 274 SHA256::sha256_final(&hash, reinterpret_cast<unsigned char *>(fDigest));; 275}; 276 ; 277} // End NS Internal; 278} // End NS ROOT; 279 ; 280#endif; d#define d(i)Definition RSha256.hxx:102; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; c#define c(i)Definition RSha256.hxx:101; RX_8#define RX_8(i)Definition RSha256.hxx:115; g#define g(i)Definition RSha256.hxx:105; a#define a(i)Definition RSha256.hxx:99; h#define h(i)Definition RSha256.hxx:106; e#define e(i)Definition RSha256.hxx:103; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:81; Rtypes.h; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; lenOption_t Option_t TPoint TPoint const char GetTextMag",MatchSource.WIKI,doc/v632/RSha256_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RSha256_8hxx_source.html
https://root.cern/doc/v632/RSha256_8hxx_source.html:1412,Testability,test,tests,1412,"ha256.hxx. Go to the documentation of this file. 1// Author: Danilo Piparo May 2018; 2// Inspired by public domain code of Igor Pavlov: https://github.com/jb55/sha256.c; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2018, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_RSHA; 13#define ROOT_RSHA; 14 ; 15#include ""Rtypes.h""; 16 ; 17#include <iostream>; 18#include <stdlib.h>; 19#include <stdint.h>; 20 ; 21 ; 22namespace ROOT {; 23namespace Internal {; 24namespace SHA256 {; 25 ; 26#ifdef _MSC_VER; 27 ; 28#define ROTL32(v, n) _rotl((v), (n)); 29#define ROTL64(v, n) _rotl64((v), (n)); 30 ; 31#define ROTR32(v, n) _rotr((v), (n)); 32#define ROTR64(v, n) _rotr64((v), (n)); 33 ; 34#else; 35 ; 36#define U8V(v) ((uint8_t)(v)&0xFFU); 37#define U16V(v) ((uint16_t)(v)&0xFFFFU); 38#define U32V(v) ((uint32_t)(v)&0xFFFFFFFFU); 39#define U64V(v) ((uint64_t)(v)&0xFFFFFFFFFFFFFFFFU); 40 ; 41#define ROTL32(v, n) (U32V((uint32_t)(v) << (n)) | ((uint32_t)(v) >> (32 - (n)))); 42 ; 43// tests fail if we don't have this cast...; 44#define ROTL64(v, n) (U64V((uint64_t)(v) << (n)) | ((uint64_t)(v) >> (64 - (n)))); 45 ; 46#define ROTR32(v, n) ROTL32(v, 32 - (n)); 47#define ROTR64(v, n) ROTL64(v, 64 - (n)); 48 ; 49#endif; 50 ; 51#define ROTL8(v, n) (U8V((uint8_t)(v) << (n)) | ((uint8_t)(v) >> (8 - (n)))); 52 ; 53#define ROTL16(v, n) (U16V((uint16_t)(v) << (n)) | ((uint16_t)(v) >> (16 - (n)))); 54 ; 55#define ROTR8(v, n) ROTL8(v, 8 - (n)); 56#define ROTR16(v, n) ROTL16(v, 16 - (n)); 57 ; 58#define SHA256_DIGEST_SIZE 32; 59 ; 60typedef struct sha256_t {; 61 uint32_t state[8];; 62 uint64_t count;; 63 unsigned char buffer[64];; 64} sha256_t;; 65 ; 66void sha256_init(sha256_t *p);; 67void sha256_update(sha256_t ",MatchSource.WIKI,doc/v632/RSha256_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RSha256_8hxx_source.html
https://root.cern/doc/v632/RtypesCore_8h.html:271,Integrability,depend,dependency,271,". ROOT: core/foundation/inc/RtypesCore.h File Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Typedefs |; Variables ; RtypesCore.h File Reference. #include <ROOT/RConfig.hxx>; #include ""DllImport.h""; #include <cstddef>. Include dependency graph for RtypesCore.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Typedefs; typedef float Angle_t;  ; typedef double Axis_t;  ; typedef bool Bool_t;  ; typedef unsigned char Byte_t;  ; typedef char Char_t;  ; typedef short Color_t;  ; typedef double Coord_t;  ; typedef double Double32_t;  ; typedef double Double_t;  ; typedef float Float16_t;  ; typedef float Float_t;  ; typedef short Font_t;  ; typedef int Int_t;  ; typedef long long Long64_t;  ; typedef long Long_t;  ; typedef long double LongDouble_t;  ; typedef long Longptr_t;  ; typedef short Marker_t;  ; typedef const char Option_t;  ; typedef float Real_t;  ; typedef short SCoord_t;  ; typedef int Seek_t;  ; typedef short Short_t;  ; typedef float Size_t;  ; typedef int Ssiz_t;  ; typedef double Stat_t;  ; typedef short Style_t;  ; typedef char Text_t;  ; typedef unsigned char UChar_t;  ; typedef unsigned int UInt_t;  ; typedef unsigned long long ULong64_t;  ; typedef unsigned long ULong_t;  ; typedef unsigned long ULongptr_t;  ; typedef unsigned short UShort_t;  ; typedef short Version_t;  ; typedef short Width_t;  . Variables; Int_t gDebug;  ; constexpr ULong_t kBitsPerByte = 8;  ; constexpr Bool_t kFALSE = false;  ; constexpr Int_t kMaxChar = kMaxUChar >> 1;  ; constexpr Int_t kMaxInt = Int_t(kMaxUInt >> 1);  ; constexpr Long_t kMaxLong = Long_t(kMaxULong >> 1);  ; constexpr Long64_t kMaxLong64 = Long64_t(kMaxULong64 >> 1);  ; constexpr Int_t kMaxShort = kMaxUShort >> 1;  ; constexpr Int_t kMaxUChar = 256;  ; constexpr UInt_t kMaxUIn",MatchSource.WIKI,doc/v632/RtypesCore_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RtypesCore_8h.html
https://root.cern/doc/v632/Rtypes_8h.html:1777,Availability,redundant,redundant,1777," not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Internal::ClassDefGenerateInitInstanceLocalInjector< T >;  ; class  ROOT::Internal::TCDGIILIBase;  ; class  ROOT::Internal::TDefaultInitBehavior;  ; struct  ROOT::Internal::THashConsistencyHolder< T >;  ; class  ROOT::Internal::TInitBehavior;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Internal;  . Macros; #define _ClassDefBase_(name, id, virtual_keyword, overrd);  Common part being called both by _ClassDefOutline_ and _ClassDefInline_. ;  ; #define _ClassDefInline_(name, id, virtual_keyword, overrd);  ; #define _ClassDefOutline_(name, id, virtual_keyword, overrd);  ; #define BIT(n)   (1ULL << (n));  ; #define ClassDef(name, id);  ; #define ClassDef2T2(name, Tmpl1, Tmpl2);  ; #define ClassDef3T2(name, Tmpl1, Tmpl2, Tmpl3);  ; #define ClassDefInline(name, id);  ; #define ClassDefInlineNV(name, id);  ; #define ClassDefInlineOverride(name, id);  ; #define ClassDefNV(name, id);  ; #define ClassDefOverride(name, id);  ; #define ClassDefT(name, id);  This ClassDefT is strictly redundant and is kept only for backward compatibility. ;  ; #define ClassDefT2(name, Tmpl);  ; #define ClassDefTNV(name, id);  ; #define ClassImp(name)   ClassImpUnique(name,default);  ; #define ClassImp2T(name, Tmpl1, Tmpl2)   templateClassImp(name);  ; #define ClassImp3T(name, Tmpl1, Tmpl2, Tmpl3)   templateClassImp(name);  ; #define ClassImpT(name, Tmpl)   templateClassImp(name);  ; #define ClassImpUnique(name, key);  ; #define CLRBIT(n, i)   ((n) &= ~BIT(i));  ; #define NamespaceImp(name)   NamespaceImpUnique(name,default);  ; #define NamespaceImpUnique(name, key);  Macro for Namespace. ;  ; #define R__ADD_INCLUDE_PATH(PATH);  ; #define R__ADD_LIBRARY_PATH(PATH);  ; #define R__CLING_PTRCHECK(ONOFF);  ; #define R__LOAD_LIBRARY(LIBRARY);  ; #",MatchSource.WIKI,doc/v632/Rtypes_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/Rtypes_8h.html
https://root.cern/doc/v632/Rtypes_8h.html:14268,Availability,redundant,redundant,14268,"57 of file Rtypes.h. ◆ ClassDefInlineOverride. #define ClassDefInlineOverride; (;  ; name, .  ; id . ). Value: _ClassDefInline_(name,id,,override) \; /** \cond HIDDEN_SYMBOLS */ static int DeclFileLine() { return __LINE__; } /** \endcond */. Definition at line 353 of file Rtypes.h. ◆ ClassDefNV. #define ClassDefNV; (;  ; name, .  ; id . ). Value: _ClassDefOutline_(name,id,,) \; /** \cond HIDDEN_SYMBOLS */ static int DeclFileLine() { return __LINE__; } /** \endcond */. Definition at line 345 of file Rtypes.h. ◆ ClassDefOverride. #define ClassDefOverride; (;  ; name, .  ; id . ). Value: _ClassDefOutline_(name,id,,override) \; /** \cond HIDDEN_SYMBOLS */ static int DeclFileLine() { return __LINE__; } /** \endcond */. Definition at line 341 of file Rtypes.h. ◆ ClassDefT. #define ClassDefT; (;  ; name, .  ; id . ). Value: _ClassDefOutline_(name,id,virtual,) \; /** \cond HIDDEN_SYMBOLS */ static int DeclFileLine() { return __LINE__; } /** \endcond */. This ClassDefT is strictly redundant and is kept only for backward compatibility. ; Deprecated:; Definition at line 404 of file Rtypes.h. ◆ ClassDefT2. #define ClassDefT2; (;  ; name, .  ; Tmpl . ). Definition at line 413 of file Rtypes.h. ◆ ClassDefTNV. #define ClassDefTNV; (;  ; name, .  ; id . ). Value: _ClassDefOutline_(name,id,virtual,) \; /** \cond HIDDEN_SYMBOLS */ static int DeclFileLine() { return __LINE__; } /** \endcond */. Definition at line 408 of file Rtypes.h. ◆ ClassImp. #define ClassImp; (;  ; name);    ClassImpUnique(name,default). Deprecated:; Definition at line 377 of file Rtypes.h. ◆ ClassImp2T. #define ClassImp2T; (;  ; name, .  ; Tmpl1, .  ; Tmpl2 . );    templateClassImp(name). Definition at line 432 of file Rtypes.h. ◆ ClassImp3T. #define ClassImp3T; (;  ; name, .  ; Tmpl1, .  ; Tmpl2, .  ; Tmpl3 . );    templateClassImp(name). Definition at line 441 of file Rtypes.h. ◆ ClassImpT. #define ClassImpT; (;  ; name, .  ; Tmpl . );    templateClassImp(name). Definition at line 424 of file Rtypes.h. ◆ Class",MatchSource.WIKI,doc/v632/Rtypes_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/Rtypes_8h.html
https://root.cern/doc/v632/Rtypes_8h.html:6348,Deployability,update,update,6348,"mplementation used by ClassDefInline to avoid requirement to include TBuffer.h. ;  ; const TInitBehavior * ROOT::Internal::DefineBehavior (void *, void *);  ; Bool_t ROOT::Internal::HasConsistentHashMember (const char *clName);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; Bool_t ROOT::Internal::HasConsistentHashMember (TClass &clRef);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; template<class Tmpl > ; TBuffer & operator<< (TBuffer &buf, const Tmpl *obj);  ; template<class Tmpl > ; TBuffer & operator>> (TBuffer &buf, Tmpl *&obj);  ; TNamed * ROOT::RegisterClassTemplate (const char *name, const char *file, Int_t line);  Global function to register the implementation file and line of a class template (i.e. ;  ; void ROOT::RemoveClass (const char *cname, TClass *cl);  Global function called by the dtor of a class's init class (see the ClassImp macro). ;  ; void ROOT::RemoveClassAlternate (ROOT::TClassAlt *);  ; void ROOT::ResetClassVersion (TClass *, const char *, Short_t);  Global function to update the version number. ;  ; template<class RootClass > ; Short_t ROOT::SetClassVersion (RootClass *);  . Macro Definition Documentation. ◆ _ClassDefBase_. #define _ClassDefBase_; (;  ; name, .  ; id, .  ; virtual_keyword, .  ; overrd . ). Value:private: \; static_assert(std::is_integral<decltype(id)>::value, \; ""ClassDef(Inline) macro: the specified class version number is not an integer.""); \; /** \cond HIDDEN_SYMBOLS */ virtual_keyword Bool_t CheckTObjectHashConsistency() const overrd \; { \; static std::atomic<UChar_t> recurseBlocker(0); \; if (R__likely(recurseBlocker >= 2)) { \; return ::ROOT::Internal::THashConsistencyHolder<decltype(*this)>::fgHashConsistency; \; } else if (recurseBlocker == 1) { \; return false; \; } else if (recurseBlocker++ == 0) { \; ::ROOT::Internal::THashConsistencyHolder<decltype(*this)>::fgHashConsistency = \; ::ROOT::Internal::HasConsistentHashMember(_QUOTE_(name)) || \; ::ROOT::Internal::H",MatchSource.WIKI,doc/v632/Rtypes_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/Rtypes_8h.html
https://root.cern/doc/v632/Rtypes_8h.html:484,Integrability,depend,dependency,484,". ROOT: core/base/inc/Rtypes.h File Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Macros |; Typedefs |; Enumerations |; Functions ; Rtypes.h File Reference. #include ""RtypesCore.h""; #include <cstdio>; #include ""strtok.h""; #include ""strlcpy.h""; #include ""snprintf.h""; #include <type_traits>; #include <typeinfo>; #include <atomic>; #include ""TGenericClassInfo.h""; #include ""TIsAProxy.h""; #include <string>. Include dependency graph for Rtypes.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Internal::ClassDefGenerateInitInstanceLocalInjector< T >;  ; class  ROOT::Internal::TCDGIILIBase;  ; class  ROOT::Internal::TDefaultInitBehavior;  ; struct  ROOT::Internal::THashConsistencyHolder< T >;  ; class  ROOT::Internal::TInitBehavior;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Internal;  . Macros; #define _ClassDefBase_(name, id, virtual_keyword, overrd);  Common part being called both by _ClassDefOutline_ and _ClassDefInline_. ;  ; #define _ClassDefInline_(name, id, virtual_keyword, overrd);  ; #define _ClassDefOutline_(name, id, virtual_keyword, overrd);  ; #define BIT(n)   (1ULL << (n));  ; #define ClassDef(name, id);  ; #define ClassDef2T2(name, Tmpl1, Tmpl2);  ; #define ClassDef3T2(name, Tmpl1, Tmpl2, Tmpl3);  ; #define ClassDefInline(name, id);  ; #define ClassDefInlineNV(name, id);  ; #define ClassDefInlineOverride(name, id);  ; #define ClassDefNV(name, id);  ; #define ClassDefOverride(name, id);  ; #define ClassDefT(name, id);  This ClassDefT is strictly redundant and is kept only for backward compatibility. ;  ; #define ClassDefT2(name, Tmpl);  ; #define ClassDefTNV(name, id);  ; #define ClassImp(name)   ClassImpUnique(name,default);  ; #define ClassImp2T(name, Tmpl1, Tmpl2",MatchSource.WIKI,doc/v632/Rtypes_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/Rtypes_8h.html
https://root.cern/doc/v632/Rtypes_8h.html:1777,Safety,redund,redundant,1777," not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Internal::ClassDefGenerateInitInstanceLocalInjector< T >;  ; class  ROOT::Internal::TCDGIILIBase;  ; class  ROOT::Internal::TDefaultInitBehavior;  ; struct  ROOT::Internal::THashConsistencyHolder< T >;  ; class  ROOT::Internal::TInitBehavior;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Internal;  . Macros; #define _ClassDefBase_(name, id, virtual_keyword, overrd);  Common part being called both by _ClassDefOutline_ and _ClassDefInline_. ;  ; #define _ClassDefInline_(name, id, virtual_keyword, overrd);  ; #define _ClassDefOutline_(name, id, virtual_keyword, overrd);  ; #define BIT(n)   (1ULL << (n));  ; #define ClassDef(name, id);  ; #define ClassDef2T2(name, Tmpl1, Tmpl2);  ; #define ClassDef3T2(name, Tmpl1, Tmpl2, Tmpl3);  ; #define ClassDefInline(name, id);  ; #define ClassDefInlineNV(name, id);  ; #define ClassDefInlineOverride(name, id);  ; #define ClassDefNV(name, id);  ; #define ClassDefOverride(name, id);  ; #define ClassDefT(name, id);  This ClassDefT is strictly redundant and is kept only for backward compatibility. ;  ; #define ClassDefT2(name, Tmpl);  ; #define ClassDefTNV(name, id);  ; #define ClassImp(name)   ClassImpUnique(name,default);  ; #define ClassImp2T(name, Tmpl1, Tmpl2)   templateClassImp(name);  ; #define ClassImp3T(name, Tmpl1, Tmpl2, Tmpl3)   templateClassImp(name);  ; #define ClassImpT(name, Tmpl)   templateClassImp(name);  ; #define ClassImpUnique(name, key);  ; #define CLRBIT(n, i)   ((n) &= ~BIT(i));  ; #define NamespaceImp(name)   NamespaceImpUnique(name,default);  ; #define NamespaceImpUnique(name, key);  Macro for Namespace. ;  ; #define R__ADD_INCLUDE_PATH(PATH);  ; #define R__ADD_LIBRARY_PATH(PATH);  ; #define R__CLING_PTRCHECK(ONOFF);  ; #define R__LOAD_LIBRARY(LIBRARY);  ; #",MatchSource.WIKI,doc/v632/Rtypes_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/Rtypes_8h.html
https://root.cern/doc/v632/Rtypes_8h.html:5328,Safety,avoid,avoid,5328,"LEN = 8192; , kBUFFERSIZE = 8192; , kItimerResolution = 10; };  . Functions; void ROOT::AddClass (const char *cname, Version_t id, const std::type_info &info, DictFuncPtr_t dict, Int_t pragmabits);  Global function called by the ctor of a class's init class (see the ClassImp macro). ;  ; ROOT::TClassAlt * ROOT::AddClassAlternate (const char *normName, const char *alternate);  Global function called by GenerateInitInstance. ;  ; void ROOT::Class_ShowMembers (TClass *cl, const void *obj, TMemberInspector &);  Indirect call to the implementation of ShowMember allowing [forward] declaration with out a full definition of the TClass class. ;  ; TClass * ROOT::CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void ROOT::Internal::DefaultStreamer (TBuffer &R__b, const TClass *cl, void *objpointer);  Default streamer implementation used by ClassDefInline to avoid requirement to include TBuffer.h. ;  ; const TInitBehavior * ROOT::Internal::DefineBehavior (void *, void *);  ; Bool_t ROOT::Internal::HasConsistentHashMember (const char *clName);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; Bool_t ROOT::Internal::HasConsistentHashMember (TClass &clRef);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; template<class Tmpl > ; TBuffer & operator<< (TBuffer &buf, const Tmpl *obj);  ; template<class Tmpl > ; TBuffer & operator>> (TBuffer &buf, Tmpl *&obj);  ; TNamed * ROOT::RegisterClassTemplate (const char *name, const char *file, Int_t line);  Global function to register the implementation file and line of a class template (i.e. ;  ; void ROOT::RemoveClass (const char *cname, TClass *cl);  Global function called by the dtor of a class's init class (see the ClassImp macro). ;  ; void ROOT::RemoveClassAlternate (ROOT::TClassAlt *);  ; void ",MatchSource.WIKI,doc/v632/Rtypes_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/Rtypes_8h.html
https://root.cern/doc/v632/Rtypes_8h.html:14268,Safety,redund,redundant,14268,"57 of file Rtypes.h. ◆ ClassDefInlineOverride. #define ClassDefInlineOverride; (;  ; name, .  ; id . ). Value: _ClassDefInline_(name,id,,override) \; /** \cond HIDDEN_SYMBOLS */ static int DeclFileLine() { return __LINE__; } /** \endcond */. Definition at line 353 of file Rtypes.h. ◆ ClassDefNV. #define ClassDefNV; (;  ; name, .  ; id . ). Value: _ClassDefOutline_(name,id,,) \; /** \cond HIDDEN_SYMBOLS */ static int DeclFileLine() { return __LINE__; } /** \endcond */. Definition at line 345 of file Rtypes.h. ◆ ClassDefOverride. #define ClassDefOverride; (;  ; name, .  ; id . ). Value: _ClassDefOutline_(name,id,,override) \; /** \cond HIDDEN_SYMBOLS */ static int DeclFileLine() { return __LINE__; } /** \endcond */. Definition at line 341 of file Rtypes.h. ◆ ClassDefT. #define ClassDefT; (;  ; name, .  ; id . ). Value: _ClassDefOutline_(name,id,virtual,) \; /** \cond HIDDEN_SYMBOLS */ static int DeclFileLine() { return __LINE__; } /** \endcond */. This ClassDefT is strictly redundant and is kept only for backward compatibility. ; Deprecated:; Definition at line 404 of file Rtypes.h. ◆ ClassDefT2. #define ClassDefT2; (;  ; name, .  ; Tmpl . ). Definition at line 413 of file Rtypes.h. ◆ ClassDefTNV. #define ClassDefTNV; (;  ; name, .  ; id . ). Value: _ClassDefOutline_(name,id,virtual,) \; /** \cond HIDDEN_SYMBOLS */ static int DeclFileLine() { return __LINE__; } /** \endcond */. Definition at line 408 of file Rtypes.h. ◆ ClassImp. #define ClassImp; (;  ; name);    ClassImpUnique(name,default). Deprecated:; Definition at line 377 of file Rtypes.h. ◆ ClassImp2T. #define ClassImp2T; (;  ; name, .  ; Tmpl1, .  ; Tmpl2 . );    templateClassImp(name). Definition at line 432 of file Rtypes.h. ◆ ClassImp3T. #define ClassImp3T; (;  ; name, .  ; Tmpl1, .  ; Tmpl2, .  ; Tmpl3 . );    templateClassImp(name). Definition at line 441 of file Rtypes.h. ◆ ClassImpT. #define ClassImpT; (;  ; name, .  ; Tmpl . );    templateClassImp(name). Definition at line 424 of file Rtypes.h. ◆ Class",MatchSource.WIKI,doc/v632/Rtypes_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/Rtypes_8h.html
https://root.cern/doc/v632/Rtypes_8h.html:9361,Security,access,accessing,9361," idOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize idDefinition TGWin32VirtualXProxy.cxx:94; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; namechar name[80]Definition TGX11.cxx:110; StreamerNVirtualvoid StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)Definition TStringLong.h:20; Class_Versionstatic constexpr Version_t Class_Version()Definition TStringLong.h:20; IsATClass * IsA() const overrideDefinition TStringLong.h:20; DeclFileNamestatic const char * DeclFileName()Definition TStringLong.h:20; TBufferBuffer base class used for serializing objects.Definition TBuffer.h:43; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TMemberInspectorAbstract base class for accessing the data-members of a class.Definition TMemberInspector.h:31; ROOT::Internal::THashConsistencyHolderDefinition Rtypes.h:255. Common part being called both by _ClassDefOutline_ and _ClassDefInline_. ; NoteDeclFileLine() is not part of it, since Cling uses that as trigger for associating as class title the comment string found right after the macro. ; Definition at line 271 of file Rtypes.h. ◆ _ClassDefInline_. #define _ClassDefInline_; (;  ; name, .  ; id, .  ; virtual_keyword, .  ; overrd . ). Value: _ClassDefBase_(name, id, virtual_keyword, overrd) public : \; /** \cond HIDDEN_SYMBOLS \deprecated */ static int ImplFileLine() { return -1; } /** \endcond */ \; /** \cond HIDDEN_SYMBOLS \deprecated */ static const char *ImplFileName() { return nullptr; } /** \endcond */\; /** \return Name of this class */ static const char *Class_Name() \; { \; return ::ROOT::Internal::ClassDefGenerateInitInstanceLocalInjector<name>::Name(); \; } \; /** \cond HIDDEN_SYMBOLS */ static TClass ",MatchSource.WIKI,doc/v632/Rtypes_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/Rtypes_8h.html
https://root.cern/doc/v632/Rtypes_8h_source.html:17177,Availability,redundant,redundant,17177," __LINE__; } /** \endcond */; 352 ; 353#define ClassDefInlineOverride(name,id) \; 354 _ClassDefInline_(name,id,,override) \; 355 /** \cond HIDDEN_SYMBOLS */ static int DeclFileLine() { return __LINE__; } /** \endcond */; 356 ; 357#define ClassDefInlineNV(name,id) \; 358 _ClassDefInline_(name,id,,) \; 359 /** \cond HIDDEN_SYMBOLS */ static int DeclFileLine() { return __LINE__; } /** \endcond */; 360 ; 361//#define _ClassDefInterp_(name,id) ClassDefInline(name,id); 362 ; 363#define R__UseDummy(name) \; 364 class _NAME2_(name,_c) { public: _NAME2_(name,_c)() { if (name) { } } }; 365 ; 366#define ClassImpUnique(name,key) \; 367 namespace ROOT { \; 368 /** \cond HIDDEN_SYMBOLS */ TGenericClassInfo *GenerateInitInstance(const name*); /** \endcond */ \; 369 namespace { \; 370 static int _R__UNIQUE_(_NAME2_(R__dummyint,key)) __attribute__((unused)) = \; 371 GenerateInitInstance((name*)0x0)->SetImplFile(__FILE__, __LINE__); \; 372 R__UseDummy(_R__UNIQUE_(_NAME2_(R__dummyint,key))); \; 373 } \; 374 }; 375 ; 376/// \deprecated; 377#define ClassImp(name) ClassImpUnique(name,default); 378 ; 379/// Macro for Namespace; 380#define NamespaceImpUnique(name,key) \; 381 namespace name { \; 382 namespace ROOTDict { \; 383 /** \cond HIDDEN_SYMBOLS */ \; 384 ::ROOT::TGenericClassInfo *GenerateInitInstance(); /** \endcond */ \; 385 namespace { \; 386 static int _R__UNIQUE_(_NAME2_(R__dummyint,key)) = \; 387 GenerateInitInstance()->SetImplFile(__FILE__, __LINE__); \; 388 R__UseDummy(_R__UNIQUE_(_NAME2_(R__dummyint,key))); \; 389 } \; 390 } \; 391 }; 392 ; 393#define NamespaceImp(name) NamespaceImpUnique(name,default); 394 ; 395//---- ClassDefT macros for templates with one template argument ---------------; 396// ClassDefT corresponds to ClassDef; 397// ClassDefT2 goes in the same header as ClassDefT but must be; 398// outside the class scope; 399// ClassImpT corresponds to ClassImp; 400 ; 401 ; 402/// This ClassDefT is strictly redundant and is kept only for; 403/// backward compatibility.",MatchSource.WIKI,doc/v632/Rtypes_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/Rtypes_8h_source.html
https://root.cern/doc/v632/Rtypes_8h_source.html:19990,Availability,error,errors,19990," 425 ; 426//---- ClassDefT macros for templates with two template arguments --------------; 427// ClassDef2T2 goes in the same header as ClassDefT but must be; 428// outside the class scope; 429// ClassImp2T corresponds to ClassImpT; 430 ; 431#define ClassDef2T2(name,Tmpl1,Tmpl2); 432#define ClassImp2T(name,Tmpl1,Tmpl2) templateClassImp(name); 433 ; 434 ; 435//---- ClassDefT macros for templates with three template arguments ------------; 436// ClassDef3T2 goes in the same header as ClassDefT but must be; 437// outside the class scope; 438// ClassImp3T corresponds to ClassImpT; 439 ; 440#define ClassDef3T2(name,Tmpl1,Tmpl2,Tmpl3); 441#define ClassImp3T(name,Tmpl1,Tmpl2,Tmpl3) templateClassImp(name); 442 ; 443 ; 444//---- Macro to set the class version of non instrumented classes --------------; 445 ; 446#define RootClassVersion(name,VersionNumber) \; 447namespace ROOT { /** \cond HIDDEN_SYMBOLS */ \; 448 TGenericClassInfo *GenerateInitInstance(const name*); /** \endcond */ \; 449 /** \cond HIDDEN_SYMBOLS */ \; 450 static Short_t _R__UNIQUE_(R__dummyVersionNumber) = \; 451 GenerateInitInstance((name*)0x0)->SetVersion(VersionNumber); \; 452 /** \endcond */ \; 453 R__UseDummy(_R__UNIQUE_(R__dummyVersionNumber)); \; 454}; 455 ; 456#define RootStreamer(name,STREAMER) \; 457namespace ROOT { \; 458 /** \cond HIDDEN_SYMBOLS */ \; 459 TGenericClassInfo *GenerateInitInstance(const name*); /** \endcond */ \; 460 /** \cond HIDDEN_SYMBOLS */ \; 461 static Short_t _R__UNIQUE_(R__dummyStreamer) = \; 462 GenerateInitInstance((name*)0x0)->SetStreamer(STREAMER); \; 463 /** \endcond */ \; 464 R__UseDummy(_R__UNIQUE_(R__dummyStreamer)); \; 465}; 466 ; 467//---- Macro to load a library into the interpreter --------------; 468// Call as R__LOAD_LIBRARY(libEvent); 469// This macro intentionally does not take string as argument, to; 470// prevent compilation errors with complex diagnostics due to; 471// TString BAD_DO_NOT_TRY = ""lib"";; 472// R__LOAD_LIBRARY(BAD_DO_NOT_TRY + ""BAD_DO_NOT_TRY.",MatchSource.WIKI,doc/v632/Rtypes_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/Rtypes_8h_source.html
https://root.cern/doc/v632/Rtypes_8h_source.html:31504,Deployability,update,update,31504,"ROOT::CreateClassTClass * CreateClass(const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il)Global function called by a class' static Dictionary() method (see the ClassDef macro).Definition TClass.cxx:5869; ROOT::DelFunc_tvoid(* DelFunc_t)(void *)Definition Rtypes.h:111; ROOT::AddClassvoid AddClass(const char *cname, Version_t id, const std::type_info &info, DictFuncPtr_t dict, Int_t pragmabits)Global function called by the ctor of a class's init class (see the ClassImp macro).Definition TClassTable.cxx:896; ROOT::RegisterClassTemplateTNamed * RegisterClassTemplate(const char *name, const char *file, Int_t line)Global function to register the implementation file and line of a class template (i....Definition TClassTable.cxx:1005; ROOT::NewArrFunc_tvoid *(* NewArrFunc_t)(Long_t size, void *arena)Definition Rtypes.h:110; ROOT::Class_ShowMembersvoid Class_ShowMembers(TClass *cl, const void *obj, TMemberInspector &)Indirect call to the implementation of ShowMember allowing [forward] declaration with out a full defi...Definition TClass.cxx:546; ROOT::ResetClassVersionvoid ResetClassVersion(TClass *, const char *, Short_t)Global function to update the version number.Definition TClassTable.cxx:951; ROOT::SetClassVersionShort_t SetClassVersion(RootClass *); ROOT::DelArrFunc_tvoid(* DelArrFunc_t)(void *)Definition Rtypes.h:112; ROOT::NewFunc_tvoid *(* NewFunc_t)(void *)Definition Rtypes.h:109; ROOT::MergeFunc_tLong64_t(* MergeFunc_t)(void *, TCollection *, TFileMergeInfo *)Definition Rtypes.h:115; ROOT::RemoveClassAlternatevoid RemoveClassAlternate(ROOT::TClassAlt *)Definition TClassTable.cxx:931; ROOT::Internal::THashConsistencyHolderDefinition Rtypes.h:255; ROOT::Internal::THashConsistencyHolder::fgHashConsistencystatic Bool_t fgHashConsistencyDefinition Rtypes.h:256. corebaseincRtypes.h. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:06:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/Rtypes_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/Rtypes_8h_source.html
https://root.cern/doc/v632/Rtypes_8h_source.html:5885,Integrability,interface,interface,5885,"onst char *ifil,; 123 Int_t dl, Int_t il);; 124 extern void AddClass(const char *cname, Version_t id, const std::type_info &info,; 125 DictFuncPtr_t dict, Int_t pragmabits);; 126 extern void RemoveClass(const char *cname, TClass *cl);; 127 extern void ResetClassVersion(TClass*, const char*, Short_t);; 128 extern ROOT::TClassAlt* AddClassAlternate(const char *normName, const char *alternate);; 129 extern void RemoveClassAlternate(ROOT::TClassAlt*);; 130 ; 131 extern TNamed *RegisterClassTemplate(const char *name,; 132 const char *file, Int_t line);; 133 ; 134 extern void Class_ShowMembers(TClass *cl, const void *obj, TMemberInspector&);; 135 ; 136#if 0; 137 // This function is only implemented in the dictionary file.; 138 // The parameter is 'only' for overloading resolution.; 139 // Used to be a template <class T> TGenericClassInfo *GenerateInitInstance(const T*);; 140 template <class T> TGenericClassInfo *GetClassInfo(const T* t) {; 141 TGenericClassInfo *GenerateInitInstance(const T*);; 142 return CreateInitInstance(t);; 143 };; 144#endif; 145 ; 146 namespace Internal {; 147 class TInitBehavior {; 148 // This class defines the interface for the class registration and; 149 // the TClass creation. To modify the default behavior, one would; 150 // inherit from this class and overload ROOT::DefineBehavior().; 151 // See TQObject.h and table/inc/Ttypes.h for examples.; 152 public:; 153 virtual ~TInitBehavior() { }; 154 ; 155 virtual void Register(const char *cname, Version_t id,; 156 const std::type_info &info,; 157 DictFuncPtr_t dict, Int_t pragmabits) const = 0;; 158 virtual void Unregister(const char *classname, TClass *cl) const = 0;; 159 virtual TClass *CreateClass(const char *cname, Version_t id,; 160 const std::type_info &info, TVirtualIsAProxy *isa,; 161 const char *dfil, const char *ifil,; 162 Int_t dl, Int_t il) const = 0;; 163 };; 164 ; 165 class TDefaultInitBehavior: public TInitBehavior {; 166 public:; 167 void Register(const char *cname, Version_t id,; 168",MatchSource.WIKI,doc/v632/Rtypes_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/Rtypes_8h_source.html
https://root.cern/doc/v632/Rtypes_8h_source.html:20910,Integrability,message,message,20910," \cond HIDDEN_SYMBOLS */ \; 461 static Short_t _R__UNIQUE_(R__dummyStreamer) = \; 462 GenerateInitInstance((name*)0x0)->SetStreamer(STREAMER); \; 463 /** \endcond */ \; 464 R__UseDummy(_R__UNIQUE_(R__dummyStreamer)); \; 465}; 466 ; 467//---- Macro to load a library into the interpreter --------------; 468// Call as R__LOAD_LIBRARY(libEvent); 469// This macro intentionally does not take string as argument, to; 470// prevent compilation errors with complex diagnostics due to; 471// TString BAD_DO_NOT_TRY = ""lib"";; 472// R__LOAD_LIBRARY(BAD_DO_NOT_TRY + ""BAD_DO_NOT_TRY.so"") // ERROR!; 473#ifdef __CLING__; 474# define _R_PragmaStr(x) _Pragma(#x); 475# define R__LOAD_LIBRARY(LIBRARY) _R_PragmaStr(cling load ( #LIBRARY )); 476# define R__ADD_INCLUDE_PATH(PATH) _R_PragmaStr(cling add_include_path ( #PATH )); 477# define R__ADD_LIBRARY_PATH(PATH) _R_PragmaStr(cling add_library_path ( #PATH )); 478#elif defined(R__WIN32); 479# define _R_PragmaStr(x) __pragma(#x); 480# define R__LOAD_LIBRARY(LIBRARY) _R_PragmaStr(comment(lib, #LIBRARY)); 481# define R__ADD_INCLUDE_PATH(PATH) _R_PragmaStr(comment(path, #PATH)); 482# define R__ADD_LIBRARY_PATH(PATH) _R_PragmaStr(comment(path, #PATH)); 483#else; 484// No way to inform linker though preprocessor :-(; 485// We could even inform the user:; 486/*; 487# define R__LOAD_LIBRARY(LIBRARY) \; 488 _R_PragmaStr(message ""Compiler cannot handle linking against "" #LIBRARY \; 489 "". Use -L and -l instead.""); 490*/; 491# define R__LOAD_LIBRARY(LIBRARY); 492# define R__ADD_INCLUDE_PATH(PATH); 493# define R__ADD_LIBRARY_PATH(PATH); 494#endif; 495 ; 496// Convenience macros to disable cling pointer check.; 497#ifdef __CLING__; 498# define R__CLING_PTRCHECK(ONOFF) __attribute__((annotate(""__cling__ptrcheck("" #ONOFF "")""))); 499#else; 500# define R__CLING_PTRCHECK(ONOFF); 501#endif; 502 ; 503#endif; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; RtypesCore.h; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefin",MatchSource.WIKI,doc/v632/Rtypes_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/Rtypes_8h_source.html
https://root.cern/doc/v632/Rtypes_8h_source.html:28610,Integrability,interface,interface,28610,"cts.Definition TBuffer.h:43; TClassStreamerDefinition TClassStreamer.h:26; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:2968; TCollectionCollection abstract base class.Definition TCollection.h:65; TDirectoryDescribe directory structure in memory.Definition TDirectory.h:45; TFileMergeInfoDefinition TFileMergeInfo.h:42; TMemberInspectorAbstract base class for accessing the data-members of a class.Definition TMemberInspector.h:31; TMemberStreamerDefinition TMemberStreamer.h:26; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjectMother of all ROOT objects.Definition TObject.h:41; TStringBasic string class.Definition TString.h:139; TVirtualCollectionProxyDefines a common interface to inspect/change the contents of an object that represents a collection.Definition TVirtualCollectionProxy.h:52; TVirtualIsAProxyDefinition TVirtualIsAProxy.h:27; bool; int; lineTLine * lineDefinition entrylistblock_figure1.C:235; ROOT::Internal::DefaultStreamervoid DefaultStreamer(TBuffer &R__b, const TClass *cl, void *objpointer)Default streamer implementation used by ClassDefInline to avoid requirement to include TBuffer....Definition TBuffer.cxx:30; ROOT::Internal::DefineBehaviorconst TInitBehavior * DefineBehavior(void *, void *)Definition TGenericClassInfo.cxx:44; ROOT::Internal::HasConsistentHashMemberBool_t HasConsistentHashMember(TClass &clRef)Return true is the Hash/RecursiveRemove setup is consistent, i.e.Definition TClass.cxx:7371; ROOT::Internal::GetDemangledTypeNamestd::string GetDemangledTypeName(const std::type_info &t)Definition TGenericClassInfo.cxx:30; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExe",MatchSource.WIKI,doc/v632/Rtypes_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/Rtypes_8h_source.html
https://root.cern/doc/v632/Rtypes_8h_source.html:6005,Modifiability,inherit,inherit,6005,"Class*, const char*, Short_t);; 128 extern ROOT::TClassAlt* AddClassAlternate(const char *normName, const char *alternate);; 129 extern void RemoveClassAlternate(ROOT::TClassAlt*);; 130 ; 131 extern TNamed *RegisterClassTemplate(const char *name,; 132 const char *file, Int_t line);; 133 ; 134 extern void Class_ShowMembers(TClass *cl, const void *obj, TMemberInspector&);; 135 ; 136#if 0; 137 // This function is only implemented in the dictionary file.; 138 // The parameter is 'only' for overloading resolution.; 139 // Used to be a template <class T> TGenericClassInfo *GenerateInitInstance(const T*);; 140 template <class T> TGenericClassInfo *GetClassInfo(const T* t) {; 141 TGenericClassInfo *GenerateInitInstance(const T*);; 142 return CreateInitInstance(t);; 143 };; 144#endif; 145 ; 146 namespace Internal {; 147 class TInitBehavior {; 148 // This class defines the interface for the class registration and; 149 // the TClass creation. To modify the default behavior, one would; 150 // inherit from this class and overload ROOT::DefineBehavior().; 151 // See TQObject.h and table/inc/Ttypes.h for examples.; 152 public:; 153 virtual ~TInitBehavior() { }; 154 ; 155 virtual void Register(const char *cname, Version_t id,; 156 const std::type_info &info,; 157 DictFuncPtr_t dict, Int_t pragmabits) const = 0;; 158 virtual void Unregister(const char *classname, TClass *cl) const = 0;; 159 virtual TClass *CreateClass(const char *cname, Version_t id,; 160 const std::type_info &info, TVirtualIsAProxy *isa,; 161 const char *dfil, const char *ifil,; 162 Int_t dl, Int_t il) const = 0;; 163 };; 164 ; 165 class TDefaultInitBehavior: public TInitBehavior {; 166 public:; 167 void Register(const char *cname, Version_t id,; 168 const std::type_info &info,; 169 DictFuncPtr_t dict, Int_t pragmabits) const override {; 170 ROOT::AddClass(cname, id, info, dict, pragmabits);; 171 }; 172 ; 173 void Unregister(const char *classname, TClass *cl) const override {; 174 ROOT::RemoveClass(classname, cl);; ",MatchSource.WIKI,doc/v632/Rtypes_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/Rtypes_8h_source.html
https://root.cern/doc/v632/Rtypes_8h_source.html:9602,Performance,load,load,9602,"00namespace ROOT { namespace Internal {; 201 ; 202class TCDGIILIBase {; 203public:; 204 // All implemented in TGenericClassInfo.cxx.; 205 static void SetInstance(::ROOT::TGenericClassInfo& R__instance,; 206 NewFunc_t, NewArrFunc_t, DelFunc_t, DelArrFunc_t, DesFunc_t);; 207 static void SetName(const std::string& name, std::string& nameMember);; 208 static void SetfgIsA(atomic_TClass_ptr& isA, TClass*(*dictfun)());; 209};; 210 ; 211template <typename T>; 212class ClassDefGenerateInitInstanceLocalInjector:; 213 public TCDGIILIBase {; 214 static atomic_TClass_ptr fgIsA;; 215 static ::ROOT::TGenericClassInfo *fgGenericInfo;; 216 public:; 217 static void *New(void *p) { return p ? new(p) T : new T; };; 218 static void *NewArray(Long_t nElements, void *p) {; 219 return p ? new(p) T[nElements] : new T[nElements]; }; 220 static void Delete(void *p) { delete ((T*)p); }; 221 static void DeleteArray(void *p) { delete[] ((T*)p); }; 222 static void Destruct(void *p) { ((T*)p)->~T(); }; 223 static ::ROOT::TGenericClassInfo *GenerateInitInstanceLocal() {; 224 static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy<T>(nullptr);; 225 static ::ROOT::TGenericClassInfo; 226 R__instance(T::Class_Name(), T::Class_Version(),; 227 T::DeclFileName(), T::DeclFileLine(),; 228 typeid(T), ::ROOT::Internal::DefineBehavior((T*)nullptr, (T*)nullptr),; 229 &T::Dictionary, isa_proxy, 0, sizeof(T) );; 230 SetInstance(R__instance, &New, &NewArray, &Delete, &DeleteArray, &Destruct);; 231 return &R__instance;; 232 }; 233 // We need a reference to the template instance static member in a concrete function in order; 234 // to force its instantiation (even before the function is actually run); 235 // Since we do have a reference to Dictionary (in T::Dictionary), using fgGenericInfo; 236 // here will insure that it is initialized at process start or library load time.; 237 static TClass *Dictionary() { fgIsA = fgGenericInfo->GetClass(); return fgIsA; }; 238 static TClass *Class() { SetfgIsA(fgIsA,",MatchSource.WIKI,doc/v632/Rtypes_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/Rtypes_8h_source.html
https://root.cern/doc/v632/Rtypes_8h_source.html:19802,Performance,load,load,19802," 425 ; 426//---- ClassDefT macros for templates with two template arguments --------------; 427// ClassDef2T2 goes in the same header as ClassDefT but must be; 428// outside the class scope; 429// ClassImp2T corresponds to ClassImpT; 430 ; 431#define ClassDef2T2(name,Tmpl1,Tmpl2); 432#define ClassImp2T(name,Tmpl1,Tmpl2) templateClassImp(name); 433 ; 434 ; 435//---- ClassDefT macros for templates with three template arguments ------------; 436// ClassDef3T2 goes in the same header as ClassDefT but must be; 437// outside the class scope; 438// ClassImp3T corresponds to ClassImpT; 439 ; 440#define ClassDef3T2(name,Tmpl1,Tmpl2,Tmpl3); 441#define ClassImp3T(name,Tmpl1,Tmpl2,Tmpl3) templateClassImp(name); 442 ; 443 ; 444//---- Macro to set the class version of non instrumented classes --------------; 445 ; 446#define RootClassVersion(name,VersionNumber) \; 447namespace ROOT { /** \cond HIDDEN_SYMBOLS */ \; 448 TGenericClassInfo *GenerateInitInstance(const name*); /** \endcond */ \; 449 /** \cond HIDDEN_SYMBOLS */ \; 450 static Short_t _R__UNIQUE_(R__dummyVersionNumber) = \; 451 GenerateInitInstance((name*)0x0)->SetVersion(VersionNumber); \; 452 /** \endcond */ \; 453 R__UseDummy(_R__UNIQUE_(R__dummyVersionNumber)); \; 454}; 455 ; 456#define RootStreamer(name,STREAMER) \; 457namespace ROOT { \; 458 /** \cond HIDDEN_SYMBOLS */ \; 459 TGenericClassInfo *GenerateInitInstance(const name*); /** \endcond */ \; 460 /** \cond HIDDEN_SYMBOLS */ \; 461 static Short_t _R__UNIQUE_(R__dummyStreamer) = \; 462 GenerateInitInstance((name*)0x0)->SetStreamer(STREAMER); \; 463 /** \endcond */ \; 464 R__UseDummy(_R__UNIQUE_(R__dummyStreamer)); \; 465}; 466 ; 467//---- Macro to load a library into the interpreter --------------; 468// Call as R__LOAD_LIBRARY(libEvent); 469// This macro intentionally does not take string as argument, to; 470// prevent compilation errors with complex diagnostics due to; 471// TString BAD_DO_NOT_TRY = ""lib"";; 472// R__LOAD_LIBRARY(BAD_DO_NOT_TRY + ""BAD_DO_NOT_TRY.",MatchSource.WIKI,doc/v632/Rtypes_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/Rtypes_8h_source.html
https://root.cern/doc/v632/Rtypes_8h_source.html:20258,Performance,load,load,20258," \cond HIDDEN_SYMBOLS */ \; 461 static Short_t _R__UNIQUE_(R__dummyStreamer) = \; 462 GenerateInitInstance((name*)0x0)->SetStreamer(STREAMER); \; 463 /** \endcond */ \; 464 R__UseDummy(_R__UNIQUE_(R__dummyStreamer)); \; 465}; 466 ; 467//---- Macro to load a library into the interpreter --------------; 468// Call as R__LOAD_LIBRARY(libEvent); 469// This macro intentionally does not take string as argument, to; 470// prevent compilation errors with complex diagnostics due to; 471// TString BAD_DO_NOT_TRY = ""lib"";; 472// R__LOAD_LIBRARY(BAD_DO_NOT_TRY + ""BAD_DO_NOT_TRY.so"") // ERROR!; 473#ifdef __CLING__; 474# define _R_PragmaStr(x) _Pragma(#x); 475# define R__LOAD_LIBRARY(LIBRARY) _R_PragmaStr(cling load ( #LIBRARY )); 476# define R__ADD_INCLUDE_PATH(PATH) _R_PragmaStr(cling add_include_path ( #PATH )); 477# define R__ADD_LIBRARY_PATH(PATH) _R_PragmaStr(cling add_library_path ( #PATH )); 478#elif defined(R__WIN32); 479# define _R_PragmaStr(x) __pragma(#x); 480# define R__LOAD_LIBRARY(LIBRARY) _R_PragmaStr(comment(lib, #LIBRARY)); 481# define R__ADD_INCLUDE_PATH(PATH) _R_PragmaStr(comment(path, #PATH)); 482# define R__ADD_LIBRARY_PATH(PATH) _R_PragmaStr(comment(path, #PATH)); 483#else; 484// No way to inform linker though preprocessor :-(; 485// We could even inform the user:; 486/*; 487# define R__LOAD_LIBRARY(LIBRARY) \; 488 _R_PragmaStr(message ""Compiler cannot handle linking against "" #LIBRARY \; 489 "". Use -L and -l instead.""); 490*/; 491# define R__LOAD_LIBRARY(LIBRARY); 492# define R__ADD_INCLUDE_PATH(PATH); 493# define R__ADD_LIBRARY_PATH(PATH); 494#endif; 495 ; 496// Convenience macros to disable cling pointer check.; 497#ifdef __CLING__; 498# define R__CLING_PTRCHECK(ONOFF) __attribute__((annotate(""__cling__ptrcheck("" #ONOFF "")""))); 499#else; 500# define R__CLING_PTRCHECK(ONOFF); 501#endif; 502 ; 503#endif; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; RtypesCore.h; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefin",MatchSource.WIKI,doc/v632/Rtypes_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/Rtypes_8h_source.html
https://root.cern/doc/v632/Rtypes_8h_source.html:27882,Performance,load,load,27882,":TInitBehaviorDefinition Rtypes.h:147; ROOT::Internal::TInitBehavior::Unregistervirtual void Unregister(const char *classname, TClass *cl) const =0; ROOT::Internal::TInitBehavior::CreateClassvirtual TClass * CreateClass(const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il) const =0; ROOT::Internal::TInitBehavior::~TInitBehaviorvirtual ~TInitBehavior()Definition Rtypes.h:153; ROOT::Internal::TInitBehavior::Registervirtual void Register(const char *cname, Version_t id, const std::type_info &info, DictFuncPtr_t dict, Int_t pragmabits) const =0; ROOT::TClassAltDefinition TClassTable.cxx:128; TBufferBuffer base class used for serializing objects.Definition TBuffer.h:43; TClassStreamerDefinition TClassStreamer.h:26; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:2968; TCollectionCollection abstract base class.Definition TCollection.h:65; TDirectoryDescribe directory structure in memory.Definition TDirectory.h:45; TFileMergeInfoDefinition TFileMergeInfo.h:42; TMemberInspectorAbstract base class for accessing the data-members of a class.Definition TMemberInspector.h:31; TMemberStreamerDefinition TMemberStreamer.h:26; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjectMother of all ROOT objects.Definition TObject.h:41; TStringBasic string class.Definition TString.h:139; TVirtualCollectionProxyDefines a common interface to inspect/change the contents of an object that represents a collection.Definition TVirtualCollectionProxy.h:52; TVirtualIsAProxyDefinition TVirtualIsAProxy.h:27; bool; int; lineTLine * lineDefinition entrylistblock_figure1.C:235; ROOT::Internal::DefaultStreamervoid DefaultStr",MatchSource.WIKI,doc/v632/Rtypes_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/Rtypes_8h_source.html
https://root.cern/doc/v632/Rtypes_8h_source.html:17177,Safety,redund,redundant,17177," __LINE__; } /** \endcond */; 352 ; 353#define ClassDefInlineOverride(name,id) \; 354 _ClassDefInline_(name,id,,override) \; 355 /** \cond HIDDEN_SYMBOLS */ static int DeclFileLine() { return __LINE__; } /** \endcond */; 356 ; 357#define ClassDefInlineNV(name,id) \; 358 _ClassDefInline_(name,id,,) \; 359 /** \cond HIDDEN_SYMBOLS */ static int DeclFileLine() { return __LINE__; } /** \endcond */; 360 ; 361//#define _ClassDefInterp_(name,id) ClassDefInline(name,id); 362 ; 363#define R__UseDummy(name) \; 364 class _NAME2_(name,_c) { public: _NAME2_(name,_c)() { if (name) { } } }; 365 ; 366#define ClassImpUnique(name,key) \; 367 namespace ROOT { \; 368 /** \cond HIDDEN_SYMBOLS */ TGenericClassInfo *GenerateInitInstance(const name*); /** \endcond */ \; 369 namespace { \; 370 static int _R__UNIQUE_(_NAME2_(R__dummyint,key)) __attribute__((unused)) = \; 371 GenerateInitInstance((name*)0x0)->SetImplFile(__FILE__, __LINE__); \; 372 R__UseDummy(_R__UNIQUE_(_NAME2_(R__dummyint,key))); \; 373 } \; 374 }; 375 ; 376/// \deprecated; 377#define ClassImp(name) ClassImpUnique(name,default); 378 ; 379/// Macro for Namespace; 380#define NamespaceImpUnique(name,key) \; 381 namespace name { \; 382 namespace ROOTDict { \; 383 /** \cond HIDDEN_SYMBOLS */ \; 384 ::ROOT::TGenericClassInfo *GenerateInitInstance(); /** \endcond */ \; 385 namespace { \; 386 static int _R__UNIQUE_(_NAME2_(R__dummyint,key)) = \; 387 GenerateInitInstance()->SetImplFile(__FILE__, __LINE__); \; 388 R__UseDummy(_R__UNIQUE_(_NAME2_(R__dummyint,key))); \; 389 } \; 390 } \; 391 }; 392 ; 393#define NamespaceImp(name) NamespaceImpUnique(name,default); 394 ; 395//---- ClassDefT macros for templates with one template argument ---------------; 396// ClassDefT corresponds to ClassDef; 397// ClassDefT2 goes in the same header as ClassDefT but must be; 398// outside the class scope; 399// ClassImpT corresponds to ClassImp; 400 ; 401 ; 402/// This ClassDefT is strictly redundant and is kept only for; 403/// backward compatibility.",MatchSource.WIKI,doc/v632/Rtypes_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/Rtypes_8h_source.html
https://root.cern/doc/v632/Rtypes_8h_source.html:29012,Safety,avoid,avoid,29012,"to TClass of the specified class name.Definition TClass.cxx:2968; TCollectionCollection abstract base class.Definition TCollection.h:65; TDirectoryDescribe directory structure in memory.Definition TDirectory.h:45; TFileMergeInfoDefinition TFileMergeInfo.h:42; TMemberInspectorAbstract base class for accessing the data-members of a class.Definition TMemberInspector.h:31; TMemberStreamerDefinition TMemberStreamer.h:26; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjectMother of all ROOT objects.Definition TObject.h:41; TStringBasic string class.Definition TString.h:139; TVirtualCollectionProxyDefines a common interface to inspect/change the contents of an object that represents a collection.Definition TVirtualCollectionProxy.h:52; TVirtualIsAProxyDefinition TVirtualIsAProxy.h:27; bool; int; lineTLine * lineDefinition entrylistblock_figure1.C:235; ROOT::Internal::DefaultStreamervoid DefaultStreamer(TBuffer &R__b, const TClass *cl, void *objpointer)Default streamer implementation used by ClassDefInline to avoid requirement to include TBuffer....Definition TBuffer.cxx:30; ROOT::Internal::DefineBehaviorconst TInitBehavior * DefineBehavior(void *, void *)Definition TGenericClassInfo.cxx:44; ROOT::Internal::HasConsistentHashMemberBool_t HasConsistentHashMember(TClass &clRef)Return true is the Hash/RecursiveRemove setup is consistent, i.e.Definition TClass.cxx:7371; ROOT::Internal::GetDemangledTypeNamestd::string GetDemangledTypeName(const std::type_info &t)Definition TGenericClassInfo.cxx:30; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::DirAutoAdd_tvoid(* DirAutoAdd_t)(void *, TDirectory *)Definition Rtypes.h:114; ROOT::AddClassAlternateROOT::TClassAlt * AddClassAlternate(const char *normName, const char *alternate)Global function called by GenerateInitInstance.Definition TClassTable.cxx:918; ROOT::ResetAfterMergeFunc_tvoid(",MatchSource.WIKI,doc/v632/Rtypes_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/Rtypes_8h_source.html
https://root.cern/doc/v632/Rtypes_8h_source.html:28247,Security,access,accessing,28247,"dl, Int_t il) const =0; ROOT::Internal::TInitBehavior::~TInitBehaviorvirtual ~TInitBehavior()Definition Rtypes.h:153; ROOT::Internal::TInitBehavior::Registervirtual void Register(const char *cname, Version_t id, const std::type_info &info, DictFuncPtr_t dict, Int_t pragmabits) const =0; ROOT::TClassAltDefinition TClassTable.cxx:128; TBufferBuffer base class used for serializing objects.Definition TBuffer.h:43; TClassStreamerDefinition TClassStreamer.h:26; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:2968; TCollectionCollection abstract base class.Definition TCollection.h:65; TDirectoryDescribe directory structure in memory.Definition TDirectory.h:45; TFileMergeInfoDefinition TFileMergeInfo.h:42; TMemberInspectorAbstract base class for accessing the data-members of a class.Definition TMemberInspector.h:31; TMemberStreamerDefinition TMemberStreamer.h:26; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjectMother of all ROOT objects.Definition TObject.h:41; TStringBasic string class.Definition TString.h:139; TVirtualCollectionProxyDefines a common interface to inspect/change the contents of an object that represents a collection.Definition TVirtualCollectionProxy.h:52; TVirtualIsAProxyDefinition TVirtualIsAProxy.h:27; bool; int; lineTLine * lineDefinition entrylistblock_figure1.C:235; ROOT::Internal::DefaultStreamervoid DefaultStreamer(TBuffer &R__b, const TClass *cl, void *objpointer)Default streamer implementation used by ClassDefInline to avoid requirement to include TBuffer....Definition TBuffer.cxx:30; ROOT::Internal::DefineBehaviorconst TInitBehavior * DefineBehavior(void *, void *)Definition TGenericClassInfo.cxx:44; ROOT::Internal::HasConsistentHashMemberBool_t",MatchSource.WIKI,doc/v632/Rtypes_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/Rtypes_8h_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:4906,Availability,error,error,4906,"ECK(off) SmallVectorBase {; 139public:; 140 // This limits the maximum size of an RVec<char> to ~4GB but we don't expect this to ever be a problem,; 141 // and we prefer the smaller Size_T to reduce the size of each RVec object.; 142 using Size_T = int32_t;; 143 ; 144protected:; 145 void *fBeginX;; 146 /// Always >= 0.; 147 // Type is signed only for consistency with fCapacity.; 148 Size_T fSize = 0;; 149 /// Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode.; 150 Size_T fCapacity;; 151 ; 152 /// The maximum value of the Size_T used.; 153 static constexpr size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }; 154 ; 155 SmallVectorBase() = delete;; 156 SmallVectorBase(void *FirstEl, size_t TotalCapacity) : fBeginX(FirstEl), fCapacity(TotalCapacity) {}; 157 ; 158 /// This is an implementation of the grow() method which only works; 159 /// on POD-like data types and is out of line to reduce code duplication.; 160 /// This function will report a fatal error if it cannot increase capacity.; 161 void grow_pod(void *FirstEl, size_t MinSize, size_t TSize);; 162 ; 163 /// Report that MinSize doesn't fit into this vector's size type. Throws; 164 /// std::length_error or calls report_fatal_error.; 165 static void report_size_overflow(size_t MinSize);; 166 /// Report that this vector is already at maximum capacity. Throws; 167 /// std::length_error or calls report_fatal_error.; 168 static void report_at_maximum_capacity();; 169 ; 170 /// If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own.; 171 bool Owns() const { return fCapacity != -1; }; 172 ; 173public:; 174 size_t size() const { return fSize; }; 175 size_t capacity() const noexcept { return Owns() ? fCapacity : fSize; }; 176 ; 177 R__RVEC_NODISCARD bool empty() const { return !fSize; }; 178 ; 179 /// Set the array size to \p N, which the current array must have enough; 180 /// capacity for.; 181 ///; 182 /// This does not c",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:6104,Availability,avail,available,6104,"fit into this vector's size type. Throws; 164 /// std::length_error or calls report_fatal_error.; 165 static void report_size_overflow(size_t MinSize);; 166 /// Report that this vector is already at maximum capacity. Throws; 167 /// std::length_error or calls report_fatal_error.; 168 static void report_at_maximum_capacity();; 169 ; 170 /// If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own.; 171 bool Owns() const { return fCapacity != -1; }; 172 ; 173public:; 174 size_t size() const { return fSize; }; 175 size_t capacity() const noexcept { return Owns() ? fCapacity : fSize; }; 176 ; 177 R__RVEC_NODISCARD bool empty() const { return !fSize; }; 178 ; 179 /// Set the array size to \p N, which the current array must have enough; 180 /// capacity for.; 181 ///; 182 /// This does not construct or destroy any elements in the vector.; 183 ///; 184 /// Clients can use this in conjunction with capacity() to write past the end; 185 /// of the buffer when they know that more elements are available, and only; 186 /// update the size later. This avoids the cost of value initializing elements; 187 /// which will only be overwritten.; 188 void set_size(size_t N); 189 {; 190 if (N > capacity()) {; 191 throw std::runtime_error(""Setting size to a value greater than capacity."");; 192 }; 193 fSize = N;; 194 }; 195};; 196 ; 197/// Used to figure out the offset of the first element of an RVec; 198template <class T>; 199struct SmallVectorAlignmentAndSize {; 200 alignas(SmallVectorBase) char Base[sizeof(SmallVectorBase)];; 201 alignas(T) char FirstEl[sizeof(T)];; 202};; 203 ; 204/// This is the part of SmallVectorTemplateBase which does not depend on whether the type T is a POD.; 205template <typename T>; 206class R__CLING_PTRCHECK(off) SmallVectorTemplateCommon : public SmallVectorBase {; 207 using Base = SmallVectorBase;; 208 ; 209 /// Find the address of the first element. For this pointer math to be valid; 210 /// with small-si",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:22834,Availability,avail,available,22834,"72 explicit RVecImpl(unsigned N) : ROOT::Internal::VecOps::SmallVectorTemplateBase<T>(N) {}; 573 ; 574public:; 575 RVecImpl(const RVecImpl &) = delete;; 576 ; 577 ~RVecImpl(); 578 {; 579 // Subclass has already destructed this vector's elements.; 580 // If this wasn't grown from the inline copy, deallocate the old space.; 581 if (!this->isSmall() && this->Owns()); 582 free(this->begin());; 583 }; 584 ; 585 // also give up adopted memory if applicable; 586 void clear(); 587 {; 588 if (this->Owns()) {; 589 this->destroy_range(this->begin(), this->end());; 590 this->fSize = 0;; 591 } else {; 592 this->resetToSmall();; 593 }; 594 }; 595 ; 596 void resize(size_type N); 597 {; 598 if (N < this->size()) {; 599 if (this->Owns()); 600 this->destroy_range(this->begin() + N, this->end());; 601 this->set_size(N);; 602 } else if (N > this->size()) {; 603 if (this->capacity() < N); 604 this->grow(N);; 605 for (auto I = this->end(), E = this->begin() + N; I != E; ++I); 606 new (&*I) T();; 607 this->set_size(N);; 608 }; 609 }; 610 ; 611 void resize(size_type N, const T &NV); 612 {; 613 if (N < this->size()) {; 614 if (this->Owns()); 615 this->destroy_range(this->begin() + N, this->end());; 616 this->set_size(N);; 617 } else if (N > this->size()) {; 618 if (this->capacity() < N); 619 this->grow(N);; 620 std::uninitialized_fill(this->end(), this->begin() + N, NV);; 621 this->set_size(N);; 622 }; 623 }; 624 ; 625 void reserve(size_type N); 626 {; 627 if (this->capacity() < N); 628 this->grow(N);; 629 }; 630 ; 631 void pop_back_n(size_type NumItems); 632 {; 633 if (this->size() < NumItems) {; 634 throw std::runtime_error(""Popping back more elements than those available."");; 635 }; 636 if (this->Owns()); 637 this->destroy_range(this->end() - NumItems, this->end());; 638 this->set_size(this->size() - NumItems);; 639 }; 640 ; 641 R__RVEC_NODISCARD T pop_back_val(); 642 {; 643 T Result = ::std::move(this->back());; 644 this->pop_back();; 645 return Result;; 646 }; 647 ; 648 void swap(RVecI",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:25425,Availability,down,down,25425,"nts.; 679 ; 680 void assign(size_type NumElts, const T &Elt); 681 {; 682 clear();; 683 if (this->capacity() < NumElts); 684 this->grow(NumElts);; 685 this->set_size(NumElts);; 686 std::uninitialized_fill(this->begin(), this->end(), Elt);; 687 }; 688 ; 689 template <typename in_iter,; 690 typename = typename std::enable_if<std::is_convertible<; 691 typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type>; 692 void assign(in_iter in_start, in_iter in_end); 693 {; 694 clear();; 695 append(in_start, in_end);; 696 }; 697 ; 698 void assign(std::initializer_list<T> IL); 699 {; 700 clear();; 701 append(IL);; 702 }; 703 ; 704 iterator erase(const_iterator CI); 705 {; 706 // Just cast away constness because this is a non-const member function.; 707 iterator I = const_cast<iterator>(CI);; 708 ; 709 if (I < this->begin() || I >= this->end()) {; 710 throw std::runtime_error(""The iterator passed to `erase` is out of bounds."");; 711 }; 712 ; 713 iterator N = I;; 714 // Shift all elts down one.; 715 std::move(I + 1, this->end(), I);; 716 // Drop the last elt.; 717 this->pop_back();; 718 return (N);; 719 }; 720 ; 721 iterator erase(const_iterator CS, const_iterator CE); 722 {; 723 // Just cast away constness because this is a non-const member function.; 724 iterator S = const_cast<iterator>(CS);; 725 iterator E = const_cast<iterator>(CE);; 726 ; 727 if (S < this->begin() || E > this->end() || S > E) {; 728 throw std::runtime_error(""Invalid start/end pair passed to `erase` (out of bounds or start > end)."");; 729 }; 730 ; 731 iterator N = S;; 732 // Shift all elts down.; 733 iterator I = std::move(E, this->end(), S);; 734 // Drop the last elts.; 735 if (this->Owns()); 736 this->destroy_range(I, this->end());; 737 this->set_size(I - this->begin());; 738 return (N);; 739 }; 740 ; 741 iterator insert(iterator I, T &&Elt); 742 {; 743 if (I == this->end()) { // Important special case for empty vector.; 744 this->push_back(::std::move(Elt));; 745 re",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:26013,Availability,down,down,26013,":initializer_list<T> IL); 699 {; 700 clear();; 701 append(IL);; 702 }; 703 ; 704 iterator erase(const_iterator CI); 705 {; 706 // Just cast away constness because this is a non-const member function.; 707 iterator I = const_cast<iterator>(CI);; 708 ; 709 if (I < this->begin() || I >= this->end()) {; 710 throw std::runtime_error(""The iterator passed to `erase` is out of bounds."");; 711 }; 712 ; 713 iterator N = I;; 714 // Shift all elts down one.; 715 std::move(I + 1, this->end(), I);; 716 // Drop the last elt.; 717 this->pop_back();; 718 return (N);; 719 }; 720 ; 721 iterator erase(const_iterator CS, const_iterator CE); 722 {; 723 // Just cast away constness because this is a non-const member function.; 724 iterator S = const_cast<iterator>(CS);; 725 iterator E = const_cast<iterator>(CE);; 726 ; 727 if (S < this->begin() || E > this->end() || S > E) {; 728 throw std::runtime_error(""Invalid start/end pair passed to `erase` (out of bounds or start > end)."");; 729 }; 730 ; 731 iterator N = S;; 732 // Shift all elts down.; 733 iterator I = std::move(E, this->end(), S);; 734 // Drop the last elts.; 735 if (this->Owns()); 736 this->destroy_range(I, this->end());; 737 this->set_size(I - this->begin());; 738 return (N);; 739 }; 740 ; 741 iterator insert(iterator I, T &&Elt); 742 {; 743 if (I == this->end()) { // Important special case for empty vector.; 744 this->push_back(::std::move(Elt));; 745 return this->end() - 1;; 746 }; 747 ; 748 if (I < this->begin() || I > this->end()) {; 749 throw std::runtime_error(""The iterator passed to `insert` is out of bounds."");; 750 }; 751 ; 752 if (this->size() >= this->capacity()) {; 753 size_t EltNo = I - this->begin();; 754 this->grow();; 755 I = this->begin() + EltNo;; 756 }; 757 ; 758 ::new ((void *)this->end()) T(::std::move(this->back()));; 759 // Push everything else over.; 760 std::move_backward(I, this->end() - 1, this->end());; 761 this->set_size(this->size() + 1);; 762 ; 763 // If we just moved the element we're inserting, be",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:46189,Availability,avail,available,46189,"e RVecN is shorter than `pos`.; 1314 value_type at(size_type pos, value_type fallback) const; 1315 {; 1316 if (pos >= size_type(this->fSize)); 1317 return fallback;; 1318 return this->operator[](pos);; 1319 }; 1320};; 1321 ; 1322// clang-format off; 1323/**; 1324\class ROOT::VecOps::RVec; 1325\brief A ""std::vector""-like collection of values implementing handy operation to analyse them; 1326\tparam T The type of the contained objects; 1327 ; 1328A RVec is a container designed to make analysis of values' collections fast and easy.; 1329Its storage is contiguous in memory and its interface is designed such to resemble to the one; 1330of the stl vector. In addition the interface features methods and; 1331[external functions](https://root.cern/doc/master/namespaceROOT_1_1VecOps.html) to ease the manipulation and analysis; 1332of the data in the RVec.; 1333 ; 1334\note ROOT::VecOps::RVec can also be spelled simply ROOT::RVec. Shorthand aliases such as ROOT::RVecI or ROOT::RVecD; 1335are also available as template instantiations of RVec of fundamental types. The full list of available aliases:; 1336- RVecB (`bool`); 1337- RVecC (`char`); 1338- RVecD (`double`); 1339- RVecF (`float`); 1340- RVecI (`int`); 1341- RVecL (`long`); 1342- RVecLL (`long long`); 1343- RVecU (`unsigned`); 1344- RVecUL (`unsigned long`); 1345- RVecULL (`unsigned long long`); 1346 ; 1347\note RVec does not attempt to be exception safe. Exceptions thrown by element constructors during insertions, swaps or; 1348other operations will be propagated potentially leaving the RVec object in an invalid state.; 1349 ; 1350\note RVec methods (e.g. `at` or `size`) follow the STL naming convention instead of the ROOT naming convention in order; 1351to make RVec a drop-in replacement for `std::vector`.; 1352 ; 1353\htmlonly; 1354<a href=""https://doi.org/10.5281/zenodo.1253756""><img src=""https://zenodo.org/badge/DOI/10.5281/zenodo.1253756.svg"" alt=""DOI""></a>; 1355\endhtmlonly; 1356 ; 1357## Table of Contents; 1358- ",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:46273,Availability,avail,available,46273,"off; 1323/**; 1324\class ROOT::VecOps::RVec; 1325\brief A ""std::vector""-like collection of values implementing handy operation to analyse them; 1326\tparam T The type of the contained objects; 1327 ; 1328A RVec is a container designed to make analysis of values' collections fast and easy.; 1329Its storage is contiguous in memory and its interface is designed such to resemble to the one; 1330of the stl vector. In addition the interface features methods and; 1331[external functions](https://root.cern/doc/master/namespaceROOT_1_1VecOps.html) to ease the manipulation and analysis; 1332of the data in the RVec.; 1333 ; 1334\note ROOT::VecOps::RVec can also be spelled simply ROOT::RVec. Shorthand aliases such as ROOT::RVecI or ROOT::RVecD; 1335are also available as template instantiations of RVec of fundamental types. The full list of available aliases:; 1336- RVecB (`bool`); 1337- RVecC (`char`); 1338- RVecD (`double`); 1339- RVecF (`float`); 1340- RVecI (`int`); 1341- RVecL (`long`); 1342- RVecLL (`long long`); 1343- RVecU (`unsigned`); 1344- RVecUL (`unsigned long`); 1345- RVecULL (`unsigned long long`); 1346 ; 1347\note RVec does not attempt to be exception safe. Exceptions thrown by element constructors during insertions, swaps or; 1348other operations will be propagated potentially leaving the RVec object in an invalid state.; 1349 ; 1350\note RVec methods (e.g. `at` or `size`) follow the STL naming convention instead of the ROOT naming convention in order; 1351to make RVec a drop-in replacement for `std::vector`.; 1352 ; 1353\htmlonly; 1354<a href=""https://doi.org/10.5281/zenodo.1253756""><img src=""https://zenodo.org/badge/DOI/10.5281/zenodo.1253756.svg"" alt=""DOI""></a>; 1355\endhtmlonly; 1356 ; 1357## Table of Contents; 1358- [Example](\ref example); 1359- [Arithmetic operations, logical operations and mathematical functions](\ref operationsandfunctions); 1360- [Owning and adopting memory](\ref owningandadoptingmemory); 1361- [Sorting and manipulation of indices](\re",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:50094,Availability,avail,available,50094,"ion of transverse momenta can be used within the rest of the data analysis, for; 1395example to fill a histogram.; 1396 ; 1397\anchor operationsandfunctions; 1398## Arithmetic operations, logical operations and mathematical functions; 1399Arithmetic operations on RVec instances can be performed: for example, they can be added, subtracted, multiplied.; 1400~~~{.cpp}; 1401RVec<double> v1 {1.,2.,3.,4.};; 1402RVec<float> v2 {5.f,6.f,7.f,8.f};; 1403auto v3 = v1+v2;; 1404auto v4 = 3 * v1;; 1405~~~; 1406The supported operators are ; 1407 - +, -, *, /; 1408 - +=, -=, *=, /=; 1409 - <, >, ==, !=, <=, >=, &&, ||; 1410 - ~, !; 1411 - &, |, ^; 1412 - &=, |=, ^=; 1413 - <<=, >>=; 1414 ; 1415The most common mathematical functions are supported. It is possible to invoke them passing ; 1416RVecs as arguments.; 1417 - abs, fdim, fmod, remainder; 1418 - floor, ceil, trunc, round, lround, llround; 1419 - exp, exp2, expm1; 1420 - log, log10, log2, log1p; 1421 - pow; 1422 - sqrt, cbrt; 1423 - sin, cos, tan, asin, acos, atan, atan2, hypot; 1424 - sinh, cosh, tanh, asinh, acosh; 1425 - erf, erfc; 1426 - lgamma, tgamma; 1427 ; 1428If the VDT library is available, the following functions can be invoked. Internally the calculations; 1429are vectorized:; 1430 - fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; 1431 - fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan; 1432 ; 1433\anchor owningandadoptingmemory; 1434## Owning and adopting memory; 1435RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case,; 1436it can be constructed with the address of the memory associated to it and its length. For example:; 1437~~~{.cpp}; 1438std::vector<int> myStlVec {1,2,3};; 1439RVec<int> myRVec(myStlVec.data(), myStlVec.size());; 1440~~~; 1441In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"".; 1442If any method which implies a re-allocation is c",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:6133,Deployability,update,update,6133,"fit into this vector's size type. Throws; 164 /// std::length_error or calls report_fatal_error.; 165 static void report_size_overflow(size_t MinSize);; 166 /// Report that this vector is already at maximum capacity. Throws; 167 /// std::length_error or calls report_fatal_error.; 168 static void report_at_maximum_capacity();; 169 ; 170 /// If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own.; 171 bool Owns() const { return fCapacity != -1; }; 172 ; 173public:; 174 size_t size() const { return fSize; }; 175 size_t capacity() const noexcept { return Owns() ? fCapacity : fSize; }; 176 ; 177 R__RVEC_NODISCARD bool empty() const { return !fSize; }; 178 ; 179 /// Set the array size to \p N, which the current array must have enough; 180 /// capacity for.; 181 ///; 182 /// This does not construct or destroy any elements in the vector.; 183 ///; 184 /// Clients can use this in conjunction with capacity() to write past the end; 185 /// of the buffer when they know that more elements are available, and only; 186 /// update the size later. This avoids the cost of value initializing elements; 187 /// which will only be overwritten.; 188 void set_size(size_t N); 189 {; 190 if (N > capacity()) {; 191 throw std::runtime_error(""Setting size to a value greater than capacity."");; 192 }; 193 fSize = N;; 194 }; 195};; 196 ; 197/// Used to figure out the offset of the first element of an RVec; 198template <class T>; 199struct SmallVectorAlignmentAndSize {; 200 alignas(SmallVectorBase) char Base[sizeof(SmallVectorBase)];; 201 alignas(T) char FirstEl[sizeof(T)];; 202};; 203 ; 204/// This is the part of SmallVectorTemplateBase which does not depend on whether the type T is a POD.; 205template <typename T>; 206class R__CLING_PTRCHECK(off) SmallVectorTemplateCommon : public SmallVectorBase {; 207 using Base = SmallVectorBase;; 208 ; 209 /// Find the address of the first element. For this pointer math to be valid; 210 /// with small-si",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:26994,Deployability,update,update,26994,"t of bounds or start > end)."");; 729 }; 730 ; 731 iterator N = S;; 732 // Shift all elts down.; 733 iterator I = std::move(E, this->end(), S);; 734 // Drop the last elts.; 735 if (this->Owns()); 736 this->destroy_range(I, this->end());; 737 this->set_size(I - this->begin());; 738 return (N);; 739 }; 740 ; 741 iterator insert(iterator I, T &&Elt); 742 {; 743 if (I == this->end()) { // Important special case for empty vector.; 744 this->push_back(::std::move(Elt));; 745 return this->end() - 1;; 746 }; 747 ; 748 if (I < this->begin() || I > this->end()) {; 749 throw std::runtime_error(""The iterator passed to `insert` is out of bounds."");; 750 }; 751 ; 752 if (this->size() >= this->capacity()) {; 753 size_t EltNo = I - this->begin();; 754 this->grow();; 755 I = this->begin() + EltNo;; 756 }; 757 ; 758 ::new ((void *)this->end()) T(::std::move(this->back()));; 759 // Push everything else over.; 760 std::move_backward(I, this->end() - 1, this->end());; 761 this->set_size(this->size() + 1);; 762 ; 763 // If we just moved the element we're inserting, be sure to update; 764 // the reference.; 765 T *EltPtr = &Elt;; 766 if (I <= EltPtr && EltPtr < this->end()); 767 ++EltPtr;; 768 ; 769 *I = ::std::move(*EltPtr);; 770 return I;; 771 }; 772 ; 773 iterator insert(iterator I, const T &Elt); 774 {; 775 if (I == this->end()) { // Important special case for empty vector.; 776 this->push_back(Elt);; 777 return this->end() - 1;; 778 }; 779 ; 780 if (I < this->begin() || I > this->end()) {; 781 throw std::runtime_error(""The iterator passed to `insert` is out of bounds."");; 782 }; 783 ; 784 if (this->size() >= this->capacity()) {; 785 size_t EltNo = I - this->begin();; 786 this->grow();; 787 I = this->begin() + EltNo;; 788 }; 789 ::new ((void *)this->end()) T(std::move(this->back()));; 790 // Push everything else over.; 791 std::move_backward(I, this->end() - 1, this->end());; 792 this->set_size(this->size() + 1);; 793 ; 794 // If we just moved the element we're inserting, be sure to up",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:27922,Deployability,update,update,27922," this->end() - 1, this->end());; 761 this->set_size(this->size() + 1);; 762 ; 763 // If we just moved the element we're inserting, be sure to update; 764 // the reference.; 765 T *EltPtr = &Elt;; 766 if (I <= EltPtr && EltPtr < this->end()); 767 ++EltPtr;; 768 ; 769 *I = ::std::move(*EltPtr);; 770 return I;; 771 }; 772 ; 773 iterator insert(iterator I, const T &Elt); 774 {; 775 if (I == this->end()) { // Important special case for empty vector.; 776 this->push_back(Elt);; 777 return this->end() - 1;; 778 }; 779 ; 780 if (I < this->begin() || I > this->end()) {; 781 throw std::runtime_error(""The iterator passed to `insert` is out of bounds."");; 782 }; 783 ; 784 if (this->size() >= this->capacity()) {; 785 size_t EltNo = I - this->begin();; 786 this->grow();; 787 I = this->begin() + EltNo;; 788 }; 789 ::new ((void *)this->end()) T(std::move(this->back()));; 790 // Push everything else over.; 791 std::move_backward(I, this->end() - 1, this->end());; 792 this->set_size(this->size() + 1);; 793 ; 794 // If we just moved the element we're inserting, be sure to update; 795 // the reference.; 796 const T *EltPtr = &Elt;; 797 if (I <= EltPtr && EltPtr < this->end()); 798 ++EltPtr;; 799 ; 800 *I = *EltPtr;; 801 return I;; 802 }; 803 ; 804 iterator insert(iterator I, size_type NumToInsert, const T &Elt); 805 {; 806 // Convert iterator to elt# to avoid invalidating iterator when we reserve(); 807 size_t InsertElt = I - this->begin();; 808 ; 809 if (I == this->end()) { // Important special case for empty vector.; 810 append(NumToInsert, Elt);; 811 return this->begin() + InsertElt;; 812 }; 813 ; 814 if (I < this->begin() || I > this->end()) {; 815 throw std::runtime_error(""The iterator passed to `insert` is out of bounds."");; 816 }; 817 ; 818 // Ensure there is enough space.; 819 reserve(this->size() + NumToInsert);; 820 ; 821 // Uninvalidate the iterator.; 822 I = this->begin() + InsertElt;; 823 ; 824 // If there are more elements between the insertion point and the end of the; 8",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:51015,Deployability,release,released,51015,", asinh, acosh; 1425 - erf, erfc; 1426 - lgamma, tgamma; 1427 ; 1428If the VDT library is available, the following functions can be invoked. Internally the calculations; 1429are vectorized:; 1430 - fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; 1431 - fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan; 1432 ; 1433\anchor owningandadoptingmemory; 1434## Owning and adopting memory; 1435RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case,; 1436it can be constructed with the address of the memory associated to it and its length. For example:; 1437~~~{.cpp}; 1438std::vector<int> myStlVec {1,2,3};; 1439RVec<int> myRVec(myStlVec.data(), myStlVec.size());; 1440~~~; 1441In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"".; 1442If any method which implies a re-allocation is called, e.g. *emplace_back* or *resize*, the adopted; 1443memory is released and new one is allocated. The previous content is copied in the new memory and; 1444preserved.; 1445 ; 1446\anchor sorting; 1447## Sorting and manipulation of indices; 1448 ; 1449### Sorting; 1450RVec complies to the STL interfaces when it comes to iterations. As a result, standard algorithms; 1451can be used, for example sorting:; 1452~~~{.cpp}; 1453RVec<double> v{6., 4., 5.};; 1454std::sort(v.begin(), v.end());; 1455~~~; 1456 ; 1457For convenience, helpers are provided too:; 1458~~~{.cpp}; 1459auto sorted_v = Sort(v);; 1460auto reversed_v = Reverse(v);; 1461~~~; 1462 ; 1463### Manipulation of indices; 1464 ; 1465It is also possible to manipulated the RVecs acting on their indices. For example,; 1466the following syntax; 1467~~~{.cpp}; 1468RVecD v0 {9., 7., 8.};; 1469auto v1 = Take(v0, {1, 2, 0});; 1470~~~; 1471will yield a new RVec<double> the content of which is the first, second and zeroth element of; 1472v0, i.e. `{7., 8., 9.}`.; 1473 ; 1474The `Argsort` and `S",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:95066,Deployability,toggle,toggle,95066,"716/// Return the indices of the elements which are not zero; 2717///; 2718/// Example code, at the ROOT prompt:; 2719/// ~~~{.cpp}; 2720/// using namespace ROOT::VecOps;; 2721/// RVecD v {2., 0., 3., 0., 1.};; 2722/// auto nonzero_idx = Nonzero(v);; 2723/// nonzero_idx; 2724/// // (ROOT::VecOps::RVec<unsigned long> &) { 0, 2, 4 }; 2725/// ~~~; 2726template <typename T>; 2727RVec<typename RVec<T>::size_type> Nonzero(const RVec<T> &v); 2728{; 2729 using size_type = typename RVec<T>::size_type;; 2730 RVec<size_type> r;; 2731 const auto size = v.size();; 2732 r.reserve(size);; 2733 for(size_type i=0; i<size; i++) {; 2734 if(v[i] != 0) {; 2735 r.emplace_back(i);; 2736 }; 2737 }; 2738 return r;; 2739}; 2740 ; 2741/// Return the intersection of elements of two RVecs.; 2742///; 2743/// Each element of v1 is looked up in v2 and added to the returned vector if; 2744/// found. Following, the order of v1 is preserved. If v2 is already sorted, the; 2745/// optional argument v2_is_sorted can be used to toggle of the internal sorting; 2746/// step, therewith optimising runtime.; 2747///; 2748/// Example code, at the ROOT prompt:; 2749/// ~~~{.cpp}; 2750/// using namespace ROOT::VecOps;; 2751/// RVecD v1 {1., 2., 3.};; 2752/// RVecD v2 {-4., -5., 2., 1.};; 2753/// auto v1_intersect_v2 = Intersect(v1, v2);; 2754/// v1_intersect_v2; 2755/// // (ROOT::VecOps::RVec<double> &) { 1.0000000, 2.0000000 }; 2756/// ~~~; 2757template <typename T>; 2758RVec<T> Intersect(const RVec<T>& v1, const RVec<T>& v2, bool v2_is_sorted = false); 2759{; 2760 RVec<T> v2_sorted;; 2761 if (!v2_is_sorted) v2_sorted = Sort(v2);; 2762 const auto v2_begin = v2_is_sorted ? v2.begin() : v2_sorted.begin();; 2763 const auto v2_end = v2_is_sorted ? v2.end() : v2_sorted.end();; 2764 RVec<T> r;; 2765 const auto size = v1.size();; 2766 r.reserve(size);; 2767 using size_type = typename RVec<T>::size_type;; 2768 for(size_type i=0; i<size; i++) {; 2769 if (std::binary_search(v2_begin, v2_end, v1[i])) {; 2770 r.emplace_bac",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:109134,Deployability,update,update,109134,"// The function computes the invariant mass of multiple particles with the; 3069/// four-vectors (pt, eta, phi, mass).; 3070template <typename T0, typename T1 = T0, typename T2 = T0, typename T3 = T0, typename Common_t = std::common_type_t<T0, T1, T2, T3>>; 3071Common_t InvariantMass(const RVec<T0>& pt, const RVec<T1>& eta, const RVec<T2>& phi, const RVec<T3>& mass); 3072{; 3073 const std::size_t size = pt.size();; 3074 ; 3075 R__ASSERT(eta.size() == size && phi.size() == size && mass.size() == size);; 3076 ; 3077 Common_t x_sum = 0.;; 3078 Common_t y_sum = 0.;; 3079 Common_t z_sum = 0.;; 3080 Common_t e_sum = 0.;; 3081 ; 3082 for (std::size_t i = 0u; i < size; ++ i) {; 3083 // Convert to (e, x, y, z) coordinate system and update sums; 3084 const auto x = pt[i] * std::cos(phi[i]);; 3085 x_sum += x;; 3086 const auto y = pt[i] * std::sin(phi[i]);; 3087 y_sum += y;; 3088 const auto z = pt[i] * std::sinh(eta[i]);; 3089 z_sum += z;; 3090 const auto e = std::sqrt(x * x + y * y + z * z + mass[i] * mass[i]);; 3091 e_sum += e;; 3092 }; 3093 ; 3094 // Return invariant mass with (+, -, -, -) metric; 3095 return std::sqrt(e_sum * e_sum - x_sum * x_sum - y_sum * y_sum - z_sum * z_sum);; 3096}; 3097 ; 3098////////////////////////////////////////////////////////////////////////////; 3099/// \brief Build an RVec of objects starting from RVecs of input to their constructors.; 3100/// \tparam T Type of the objects contained in the created RVec.; 3101/// \tparam Args_t Pack of types templating the input RVecs.; 3102/// \param[in] args The RVecs containing the values used to initialise the output objects.; 3103/// \return The RVec of objects initialised with the input parameters.; 3104///; 3105/// Example code, at the ROOT prompt:; 3106/// ~~~{.cpp}; 3107/// using namespace ROOT::VecOps;; 3108/// RVecF pts = {15.5, 34.32, 12.95};; 3109/// RVecF etas = {0.3, 2.2, 1.32};; 3110/// RVecF phis = {0.1, 3.02, 2.2};; 3111/// RVecF masses = {105.65, 105.65, 105.65};; 3112/// auto fourVecs = Con",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:145013,Deployability,integrat,integration,145013,"::RVec::RVecRVec(std::initializer_list< T > IL)Definition RVec.hxx:1555; ROOT::VecOps::RVec::const_referencetypename SuperClass::const_reference const_referenceDefinition RVec.hxx:1536; ROOT::VecOps::RVec::RVecRVec()Definition RVec.hxx:1542; ROOT::VecOps::RVec::RVecRVec(size_t Size)Definition RVec.hxx:1546; ROOT::VecOps::RVec::RVecRVec(ItTy S, ItTy E)Definition RVec.hxx:1551; ROOT::VecOps::RVec::RVecRVec(const std::vector< T > &RHS)Definition RVec.hxx:1581; ROOT::VecOps::RVec::size_typetypename SuperClass::size_type size_typeDefinition RVec.hxx:1537; ROOT::VecOps::RVec::RVecRVec(Detail::VecOps::RVecImpl< T > &&RHS)Definition RVec.hxx:1573; ROOT::VecOps::RVec::RVecRVec(RVec &&RHS)Definition RVec.hxx:1565; ROOT::VecOps::RVec::value_typetypename SuperClass::value_type value_typeDefinition RVec.hxx:1538; ROOT::VecOps::RVec::operator=RVec & operator=(const RVec &RHS)Definition RVec.hxx:1559; R; double; ptTPaveText * ptDefinition entrylist_figure1.C:7; ROOT::Math::IntegrationOneDim::TypeTypeenumeration specifying the integration types.Definition AllIntegrationTypes.h:32; ROOT::VecOps::ReverseRVec< T > Reverse(const RVec< T > &v)Return copy of reversed vector.Definition RVec.hxx:2481; ROOT::VecOps::IntersectRVec< T > Intersect(const RVec< T > &v1, const RVec< T > &v2, bool v2_is_sorted=false)Return the intersection of elements of two RVecs.Definition RVec.hxx:2758; ROOT::VecOps::NonzeroRVec< typename RVec< T >::size_type > Nonzero(const RVec< T > &v)Return the indices of the elements which are not zero.Definition RVec.hxx:2727; RVEC_UNARY_OPERATOR#define RVEC_UNARY_OPERATOR(OP)Definition RVec.hxx:1616; RVEC_ASSIGNMENT_OPERATOR#define RVEC_ASSIGNMENT_OPERATOR(OP)Definition RVec.hxx:1687; ROOT::VecOps::StableArgsortRVec< typename RVec< T >::size_type > StableArgsort(const RVec< T > &v)Return an RVec of indices that sort the input RVec while keeping the order of equal elements.Definition RVec.hxx:2295; ROOT::VecOps::ConcatenateRVec< Common_t > Concatenate(const RVec< T0 > &v0,",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:269,Energy Efficiency,adapt,adapted,269,". ROOT: math/vecops/inc/ROOT/RVec.hxx Source File. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. RVec.hxx. Go to the documentation of this file. 1// Author: Enrico Guiraud, Enric Tejedor, Danilo Piparo CERN 04/2021; 2// Implementation adapted from from llvm::SmallVector.; 3// See /math/vecops/ARCHITECTURE.md for more information.; 4 ; 5/*************************************************************************; 6 * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; 7 * All rights reserved. *; 8 * *; 9 * For the licensing terms see $ROOTSYS/LICENSE. *; 10 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 11 *************************************************************************/; 12 ; 13#ifndef ROOT_RVEC; 14#define ROOT_RVEC; 15 ; 16#if __cplusplus > 201402L; 17#define R__RVEC_NODISCARD [[nodiscard]]; 18#else; 19#define R__RVEC_NODISCARD; 20#endif; 21 ; 22#ifdef _WIN32; 23 #ifndef M_PI; 24 #ifndef _USE_MATH_DEFINES; 25 #define _USE_MATH_DEFINES; 26 #endif; 27 #include <math.h>; 28 #undef _USE_MATH_DEFINES; 29 #endif; 30 #define _VECOPS_USE_EXTERN_TEMPLATES false; 31#else; 32 #define _VECOPS_USE_EXTERN_TEMPLATES true; 33#endif; 34 ; 35#include <Rtypes.h> // R__CLING_PTRCHECK; 36#include <TError.h> // R__ASSERT; 37 ; 38#include <algorithm>; 39#include <cmath>; 40#include <cstring>; 41#include <limits> // for numeric_limits; 42#include <memory> // uninitialized_value_construct; 43#include <new>; 44#include <numeric> // for inner_product; 45#include <sstream>; 46#include <stdexcept>; 47#include <string>; 48#include <tuple>; 49#include <type_traits>; 50#include <utility>; 51#include <vector>; 52 ; 53#ifdef R__HAS_VDT; 54#include <vdt/vdtMath.h>; 55#endif; 56 ; 57 ; 58namespace ROOT {; 59 ; 60namespace VecOps {; 61template<typename T>; 62class RVec;; 63}; 64 ; 65namespace Internal {; 66namespace VecOps {; 67 ; 68template<typename T>; 69using RVec = ROOT::VecOps::RVec<T>;; 70 ; 71// clang-format off; 72template <typenam",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:3524,Energy Efficiency,power,power,3524,"f (nArgs > 1) {; 93 for (auto i = 1UL; i < nArgs; i++) {; 94 if (sizes[0] == sizes[i]); 95 continue;; 96 std::string msg(id);; 97 msg += "": input RVec instances have different lengths!"";; 98 throw std::runtime_error(msg);; 99 }; 100 }; 101 return sizes[0];; 102}; 103 ; 104template <typename F, typename... RVecs>; 105auto MapImpl(F &&f, RVecs &&... vs) -> RVec<decltype(f(vs[0]...))>; 106{; 107 const auto size = GetVectorsSize(""Map"", vs...);; 108 RVec<decltype(f(vs[0]...))> ret(size);; 109 ; 110 for (auto i = 0UL; i < size; i++); 111 ret[i] = f(vs[i]...);; 112 ; 113 return ret;; 114}; 115 ; 116template <typename Tuple_t, std::size_t... Is>; 117auto MapFromTuple(Tuple_t &&t, std::index_sequence<Is...>); 118 -> decltype(MapImpl(std::get<std::tuple_size<Tuple_t>::value - 1>(t), std::get<Is>(t)...)); 119{; 120 constexpr const auto tupleSizeM1 = std::tuple_size<Tuple_t>::value - 1;; 121 return MapImpl(std::get<tupleSizeM1>(t), std::get<Is>(t)...);; 122}; 123 ; 124/// Return the next power of two (in 64-bits) that is strictly greater than A.; 125/// Return zero on overflow.; 126inline uint64_t NextPowerOf2(uint64_t A); 127{; 128 A |= (A >> 1);; 129 A |= (A >> 2);; 130 A |= (A >> 4);; 131 A |= (A >> 8);; 132 A |= (A >> 16);; 133 A |= (A >> 32);; 134 return A + 1;; 135}; 136 ; 137/// This is all the stuff common to all SmallVectors.; 138class R__CLING_PTRCHECK(off) SmallVectorBase {; 139public:; 140 // This limits the maximum size of an RVec<char> to ~4GB but we don't expect this to ever be a problem,; 141 // and we prefer the smaller Size_T to reduce the size of each RVec object.; 142 using Size_T = int32_t;; 143 ; 144protected:; 145 void *fBeginX;; 146 /// Always >= 0.; 147 // Type is signed only for consistency with fCapacity.; 148 Size_T fSize = 0;; 149 /// Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode.; 150 Size_T fCapacity;; 151 ; 152 /// The maximum value of the Size_T used.; 153 static constexpr size_t SizeTypeMax() { return std::numeric",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:4094,Energy Efficiency,reduce,reduce,4094,"...))> ret(size);; 109 ; 110 for (auto i = 0UL; i < size; i++); 111 ret[i] = f(vs[i]...);; 112 ; 113 return ret;; 114}; 115 ; 116template <typename Tuple_t, std::size_t... Is>; 117auto MapFromTuple(Tuple_t &&t, std::index_sequence<Is...>); 118 -> decltype(MapImpl(std::get<std::tuple_size<Tuple_t>::value - 1>(t), std::get<Is>(t)...)); 119{; 120 constexpr const auto tupleSizeM1 = std::tuple_size<Tuple_t>::value - 1;; 121 return MapImpl(std::get<tupleSizeM1>(t), std::get<Is>(t)...);; 122}; 123 ; 124/// Return the next power of two (in 64-bits) that is strictly greater than A.; 125/// Return zero on overflow.; 126inline uint64_t NextPowerOf2(uint64_t A); 127{; 128 A |= (A >> 1);; 129 A |= (A >> 2);; 130 A |= (A >> 4);; 131 A |= (A >> 8);; 132 A |= (A >> 16);; 133 A |= (A >> 32);; 134 return A + 1;; 135}; 136 ; 137/// This is all the stuff common to all SmallVectors.; 138class R__CLING_PTRCHECK(off) SmallVectorBase {; 139public:; 140 // This limits the maximum size of an RVec<char> to ~4GB but we don't expect this to ever be a problem,; 141 // and we prefer the smaller Size_T to reduce the size of each RVec object.; 142 using Size_T = int32_t;; 143 ; 144protected:; 145 void *fBeginX;; 146 /// Always >= 0.; 147 // Type is signed only for consistency with fCapacity.; 148 Size_T fSize = 0;; 149 /// Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode.; 150 Size_T fCapacity;; 151 ; 152 /// The maximum value of the Size_T used.; 153 static constexpr size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }; 154 ; 155 SmallVectorBase() = delete;; 156 SmallVectorBase(void *FirstEl, size_t TotalCapacity) : fBeginX(FirstEl), fCapacity(TotalCapacity) {}; 157 ; 158 /// This is an implementation of the grow() method which only works; 159 /// on POD-like data types and is out of line to reduce code duplication.; 160 /// This function will report a fatal error if it cannot increase capacity.; 161 void grow_pod(void *FirstEl, size_t MinSize, size_t TSi",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:4838,Energy Efficiency,reduce,reduce,4838,"{; 128 A |= (A >> 1);; 129 A |= (A >> 2);; 130 A |= (A >> 4);; 131 A |= (A >> 8);; 132 A |= (A >> 16);; 133 A |= (A >> 32);; 134 return A + 1;; 135}; 136 ; 137/// This is all the stuff common to all SmallVectors.; 138class R__CLING_PTRCHECK(off) SmallVectorBase {; 139public:; 140 // This limits the maximum size of an RVec<char> to ~4GB but we don't expect this to ever be a problem,; 141 // and we prefer the smaller Size_T to reduce the size of each RVec object.; 142 using Size_T = int32_t;; 143 ; 144protected:; 145 void *fBeginX;; 146 /// Always >= 0.; 147 // Type is signed only for consistency with fCapacity.; 148 Size_T fSize = 0;; 149 /// Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode.; 150 Size_T fCapacity;; 151 ; 152 /// The maximum value of the Size_T used.; 153 static constexpr size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }; 154 ; 155 SmallVectorBase() = delete;; 156 SmallVectorBase(void *FirstEl, size_t TotalCapacity) : fBeginX(FirstEl), fCapacity(TotalCapacity) {}; 157 ; 158 /// This is an implementation of the grow() method which only works; 159 /// on POD-like data types and is out of line to reduce code duplication.; 160 /// This function will report a fatal error if it cannot increase capacity.; 161 void grow_pod(void *FirstEl, size_t MinSize, size_t TSize);; 162 ; 163 /// Report that MinSize doesn't fit into this vector's size type. Throws; 164 /// std::length_error or calls report_fatal_error.; 165 static void report_size_overflow(size_t MinSize);; 166 /// Report that this vector is already at maximum capacity. Throws; 167 /// std::length_error or calls report_fatal_error.; 168 static void report_at_maximum_capacity();; 169 ; 170 /// If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own.; 171 bool Owns() const { return fCapacity != -1; }; 172 ; 173public:; 174 size_t size() const { return fSize; }; 175 size_t capacity() const noexcept { return ",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:7765,Energy Efficiency,allocate,allocated,7765,"orBase)];; 201 alignas(T) char FirstEl[sizeof(T)];; 202};; 203 ; 204/// This is the part of SmallVectorTemplateBase which does not depend on whether the type T is a POD.; 205template <typename T>; 206class R__CLING_PTRCHECK(off) SmallVectorTemplateCommon : public SmallVectorBase {; 207 using Base = SmallVectorBase;; 208 ; 209 /// Find the address of the first element. For this pointer math to be valid; 210 /// with small-size of 0 for T with lots of alignment, it's important that; 211 /// SmallVectorStorage is properly-aligned even for small-size of 0.; 212 void *getFirstEl() const; 213 {; 214 return const_cast<void *>(reinterpret_cast<const void *>(reinterpret_cast<const char *>(this) +; 215 offsetof(SmallVectorAlignmentAndSize<T>, FirstEl)));; 216 }; 217 // Space after 'FirstEl' is clobbered, do not add any instance vars after it.; 218 ; 219protected:; 220 SmallVectorTemplateCommon(size_t Size) : Base(getFirstEl(), Size) {}; 221 ; 222 void grow_pod(size_t MinSize, size_t TSize) { Base::grow_pod(getFirstEl(), MinSize, TSize); }; 223 ; 224 /// Return true if this is a smallvector which has not had dynamic; 225 /// memory allocated for it.; 226 bool isSmall() const { return this->fBeginX == getFirstEl(); }; 227 ; 228 /// Put this vector in a state of being small.; 229 void resetToSmall(); 230 {; 231 this->fBeginX = getFirstEl();; 232 // from the original LLVM implementation:; 233 // FIXME: Setting fCapacity to 0 is suspect.; 234 this->fSize = this->fCapacity = 0;; 235 }; 236 ; 237public:; 238 // note that fSize is a _signed_ integer, but we expose it as an unsigned integer for consistency with STL containers; 239 // as well as backward-compatibility; 240 using size_type = size_t;; 241 using difference_type = ptrdiff_t;; 242 using value_type = T;; 243 using iterator = T *;; 244 using const_iterator = const T *;; 245 ; 246 using const_reverse_iterator = std::reverse_iterator<const_iterator>;; 247 using reverse_iterator = std::reverse_iterator<iterator>;; 248 ; 249 usin",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:12784,Energy Efficiency,allocate,allocated,12784,"_constructible<T>::value) &&; 327 std::is_trivially_destructible<T>::value>; 328class R__CLING_PTRCHECK(off) SmallVectorTemplateBase : public SmallVectorTemplateCommon<T> {; 329protected:; 330 SmallVectorTemplateBase(size_t Size) : SmallVectorTemplateCommon<T>(Size) {}; 331 ; 332 static void destroy_range(T *S, T *E); 333 {; 334 while (S != E) {; 335 --E;; 336 E->~T();; 337 }; 338 }; 339 ; 340 /// Move the range [I, E) into the uninitialized memory starting with ""Dest"",; 341 /// constructing elements as needed.; 342 template <typename It1, typename It2>; 343 static void uninitialized_move(It1 I, It1 E, It2 Dest); 344 {; 345 std::uninitialized_copy(std::make_move_iterator(I), std::make_move_iterator(E), Dest);; 346 }; 347 ; 348 /// Copy the range [I, E) onto the uninitialized memory starting with ""Dest"",; 349 /// constructing elements as needed.; 350 template <typename It1, typename It2>; 351 static void uninitialized_copy(It1 I, It1 E, It2 Dest); 352 {; 353 std::uninitialized_copy(I, E, Dest);; 354 }; 355 ; 356 /// Grow the allocated memory (without initializing new elements), doubling; 357 /// the size of the allocated memory. Guarantees space for at least one more; 358 /// element, or MinSize more elements if specified.; 359 void grow(size_t MinSize = 0);; 360 ; 361public:; 362 void push_back(const T &Elt); 363 {; 364 if (R__unlikely(this->size() >= this->capacity())); 365 this->grow();; 366 ::new ((void *)this->end()) T(Elt);; 367 this->set_size(this->size() + 1);; 368 }; 369 ; 370 void push_back(T &&Elt); 371 {; 372 if (R__unlikely(this->size() >= this->capacity())); 373 this->grow();; 374 ::new ((void *)this->end()) T(::std::move(Elt));; 375 this->set_size(this->size() + 1);; 376 }; 377 ; 378 void pop_back(); 379 {; 380 this->set_size(this->size() - 1);; 381 this->end()->~T();; 382 }; 383};; 384 ; 385// Define this out-of-line to dissuade the C++ compiler from inlining it.; 386template <typename T, bool TriviallyCopyable>; 387void R__CLING_PTRCHECK(off) SmallVec",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:12872,Energy Efficiency,allocate,allocated,12872,"_constructible<T>::value) &&; 327 std::is_trivially_destructible<T>::value>; 328class R__CLING_PTRCHECK(off) SmallVectorTemplateBase : public SmallVectorTemplateCommon<T> {; 329protected:; 330 SmallVectorTemplateBase(size_t Size) : SmallVectorTemplateCommon<T>(Size) {}; 331 ; 332 static void destroy_range(T *S, T *E); 333 {; 334 while (S != E) {; 335 --E;; 336 E->~T();; 337 }; 338 }; 339 ; 340 /// Move the range [I, E) into the uninitialized memory starting with ""Dest"",; 341 /// constructing elements as needed.; 342 template <typename It1, typename It2>; 343 static void uninitialized_move(It1 I, It1 E, It2 Dest); 344 {; 345 std::uninitialized_copy(std::make_move_iterator(I), std::make_move_iterator(E), Dest);; 346 }; 347 ; 348 /// Copy the range [I, E) onto the uninitialized memory starting with ""Dest"",; 349 /// constructing elements as needed.; 350 template <typename It1, typename It2>; 351 static void uninitialized_copy(It1 I, It1 E, It2 Dest); 352 {; 353 std::uninitialized_copy(I, E, Dest);; 354 }; 355 ; 356 /// Grow the allocated memory (without initializing new elements), doubling; 357 /// the size of the allocated memory. Guarantees space for at least one more; 358 /// element, or MinSize more elements if specified.; 359 void grow(size_t MinSize = 0);; 360 ; 361public:; 362 void push_back(const T &Elt); 363 {; 364 if (R__unlikely(this->size() >= this->capacity())); 365 this->grow();; 366 ::new ((void *)this->end()) T(Elt);; 367 this->set_size(this->size() + 1);; 368 }; 369 ; 370 void push_back(T &&Elt); 371 {; 372 if (R__unlikely(this->size() >= this->capacity())); 373 this->grow();; 374 ::new ((void *)this->end()) T(::std::move(Elt));; 375 this->set_size(this->size() + 1);; 376 }; 377 ; 378 void pop_back(); 379 {; 380 this->set_size(this->size() - 1);; 381 this->end()->~T();; 382 }; 383};; 384 ; 385// Define this out-of-line to dissuade the C++ compiler from inlining it.; 386template <typename T, bool TriviallyCopyable>; 387void R__CLING_PTRCHECK(off) SmallVec",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:17280,Energy Efficiency,allocate,allocated,17280,"nto it as needed.; 448 template <typename It1, typename It2>; 449 static void uninitialized_copy(It1 I, It1 E, It2 Dest); 450 {; 451 // Arbitrary iterator types; just use the basic implementation.; 452 std::uninitialized_copy(I, E, Dest);; 453 }; 454 ; 455 /// Copy the range [I, E) onto the uninitialized memory; 456 /// starting with ""Dest"", constructing elements into it as needed.; 457 template <typename T1, typename T2>; 458 static void uninitialized_copy(; 459 T1 *I, T1 *E, T2 *Dest,; 460 typename std::enable_if<std::is_same<typename std::remove_const<T1>::type, T2>::value>::type * = nullptr); 461 {; 462 // Use memcpy for PODs iterated by pointers (which includes SmallVector; 463 // iterators): std::uninitialized_copy optimizes to memmove, but we can; 464 // use memcpy here. Note that I and E are iterators and thus might be; 465 // invalid for memcpy if they are equal.; 466 if (I != E); 467 memcpy(reinterpret_cast<void *>(Dest), I, (E - I) * sizeof(T));; 468 }; 469 ; 470 /// Double the size of the allocated memory, guaranteeing space for at; 471 /// least one more element or MinSize if specified.; 472 void grow(size_t MinSize = 0); 473 {; 474 this->grow_pod(MinSize, sizeof(T));; 475 }; 476 ; 477public:; 478 using iterator = typename SuperClass::iterator;; 479 using const_iterator = typename SuperClass::const_iterator;; 480 using reference = typename SuperClass::reference;; 481 using size_type = typename SuperClass::size_type;; 482 ; 483 void push_back(const T &Elt); 484 {; 485 if (R__unlikely(this->size() >= this->capacity())); 486 this->grow();; 487 memcpy(reinterpret_cast<void *>(this->end()), &Elt, sizeof(T));; 488 this->set_size(this->size() + 1);; 489 }; 490 ; 491 void pop_back() { this->set_size(this->size() - 1); }; 492};; 493 ; 494/// Storage for the SmallVector elements. This is specialized for the N=0 case; 495/// to avoid allocating unnecessary storage.; 496template <typename T, unsigned N>; 497struct SmallVectorStorage {; 498 alignas(T) char InlineElt",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:18641,Energy Efficiency,allocate,allocate,18641,"_type;; 482 ; 483 void push_back(const T &Elt); 484 {; 485 if (R__unlikely(this->size() >= this->capacity())); 486 this->grow();; 487 memcpy(reinterpret_cast<void *>(this->end()), &Elt, sizeof(T));; 488 this->set_size(this->size() + 1);; 489 }; 490 ; 491 void pop_back() { this->set_size(this->size() - 1); }; 492};; 493 ; 494/// Storage for the SmallVector elements. This is specialized for the N=0 case; 495/// to avoid allocating unnecessary storage.; 496template <typename T, unsigned N>; 497struct SmallVectorStorage {; 498 alignas(T) char InlineElts[N * sizeof(T)]{};; 499};; 500 ; 501/// We need the storage to be properly aligned even for small-size of 0 so that; 502/// the pointer math in \a SmallVectorTemplateCommon::getFirstEl() is; 503/// well-defined.; 504template <typename T>; 505struct alignas(T) SmallVectorStorage<T, 0> {; 506};; 507 ; 508/// The size of the inline storage of an RVec.; 509/// Our policy is to allocate at least 8 elements (or more if they all fit into one cacheline); 510/// unless the size of the buffer with 8 elements would be over a certain maximum size.; 511template <typename T>; 512struct RVecInlineStorageSize {; 513private:; 514#ifdef R__HAS_HARDWARE_INTERFERENCE_SIZE; 515 constexpr std::size_t cacheLineSize = std::hardware_destructive_interference_size;; 516#else; 517 // safe bet: assume the typical 64 bytes; 518 static constexpr std::size_t cacheLineSize = 64;; 519#endif; 520 static constexpr unsigned elementsPerCacheLine = (cacheLineSize - sizeof(SmallVectorBase)) / sizeof(T);; 521 static constexpr unsigned maxInlineByteSize = 1024;; 522 ; 523public:; 524 static constexpr unsigned value =; 525 elementsPerCacheLine >= 8 ? elementsPerCacheLine : (sizeof(T) * 8 > maxInlineByteSize ? 0 : 8);; 526};; 527 ; 528// A C++14-compatible implementation of std::uninitialized_value_construct; 529template <typename ForwardIt>; 530void UninitializedValueConstruct(ForwardIt first, ForwardIt last); 531{; 532#if __cplusplus < 201703L; 533 for (; first !=",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:20586,Energy Efficiency,reduce,reduce,20586,"tion of std::uninitialized_value_construct; 529template <typename ForwardIt>; 530void UninitializedValueConstruct(ForwardIt first, ForwardIt last); 531{; 532#if __cplusplus < 201703L; 533 for (; first != last; ++first); 534 new (static_cast<void *>(std::addressof(*first))) typename std::iterator_traits<ForwardIt>::value_type();; 535#else; 536 std::uninitialized_value_construct(first, last);; 537#endif; 538}; 539 ; 540/// An unsafe function to reset the buffer for which this RVec is acting as a view.; 541///; 542/// \note This is a low-level method that _must_ be called on RVecs that are already non-owning:; 543/// - it does not put the RVec in ""non-owning mode"" (fCapacity == -1); 544/// - it does not free any owned buffer; 545template <typename T>; 546void ResetView(RVec<T> &v, T* addr, std::size_t sz); 547{; 548 v.fBeginX = addr;; 549 v.fSize = sz;; 550}; 551 ; 552} // namespace VecOps; 553} // namespace Internal; 554 ; 555namespace Detail {; 556namespace VecOps {; 557 ; 558/// This class consists of common code factored out of the SmallVector class to; 559/// reduce code duplication based on the SmallVector 'N' template parameter.; 560template <typename T>; 561class R__CLING_PTRCHECK(off) RVecImpl : public Internal::VecOps::SmallVectorTemplateBase<T> {; 562 using SuperClass = Internal::VecOps::SmallVectorTemplateBase<T>;; 563 ; 564public:; 565 using iterator = typename SuperClass::iterator;; 566 using const_iterator = typename SuperClass::const_iterator;; 567 using reference = typename SuperClass::reference;; 568 using size_type = typename SuperClass::size_type;; 569 ; 570protected:; 571 // Default ctor - Initialize to empty.; 572 explicit RVecImpl(unsigned N) : ROOT::Internal::VecOps::SmallVectorTemplateBase<T>(N) {}; 573 ; 574public:; 575 RVecImpl(const RVecImpl &) = delete;; 576 ; 577 ~RVecImpl(); 578 {; 579 // Subclass has already destructed this vector's elements.; 580 // If this wasn't grown from the inline copy, deallocate the old space.; 581 if (!this->isS",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:33236,Energy Efficiency,efficient,efficient,33236,"; 916 ; 917 void insert(iterator I, std::initializer_list<T> IL) { insert(I, IL.begin(), IL.end()); }; 918 ; 919 template <typename... ArgTypes>; 920 reference emplace_back(ArgTypes &&...Args); 921 {; 922 if (R__unlikely(this->size() >= this->capacity())); 923 this->grow();; 924 ::new ((void *)this->end()) T(std::forward<ArgTypes>(Args)...);; 925 this->set_size(this->size() + 1);; 926 return this->back();; 927 }; 928 ; 929 RVecImpl &operator=(const RVecImpl &RHS);; 930 ; 931 RVecImpl &operator=(RVecImpl &&RHS);; 932};; 933 ; 934template <typename T>; 935void RVecImpl<T>::swap(RVecImpl<T> &RHS); 936{; 937 if (this == &RHS); 938 return;; 939 ; 940 // We can only avoid copying elements if neither vector is small.; 941 if (!this->isSmall() && !RHS.isSmall()) {; 942 std::swap(this->fBeginX, RHS.fBeginX);; 943 std::swap(this->fSize, RHS.fSize);; 944 std::swap(this->fCapacity, RHS.fCapacity);; 945 return;; 946 }; 947 ; 948 // This block handles the swap of a small and a non-owning vector; 949 // It is more efficient to first move the non-owning vector, hence the 2 cases; 950 if (this->isSmall() && !RHS.Owns()) { // the right vector is non-owning; 951 RVecImpl<T> temp(0);; 952 temp = std::move(RHS);; 953 RHS = std::move(*this);; 954 *this = std::move(temp);; 955 return;; 956 } else if (RHS.isSmall() && !this->Owns()) { // the left vector is non-owning; 957 RVecImpl<T> temp(0);; 958 temp = std::move(*this);; 959 *this = std::move(RHS);; 960 RHS = std::move(temp);; 961 return;; 962 }; 963 ; 964 if (RHS.size() > this->capacity()); 965 this->grow(RHS.size());; 966 if (this->size() > RHS.capacity()); 967 RHS.grow(this->size());; 968 ; 969 // Swap the shared elements.; 970 size_t NumShared = this->size();; 971 if (NumShared > RHS.size()); 972 NumShared = RHS.size();; 973 for (size_type i = 0; i != NumShared; ++i); 974 std::iter_swap(this->begin() + i, RHS.begin() + i);; 975 ; 976 // Copy over the extra elts.; 977 if (this->size() > RHS.size()) {; 978 size_t EltDiff = this->size()",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:35848,Energy Efficiency,efficient,efficiently,35848,"991 }; 992}; 993 ; 994template <typename T>; 995RVecImpl<T> &RVecImpl<T>::operator=(const RVecImpl<T> &RHS); 996{; 997 // Avoid self-assignment.; 998 if (this == &RHS); 999 return *this;; 1000 ; 1001 // If we already have sufficient space, assign the common elements, then; 1002 // destroy any excess.; 1003 size_t RHSSize = RHS.size();; 1004 size_t CurSize = this->size();; 1005 if (CurSize >= RHSSize) {; 1006 // Assign common elements.; 1007 iterator NewEnd;; 1008 if (RHSSize); 1009 NewEnd = std::copy(RHS.begin(), RHS.begin() + RHSSize, this->begin());; 1010 else; 1011 NewEnd = this->begin();; 1012 ; 1013 // Destroy excess elements.; 1014 if (this->Owns()); 1015 this->destroy_range(NewEnd, this->end());; 1016 ; 1017 // Trim.; 1018 this->set_size(RHSSize);; 1019 return *this;; 1020 }; 1021 ; 1022 // If we have to grow to have enough elements, destroy the current elements.; 1023 // This allows us to avoid copying them during the grow.; 1024 // From the original LLVM implementation:; 1025 // FIXME: don't do this if they're efficiently moveable.; 1026 if (this->capacity() < RHSSize) {; 1027 if (this->Owns()) {; 1028 // Destroy current elements.; 1029 this->destroy_range(this->begin(), this->end());; 1030 }; 1031 this->set_size(0);; 1032 CurSize = 0;; 1033 this->grow(RHSSize);; 1034 } else if (CurSize) {; 1035 // Otherwise, use assignment for the already-constructed elements.; 1036 std::copy(RHS.begin(), RHS.begin() + CurSize, this->begin());; 1037 }; 1038 ; 1039 // Copy construct the new elements in place.; 1040 this->uninitialized_copy(RHS.begin() + CurSize, RHS.end(), this->begin() + CurSize);; 1041 ; 1042 // Set end.; 1043 this->set_size(RHSSize);; 1044 return *this;; 1045}; 1046 ; 1047template <typename T>; 1048RVecImpl<T> &RVecImpl<T>::operator=(RVecImpl<T> &&RHS); 1049{; 1050 // Avoid self-assignment.; 1051 if (this == &RHS); 1052 return *this;; 1053 ; 1054 // If the RHS isn't small, clear this vector and then steal its buffer.; 1055 if (!RHS.isSmall()) {; 1056 if (",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:37988,Energy Efficiency,efficient,efficiently,37988,"1061 this->fBeginX = RHS.fBeginX;; 1062 this->fSize = RHS.fSize;; 1063 this->fCapacity = RHS.fCapacity;; 1064 RHS.resetToSmall();; 1065 return *this;; 1066 }; 1067 ; 1068 // If we already have sufficient space, assign the common elements, then; 1069 // destroy any excess.; 1070 size_t RHSSize = RHS.size();; 1071 size_t CurSize = this->size();; 1072 if (CurSize >= RHSSize) {; 1073 // Assign common elements.; 1074 iterator NewEnd = this->begin();; 1075 if (RHSSize); 1076 NewEnd = std::move(RHS.begin(), RHS.end(), NewEnd);; 1077 ; 1078 // Destroy excess elements and trim the bounds.; 1079 if (this->Owns()); 1080 this->destroy_range(NewEnd, this->end());; 1081 this->set_size(RHSSize);; 1082 ; 1083 // Clear the RHS.; 1084 RHS.clear();; 1085 ; 1086 return *this;; 1087 }; 1088 ; 1089 // If we have to grow to have enough elements, destroy the current elements.; 1090 // This allows us to avoid copying them during the grow.; 1091 // From the original LLVM implementation:; 1092 // FIXME: this may not actually make any sense if we can efficiently move; 1093 // elements.; 1094 if (this->capacity() < RHSSize) {; 1095 if (this->Owns()) {; 1096 // Destroy current elements.; 1097 this->destroy_range(this->begin(), this->end());; 1098 }; 1099 this->set_size(0);; 1100 CurSize = 0;; 1101 this->grow(RHSSize);; 1102 } else if (CurSize) {; 1103 // Otherwise, use assignment for the already-constructed elements.; 1104 std::move(RHS.begin(), RHS.begin() + CurSize, this->begin());; 1105 }; 1106 ; 1107 // Move-construct the new elements in place.; 1108 this->uninitialized_move(RHS.begin() + CurSize, RHS.end(), this->begin() + CurSize);; 1109 ; 1110 // Set end.; 1111 this->set_size(RHSSize);; 1112 ; 1113 RHS.clear();; 1114 return *this;; 1115}; 1116 ; 1117template <typename T>; 1118bool IsSmall(const ROOT::VecOps::RVec<T> &v); 1119{; 1120 return v.isSmall();; 1121}; 1122 ; 1123template <typename T>; 1124bool IsAdopting(const ROOT::VecOps::RVec<T> &v); 1125{; 1126 return !v.Owns();; 1127}; 1128 ;",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:47827,Energy Efficiency,charge,charge,47827," object in an invalid state.; 1349 ; 1350\note RVec methods (e.g. `at` or `size`) follow the STL naming convention instead of the ROOT naming convention in order; 1351to make RVec a drop-in replacement for `std::vector`.; 1352 ; 1353\htmlonly; 1354<a href=""https://doi.org/10.5281/zenodo.1253756""><img src=""https://zenodo.org/badge/DOI/10.5281/zenodo.1253756.svg"" alt=""DOI""></a>; 1355\endhtmlonly; 1356 ; 1357## Table of Contents; 1358- [Example](\ref example); 1359- [Arithmetic operations, logical operations and mathematical functions](\ref operationsandfunctions); 1360- [Owning and adopting memory](\ref owningandadoptingmemory); 1361- [Sorting and manipulation of indices](\ref sorting); 1362- [Usage in combination with RDataFrame](\ref usagetdataframe); 1363- [Reference for the RVec class](\ref RVecdoxyref); 1364- [Reference for RVec helper functions](https://root.cern/doc/master/namespaceROOT_1_1VecOps.html); 1365 ; 1366\anchor example; 1367## Example; 1368Suppose to have an event featuring a collection of muons with a certain pseudorapidity,; 1369momentum and charge, e.g.:; 1370~~~{.cpp}; 1371std::vector<short> mu_charge {1, 1, -1, -1, -1, 1, 1, -1};; 1372std::vector<float> mu_pt {56, 45, 32, 24, 12, 8, 7, 6.2};; 1373std::vector<float> mu_eta {3.1, -.2, -1.1, 1, 4.1, 1.6, 2.4, -.5};; 1374~~~; 1375Suppose you want to extract the transverse momenta of the muons satisfying certain; 1376criteria, for example consider only negatively charged muons with a pseudorapidity; 1377smaller or equal to 2 and with a transverse momentum greater than 10 GeV.; 1378Such a selection would require, among the other things, the management of an explicit; 1379loop, for example:; 1380~~~{.cpp}; 1381std::vector<float> goodMuons_pt;; 1382const auto size = mu_charge.size();; 1383for (size_t i=0; i < size; ++i) {; 1384 if (mu_pt[i] > 10 && abs(mu_eta[i]) <= 2. && mu_charge[i] == -1) {; 1385 goodMuons_pt.emplace_back(mu_pt[i]);; 1386 }; 1387}; 1388~~~; 1389These operations become straightforward ",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:48204,Energy Efficiency,charge,charged,48204,"58- [Example](\ref example); 1359- [Arithmetic operations, logical operations and mathematical functions](\ref operationsandfunctions); 1360- [Owning and adopting memory](\ref owningandadoptingmemory); 1361- [Sorting and manipulation of indices](\ref sorting); 1362- [Usage in combination with RDataFrame](\ref usagetdataframe); 1363- [Reference for the RVec class](\ref RVecdoxyref); 1364- [Reference for RVec helper functions](https://root.cern/doc/master/namespaceROOT_1_1VecOps.html); 1365 ; 1366\anchor example; 1367## Example; 1368Suppose to have an event featuring a collection of muons with a certain pseudorapidity,; 1369momentum and charge, e.g.:; 1370~~~{.cpp}; 1371std::vector<short> mu_charge {1, 1, -1, -1, -1, 1, 1, -1};; 1372std::vector<float> mu_pt {56, 45, 32, 24, 12, 8, 7, 6.2};; 1373std::vector<float> mu_eta {3.1, -.2, -1.1, 1, 4.1, 1.6, 2.4, -.5};; 1374~~~; 1375Suppose you want to extract the transverse momenta of the muons satisfying certain; 1376criteria, for example consider only negatively charged muons with a pseudorapidity; 1377smaller or equal to 2 and with a transverse momentum greater than 10 GeV.; 1378Such a selection would require, among the other things, the management of an explicit; 1379loop, for example:; 1380~~~{.cpp}; 1381std::vector<float> goodMuons_pt;; 1382const auto size = mu_charge.size();; 1383for (size_t i=0; i < size; ++i) {; 1384 if (mu_pt[i] > 10 && abs(mu_eta[i]) <= 2. && mu_charge[i] == -1) {; 1385 goodMuons_pt.emplace_back(mu_pt[i]);; 1386 }; 1387}; 1388~~~; 1389These operations become straightforward with RVec - we just need to *write what; 1390we mean*:; 1391~~~{.cpp}; 1392auto goodMuons_pt = mu_pt[ (mu_pt > 10.f && abs(mu_eta) <= 2.f && mu_charge == -1) ]; 1393~~~; 1394Now the clean collection of transverse momenta can be used within the rest of the data analysis, for; 1395example to fill a histogram.; 1396 ; 1397\anchor operationsandfunctions; 1398## Arithmetic operations, logical operations and mathematical functions; 139",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:51039,Energy Efficiency,allocate,allocated,51039,", asinh, acosh; 1425 - erf, erfc; 1426 - lgamma, tgamma; 1427 ; 1428If the VDT library is available, the following functions can be invoked. Internally the calculations; 1429are vectorized:; 1430 - fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; 1431 - fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan; 1432 ; 1433\anchor owningandadoptingmemory; 1434## Owning and adopting memory; 1435RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case,; 1436it can be constructed with the address of the memory associated to it and its length. For example:; 1437~~~{.cpp}; 1438std::vector<int> myStlVec {1,2,3};; 1439RVec<int> myRVec(myStlVec.data(), myStlVec.size());; 1440~~~; 1441In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"".; 1442If any method which implies a re-allocation is called, e.g. *emplace_back* or *resize*, the adopted; 1443memory is released and new one is allocated. The previous content is copied in the new memory and; 1444preserved.; 1445 ; 1446\anchor sorting; 1447## Sorting and manipulation of indices; 1448 ; 1449### Sorting; 1450RVec complies to the STL interfaces when it comes to iterations. As a result, standard algorithms; 1451can be used, for example sorting:; 1452~~~{.cpp}; 1453RVec<double> v{6., 4., 5.};; 1454std::sort(v.begin(), v.end());; 1455~~~; 1456 ; 1457For convenience, helpers are provided too:; 1458~~~{.cpp}; 1459auto sorted_v = Sort(v);; 1460auto reversed_v = Reverse(v);; 1461~~~; 1462 ; 1463### Manipulation of indices; 1464 ; 1465It is also possible to manipulated the RVecs acting on their indices. For example,; 1466the following syntax; 1467~~~{.cpp}; 1468RVecD v0 {9., 7., 8.};; 1469auto v1 = Take(v0, {1, 2, 0});; 1470~~~; 1471will yield a new RVec<double> the content of which is the first, second and zeroth element of; 1472v0, i.e. `{7., 8., 9.}`.; 1473 ; 1474The `Argsort` and `S",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:53544,Energy Efficiency,energy,energy,53544,"ract portions of the `RVec`. The content to be *taken*; 1482can be specified with an `RVec` of indices or an integer. If the integer is negative,; 1483elements will be picked starting from the end of the container:; 1484~~~{.cpp}; 1485RVecF vf {1.f, 2.f, 3.f, 4.f};; 1486auto vf_1 = Take(vf, {1, 3}); // The content is {2.f, 4.f}; 1487auto vf_2 = Take(vf, 2); // The content is {1.f, 2.f}; 1488auto vf_3 = Take(vf, -3); // The content is {2.f, 3.f, 4.f}; 1489~~~; 1490 ; 1491\anchor usagetdataframe; 1492## Usage in combination with RDataFrame; 1493RDataFrame leverages internally RVecs. Suppose to have a dataset stored in a; 1494TTree which holds these columns (here we choose C arrays to represent the; 1495collections, they could be as well std::vector instances):; 1496~~~{.bash}; 1497 nPart ""nPart/I"" An integer representing the number of particles; 1498 px ""px[nPart]/D"" The C array of the particles' x component of the momentum; 1499 py ""py[nPart]/D"" The C array of the particles' y component of the momentum; 1500 E ""E[nPart]/D"" The C array of the particles' Energy; 1501~~~; 1502Suppose you'd like to plot in a histogram the transverse momenta of all particles; 1503for which the energy is greater than 200 MeV.; 1504The code required would just be:; 1505~~~{.cpp}; 1506RDataFrame d(""mytree"", ""myfile.root"");; 1507auto cutPt = [](RVecD &pxs, RVecD &pys, RVecD &Es) {; 1508 auto all_pts = sqrt(pxs * pxs + pys * pys);; 1509 auto good_pts = all_pts[Es > 200.];; 1510 return good_pts;; 1511 };; 1512 ; 1513auto hpt = d.Define(""pt"", cutPt, {""px"", ""py"", ""E""}); 1514 .Histo1D(""pt"");; 1515hpt->Draw();; 1516~~~; 1517And if you'd like to express your selection as a string:; 1518~~~{.cpp}; 1519RDataFrame d(""mytree"", ""myfile.root"");; 1520auto hpt = d.Define(""pt"", ""sqrt(pxs * pxs + pys * pys)[E>200]""); 1521 .Histo1D(""pt"");; 1522hpt->Draw();; 1523~~~; 1524\anchor RVecdoxyref; 1525**/; 1526// clang-format on; 1527 ; 1528template <typename T>; 1529class R__CLING_PTRCHECK(off) RVec : public RVecN<T",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:127149,Energy Efficiency,reduce,reduce,127149,"Style GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; free#define freeDefinition civetweb.c:1539; malloc#define mallocDefinition civetweb.c:1536; ROOT::Detail::VecOps::RVecImplThis class consists of common code factored out of the SmallVector class to reduce code duplication b...Definition RVec.hxx:561; ROOT::Detail::VecOps::RVecImpl::assignvoid assign(size_type NumElts, const T &Elt)Definition RVec.hxx:680; ROOT::Detail::VecOps::RVecImpl::iteratortypename SuperClass::iterator iteratorDefinition RVec.hxx:565; ROOT::Detail::VecOps::RVecImpl::size_typetypename SuperClass::size_type size_typeDefinition RVec.hxx:568; ROOT::Detail::VecOps::RVecImpl::appendvoid append(in_iter in_start, in_iter in_end)Add the specified range to the end of the SmallVector.Definition RVec.hxx:654; ROOT::Detail::VecOps::RVecImpl::insertiterator insert(iterator I, T &&Elt)Definition RVec.hxx:741; ROOT::Detail::VecOps::RVecImpl::resizevoid resize(size_type N)Definition RVec.hxx:596; ROOT::Detail::VecOps::RVecImpl::assignvoid assign(std::initializer_list< T > IL)Definition RVec.hxx:698; ROOT::Detail::VecOps::RVecImpl::const_iteratortypename SuperClass::const_iterator const_iteratorDefinition RVec.hxx:566; ROOT::Detail:",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:132134,Energy Efficiency,allocate,allocated,132134,"() constDefinition RVec.hxx:177; ROOT::Internal::VecOps::SmallVectorBase::fSizeSize_T fSizeAlways >= 0.Definition RVec.hxx:148; ROOT::Internal::VecOps::SmallVectorBase::Ownsbool Owns() constIf false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it do...Definition RVec.hxx:171; ROOT::Internal::VecOps::SmallVectorBase::capacitysize_t capacity() const noexceptDefinition RVec.hxx:175; ROOT::Internal::VecOps::SmallVectorBase::sizesize_t size() constDefinition RVec.hxx:174; ROOT::Internal::VecOps::SmallVectorBase::set_sizevoid set_size(size_t N)Set the array size to N, which the current array must have enough capacity for.Definition RVec.hxx:188; ROOT::Internal::VecOps::SmallVectorBase::fBeginXvoid * fBeginXDefinition RVec.hxx:145; ROOT::Internal::VecOps::SmallVectorTemplateBase< T, true >::iteratortypename SuperClass::iterator iteratorDefinition RVec.hxx:478; ROOT::Internal::VecOps::SmallVectorTemplateBase< T, true >::growvoid grow(size_t MinSize=0)Double the size of the allocated memory, guaranteeing space for at least one more element or MinSize ...Definition RVec.hxx:472; ROOT::Internal::VecOps::SmallVectorTemplateBase< T, true >::size_typetypename SuperClass::size_type size_typeDefinition RVec.hxx:481; ROOT::Internal::VecOps::SmallVectorTemplateBase< T, true >::referencetypename SuperClass::reference referenceDefinition RVec.hxx:480; ROOT::Internal::VecOps::SmallVectorTemplateBase< T, true >::push_backvoid push_back(const T &Elt)Definition RVec.hxx:483; ROOT::Internal::VecOps::SmallVectorTemplateBase< T, true >::pop_backvoid pop_back()Definition RVec.hxx:491; ROOT::Internal::VecOps::SmallVectorTemplateBase< T, true >::uninitialized_movestatic void uninitialized_move(It1 I, It1 E, It2 Dest)Move the range [I, E) onto the uninitialized memory starting with ""Dest"", constructing elements into ...Definition RVec.hxx:440; ROOT::Internal::VecOps::SmallVectorTemplateBase< T, true >::SmallVectorTemplateBaseSmallVectorTemplateBase(size_t",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:134636,Energy Efficiency,allocate,allocated,134636,"o ...Definition RVec.hxx:458; ROOT::Internal::VecOps::SmallVectorTemplateBase< T, true >::destroy_rangestatic void destroy_range(T *, T *)Definition RVec.hxx:435; ROOT::Internal::VecOps::SmallVectorTemplateBase< T, true >::uninitialized_copystatic void uninitialized_copy(It1 I, It1 E, It2 Dest)Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", constructing elements into ...Definition RVec.hxx:449; ROOT::Internal::VecOps::SmallVectorTemplateBaseSmallVectorTemplateBase<TriviallyCopyable = false> - This is where we put method implementations that...Definition RVec.hxx:328; ROOT::Internal::VecOps::SmallVectorTemplateBase::pop_backvoid pop_back()Definition RVec.hxx:378; ROOT::Internal::VecOps::SmallVectorTemplateBase::push_backvoid push_back(T &&Elt)Definition RVec.hxx:370; ROOT::Internal::VecOps::SmallVectorTemplateBase::push_backvoid push_back(const T &Elt)Definition RVec.hxx:362; ROOT::Internal::VecOps::SmallVectorTemplateBase::growvoid grow(size_t MinSize=0)Grow the allocated memory (without initializing new elements), doubling the size of the allocated mem...; ROOT::Internal::VecOps::SmallVectorTemplateBase::uninitialized_movestatic void uninitialized_move(It1 I, It1 E, It2 Dest)Move the range [I, E) into the uninitialized memory starting with ""Dest"", constructing elements as ne...Definition RVec.hxx:343; ROOT::Internal::VecOps::SmallVectorTemplateBase::SmallVectorTemplateBaseSmallVectorTemplateBase(size_t Size)Definition RVec.hxx:330; ROOT::Internal::VecOps::SmallVectorTemplateBase::destroy_rangestatic void destroy_range(T *S, T *E)Definition RVec.hxx:332; ROOT::Internal::VecOps::SmallVectorTemplateBase::uninitialized_copystatic void uninitialized_copy(It1 I, It1 E, It2 Dest)Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", constructing elements as ne...Definition RVec.hxx:351; ROOT::Internal::VecOps::SmallVectorTemplateCommonThis is the part of SmallVectorTemplateBase which does not depend on whether the type T is a PO",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:134715,Energy Efficiency,allocate,allocated,134715,"o ...Definition RVec.hxx:458; ROOT::Internal::VecOps::SmallVectorTemplateBase< T, true >::destroy_rangestatic void destroy_range(T *, T *)Definition RVec.hxx:435; ROOT::Internal::VecOps::SmallVectorTemplateBase< T, true >::uninitialized_copystatic void uninitialized_copy(It1 I, It1 E, It2 Dest)Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", constructing elements into ...Definition RVec.hxx:449; ROOT::Internal::VecOps::SmallVectorTemplateBaseSmallVectorTemplateBase<TriviallyCopyable = false> - This is where we put method implementations that...Definition RVec.hxx:328; ROOT::Internal::VecOps::SmallVectorTemplateBase::pop_backvoid pop_back()Definition RVec.hxx:378; ROOT::Internal::VecOps::SmallVectorTemplateBase::push_backvoid push_back(T &&Elt)Definition RVec.hxx:370; ROOT::Internal::VecOps::SmallVectorTemplateBase::push_backvoid push_back(const T &Elt)Definition RVec.hxx:362; ROOT::Internal::VecOps::SmallVectorTemplateBase::growvoid grow(size_t MinSize=0)Grow the allocated memory (without initializing new elements), doubling the size of the allocated mem...; ROOT::Internal::VecOps::SmallVectorTemplateBase::uninitialized_movestatic void uninitialized_move(It1 I, It1 E, It2 Dest)Move the range [I, E) into the uninitialized memory starting with ""Dest"", constructing elements as ne...Definition RVec.hxx:343; ROOT::Internal::VecOps::SmallVectorTemplateBase::SmallVectorTemplateBaseSmallVectorTemplateBase(size_t Size)Definition RVec.hxx:330; ROOT::Internal::VecOps::SmallVectorTemplateBase::destroy_rangestatic void destroy_range(T *S, T *E)Definition RVec.hxx:332; ROOT::Internal::VecOps::SmallVectorTemplateBase::uninitialized_copystatic void uninitialized_copy(It1 I, It1 E, It2 Dest)Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", constructing elements as ne...Definition RVec.hxx:351; ROOT::Internal::VecOps::SmallVectorTemplateCommonThis is the part of SmallVectorTemplateBase which does not depend on whether the type T is a PO",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:137544,Energy Efficiency,allocate,allocated,137544,T::Internal::VecOps::SmallVectorTemplateCommon::backconst_reference back() constDefinition RVec.hxx:308; ROOT::Internal::VecOps::SmallVectorTemplateCommon::const_pointerconst T * const_pointerDefinition RVec.hxx:252; ROOT::Internal::VecOps::SmallVectorTemplateCommon::resetToSmallvoid resetToSmall()Put this vector in a state of being small.Definition RVec.hxx:229; ROOT::Internal::VecOps::SmallVectorTemplateCommon::pointerT * pointerDefinition RVec.hxx:251; ROOT::Internal::VecOps::SmallVectorTemplateCommon::frontreference front()Definition RVec.hxx:284; ROOT::Internal::VecOps::SmallVectorTemplateCommon::beginiterator begin() noexceptDefinition RVec.hxx:259; ROOT::Internal::VecOps::SmallVectorTemplateCommon::reverse_iteratorstd::reverse_iterator< iterator > reverse_iteratorDefinition RVec.hxx:247; ROOT::Internal::VecOps::SmallVectorTemplateCommon::const_referenceconst T & const_referenceDefinition RVec.hxx:250; ROOT::Internal::VecOps::SmallVectorTemplateCommon::isSmallbool isSmall() constReturn true if this is a smallvector which has not had dynamic memory allocated for it.Definition RVec.hxx:226; ROOT::Internal::VecOps::SmallVectorTemplateCommon::value_typeT value_typeDefinition RVec.hxx:242; ROOT::Internal::VecOps::SmallVectorTemplateCommon::crendconst_reverse_iterator crend() const noexceptDefinition RVec.hxx:272; ROOT::Internal::VecOps::SmallVectorTemplateCommon::endconst_iterator end() const noexceptDefinition RVec.hxx:263; ROOT::Internal::VecOps::SmallVectorTemplateCommon::SmallVectorTemplateCommonSmallVectorTemplateCommon(size_t Size)Definition RVec.hxx:220; ROOT::Internal::VecOps::SmallVectorTemplateCommon::emptybool empty() constDefinition RVec.hxx:177; ROOT::Internal::VecOps::SmallVectorTemplateCommon::referenceT & referenceDefinition RVec.hxx:249; ROOT::Internal::VecOps::SmallVectorTemplateCommon::crbeginconst_reverse_iterator crbegin() const noexceptDefinition RVec.hxx:269; ROOT::Internal::VecOps::SmallVectorTemplateCommon::iteratorT * iteratorDefinition RV,MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:150558,Energy Efficiency,power,power,150558," yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; T2#define T2Definition md5.inl:147; T7#define T7Definition md5.inl:152; T6#define T6Definition md5.inl:151; T3#define T3Definition md5.inl:148; T5#define T5Definition md5.inl:150; T4#define T4Definition md5.inl:149; F#define F(x, y, z); I#define I(x, y, z); T1#define T1Definition md5.inl:146; ROOT::Detail::VecOps::IsSmallbool IsSmall(const ROOT::VecOps::RVec< T > &v)Definition RVec.hxx:1118; ROOT::Detail::VecOps::IsAdoptingbool IsAdopting(const ROOT::VecOps::RVec< T > &v)Definition RVec.hxx:1124; ROOT::Internal::VecOps::MapImplauto MapImpl(F &&f, RVecs &&... vs) -> RVec< decltype(f(vs[0]...))>Definition RVec.hxx:105; ROOT::Internal::VecOps::ResetViewvoid ResetView(RVec< T > &v, T *addr, std::size_t sz)An unsafe function to reset the buffer for which this RVec is acting as a view.Definition RVec.hxx:546; ROOT::Internal::VecOps::NextPowerOf2uint64_t NextPowerOf2(uint64_t A)Return the next power of two (in 64-bits) that is strictly greater than A.Definition RVec.hxx:126; ROOT::Internal::VecOps::Allconstexpr bool All(const bool *vals, std::size_t size)Definition RVec.hxx:79; ROOT::Internal::VecOps::GetVectorsSizestd::size_t GetVectorsSize(const std::string &id, const RVec< T > &... vs)Definition RVec.hxx:88; ROOT::Internal::VecOps::UninitializedValueConstructvoid UninitializedValueConstruct(ForwardIt first, ForwardIt last)Definition RVec.hxx:530; ROOT::Internal::VecOps::MapFromTupleauto MapFromTuple(Tuple_t &&t, std::index_sequence< Is... >) -> decltype(MapImpl(std::get< std::tuple_size< Tuple_t >::value - 1 >(t), std::get< Is >(t)...))Definition RVec.hxx:117; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; Dot#define Dot(u, v)Definition normal.c:49; v2@ v2Definition rootcling_impl.cxx:3690; v0@ v0Definition rootcling_impl.cxx:3688; v@ vDefinition rootcling_imp",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:6757,Integrability,depend,depend,6757,"() const { return fSize; }; 175 size_t capacity() const noexcept { return Owns() ? fCapacity : fSize; }; 176 ; 177 R__RVEC_NODISCARD bool empty() const { return !fSize; }; 178 ; 179 /// Set the array size to \p N, which the current array must have enough; 180 /// capacity for.; 181 ///; 182 /// This does not construct or destroy any elements in the vector.; 183 ///; 184 /// Clients can use this in conjunction with capacity() to write past the end; 185 /// of the buffer when they know that more elements are available, and only; 186 /// update the size later. This avoids the cost of value initializing elements; 187 /// which will only be overwritten.; 188 void set_size(size_t N); 189 {; 190 if (N > capacity()) {; 191 throw std::runtime_error(""Setting size to a value greater than capacity."");; 192 }; 193 fSize = N;; 194 }; 195};; 196 ; 197/// Used to figure out the offset of the first element of an RVec; 198template <class T>; 199struct SmallVectorAlignmentAndSize {; 200 alignas(SmallVectorBase) char Base[sizeof(SmallVectorBase)];; 201 alignas(T) char FirstEl[sizeof(T)];; 202};; 203 ; 204/// This is the part of SmallVectorTemplateBase which does not depend on whether the type T is a POD.; 205template <typename T>; 206class R__CLING_PTRCHECK(off) SmallVectorTemplateCommon : public SmallVectorBase {; 207 using Base = SmallVectorBase;; 208 ; 209 /// Find the address of the first element. For this pointer math to be valid; 210 /// with small-size of 0 for T with lots of alignment, it's important that; 211 /// SmallVectorStorage is properly-aligned even for small-size of 0.; 212 void *getFirstEl() const; 213 {; 214 return const_cast<void *>(reinterpret_cast<const void *>(reinterpret_cast<const char *>(this) +; 215 offsetof(SmallVectorAlignmentAndSize<T>, FirstEl)));; 216 }; 217 // Space after 'FirstEl' is clobbered, do not add any instance vars after it.; 218 ; 219protected:; 220 SmallVectorTemplateCommon(size_t Size) : Base(getFirstEl(), Size) {}; 221 ; 222 void grow_pod(s",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:45772,Integrability,interface,interface,45772," this->operator[](pos);; 1303 }; 1304 ; 1305 /// No exception thrown. The user specifies the desired value in case the RVecN is shorter than `pos`.; 1306 value_type at(size_type pos, value_type fallback); 1307 {; 1308 if (pos >= size_type(this->fSize)); 1309 return fallback;; 1310 return this->operator[](pos);; 1311 }; 1312 ; 1313 /// No exception thrown. The user specifies the desired value in case the RVecN is shorter than `pos`.; 1314 value_type at(size_type pos, value_type fallback) const; 1315 {; 1316 if (pos >= size_type(this->fSize)); 1317 return fallback;; 1318 return this->operator[](pos);; 1319 }; 1320};; 1321 ; 1322// clang-format off; 1323/**; 1324\class ROOT::VecOps::RVec; 1325\brief A ""std::vector""-like collection of values implementing handy operation to analyse them; 1326\tparam T The type of the contained objects; 1327 ; 1328A RVec is a container designed to make analysis of values' collections fast and easy.; 1329Its storage is contiguous in memory and its interface is designed such to resemble to the one; 1330of the stl vector. In addition the interface features methods and; 1331[external functions](https://root.cern/doc/master/namespaceROOT_1_1VecOps.html) to ease the manipulation and analysis; 1332of the data in the RVec.; 1333 ; 1334\note ROOT::VecOps::RVec can also be spelled simply ROOT::RVec. Shorthand aliases such as ROOT::RVecI or ROOT::RVecD; 1335are also available as template instantiations of RVec of fundamental types. The full list of available aliases:; 1336- RVecB (`bool`); 1337- RVecC (`char`); 1338- RVecD (`double`); 1339- RVecF (`float`); 1340- RVecI (`int`); 1341- RVecL (`long`); 1342- RVecLL (`long long`); 1343- RVecU (`unsigned`); 1344- RVecUL (`unsigned long`); 1345- RVecULL (`unsigned long long`); 1346 ; 1347\note RVec does not attempt to be exception safe. Exceptions thrown by element constructors during insertions, swaps or; 1348other operations will be propagated potentially leaving the RVec object in an invalid state.; 134",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:45862,Integrability,interface,interface,45862,"e in case the RVecN is shorter than `pos`.; 1306 value_type at(size_type pos, value_type fallback); 1307 {; 1308 if (pos >= size_type(this->fSize)); 1309 return fallback;; 1310 return this->operator[](pos);; 1311 }; 1312 ; 1313 /// No exception thrown. The user specifies the desired value in case the RVecN is shorter than `pos`.; 1314 value_type at(size_type pos, value_type fallback) const; 1315 {; 1316 if (pos >= size_type(this->fSize)); 1317 return fallback;; 1318 return this->operator[](pos);; 1319 }; 1320};; 1321 ; 1322// clang-format off; 1323/**; 1324\class ROOT::VecOps::RVec; 1325\brief A ""std::vector""-like collection of values implementing handy operation to analyse them; 1326\tparam T The type of the contained objects; 1327 ; 1328A RVec is a container designed to make analysis of values' collections fast and easy.; 1329Its storage is contiguous in memory and its interface is designed such to resemble to the one; 1330of the stl vector. In addition the interface features methods and; 1331[external functions](https://root.cern/doc/master/namespaceROOT_1_1VecOps.html) to ease the manipulation and analysis; 1332of the data in the RVec.; 1333 ; 1334\note ROOT::VecOps::RVec can also be spelled simply ROOT::RVec. Shorthand aliases such as ROOT::RVecI or ROOT::RVecD; 1335are also available as template instantiations of RVec of fundamental types. The full list of available aliases:; 1336- RVecB (`bool`); 1337- RVecC (`char`); 1338- RVecD (`double`); 1339- RVecF (`float`); 1340- RVecI (`int`); 1341- RVecL (`long`); 1342- RVecLL (`long long`); 1343- RVecU (`unsigned`); 1344- RVecUL (`unsigned long`); 1345- RVecULL (`unsigned long long`); 1346 ; 1347\note RVec does not attempt to be exception safe. Exceptions thrown by element constructors during insertions, swaps or; 1348other operations will be propagated potentially leaving the RVec object in an invalid state.; 1349 ; 1350\note RVec methods (e.g. `at` or `size`) follow the STL naming convention instead of the ROOT nam",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:51245,Integrability,interface,interfaces,51245," fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; 1431 - fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan; 1432 ; 1433\anchor owningandadoptingmemory; 1434## Owning and adopting memory; 1435RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case,; 1436it can be constructed with the address of the memory associated to it and its length. For example:; 1437~~~{.cpp}; 1438std::vector<int> myStlVec {1,2,3};; 1439RVec<int> myRVec(myStlVec.data(), myStlVec.size());; 1440~~~; 1441In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"".; 1442If any method which implies a re-allocation is called, e.g. *emplace_back* or *resize*, the adopted; 1443memory is released and new one is allocated. The previous content is copied in the new memory and; 1444preserved.; 1445 ; 1446\anchor sorting; 1447## Sorting and manipulation of indices; 1448 ; 1449### Sorting; 1450RVec complies to the STL interfaces when it comes to iterations. As a result, standard algorithms; 1451can be used, for example sorting:; 1452~~~{.cpp}; 1453RVec<double> v{6., 4., 5.};; 1454std::sort(v.begin(), v.end());; 1455~~~; 1456 ; 1457For convenience, helpers are provided too:; 1458~~~{.cpp}; 1459auto sorted_v = Sort(v);; 1460auto reversed_v = Reverse(v);; 1461~~~; 1462 ; 1463### Manipulation of indices; 1464 ; 1465It is also possible to manipulated the RVecs acting on their indices. For example,; 1466the following syntax; 1467~~~{.cpp}; 1468RVecD v0 {9., 7., 8.};; 1469auto v1 = Take(v0, {1, 2, 0});; 1470~~~; 1471will yield a new RVec<double> the content of which is the first, second and zeroth element of; 1472v0, i.e. `{7., 8., 9.}`.; 1473 ; 1474The `Argsort` and `StableArgsort` helper extracts the indices which order the content of a `RVec`.; 1475For example, this snippet accomplishes in a more expressive way what we just achieved:; 1476~~~{.cpp}; 1477auto v",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:135598,Integrability,depend,depend,135598,"nal::VecOps::SmallVectorTemplateBase::growvoid grow(size_t MinSize=0)Grow the allocated memory (without initializing new elements), doubling the size of the allocated mem...; ROOT::Internal::VecOps::SmallVectorTemplateBase::uninitialized_movestatic void uninitialized_move(It1 I, It1 E, It2 Dest)Move the range [I, E) into the uninitialized memory starting with ""Dest"", constructing elements as ne...Definition RVec.hxx:343; ROOT::Internal::VecOps::SmallVectorTemplateBase::SmallVectorTemplateBaseSmallVectorTemplateBase(size_t Size)Definition RVec.hxx:330; ROOT::Internal::VecOps::SmallVectorTemplateBase::destroy_rangestatic void destroy_range(T *S, T *E)Definition RVec.hxx:332; ROOT::Internal::VecOps::SmallVectorTemplateBase::uninitialized_copystatic void uninitialized_copy(It1 I, It1 E, It2 Dest)Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", constructing elements as ne...Definition RVec.hxx:351; ROOT::Internal::VecOps::SmallVectorTemplateCommonThis is the part of SmallVectorTemplateBase which does not depend on whether the type T is a POD.Definition RVec.hxx:206; ROOT::Internal::VecOps::SmallVectorTemplateCommon::max_sizesize_type max_size() const noexceptDefinition RVec.hxx:275; ROOT::Internal::VecOps::SmallVectorTemplateCommon::cbeginconst_iterator cbegin() const noexceptDefinition RVec.hxx:261; ROOT::Internal::VecOps::SmallVectorTemplateCommon::grow_podvoid grow_pod(size_t MinSize, size_t TSize)Definition RVec.hxx:222; ROOT::Internal::VecOps::SmallVectorTemplateCommon::difference_typeptrdiff_t difference_typeDefinition RVec.hxx:241; ROOT::Internal::VecOps::SmallVectorTemplateCommon::rbeginreverse_iterator rbegin() noexceptDefinition RVec.hxx:267; ROOT::Internal::VecOps::SmallVectorTemplateCommon::backreference back()Definition RVec.hxx:300; ROOT::Internal::VecOps::SmallVectorTemplateCommon::cendconst_iterator cend() const noexceptDefinition RVec.hxx:264; ROOT::Internal::VecOps::SmallVectorTemplateCommon::backconst_reference back() constDefin",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:145013,Integrability,integrat,integration,145013,"::RVec::RVecRVec(std::initializer_list< T > IL)Definition RVec.hxx:1555; ROOT::VecOps::RVec::const_referencetypename SuperClass::const_reference const_referenceDefinition RVec.hxx:1536; ROOT::VecOps::RVec::RVecRVec()Definition RVec.hxx:1542; ROOT::VecOps::RVec::RVecRVec(size_t Size)Definition RVec.hxx:1546; ROOT::VecOps::RVec::RVecRVec(ItTy S, ItTy E)Definition RVec.hxx:1551; ROOT::VecOps::RVec::RVecRVec(const std::vector< T > &RHS)Definition RVec.hxx:1581; ROOT::VecOps::RVec::size_typetypename SuperClass::size_type size_typeDefinition RVec.hxx:1537; ROOT::VecOps::RVec::RVecRVec(Detail::VecOps::RVecImpl< T > &&RHS)Definition RVec.hxx:1573; ROOT::VecOps::RVec::RVecRVec(RVec &&RHS)Definition RVec.hxx:1565; ROOT::VecOps::RVec::value_typetypename SuperClass::value_type value_typeDefinition RVec.hxx:1538; ROOT::VecOps::RVec::operator=RVec & operator=(const RVec &RHS)Definition RVec.hxx:1559; R; double; ptTPaveText * ptDefinition entrylist_figure1.C:7; ROOT::Math::IntegrationOneDim::TypeTypeenumeration specifying the integration types.Definition AllIntegrationTypes.h:32; ROOT::VecOps::ReverseRVec< T > Reverse(const RVec< T > &v)Return copy of reversed vector.Definition RVec.hxx:2481; ROOT::VecOps::IntersectRVec< T > Intersect(const RVec< T > &v1, const RVec< T > &v2, bool v2_is_sorted=false)Return the intersection of elements of two RVecs.Definition RVec.hxx:2758; ROOT::VecOps::NonzeroRVec< typename RVec< T >::size_type > Nonzero(const RVec< T > &v)Return the indices of the elements which are not zero.Definition RVec.hxx:2727; RVEC_UNARY_OPERATOR#define RVEC_UNARY_OPERATOR(OP)Definition RVec.hxx:1616; RVEC_ASSIGNMENT_OPERATOR#define RVEC_ASSIGNMENT_OPERATOR(OP)Definition RVec.hxx:1687; ROOT::VecOps::StableArgsortRVec< typename RVec< T >::size_type > StableArgsort(const RVec< T > &v)Return an RVec of indices that sort the input RVec while keeping the order of equal elements.Definition RVec.hxx:2295; ROOT::VecOps::ConcatenateRVec< Common_t > Concatenate(const RVec< T0 > &v0,",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:269,Modifiability,adapt,adapted,269,". ROOT: math/vecops/inc/ROOT/RVec.hxx Source File. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. RVec.hxx. Go to the documentation of this file. 1// Author: Enrico Guiraud, Enric Tejedor, Danilo Piparo CERN 04/2021; 2// Implementation adapted from from llvm::SmallVector.; 3// See /math/vecops/ARCHITECTURE.md for more information.; 4 ; 5/*************************************************************************; 6 * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; 7 * All rights reserved. *; 8 * *; 9 * For the licensing terms see $ROOTSYS/LICENSE. *; 10 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 11 *************************************************************************/; 12 ; 13#ifndef ROOT_RVEC; 14#define ROOT_RVEC; 15 ; 16#if __cplusplus > 201402L; 17#define R__RVEC_NODISCARD [[nodiscard]]; 18#else; 19#define R__RVEC_NODISCARD; 20#endif; 21 ; 22#ifdef _WIN32; 23 #ifndef M_PI; 24 #ifndef _USE_MATH_DEFINES; 25 #define _USE_MATH_DEFINES; 26 #endif; 27 #include <math.h>; 28 #undef _USE_MATH_DEFINES; 29 #endif; 30 #define _VECOPS_USE_EXTERN_TEMPLATES false; 31#else; 32 #define _VECOPS_USE_EXTERN_TEMPLATES true; 33#endif; 34 ; 35#include <Rtypes.h> // R__CLING_PTRCHECK; 36#include <TError.h> // R__ASSERT; 37 ; 38#include <algorithm>; 39#include <cmath>; 40#include <cstring>; 41#include <limits> // for numeric_limits; 42#include <memory> // uninitialized_value_construct; 43#include <new>; 44#include <numeric> // for inner_product; 45#include <sstream>; 46#include <stdexcept>; 47#include <string>; 48#include <tuple>; 49#include <type_traits>; 50#include <utility>; 51#include <vector>; 52 ; 53#ifdef R__HAS_VDT; 54#include <vdt/vdtMath.h>; 55#endif; 56 ; 57 ; 58namespace ROOT {; 59 ; 60namespace VecOps {; 61template<typename T>; 62class RVec;; 63}; 64 ; 65namespace Internal {; 66namespace VecOps {; 67 ; 68template<typename T>; 69using RVec = ROOT::VecOps::RVec<T>;; 70 ; 71// clang-format off; 72template <typenam",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:39413,Modifiability,variab,variable-sized,39413,"0);; 1100 CurSize = 0;; 1101 this->grow(RHSSize);; 1102 } else if (CurSize) {; 1103 // Otherwise, use assignment for the already-constructed elements.; 1104 std::move(RHS.begin(), RHS.begin() + CurSize, this->begin());; 1105 }; 1106 ; 1107 // Move-construct the new elements in place.; 1108 this->uninitialized_move(RHS.begin() + CurSize, RHS.end(), this->begin() + CurSize);; 1109 ; 1110 // Set end.; 1111 this->set_size(RHSSize);; 1112 ; 1113 RHS.clear();; 1114 return *this;; 1115}; 1116 ; 1117template <typename T>; 1118bool IsSmall(const ROOT::VecOps::RVec<T> &v); 1119{; 1120 return v.isSmall();; 1121}; 1122 ; 1123template <typename T>; 1124bool IsAdopting(const ROOT::VecOps::RVec<T> &v); 1125{; 1126 return !v.Owns();; 1127}; 1128 ; 1129} // namespace VecOps; 1130} // namespace Detail; 1131 ; 1132namespace VecOps {; 1133// Note that we open here with @{ the Doxygen group vecops and it is; 1134// closed again at the end of the C++ namespace VecOps; 1135/**; 1136 * \defgroup vecops VecOps; 1137 * A ""std::vector""-like collection of values implementing handy operation to analyse them; 1138 * @{; 1139*/; 1140 ; 1141// From the original SmallVector code:; 1142// This is a 'vector' (really, a variable-sized array), optimized; 1143// for the case when the array is small. It contains some number of elements; 1144// in-place, which allows it to avoid heap allocation when the actual number of; 1145// elements is below that threshold. This allows normal ""small"" cases to be; 1146// fast without losing generality for large inputs.; 1147//; 1148// Note that this does not attempt to be exception safe.; 1149 ; 1150template <typename T, unsigned int N>; 1151class R__CLING_PTRCHECK(off) RVecN : public Detail::VecOps::RVecImpl<T>, Internal::VecOps::SmallVectorStorage<T, N> {; 1152public:; 1153 RVecN() : Detail::VecOps::RVecImpl<T>(N) {}; 1154 ; 1155 ~RVecN(); 1156 {; 1157 if (this->Owns()) {; 1158 // Destroy the constructed elements in the vector.; 1159 this->destroy_range(this->begin(),",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:16995,Performance,optimiz,optimizes,16995,"range [I, E) onto the uninitialized memory; 438 /// starting with ""Dest"", constructing elements into it as needed.; 439 template <typename It1, typename It2>; 440 static void uninitialized_move(It1 I, It1 E, It2 Dest); 441 {; 442 // Just do a copy.; 443 uninitialized_copy(I, E, Dest);; 444 }; 445 ; 446 /// Copy the range [I, E) onto the uninitialized memory; 447 /// starting with ""Dest"", constructing elements into it as needed.; 448 template <typename It1, typename It2>; 449 static void uninitialized_copy(It1 I, It1 E, It2 Dest); 450 {; 451 // Arbitrary iterator types; just use the basic implementation.; 452 std::uninitialized_copy(I, E, Dest);; 453 }; 454 ; 455 /// Copy the range [I, E) onto the uninitialized memory; 456 /// starting with ""Dest"", constructing elements into it as needed.; 457 template <typename T1, typename T2>; 458 static void uninitialized_copy(; 459 T1 *I, T1 *E, T2 *Dest,; 460 typename std::enable_if<std::is_same<typename std::remove_const<T1>::type, T2>::value>::type * = nullptr); 461 {; 462 // Use memcpy for PODs iterated by pointers (which includes SmallVector; 463 // iterators): std::uninitialized_copy optimizes to memmove, but we can; 464 // use memcpy here. Note that I and E are iterators and thus might be; 465 // invalid for memcpy if they are equal.; 466 if (I != E); 467 memcpy(reinterpret_cast<void *>(Dest), I, (E - I) * sizeof(T));; 468 }; 469 ; 470 /// Double the size of the allocated memory, guaranteeing space for at; 471 /// least one more element or MinSize if specified.; 472 void grow(size_t MinSize = 0); 473 {; 474 this->grow_pod(MinSize, sizeof(T));; 475 }; 476 ; 477public:; 478 using iterator = typename SuperClass::iterator;; 479 using const_iterator = typename SuperClass::const_iterator;; 480 using reference = typename SuperClass::reference;; 481 using size_type = typename SuperClass::size_type;; 482 ; 483 void push_back(const T &Elt); 484 {; 485 if (R__unlikely(this->size() >= this->capacity())); 486 this->grow();; 487 memcpy",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:18704,Performance,cache,cacheline,18704,"_type;; 482 ; 483 void push_back(const T &Elt); 484 {; 485 if (R__unlikely(this->size() >= this->capacity())); 486 this->grow();; 487 memcpy(reinterpret_cast<void *>(this->end()), &Elt, sizeof(T));; 488 this->set_size(this->size() + 1);; 489 }; 490 ; 491 void pop_back() { this->set_size(this->size() - 1); }; 492};; 493 ; 494/// Storage for the SmallVector elements. This is specialized for the N=0 case; 495/// to avoid allocating unnecessary storage.; 496template <typename T, unsigned N>; 497struct SmallVectorStorage {; 498 alignas(T) char InlineElts[N * sizeof(T)]{};; 499};; 500 ; 501/// We need the storage to be properly aligned even for small-size of 0 so that; 502/// the pointer math in \a SmallVectorTemplateCommon::getFirstEl() is; 503/// well-defined.; 504template <typename T>; 505struct alignas(T) SmallVectorStorage<T, 0> {; 506};; 507 ; 508/// The size of the inline storage of an RVec.; 509/// Our policy is to allocate at least 8 elements (or more if they all fit into one cacheline); 510/// unless the size of the buffer with 8 elements would be over a certain maximum size.; 511template <typename T>; 512struct RVecInlineStorageSize {; 513private:; 514#ifdef R__HAS_HARDWARE_INTERFERENCE_SIZE; 515 constexpr std::size_t cacheLineSize = std::hardware_destructive_interference_size;; 516#else; 517 // safe bet: assume the typical 64 bytes; 518 static constexpr std::size_t cacheLineSize = 64;; 519#endif; 520 static constexpr unsigned elementsPerCacheLine = (cacheLineSize - sizeof(SmallVectorBase)) / sizeof(T);; 521 static constexpr unsigned maxInlineByteSize = 1024;; 522 ; 523public:; 524 static constexpr unsigned value =; 525 elementsPerCacheLine >= 8 ? elementsPerCacheLine : (sizeof(T) * 8 > maxInlineByteSize ? 0 : 8);; 526};; 527 ; 528// A C++14-compatible implementation of std::uninitialized_value_construct; 529template <typename ForwardIt>; 530void UninitializedValueConstruct(ForwardIt first, ForwardIt last); 531{; 532#if __cplusplus < 201703L; 533 for (; first !=",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:18953,Performance,cache,cacheLineSize,18953,"\a SmallVectorTemplateCommon::getFirstEl() is; 503/// well-defined.; 504template <typename T>; 505struct alignas(T) SmallVectorStorage<T, 0> {; 506};; 507 ; 508/// The size of the inline storage of an RVec.; 509/// Our policy is to allocate at least 8 elements (or more if they all fit into one cacheline); 510/// unless the size of the buffer with 8 elements would be over a certain maximum size.; 511template <typename T>; 512struct RVecInlineStorageSize {; 513private:; 514#ifdef R__HAS_HARDWARE_INTERFERENCE_SIZE; 515 constexpr std::size_t cacheLineSize = std::hardware_destructive_interference_size;; 516#else; 517 // safe bet: assume the typical 64 bytes; 518 static constexpr std::size_t cacheLineSize = 64;; 519#endif; 520 static constexpr unsigned elementsPerCacheLine = (cacheLineSize - sizeof(SmallVectorBase)) / sizeof(T);; 521 static constexpr unsigned maxInlineByteSize = 1024;; 522 ; 523public:; 524 static constexpr unsigned value =; 525 elementsPerCacheLine >= 8 ? elementsPerCacheLine : (sizeof(T) * 8 > maxInlineByteSize ? 0 : 8);; 526};; 527 ; 528// A C++14-compatible implementation of std::uninitialized_value_construct; 529template <typename ForwardIt>; 530void UninitializedValueConstruct(ForwardIt first, ForwardIt last); 531{; 532#if __cplusplus < 201703L; 533 for (; first != last; ++first); 534 new (static_cast<void *>(std::addressof(*first))) typename std::iterator_traits<ForwardIt>::value_type();; 535#else; 536 std::uninitialized_value_construct(first, last);; 537#endif; 538}; 539 ; 540/// An unsafe function to reset the buffer for which this RVec is acting as a view.; 541///; 542/// \note This is a low-level method that _must_ be called on RVecs that are already non-owning:; 543/// - it does not put the RVec in ""non-owning mode"" (fCapacity == -1); 544/// - it does not free any owned buffer; 545template <typename T>; 546void ResetView(RVec<T> &v, T* addr, std::size_t sz); 547{; 548 v.fBeginX = addr;; 549 v.fSize = sz;; 550}; 551 ; 552} // namespace VecOps; ",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:19104,Performance,cache,cacheLineSize,19104,"\a SmallVectorTemplateCommon::getFirstEl() is; 503/// well-defined.; 504template <typename T>; 505struct alignas(T) SmallVectorStorage<T, 0> {; 506};; 507 ; 508/// The size of the inline storage of an RVec.; 509/// Our policy is to allocate at least 8 elements (or more if they all fit into one cacheline); 510/// unless the size of the buffer with 8 elements would be over a certain maximum size.; 511template <typename T>; 512struct RVecInlineStorageSize {; 513private:; 514#ifdef R__HAS_HARDWARE_INTERFERENCE_SIZE; 515 constexpr std::size_t cacheLineSize = std::hardware_destructive_interference_size;; 516#else; 517 // safe bet: assume the typical 64 bytes; 518 static constexpr std::size_t cacheLineSize = 64;; 519#endif; 520 static constexpr unsigned elementsPerCacheLine = (cacheLineSize - sizeof(SmallVectorBase)) / sizeof(T);; 521 static constexpr unsigned maxInlineByteSize = 1024;; 522 ; 523public:; 524 static constexpr unsigned value =; 525 elementsPerCacheLine >= 8 ? elementsPerCacheLine : (sizeof(T) * 8 > maxInlineByteSize ? 0 : 8);; 526};; 527 ; 528// A C++14-compatible implementation of std::uninitialized_value_construct; 529template <typename ForwardIt>; 530void UninitializedValueConstruct(ForwardIt first, ForwardIt last); 531{; 532#if __cplusplus < 201703L; 533 for (; first != last; ++first); 534 new (static_cast<void *>(std::addressof(*first))) typename std::iterator_traits<ForwardIt>::value_type();; 535#else; 536 std::uninitialized_value_construct(first, last);; 537#endif; 538}; 539 ; 540/// An unsafe function to reset the buffer for which this RVec is acting as a view.; 541///; 542/// \note This is a low-level method that _must_ be called on RVecs that are already non-owning:; 543/// - it does not put the RVec in ""non-owning mode"" (fCapacity == -1); 544/// - it does not free any owned buffer; 545template <typename T>; 546void ResetView(RVec<T> &v, T* addr, std::size_t sz); 547{; 548 v.fBeginX = addr;; 549 v.fSize = sz;; 550}; 551 ; 552} // namespace VecOps; ",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:19190,Performance,cache,cacheLineSize,19190,"\a SmallVectorTemplateCommon::getFirstEl() is; 503/// well-defined.; 504template <typename T>; 505struct alignas(T) SmallVectorStorage<T, 0> {; 506};; 507 ; 508/// The size of the inline storage of an RVec.; 509/// Our policy is to allocate at least 8 elements (or more if they all fit into one cacheline); 510/// unless the size of the buffer with 8 elements would be over a certain maximum size.; 511template <typename T>; 512struct RVecInlineStorageSize {; 513private:; 514#ifdef R__HAS_HARDWARE_INTERFERENCE_SIZE; 515 constexpr std::size_t cacheLineSize = std::hardware_destructive_interference_size;; 516#else; 517 // safe bet: assume the typical 64 bytes; 518 static constexpr std::size_t cacheLineSize = 64;; 519#endif; 520 static constexpr unsigned elementsPerCacheLine = (cacheLineSize - sizeof(SmallVectorBase)) / sizeof(T);; 521 static constexpr unsigned maxInlineByteSize = 1024;; 522 ; 523public:; 524 static constexpr unsigned value =; 525 elementsPerCacheLine >= 8 ? elementsPerCacheLine : (sizeof(T) * 8 > maxInlineByteSize ? 0 : 8);; 526};; 527 ; 528// A C++14-compatible implementation of std::uninitialized_value_construct; 529template <typename ForwardIt>; 530void UninitializedValueConstruct(ForwardIt first, ForwardIt last); 531{; 532#if __cplusplus < 201703L; 533 for (; first != last; ++first); 534 new (static_cast<void *>(std::addressof(*first))) typename std::iterator_traits<ForwardIt>::value_type();; 535#else; 536 std::uninitialized_value_construct(first, last);; 537#endif; 538}; 539 ; 540/// An unsafe function to reset the buffer for which this RVec is acting as a view.; 541///; 542/// \note This is a low-level method that _must_ be called on RVecs that are already non-owning:; 543/// - it does not put the RVec in ""non-owning mode"" (fCapacity == -1); 544/// - it does not free any owned buffer; 545template <typename T>; 546void ResetView(RVec<T> &v, T* addr, std::size_t sz); 547{; 548 v.fBeginX = addr;; 549 v.fSize = sz;; 550}; 551 ; 552} // namespace VecOps; ",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:39436,Performance,optimiz,optimized,39436,"0);; 1100 CurSize = 0;; 1101 this->grow(RHSSize);; 1102 } else if (CurSize) {; 1103 // Otherwise, use assignment for the already-constructed elements.; 1104 std::move(RHS.begin(), RHS.begin() + CurSize, this->begin());; 1105 }; 1106 ; 1107 // Move-construct the new elements in place.; 1108 this->uninitialized_move(RHS.begin() + CurSize, RHS.end(), this->begin() + CurSize);; 1109 ; 1110 // Set end.; 1111 this->set_size(RHSSize);; 1112 ; 1113 RHS.clear();; 1114 return *this;; 1115}; 1116 ; 1117template <typename T>; 1118bool IsSmall(const ROOT::VecOps::RVec<T> &v); 1119{; 1120 return v.isSmall();; 1121}; 1122 ; 1123template <typename T>; 1124bool IsAdopting(const ROOT::VecOps::RVec<T> &v); 1125{; 1126 return !v.Owns();; 1127}; 1128 ; 1129} // namespace VecOps; 1130} // namespace Detail; 1131 ; 1132namespace VecOps {; 1133// Note that we open here with @{ the Doxygen group vecops and it is; 1134// closed again at the end of the C++ namespace VecOps; 1135/**; 1136 * \defgroup vecops VecOps; 1137 * A ""std::vector""-like collection of values implementing handy operation to analyse them; 1138 * @{; 1139*/; 1140 ; 1141// From the original SmallVector code:; 1142// This is a 'vector' (really, a variable-sized array), optimized; 1143// for the case when the array is small. It contains some number of elements; 1144// in-place, which allows it to avoid heap allocation when the actual number of; 1145// elements is below that threshold. This allows normal ""small"" cases to be; 1146// fast without losing generality for large inputs.; 1147//; 1148// Note that this does not attempt to be exception safe.; 1149 ; 1150template <typename T, unsigned int N>; 1151class R__CLING_PTRCHECK(off) RVecN : public Detail::VecOps::RVecImpl<T>, Internal::VecOps::SmallVectorStorage<T, N> {; 1152public:; 1153 RVecN() : Detail::VecOps::RVecImpl<T>(N) {}; 1154 ; 1155 ~RVecN(); 1156 {; 1157 if (this->Owns()) {; 1158 // Destroy the constructed elements in the vector.; 1159 this->destroy_range(this->begin(),",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:49233,Performance,perform,performed,49233,"consider only negatively charged muons with a pseudorapidity; 1377smaller or equal to 2 and with a transverse momentum greater than 10 GeV.; 1378Such a selection would require, among the other things, the management of an explicit; 1379loop, for example:; 1380~~~{.cpp}; 1381std::vector<float> goodMuons_pt;; 1382const auto size = mu_charge.size();; 1383for (size_t i=0; i < size; ++i) {; 1384 if (mu_pt[i] > 10 && abs(mu_eta[i]) <= 2. && mu_charge[i] == -1) {; 1385 goodMuons_pt.emplace_back(mu_pt[i]);; 1386 }; 1387}; 1388~~~; 1389These operations become straightforward with RVec - we just need to *write what; 1390we mean*:; 1391~~~{.cpp}; 1392auto goodMuons_pt = mu_pt[ (mu_pt > 10.f && abs(mu_eta) <= 2.f && mu_charge == -1) ]; 1393~~~; 1394Now the clean collection of transverse momenta can be used within the rest of the data analysis, for; 1395example to fill a histogram.; 1396 ; 1397\anchor operationsandfunctions; 1398## Arithmetic operations, logical operations and mathematical functions; 1399Arithmetic operations on RVec instances can be performed: for example, they can be added, subtracted, multiplied.; 1400~~~{.cpp}; 1401RVec<double> v1 {1.,2.,3.,4.};; 1402RVec<float> v2 {5.f,6.f,7.f,8.f};; 1403auto v3 = v1+v2;; 1404auto v4 = 3 * v1;; 1405~~~; 1406The supported operators are ; 1407 - +, -, *, /; 1408 - +=, -=, *=, /=; 1409 - <, >, ==, !=, <=, >=, &&, ||; 1410 - ~, !; 1411 - &, |, ^; 1412 - &=, |=, ^=; 1413 - <<=, >>=; 1414 ; 1415The most common mathematical functions are supported. It is possible to invoke them passing ; 1416RVecs as arguments.; 1417 - abs, fdim, fmod, remainder; 1418 - floor, ceil, trunc, round, lround, llround; 1419 - exp, exp2, expm1; 1420 - log, log10, log2, log1p; 1421 - pow; 1422 - sqrt, cbrt; 1423 - sin, cos, tan, asin, acos, atan, atan2, hypot; 1424 - sinh, cosh, tanh, asinh, acosh; 1425 - erf, erfc; 1426 - lgamma, tgamma; 1427 ; 1428If the VDT library is available, the following functions can be invoked. Internally the calculations; 1429ar",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:6161,Safety,avoid,avoids,6161,");; 166 /// Report that this vector is already at maximum capacity. Throws; 167 /// std::length_error or calls report_fatal_error.; 168 static void report_at_maximum_capacity();; 169 ; 170 /// If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own.; 171 bool Owns() const { return fCapacity != -1; }; 172 ; 173public:; 174 size_t size() const { return fSize; }; 175 size_t capacity() const noexcept { return Owns() ? fCapacity : fSize; }; 176 ; 177 R__RVEC_NODISCARD bool empty() const { return !fSize; }; 178 ; 179 /// Set the array size to \p N, which the current array must have enough; 180 /// capacity for.; 181 ///; 182 /// This does not construct or destroy any elements in the vector.; 183 ///; 184 /// Clients can use this in conjunction with capacity() to write past the end; 185 /// of the buffer when they know that more elements are available, and only; 186 /// update the size later. This avoids the cost of value initializing elements; 187 /// which will only be overwritten.; 188 void set_size(size_t N); 189 {; 190 if (N > capacity()) {; 191 throw std::runtime_error(""Setting size to a value greater than capacity."");; 192 }; 193 fSize = N;; 194 }; 195};; 196 ; 197/// Used to figure out the offset of the first element of an RVec; 198template <class T>; 199struct SmallVectorAlignmentAndSize {; 200 alignas(SmallVectorBase) char Base[sizeof(SmallVectorBase)];; 201 alignas(T) char FirstEl[sizeof(T)];; 202};; 203 ; 204/// This is the part of SmallVectorTemplateBase which does not depend on whether the type T is a POD.; 205template <typename T>; 206class R__CLING_PTRCHECK(off) SmallVectorTemplateCommon : public SmallVectorBase {; 207 using Base = SmallVectorBase;; 208 ; 209 /// Find the address of the first element. For this pointer math to be valid; 210 /// with small-size of 0 for T with lots of alignment, it's important that; 211 /// SmallVectorStorage is properly-aligned even for small-size of 0.; 212 void *getFir",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:18126,Safety,avoid,avoid,18126,"or memcpy if they are equal.; 466 if (I != E); 467 memcpy(reinterpret_cast<void *>(Dest), I, (E - I) * sizeof(T));; 468 }; 469 ; 470 /// Double the size of the allocated memory, guaranteeing space for at; 471 /// least one more element or MinSize if specified.; 472 void grow(size_t MinSize = 0); 473 {; 474 this->grow_pod(MinSize, sizeof(T));; 475 }; 476 ; 477public:; 478 using iterator = typename SuperClass::iterator;; 479 using const_iterator = typename SuperClass::const_iterator;; 480 using reference = typename SuperClass::reference;; 481 using size_type = typename SuperClass::size_type;; 482 ; 483 void push_back(const T &Elt); 484 {; 485 if (R__unlikely(this->size() >= this->capacity())); 486 this->grow();; 487 memcpy(reinterpret_cast<void *>(this->end()), &Elt, sizeof(T));; 488 this->set_size(this->size() + 1);; 489 }; 490 ; 491 void pop_back() { this->set_size(this->size() - 1); }; 492};; 493 ; 494/// Storage for the SmallVector elements. This is specialized for the N=0 case; 495/// to avoid allocating unnecessary storage.; 496template <typename T, unsigned N>; 497struct SmallVectorStorage {; 498 alignas(T) char InlineElts[N * sizeof(T)]{};; 499};; 500 ; 501/// We need the storage to be properly aligned even for small-size of 0 so that; 502/// the pointer math in \a SmallVectorTemplateCommon::getFirstEl() is; 503/// well-defined.; 504template <typename T>; 505struct alignas(T) SmallVectorStorage<T, 0> {; 506};; 507 ; 508/// The size of the inline storage of an RVec.; 509/// Our policy is to allocate at least 8 elements (or more if they all fit into one cacheline); 510/// unless the size of the buffer with 8 elements would be over a certain maximum size.; 511template <typename T>; 512struct RVecInlineStorageSize {; 513private:; 514#ifdef R__HAS_HARDWARE_INTERFERENCE_SIZE; 515 constexpr std::size_t cacheLineSize = std::hardware_destructive_interference_size;; 516#else; 517 // safe bet: assume the typical 64 bytes; 518 static constexpr std::size_t cacheLineSize = ",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:19032,Safety,safe,safe,19032,"\a SmallVectorTemplateCommon::getFirstEl() is; 503/// well-defined.; 504template <typename T>; 505struct alignas(T) SmallVectorStorage<T, 0> {; 506};; 507 ; 508/// The size of the inline storage of an RVec.; 509/// Our policy is to allocate at least 8 elements (or more if they all fit into one cacheline); 510/// unless the size of the buffer with 8 elements would be over a certain maximum size.; 511template <typename T>; 512struct RVecInlineStorageSize {; 513private:; 514#ifdef R__HAS_HARDWARE_INTERFERENCE_SIZE; 515 constexpr std::size_t cacheLineSize = std::hardware_destructive_interference_size;; 516#else; 517 // safe bet: assume the typical 64 bytes; 518 static constexpr std::size_t cacheLineSize = 64;; 519#endif; 520 static constexpr unsigned elementsPerCacheLine = (cacheLineSize - sizeof(SmallVectorBase)) / sizeof(T);; 521 static constexpr unsigned maxInlineByteSize = 1024;; 522 ; 523public:; 524 static constexpr unsigned value =; 525 elementsPerCacheLine >= 8 ? elementsPerCacheLine : (sizeof(T) * 8 > maxInlineByteSize ? 0 : 8);; 526};; 527 ; 528// A C++14-compatible implementation of std::uninitialized_value_construct; 529template <typename ForwardIt>; 530void UninitializedValueConstruct(ForwardIt first, ForwardIt last); 531{; 532#if __cplusplus < 201703L; 533 for (; first != last; ++first); 534 new (static_cast<void *>(std::addressof(*first))) typename std::iterator_traits<ForwardIt>::value_type();; 535#else; 536 std::uninitialized_value_construct(first, last);; 537#endif; 538}; 539 ; 540/// An unsafe function to reset the buffer for which this RVec is acting as a view.; 541///; 542/// \note This is a low-level method that _must_ be called on RVecs that are already non-owning:; 543/// - it does not put the RVec in ""non-owning mode"" (fCapacity == -1); 544/// - it does not free any owned buffer; 545template <typename T>; 546void ResetView(RVec<T> &v, T* addr, std::size_t sz); 547{; 548 v.fBeginX = addr;; 549 v.fSize = sz;; 550}; 551 ; 552} // namespace VecOps; ",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:19936,Safety,unsafe,unsafe,19936,"\a SmallVectorTemplateCommon::getFirstEl() is; 503/// well-defined.; 504template <typename T>; 505struct alignas(T) SmallVectorStorage<T, 0> {; 506};; 507 ; 508/// The size of the inline storage of an RVec.; 509/// Our policy is to allocate at least 8 elements (or more if they all fit into one cacheline); 510/// unless the size of the buffer with 8 elements would be over a certain maximum size.; 511template <typename T>; 512struct RVecInlineStorageSize {; 513private:; 514#ifdef R__HAS_HARDWARE_INTERFERENCE_SIZE; 515 constexpr std::size_t cacheLineSize = std::hardware_destructive_interference_size;; 516#else; 517 // safe bet: assume the typical 64 bytes; 518 static constexpr std::size_t cacheLineSize = 64;; 519#endif; 520 static constexpr unsigned elementsPerCacheLine = (cacheLineSize - sizeof(SmallVectorBase)) / sizeof(T);; 521 static constexpr unsigned maxInlineByteSize = 1024;; 522 ; 523public:; 524 static constexpr unsigned value =; 525 elementsPerCacheLine >= 8 ? elementsPerCacheLine : (sizeof(T) * 8 > maxInlineByteSize ? 0 : 8);; 526};; 527 ; 528// A C++14-compatible implementation of std::uninitialized_value_construct; 529template <typename ForwardIt>; 530void UninitializedValueConstruct(ForwardIt first, ForwardIt last); 531{; 532#if __cplusplus < 201703L; 533 for (; first != last; ++first); 534 new (static_cast<void *>(std::addressof(*first))) typename std::iterator_traits<ForwardIt>::value_type();; 535#else; 536 std::uninitialized_value_construct(first, last);; 537#endif; 538}; 539 ; 540/// An unsafe function to reset the buffer for which this RVec is acting as a view.; 541///; 542/// \note This is a low-level method that _must_ be called on RVecs that are already non-owning:; 543/// - it does not put the RVec in ""non-owning mode"" (fCapacity == -1); 544/// - it does not free any owned buffer; 545template <typename T>; 546void ResetView(RVec<T> &v, T* addr, std::size_t sz); 547{; 548 v.fBeginX = addr;; 549 v.fSize = sz;; 550}; 551 ; 552} // namespace VecOps; ",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:28208,Safety,avoid,avoid,28208,"71 }; 772 ; 773 iterator insert(iterator I, const T &Elt); 774 {; 775 if (I == this->end()) { // Important special case for empty vector.; 776 this->push_back(Elt);; 777 return this->end() - 1;; 778 }; 779 ; 780 if (I < this->begin() || I > this->end()) {; 781 throw std::runtime_error(""The iterator passed to `insert` is out of bounds."");; 782 }; 783 ; 784 if (this->size() >= this->capacity()) {; 785 size_t EltNo = I - this->begin();; 786 this->grow();; 787 I = this->begin() + EltNo;; 788 }; 789 ::new ((void *)this->end()) T(std::move(this->back()));; 790 // Push everything else over.; 791 std::move_backward(I, this->end() - 1, this->end());; 792 this->set_size(this->size() + 1);; 793 ; 794 // If we just moved the element we're inserting, be sure to update; 795 // the reference.; 796 const T *EltPtr = &Elt;; 797 if (I <= EltPtr && EltPtr < this->end()); 798 ++EltPtr;; 799 ; 800 *I = *EltPtr;; 801 return I;; 802 }; 803 ; 804 iterator insert(iterator I, size_type NumToInsert, const T &Elt); 805 {; 806 // Convert iterator to elt# to avoid invalidating iterator when we reserve(); 807 size_t InsertElt = I - this->begin();; 808 ; 809 if (I == this->end()) { // Important special case for empty vector.; 810 append(NumToInsert, Elt);; 811 return this->begin() + InsertElt;; 812 }; 813 ; 814 if (I < this->begin() || I > this->end()) {; 815 throw std::runtime_error(""The iterator passed to `insert` is out of bounds."");; 816 }; 817 ; 818 // Ensure there is enough space.; 819 reserve(this->size() + NumToInsert);; 820 ; 821 // Uninvalidate the iterator.; 822 I = this->begin() + InsertElt;; 823 ; 824 // If there are more elements between the insertion point and the end of the; 825 // range than there are being inserted, we can use a simple approach to; 826 // insertion. Since we already reserved space, we know that this won't; 827 // reallocate the vector.; 828 if (size_t(this->end() - I) >= NumToInsert) {; 829 T *OldEnd = this->end();; 830 append(std::move_iterator<iterator>(this->e",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:30323,Safety,avoid,avoid,30323,"r>(this->end()));; 831 ; 832 // Copy the existing elements that get replaced.; 833 std::move_backward(I, OldEnd - NumToInsert, OldEnd);; 834 ; 835 std::fill_n(I, NumToInsert, Elt);; 836 return I;; 837 }; 838 ; 839 // Otherwise, we're inserting more elements than exist already, and we're; 840 // not inserting at the end.; 841 ; 842 // Move over the elements that we're about to overwrite.; 843 T *OldEnd = this->end();; 844 this->set_size(this->size() + NumToInsert);; 845 size_t NumOverwritten = OldEnd - I;; 846 this->uninitialized_move(I, OldEnd, this->end() - NumOverwritten);; 847 ; 848 // Replace the overwritten part.; 849 std::fill_n(I, NumOverwritten, Elt);; 850 ; 851 // Insert the non-overwritten middle part.; 852 std::uninitialized_fill_n(OldEnd, NumToInsert - NumOverwritten, Elt);; 853 return I;; 854 }; 855 ; 856 template <typename ItTy,; 857 typename = typename std::enable_if<std::is_convertible<; 858 typename std::iterator_traits<ItTy>::iterator_category, std::input_iterator_tag>::value>::type>; 859 iterator insert(iterator I, ItTy From, ItTy To); 860 {; 861 // Convert iterator to elt# to avoid invalidating iterator when we reserve(); 862 size_t InsertElt = I - this->begin();; 863 ; 864 if (I == this->end()) { // Important special case for empty vector.; 865 append(From, To);; 866 return this->begin() + InsertElt;; 867 }; 868 ; 869 if (I < this->begin() || I > this->end()) {; 870 throw std::runtime_error(""The iterator passed to `insert` is out of bounds."");; 871 }; 872 ; 873 size_t NumToInsert = std::distance(From, To);; 874 ; 875 // Ensure there is enough space.; 876 reserve(this->size() + NumToInsert);; 877 ; 878 // Uninvalidate the iterator.; 879 I = this->begin() + InsertElt;; 880 ; 881 // If there are more elements between the insertion point and the end of the; 882 // range than there are being inserted, we can use a simple approach to; 883 // insertion. Since we already reserved space, we know that this won't; 884 // reallocate the vector.; 885 if (size",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:32890,Safety,avoid,avoid,32890,"e.; 900 T *OldEnd = this->end();; 901 this->set_size(this->size() + NumToInsert);; 902 size_t NumOverwritten = OldEnd - I;; 903 this->uninitialized_move(I, OldEnd, this->end() - NumOverwritten);; 904 ; 905 // Replace the overwritten part.; 906 for (T *J = I; NumOverwritten > 0; --NumOverwritten) {; 907 *J = *From;; 908 ++J;; 909 ++From;; 910 }; 911 ; 912 // Insert the non-overwritten middle part.; 913 this->uninitialized_copy(From, To, OldEnd);; 914 return I;; 915 }; 916 ; 917 void insert(iterator I, std::initializer_list<T> IL) { insert(I, IL.begin(), IL.end()); }; 918 ; 919 template <typename... ArgTypes>; 920 reference emplace_back(ArgTypes &&...Args); 921 {; 922 if (R__unlikely(this->size() >= this->capacity())); 923 this->grow();; 924 ::new ((void *)this->end()) T(std::forward<ArgTypes>(Args)...);; 925 this->set_size(this->size() + 1);; 926 return this->back();; 927 }; 928 ; 929 RVecImpl &operator=(const RVecImpl &RHS);; 930 ; 931 RVecImpl &operator=(RVecImpl &&RHS);; 932};; 933 ; 934template <typename T>; 935void RVecImpl<T>::swap(RVecImpl<T> &RHS); 936{; 937 if (this == &RHS); 938 return;; 939 ; 940 // We can only avoid copying elements if neither vector is small.; 941 if (!this->isSmall() && !RHS.isSmall()) {; 942 std::swap(this->fBeginX, RHS.fBeginX);; 943 std::swap(this->fSize, RHS.fSize);; 944 std::swap(this->fCapacity, RHS.fCapacity);; 945 return;; 946 }; 947 ; 948 // This block handles the swap of a small and a non-owning vector; 949 // It is more efficient to first move the non-owning vector, hence the 2 cases; 950 if (this->isSmall() && !RHS.Owns()) { // the right vector is non-owning; 951 RVecImpl<T> temp(0);; 952 temp = std::move(RHS);; 953 RHS = std::move(*this);; 954 *this = std::move(temp);; 955 return;; 956 } else if (RHS.isSmall() && !this->Owns()) { // the left vector is non-owning; 957 RVecImpl<T> temp(0);; 958 temp = std::move(*this);; 959 *this = std::move(RHS);; 960 RHS = std::move(temp);; 961 return;; 962 }; 963 ; 964 if (RHS.size() > thi",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:35723,Safety,avoid,avoid,35723,"his->destroy_range(RHS.begin() + NumShared, RHS.end());; 990 RHS.set_size(NumShared);; 991 }; 992}; 993 ; 994template <typename T>; 995RVecImpl<T> &RVecImpl<T>::operator=(const RVecImpl<T> &RHS); 996{; 997 // Avoid self-assignment.; 998 if (this == &RHS); 999 return *this;; 1000 ; 1001 // If we already have sufficient space, assign the common elements, then; 1002 // destroy any excess.; 1003 size_t RHSSize = RHS.size();; 1004 size_t CurSize = this->size();; 1005 if (CurSize >= RHSSize) {; 1006 // Assign common elements.; 1007 iterator NewEnd;; 1008 if (RHSSize); 1009 NewEnd = std::copy(RHS.begin(), RHS.begin() + RHSSize, this->begin());; 1010 else; 1011 NewEnd = this->begin();; 1012 ; 1013 // Destroy excess elements.; 1014 if (this->Owns()); 1015 this->destroy_range(NewEnd, this->end());; 1016 ; 1017 // Trim.; 1018 this->set_size(RHSSize);; 1019 return *this;; 1020 }; 1021 ; 1022 // If we have to grow to have enough elements, destroy the current elements.; 1023 // This allows us to avoid copying them during the grow.; 1024 // From the original LLVM implementation:; 1025 // FIXME: don't do this if they're efficiently moveable.; 1026 if (this->capacity() < RHSSize) {; 1027 if (this->Owns()) {; 1028 // Destroy current elements.; 1029 this->destroy_range(this->begin(), this->end());; 1030 }; 1031 this->set_size(0);; 1032 CurSize = 0;; 1033 this->grow(RHSSize);; 1034 } else if (CurSize) {; 1035 // Otherwise, use assignment for the already-constructed elements.; 1036 std::copy(RHS.begin(), RHS.begin() + CurSize, this->begin());; 1037 }; 1038 ; 1039 // Copy construct the new elements in place.; 1040 this->uninitialized_copy(RHS.begin() + CurSize, RHS.end(), this->begin() + CurSize);; 1041 ; 1042 // Set end.; 1043 this->set_size(RHSSize);; 1044 return *this;; 1045}; 1046 ; 1047template <typename T>; 1048RVecImpl<T> &RVecImpl<T>::operator=(RVecImpl<T> &&RHS); 1049{; 1050 // Avoid self-assignment.; 1051 if (this == &RHS); 1052 return *this;; 1053 ; 1054 // If the RHS isn't sma",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:37841,Safety,avoid,avoid,37841,"stroy_range(this->begin(), this->end());; 1058 if (!this->isSmall()); 1059 free(this->begin());; 1060 }; 1061 this->fBeginX = RHS.fBeginX;; 1062 this->fSize = RHS.fSize;; 1063 this->fCapacity = RHS.fCapacity;; 1064 RHS.resetToSmall();; 1065 return *this;; 1066 }; 1067 ; 1068 // If we already have sufficient space, assign the common elements, then; 1069 // destroy any excess.; 1070 size_t RHSSize = RHS.size();; 1071 size_t CurSize = this->size();; 1072 if (CurSize >= RHSSize) {; 1073 // Assign common elements.; 1074 iterator NewEnd = this->begin();; 1075 if (RHSSize); 1076 NewEnd = std::move(RHS.begin(), RHS.end(), NewEnd);; 1077 ; 1078 // Destroy excess elements and trim the bounds.; 1079 if (this->Owns()); 1080 this->destroy_range(NewEnd, this->end());; 1081 this->set_size(RHSSize);; 1082 ; 1083 // Clear the RHS.; 1084 RHS.clear();; 1085 ; 1086 return *this;; 1087 }; 1088 ; 1089 // If we have to grow to have enough elements, destroy the current elements.; 1090 // This allows us to avoid copying them during the grow.; 1091 // From the original LLVM implementation:; 1092 // FIXME: this may not actually make any sense if we can efficiently move; 1093 // elements.; 1094 if (this->capacity() < RHSSize) {; 1095 if (this->Owns()) {; 1096 // Destroy current elements.; 1097 this->destroy_range(this->begin(), this->end());; 1098 }; 1099 this->set_size(0);; 1100 CurSize = 0;; 1101 this->grow(RHSSize);; 1102 } else if (CurSize) {; 1103 // Otherwise, use assignment for the already-constructed elements.; 1104 std::move(RHS.begin(), RHS.begin() + CurSize, this->begin());; 1105 }; 1106 ; 1107 // Move-construct the new elements in place.; 1108 this->uninitialized_move(RHS.begin() + CurSize, RHS.end(), this->begin() + CurSize);; 1109 ; 1110 // Set end.; 1111 this->set_size(RHSSize);; 1112 ; 1113 RHS.clear();; 1114 return *this;; 1115}; 1116 ; 1117template <typename T>; 1118bool IsSmall(const ROOT::VecOps::RVec<T> &v); 1119{; 1120 return v.isSmall();; 1121}; 1122 ; 1123template <typen",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:39565,Safety,avoid,avoid,39565," + CurSize);; 1109 ; 1110 // Set end.; 1111 this->set_size(RHSSize);; 1112 ; 1113 RHS.clear();; 1114 return *this;; 1115}; 1116 ; 1117template <typename T>; 1118bool IsSmall(const ROOT::VecOps::RVec<T> &v); 1119{; 1120 return v.isSmall();; 1121}; 1122 ; 1123template <typename T>; 1124bool IsAdopting(const ROOT::VecOps::RVec<T> &v); 1125{; 1126 return !v.Owns();; 1127}; 1128 ; 1129} // namespace VecOps; 1130} // namespace Detail; 1131 ; 1132namespace VecOps {; 1133// Note that we open here with @{ the Doxygen group vecops and it is; 1134// closed again at the end of the C++ namespace VecOps; 1135/**; 1136 * \defgroup vecops VecOps; 1137 * A ""std::vector""-like collection of values implementing handy operation to analyse them; 1138 * @{; 1139*/; 1140 ; 1141// From the original SmallVector code:; 1142// This is a 'vector' (really, a variable-sized array), optimized; 1143// for the case when the array is small. It contains some number of elements; 1144// in-place, which allows it to avoid heap allocation when the actual number of; 1145// elements is below that threshold. This allows normal ""small"" cases to be; 1146// fast without losing generality for large inputs.; 1147//; 1148// Note that this does not attempt to be exception safe.; 1149 ; 1150template <typename T, unsigned int N>; 1151class R__CLING_PTRCHECK(off) RVecN : public Detail::VecOps::RVecImpl<T>, Internal::VecOps::SmallVectorStorage<T, N> {; 1152public:; 1153 RVecN() : Detail::VecOps::RVecImpl<T>(N) {}; 1154 ; 1155 ~RVecN(); 1156 {; 1157 if (this->Owns()) {; 1158 // Destroy the constructed elements in the vector.; 1159 this->destroy_range(this->begin(), this->end());; 1160 }; 1161 }; 1162 ; 1163 explicit RVecN(size_t Size, const T &Value) : Detail::VecOps::RVecImpl<T>(N) { this->assign(Size, Value); }; 1164 ; 1165 explicit RVecN(size_t Size) : Detail::VecOps::RVecImpl<T>(N); 1166 {; 1167 if (Size > N); 1168 this->grow(Size);; 1169 this->fSize = Size;; 1170 ROOT::Internal::VecOps::UninitializedValueConstruct(t",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:39815,Safety,safe,safe,39815," 1120 return v.isSmall();; 1121}; 1122 ; 1123template <typename T>; 1124bool IsAdopting(const ROOT::VecOps::RVec<T> &v); 1125{; 1126 return !v.Owns();; 1127}; 1128 ; 1129} // namespace VecOps; 1130} // namespace Detail; 1131 ; 1132namespace VecOps {; 1133// Note that we open here with @{ the Doxygen group vecops and it is; 1134// closed again at the end of the C++ namespace VecOps; 1135/**; 1136 * \defgroup vecops VecOps; 1137 * A ""std::vector""-like collection of values implementing handy operation to analyse them; 1138 * @{; 1139*/; 1140 ; 1141// From the original SmallVector code:; 1142// This is a 'vector' (really, a variable-sized array), optimized; 1143// for the case when the array is small. It contains some number of elements; 1144// in-place, which allows it to avoid heap allocation when the actual number of; 1145// elements is below that threshold. This allows normal ""small"" cases to be; 1146// fast without losing generality for large inputs.; 1147//; 1148// Note that this does not attempt to be exception safe.; 1149 ; 1150template <typename T, unsigned int N>; 1151class R__CLING_PTRCHECK(off) RVecN : public Detail::VecOps::RVecImpl<T>, Internal::VecOps::SmallVectorStorage<T, N> {; 1152public:; 1153 RVecN() : Detail::VecOps::RVecImpl<T>(N) {}; 1154 ; 1155 ~RVecN(); 1156 {; 1157 if (this->Owns()) {; 1158 // Destroy the constructed elements in the vector.; 1159 this->destroy_range(this->begin(), this->end());; 1160 }; 1161 }; 1162 ; 1163 explicit RVecN(size_t Size, const T &Value) : Detail::VecOps::RVecImpl<T>(N) { this->assign(Size, Value); }; 1164 ; 1165 explicit RVecN(size_t Size) : Detail::VecOps::RVecImpl<T>(N); 1166 {; 1167 if (Size > N); 1168 this->grow(Size);; 1169 this->fSize = Size;; 1170 ROOT::Internal::VecOps::UninitializedValueConstruct(this->begin(), this->end());; 1171 }; 1172 ; 1173 template <typename ItTy,; 1174 typename = typename std::enable_if<std::is_convertible<; 1175 typename std::iterator_traits<ItTy>::iterator_category, std::input_ite",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:46606,Safety,safe,safe,46606,"off; 1323/**; 1324\class ROOT::VecOps::RVec; 1325\brief A ""std::vector""-like collection of values implementing handy operation to analyse them; 1326\tparam T The type of the contained objects; 1327 ; 1328A RVec is a container designed to make analysis of values' collections fast and easy.; 1329Its storage is contiguous in memory and its interface is designed such to resemble to the one; 1330of the stl vector. In addition the interface features methods and; 1331[external functions](https://root.cern/doc/master/namespaceROOT_1_1VecOps.html) to ease the manipulation and analysis; 1332of the data in the RVec.; 1333 ; 1334\note ROOT::VecOps::RVec can also be spelled simply ROOT::RVec. Shorthand aliases such as ROOT::RVecI or ROOT::RVecD; 1335are also available as template instantiations of RVec of fundamental types. The full list of available aliases:; 1336- RVecB (`bool`); 1337- RVecC (`char`); 1338- RVecD (`double`); 1339- RVecF (`float`); 1340- RVecI (`int`); 1341- RVecL (`long`); 1342- RVecLL (`long long`); 1343- RVecU (`unsigned`); 1344- RVecUL (`unsigned long`); 1345- RVecULL (`unsigned long long`); 1346 ; 1347\note RVec does not attempt to be exception safe. Exceptions thrown by element constructors during insertions, swaps or; 1348other operations will be propagated potentially leaving the RVec object in an invalid state.; 1349 ; 1350\note RVec methods (e.g. `at` or `size`) follow the STL naming convention instead of the ROOT naming convention in order; 1351to make RVec a drop-in replacement for `std::vector`.; 1352 ; 1353\htmlonly; 1354<a href=""https://doi.org/10.5281/zenodo.1253756""><img src=""https://zenodo.org/badge/DOI/10.5281/zenodo.1253756.svg"" alt=""DOI""></a>; 1355\endhtmlonly; 1356 ; 1357## Table of Contents; 1358- [Example](\ref example); 1359- [Arithmetic operations, logical operations and mathematical functions](\ref operationsandfunctions); 1360- [Owning and adopting memory](\ref owningandadoptingmemory); 1361- [Sorting and manipulation of indices](\re",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:60498,Safety,avoid,avoid,60498,"86 ; 1687#define RVEC_ASSIGNMENT_OPERATOR(OP) \; 1688template <typename T0, typename T1> \; 1689RVec<T0>& operator OP(RVec<T0> &v, const T1 &y) \; 1690{ \; 1691 auto op = [&y](T0 &x) { return x OP y; }; \; 1692 std::transform(v.begin(), v.end(), v.begin(), op); \; 1693 return v; \; 1694} \; 1695 \; 1696template <typename T0, typename T1> \; 1697RVec<T0>& operator OP(RVec<T0> &v0, const RVec<T1> &v1) \; 1698{ \; 1699 if (v0.size() != v1.size()) \; 1700 throw std::runtime_error(ERROR_MESSAGE(OP)); \; 1701 \; 1702 auto op = [](T0 &x, const T1 &y) { return x OP y; }; \; 1703 std::transform(v0.begin(), v0.end(), v1.begin(), v0.begin(), op); \; 1704 return v0; \; 1705} \; 1706 ; 1707RVEC_ASSIGNMENT_OPERATOR(+=); 1708RVEC_ASSIGNMENT_OPERATOR(-=); 1709RVEC_ASSIGNMENT_OPERATOR(*=); 1710RVEC_ASSIGNMENT_OPERATOR(/=); 1711RVEC_ASSIGNMENT_OPERATOR(%=); 1712RVEC_ASSIGNMENT_OPERATOR(^=); 1713RVEC_ASSIGNMENT_OPERATOR(|=); 1714RVEC_ASSIGNMENT_OPERATOR(&=); 1715RVEC_ASSIGNMENT_OPERATOR(>>=); 1716RVEC_ASSIGNMENT_OPERATOR(<<=); 1717#undef RVEC_ASSIGNMENT_OPERATOR; 1718 ; 1719///@}; 1720///@name RVec Comparison and Logical Operators; 1721///@{; 1722 ; 1723#define RVEC_LOGICAL_OPERATOR(OP) \; 1724template <typename T0, typename T1> \; 1725auto operator OP(const RVec<T0> &v, const T1 &y) \; 1726 -> RVec<int> /* avoid std::vector<bool> */ \; 1727{ \; 1728 RVec<int> ret(v.size()); \; 1729 auto op = [y](const T0 &x) -> int { return x OP y; }; \; 1730 std::transform(v.begin(), v.end(), ret.begin(), op); \; 1731 return ret; \; 1732} \; 1733 \; 1734template <typename T0, typename T1> \; 1735auto operator OP(const T0 &x, const RVec<T1> &v) \; 1736 -> RVec<int> /* avoid std::vector<bool> */ \; 1737{ \; 1738 RVec<int> ret(v.size()); \; 1739 auto op = [x](const T1 &y) -> int { return x OP y; }; \; 1740 std::transform(v.begin(), v.end(), ret.begin(), op); \; 1741 return ret; \; 1742} \; 1743 \; 1744template <typename T0, typename T1> \; 1745auto operator OP(const RVec<T0> &v0, const RVec<T1> &v1) \;",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:60850,Safety,avoid,avoid,60850,"v0.end(), v1.begin(), v0.begin(), op); \; 1704 return v0; \; 1705} \; 1706 ; 1707RVEC_ASSIGNMENT_OPERATOR(+=); 1708RVEC_ASSIGNMENT_OPERATOR(-=); 1709RVEC_ASSIGNMENT_OPERATOR(*=); 1710RVEC_ASSIGNMENT_OPERATOR(/=); 1711RVEC_ASSIGNMENT_OPERATOR(%=); 1712RVEC_ASSIGNMENT_OPERATOR(^=); 1713RVEC_ASSIGNMENT_OPERATOR(|=); 1714RVEC_ASSIGNMENT_OPERATOR(&=); 1715RVEC_ASSIGNMENT_OPERATOR(>>=); 1716RVEC_ASSIGNMENT_OPERATOR(<<=); 1717#undef RVEC_ASSIGNMENT_OPERATOR; 1718 ; 1719///@}; 1720///@name RVec Comparison and Logical Operators; 1721///@{; 1722 ; 1723#define RVEC_LOGICAL_OPERATOR(OP) \; 1724template <typename T0, typename T1> \; 1725auto operator OP(const RVec<T0> &v, const T1 &y) \; 1726 -> RVec<int> /* avoid std::vector<bool> */ \; 1727{ \; 1728 RVec<int> ret(v.size()); \; 1729 auto op = [y](const T0 &x) -> int { return x OP y; }; \; 1730 std::transform(v.begin(), v.end(), ret.begin(), op); \; 1731 return ret; \; 1732} \; 1733 \; 1734template <typename T0, typename T1> \; 1735auto operator OP(const T0 &x, const RVec<T1> &v) \; 1736 -> RVec<int> /* avoid std::vector<bool> */ \; 1737{ \; 1738 RVec<int> ret(v.size()); \; 1739 auto op = [x](const T1 &y) -> int { return x OP y; }; \; 1740 std::transform(v.begin(), v.end(), ret.begin(), op); \; 1741 return ret; \; 1742} \; 1743 \; 1744template <typename T0, typename T1> \; 1745auto operator OP(const RVec<T0> &v0, const RVec<T1> &v1) \; 1746 -> RVec<int> /* avoid std::vector<bool> */ \; 1747{ \; 1748 if (v0.size() != v1.size()) \; 1749 throw std::runtime_error(ERROR_MESSAGE(OP)); \; 1750 \; 1751 RVec<int> ret(v0.size()); \; 1752 auto op = [](const T0 &x, const T1 &y) -> int { return x OP y; }; \; 1753 std::transform(v0.begin(), v0.end(), v1.begin(), ret.begin(), op); \; 1754 return ret; \; 1755} \; 1756 ; 1757RVEC_LOGICAL_OPERATOR(<); 1758RVEC_LOGICAL_OPERATOR(>); 1759RVEC_LOGICAL_OPERATOR(==); 1760RVEC_LOGICAL_OPERATOR(!=); 1761RVEC_LOGICAL_OPERATOR(<=); 1762RVEC_LOGICAL_OPERATOR(>=); 1763RVEC_LOGICAL_OPERATOR(&&); 1764RVEC_LOGI",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:61210,Safety,avoid,avoid,61210,"15RVEC_ASSIGNMENT_OPERATOR(>>=); 1716RVEC_ASSIGNMENT_OPERATOR(<<=); 1717#undef RVEC_ASSIGNMENT_OPERATOR; 1718 ; 1719///@}; 1720///@name RVec Comparison and Logical Operators; 1721///@{; 1722 ; 1723#define RVEC_LOGICAL_OPERATOR(OP) \; 1724template <typename T0, typename T1> \; 1725auto operator OP(const RVec<T0> &v, const T1 &y) \; 1726 -> RVec<int> /* avoid std::vector<bool> */ \; 1727{ \; 1728 RVec<int> ret(v.size()); \; 1729 auto op = [y](const T0 &x) -> int { return x OP y; }; \; 1730 std::transform(v.begin(), v.end(), ret.begin(), op); \; 1731 return ret; \; 1732} \; 1733 \; 1734template <typename T0, typename T1> \; 1735auto operator OP(const T0 &x, const RVec<T1> &v) \; 1736 -> RVec<int> /* avoid std::vector<bool> */ \; 1737{ \; 1738 RVec<int> ret(v.size()); \; 1739 auto op = [x](const T1 &y) -> int { return x OP y; }; \; 1740 std::transform(v.begin(), v.end(), ret.begin(), op); \; 1741 return ret; \; 1742} \; 1743 \; 1744template <typename T0, typename T1> \; 1745auto operator OP(const RVec<T0> &v0, const RVec<T1> &v1) \; 1746 -> RVec<int> /* avoid std::vector<bool> */ \; 1747{ \; 1748 if (v0.size() != v1.size()) \; 1749 throw std::runtime_error(ERROR_MESSAGE(OP)); \; 1750 \; 1751 RVec<int> ret(v0.size()); \; 1752 auto op = [](const T0 &x, const T1 &y) -> int { return x OP y; }; \; 1753 std::transform(v0.begin(), v0.end(), v1.begin(), ret.begin(), op); \; 1754 return ret; \; 1755} \; 1756 ; 1757RVEC_LOGICAL_OPERATOR(<); 1758RVEC_LOGICAL_OPERATOR(>); 1759RVEC_LOGICAL_OPERATOR(==); 1760RVEC_LOGICAL_OPERATOR(!=); 1761RVEC_LOGICAL_OPERATOR(<=); 1762RVEC_LOGICAL_OPERATOR(>=); 1763RVEC_LOGICAL_OPERATOR(&&); 1764RVEC_LOGICAL_OPERATOR(||); 1765#undef RVEC_LOGICAL_OPERATOR; 1766 ; 1767///@}; 1768///@name RVec Standard Mathematical Functions; 1769///@{; 1770 ; 1771/// \cond; 1772template <typename T> struct PromoteTypeImpl;; 1773 ; 1774template <> struct PromoteTypeImpl<float> { using Type = float; };; 1775template <> struct PromoteTypeImpl<double> { using Type = double",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:150372,Safety,unsafe,unsafe,150372,"cOps::ArgMaxstd::size_t ArgMax(const RVec< T > &v)Get the index of the greatest element of an RVec In case of multiple occurrences of the maximum value...Definition RVec.hxx:2067; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; T2#define T2Definition md5.inl:147; T7#define T7Definition md5.inl:152; T6#define T6Definition md5.inl:151; T3#define T3Definition md5.inl:148; T5#define T5Definition md5.inl:150; T4#define T4Definition md5.inl:149; F#define F(x, y, z); I#define I(x, y, z); T1#define T1Definition md5.inl:146; ROOT::Detail::VecOps::IsSmallbool IsSmall(const ROOT::VecOps::RVec< T > &v)Definition RVec.hxx:1118; ROOT::Detail::VecOps::IsAdoptingbool IsAdopting(const ROOT::VecOps::RVec< T > &v)Definition RVec.hxx:1124; ROOT::Internal::VecOps::MapImplauto MapImpl(F &&f, RVecs &&... vs) -> RVec< decltype(f(vs[0]...))>Definition RVec.hxx:105; ROOT::Internal::VecOps::ResetViewvoid ResetView(RVec< T > &v, T *addr, std::size_t sz)An unsafe function to reset the buffer for which this RVec is acting as a view.Definition RVec.hxx:546; ROOT::Internal::VecOps::NextPowerOf2uint64_t NextPowerOf2(uint64_t A)Return the next power of two (in 64-bits) that is strictly greater than A.Definition RVec.hxx:126; ROOT::Internal::VecOps::Allconstexpr bool All(const bool *vals, std::size_t size)Definition RVec.hxx:79; ROOT::Internal::VecOps::GetVectorsSizestd::size_t GetVectorsSize(const std::string &id, const RVec< T > &... vs)Definition RVec.hxx:88; ROOT::Internal::VecOps::UninitializedValueConstructvoid UninitializedValueConstruct(ForwardIt first, ForwardIt last)Definition RVec.hxx:530; ROOT::Internal::VecOps::MapFromTupleauto MapFromTuple(Tuple_t &&t, std::index_sequence< Is... >) -> decltype(MapImpl(std::get< std::tuple_size< Tuple_t >::value - 1 >(t), std::get< Is >(t)...))Definition RVec.hxx:117; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition E",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:8192,Security,expose,expose,8192,"8 ; 219protected:; 220 SmallVectorTemplateCommon(size_t Size) : Base(getFirstEl(), Size) {}; 221 ; 222 void grow_pod(size_t MinSize, size_t TSize) { Base::grow_pod(getFirstEl(), MinSize, TSize); }; 223 ; 224 /// Return true if this is a smallvector which has not had dynamic; 225 /// memory allocated for it.; 226 bool isSmall() const { return this->fBeginX == getFirstEl(); }; 227 ; 228 /// Put this vector in a state of being small.; 229 void resetToSmall(); 230 {; 231 this->fBeginX = getFirstEl();; 232 // from the original LLVM implementation:; 233 // FIXME: Setting fCapacity to 0 is suspect.; 234 this->fSize = this->fCapacity = 0;; 235 }; 236 ; 237public:; 238 // note that fSize is a _signed_ integer, but we expose it as an unsigned integer for consistency with STL containers; 239 // as well as backward-compatibility; 240 using size_type = size_t;; 241 using difference_type = ptrdiff_t;; 242 using value_type = T;; 243 using iterator = T *;; 244 using const_iterator = const T *;; 245 ; 246 using const_reverse_iterator = std::reverse_iterator<const_iterator>;; 247 using reverse_iterator = std::reverse_iterator<iterator>;; 248 ; 249 using reference = T &;; 250 using const_reference = const T &;; 251 using pointer = T *;; 252 using const_pointer = const T *;; 253 ; 254 using Base::capacity;; 255 using Base::empty;; 256 using Base::size;; 257 ; 258 // forward iterator creation methods.; 259 iterator begin() noexcept { return (iterator)this->fBeginX; }; 260 const_iterator begin() const noexcept { return (const_iterator)this->fBeginX; }; 261 const_iterator cbegin() const noexcept { return (const_iterator)this->fBeginX; }; 262 iterator end() noexcept { return begin() + size(); }; 263 const_iterator end() const noexcept { return begin() + size(); }; 264 const_iterator cend() const noexcept { return begin() + size(); }; 265 ; 266 // reverse iterator creation methods.; 267 reverse_iterator rbegin() noexcept { return reverse_iterator(end()); }; 268 const_reverse_iterator rbegin(",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:47243,Testability,log,logical,47243,"VecF (`float`); 1340- RVecI (`int`); 1341- RVecL (`long`); 1342- RVecLL (`long long`); 1343- RVecU (`unsigned`); 1344- RVecUL (`unsigned long`); 1345- RVecULL (`unsigned long long`); 1346 ; 1347\note RVec does not attempt to be exception safe. Exceptions thrown by element constructors during insertions, swaps or; 1348other operations will be propagated potentially leaving the RVec object in an invalid state.; 1349 ; 1350\note RVec methods (e.g. `at` or `size`) follow the STL naming convention instead of the ROOT naming convention in order; 1351to make RVec a drop-in replacement for `std::vector`.; 1352 ; 1353\htmlonly; 1354<a href=""https://doi.org/10.5281/zenodo.1253756""><img src=""https://zenodo.org/badge/DOI/10.5281/zenodo.1253756.svg"" alt=""DOI""></a>; 1355\endhtmlonly; 1356 ; 1357## Table of Contents; 1358- [Example](\ref example); 1359- [Arithmetic operations, logical operations and mathematical functions](\ref operationsandfunctions); 1360- [Owning and adopting memory](\ref owningandadoptingmemory); 1361- [Sorting and manipulation of indices](\ref sorting); 1362- [Usage in combination with RDataFrame](\ref usagetdataframe); 1363- [Reference for the RVec class](\ref RVecdoxyref); 1364- [Reference for RVec helper functions](https://root.cern/doc/master/namespaceROOT_1_1VecOps.html); 1365 ; 1366\anchor example; 1367## Example; 1368Suppose to have an event featuring a collection of muons with a certain pseudorapidity,; 1369momentum and charge, e.g.:; 1370~~~{.cpp}; 1371std::vector<short> mu_charge {1, 1, -1, -1, -1, 1, 1, -1};; 1372std::vector<float> mu_pt {56, 45, 32, 24, 12, 8, 7, 6.2};; 1373std::vector<float> mu_eta {3.1, -.2, -1.1, 1, 4.1, 1.6, 2.4, -.5};; 1374~~~; 1375Suppose you want to extract the transverse momenta of the muons satisfying certain; 1376criteria, for example consider only negatively charged muons with a pseudorapidity; 1377smaller or equal to 2 and with a transverse momentum greater than 10 GeV.; 1378Such a selection would require, among the ot",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:49135,Testability,log,logical,49135,"consider only negatively charged muons with a pseudorapidity; 1377smaller or equal to 2 and with a transverse momentum greater than 10 GeV.; 1378Such a selection would require, among the other things, the management of an explicit; 1379loop, for example:; 1380~~~{.cpp}; 1381std::vector<float> goodMuons_pt;; 1382const auto size = mu_charge.size();; 1383for (size_t i=0; i < size; ++i) {; 1384 if (mu_pt[i] > 10 && abs(mu_eta[i]) <= 2. && mu_charge[i] == -1) {; 1385 goodMuons_pt.emplace_back(mu_pt[i]);; 1386 }; 1387}; 1388~~~; 1389These operations become straightforward with RVec - we just need to *write what; 1390we mean*:; 1391~~~{.cpp}; 1392auto goodMuons_pt = mu_pt[ (mu_pt > 10.f && abs(mu_eta) <= 2.f && mu_charge == -1) ]; 1393~~~; 1394Now the clean collection of transverse momenta can be used within the rest of the data analysis, for; 1395example to fill a histogram.; 1396 ; 1397\anchor operationsandfunctions; 1398## Arithmetic operations, logical operations and mathematical functions; 1399Arithmetic operations on RVec instances can be performed: for example, they can be added, subtracted, multiplied.; 1400~~~{.cpp}; 1401RVec<double> v1 {1.,2.,3.,4.};; 1402RVec<float> v2 {5.f,6.f,7.f,8.f};; 1403auto v3 = v1+v2;; 1404auto v4 = 3 * v1;; 1405~~~; 1406The supported operators are ; 1407 - +, -, *, /; 1408 - +=, -=, *=, /=; 1409 - <, >, ==, !=, <=, >=, &&, ||; 1410 - ~, !; 1411 - &, |, ^; 1412 - &=, |=, ^=; 1413 - <<=, >>=; 1414 ; 1415The most common mathematical functions are supported. It is possible to invoke them passing ; 1416RVecs as arguments.; 1417 - abs, fdim, fmod, remainder; 1418 - floor, ceil, trunc, round, lround, llround; 1419 - exp, exp2, expm1; 1420 - log, log10, log2, log1p; 1421 - pow; 1422 - sqrt, cbrt; 1423 - sin, cos, tan, asin, acos, atan, atan2, hypot; 1424 - sinh, cosh, tanh, asinh, acosh; 1425 - erf, erfc; 1426 - lgamma, tgamma; 1427 ; 1428If the VDT library is available, the following functions can be invoked. Internally the calculations; 1429ar",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:49871,Testability,log,log,49871,"ion of transverse momenta can be used within the rest of the data analysis, for; 1395example to fill a histogram.; 1396 ; 1397\anchor operationsandfunctions; 1398## Arithmetic operations, logical operations and mathematical functions; 1399Arithmetic operations on RVec instances can be performed: for example, they can be added, subtracted, multiplied.; 1400~~~{.cpp}; 1401RVec<double> v1 {1.,2.,3.,4.};; 1402RVec<float> v2 {5.f,6.f,7.f,8.f};; 1403auto v3 = v1+v2;; 1404auto v4 = 3 * v1;; 1405~~~; 1406The supported operators are ; 1407 - +, -, *, /; 1408 - +=, -=, *=, /=; 1409 - <, >, ==, !=, <=, >=, &&, ||; 1410 - ~, !; 1411 - &, |, ^; 1412 - &=, |=, ^=; 1413 - <<=, >>=; 1414 ; 1415The most common mathematical functions are supported. It is possible to invoke them passing ; 1416RVecs as arguments.; 1417 - abs, fdim, fmod, remainder; 1418 - floor, ceil, trunc, round, lround, llround; 1419 - exp, exp2, expm1; 1420 - log, log10, log2, log1p; 1421 - pow; 1422 - sqrt, cbrt; 1423 - sin, cos, tan, asin, acos, atan, atan2, hypot; 1424 - sinh, cosh, tanh, asinh, acosh; 1425 - erf, erfc; 1426 - lgamma, tgamma; 1427 ; 1428If the VDT library is available, the following functions can be invoked. Internally the calculations; 1429are vectorized:; 1430 - fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; 1431 - fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan; 1432 ; 1433\anchor owningandadoptingmemory; 1434## Owning and adopting memory; 1435RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case,; 1436it can be constructed with the address of the memory associated to it and its length. For example:; 1437~~~{.cpp}; 1438std::vector<int> myStlVec {1,2,3};; 1439RVec<int> myRVec(myStlVec.data(), myStlVec.size());; 1440~~~; 1441In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"".; 1442If any method which implies a re-allocation is c",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:64518,Testability,log,log,64518,,MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:120120,Testability,log,log,120120,"<T>> NAME(const RVec<T> &);; 3338 ; 3339#define RVEC_EXTERN_STD_UNARY_FUNCTION(T, F) RVEC_EXTERN_UNARY_FUNCTION(T, F, std::F); 3340 ; 3341#define RVEC_EXTERN_BINARY_FUNCTION(T0, T1, NAME, FUNC) \; 3342 extern template RVec<PromoteTypes<T0, T1>> NAME(const RVec<T0> &, const T1 &); \; 3343 extern template RVec<PromoteTypes<T0, T1>> NAME(const T0 &, const RVec<T1> &); \; 3344 extern template RVec<PromoteTypes<T0, T1>> NAME(const RVec<T0> &, const RVec<T1> &);; 3345 ; 3346#define RVEC_EXTERN_STD_BINARY_FUNCTION(T, F) RVEC_EXTERN_BINARY_FUNCTION(T, T, F, std::F); 3347 ; 3348#define RVEC_EXTERN_STD_FUNCTIONS(T) \; 3349 RVEC_EXTERN_STD_UNARY_FUNCTION(T, abs) \; 3350 RVEC_EXTERN_STD_BINARY_FUNCTION(T, fdim) \; 3351 RVEC_EXTERN_STD_BINARY_FUNCTION(T, fmod) \; 3352 RVEC_EXTERN_STD_BINARY_FUNCTION(T, remainder) \; 3353 RVEC_EXTERN_STD_UNARY_FUNCTION(T, exp) \; 3354 RVEC_EXTERN_STD_UNARY_FUNCTION(T, exp2) \; 3355 RVEC_EXTERN_STD_UNARY_FUNCTION(T, expm1) \; 3356 RVEC_EXTERN_STD_UNARY_FUNCTION(T, log) \; 3357 RVEC_EXTERN_STD_UNARY_FUNCTION(T, log10) \; 3358 RVEC_EXTERN_STD_UNARY_FUNCTION(T, log2) \; 3359 RVEC_EXTERN_STD_UNARY_FUNCTION(T, log1p) \; 3360 RVEC_EXTERN_STD_BINARY_FUNCTION(T, pow) \; 3361 RVEC_EXTERN_STD_UNARY_FUNCTION(T, sqrt) \; 3362 RVEC_EXTERN_STD_UNARY_FUNCTION(T, cbrt) \; 3363 RVEC_EXTERN_STD_BINARY_FUNCTION(T, hypot) \; 3364 RVEC_EXTERN_STD_UNARY_FUNCTION(T, sin) \; 3365 RVEC_EXTERN_STD_UNARY_FUNCTION(T, cos) \; 3366 RVEC_EXTERN_STD_UNARY_FUNCTION(T, tan) \; 3367 RVEC_EXTERN_STD_UNARY_FUNCTION(T, asin) \; 3368 RVEC_EXTERN_STD_UNARY_FUNCTION(T, acos) \; 3369 RVEC_EXTERN_STD_UNARY_FUNCTION(T, atan) \; 3370 RVEC_EXTERN_STD_BINARY_FUNCTION(T, atan2) \; 3371 RVEC_EXTERN_STD_UNARY_FUNCTION(T, sinh) \; 3372 RVEC_EXTERN_STD_UNARY_FUNCTION(T, cosh) \; 3373 RVEC_EXTERN_STD_UNARY_FUNCTION(T, tanh) \; 3374 RVEC_EXTERN_STD_UNARY_FUNCTION(T, asinh) \; 3375 RVEC_EXTERN_STD_UNARY_FUNCTION(T, acosh) \; 3376 RVEC_EXTERN_STD_UNARY_FUNCTION(T, atanh) \; 3377 RVEC_EXTERN_STD_UNARY_F",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:21631,Usability,clear,clear,21631,"72 explicit RVecImpl(unsigned N) : ROOT::Internal::VecOps::SmallVectorTemplateBase<T>(N) {}; 573 ; 574public:; 575 RVecImpl(const RVecImpl &) = delete;; 576 ; 577 ~RVecImpl(); 578 {; 579 // Subclass has already destructed this vector's elements.; 580 // If this wasn't grown from the inline copy, deallocate the old space.; 581 if (!this->isSmall() && this->Owns()); 582 free(this->begin());; 583 }; 584 ; 585 // also give up adopted memory if applicable; 586 void clear(); 587 {; 588 if (this->Owns()) {; 589 this->destroy_range(this->begin(), this->end());; 590 this->fSize = 0;; 591 } else {; 592 this->resetToSmall();; 593 }; 594 }; 595 ; 596 void resize(size_type N); 597 {; 598 if (N < this->size()) {; 599 if (this->Owns()); 600 this->destroy_range(this->begin() + N, this->end());; 601 this->set_size(N);; 602 } else if (N > this->size()) {; 603 if (this->capacity() < N); 604 this->grow(N);; 605 for (auto I = this->end(), E = this->begin() + N; I != E; ++I); 606 new (&*I) T();; 607 this->set_size(N);; 608 }; 609 }; 610 ; 611 void resize(size_type N, const T &NV); 612 {; 613 if (N < this->size()) {; 614 if (this->Owns()); 615 this->destroy_range(this->begin() + N, this->end());; 616 this->set_size(N);; 617 } else if (N > this->size()) {; 618 if (this->capacity() < N); 619 this->grow(N);; 620 std::uninitialized_fill(this->end(), this->begin() + N, NV);; 621 this->set_size(N);; 622 }; 623 }; 624 ; 625 void reserve(size_type N); 626 {; 627 if (this->capacity() < N); 628 this->grow(N);; 629 }; 630 ; 631 void pop_back_n(size_type NumItems); 632 {; 633 if (this->size() < NumItems) {; 634 throw std::runtime_error(""Popping back more elements than those available."");; 635 }; 636 if (this->Owns()); 637 this->destroy_range(this->end() - NumItems, this->end());; 638 this->set_size(this->size() - NumItems);; 639 }; 640 ; 641 R__RVEC_NODISCARD T pop_back_val(); 642 {; 643 T Result = ::std::move(this->back());; 644 this->pop_back();; 645 return Result;; 646 }; 647 ; 648 void swap(RVecI",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:24332,Usability,clear,clearing,24332,"= typename std::enable_if<std::is_convertible<; 653 typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type>; 654 void append(in_iter in_start, in_iter in_end); 655 {; 656 size_type NumInputs = std::distance(in_start, in_end);; 657 if (NumInputs > this->capacity() - this->size()); 658 this->grow(this->size() + NumInputs);; 659 ; 660 this->uninitialized_copy(in_start, in_end, this->end());; 661 this->set_size(this->size() + NumInputs);; 662 }; 663 ; 664 /// Append \p NumInputs copies of \p Elt to the end.; 665 void append(size_type NumInputs, const T &Elt); 666 {; 667 if (NumInputs > this->capacity() - this->size()); 668 this->grow(this->size() + NumInputs);; 669 ; 670 std::uninitialized_fill_n(this->end(), NumInputs, Elt);; 671 this->set_size(this->size() + NumInputs);; 672 }; 673 ; 674 void append(std::initializer_list<T> IL) { append(IL.begin(), IL.end()); }; 675 ; 676 // from the original LLVM implementation:; 677 // FIXME: Consider assigning over existing elements, rather than clearing &; 678 // re-initializing them - for all assign(...) variants.; 679 ; 680 void assign(size_type NumElts, const T &Elt); 681 {; 682 clear();; 683 if (this->capacity() < NumElts); 684 this->grow(NumElts);; 685 this->set_size(NumElts);; 686 std::uninitialized_fill(this->begin(), this->end(), Elt);; 687 }; 688 ; 689 template <typename in_iter,; 690 typename = typename std::enable_if<std::is_convertible<; 691 typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type>; 692 void assign(in_iter in_start, in_iter in_end); 693 {; 694 clear();; 695 append(in_start, in_end);; 696 }; 697 ; 698 void assign(std::initializer_list<T> IL); 699 {; 700 clear();; 701 append(IL);; 702 }; 703 ; 704 iterator erase(const_iterator CI); 705 {; 706 // Just cast away constness because this is a non-const member function.; 707 iterator I = const_cast<iterator>(CI);; 708 ; 709 if (I < this->begin() || I >= this->end()) {; 710 throw",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:24472,Usability,clear,clear,24472,"/// Append \p NumInputs copies of \p Elt to the end.; 665 void append(size_type NumInputs, const T &Elt); 666 {; 667 if (NumInputs > this->capacity() - this->size()); 668 this->grow(this->size() + NumInputs);; 669 ; 670 std::uninitialized_fill_n(this->end(), NumInputs, Elt);; 671 this->set_size(this->size() + NumInputs);; 672 }; 673 ; 674 void append(std::initializer_list<T> IL) { append(IL.begin(), IL.end()); }; 675 ; 676 // from the original LLVM implementation:; 677 // FIXME: Consider assigning over existing elements, rather than clearing &; 678 // re-initializing them - for all assign(...) variants.; 679 ; 680 void assign(size_type NumElts, const T &Elt); 681 {; 682 clear();; 683 if (this->capacity() < NumElts); 684 this->grow(NumElts);; 685 this->set_size(NumElts);; 686 std::uninitialized_fill(this->begin(), this->end(), Elt);; 687 }; 688 ; 689 template <typename in_iter,; 690 typename = typename std::enable_if<std::is_convertible<; 691 typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type>; 692 void assign(in_iter in_start, in_iter in_end); 693 {; 694 clear();; 695 append(in_start, in_end);; 696 }; 697 ; 698 void assign(std::initializer_list<T> IL); 699 {; 700 clear();; 701 append(IL);; 702 }; 703 ; 704 iterator erase(const_iterator CI); 705 {; 706 // Just cast away constness because this is a non-const member function.; 707 iterator I = const_cast<iterator>(CI);; 708 ; 709 if (I < this->begin() || I >= this->end()) {; 710 throw std::runtime_error(""The iterator passed to `erase` is out of bounds."");; 711 }; 712 ; 713 iterator N = I;; 714 // Shift all elts down one.; 715 std::move(I + 1, this->end(), I);; 716 // Drop the last elt.; 717 this->pop_back();; 718 return (N);; 719 }; 720 ; 721 iterator erase(const_iterator CS, const_iterator CE); 722 {; 723 // Just cast away constness because this is a non-const member function.; 724 iterator S = const_cast<iterator>(CS);; 725 iterator E = const_cast<iterator>(CE);; 726 ; 72",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:24911,Usability,clear,clear,24911,"/// Append \p NumInputs copies of \p Elt to the end.; 665 void append(size_type NumInputs, const T &Elt); 666 {; 667 if (NumInputs > this->capacity() - this->size()); 668 this->grow(this->size() + NumInputs);; 669 ; 670 std::uninitialized_fill_n(this->end(), NumInputs, Elt);; 671 this->set_size(this->size() + NumInputs);; 672 }; 673 ; 674 void append(std::initializer_list<T> IL) { append(IL.begin(), IL.end()); }; 675 ; 676 // from the original LLVM implementation:; 677 // FIXME: Consider assigning over existing elements, rather than clearing &; 678 // re-initializing them - for all assign(...) variants.; 679 ; 680 void assign(size_type NumElts, const T &Elt); 681 {; 682 clear();; 683 if (this->capacity() < NumElts); 684 this->grow(NumElts);; 685 this->set_size(NumElts);; 686 std::uninitialized_fill(this->begin(), this->end(), Elt);; 687 }; 688 ; 689 template <typename in_iter,; 690 typename = typename std::enable_if<std::is_convertible<; 691 typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type>; 692 void assign(in_iter in_start, in_iter in_end); 693 {; 694 clear();; 695 append(in_start, in_end);; 696 }; 697 ; 698 void assign(std::initializer_list<T> IL); 699 {; 700 clear();; 701 append(IL);; 702 }; 703 ; 704 iterator erase(const_iterator CI); 705 {; 706 // Just cast away constness because this is a non-const member function.; 707 iterator I = const_cast<iterator>(CI);; 708 ; 709 if (I < this->begin() || I >= this->end()) {; 710 throw std::runtime_error(""The iterator passed to `erase` is out of bounds."");; 711 }; 712 ; 713 iterator N = I;; 714 // Shift all elts down one.; 715 std::move(I + 1, this->end(), I);; 716 // Drop the last elt.; 717 this->pop_back();; 718 return (N);; 719 }; 720 ; 721 iterator erase(const_iterator CS, const_iterator CE); 722 {; 723 // Just cast away constness because this is a non-const member function.; 724 iterator S = const_cast<iterator>(CS);; 725 iterator E = const_cast<iterator>(CE);; 726 ; 72",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:25022,Usability,clear,clear,25022,"/// Append \p NumInputs copies of \p Elt to the end.; 665 void append(size_type NumInputs, const T &Elt); 666 {; 667 if (NumInputs > this->capacity() - this->size()); 668 this->grow(this->size() + NumInputs);; 669 ; 670 std::uninitialized_fill_n(this->end(), NumInputs, Elt);; 671 this->set_size(this->size() + NumInputs);; 672 }; 673 ; 674 void append(std::initializer_list<T> IL) { append(IL.begin(), IL.end()); }; 675 ; 676 // from the original LLVM implementation:; 677 // FIXME: Consider assigning over existing elements, rather than clearing &; 678 // re-initializing them - for all assign(...) variants.; 679 ; 680 void assign(size_type NumElts, const T &Elt); 681 {; 682 clear();; 683 if (this->capacity() < NumElts); 684 this->grow(NumElts);; 685 this->set_size(NumElts);; 686 std::uninitialized_fill(this->begin(), this->end(), Elt);; 687 }; 688 ; 689 template <typename in_iter,; 690 typename = typename std::enable_if<std::is_convertible<; 691 typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type>; 692 void assign(in_iter in_start, in_iter in_end); 693 {; 694 clear();; 695 append(in_start, in_end);; 696 }; 697 ; 698 void assign(std::initializer_list<T> IL); 699 {; 700 clear();; 701 append(IL);; 702 }; 703 ; 704 iterator erase(const_iterator CI); 705 {; 706 // Just cast away constness because this is a non-const member function.; 707 iterator I = const_cast<iterator>(CI);; 708 ; 709 if (I < this->begin() || I >= this->end()) {; 710 throw std::runtime_error(""The iterator passed to `erase` is out of bounds."");; 711 }; 712 ; 713 iterator N = I;; 714 // Shift all elts down one.; 715 std::move(I + 1, this->end(), I);; 716 // Drop the last elt.; 717 this->pop_back();; 718 return (N);; 719 }; 720 ; 721 iterator erase(const_iterator CS, const_iterator CE); 722 {; 723 // Just cast away constness because this is a non-const member function.; 724 iterator S = const_cast<iterator>(CS);; 725 iterator E = const_cast<iterator>(CE);; 726 ; 72",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:28908,Usability,simpl,simple,28908,"s->size() + 1);; 793 ; 794 // If we just moved the element we're inserting, be sure to update; 795 // the reference.; 796 const T *EltPtr = &Elt;; 797 if (I <= EltPtr && EltPtr < this->end()); 798 ++EltPtr;; 799 ; 800 *I = *EltPtr;; 801 return I;; 802 }; 803 ; 804 iterator insert(iterator I, size_type NumToInsert, const T &Elt); 805 {; 806 // Convert iterator to elt# to avoid invalidating iterator when we reserve(); 807 size_t InsertElt = I - this->begin();; 808 ; 809 if (I == this->end()) { // Important special case for empty vector.; 810 append(NumToInsert, Elt);; 811 return this->begin() + InsertElt;; 812 }; 813 ; 814 if (I < this->begin() || I > this->end()) {; 815 throw std::runtime_error(""The iterator passed to `insert` is out of bounds."");; 816 }; 817 ; 818 // Ensure there is enough space.; 819 reserve(this->size() + NumToInsert);; 820 ; 821 // Uninvalidate the iterator.; 822 I = this->begin() + InsertElt;; 823 ; 824 // If there are more elements between the insertion point and the end of the; 825 // range than there are being inserted, we can use a simple approach to; 826 // insertion. Since we already reserved space, we know that this won't; 827 // reallocate the vector.; 828 if (size_t(this->end() - I) >= NumToInsert) {; 829 T *OldEnd = this->end();; 830 append(std::move_iterator<iterator>(this->end() - NumToInsert), std::move_iterator<iterator>(this->end()));; 831 ; 832 // Copy the existing elements that get replaced.; 833 std::move_backward(I, OldEnd - NumToInsert, OldEnd);; 834 ; 835 std::fill_n(I, NumToInsert, Elt);; 836 return I;; 837 }; 838 ; 839 // Otherwise, we're inserting more elements than exist already, and we're; 840 // not inserting at the end.; 841 ; 842 // Move over the elements that we're about to overwrite.; 843 T *OldEnd = this->end();; 844 this->set_size(this->size() + NumToInsert);; 845 size_t NumOverwritten = OldEnd - I;; 846 this->uninitialized_move(I, OldEnd, this->end() - NumOverwritten);; 847 ; 848 // Replace the overwritten part.",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:31072,Usability,simpl,simple,31072,", Elt);; 853 return I;; 854 }; 855 ; 856 template <typename ItTy,; 857 typename = typename std::enable_if<std::is_convertible<; 858 typename std::iterator_traits<ItTy>::iterator_category, std::input_iterator_tag>::value>::type>; 859 iterator insert(iterator I, ItTy From, ItTy To); 860 {; 861 // Convert iterator to elt# to avoid invalidating iterator when we reserve(); 862 size_t InsertElt = I - this->begin();; 863 ; 864 if (I == this->end()) { // Important special case for empty vector.; 865 append(From, To);; 866 return this->begin() + InsertElt;; 867 }; 868 ; 869 if (I < this->begin() || I > this->end()) {; 870 throw std::runtime_error(""The iterator passed to `insert` is out of bounds."");; 871 }; 872 ; 873 size_t NumToInsert = std::distance(From, To);; 874 ; 875 // Ensure there is enough space.; 876 reserve(this->size() + NumToInsert);; 877 ; 878 // Uninvalidate the iterator.; 879 I = this->begin() + InsertElt;; 880 ; 881 // If there are more elements between the insertion point and the end of the; 882 // range than there are being inserted, we can use a simple approach to; 883 // insertion. Since we already reserved space, we know that this won't; 884 // reallocate the vector.; 885 if (size_t(this->end() - I) >= NumToInsert) {; 886 T *OldEnd = this->end();; 887 append(std::move_iterator<iterator>(this->end() - NumToInsert), std::move_iterator<iterator>(this->end()));; 888 ; 889 // Copy the existing elements that get replaced.; 890 std::move_backward(I, OldEnd - NumToInsert, OldEnd);; 891 ; 892 std::copy(From, To, I);; 893 return I;; 894 }; 895 ; 896 // Otherwise, we're inserting more elements than exist already, and we're; 897 // not inserting at the end.; 898 ; 899 // Move over the elements that we're about to overwrite.; 900 T *OldEnd = this->end();; 901 this->set_size(this->size() + NumToInsert);; 902 size_t NumOverwritten = OldEnd - I;; 903 this->uninitialized_move(I, OldEnd, this->end() - NumOverwritten);; 904 ; 905 // Replace the overwritten part.; 906 for ",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:36731,Usability,clear,clear,36731,"allows us to avoid copying them during the grow.; 1024 // From the original LLVM implementation:; 1025 // FIXME: don't do this if they're efficiently moveable.; 1026 if (this->capacity() < RHSSize) {; 1027 if (this->Owns()) {; 1028 // Destroy current elements.; 1029 this->destroy_range(this->begin(), this->end());; 1030 }; 1031 this->set_size(0);; 1032 CurSize = 0;; 1033 this->grow(RHSSize);; 1034 } else if (CurSize) {; 1035 // Otherwise, use assignment for the already-constructed elements.; 1036 std::copy(RHS.begin(), RHS.begin() + CurSize, this->begin());; 1037 }; 1038 ; 1039 // Copy construct the new elements in place.; 1040 this->uninitialized_copy(RHS.begin() + CurSize, RHS.end(), this->begin() + CurSize);; 1041 ; 1042 // Set end.; 1043 this->set_size(RHSSize);; 1044 return *this;; 1045}; 1046 ; 1047template <typename T>; 1048RVecImpl<T> &RVecImpl<T>::operator=(RVecImpl<T> &&RHS); 1049{; 1050 // Avoid self-assignment.; 1051 if (this == &RHS); 1052 return *this;; 1053 ; 1054 // If the RHS isn't small, clear this vector and then steal its buffer.; 1055 if (!RHS.isSmall()) {; 1056 if (this->Owns()) {; 1057 this->destroy_range(this->begin(), this->end());; 1058 if (!this->isSmall()); 1059 free(this->begin());; 1060 }; 1061 this->fBeginX = RHS.fBeginX;; 1062 this->fSize = RHS.fSize;; 1063 this->fCapacity = RHS.fCapacity;; 1064 RHS.resetToSmall();; 1065 return *this;; 1066 }; 1067 ; 1068 // If we already have sufficient space, assign the common elements, then; 1069 // destroy any excess.; 1070 size_t RHSSize = RHS.size();; 1071 size_t CurSize = this->size();; 1072 if (CurSize >= RHSSize) {; 1073 // Assign common elements.; 1074 iterator NewEnd = this->begin();; 1075 if (RHSSize); 1076 NewEnd = std::move(RHS.begin(), RHS.end(), NewEnd);; 1077 ; 1078 // Destroy excess elements and trim the bounds.; 1079 if (this->Owns()); 1080 this->destroy_range(NewEnd, this->end());; 1081 this->set_size(RHSSize);; 1082 ; 1083 // Clear the RHS.; 1084 RHS.clear();; 1085 ; 1086 return *t",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:37680,Usability,clear,clear,37680,"or and then steal its buffer.; 1055 if (!RHS.isSmall()) {; 1056 if (this->Owns()) {; 1057 this->destroy_range(this->begin(), this->end());; 1058 if (!this->isSmall()); 1059 free(this->begin());; 1060 }; 1061 this->fBeginX = RHS.fBeginX;; 1062 this->fSize = RHS.fSize;; 1063 this->fCapacity = RHS.fCapacity;; 1064 RHS.resetToSmall();; 1065 return *this;; 1066 }; 1067 ; 1068 // If we already have sufficient space, assign the common elements, then; 1069 // destroy any excess.; 1070 size_t RHSSize = RHS.size();; 1071 size_t CurSize = this->size();; 1072 if (CurSize >= RHSSize) {; 1073 // Assign common elements.; 1074 iterator NewEnd = this->begin();; 1075 if (RHSSize); 1076 NewEnd = std::move(RHS.begin(), RHS.end(), NewEnd);; 1077 ; 1078 // Destroy excess elements and trim the bounds.; 1079 if (this->Owns()); 1080 this->destroy_range(NewEnd, this->end());; 1081 this->set_size(RHSSize);; 1082 ; 1083 // Clear the RHS.; 1084 RHS.clear();; 1085 ; 1086 return *this;; 1087 }; 1088 ; 1089 // If we have to grow to have enough elements, destroy the current elements.; 1090 // This allows us to avoid copying them during the grow.; 1091 // From the original LLVM implementation:; 1092 // FIXME: this may not actually make any sense if we can efficiently move; 1093 // elements.; 1094 if (this->capacity() < RHSSize) {; 1095 if (this->Owns()) {; 1096 // Destroy current elements.; 1097 this->destroy_range(this->begin(), this->end());; 1098 }; 1099 this->set_size(0);; 1100 CurSize = 0;; 1101 this->grow(RHSSize);; 1102 } else if (CurSize) {; 1103 // Otherwise, use assignment for the already-constructed elements.; 1104 std::move(RHS.begin(), RHS.begin() + CurSize, this->begin());; 1105 }; 1106 ; 1107 // Move-construct the new elements in place.; 1108 this->uninitialized_move(RHS.begin() + CurSize, RHS.end(), this->begin() + CurSize);; 1109 ; 1110 // Set end.; 1111 this->set_size(RHSSize);; 1112 ; 1113 RHS.clear();; 1114 return *this;; 1115}; 1116 ; 1117template <typename T>; 1118bool IsSmall(c",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:38658,Usability,clear,clear,38658," ; 1089 // If we have to grow to have enough elements, destroy the current elements.; 1090 // This allows us to avoid copying them during the grow.; 1091 // From the original LLVM implementation:; 1092 // FIXME: this may not actually make any sense if we can efficiently move; 1093 // elements.; 1094 if (this->capacity() < RHSSize) {; 1095 if (this->Owns()) {; 1096 // Destroy current elements.; 1097 this->destroy_range(this->begin(), this->end());; 1098 }; 1099 this->set_size(0);; 1100 CurSize = 0;; 1101 this->grow(RHSSize);; 1102 } else if (CurSize) {; 1103 // Otherwise, use assignment for the already-constructed elements.; 1104 std::move(RHS.begin(), RHS.begin() + CurSize, this->begin());; 1105 }; 1106 ; 1107 // Move-construct the new elements in place.; 1108 this->uninitialized_move(RHS.begin() + CurSize, RHS.end(), this->begin() + CurSize);; 1109 ; 1110 // Set end.; 1111 this->set_size(RHSSize);; 1112 ; 1113 RHS.clear();; 1114 return *this;; 1115}; 1116 ; 1117template <typename T>; 1118bool IsSmall(const ROOT::VecOps::RVec<T> &v); 1119{; 1120 return v.isSmall();; 1121}; 1122 ; 1123template <typename T>; 1124bool IsAdopting(const ROOT::VecOps::RVec<T> &v); 1125{; 1126 return !v.Owns();; 1127}; 1128 ; 1129} // namespace VecOps; 1130} // namespace Detail; 1131 ; 1132namespace VecOps {; 1133// Note that we open here with @{ the Doxygen group vecops and it is; 1134// closed again at the end of the C++ namespace VecOps; 1135/**; 1136 * \defgroup vecops VecOps; 1137 * A ""std::vector""-like collection of values implementing handy operation to analyse them; 1138 * @{; 1139*/; 1140 ; 1141// From the original SmallVector code:; 1142// This is a 'vector' (really, a variable-sized array), optimized; 1143// for the case when the array is small. It contains some number of elements; 1144// in-place, which allows it to avoid heap allocation when the actual number of; 1145// elements is below that threshold. This allows normal ""small"" cases to be; 1146// fast without losing general",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:46103,Usability,simpl,simply,46103,"tor[](pos);; 1311 }; 1312 ; 1313 /// No exception thrown. The user specifies the desired value in case the RVecN is shorter than `pos`.; 1314 value_type at(size_type pos, value_type fallback) const; 1315 {; 1316 if (pos >= size_type(this->fSize)); 1317 return fallback;; 1318 return this->operator[](pos);; 1319 }; 1320};; 1321 ; 1322// clang-format off; 1323/**; 1324\class ROOT::VecOps::RVec; 1325\brief A ""std::vector""-like collection of values implementing handy operation to analyse them; 1326\tparam T The type of the contained objects; 1327 ; 1328A RVec is a container designed to make analysis of values' collections fast and easy.; 1329Its storage is contiguous in memory and its interface is designed such to resemble to the one; 1330of the stl vector. In addition the interface features methods and; 1331[external functions](https://root.cern/doc/master/namespaceROOT_1_1VecOps.html) to ease the manipulation and analysis; 1332of the data in the RVec.; 1333 ; 1334\note ROOT::VecOps::RVec can also be spelled simply ROOT::RVec. Shorthand aliases such as ROOT::RVecI or ROOT::RVecD; 1335are also available as template instantiations of RVec of fundamental types. The full list of available aliases:; 1336- RVecB (`bool`); 1337- RVecC (`char`); 1338- RVecD (`double`); 1339- RVecF (`float`); 1340- RVecI (`int`); 1341- RVecL (`long`); 1342- RVecLL (`long long`); 1343- RVecU (`unsigned`); 1344- RVecUL (`unsigned long`); 1345- RVecULL (`unsigned long long`); 1346 ; 1347\note RVec does not attempt to be exception safe. Exceptions thrown by element constructors during insertions, swaps or; 1348other operations will be propagated potentially leaving the RVec object in an invalid state.; 1349 ; 1350\note RVec methods (e.g. `at` or `size`) follow the STL naming convention instead of the ROOT naming convention in order; 1351to make RVec a drop-in replacement for `std::vector`.; 1352 ; 1353\htmlonly; 1354<a href=""https://doi.org/10.5281/zenodo.1253756""><img src=""https://zenodo.org/badge/",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:50528,Usability,simpl,simply,50528," <, >, ==, !=, <=, >=, &&, ||; 1410 - ~, !; 1411 - &, |, ^; 1412 - &=, |=, ^=; 1413 - <<=, >>=; 1414 ; 1415The most common mathematical functions are supported. It is possible to invoke them passing ; 1416RVecs as arguments.; 1417 - abs, fdim, fmod, remainder; 1418 - floor, ceil, trunc, round, lround, llround; 1419 - exp, exp2, expm1; 1420 - log, log10, log2, log1p; 1421 - pow; 1422 - sqrt, cbrt; 1423 - sin, cos, tan, asin, acos, atan, atan2, hypot; 1424 - sinh, cosh, tanh, asinh, acosh; 1425 - erf, erfc; 1426 - lgamma, tgamma; 1427 ; 1428If the VDT library is available, the following functions can be invoked. Internally the calculations; 1429are vectorized:; 1430 - fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; 1431 - fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan; 1432 ; 1433\anchor owningandadoptingmemory; 1434## Owning and adopting memory; 1435RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case,; 1436it can be constructed with the address of the memory associated to it and its length. For example:; 1437~~~{.cpp}; 1438std::vector<int> myStlVec {1,2,3};; 1439RVec<int> myRVec(myStlVec.data(), myStlVec.size());; 1440~~~; 1441In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"".; 1442If any method which implies a re-allocation is called, e.g. *emplace_back* or *resize*, the adopted; 1443memory is released and new one is allocated. The previous content is copied in the new memory and; 1444preserved.; 1445 ; 1446\anchor sorting; 1447## Sorting and manipulation of indices; 1448 ; 1449### Sorting; 1450RVec complies to the STL interfaces when it comes to iterations. As a result, standard algorithms; 1451can be used, for example sorting:; 1452~~~{.cpp}; 1453RVec<double> v{6., 4., 5.};; 1454std::sort(v.begin(), v.end());; 1455~~~; 1456 ; 1457For convenience, helpers are provided too:; 1458~~~{.cpp}; 1459au",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:50874,Usability,simpl,simply,50874,"ound; 1419 - exp, exp2, expm1; 1420 - log, log10, log2, log1p; 1421 - pow; 1422 - sqrt, cbrt; 1423 - sin, cos, tan, asin, acos, atan, atan2, hypot; 1424 - sinh, cosh, tanh, asinh, acosh; 1425 - erf, erfc; 1426 - lgamma, tgamma; 1427 ; 1428If the VDT library is available, the following functions can be invoked. Internally the calculations; 1429are vectorized:; 1430 - fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; 1431 - fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan; 1432 ; 1433\anchor owningandadoptingmemory; 1434## Owning and adopting memory; 1435RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case,; 1436it can be constructed with the address of the memory associated to it and its length. For example:; 1437~~~{.cpp}; 1438std::vector<int> myStlVec {1,2,3};; 1439RVec<int> myRVec(myStlVec.data(), myStlVec.size());; 1440~~~; 1441In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"".; 1442If any method which implies a re-allocation is called, e.g. *emplace_back* or *resize*, the adopted; 1443memory is released and new one is allocated. The previous content is copied in the new memory and; 1444preserved.; 1445 ; 1446\anchor sorting; 1447## Sorting and manipulation of indices; 1448 ; 1449### Sorting; 1450RVec complies to the STL interfaces when it comes to iterations. As a result, standard algorithms; 1451can be used, for example sorting:; 1452~~~{.cpp}; 1453RVec<double> v{6., 4., 5.};; 1454std::sort(v.begin(), v.end());; 1455~~~; 1456 ; 1457For convenience, helpers are provided too:; 1458~~~{.cpp}; 1459auto sorted_v = Sort(v);; 1460auto reversed_v = Reverse(v);; 1461~~~; 1462 ; 1463### Manipulation of indices; 1464 ; 1465It is also possible to manipulated the RVecs acting on their indices. For example,; 1466the following syntax; 1467~~~{.cpp}; 1468RVecD v0 {9., 7., 8.};; 1469auto v1 = Take(v0, {1, 2, 0});",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:129983,Usability,clear,clearvoid,129983,"T &Elt)Definition RVec.hxx:804; ROOT::Detail::VecOps::RVecImpl::pop_back_valT pop_back_val()Definition RVec.hxx:641; ROOT::Detail::VecOps::RVecImpl::~RVecImpl~RVecImpl()Definition RVec.hxx:577; ROOT::Detail::VecOps::RVecImpl::operator=RVecImpl & operator=(const RVecImpl &RHS)Definition RVec.hxx:995; ROOT::Detail::VecOps::RVecImpl::eraseiterator erase(const_iterator CS, const_iterator CE)Definition RVec.hxx:721; ROOT::Detail::VecOps::RVecImpl::referencetypename SuperClass::reference referenceDefinition RVec.hxx:567; ROOT::Detail::VecOps::RVecImpl::appendvoid append(size_type NumInputs, const T &Elt)Append NumInputs copies of Elt to the end.Definition RVec.hxx:665; ROOT::Detail::VecOps::RVecImpl::eraseiterator erase(const_iterator CI)Definition RVec.hxx:704; ROOT::Detail::VecOps::RVecImpl::operator=RVecImpl & operator=(RVecImpl &&RHS)Definition RVec.hxx:1048; ROOT::Detail::VecOps::RVecImpl::pop_back_nvoid pop_back_n(size_type NumItems)Definition RVec.hxx:631; ROOT::Detail::VecOps::RVecImpl::clearvoid clear()Definition RVec.hxx:586; ROOT::Detail::VecOps::RVecImpl::RVecImplRVecImpl(const RVecImpl &)=delete; ROOT::Detail::VecOps::RVecImpl::appendvoid append(std::initializer_list< T > IL)Definition RVec.hxx:674; ROOT::Detail::VecOps::RVecImpl::insertvoid insert(iterator I, std::initializer_list< T > IL)Definition RVec.hxx:917; ROOT::Internal::VecOps::SmallVectorBaseThis is all the stuff common to all SmallVectors.Definition RVec.hxx:138; ROOT::Internal::VecOps::SmallVectorBase::SmallVectorBaseSmallVectorBase()=delete; ROOT::Internal::VecOps::SmallVectorBase::SmallVectorBaseSmallVectorBase(void *FirstEl, size_t TotalCapacity)Definition RVec.hxx:156; ROOT::Internal::VecOps::SmallVectorBase::SizeTypeMaxstatic constexpr size_t SizeTypeMax()The maximum value of the Size_T used.Definition RVec.hxx:153; ROOT::Internal::VecOps::SmallVectorBase::fCapacitySize_T fCapacityAlways >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode.Definition RVec.hxx:150; ROOT::Int",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
https://root.cern/doc/v632/RVec_8hxx_source.html:129993,Usability,clear,clear,129993,"T &Elt)Definition RVec.hxx:804; ROOT::Detail::VecOps::RVecImpl::pop_back_valT pop_back_val()Definition RVec.hxx:641; ROOT::Detail::VecOps::RVecImpl::~RVecImpl~RVecImpl()Definition RVec.hxx:577; ROOT::Detail::VecOps::RVecImpl::operator=RVecImpl & operator=(const RVecImpl &RHS)Definition RVec.hxx:995; ROOT::Detail::VecOps::RVecImpl::eraseiterator erase(const_iterator CS, const_iterator CE)Definition RVec.hxx:721; ROOT::Detail::VecOps::RVecImpl::referencetypename SuperClass::reference referenceDefinition RVec.hxx:567; ROOT::Detail::VecOps::RVecImpl::appendvoid append(size_type NumInputs, const T &Elt)Append NumInputs copies of Elt to the end.Definition RVec.hxx:665; ROOT::Detail::VecOps::RVecImpl::eraseiterator erase(const_iterator CI)Definition RVec.hxx:704; ROOT::Detail::VecOps::RVecImpl::operator=RVecImpl & operator=(RVecImpl &&RHS)Definition RVec.hxx:1048; ROOT::Detail::VecOps::RVecImpl::pop_back_nvoid pop_back_n(size_type NumItems)Definition RVec.hxx:631; ROOT::Detail::VecOps::RVecImpl::clearvoid clear()Definition RVec.hxx:586; ROOT::Detail::VecOps::RVecImpl::RVecImplRVecImpl(const RVecImpl &)=delete; ROOT::Detail::VecOps::RVecImpl::appendvoid append(std::initializer_list< T > IL)Definition RVec.hxx:674; ROOT::Detail::VecOps::RVecImpl::insertvoid insert(iterator I, std::initializer_list< T > IL)Definition RVec.hxx:917; ROOT::Internal::VecOps::SmallVectorBaseThis is all the stuff common to all SmallVectors.Definition RVec.hxx:138; ROOT::Internal::VecOps::SmallVectorBase::SmallVectorBaseSmallVectorBase()=delete; ROOT::Internal::VecOps::SmallVectorBase::SmallVectorBaseSmallVectorBase(void *FirstEl, size_t TotalCapacity)Definition RVec.hxx:156; ROOT::Internal::VecOps::SmallVectorBase::SizeTypeMaxstatic constexpr size_t SizeTypeMax()The maximum value of the Size_T used.Definition RVec.hxx:153; ROOT::Internal::VecOps::SmallVectorBase::fCapacitySize_T fCapacityAlways >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode.Definition RVec.hxx:150; ROOT::Int",MatchSource.WIKI,doc/v632/RVec_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/RVec_8hxx_source.html
