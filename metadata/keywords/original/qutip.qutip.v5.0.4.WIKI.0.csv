id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://qutip.org/citing.html:1211,Integrability,message,message,1211,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. Citing QuTiP; QuTiP is developed by several physicists in their spare time.; As with anyone in academics,; their life and death is determined entirely by citations and paper count. ; Therefore, if you find QuTiP useful, please consider citing this project as:. J. R. Johansson, P. D. Nation, and F. Nori: “QuTiP 2: A Python framework for the dynamics of open quantum systems.”, Comp. Phys. Comm. 184, 1234 (2013), DOI: 10.1016/j.cpc.2012.11.019. J. R. Johansson, P. D. Nation, and F. Nori: “QuTiP: An open-source Python framework for the dynamics of open quantum systems.”, Comp. Phys. Comm. 183, 1760–1772 (2012), DOI: 10.1016/j.cpc.2012.02.021. This will also help us secure future funding supporting the development of this software.; PDF versions of these papers may be found on the ArXiv preprint server; here and here.; If you do use QuTiP in a publication, please take a few minutes and let us know; by posting on the QuTiP message board.; We would love to hear how QuTiP is being used as a research tool. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,citing.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/citing.html
https://qutip.org/citing.html:950,Security,secur,secure,950,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. Citing QuTiP; QuTiP is developed by several physicists in their spare time.; As with anyone in academics,; their life and death is determined entirely by citations and paper count. ; Therefore, if you find QuTiP useful, please consider citing this project as:. J. R. Johansson, P. D. Nation, and F. Nori: “QuTiP 2: A Python framework for the dynamics of open quantum systems.”, Comp. Phys. Comm. 184, 1234 (2013), DOI: 10.1016/j.cpc.2012.11.019. J. R. Johansson, P. D. Nation, and F. Nori: “QuTiP: An open-source Python framework for the dynamics of open quantum systems.”, Comp. Phys. Comm. 183, 1760–1772 (2012), DOI: 10.1016/j.cpc.2012.02.021. This will also help us secure future funding supporting the development of this software.; PDF versions of these papers may be found on the ArXiv preprint server; here and here.; If you do use QuTiP in a publication, please take a few minutes and let us know; by posting on the QuTiP message board.; We would love to hear how QuTiP is being used as a research tool. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,citing.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/citing.html
https://qutip.org/cofc.html:2094,Availability,avail,available,2094,"sing QuTiP; Job Announcements. Devs. Code of conduct; As contributors and maintainers of this project, and in the interest of fostering an open and welcoming community, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.; We are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, or nationality.; Examples of unacceptable behavior by participants include:. The use of sexualized language or imagery; Personal attacks; Trolling or insulting/derogatory comments; Public or private harassment; Publishing other’s private information, such as physical or electronic addresses, without explicit permission; Other unethical or unprofessional conduct. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct. By adopting this Code of Conduct, project maintainers commit themselves to fairly and consistently applying these principles to every aspect of managing this project. Project maintainers who do not follow or enforce the Code of Conduct may be permanently removed from the project team.; This code of conduct applies both within project spaces and in public spaces when an individual is representing the project or its community.; Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the project maintainers.; This Code of Conduct is adapted from the Contributor Covenant, version 1.2.0, available at https://www.contributor-covenant.org/version/1/2/0/code-of-conduct.html. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,cofc.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/cofc.html
https://qutip.org/cofc.html:563,Deployability,patch,patches,563,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. Code of conduct; As contributors and maintainers of this project, and in the interest of fostering an open and welcoming community, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.; We are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, or nationality.; Examples of unacceptable behavior by participants include:. The use of sexualized language or imagery; Personal attacks; Trolling or insulting/derogatory comments; Public or private harassment; Publishing other’s private information, such as physical or electronic addresses, without explicit permission; Other unethical or unprofessional conduct. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct. By adopting this Code of Conduct, project maintainers commit themselves to fairly and consistently applying these principles to every aspect of managing this project. Project maintainers who do not follow or enforce the Code of Conduct may be permanently removed from the project team.; This code of conduct applies both within project spaces and in public spaces when an individual is representing the project or its community.; Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the project",MatchSource.WIKI,cofc.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/cofc.html
https://qutip.org/cofc.html:2040,Energy Efficiency,adapt,adapted,2040,"sing QuTiP; Job Announcements. Devs. Code of conduct; As contributors and maintainers of this project, and in the interest of fostering an open and welcoming community, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.; We are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, or nationality.; Examples of unacceptable behavior by participants include:. The use of sexualized language or imagery; Personal attacks; Trolling or insulting/derogatory comments; Public or private harassment; Publishing other’s private information, such as physical or electronic addresses, without explicit permission; Other unethical or unprofessional conduct. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct. By adopting this Code of Conduct, project maintainers commit themselves to fairly and consistently applying these principles to every aspect of managing this project. Project maintainers who do not follow or enforce the Code of Conduct may be permanently removed from the project team.; This code of conduct applies both within project spaces and in public spaces when an individual is representing the project or its community.; Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the project maintainers.; This Code of Conduct is adapted from the Contributor Covenant, version 1.2.0, available at https://www.contributor-covenant.org/version/1/2/0/code-of-conduct.html. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,cofc.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/cofc.html
https://qutip.org/cofc.html:2040,Modifiability,adapt,adapted,2040,"sing QuTiP; Job Announcements. Devs. Code of conduct; As contributors and maintainers of this project, and in the interest of fostering an open and welcoming community, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.; We are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, or nationality.; Examples of unacceptable behavior by participants include:. The use of sexualized language or imagery; Personal attacks; Trolling or insulting/derogatory comments; Public or private harassment; Publishing other’s private information, such as physical or electronic addresses, without explicit permission; Other unethical or unprofessional conduct. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct. By adopting this Code of Conduct, project maintainers commit themselves to fairly and consistently applying these principles to every aspect of managing this project. Project maintainers who do not follow or enforce the Code of Conduct may be permanently removed from the project team.; This code of conduct applies both within project spaces and in public spaces when an individual is representing the project or its community.; Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the project maintainers.; This Code of Conduct is adapted from the Contributor Covenant, version 1.2.0, available at https://www.contributor-covenant.org/version/1/2/0/code-of-conduct.html. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,cofc.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/cofc.html
https://qutip.org/cofc.html:995,Security,attack,attacks,995,"hon. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. Code of conduct; As contributors and maintainers of this project, and in the interest of fostering an open and welcoming community, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.; We are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, or nationality.; Examples of unacceptable behavior by participants include:. The use of sexualized language or imagery; Personal attacks; Trolling or insulting/derogatory comments; Public or private harassment; Publishing other’s private information, such as physical or electronic addresses, without explicit permission; Other unethical or unprofessional conduct. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct. By adopting this Code of Conduct, project maintainers commit themselves to fairly and consistently applying these principles to every aspect of managing this project. Project maintainers who do not follow or enforce the Code of Conduct may be permanently removed from the project team.; This code of conduct applies both within project spaces and in public spaces when an individual is representing the project or its community.; Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the project maintainers.; This Code of Conduct is adapted from the Contributor Covenant, version",MatchSource.WIKI,cofc.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/cofc.html
https://qutip.org/devs.html:1429,Availability,mainten,maintenance,1429,"ping to add, many new features to the growing list of QuTiP functions:; Original Developers. Paul Nation; IBM Q; Library designer and main contributor. Robert Johansson; Tokyo, Japan; Library designer and main contributor. Project Governance; The governance process and model for the QuTiP Project can be found here. It contains a charter document.; Admin Team. Alex Pitchford; Aberystwyth University; Main focus: Quantum optimal control, solvers. Eric Giguère; Université de Sherbrooke; Main focus: Stochastic solvers, code optimization. Nathan Shammah; RIKEN; Main focus: Symmetrical models, education and outreach. Shahnawaz Ahmed; Chalmers; Main focus: Machine learning, Non-Markovian dynamics. Neill Lambert; RIKEN; Main focus: Non-Markovian dynamics, counting statistics. Boxi Li; Forschungszentrum Juelich; Main focus: Quantum control, Quantum device simulation. Jake Lishman; Imperial College London; Main focus: Core data model and linear algebra. Simon Cross; RIKEN; Main focus: Quantum control, machine learning, general maintenance. Asier Galicia; Forschungszentrum Juelich; Main focus: Core data model and backends. Paul Menczel; RIKEN; Main focus: Quantum control, non-Markovian solvers, MPI. Patrick Hopf; Technical University of Munich; Main focus: Quantum control. Board Members. Anton Frisk Kockum; Chalmers University of Technology. Daniel Burgarth; Macquarie University. Franco Nori; RIKEN / University of Michigan. Rob Johansson; Rakuten. Will Zeng; Unitary Fund. Core Contributors. Arne Grimsmo; Université de Sherbrooke. Chris Grenade; University of Sydney. Additional Developers. Denis Vasilyev (Leibniz); Kevin Fischer (Stanford); Anubhav Vardhan (New Dehli, India); Markus Baden (Zurich, Switzerland). Jonathan Zoller (Ulm University); Ben Criger (RWTH Aachen); Ben Bartlett (Stanford); Piotr Migdał (Warsaw, Poland). For a complete and up-to-date list of contributors, check out the Github pages (code, https://github.com/qutip/qutip-notebooks/graphs/contributors). © 2011 ",MatchSource.WIKI,devs.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/devs.html
https://qutip.org/devs.html:922,Performance,optimiz,optimization,922,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP Contributors; The development of QuTiP is a community based effort with several developers contributing, or helping to add, many new features to the growing list of QuTiP functions:; Original Developers. Paul Nation; IBM Q; Library designer and main contributor. Robert Johansson; Tokyo, Japan; Library designer and main contributor. Project Governance; The governance process and model for the QuTiP Project can be found here. It contains a charter document.; Admin Team. Alex Pitchford; Aberystwyth University; Main focus: Quantum optimal control, solvers. Eric Giguère; Université de Sherbrooke; Main focus: Stochastic solvers, code optimization. Nathan Shammah; RIKEN; Main focus: Symmetrical models, education and outreach. Shahnawaz Ahmed; Chalmers; Main focus: Machine learning, Non-Markovian dynamics. Neill Lambert; RIKEN; Main focus: Non-Markovian dynamics, counting statistics. Boxi Li; Forschungszentrum Juelich; Main focus: Quantum control, Quantum device simulation. Jake Lishman; Imperial College London; Main focus: Core data model and linear algebra. Simon Cross; RIKEN; Main focus: Quantum control, machine learning, general maintenance. Asier Galicia; Forschungszentrum Juelich; Main focus: Core data model and backends. Paul Menczel; RIKEN; Main focus: Quantum control, non-Markovian solvers, MPI. Patrick Hopf; Technical University of Munich; Main focus: Quantum control. Board Members. Anton Frisk Kockum; Chalmers University of Technology. Daniel Burgarth; Macquarie University. Franco Nori; RIKEN / University of Michigan. Rob Johansson; Rakuten. Will Zeng; Unitary Fund. Core Contributors. Arne Grimsmo; Université de Sherbrooke. Chris Grenade; University of Sydney. Additional Developers. ",MatchSource.WIKI,devs.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/devs.html
https://qutip.org/devs.html:1062,Usability,learn,learning,1062,"b. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP Contributors; The development of QuTiP is a community based effort with several developers contributing, or helping to add, many new features to the growing list of QuTiP functions:; Original Developers. Paul Nation; IBM Q; Library designer and main contributor. Robert Johansson; Tokyo, Japan; Library designer and main contributor. Project Governance; The governance process and model for the QuTiP Project can be found here. It contains a charter document.; Admin Team. Alex Pitchford; Aberystwyth University; Main focus: Quantum optimal control, solvers. Eric Giguère; Université de Sherbrooke; Main focus: Stochastic solvers, code optimization. Nathan Shammah; RIKEN; Main focus: Symmetrical models, education and outreach. Shahnawaz Ahmed; Chalmers; Main focus: Machine learning, Non-Markovian dynamics. Neill Lambert; RIKEN; Main focus: Non-Markovian dynamics, counting statistics. Boxi Li; Forschungszentrum Juelich; Main focus: Quantum control, Quantum device simulation. Jake Lishman; Imperial College London; Main focus: Core data model and linear algebra. Simon Cross; RIKEN; Main focus: Quantum control, machine learning, general maintenance. Asier Galicia; Forschungszentrum Juelich; Main focus: Core data model and backends. Paul Menczel; RIKEN; Main focus: Quantum control, non-Markovian solvers, MPI. Patrick Hopf; Technical University of Munich; Main focus: Quantum control. Board Members. Anton Frisk Kockum; Chalmers University of Technology. Daniel Burgarth; Macquarie University. Franco Nori; RIKEN / University of Michigan. Rob Johansson; Rakuten. Will Zeng; Unitary Fund. Core Contributors. Arne Grimsmo; Université de Sherbrooke. Chris Grenade; University of Sydney. Additional Developers. Denis Vasilyev (Leibniz); Kevin Fischer (Stanford); An",MatchSource.WIKI,devs.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/devs.html
https://qutip.org/devs.html:1411,Usability,learn,learning,1411,"ping to add, many new features to the growing list of QuTiP functions:; Original Developers. Paul Nation; IBM Q; Library designer and main contributor. Robert Johansson; Tokyo, Japan; Library designer and main contributor. Project Governance; The governance process and model for the QuTiP Project can be found here. It contains a charter document.; Admin Team. Alex Pitchford; Aberystwyth University; Main focus: Quantum optimal control, solvers. Eric Giguère; Université de Sherbrooke; Main focus: Stochastic solvers, code optimization. Nathan Shammah; RIKEN; Main focus: Symmetrical models, education and outreach. Shahnawaz Ahmed; Chalmers; Main focus: Machine learning, Non-Markovian dynamics. Neill Lambert; RIKEN; Main focus: Non-Markovian dynamics, counting statistics. Boxi Li; Forschungszentrum Juelich; Main focus: Quantum control, Quantum device simulation. Jake Lishman; Imperial College London; Main focus: Core data model and linear algebra. Simon Cross; RIKEN; Main focus: Quantum control, machine learning, general maintenance. Asier Galicia; Forschungszentrum Juelich; Main focus: Core data model and backends. Paul Menczel; RIKEN; Main focus: Quantum control, non-Markovian solvers, MPI. Patrick Hopf; Technical University of Munich; Main focus: Quantum control. Board Members. Anton Frisk Kockum; Chalmers University of Technology. Daniel Burgarth; Macquarie University. Franco Nori; RIKEN / University of Michigan. Rob Johansson; Rakuten. Will Zeng; Unitary Fund. Core Contributors. Arne Grimsmo; Université de Sherbrooke. Chris Grenade; University of Sydney. Additional Developers. Denis Vasilyev (Leibniz); Kevin Fischer (Stanford); Anubhav Vardhan (New Dehli, India); Markus Baden (Zurich, Switzerland). Jonathan Zoller (Ulm University); Ben Criger (RWTH Aachen); Ben Bartlett (Stanford); Piotr Migdał (Warsaw, Poland). For a complete and up-to-date list of contributors, check out the Github pages (code, https://github.com/qutip/qutip-notebooks/graphs/contributors). © 2011 ",MatchSource.WIKI,devs.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/devs.html
https://qutip.org/documentation.html:1228,Availability,avail,available,1228,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. Users guide; Latest releases; Version 5.0.4. Read the Docs. PDF documentation. Version 4.7.6. Read the Docs. PDF documentation. Previous releases; Version 4.7.5 (archived). Online HTML documentation. PDF documentation. Version 4.6.0. Online HTML documentation. PDF documentation. Version 4.5.0. Online HTML documentation. PDF documentation. Version 4.4.0. Online HTML documentation. PDF documentation. Version 4.3.1. Online HTML documentation. PDF documentation. Version 4.2.0. Online HTML documentation. PDF documentation. Version 4.1.0. Online HTML documentation. PDF documentation. Version 4.0.2. Online HTML documentation. PDF documentation. Version 3.1.0. Online HTML documentation. PDF documentation. Version 3.0.1. Online HTML documentation. PDF documentation. Version 3.0.0. Online HTML documentation. PDF documentation. Version 2.2.0. PDF documentation. Development documentation; The documentation for the development version of QuTiP is available at the qutip-doc github repository. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,documentation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/documentation.html
https://qutip.org/documentation.html:300,Deployability,release,releases,300,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. Users guide; Latest releases; Version 5.0.4. Read the Docs. PDF documentation. Version 4.7.6. Read the Docs. PDF documentation. Previous releases; Version 4.7.5 (archived). Online HTML documentation. PDF documentation. Version 4.6.0. Online HTML documentation. PDF documentation. Version 4.5.0. Online HTML documentation. PDF documentation. Version 4.4.0. Online HTML documentation. PDF documentation. Version 4.3.1. Online HTML documentation. PDF documentation. Version 4.2.0. Online HTML documentation. PDF documentation. Version 4.1.0. Online HTML documentation. PDF documentation. Version 4.0.2. Online HTML documentation. PDF documentation. Version 3.1.0. Online HTML documentation. PDF documentation. Version 3.0.1. Online HTML documentation. PDF documentation. Version 3.0.0. Online HTML documentation. PDF documentation. Version 2.2.0. PDF documentation. Development documentation; The documentation for the development version of QuTiP is available at the qutip-doc github repository. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,documentation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/documentation.html
https://qutip.org/documentation.html:417,Deployability,release,releases,417,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. Users guide; Latest releases; Version 5.0.4. Read the Docs. PDF documentation. Version 4.7.6. Read the Docs. PDF documentation. Previous releases; Version 4.7.5 (archived). Online HTML documentation. PDF documentation. Version 4.6.0. Online HTML documentation. PDF documentation. Version 4.5.0. Online HTML documentation. PDF documentation. Version 4.4.0. Online HTML documentation. PDF documentation. Version 4.3.1. Online HTML documentation. PDF documentation. Version 4.2.0. Online HTML documentation. PDF documentation. Version 4.1.0. Online HTML documentation. PDF documentation. Version 4.0.2. Online HTML documentation. PDF documentation. Version 3.1.0. Online HTML documentation. PDF documentation. Version 3.0.1. Online HTML documentation. PDF documentation. Version 3.0.0. Online HTML documentation. PDF documentation. Version 2.2.0. PDF documentation. Development documentation; The documentation for the development version of QuTiP is available at the qutip-doc github repository. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,documentation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/documentation.html
https://qutip.org/documentation.html:286,Usability,guid,guide,286,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. Users guide; Latest releases; Version 5.0.4. Read the Docs. PDF documentation. Version 4.7.6. Read the Docs. PDF documentation. Previous releases; Version 4.7.5 (archived). Online HTML documentation. PDF documentation. Version 4.6.0. Online HTML documentation. PDF documentation. Version 4.5.0. Online HTML documentation. PDF documentation. Version 4.4.0. Online HTML documentation. PDF documentation. Version 4.3.1. Online HTML documentation. PDF documentation. Version 4.2.0. Online HTML documentation. PDF documentation. Version 4.1.0. Online HTML documentation. PDF documentation. Version 4.0.2. Online HTML documentation. PDF documentation. Version 3.1.0. Online HTML documentation. PDF documentation. Version 3.0.1. Online HTML documentation. PDF documentation. Version 3.0.0. Online HTML documentation. PDF documentation. Version 2.2.0. PDF documentation. Development documentation; The documentation for the development version of QuTiP is available at the qutip-doc github repository. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,documentation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/documentation.html
https://qutip.org/download.html:1394,Availability,down,download,1394,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP has been developed over seven years by volunteers working in their spare time. If you find QuTiP useful, please consider taking a minute of your own time and citing it in your publications. Download; The recommended way to install QuTiP is with conda or pip, see the; documentation for details.; Latest releases; Verion 5.0.4 - 3 September 2024. v5.0.4.tar.gz; v5.0.4.zip. Version 4.7.6 - 5 April 2024. v4.7.6.tar.gz; v4.7.6.zip. Recent minor releases; Verion 5.0.3 - 28 June 2024. v5.0.3.tar.gz; v5.0.3.zip. Verion 5.0.2 - 17 May 2024. v5.0.2.tar.gz; v5.0.2.zip. Verion 5.0.1 - 3 April 2024. v5.0.1.tar.gz; v5.0.1.zip. Verion 5.0.0 - 28 March 2024. v5.0.0.tar.gz; v5.0.0.zip. Version 4.7.5 - 30 January 2024. v4.7.5.tar.gz; v4.7.5.zip. Version 4.7.4 - 18 January 2024. v4.7.4.tar.gz; v4.7.4.zip. Version 4.7.3 - 23 August 2023. v4.7.3.tar.gz; v4.7.3.zip. Version 4.7.2 - 29 June 2023. v4.7.2.tar.gz; v4.7.2.zip. Version 4.7.1 - 12 December 2022. v4.7.1.tar.gz; v4.7.1.zip. Version 4.7.0 - 13 April 2022. v4.7.0.tar.gz; v4.7.0.zip. Legacy releases; If you are interested in legacy releases of QuTiP, you can download all previous; versions from the GitHub by selecting the appropriate tag.; Installation; Instructions for installing QuTiP can be found in the documentation, or; in the INSTALL.txt file included in the QuTiP source folder.; Source Code; If you want to checkout the latest source code and documentation then head on; over to the QuTiP repositories at GitHub. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,download.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/download.html
https://qutip.org/download.html:509,Deployability,install,install,509,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP has been developed over seven years by volunteers working in their spare time. If you find QuTiP useful, please consider taking a minute of your own time and citing it in your publications. Download; The recommended way to install QuTiP is with conda or pip, see the; documentation for details.; Latest releases; Verion 5.0.4 - 3 September 2024. v5.0.4.tar.gz; v5.0.4.zip. Version 4.7.6 - 5 April 2024. v4.7.6.tar.gz; v4.7.6.zip. Recent minor releases; Verion 5.0.3 - 28 June 2024. v5.0.3.tar.gz; v5.0.3.zip. Verion 5.0.2 - 17 May 2024. v5.0.2.tar.gz; v5.0.2.zip. Verion 5.0.1 - 3 April 2024. v5.0.1.tar.gz; v5.0.1.zip. Verion 5.0.0 - 28 March 2024. v5.0.0.tar.gz; v5.0.0.zip. Version 4.7.5 - 30 January 2024. v4.7.5.tar.gz; v4.7.5.zip. Version 4.7.4 - 18 January 2024. v4.7.4.tar.gz; v4.7.4.zip. Version 4.7.3 - 23 August 2023. v4.7.3.tar.gz; v4.7.3.zip. Version 4.7.2 - 29 June 2023. v4.7.2.tar.gz; v4.7.2.zip. Version 4.7.1 - 12 December 2022. v4.7.1.tar.gz; v4.7.1.zip. Version 4.7.0 - 13 April 2022. v4.7.0.tar.gz; v4.7.0.zip. Legacy releases; If you are interested in legacy releases of QuTiP, you can download all previous; versions from the GitHub by selecting the appropriate tag.; Installation; Instructions for installing QuTiP can be found in the documentation, or; in the INSTALL.txt file included in the QuTiP source folder.; Source Code; If you want to checkout the latest source code and documentation then head on; over to the QuTiP repositories at GitHub. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,download.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/download.html
https://qutip.org/download.html:589,Deployability,release,releases,589,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP has been developed over seven years by volunteers working in their spare time. If you find QuTiP useful, please consider taking a minute of your own time and citing it in your publications. Download; The recommended way to install QuTiP is with conda or pip, see the; documentation for details.; Latest releases; Verion 5.0.4 - 3 September 2024. v5.0.4.tar.gz; v5.0.4.zip. Version 4.7.6 - 5 April 2024. v4.7.6.tar.gz; v4.7.6.zip. Recent minor releases; Verion 5.0.3 - 28 June 2024. v5.0.3.tar.gz; v5.0.3.zip. Verion 5.0.2 - 17 May 2024. v5.0.2.tar.gz; v5.0.2.zip. Verion 5.0.1 - 3 April 2024. v5.0.1.tar.gz; v5.0.1.zip. Verion 5.0.0 - 28 March 2024. v5.0.0.tar.gz; v5.0.0.zip. Version 4.7.5 - 30 January 2024. v4.7.5.tar.gz; v4.7.5.zip. Version 4.7.4 - 18 January 2024. v4.7.4.tar.gz; v4.7.4.zip. Version 4.7.3 - 23 August 2023. v4.7.3.tar.gz; v4.7.3.zip. Version 4.7.2 - 29 June 2023. v4.7.2.tar.gz; v4.7.2.zip. Version 4.7.1 - 12 December 2022. v4.7.1.tar.gz; v4.7.1.zip. Version 4.7.0 - 13 April 2022. v4.7.0.tar.gz; v4.7.0.zip. Legacy releases; If you are interested in legacy releases of QuTiP, you can download all previous; versions from the GitHub by selecting the appropriate tag.; Installation; Instructions for installing QuTiP can be found in the documentation, or; in the INSTALL.txt file included in the QuTiP source folder.; Source Code; If you want to checkout the latest source code and documentation then head on; over to the QuTiP repositories at GitHub. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,download.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/download.html
https://qutip.org/download.html:729,Deployability,release,releases,729,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP has been developed over seven years by volunteers working in their spare time. If you find QuTiP useful, please consider taking a minute of your own time and citing it in your publications. Download; The recommended way to install QuTiP is with conda or pip, see the; documentation for details.; Latest releases; Verion 5.0.4 - 3 September 2024. v5.0.4.tar.gz; v5.0.4.zip. Version 4.7.6 - 5 April 2024. v4.7.6.tar.gz; v4.7.6.zip. Recent minor releases; Verion 5.0.3 - 28 June 2024. v5.0.3.tar.gz; v5.0.3.zip. Verion 5.0.2 - 17 May 2024. v5.0.2.tar.gz; v5.0.2.zip. Verion 5.0.1 - 3 April 2024. v5.0.1.tar.gz; v5.0.1.zip. Verion 5.0.0 - 28 March 2024. v5.0.0.tar.gz; v5.0.0.zip. Version 4.7.5 - 30 January 2024. v4.7.5.tar.gz; v4.7.5.zip. Version 4.7.4 - 18 January 2024. v4.7.4.tar.gz; v4.7.4.zip. Version 4.7.3 - 23 August 2023. v4.7.3.tar.gz; v4.7.3.zip. Version 4.7.2 - 29 June 2023. v4.7.2.tar.gz; v4.7.2.zip. Version 4.7.1 - 12 December 2022. v4.7.1.tar.gz; v4.7.1.zip. Version 4.7.0 - 13 April 2022. v4.7.0.tar.gz; v4.7.0.zip. Legacy releases; If you are interested in legacy releases of QuTiP, you can download all previous; versions from the GitHub by selecting the appropriate tag.; Installation; Instructions for installing QuTiP can be found in the documentation, or; in the INSTALL.txt file included in the QuTiP source folder.; Source Code; If you want to checkout the latest source code and documentation then head on; over to the QuTiP repositories at GitHub. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,download.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/download.html
https://qutip.org/download.html:1325,Deployability,release,releases,1325,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP has been developed over seven years by volunteers working in their spare time. If you find QuTiP useful, please consider taking a minute of your own time and citing it in your publications. Download; The recommended way to install QuTiP is with conda or pip, see the; documentation for details.; Latest releases; Verion 5.0.4 - 3 September 2024. v5.0.4.tar.gz; v5.0.4.zip. Version 4.7.6 - 5 April 2024. v4.7.6.tar.gz; v4.7.6.zip. Recent minor releases; Verion 5.0.3 - 28 June 2024. v5.0.3.tar.gz; v5.0.3.zip. Verion 5.0.2 - 17 May 2024. v5.0.2.tar.gz; v5.0.2.zip. Verion 5.0.1 - 3 April 2024. v5.0.1.tar.gz; v5.0.1.zip. Verion 5.0.0 - 28 March 2024. v5.0.0.tar.gz; v5.0.0.zip. Version 4.7.5 - 30 January 2024. v4.7.5.tar.gz; v4.7.5.zip. Version 4.7.4 - 18 January 2024. v4.7.4.tar.gz; v4.7.4.zip. Version 4.7.3 - 23 August 2023. v4.7.3.tar.gz; v4.7.3.zip. Version 4.7.2 - 29 June 2023. v4.7.2.tar.gz; v4.7.2.zip. Version 4.7.1 - 12 December 2022. v4.7.1.tar.gz; v4.7.1.zip. Version 4.7.0 - 13 April 2022. v4.7.0.tar.gz; v4.7.0.zip. Legacy releases; If you are interested in legacy releases of QuTiP, you can download all previous; versions from the GitHub by selecting the appropriate tag.; Installation; Instructions for installing QuTiP can be found in the documentation, or; in the INSTALL.txt file included in the QuTiP source folder.; Source Code; If you want to checkout the latest source code and documentation then head on; over to the QuTiP repositories at GitHub. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,download.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/download.html
https://qutip.org/download.html:1367,Deployability,release,releases,1367,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP has been developed over seven years by volunteers working in their spare time. If you find QuTiP useful, please consider taking a minute of your own time and citing it in your publications. Download; The recommended way to install QuTiP is with conda or pip, see the; documentation for details.; Latest releases; Verion 5.0.4 - 3 September 2024. v5.0.4.tar.gz; v5.0.4.zip. Version 4.7.6 - 5 April 2024. v4.7.6.tar.gz; v4.7.6.zip. Recent minor releases; Verion 5.0.3 - 28 June 2024. v5.0.3.tar.gz; v5.0.3.zip. Verion 5.0.2 - 17 May 2024. v5.0.2.tar.gz; v5.0.2.zip. Verion 5.0.1 - 3 April 2024. v5.0.1.tar.gz; v5.0.1.zip. Verion 5.0.0 - 28 March 2024. v5.0.0.tar.gz; v5.0.0.zip. Version 4.7.5 - 30 January 2024. v4.7.5.tar.gz; v4.7.5.zip. Version 4.7.4 - 18 January 2024. v4.7.4.tar.gz; v4.7.4.zip. Version 4.7.3 - 23 August 2023. v4.7.3.tar.gz; v4.7.3.zip. Version 4.7.2 - 29 June 2023. v4.7.2.tar.gz; v4.7.2.zip. Version 4.7.1 - 12 December 2022. v4.7.1.tar.gz; v4.7.1.zip. Version 4.7.0 - 13 April 2022. v4.7.0.tar.gz; v4.7.0.zip. Legacy releases; If you are interested in legacy releases of QuTiP, you can download all previous; versions from the GitHub by selecting the appropriate tag.; Installation; Instructions for installing QuTiP can be found in the documentation, or; in the INSTALL.txt file included in the QuTiP source folder.; Source Code; If you want to checkout the latest source code and documentation then head on; over to the QuTiP repositories at GitHub. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,download.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/download.html
https://qutip.org/download.html:1508,Deployability,install,installing,1508,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP has been developed over seven years by volunteers working in their spare time. If you find QuTiP useful, please consider taking a minute of your own time and citing it in your publications. Download; The recommended way to install QuTiP is with conda or pip, see the; documentation for details.; Latest releases; Verion 5.0.4 - 3 September 2024. v5.0.4.tar.gz; v5.0.4.zip. Version 4.7.6 - 5 April 2024. v4.7.6.tar.gz; v4.7.6.zip. Recent minor releases; Verion 5.0.3 - 28 June 2024. v5.0.3.tar.gz; v5.0.3.zip. Verion 5.0.2 - 17 May 2024. v5.0.2.tar.gz; v5.0.2.zip. Verion 5.0.1 - 3 April 2024. v5.0.1.tar.gz; v5.0.1.zip. Verion 5.0.0 - 28 March 2024. v5.0.0.tar.gz; v5.0.0.zip. Version 4.7.5 - 30 January 2024. v4.7.5.tar.gz; v4.7.5.zip. Version 4.7.4 - 18 January 2024. v4.7.4.tar.gz; v4.7.4.zip. Version 4.7.3 - 23 August 2023. v4.7.3.tar.gz; v4.7.3.zip. Version 4.7.2 - 29 June 2023. v4.7.2.tar.gz; v4.7.2.zip. Version 4.7.1 - 12 December 2022. v4.7.1.tar.gz; v4.7.1.zip. Version 4.7.0 - 13 April 2022. v4.7.0.tar.gz; v4.7.0.zip. Legacy releases; If you are interested in legacy releases of QuTiP, you can download all previous; versions from the GitHub by selecting the appropriate tag.; Installation; Instructions for installing QuTiP can be found in the documentation, or; in the INSTALL.txt file included in the QuTiP source folder.; Source Code; If you want to checkout the latest source code and documentation then head on; over to the QuTiP repositories at GitHub. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,download.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/download.html
https://qutip.org/features.html:1279,Availability,avail,available,1279,"QuTiP is the original quantum framework written in Python; the most widely ; used programming language in the quantum sciences. Python's straightforward syntax allows for constructing, manipulating, and evolving quantum objects using QuTiP with just a few lines of code. Easy to learn, and 100% open-source, QuTiP is the ideal toolbox for research or the classroom. Did you know that you can determine if an operator is Hermitian without performing the conjugate transpose? QuTiP does. In fact, it is just one of many custom algorithms that QuTiP uses to maximize performance. Focusing on sparse matrices, and the means by which to efficiently manipulate these data structures, allows QuTiP to tackle even the largest quantum mechanical calculations. ; . In addition to custom algorithms, QuTiP is capable of leveraging the multiprocessing power inside every modern computer. Taking advantage of the Python multiprocessing library, OPENMP, SSE3 processor extensions, and the Intel MKL, if available, allows for faster manipulation of quantum objects, and increased performance of evolution equations, without any work at all.; . QuTiP includes a variety of builtin solvers for dynamical simulations. In addition to the standard Lindblad and Monte Carlo Solvers, QuTiP includes routines for Bloch-Redfield evolution, periodic systems using the Floquet formalism, and stochastic solvers. Add to this, steady state analysis and non-Markovian techniques, and you have a wide variety of tools from which to explore your systems behavior. A wide range of time-dependent evolution simulations can be runtime compiled into C++ behind the scenes using Cython. Thus, you get the ease of use of the Python programming language, and the performance of compiled code, all for free. What can be better than that?; . Can't express your time-dependence analytically, or need to construct a function from a data set? No problem. QuTiP allows for passing interpolating functions as time-dependent arguments to the evol",MatchSource.WIKI,features.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/features.html
https://qutip.org/features.html:922,Energy Efficiency,efficient,efficiently,922,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. Features. QuTiP is the original quantum framework written in Python; the most widely ; used programming language in the quantum sciences. Python's straightforward syntax allows for constructing, manipulating, and evolving quantum objects using QuTiP with just a few lines of code. Easy to learn, and 100% open-source, QuTiP is the ideal toolbox for research or the classroom. Did you know that you can determine if an operator is Hermitian without performing the conjugate transpose? QuTiP does. In fact, it is just one of many custom algorithms that QuTiP uses to maximize performance. Focusing on sparse matrices, and the means by which to efficiently manipulate these data structures, allows QuTiP to tackle even the largest quantum mechanical calculations. ; . In addition to custom algorithms, QuTiP is capable of leveraging the multiprocessing power inside every modern computer. Taking advantage of the Python multiprocessing library, OPENMP, SSE3 processor extensions, and the Intel MKL, if available, allows for faster manipulation of quantum objects, and increased performance of evolution equations, without any work at all.; . QuTiP includes a variety of builtin solvers for dynamical simulations. In addition to the standard Lindblad and Monte Carlo Solvers, QuTiP includes routines for Bloch-Redfield evolution, periodic systems using the Floquet formalism, and stochastic solvers. Add to this, steady state analysis and non-Markovian techniques, and you have a wide variety of tools from which to explore your systems behavior. A wide range of time-dependent evolution simulations can be runtime compiled into C++ behind the scenes using Cython. Thus, you get the ease of use of the Python programming lang",MatchSource.WIKI,features.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/features.html
https://qutip.org/features.html:1130,Energy Efficiency,power,power,1130,"Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. Features. QuTiP is the original quantum framework written in Python; the most widely ; used programming language in the quantum sciences. Python's straightforward syntax allows for constructing, manipulating, and evolving quantum objects using QuTiP with just a few lines of code. Easy to learn, and 100% open-source, QuTiP is the ideal toolbox for research or the classroom. Did you know that you can determine if an operator is Hermitian without performing the conjugate transpose? QuTiP does. In fact, it is just one of many custom algorithms that QuTiP uses to maximize performance. Focusing on sparse matrices, and the means by which to efficiently manipulate these data structures, allows QuTiP to tackle even the largest quantum mechanical calculations. ; . In addition to custom algorithms, QuTiP is capable of leveraging the multiprocessing power inside every modern computer. Taking advantage of the Python multiprocessing library, OPENMP, SSE3 processor extensions, and the Intel MKL, if available, allows for faster manipulation of quantum objects, and increased performance of evolution equations, without any work at all.; . QuTiP includes a variety of builtin solvers for dynamical simulations. In addition to the standard Lindblad and Monte Carlo Solvers, QuTiP includes routines for Bloch-Redfield evolution, periodic systems using the Floquet formalism, and stochastic solvers. Add to this, steady state analysis and non-Markovian techniques, and you have a wide variety of tools from which to explore your systems behavior. A wide range of time-dependent evolution simulations can be runtime compiled into C++ behind the scenes using Cython. Thus, you get the ease of use of the Python programming language, and the performance of compiled code, all for free. What can be better than that?; . Can't express",MatchSource.WIKI,features.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/features.html
https://qutip.org/features.html:1567,Integrability,rout,routines,1567,"0% open-source, QuTiP is the ideal toolbox for research or the classroom. Did you know that you can determine if an operator is Hermitian without performing the conjugate transpose? QuTiP does. In fact, it is just one of many custom algorithms that QuTiP uses to maximize performance. Focusing on sparse matrices, and the means by which to efficiently manipulate these data structures, allows QuTiP to tackle even the largest quantum mechanical calculations. ; . In addition to custom algorithms, QuTiP is capable of leveraging the multiprocessing power inside every modern computer. Taking advantage of the Python multiprocessing library, OPENMP, SSE3 processor extensions, and the Intel MKL, if available, allows for faster manipulation of quantum objects, and increased performance of evolution equations, without any work at all.; . QuTiP includes a variety of builtin solvers for dynamical simulations. In addition to the standard Lindblad and Monte Carlo Solvers, QuTiP includes routines for Bloch-Redfield evolution, periodic systems using the Floquet formalism, and stochastic solvers. Add to this, steady state analysis and non-Markovian techniques, and you have a wide variety of tools from which to explore your systems behavior. A wide range of time-dependent evolution simulations can be runtime compiled into C++ behind the scenes using Cython. Thus, you get the ease of use of the Python programming language, and the performance of compiled code, all for free. What can be better than that?; . Can't express your time-dependence analytically, or need to construct a function from a data set? No problem. QuTiP allows for passing interpolating functions as time-dependent arguments to the evolution solvers. Even better, these interpolating functions can be runtime compiled into C++, and support both real and complex data.; . From Bloch spheres to nonlinear colormaps for Wigner functions, QuTiP includes a host of built-in visualization routines that help bring your data to life. O",MatchSource.WIKI,features.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/features.html
https://qutip.org/features.html:1844,Integrability,depend,dependent,1844,"arse matrices, and the means by which to efficiently manipulate these data structures, allows QuTiP to tackle even the largest quantum mechanical calculations. ; . In addition to custom algorithms, QuTiP is capable of leveraging the multiprocessing power inside every modern computer. Taking advantage of the Python multiprocessing library, OPENMP, SSE3 processor extensions, and the Intel MKL, if available, allows for faster manipulation of quantum objects, and increased performance of evolution equations, without any work at all.; . QuTiP includes a variety of builtin solvers for dynamical simulations. In addition to the standard Lindblad and Monte Carlo Solvers, QuTiP includes routines for Bloch-Redfield evolution, periodic systems using the Floquet formalism, and stochastic solvers. Add to this, steady state analysis and non-Markovian techniques, and you have a wide variety of tools from which to explore your systems behavior. A wide range of time-dependent evolution simulations can be runtime compiled into C++ behind the scenes using Cython. Thus, you get the ease of use of the Python programming language, and the performance of compiled code, all for free. What can be better than that?; . Can't express your time-dependence analytically, or need to construct a function from a data set? No problem. QuTiP allows for passing interpolating functions as time-dependent arguments to the evolution solvers. Even better, these interpolating functions can be runtime compiled into C++, and support both real and complex data.; . From Bloch spheres to nonlinear colormaps for Wigner functions, QuTiP includes a host of built-in visualization routines that help bring your data to life. Our plotting utilities have been used by Fortune 500 companies, government research labs, and countless research groups around the globe. If you don't look good, we don't look good. ; . QuTiP is thoroughly tested, both by its thousands of users, and by the large collection of built in test scripts. ",MatchSource.WIKI,features.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/features.html
https://qutip.org/features.html:2116,Integrability,depend,dependence,2116,"ry modern computer. Taking advantage of the Python multiprocessing library, OPENMP, SSE3 processor extensions, and the Intel MKL, if available, allows for faster manipulation of quantum objects, and increased performance of evolution equations, without any work at all.; . QuTiP includes a variety of builtin solvers for dynamical simulations. In addition to the standard Lindblad and Monte Carlo Solvers, QuTiP includes routines for Bloch-Redfield evolution, periodic systems using the Floquet formalism, and stochastic solvers. Add to this, steady state analysis and non-Markovian techniques, and you have a wide variety of tools from which to explore your systems behavior. A wide range of time-dependent evolution simulations can be runtime compiled into C++ behind the scenes using Cython. Thus, you get the ease of use of the Python programming language, and the performance of compiled code, all for free. What can be better than that?; . Can't express your time-dependence analytically, or need to construct a function from a data set? No problem. QuTiP allows for passing interpolating functions as time-dependent arguments to the evolution solvers. Even better, these interpolating functions can be runtime compiled into C++, and support both real and complex data.; . From Bloch spheres to nonlinear colormaps for Wigner functions, QuTiP includes a host of built-in visualization routines that help bring your data to life. Our plotting utilities have been used by Fortune 500 companies, government research labs, and countless research groups around the globe. If you don't look good, we don't look good. ; . QuTiP is thoroughly tested, both by its thousands of users, and by the large collection of built in test scripts. QuTiP includes over a thousand such tests, covering nearly all of the builtin functions. These tests are run over and over again during development to make sure that the results you get from QuTiP are in fact the correct answers. No other quantum simulation softwar",MatchSource.WIKI,features.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/features.html
https://qutip.org/features.html:2259,Integrability,depend,dependent,2259,"ons, and the Intel MKL, if available, allows for faster manipulation of quantum objects, and increased performance of evolution equations, without any work at all.; . QuTiP includes a variety of builtin solvers for dynamical simulations. In addition to the standard Lindblad and Monte Carlo Solvers, QuTiP includes routines for Bloch-Redfield evolution, periodic systems using the Floquet formalism, and stochastic solvers. Add to this, steady state analysis and non-Markovian techniques, and you have a wide variety of tools from which to explore your systems behavior. A wide range of time-dependent evolution simulations can be runtime compiled into C++ behind the scenes using Cython. Thus, you get the ease of use of the Python programming language, and the performance of compiled code, all for free. What can be better than that?; . Can't express your time-dependence analytically, or need to construct a function from a data set? No problem. QuTiP allows for passing interpolating functions as time-dependent arguments to the evolution solvers. Even better, these interpolating functions can be runtime compiled into C++, and support both real and complex data.; . From Bloch spheres to nonlinear colormaps for Wigner functions, QuTiP includes a host of built-in visualization routines that help bring your data to life. Our plotting utilities have been used by Fortune 500 companies, government research labs, and countless research groups around the globe. If you don't look good, we don't look good. ; . QuTiP is thoroughly tested, both by its thousands of users, and by the large collection of built in test scripts. QuTiP includes over a thousand such tests, covering nearly all of the builtin functions. These tests are run over and over again during development to make sure that the results you get from QuTiP are in fact the correct answers. No other quantum simulation software is as well tested as QuTiP.; . No software should be a black box to the user, especially in science. QuTi",MatchSource.WIKI,features.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/features.html
https://qutip.org/features.html:2537,Integrability,rout,routines,2537,"to the standard Lindblad and Monte Carlo Solvers, QuTiP includes routines for Bloch-Redfield evolution, periodic systems using the Floquet formalism, and stochastic solvers. Add to this, steady state analysis and non-Markovian techniques, and you have a wide variety of tools from which to explore your systems behavior. A wide range of time-dependent evolution simulations can be runtime compiled into C++ behind the scenes using Cython. Thus, you get the ease of use of the Python programming language, and the performance of compiled code, all for free. What can be better than that?; . Can't express your time-dependence analytically, or need to construct a function from a data set? No problem. QuTiP allows for passing interpolating functions as time-dependent arguments to the evolution solvers. Even better, these interpolating functions can be runtime compiled into C++, and support both real and complex data.; . From Bloch spheres to nonlinear colormaps for Wigner functions, QuTiP includes a host of built-in visualization routines that help bring your data to life. Our plotting utilities have been used by Fortune 500 companies, government research labs, and countless research groups around the globe. If you don't look good, we don't look good. ; . QuTiP is thoroughly tested, both by its thousands of users, and by the large collection of built in test scripts. QuTiP includes over a thousand such tests, covering nearly all of the builtin functions. These tests are run over and over again during development to make sure that the results you get from QuTiP are in fact the correct answers. No other quantum simulation software is as well tested as QuTiP.; . No software should be a black box to the user, especially in science. QuTiP is not only completely open-source, but also includes hundreds of pages of documentation, a multitude of tutorial Jupyter notebooks, and a friendly community of users who kindly donate their time to help answer questions.; . © 2011 to 2024 inclusi",MatchSource.WIKI,features.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/features.html
https://qutip.org/features.html:728,Performance,perform,performing,728,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. Features. QuTiP is the original quantum framework written in Python; the most widely ; used programming language in the quantum sciences. Python's straightforward syntax allows for constructing, manipulating, and evolving quantum objects using QuTiP with just a few lines of code. Easy to learn, and 100% open-source, QuTiP is the ideal toolbox for research or the classroom. Did you know that you can determine if an operator is Hermitian without performing the conjugate transpose? QuTiP does. In fact, it is just one of many custom algorithms that QuTiP uses to maximize performance. Focusing on sparse matrices, and the means by which to efficiently manipulate these data structures, allows QuTiP to tackle even the largest quantum mechanical calculations. ; . In addition to custom algorithms, QuTiP is capable of leveraging the multiprocessing power inside every modern computer. Taking advantage of the Python multiprocessing library, OPENMP, SSE3 processor extensions, and the Intel MKL, if available, allows for faster manipulation of quantum objects, and increased performance of evolution equations, without any work at all.; . QuTiP includes a variety of builtin solvers for dynamical simulations. In addition to the standard Lindblad and Monte Carlo Solvers, QuTiP includes routines for Bloch-Redfield evolution, periodic systems using the Floquet formalism, and stochastic solvers. Add to this, steady state analysis and non-Markovian techniques, and you have a wide variety of tools from which to explore your systems behavior. A wide range of time-dependent evolution simulations can be runtime compiled into C++ behind the scenes using Cython. Thus, you get the ease of use of the Python programming lang",MatchSource.WIKI,features.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/features.html
https://qutip.org/features.html:854,Performance,perform,performance,854,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. Features. QuTiP is the original quantum framework written in Python; the most widely ; used programming language in the quantum sciences. Python's straightforward syntax allows for constructing, manipulating, and evolving quantum objects using QuTiP with just a few lines of code. Easy to learn, and 100% open-source, QuTiP is the ideal toolbox for research or the classroom. Did you know that you can determine if an operator is Hermitian without performing the conjugate transpose? QuTiP does. In fact, it is just one of many custom algorithms that QuTiP uses to maximize performance. Focusing on sparse matrices, and the means by which to efficiently manipulate these data structures, allows QuTiP to tackle even the largest quantum mechanical calculations. ; . In addition to custom algorithms, QuTiP is capable of leveraging the multiprocessing power inside every modern computer. Taking advantage of the Python multiprocessing library, OPENMP, SSE3 processor extensions, and the Intel MKL, if available, allows for faster manipulation of quantum objects, and increased performance of evolution equations, without any work at all.; . QuTiP includes a variety of builtin solvers for dynamical simulations. In addition to the standard Lindblad and Monte Carlo Solvers, QuTiP includes routines for Bloch-Redfield evolution, periodic systems using the Floquet formalism, and stochastic solvers. Add to this, steady state analysis and non-Markovian techniques, and you have a wide variety of tools from which to explore your systems behavior. A wide range of time-dependent evolution simulations can be runtime compiled into C++ behind the scenes using Cython. Thus, you get the ease of use of the Python programming lang",MatchSource.WIKI,features.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/features.html
https://qutip.org/features.html:1355,Performance,perform,performance,1355,"QuTiP is the original quantum framework written in Python; the most widely ; used programming language in the quantum sciences. Python's straightforward syntax allows for constructing, manipulating, and evolving quantum objects using QuTiP with just a few lines of code. Easy to learn, and 100% open-source, QuTiP is the ideal toolbox for research or the classroom. Did you know that you can determine if an operator is Hermitian without performing the conjugate transpose? QuTiP does. In fact, it is just one of many custom algorithms that QuTiP uses to maximize performance. Focusing on sparse matrices, and the means by which to efficiently manipulate these data structures, allows QuTiP to tackle even the largest quantum mechanical calculations. ; . In addition to custom algorithms, QuTiP is capable of leveraging the multiprocessing power inside every modern computer. Taking advantage of the Python multiprocessing library, OPENMP, SSE3 processor extensions, and the Intel MKL, if available, allows for faster manipulation of quantum objects, and increased performance of evolution equations, without any work at all.; . QuTiP includes a variety of builtin solvers for dynamical simulations. In addition to the standard Lindblad and Monte Carlo Solvers, QuTiP includes routines for Bloch-Redfield evolution, periodic systems using the Floquet formalism, and stochastic solvers. Add to this, steady state analysis and non-Markovian techniques, and you have a wide variety of tools from which to explore your systems behavior. A wide range of time-dependent evolution simulations can be runtime compiled into C++ behind the scenes using Cython. Thus, you get the ease of use of the Python programming language, and the performance of compiled code, all for free. What can be better than that?; . Can't express your time-dependence analytically, or need to construct a function from a data set? No problem. QuTiP allows for passing interpolating functions as time-dependent arguments to the evol",MatchSource.WIKI,features.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/features.html
https://qutip.org/features.html:2015,Performance,perform,performance,2015," largest quantum mechanical calculations. ; . In addition to custom algorithms, QuTiP is capable of leveraging the multiprocessing power inside every modern computer. Taking advantage of the Python multiprocessing library, OPENMP, SSE3 processor extensions, and the Intel MKL, if available, allows for faster manipulation of quantum objects, and increased performance of evolution equations, without any work at all.; . QuTiP includes a variety of builtin solvers for dynamical simulations. In addition to the standard Lindblad and Monte Carlo Solvers, QuTiP includes routines for Bloch-Redfield evolution, periodic systems using the Floquet formalism, and stochastic solvers. Add to this, steady state analysis and non-Markovian techniques, and you have a wide variety of tools from which to explore your systems behavior. A wide range of time-dependent evolution simulations can be runtime compiled into C++ behind the scenes using Cython. Thus, you get the ease of use of the Python programming language, and the performance of compiled code, all for free. What can be better than that?; . Can't express your time-dependence analytically, or need to construct a function from a data set? No problem. QuTiP allows for passing interpolating functions as time-dependent arguments to the evolution solvers. Even better, these interpolating functions can be runtime compiled into C++, and support both real and complex data.; . From Bloch spheres to nonlinear colormaps for Wigner functions, QuTiP includes a host of built-in visualization routines that help bring your data to life. Our plotting utilities have been used by Fortune 500 companies, government research labs, and countless research groups around the globe. If you don't look good, we don't look good. ; . QuTiP is thoroughly tested, both by its thousands of users, and by the large collection of built in test scripts. QuTiP includes over a thousand such tests, covering nearly all of the builtin functions. These tests are run over and ",MatchSource.WIKI,features.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/features.html
https://qutip.org/features.html:2787,Testability,test,tested,2787,"Solvers, QuTiP includes routines for Bloch-Redfield evolution, periodic systems using the Floquet formalism, and stochastic solvers. Add to this, steady state analysis and non-Markovian techniques, and you have a wide variety of tools from which to explore your systems behavior. A wide range of time-dependent evolution simulations can be runtime compiled into C++ behind the scenes using Cython. Thus, you get the ease of use of the Python programming language, and the performance of compiled code, all for free. What can be better than that?; . Can't express your time-dependence analytically, or need to construct a function from a data set? No problem. QuTiP allows for passing interpolating functions as time-dependent arguments to the evolution solvers. Even better, these interpolating functions can be runtime compiled into C++, and support both real and complex data.; . From Bloch spheres to nonlinear colormaps for Wigner functions, QuTiP includes a host of built-in visualization routines that help bring your data to life. Our plotting utilities have been used by Fortune 500 companies, government research labs, and countless research groups around the globe. If you don't look good, we don't look good. ; . QuTiP is thoroughly tested, both by its thousands of users, and by the large collection of built in test scripts. QuTiP includes over a thousand such tests, covering nearly all of the builtin functions. These tests are run over and over again during development to make sure that the results you get from QuTiP are in fact the correct answers. No other quantum simulation software is as well tested as QuTiP.; . No software should be a black box to the user, especially in science. QuTiP is not only completely open-source, but also includes hundreds of pages of documentation, a multitude of tutorial Jupyter notebooks, and a friendly community of users who kindly donate their time to help answer questions.; . © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,features.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/features.html
https://qutip.org/features.html:2867,Testability,test,test,2867,"Solvers, QuTiP includes routines for Bloch-Redfield evolution, periodic systems using the Floquet formalism, and stochastic solvers. Add to this, steady state analysis and non-Markovian techniques, and you have a wide variety of tools from which to explore your systems behavior. A wide range of time-dependent evolution simulations can be runtime compiled into C++ behind the scenes using Cython. Thus, you get the ease of use of the Python programming language, and the performance of compiled code, all for free. What can be better than that?; . Can't express your time-dependence analytically, or need to construct a function from a data set? No problem. QuTiP allows for passing interpolating functions as time-dependent arguments to the evolution solvers. Even better, these interpolating functions can be runtime compiled into C++, and support both real and complex data.; . From Bloch spheres to nonlinear colormaps for Wigner functions, QuTiP includes a host of built-in visualization routines that help bring your data to life. Our plotting utilities have been used by Fortune 500 companies, government research labs, and countless research groups around the globe. If you don't look good, we don't look good. ; . QuTiP is thoroughly tested, both by its thousands of users, and by the large collection of built in test scripts. QuTiP includes over a thousand such tests, covering nearly all of the builtin functions. These tests are run over and over again during development to make sure that the results you get from QuTiP are in fact the correct answers. No other quantum simulation software is as well tested as QuTiP.; . No software should be a black box to the user, especially in science. QuTiP is not only completely open-source, but also includes hundreds of pages of documentation, a multitude of tutorial Jupyter notebooks, and a friendly community of users who kindly donate their time to help answer questions.; . © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,features.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/features.html
https://qutip.org/features.html:2917,Testability,test,tests,2917,"Solvers, QuTiP includes routines for Bloch-Redfield evolution, periodic systems using the Floquet formalism, and stochastic solvers. Add to this, steady state analysis and non-Markovian techniques, and you have a wide variety of tools from which to explore your systems behavior. A wide range of time-dependent evolution simulations can be runtime compiled into C++ behind the scenes using Cython. Thus, you get the ease of use of the Python programming language, and the performance of compiled code, all for free. What can be better than that?; . Can't express your time-dependence analytically, or need to construct a function from a data set? No problem. QuTiP allows for passing interpolating functions as time-dependent arguments to the evolution solvers. Even better, these interpolating functions can be runtime compiled into C++, and support both real and complex data.; . From Bloch spheres to nonlinear colormaps for Wigner functions, QuTiP includes a host of built-in visualization routines that help bring your data to life. Our plotting utilities have been used by Fortune 500 companies, government research labs, and countless research groups around the globe. If you don't look good, we don't look good. ; . QuTiP is thoroughly tested, both by its thousands of users, and by the large collection of built in test scripts. QuTiP includes over a thousand such tests, covering nearly all of the builtin functions. These tests are run over and over again during development to make sure that the results you get from QuTiP are in fact the correct answers. No other quantum simulation software is as well tested as QuTiP.; . No software should be a black box to the user, especially in science. QuTiP is not only completely open-source, but also includes hundreds of pages of documentation, a multitude of tutorial Jupyter notebooks, and a friendly community of users who kindly donate their time to help answer questions.; . © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,features.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/features.html
https://qutip.org/features.html:2976,Testability,test,tests,2976,"Solvers, QuTiP includes routines for Bloch-Redfield evolution, periodic systems using the Floquet formalism, and stochastic solvers. Add to this, steady state analysis and non-Markovian techniques, and you have a wide variety of tools from which to explore your systems behavior. A wide range of time-dependent evolution simulations can be runtime compiled into C++ behind the scenes using Cython. Thus, you get the ease of use of the Python programming language, and the performance of compiled code, all for free. What can be better than that?; . Can't express your time-dependence analytically, or need to construct a function from a data set? No problem. QuTiP allows for passing interpolating functions as time-dependent arguments to the evolution solvers. Even better, these interpolating functions can be runtime compiled into C++, and support both real and complex data.; . From Bloch spheres to nonlinear colormaps for Wigner functions, QuTiP includes a host of built-in visualization routines that help bring your data to life. Our plotting utilities have been used by Fortune 500 companies, government research labs, and countless research groups around the globe. If you don't look good, we don't look good. ; . QuTiP is thoroughly tested, both by its thousands of users, and by the large collection of built in test scripts. QuTiP includes over a thousand such tests, covering nearly all of the builtin functions. These tests are run over and over again during development to make sure that the results you get from QuTiP are in fact the correct answers. No other quantum simulation software is as well tested as QuTiP.; . No software should be a black box to the user, especially in science. QuTiP is not only completely open-source, but also includes hundreds of pages of documentation, a multitude of tutorial Jupyter notebooks, and a friendly community of users who kindly donate their time to help answer questions.; . © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,features.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/features.html
https://qutip.org/features.html:3159,Testability,test,tested,3159,"Solvers, QuTiP includes routines for Bloch-Redfield evolution, periodic systems using the Floquet formalism, and stochastic solvers. Add to this, steady state analysis and non-Markovian techniques, and you have a wide variety of tools from which to explore your systems behavior. A wide range of time-dependent evolution simulations can be runtime compiled into C++ behind the scenes using Cython. Thus, you get the ease of use of the Python programming language, and the performance of compiled code, all for free. What can be better than that?; . Can't express your time-dependence analytically, or need to construct a function from a data set? No problem. QuTiP allows for passing interpolating functions as time-dependent arguments to the evolution solvers. Even better, these interpolating functions can be runtime compiled into C++, and support both real and complex data.; . From Bloch spheres to nonlinear colormaps for Wigner functions, QuTiP includes a host of built-in visualization routines that help bring your data to life. Our plotting utilities have been used by Fortune 500 companies, government research labs, and countless research groups around the globe. If you don't look good, we don't look good. ; . QuTiP is thoroughly tested, both by its thousands of users, and by the large collection of built in test scripts. QuTiP includes over a thousand such tests, covering nearly all of the builtin functions. These tests are run over and over again during development to make sure that the results you get from QuTiP are in fact the correct answers. No other quantum simulation software is as well tested as QuTiP.; . No software should be a black box to the user, especially in science. QuTiP is not only completely open-source, but also includes hundreds of pages of documentation, a multitude of tutorial Jupyter notebooks, and a friendly community of users who kindly donate their time to help answer questions.; . © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,features.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/features.html
https://qutip.org/features.html:569,Usability,learn,learn,569,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. Features. QuTiP is the original quantum framework written in Python; the most widely ; used programming language in the quantum sciences. Python's straightforward syntax allows for constructing, manipulating, and evolving quantum objects using QuTiP with just a few lines of code. Easy to learn, and 100% open-source, QuTiP is the ideal toolbox for research or the classroom. Did you know that you can determine if an operator is Hermitian without performing the conjugate transpose? QuTiP does. In fact, it is just one of many custom algorithms that QuTiP uses to maximize performance. Focusing on sparse matrices, and the means by which to efficiently manipulate these data structures, allows QuTiP to tackle even the largest quantum mechanical calculations. ; . In addition to custom algorithms, QuTiP is capable of leveraging the multiprocessing power inside every modern computer. Taking advantage of the Python multiprocessing library, OPENMP, SSE3 processor extensions, and the Intel MKL, if available, allows for faster manipulation of quantum objects, and increased performance of evolution equations, without any work at all.; . QuTiP includes a variety of builtin solvers for dynamical simulations. In addition to the standard Lindblad and Monte Carlo Solvers, QuTiP includes routines for Bloch-Redfield evolution, periodic systems using the Floquet formalism, and stochastic solvers. Add to this, steady state analysis and non-Markovian techniques, and you have a wide variety of tools from which to explore your systems behavior. A wide range of time-dependent evolution simulations can be runtime compiled into C++ behind the scenes using Cython. Thus, you get the ease of use of the Python programming lang",MatchSource.WIKI,features.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/features.html
https://qutip.org/index-wcopy.html:27471,Availability,down,downloads,27471,vel_atom — QuTiP 4.2 Documentation; qutip.tomography — QuTiP 4.2 Documentation; qutip.utilities — QuTiP 4.2 Documentation; qutip.visualization — QuTiP 4.2 Documentation; qutip.wigner — QuTiP 4.2 Documentation. Overview: module code — QuTiP 4.2 Documentation. Python Module Index — QuTiP 4.2 Documentation; Search — QuTiP 4.2 Documentation. /static; . /css; ; theme.css. /fonts; ; fontawesome-webfont-1.eot; fontawesome-webfont.eot; fontawesome-webfont.svg; fontawesome-webfont.ttf; fontawesome-webfont.woff; Inconsolata-Bold.ttf; Inconsolata-Regular.ttf; Lato-Bold.ttf; Lato-Regular.ttf; RobotoSlab-Bold.ttf; RobotoSlab-Regular.ttf. /js; ; modernizr.min.js; theme.js. doctools.js; favicon.ico; jquery.js; searchtools.js; underscore.js. /4.3; . /apidoc; ; API documentation — QuTiP 4.3 Documentation; Classes — QuTiP 4.3 Documentation; Functions — QuTiP 4.3 Documentation. Bibliography — QuTiP 4.3 Documentation; Change Log — QuTiP 4.3 Documentation; Developers — QuTiP 4.3 Documentation. /downloads; ; qutip_tree.pdf. Frontmatter — QuTiP 4.3 Documentation; Index — QuTiP 4.3 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 4.3 Documentation; Dynamics Simulation Results — QuTiP 4.3 Documentation; Floquet Formalism — QuTiP 4.3 Documentation; Lindblad Master Equation Solver — QuTiP 4.3 Documentation; Monte Carlo Solver — QuTiP 4.3 Documentation; Setting Options for the Dynamics Solvers — QuTiP 4.3 Documentation; Permutational Invariance — QuTiP 4.3 Documentation; Solving Problems with Time-dependent Hamiltonians — QuTiP 4.3 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex2.py; correlation_ex3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; ex_steady.pdf; ex_steady.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 4.3 Documentation; Basic Operations on Quantum Objects — QuTiP 4.3 Documentation; Plotting on the Bloch Spher,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:40529,Availability,down,downloads,40529,ato-regular.eot; lato-regular-1.eot. lato-regular-1.eot; lato-regular.ttf; lato-regular.woff; lato-regular.woff2. /RobotoSlab; . roboto-slab-v7-bold.eot. roboto-slab-v7-bold.eot; roboto-slab-v7-bold-1.eot. roboto-slab-v7-bold-1.eot; roboto-slab-v7-bold.ttf; roboto-slab-v7-bold.woff; roboto-slab-v7-bold.woff2; roboto-slab-v7-regular.eot; roboto-slab-v7-regular.ttf; roboto-slab-v7-regular.woff; roboto-slab-v7-regular.woff2. fontawesome-webfont-1.eot; fontawesome-webfont.eot; fontawesome-webfont.svg; fontawesome-webfont.ttf; fontawesome-webfont.woff; fontawesome-webfont.woff2. /js; ; modernizr.min.js; theme.js. doctools.js; documentation_options.js; favicon.ico; jquery.js; language_data.js; pygments.css; searchtools.js; underscore.js. /4.5; . /apidoc; ; API documentation — QuTiP 4.5 Documentation; Classes — QuTiP 4.5 Documentation; Functions — QuTiP 4.5 Documentation. Bibliography — QuTiP 4.5 Documentation; Change Log — QuTiP 4.5 Documentation; Developers — QuTiP 4.5 Documentation. /downloads; . /0a0d7dafe3f05d5f557344a23a835b36; ; plot_qip_amplitude_noise.py. /14df9cb9ce9929475a42b569fbb148fc; ; plot_qip_intro_processor.ipynb. /59247c9cb8a48d534ebd46ff105c141b; ; plot_qip_amplitude_noise.ipynb. /839a90675d1beebb9439ea0d47dac946; ; plot_qip_relaxation.py. /e1a1bbebf99cf434ac461d7e6da91f40; ; qutip_tree.pdf. /e57ad33a2917887dba8bce16c8b8588d; ; plot_qip_relaxation.ipynb. /f96e7cc4c3405f73eeeff70f35cf5f6f; ; plot_qip_intro_processor.py. Frontmatter — QuTiP 4.5 Documentation. /gallery; . /qutip_examples; . /qip; ; Control Amplitude Noise — QuTiP 4.5 Documentation; Basic use of Processor — QuTiP 4.5 Documentation; T2 Relaxation — QuTiP 4.5 Documentation. Gallery — QuTiP 4.5 Documentation. Index — QuTiP 4.5 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 4.5 Documentation; Dynamics Simulation Results — QuTiP 4.5 Documentation; Floquet Formalism — QuTiP 4.5 Documentation; Lindblad Master Equation Solver — QuTiP 4.5 Documentation; Monte Carlo Solv,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:48896,Availability,down,downloads,48896,data.js; pygments.css; searchtools.js; underscore.js. /4.6; . /apidoc; ; API documentation — QuTiP 4.6 Documentation; Classes — QuTiP 4.6 Documentation; Functions — QuTiP 4.6 Documentation. Bibliography — QuTiP 4.6 Documentation; Change Log — QuTiP 4.6 Documentation; Developers — QuTiP 4.6 Documentation. /development; . /ideas; ; GPU implementation of the Hierarchical Equations of Motion — QuTiP 4.6 Documentation; Pulse level description of quantum circuits — QuTiP 4.6 Documentation; Quantum Error Mitigation — QuTiP 4.6 Documentation; QuTiP Interactive — QuTiP 4.6 Documentation; TensorFlow Data Backend — QuTiP 4.6 Documentation. Contributing to QuTiP Development — QuTiP 4.6 Documentation; Development Documentation — QuTiP 4.6 Documentation; Working with the QuTiP Documentation — QuTiP 4.6 Documentation; docs-1.pdf; Ideas for future QuTiP development — QuTiP 4.6 Documentation; Release and Distribution — QuTiP 4.6 Documentation; QuTiP Development Roadmap — QuTiP 4.6 Documentation. /downloads; . /12a86e4dcaaba8c4a8de323bd441ab96; ; plot_qip_relaxation.py. /1b50abbe88595fe251e07102f532b361; ; plot_qip_amplitude_noise.ipynb. /3f58cb72e9b73bcbfbeb9e0f6960b60b; ; plot_qip_relaxation.ipynb. /5bc733f4cdb3729576a991efbdd8c026; ; plot_qip_intro_processor.ipynb. /7aaebc4b1d6f7b38aa6c893905ac98ef; ; plot_qip_intro_processor.py. /aacc19a817412ec042804206e9c23202; ; plot_qip_amplitude_noise.py. /e1a1bbebf99cf434ac461d7e6da91f40; ; qutip_tree.pdf. Frontmatter — QuTiP 4.6 Documentation. /gallery; . /build; . /qip; ; Control Amplitude Noise — QuTiP 4.6 Documentation; Basic use of Processor — QuTiP 4.6 Documentation; T2 Relaxation — QuTiP 4.6 Documentation. Gallery — QuTiP 4.6 Documentation. Index — QuTiP 4.6 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 4.6 Documentation; dynamics-bloch-redfield-3.pdf; dynamics-bloch-redfield-6.pdf; dynamics-bloch-redfield-8.pdf; Dynamics Simulation Results — QuTiP 4.6 Documentation; Floquet Formalism — QuTiP 4.6 Docume,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:58661,Availability,down,downloads,58661, — QuTiP 4.7 Documentation; Classes — QuTiP 4.7 Documentation; Functions — QuTiP 4.7 Documentation. Bibliography — QuTiP 4.7 Documentation; Change Log — QuTiP 4.7 Documentation; Developers — QuTiP 4.7 Documentation; Copyright and Licensing — QuTiP 4.7 Documentation; Copyright and Licensing — QuTiP 4.7 Documentation. /development; . /ideas; ; GPU implementation of the Hierarchical Equations of Motion — QuTiP 4.7 Documentation; Pulse level description of quantum circuits — QuTiP 4.7 Documentation; Quantum Error Mitigation — QuTiP 4.7 Documentation; QuTiP Interactive — QuTiP 4.7 Documentation; TensorFlow Data Backend — QuTiP 4.7 Documentation. Contributing to QuTiP Development — QuTiP 4.7 Documentation; Development Documentation — QuTiP 4.7 Documentation; Working with the QuTiP Documentation — QuTiP 4.7 Documentation; Ideas for future QuTiP development — QuTiP 4.7 Documentation; Release and Distribution — QuTiP 4.7 Documentation; QuTiP Development Roadmap — QuTiP 4.7 Documentation. /downloads; . /12a86e4dcaaba8c4a8de323bd441ab96; ; plot_qip_relaxation.py. /1b50abbe88595fe251e07102f532b361; ; plot_qip_amplitude_noise.ipynb. /3f58cb72e9b73bcbfbeb9e0f6960b60b; ; plot_qip_relaxation.ipynb. /5bc733f4cdb3729576a991efbdd8c026; ; plot_qip_intro_processor.ipynb. /7aaebc4b1d6f7b38aa6c893905ac98ef; ; plot_qip_intro_processor.py. /aacc19a817412ec042804206e9c23202; ; plot_qip_amplitude_noise.py. /e1a1bbebf99cf434ac461d7e6da91f40; ; qutip_tree.pdf. Frontmatter — QuTiP 4.7 Documentation. /gallery; . /build; . /qip; ; Control Amplitude Noise — QuTiP 4.7 Documentation; Basic use of Processor — QuTiP 4.7 Documentation; T2 Relaxation — QuTiP 4.7 Documentation. Gallery — QuTiP 4.7 Documentation. Index — QuTiP 4.7 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 4.7 Documentation; Dynamics Simulation Results — QuTiP 4.7 Documentation; Floquet Formalism — QuTiP 4.7 Documentation; Introduction — QuTiP 4.7 Documentation; Krylov Solver — QuTiP 4.7 Documentation; Lin,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:66566,Availability,down,downloads,66566,ntation; qutip.visualization — QuTiP 4.7 Documentation; qutip.wigner — QuTiP 4.7 Documentation. Overview: module code — QuTiP 4.7 Documentation. Python Module Index — QuTiP 4.7 Documentation; Search — QuTiP 4.7 Documentation. /static; . /css; . /fonts; ; fontawesome-webfont.eot; fontawesome-webfont-1.eot; fontawesome-webfont.svg; fontawesome-webfont.ttf; fontawesome-webfont.woff; fontawesome-webfont.woff2; lato-bold.woff; lato-bold.woff2; lato-bold-italic.woff; lato-bold-italic.woff2; lato-normal.woff; lato-normal.woff2; lato-normal-italic.woff; lato-normal-italic.woff2; Roboto-Slab-Bold.woff; Roboto-Slab-Bold.woff2; Roboto-Slab-Regular.woff; Roboto-Slab-Regular.woff2. theme.css. /js; ; theme.js. doctools.js; documentation_options.js; favicon.ico; gallery.css; gallery-binder.css; gallery-dataframe.css; gallery-rendered-html.css; jquery.js; language_data.js; pygments.css; searchtools.js; site.css; underscore.js. QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python. downloads; . /2.2.0; ; QuTiP-2.2.0-DOC.pdf. /4.0.2; ; qutip-doc-4.0.2.pdf. /4.1.0; ; qutip-doc-4.1.pdf. /4.2.0; ; QuTiP_4.2.pdf. /4.3.1; ; qutip-doc-4.3.pdf. /4.4.0; ; qutip-doc-4.4.pdf. /4.5.0; ; qutip-doc-4.5.pdf. QuTiP - Quantum Toolbox in Python. images; ; favicon.ico. QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python. js; ; bootstrap.min.js; datamaps.world.min.js; jquery.js; map.js. news; ; Commercial_Prospects_for_Quantum_Computing_Dec_2016.pdf; llnl_advert.pdf. QuTiP - Quantum Toolbox in Python. qutip-benchmark; . /ops; ; QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python. QuTiP - Quantum Toolbox in Python. qutip-tutorials; ; QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python. qutip-virtual-lab; . /assets; ; favicon-42303b83,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:54043,Energy Efficiency,schedul,scheduler,54043,iP 4.6 Documentation; qutip.control.dynamics — QuTiP 4.6 Documentation; qutip.control.fidcomp — QuTiP 4.6 Documentation; qutip.control.optimizer — QuTiP 4.6 Documentation; qutip.control.optimresult — QuTiP 4.6 Documentation; qutip.control.propcomp — QuTiP 4.6 Documentation; qutip.control.pulsegen — QuTiP 4.6 Documentation; qutip.control.pulseoptim — QuTiP 4.6 Documentation; qutip.control.stats — QuTiP 4.6 Documentation; qutip.control.termcond — QuTiP 4.6 Documentation; qutip.control.tslotcomp — QuTiP 4.6 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.6 Documentation; qutip.nonmarkov.memorycascade — QuTiP 4.6 Documentation; qutip.nonmarkov.transfertensor — QuTiP 4.6 Documentation. /qip; . /algorithms; ; qutip.qip.algorithms.qft — QuTiP 4.6 Documentation. /compiler; ; qutip.qip.compiler.cavityqedcompiler — QuTiP 4.6 Documentation; qutip.qip.compiler.gatecompiler — QuTiP 4.6 Documentation; qutip.qip.compiler.instruction — QuTiP 4.6 Documentation; qutip.qip.compiler.scheduler — QuTiP 4.6 Documentation; qutip.qip.compiler.spinchaincompiler — QuTiP 4.6 Documentation. /device; ; qutip.qip.device.cavityqed — QuTiP 4.6 Documentation; qutip.qip.device.modelprocessor — QuTiP 4.6 Documentation; qutip.qip.device.optpulseprocessor — QuTiP 4.6 Documentation; qutip.qip.device.processor — QuTiP 4.6 Documentation; qutip.qip.device.spinchain — QuTiP 4.6 Documentation. /operations; ; qutip.qip.operations.gates — QuTiP 4.6 Documentation. qutip.qip.circuit — QuTiP 4.6 Documentation; qutip.qip.noise — QuTiP 4.6 Documentation; qutip.qip.pulse — QuTiP 4.6 Documentation; qutip.qip.qasm — QuTiP 4.6 Documentation; qutip.qip.qubits — QuTiP 4.6 Documentation. qutip.about — QuTiP 4.6 Documentation; qutip.bloch — QuTiP 4.6 Documentation; qutip.bloch_redfield — QuTiP 4.6 Documentation; qutip.continuous_variables — QuTiP 4.6 Documentation; qutip.correlation — QuTiP 4.6 Documentation; qutip.dimensions — QuTiP 4.6 Documentation; qutip.distributions — QuTiP 4.6 Documentation; qutip.entropy,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:62823,Energy Efficiency,schedul,scheduler,62823,qutip.control.optimizer — QuTiP 4.7 Documentation; qutip.control.optimresult — QuTiP 4.7 Documentation; qutip.control.propcomp — QuTiP 4.7 Documentation; qutip.control.pulsegen — QuTiP 4.7 Documentation; qutip.control.pulseoptim — QuTiP 4.7 Documentation; qutip.control.stats — QuTiP 4.7 Documentation; qutip.control.termcond — QuTiP 4.7 Documentation; qutip.control.tslotcomp — QuTiP 4.7 Documentation. /nonmarkov; ; qutip.nonmarkov.bofin_baths — QuTiP 4.7 Documentation; qutip.nonmarkov.bofin_solvers — QuTiP 4.7 Documentation; qutip.nonmarkov.dlheom_solver — QuTiP 4.7 Documentation; qutip.nonmarkov.memorycascade — QuTiP 4.7 Documentation; qutip.nonmarkov.transfertensor — QuTiP 4.7 Documentation. /qip; . /algorithms; ; qutip.qip.algorithms.qft — QuTiP 4.7 Documentation. /compiler; ; qutip.qip.compiler.cavityqedcompiler — QuTiP 4.7 Documentation; qutip.qip.compiler.gatecompiler — QuTiP 4.7 Documentation; qutip.qip.compiler.instruction — QuTiP 4.7 Documentation; qutip.qip.compiler.scheduler — QuTiP 4.7 Documentation; qutip.qip.compiler.spinchaincompiler — QuTiP 4.7 Documentation. /device; ; qutip.qip.device.cavityqed — QuTiP 4.7 Documentation; qutip.qip.device.modelprocessor — QuTiP 4.7 Documentation; qutip.qip.device.optpulseprocessor — QuTiP 4.7 Documentation; qutip.qip.device.processor — QuTiP 4.7 Documentation; qutip.qip.device.spinchain — QuTiP 4.7 Documentation. /operations; ; qutip.qip.operations.gates — QuTiP 4.7 Documentation. qutip.qip.circuit — QuTiP 4.7 Documentation; qutip.qip.noise — QuTiP 4.7 Documentation; qutip.qip.pulse — QuTiP 4.7 Documentation; qutip.qip.qasm — QuTiP 4.7 Documentation; qutip.qip.qubits — QuTiP 4.7 Documentation. qutip.about — QuTiP 4.7 Documentation; qutip.bloch — QuTiP 4.7 Documentation; qutip.bloch_redfield — QuTiP 4.7 Documentation; qutip.bloch3d — QuTiP 4.7 Documentation; qutip.continuous_variables — QuTiP 4.7 Documentation; qutip.correlation — QuTiP 4.7 Documentation; qutip.dimensions — QuTiP 4.7 Documentation; qutip.distributions,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:971,Integrability,depend,dependent,971,﻿. QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python. css; ; bootstrap.css; gh-fork-ribbon.css; site.css. QuTiP - Quantum Toolbox in Python. docs; . /3.0.0; . /apidoc; ; API documentation — QuTiP 3.0 Documentation; Classes — QuTiP 3.0 Documentation; Functions — QuTiP 3.0 Documentation. Bibliography — QuTiP 3.0 Documentation; Change Log — QuTiP 3.0 Documentation; Developers — QuTiP 3.0 Documentation; Frontmatter — QuTiP 3.0 Documentation; Index — QuTiP 3.0 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 3.0 Documentation; Dynamics Simulation Results — QuTiP 3.0 Documentation; Floquet Formalism — QuTiP 3.0 Documentation; Lindblad Master Equation Solver — QuTiP 3.0 Documentation; Monte Carlo Solver — QuTiP 3.0 Documentation; Setting Options for the Dynamics Solvers — QuTiP 3.0 Documentation; Performance (QuTiP vs. qotoolbox) — QuTiP 3.0 Documentation; Solving Problems with Time-dependent Hamiltonians — QuTiP 3.0 Documentation. /scripts; ; correlation_ex1.pdf; correlation_ex1.py; correlation_ex2.pdf; correlation_ex2.py; correlation_ex3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; floquet_ex0.pdf; floquet_ex0.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 3.0 Documentation; Basic Operations on Quantum Objects — QuTiP 3.0 Documentation; Plotting on the Bloch Sphere — QuTiP 3.0 Documentation; Two-time correlation functions — QuTiP 3.0 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 3.0 Documentation; An Overview of the Eseries Class — QuTiP 3.0 Documentation; Guide Overview — QuTiP 3.0 Documentation; Running Problems in Parallel — QuTiP 3.0 Documentation; Generating Random Quantum States & Operators — QuTiP 3.0 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 3.0 Documentation; Modifying Internal QuTiP Settings — QuTiP 3.0 Documentation,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:3774,Integrability,depend,dependent,3774,regular.ttf; glyphicons-halflings-regular.woff. /js; ; jquery-1.11.0.min.js; jquery-fix.js. basic.css; bootstrap-sphinx.css; bootstrap-sphinx.js; doctools.js; favicon.ico; jquery.js; pygments.css; searchtools.js; site.css; underscore.js. /3.0.1; . /apidoc; ; API documentation — QuTiP 3.0 Documentation; Classes — QuTiP 3.0 Documentation; Functions — QuTiP 3.0 Documentation. Bibliography — QuTiP 3.0 Documentation; Change Log — QuTiP 3.0 Documentation; Developers — QuTiP 3.0 Documentation; Frontmatter — QuTiP 3.0 Documentation; Index — QuTiP 3.0 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 3.0 Documentation; Dynamics Simulation Results — QuTiP 3.0 Documentation; Floquet Formalism — QuTiP 3.0 Documentation; Lindblad Master Equation Solver — QuTiP 3.0 Documentation; Monte Carlo Solver — QuTiP 3.0 Documentation; Setting Options for the Dynamics Solvers — QuTiP 3.0 Documentation; Performance (QuTiP vs. qotoolbox) — QuTiP 3.0 Documentation; Solving Problems with Time-dependent Hamiltonians — QuTiP 3.0 Documentation. /scripts; ; correlation_ex1.pdf; correlation_ex1.py; correlation_ex2.pdf; correlation_ex2.py; correlation_ex3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; floquet_ex0.pdf; floquet_ex0.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 3.0 Documentation; Basic Operations on Quantum Objects — QuTiP 3.0 Documentation; Plotting on the Bloch Sphere — QuTiP 3.0 Documentation; Two-time correlation functions — QuTiP 3.0 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 3.0 Documentation; An Overview of the Eseries Class — QuTiP 3.0 Documentation; Guide Overview — QuTiP 3.0 Documentation; Running Problems in Parallel — QuTiP 3.0 Documentation; Generating Random Quantum States & Operators — QuTiP 3.0 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 3.0 Documentation; Modifying Internal QuTiP,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:6544,Integrability,depend,dependent,6544,egular.svg; glyphicons-halflings-regular.ttf; glyphicons-halflings-regular.woff. /js; ; jquery-1.11.0.min.js; jquery-fix.js. basic.css; bootstrap-sphinx.css; bootstrap-sphinx.js; doctools.js; favicon.ico; jquery.js; pygments.css; searchtools.js; site.css; underscore.js. /3.1.0; . /apidoc; ; API documentation — QuTiP 3.1.0 Documentation; Classes — QuTiP 3.1.0 Documentation; Functions — QuTiP 3.1.0 Documentation. Bibliography — QuTiP 3.1.0 Documentation; Change Log — QuTiP 3.1.0 Documentation; Developers — QuTiP 3.1.0 Documentation; Frontmatter — QuTiP 3.1.0 Documentation; Index — QuTiP 3.1.0 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 3.1.0 Documentation; Dynamics Simulation Results — QuTiP 3.1.0 Documentation; Floquet Formalism — QuTiP 3.1.0 Documentation; Lindblad Master Equation Solver — QuTiP 3.1.0 Documentation; Monte Carlo Solver — QuTiP 3.1.0 Documentation; Setting Options for the Dynamics Solvers — QuTiP 3.1.0 Documentation; Solving Problems with Time-dependent Hamiltonians — QuTiP 3.1.0 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex2.py; correlation_ex3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 3.1.0 Documentation; Basic Operations on Quantum Objects — QuTiP 3.1.0 Documentation; Plotting on the Bloch Sphere — QuTiP 3.1.0 Documentation; Two-time correlation functions — QuTiP 3.1.0 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 3.1.0 Documentation; An Overview of the Eseries Class — QuTiP 3.1.0 Documentation; Guide Overview — QuTiP 3.1.0 Documentation; Parallel computation — QuTiP 3.1.0 Documentation; Generating Random Quantum States & Operators — QuTiP 3.1.0 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 3.1.0 Documentation; Modifying Internal QuTiP Settings — QuTiP 3.1.0 Documentation; Manipulating States a,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:11563,Integrability,depend,dependent,11563,.eot; glyphicons-halflings-regular.svg; glyphicons-halflings-regular.ttf; glyphicons-halflings-regular.woff. /js; ; jquery-1.11.0.min.js; jquery-fix.js. basic.css; bootstrap-sphinx.css; bootstrap-sphinx.js; doctools.js; favicon.ico; jquery.js; pygments.css; searchtools.js; site.css; underscore.js. /4.0.2; . /apidoc; ; API documentation — QuTiP 4.0 Documentation; Classes — QuTiP 4.0 Documentation; Functions — QuTiP 4.0 Documentation. Bibliography — QuTiP 4.0 Documentation; Change Log — QuTiP 4.0 Documentation; Developers — QuTiP 4.0 Documentation; Frontmatter — QuTiP 4.0 Documentation; Index — QuTiP 4.0 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 4.0 Documentation; Dynamics Simulation Results — QuTiP 4.0 Documentation; Floquet Formalism — QuTiP 4.0 Documentation; Lindblad Master Equation Solver — QuTiP 4.0 Documentation; Monte Carlo Solver — QuTiP 4.0 Documentation; Setting Options for the Dynamics Solvers — QuTiP 4.0 Documentation; Solving Problems with Time-dependent Hamiltonians — QuTiP 4.0 Documentation. Users Guide — QuTiP 4.0 Documentation; Basic Operations on Quantum Objects — QuTiP 4.0 Documentation; Plotting on the Bloch Sphere — QuTiP 4.0 Documentation; Quantum Optimal Control — QuTiP 4.0 Documentation; Two-time correlation functions — QuTiP 4.0 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 4.0 Documentation; An Overview of the Eseries Class — QuTiP 4.0 Documentation; Guide Overview — QuTiP 4.0 Documentation; Parallel computation — QuTiP 4.0 Documentation; Generating Random Quantum States & Operators — QuTiP 4.0 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.0 Documentation; Modifying Internal QuTiP Settings — QuTiP 4.0 Documentation; Manipulating States and Operators — QuTiP 4.0 Documentation; Solving for Steady-State Solutions — QuTiP 4.0 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.0 Documentation; Visualization of quantum states and processes — QuTiP 4.0 Documentation.,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:16789,Integrability,depend,dependent,16789,tawesome-webfont.svg; fontawesome-webfont.ttf; fontawesome-webfont.woff; Inconsolata-Bold.ttf; Inconsolata-Regular.ttf; Lato-Bold.ttf; Lato-Regular.ttf; RobotoSlab-Bold.ttf; RobotoSlab-Regular.ttf. /js; ; modernizr.min.js; theme.js. doctools.js; favicon.ico; jquery.js; searchtools.js; underscore.js. /4.1; . /apidoc; ; API documentation — QuTiP 4.1 Documentation; Classes — QuTiP 4.1 Documentation; Functions — QuTiP 4.1 Documentation. Bibliography — QuTiP 4.1 Documentation; Change Log — QuTiP 4.1 Documentation; Developers — QuTiP 4.1 Documentation; Frontmatter — QuTiP 4.1 Documentation; Index — QuTiP 4.1 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 4.1 Documentation; Dynamics Simulation Results — QuTiP 4.1 Documentation; Floquet Formalism — QuTiP 4.1 Documentation; Lindblad Master Equation Solver — QuTiP 4.1 Documentation; Monte Carlo Solver — QuTiP 4.1 Documentation; Setting Options for the Dynamics Solvers — QuTiP 4.1 Documentation; Solving Problems with Time-dependent Hamiltonians — QuTiP 4.1 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex2.py; correlation_ex3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; ex_steady.pdf; ex_steady.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 4.1 Documentation; Basic Operations on Quantum Objects — QuTiP 4.1 Documentation; Plotting on the Bloch Sphere — QuTiP 4.1 Documentation; Quantum Optimal Control — QuTiP 4.1 Documentation; Two-time correlation functions — QuTiP 4.1 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 4.1 Documentation; An Overview of the Eseries Class — QuTiP 4.1 Documentation; Guide Overview — QuTiP 4.1 Documentation; Parallel computation — QuTiP 4.1 Documentation; Generating Random Quantum States & Operators — QuTiP 4.1 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.1 Documentation; Modifying Internal QuTiP S,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:22356,Integrability,depend,dependent,22356,tawesome-webfont.svg; fontawesome-webfont.ttf; fontawesome-webfont.woff; Inconsolata-Bold.ttf; Inconsolata-Regular.ttf; Lato-Bold.ttf; Lato-Regular.ttf; RobotoSlab-Bold.ttf; RobotoSlab-Regular.ttf. /js; ; modernizr.min.js; theme.js. doctools.js; favicon.ico; jquery.js; searchtools.js; underscore.js. /4.2; . /apidoc; ; API documentation — QuTiP 4.2 Documentation; Classes — QuTiP 4.2 Documentation; Functions — QuTiP 4.2 Documentation. Bibliography — QuTiP 4.2 Documentation; Change Log — QuTiP 4.2 Documentation; Developers — QuTiP 4.2 Documentation; Frontmatter — QuTiP 4.2 Documentation; Index — QuTiP 4.2 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 4.2 Documentation; Dynamics Simulation Results — QuTiP 4.2 Documentation; Floquet Formalism — QuTiP 4.2 Documentation; Lindblad Master Equation Solver — QuTiP 4.2 Documentation; Monte Carlo Solver — QuTiP 4.2 Documentation; Setting Options for the Dynamics Solvers — QuTiP 4.2 Documentation; Solving Problems with Time-dependent Hamiltonians — QuTiP 4.2 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex2.py; correlation_ex3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; ex_steady.pdf; ex_steady.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 4.2 Documentation; Basic Operations on Quantum Objects — QuTiP 4.2 Documentation; Plotting on the Bloch Sphere — QuTiP 4.2 Documentation; Quantum Optimal Control — QuTiP 4.2 Documentation; Two-time correlation functions — QuTiP 4.2 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 4.2 Documentation; An Overview of the Eseries Class — QuTiP 4.2 Documentation; Guide Overview — QuTiP 4.2 Documentation; Parallel computation — QuTiP 4.2 Documentation; Generating Random Quantum States & Operators — QuTiP 4.2 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.2 Documentation; Modifying Internal QuTiP S,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:28005,Integrability,depend,dependent,28005,ta-Bold.ttf; Inconsolata-Regular.ttf; Lato-Bold.ttf; Lato-Regular.ttf; RobotoSlab-Bold.ttf; RobotoSlab-Regular.ttf. /js; ; modernizr.min.js; theme.js. doctools.js; favicon.ico; jquery.js; searchtools.js; underscore.js. /4.3; . /apidoc; ; API documentation — QuTiP 4.3 Documentation; Classes — QuTiP 4.3 Documentation; Functions — QuTiP 4.3 Documentation. Bibliography — QuTiP 4.3 Documentation; Change Log — QuTiP 4.3 Documentation; Developers — QuTiP 4.3 Documentation. /downloads; ; qutip_tree.pdf. Frontmatter — QuTiP 4.3 Documentation; Index — QuTiP 4.3 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 4.3 Documentation; Dynamics Simulation Results — QuTiP 4.3 Documentation; Floquet Formalism — QuTiP 4.3 Documentation; Lindblad Master Equation Solver — QuTiP 4.3 Documentation; Monte Carlo Solver — QuTiP 4.3 Documentation; Setting Options for the Dynamics Solvers — QuTiP 4.3 Documentation; Permutational Invariance — QuTiP 4.3 Documentation; Solving Problems with Time-dependent Hamiltonians — QuTiP 4.3 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex2.py; correlation_ex3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; ex_steady.pdf; ex_steady.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 4.3 Documentation; Basic Operations on Quantum Objects — QuTiP 4.3 Documentation; Plotting on the Bloch Sphere — QuTiP 4.3 Documentation; Quantum Optimal Control — QuTiP 4.3 Documentation; Two-time correlation functions — QuTiP 4.3 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 4.3 Documentation; An Overview of the Eseries Class — QuTiP 4.3 Documentation; Guide Overview — QuTiP 4.3 Documentation; Parallel computation — QuTiP 4.3 Documentation; Generating Random Quantum States & Operators — QuTiP 4.3 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.3 Documentation; Modifying Internal QuTiP S,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:34546,Integrability,depend,dependent,34546,fontawesome-webfont.woff2. /js; ; modernizr.min.js; theme.js. doctools.js; favicon.ico; jquery.js; pygments.css; searchtools.js; underscore.js. /4.4; . /apidoc; ; API documentation — QuTiP 4.4 Documentation; Classes — QuTiP 4.4 Documentation; Functions — QuTiP 4.4 Documentation. Bibliography — QuTiP 4.4 Documentation; Change Log — QuTiP 4.4 Documentation; Developers — QuTiP 4.4 Documentation; Frontmatter — QuTiP 4.4 Documentation; Index — QuTiP 4.4 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 4.4 Documentation; Dynamics Simulation Results — QuTiP 4.4 Documentation; Floquet Formalism — QuTiP 4.4 Documentation; Lindblad Master Equation Solver — QuTiP 4.4 Documentation; Monte Carlo Solver — QuTiP 4.4 Documentation; Setting Options for the Dynamics Solvers — QuTiP 4.4 Documentation; Stochastic Solver - Photocurrent — QuTiP 4.4 Documentation; Permutational Invariance — QuTiP 4.4 Documentation; Stochastic Solver — QuTiP 4.4 Documentation; Solving Problems with Time-dependent Hamiltonians — QuTiP 4.4 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex2.py; correlation_ex3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; ex_steady.pdf; ex_steady.py; floquet_ex1.py; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 4.4 Documentation; Basic Operations on Quantum Objects — QuTiP 4.4 Documentation; Plotting on the Bloch Sphere — QuTiP 4.4 Documentation; Quantum Optimal Control — QuTiP 4.4 Documentation; Two-time correlation functions — QuTiP 4.4 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 4.4 Documentation; An Overview of the Eseries Class — QuTiP 4.4 Documentation; Guide Overview — QuTiP 4.4 Documentation; Parallel computation — QuTiP 4.4 Documentation; Generating Random Quantum States & Operators — QuTiP 4.4 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.4 Documentation; Modifying Internal QuTiP Settings — QuTiP 4.4 Documentation;,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:41816,Integrability,depend,dependent,41816,a1bbebf99cf434ac461d7e6da91f40; ; qutip_tree.pdf. /e57ad33a2917887dba8bce16c8b8588d; ; plot_qip_relaxation.ipynb. /f96e7cc4c3405f73eeeff70f35cf5f6f; ; plot_qip_intro_processor.py. Frontmatter — QuTiP 4.5 Documentation. /gallery; . /qutip_examples; . /qip; ; Control Amplitude Noise — QuTiP 4.5 Documentation; Basic use of Processor — QuTiP 4.5 Documentation; T2 Relaxation — QuTiP 4.5 Documentation. Gallery — QuTiP 4.5 Documentation. Index — QuTiP 4.5 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 4.5 Documentation; Dynamics Simulation Results — QuTiP 4.5 Documentation; Floquet Formalism — QuTiP 4.5 Documentation; Lindblad Master Equation Solver — QuTiP 4.5 Documentation; Monte Carlo Solver — QuTiP 4.5 Documentation; Setting Options for the Dynamics Solvers — QuTiP 4.5 Documentation; Stochastic Solver - Photocurrent — QuTiP 4.5 Documentation; Permutational Invariance — QuTiP 4.5 Documentation; Stochastic Solver — QuTiP 4.5 Documentation; Solving Problems with Time-dependent Hamiltonians — QuTiP 4.5 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex2.py; correlation_ex3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; ex_steady.pdf; ex_steady.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 4.5 Documentation; Basic Operations on Quantum Objects — QuTiP 4.5 Documentation; Plotting on the Bloch Sphere — QuTiP 4.5 Documentation; Quantum Optimal Control — QuTiP 4.5 Documentation; Two-time correlation functions — QuTiP 4.5 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 4.5 Documentation; An Overview of the Eseries Class — QuTiP 4.5 Documentation; Guide Overview — QuTiP 4.5 Documentation; Parallel computation — QuTiP 4.5 Documentation; Quantum Information Processing — QuTiP 4.5 Documentation; Generating Random Quantum States & Operators — QuTiP 4.5 Documentation; Saving QuTiP Objects and Data ,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:50537,Integrability,depend,dependent,50537,ion — QuTiP 4.6 Documentation. Gallery — QuTiP 4.6 Documentation. Index — QuTiP 4.6 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 4.6 Documentation; dynamics-bloch-redfield-3.pdf; dynamics-bloch-redfield-6.pdf; dynamics-bloch-redfield-8.pdf; Dynamics Simulation Results — QuTiP 4.6 Documentation; Floquet Formalism — QuTiP 4.6 Documentation; dynamics-floquet-1.pdf; dynamics-floquet-2.pdf; dynamics-floquet-3_00.pdf; dynamics-floquet-3_01.pdf; Lindblad Master Equation Solver — QuTiP 4.6 Documentation; dynamics-master-3.pdf; dynamics-master-5.pdf; dynamics-master-6.pdf; Monte Carlo Solver — QuTiP 4.6 Documentation; dynamics-monte-1_00.pdf; dynamics-monte-1_01.pdf; dynamics-monte-7.pdf; Setting Options for the Dynamics Solvers — QuTiP 4.6 Documentation; Stochastic Solver - Photocurrent — QuTiP 4.6 Documentation; Permutational Invariance — QuTiP 4.6 Documentation; Stochastic Solver — QuTiP 4.6 Documentation; dynamics-stochastic-1.pdf; Solving Problems with Time-dependent Hamiltonians — QuTiP 4.6 Documentation; dynamics-time-1.pdf; dynamics-time-10.pdf; dynamics-time-11.pdf; dynamics-time-12.pdf; dynamics-time-13_00.pdf; dynamics-time-13_01.pdf; dynamics-time-14.pdf; dynamics-time-2.pdf; dynamics-time-3.pdf; dynamics-time-4.pdf; dynamics-time-5.pdf; dynamics-time-6.pdf; dynamics-time-7.pdf; dynamics-time-8.pdf; dynamics-time-9.pdf. /qip; ; Quantum Information Processing — QuTiP 4.6 Documentation; Pulse-level circuit simulation — QuTiP 4.6 Documentation; qip-processor-1.pdf; qip-processor-2.pdf; qip-processor-3_00.pdf; qip-processor-3_01.pdf; Operator-level circuit simulation — QuTiP 4.6 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex3.pdf; correlation_ex4.pdf; ex_steady.pdf; floquet_ex1.pdf; floquet_ex2.pdf; floquet_ex3.pdf; spectrum_ex1.pdf. Users Guide — QuTiP 4.6 Documentation; Basic Operations on Quantum Objects — QuTiP 4.6 Documentation; Plotting on the Bloch Sphere — QuTiP 4.6 Documentation; guide-bloch-10.pdf; guide-bloch-,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:60020,Integrability,depend,dependent,60020,412ec042804206e9c23202; ; plot_qip_amplitude_noise.py. /e1a1bbebf99cf434ac461d7e6da91f40; ; qutip_tree.pdf. Frontmatter — QuTiP 4.7 Documentation. /gallery; . /build; . /qip; ; Control Amplitude Noise — QuTiP 4.7 Documentation; Basic use of Processor — QuTiP 4.7 Documentation; T2 Relaxation — QuTiP 4.7 Documentation. Gallery — QuTiP 4.7 Documentation. Index — QuTiP 4.7 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 4.7 Documentation; Dynamics Simulation Results — QuTiP 4.7 Documentation; Floquet Formalism — QuTiP 4.7 Documentation; Introduction — QuTiP 4.7 Documentation; Krylov Solver — QuTiP 4.7 Documentation; Lindblad Master Equation Solver — QuTiP 4.7 Documentation; Monte Carlo Solver — QuTiP 4.7 Documentation; Setting Options for the Dynamics Solvers — QuTiP 4.7 Documentation; Stochastic Solver - Photocurrent — QuTiP 4.7 Documentation; Permutational Invariance — QuTiP 4.7 Documentation; Stochastic Solver — QuTiP 4.7 Documentation; Solving Problems with Time-dependent Hamiltonians — QuTiP 4.7 Documentation. /heom; ; Bosonic Environments — QuTiP 4.7 Documentation; Fermionic Environments — QuTiP 4.7 Documentation; Previous implementations — QuTiP 4.7 Documentation; Introduction — QuTiP 4.7 Documentation; References — QuTiP 4.7 Documentation. /qip; ; Quantum Information Processing — QuTiP 4.7 Documentation; Pulse-level circuit simulation — QuTiP 4.7 Documentation; Operator-level circuit simulation — QuTiP 4.7 Documentation. Users Guide — QuTiP 4.7 Documentation; Basic Operations on Quantum Objects — QuTiP 4.7 Documentation; Plotting on the Bloch Sphere — QuTiP 4.7 Documentation; Quantum Optimal Control — QuTiP 4.7 Documentation; Two-time correlation functions — QuTiP 4.7 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 4.7 Documentation; Hierarchical Equations of Motion — QuTiP 4.7 Documentation; Measurement of Quantum Objects — QuTiP 4.7 Documentation; Guide Overview — QuTiP 4.7 Documentation; Parallel computation — QuT,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:12885,Performance,optimiz,optimizer,12885,and Quantum System Dynamics — QuTiP 4.0 Documentation; An Overview of the Eseries Class — QuTiP 4.0 Documentation; Guide Overview — QuTiP 4.0 Documentation; Parallel computation — QuTiP 4.0 Documentation; Generating Random Quantum States & Operators — QuTiP 4.0 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.0 Documentation; Modifying Internal QuTiP Settings — QuTiP 4.0 Documentation; Manipulating States and Operators — QuTiP 4.0 Documentation; Solving for Steady-State Solutions — QuTiP 4.0 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.0 Documentation; Visualization of quantum states and processes — QuTiP 4.0 Documentation. /images; ; qutip_tree.pdf. QuTiP: Quantum Toolbox in Python (4.0) — QuTiP 4.0 Documentation; Installation — QuTiP 4.0 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.0 Documentation; qutip.control.dynamics — QuTiP 4.0 Documentation; qutip.control.fidcomp — QuTiP 4.0 Documentation; qutip.control.optimizer — QuTiP 4.0 Documentation; qutip.control.optimresult — QuTiP 4.0 Documentation; qutip.control.propcomp — QuTiP 4.0 Documentation; qutip.control.pulsegen — QuTiP 4.0 Documentation; qutip.control.pulseoptim — QuTiP 4.0 Documentation; qutip.control.stats — QuTiP 4.0 Documentation; qutip.control.termcond — QuTiP 4.0 Documentation; qutip.control.tslotcomp — QuTiP 4.0 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.0 Documentation; qutip.nonmarkov.memorycascade — QuTiP 4.0 Documentation; qutip.nonmarkov.transfertensor — QuTiP 4.0 Documentation. /qip; . /algorithms; ; qutip.qip.algorithms.qft — QuTiP 4.0 Documentation. /models; ; qutip.qip.models.circuitprocessor — QuTiP 4.0 Documentation; qutip.qip.models.cqed — QuTiP 4.0 Documentation; qutip.qip.models.spinchain — QuTiP 4.0 Documentation. qutip.qip.circuit — QuTiP 4.0 Documentation; qutip.qip.gates — QuTiP 4.0 Documentation; qutip.qip.qubits — QuTiP 4.0 Documentation. qutip.about — QuTiP 4.0 Documentation; qutip.bloch — QuTiP 4.,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:18448,Performance,optimiz,optimizer,18448, Documentation; An Overview of the Eseries Class — QuTiP 4.1 Documentation; Guide Overview — QuTiP 4.1 Documentation; Parallel computation — QuTiP 4.1 Documentation; Generating Random Quantum States & Operators — QuTiP 4.1 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.1 Documentation; Modifying Internal QuTiP Settings — QuTiP 4.1 Documentation; Manipulating States and Operators — QuTiP 4.1 Documentation; guide-states-1.pdf; guide-states-1.py; Solving for Steady-State Solutions — QuTiP 4.1 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.1 Documentation; Visualization of quantum states and processes — QuTiP 4.1 Documentation. /images; ; qutip_tree.pdf. QuTiP: Quantum Toolbox in Python (4.1) — QuTiP 4.1 Documentation; Installation — QuTiP 4.1 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.1 Documentation; qutip.control.dynamics — QuTiP 4.1 Documentation; qutip.control.fidcomp — QuTiP 4.1 Documentation; qutip.control.optimizer — QuTiP 4.1 Documentation; qutip.control.optimresult — QuTiP 4.1 Documentation; qutip.control.propcomp — QuTiP 4.1 Documentation; qutip.control.pulsegen — QuTiP 4.1 Documentation; qutip.control.pulseoptim — QuTiP 4.1 Documentation; qutip.control.stats — QuTiP 4.1 Documentation; qutip.control.termcond — QuTiP 4.1 Documentation; qutip.control.tslotcomp — QuTiP 4.1 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.1 Documentation; qutip.nonmarkov.memorycascade — QuTiP 4.1 Documentation; qutip.nonmarkov.transfertensor — QuTiP 4.1 Documentation. /qip; . /algorithms; ; qutip.qip.algorithms.qft — QuTiP 4.1 Documentation. /models; ; qutip.qip.models.circuitprocessor — QuTiP 4.1 Documentation; qutip.qip.models.cqed — QuTiP 4.1 Documentation; qutip.qip.models.spinchain — QuTiP 4.1 Documentation. qutip.qip.circuit — QuTiP 4.1 Documentation; qutip.qip.gates — QuTiP 4.1 Documentation; qutip.qip.qubits — QuTiP 4.1 Documentation. qutip.about — QuTiP 4.1 Documentation; qutip.bloch — QuTiP 4.,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:24015,Performance,optimiz,optimizer,24015, Documentation; An Overview of the Eseries Class — QuTiP 4.2 Documentation; Guide Overview — QuTiP 4.2 Documentation; Parallel computation — QuTiP 4.2 Documentation; Generating Random Quantum States & Operators — QuTiP 4.2 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.2 Documentation; Modifying Internal QuTiP Settings — QuTiP 4.2 Documentation; Manipulating States and Operators — QuTiP 4.2 Documentation; guide-states-1.pdf; guide-states-1.py; Solving for Steady-State Solutions — QuTiP 4.2 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.2 Documentation; Visualization of quantum states and processes — QuTiP 4.2 Documentation. /images; ; qutip_tree.pdf. QuTiP: Quantum Toolbox in Python (4.2) — QuTiP 4.2 Documentation; Installation — QuTiP 4.2 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.2 Documentation; qutip.control.dynamics — QuTiP 4.2 Documentation; qutip.control.fidcomp — QuTiP 4.2 Documentation; qutip.control.optimizer — QuTiP 4.2 Documentation; qutip.control.optimresult — QuTiP 4.2 Documentation; qutip.control.propcomp — QuTiP 4.2 Documentation; qutip.control.pulsegen — QuTiP 4.2 Documentation; qutip.control.pulseoptim — QuTiP 4.2 Documentation; qutip.control.stats — QuTiP 4.2 Documentation; qutip.control.termcond — QuTiP 4.2 Documentation; qutip.control.tslotcomp — QuTiP 4.2 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.2 Documentation; qutip.nonmarkov.memorycascade — QuTiP 4.2 Documentation; qutip.nonmarkov.transfertensor — QuTiP 4.2 Documentation. /qip; . /algorithms; ; qutip.qip.algorithms.qft — QuTiP 4.2 Documentation. /models; ; qutip.qip.models.circuitprocessor — QuTiP 4.2 Documentation; qutip.qip.models.cqed — QuTiP 4.2 Documentation; qutip.qip.models.spinchain — QuTiP 4.2 Documentation. qutip.qip.circuit — QuTiP 4.2 Documentation; qutip.qip.gates — QuTiP 4.2 Documentation; qutip.qip.qubits — QuTiP 4.2 Documentation. qutip.about — QuTiP 4.2 Documentation; qutip.bloch — QuTiP 4.,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:29637,Performance,optimiz,optimizer,29637,System Dynamics — QuTiP 4.3 Documentation; An Overview of the Eseries Class — QuTiP 4.3 Documentation; Guide Overview — QuTiP 4.3 Documentation; Parallel computation — QuTiP 4.3 Documentation; Generating Random Quantum States & Operators — QuTiP 4.3 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.3 Documentation; Modifying Internal QuTiP Settings — QuTiP 4.3 Documentation; Manipulating States and Operators — QuTiP 4.3 Documentation; guide-states-1.pdf; guide-states-1.py; Solving for Steady-State Solutions — QuTiP 4.3 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.3 Documentation; Visualization of quantum states and processes — QuTiP 4.3 Documentation. QuTiP: Quantum Toolbox in Python (4.3) — QuTiP 4.3 Documentation; Installation — QuTiP 4.3 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.3 Documentation; qutip.control.dynamics — QuTiP 4.3 Documentation; qutip.control.fidcomp — QuTiP 4.3 Documentation; qutip.control.optimizer — QuTiP 4.3 Documentation; qutip.control.optimresult — QuTiP 4.3 Documentation; qutip.control.propcomp — QuTiP 4.3 Documentation; qutip.control.pulsegen — QuTiP 4.3 Documentation; qutip.control.pulseoptim — QuTiP 4.3 Documentation; qutip.control.stats — QuTiP 4.3 Documentation; qutip.control.termcond — QuTiP 4.3 Documentation; qutip.control.tslotcomp — QuTiP 4.3 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.3 Documentation; qutip.nonmarkov.memorycascade — QuTiP 4.3 Documentation; qutip.nonmarkov.transfertensor — QuTiP 4.3 Documentation. /qip; . /algorithms; ; qutip.qip.algorithms.qft — QuTiP 4.3 Documentation. /models; ; qutip.qip.models.circuitprocessor — QuTiP 4.3 Documentation; qutip.qip.models.cqed — QuTiP 4.3 Documentation; qutip.qip.models.spinchain — QuTiP 4.3 Documentation. qutip.qip.circuit — QuTiP 4.3 Documentation; qutip.qip.gates — QuTiP 4.3 Documentation; qutip.qip.qubits — QuTiP 4.3 Documentation. qutip.about — QuTiP 4.3 Documentation; qutip.bloch — QuTiP 4.,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:36144,Performance,optimiz,optimizer,36144,System Dynamics — QuTiP 4.4 Documentation; An Overview of the Eseries Class — QuTiP 4.4 Documentation; Guide Overview — QuTiP 4.4 Documentation; Parallel computation — QuTiP 4.4 Documentation; Generating Random Quantum States & Operators — QuTiP 4.4 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.4 Documentation; Modifying Internal QuTiP Settings — QuTiP 4.4 Documentation; Manipulating States and Operators — QuTiP 4.4 Documentation; guide-states-1.pdf; guide-states-1.py; Solving for Steady-State Solutions — QuTiP 4.4 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.4 Documentation; Visualization of quantum states and processes — QuTiP 4.4 Documentation. QuTiP: Quantum Toolbox in Python (4.4) — QuTiP 4.4 Documentation; Installation — QuTiP 4.4 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.4 Documentation; qutip.control.dynamics — QuTiP 4.4 Documentation; qutip.control.fidcomp — QuTiP 4.4 Documentation; qutip.control.optimizer — QuTiP 4.4 Documentation; qutip.control.optimresult — QuTiP 4.4 Documentation; qutip.control.propcomp — QuTiP 4.4 Documentation; qutip.control.pulsegen — QuTiP 4.4 Documentation; qutip.control.pulseoptim — QuTiP 4.4 Documentation; qutip.control.stats — QuTiP 4.4 Documentation; qutip.control.termcond — QuTiP 4.4 Documentation; qutip.control.tslotcomp — QuTiP 4.4 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.4 Documentation; qutip.nonmarkov.memorycascade — QuTiP 4.4 Documentation; qutip.nonmarkov.transfertensor — QuTiP 4.4 Documentation. /qip; . /algorithms; ; qutip.qip.algorithms.qft — QuTiP 4.4 Documentation. /models; ; qutip.qip.models.circuitprocessor — QuTiP 4.4 Documentation; qutip.qip.models.cqed — QuTiP 4.4 Documentation; qutip.qip.models.spinchain — QuTiP 4.4 Documentation. qutip.qip.circuit — QuTiP 4.4 Documentation; qutip.qip.gates — QuTiP 4.4 Documentation; qutip.qip.qubits — QuTiP 4.4 Documentation. qutip.about — QuTiP 4.4 Documentation; qutip.bloch — QuTiP 4.,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:43506,Performance,optimiz,optimizer,43506,the Eseries Class — QuTiP 4.5 Documentation; Guide Overview — QuTiP 4.5 Documentation; Parallel computation — QuTiP 4.5 Documentation; Quantum Information Processing — QuTiP 4.5 Documentation; Generating Random Quantum States & Operators — QuTiP 4.5 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.5 Documentation; Modifying Internal QuTiP Settings — QuTiP 4.5 Documentation; Manipulating States and Operators — QuTiP 4.5 Documentation; guide-states-1.pdf; guide-states-1.py; Solving for Steady-State Solutions — QuTiP 4.5 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.5 Documentation; Visualization of quantum states and processes — QuTiP 4.5 Documentation. QuTiP: Quantum Toolbox in Python (4.5) — QuTiP 4.5 Documentation; Installation — QuTiP 4.5 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.5 Documentation; qutip.control.dynamics — QuTiP 4.5 Documentation; qutip.control.fidcomp — QuTiP 4.5 Documentation; qutip.control.optimizer — QuTiP 4.5 Documentation; qutip.control.optimresult — QuTiP 4.5 Documentation; qutip.control.propcomp — QuTiP 4.5 Documentation; qutip.control.pulsegen — QuTiP 4.5 Documentation; qutip.control.pulseoptim — QuTiP 4.5 Documentation; qutip.control.stats — QuTiP 4.5 Documentation; qutip.control.termcond — QuTiP 4.5 Documentation; qutip.control.tslotcomp — QuTiP 4.5 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.5 Documentation; qutip.nonmarkov.memorycascade — QuTiP 4.5 Documentation; qutip.nonmarkov.transfertensor — QuTiP 4.5 Documentation. /qip; . /algorithms; ; qutip.qip.algorithms.qft — QuTiP 4.5 Documentation. /device; ; qutip.qip.device.modelprocessor — QuTiP 4.5 Documentation; qutip.qip.device.optpulseprocessor — QuTiP 4.5 Documentation; qutip.qip.device.processor — QuTiP 4.5 Documentation; qutip.qip.device.spinchain — QuTiP 4.5 Documentation. /operations; ; qutip.qip.operations.gates — QuTiP 4.5 Documentation. qutip.qip.circuit — QuTiP 4.5 Documentation; qutip.qip.nois,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:53188,Performance,optimiz,optimizer,53188,uantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.6 Documentation; Visualization of quantum states and processes — QuTiP 4.6 Documentation; guide-visualization-13.pdf; guide-visualization-3.pdf; guide-visualization-4.pdf; guide-visualization-5.pdf; guide-visualization-6.pdf; guide-visualization-7.pdf; guide-visualization-8.pdf; guide-visualization-9.pdf. QuTiP: Quantum Toolbox in Python — QuTiP 4.6 Documentation; Installation — QuTiP 4.6 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.6 Documentation; qutip.control.dynamics — QuTiP 4.6 Documentation; qutip.control.fidcomp — QuTiP 4.6 Documentation; qutip.control.optimizer — QuTiP 4.6 Documentation; qutip.control.optimresult — QuTiP 4.6 Documentation; qutip.control.propcomp — QuTiP 4.6 Documentation; qutip.control.pulsegen — QuTiP 4.6 Documentation; qutip.control.pulseoptim — QuTiP 4.6 Documentation; qutip.control.stats — QuTiP 4.6 Documentation; qutip.control.termcond — QuTiP 4.6 Documentation; qutip.control.tslotcomp — QuTiP 4.6 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.6 Documentation; qutip.nonmarkov.memorycascade — QuTiP 4.6 Documentation; qutip.nonmarkov.transfertensor — QuTiP 4.6 Documentation. /qip; . /algorithms; ; qutip.qip.algorithms.qft — QuTiP 4.6 Documentation. /compiler; ; qutip.qip.compiler.cavityqedcompiler — QuTiP 4.6 Documentation; qutip.qip.compiler.gatecompiler — QuTiP 4.6 Documentation; qutip.qip.compiler.instruction — QuTiP 4.6 Documentation; qutip.qip.compiler.scheduler — QuTiP 4.6 Documentation; qutip.qip.compiler.spinchaincompiler — QuTiP 4.6 Documentation. /device; ; qutip.qip.device.cavityqed — QuTiP 4.6 Docu,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:61847,Performance,optimiz,optimizer,61847,tion — QuTiP 4.7 Documentation; Measurement of Quantum Objects — QuTiP 4.7 Documentation; Guide Overview — QuTiP 4.7 Documentation; Parallel computation — QuTiP 4.7 Documentation; Quantum Information Processing — QuTiP 4.7 Documentation; Generating Random Quantum States & Operators — QuTiP 4.7 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.7 Documentation; Modifying Internal QuTiP Settings — QuTiP 4.7 Documentation; Manipulating States and Operators — QuTiP 4.7 Documentation; Solving for Steady-State Solutions — QuTiP 4.7 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.7 Documentation; Visualization of quantum states and processes — QuTiP 4.7 Documentation. QuTiP: Quantum Toolbox in Python — QuTiP 4.7 Documentation; Installation — QuTiP 4.7 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.7 Documentation; qutip.control.dynamics — QuTiP 4.7 Documentation; qutip.control.fidcomp — QuTiP 4.7 Documentation; qutip.control.optimizer — QuTiP 4.7 Documentation; qutip.control.optimresult — QuTiP 4.7 Documentation; qutip.control.propcomp — QuTiP 4.7 Documentation; qutip.control.pulsegen — QuTiP 4.7 Documentation; qutip.control.pulseoptim — QuTiP 4.7 Documentation; qutip.control.stats — QuTiP 4.7 Documentation; qutip.control.termcond — QuTiP 4.7 Documentation; qutip.control.tslotcomp — QuTiP 4.7 Documentation. /nonmarkov; ; qutip.nonmarkov.bofin_baths — QuTiP 4.7 Documentation; qutip.nonmarkov.bofin_solvers — QuTiP 4.7 Documentation; qutip.nonmarkov.dlheom_solver — QuTiP 4.7 Documentation; qutip.nonmarkov.memorycascade — QuTiP 4.7 Documentation; qutip.nonmarkov.transfertensor — QuTiP 4.7 Documentation. /qip; . /algorithms; ; qutip.qip.algorithms.qft — QuTiP 4.7 Documentation. /compiler; ; qutip.qip.compiler.cavityqedcompiler — QuTiP 4.7 Documentation; qutip.qip.compiler.gatecompiler — QuTiP 4.7 Documentation; qutip.qip.compiler.instruction — QuTiP 4.7 Documentation; qutip.qip.compiler.scheduler — QuTiP 4.7 Documentatio,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:67099,Testability,benchmark,benchmark,67099,o-normal-italic.woff; lato-normal-italic.woff2; Roboto-Slab-Bold.woff; Roboto-Slab-Bold.woff2; Roboto-Slab-Regular.woff; Roboto-Slab-Regular.woff2. theme.css. /js; ; theme.js. doctools.js; documentation_options.js; favicon.ico; gallery.css; gallery-binder.css; gallery-dataframe.css; gallery-rendered-html.css; jquery.js; language_data.js; pygments.css; searchtools.js; site.css; underscore.js. QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python. downloads; . /2.2.0; ; QuTiP-2.2.0-DOC.pdf. /4.0.2; ; qutip-doc-4.0.2.pdf. /4.1.0; ; qutip-doc-4.1.pdf. /4.2.0; ; QuTiP_4.2.pdf. /4.3.1; ; qutip-doc-4.3.pdf. /4.4.0; ; qutip-doc-4.4.pdf. /4.5.0; ; qutip-doc-4.5.pdf. QuTiP - Quantum Toolbox in Python. images; ; favicon.ico. QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python. js; ; bootstrap.min.js; datamaps.world.min.js; jquery.js; map.js. news; ; Commercial_Prospects_for_Quantum_Computing_Dec_2016.pdf; llnl_advert.pdf. QuTiP - Quantum Toolbox in Python. qutip-benchmark; . /ops; ; QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python. QuTiP - Quantum Toolbox in Python. qutip-tutorials; ; QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python. qutip-virtual-lab; . /assets; ; favicon-42303b83.ico; index-107cdd9d.css; index-34b0aa26.js; KaTeX_AMS-Regular-0cdd387c.woff2; KaTeX_AMS-Regular-30da91e8.woff; KaTeX_AMS-Regular-68534840.ttf; KaTeX_Caligraphic-Bold-07d8e303.ttf; KaTeX_Caligraphic-Bold-1ae6bd74.woff; KaTeX_Caligraphic-Bold-de7701e4.woff2; KaTeX_Caligraphic-Regular-3398dd02.woff; KaTeX_Caligraphic-Regular-5d53e70a.woff2; KaTeX_Caligraphic-Regular-ed0b7437.ttf; KaTeX_Fraktur-Bold-74444efd.woff2; KaTeX_Fraktur-Bold-9163df9c.ttf; KaTeX_Fraktur-Bold-9be7ceb8.woff; KaTeX_Fraktur-Regular-1e6f9579.ttf; KaTeX_Frakt,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:530,Usability,guid,guide,530,﻿. QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python; QuTiP - Quantum Toolbox in Python. css; ; bootstrap.css; gh-fork-ribbon.css; site.css. QuTiP - Quantum Toolbox in Python. docs; . /3.0.0; . /apidoc; ; API documentation — QuTiP 3.0 Documentation; Classes — QuTiP 3.0 Documentation; Functions — QuTiP 3.0 Documentation. Bibliography — QuTiP 3.0 Documentation; Change Log — QuTiP 3.0 Documentation; Developers — QuTiP 3.0 Documentation; Frontmatter — QuTiP 3.0 Documentation; Index — QuTiP 3.0 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 3.0 Documentation; Dynamics Simulation Results — QuTiP 3.0 Documentation; Floquet Formalism — QuTiP 3.0 Documentation; Lindblad Master Equation Solver — QuTiP 3.0 Documentation; Monte Carlo Solver — QuTiP 3.0 Documentation; Setting Options for the Dynamics Solvers — QuTiP 3.0 Documentation; Performance (QuTiP vs. qotoolbox) — QuTiP 3.0 Documentation; Solving Problems with Time-dependent Hamiltonians — QuTiP 3.0 Documentation. /scripts; ; correlation_ex1.pdf; correlation_ex1.py; correlation_ex2.pdf; correlation_ex2.py; correlation_ex3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; floquet_ex0.pdf; floquet_ex0.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 3.0 Documentation; Basic Operations on Quantum Objects — QuTiP 3.0 Documentation; Plotting on the Bloch Sphere — QuTiP 3.0 Documentation; Two-time correlation functions — QuTiP 3.0 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 3.0 Documentation; An Overview of the Eseries Class — QuTiP 3.0 Documentation; Guide Overview — QuTiP 3.0 Documentation; Running Problems in Parallel — QuTiP 3.0 Documentation; Generating Random Quantum States & Operators — QuTiP 3.0 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 3.0 Documentation; Modifying Internal QuTiP Settings — QuTiP 3.0 Documentation,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:3333,Usability,guid,guide,3333,nstallation — QuTiP 3.0 Documentation; Python Module Index — QuTiP 3.0 Documentation; Search — QuTiP 3.0 Documentation. /static; . /bootstrap-3.1.0; . /js; ; bootstrap.min.js. /bootswatch-3.1.0; . /flatly; ; bootstrap.min.css. /fonts; . glyphicons-halflings-regular.eot. glyphicons-halflings-regular.eot; glyphicons-halflings-regular-1.eot. glyphicons-halflings-regular-1.eot; glyphicons-halflings-regular.svg; glyphicons-halflings-regular.ttf; glyphicons-halflings-regular.woff. /js; ; jquery-1.11.0.min.js; jquery-fix.js. basic.css; bootstrap-sphinx.css; bootstrap-sphinx.js; doctools.js; favicon.ico; jquery.js; pygments.css; searchtools.js; site.css; underscore.js. /3.0.1; . /apidoc; ; API documentation — QuTiP 3.0 Documentation; Classes — QuTiP 3.0 Documentation; Functions — QuTiP 3.0 Documentation. Bibliography — QuTiP 3.0 Documentation; Change Log — QuTiP 3.0 Documentation; Developers — QuTiP 3.0 Documentation; Frontmatter — QuTiP 3.0 Documentation; Index — QuTiP 3.0 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 3.0 Documentation; Dynamics Simulation Results — QuTiP 3.0 Documentation; Floquet Formalism — QuTiP 3.0 Documentation; Lindblad Master Equation Solver — QuTiP 3.0 Documentation; Monte Carlo Solver — QuTiP 3.0 Documentation; Setting Options for the Dynamics Solvers — QuTiP 3.0 Documentation; Performance (QuTiP vs. qotoolbox) — QuTiP 3.0 Documentation; Solving Problems with Time-dependent Hamiltonians — QuTiP 3.0 Documentation. /scripts; ; correlation_ex1.pdf; correlation_ex1.py; correlation_ex2.pdf; correlation_ex2.py; correlation_ex3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; floquet_ex0.pdf; floquet_ex0.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 3.0 Documentation; Basic Operations on Quantum Objects — QuTiP 3.0 Documentation; Plotting on the Bloch Sphere — QuTiP 3.0 Documentation; Two-time co,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:6152,Usability,guid,guide,6152,TiP 3.0 Documentation; Python Module Index — QuTiP 3.0 Documentation; Search — QuTiP 3.0 Documentation. /static; . /bootstrap-3.1.0; . /js; ; bootstrap.min.js. /bootswatch-3.1.0; . /flatly; ; bootstrap.min.css. /fonts; . glyphicons-halflings-regular.eot. glyphicons-halflings-regular.eot; glyphicons-halflings-regular-1.eot. glyphicons-halflings-regular-1.eot; glyphicons-halflings-regular.svg; glyphicons-halflings-regular.ttf; glyphicons-halflings-regular.woff. /js; ; jquery-1.11.0.min.js; jquery-fix.js. basic.css; bootstrap-sphinx.css; bootstrap-sphinx.js; doctools.js; favicon.ico; jquery.js; pygments.css; searchtools.js; site.css; underscore.js. /3.1.0; . /apidoc; ; API documentation — QuTiP 3.1.0 Documentation; Classes — QuTiP 3.1.0 Documentation; Functions — QuTiP 3.1.0 Documentation. Bibliography — QuTiP 3.1.0 Documentation; Change Log — QuTiP 3.1.0 Documentation; Developers — QuTiP 3.1.0 Documentation; Frontmatter — QuTiP 3.1.0 Documentation; Index — QuTiP 3.1.0 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 3.1.0 Documentation; Dynamics Simulation Results — QuTiP 3.1.0 Documentation; Floquet Formalism — QuTiP 3.1.0 Documentation; Lindblad Master Equation Solver — QuTiP 3.1.0 Documentation; Monte Carlo Solver — QuTiP 3.1.0 Documentation; Setting Options for the Dynamics Solvers — QuTiP 3.1.0 Documentation; Solving Problems with Time-dependent Hamiltonians — QuTiP 3.1.0 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex2.py; correlation_ex3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 3.1.0 Documentation; Basic Operations on Quantum Objects — QuTiP 3.1.0 Documentation; Plotting on the Bloch Sphere — QuTiP 3.1.0 Documentation; Two-time correlation functions — QuTiP 3.1.0 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 3.1.0 Documenta,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:11183,Usability,guid,guide,11183,qutip — QuTiP 3.1.0 Documentation. Python Module Index — QuTiP 3.1.0 Documentation; Search — QuTiP 3.1.0 Documentation. /static; . /bootstrap-3.2.0; . /js; ; bootstrap.min.js. /bootswatch-3.2.0; . /flatly; ; bootstrap.min.css. /fonts; . glyphicons-halflings-regular.eot. glyphicons-halflings-regular.eot; glyphicons-halflings-regular-1.eot. glyphicons-halflings-regular-1.eot; glyphicons-halflings-regular.svg; glyphicons-halflings-regular.ttf; glyphicons-halflings-regular.woff. /js; ; jquery-1.11.0.min.js; jquery-fix.js. basic.css; bootstrap-sphinx.css; bootstrap-sphinx.js; doctools.js; favicon.ico; jquery.js; pygments.css; searchtools.js; site.css; underscore.js. /4.0.2; . /apidoc; ; API documentation — QuTiP 4.0 Documentation; Classes — QuTiP 4.0 Documentation; Functions — QuTiP 4.0 Documentation. Bibliography — QuTiP 4.0 Documentation; Change Log — QuTiP 4.0 Documentation; Developers — QuTiP 4.0 Documentation; Frontmatter — QuTiP 4.0 Documentation; Index — QuTiP 4.0 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 4.0 Documentation; Dynamics Simulation Results — QuTiP 4.0 Documentation; Floquet Formalism — QuTiP 4.0 Documentation; Lindblad Master Equation Solver — QuTiP 4.0 Documentation; Monte Carlo Solver — QuTiP 4.0 Documentation; Setting Options for the Dynamics Solvers — QuTiP 4.0 Documentation; Solving Problems with Time-dependent Hamiltonians — QuTiP 4.0 Documentation. Users Guide — QuTiP 4.0 Documentation; Basic Operations on Quantum Objects — QuTiP 4.0 Documentation; Plotting on the Bloch Sphere — QuTiP 4.0 Documentation; Quantum Optimal Control — QuTiP 4.0 Documentation; Two-time correlation functions — QuTiP 4.0 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 4.0 Documentation; An Overview of the Eseries Class — QuTiP 4.0 Documentation; Guide Overview — QuTiP 4.0 Documentation; Parallel computation — QuTiP 4.0 Documentation; Generating Random Quantum States & Operators — QuTiP 4.0 Documentation; Saving QuTiP O,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:16409,Usability,guid,guide,16409, Documentation; qutip.utilities — QuTiP 4.0 Documentation; qutip.visualization — QuTiP 4.0 Documentation; qutip.wigner — QuTiP 4.0 Documentation. Overview: module code — QuTiP 4.0 Documentation. Python Module Index — QuTiP 4.0 Documentation; Search — QuTiP 4.0 Documentation. /static; . /css; ; theme.css. /fonts; ; fontawesome-webfont-1.eot; fontawesome-webfont.eot; fontawesome-webfont.svg; fontawesome-webfont.ttf; fontawesome-webfont.woff; Inconsolata-Bold.ttf; Inconsolata-Regular.ttf; Lato-Bold.ttf; Lato-Regular.ttf; RobotoSlab-Bold.ttf; RobotoSlab-Regular.ttf. /js; ; modernizr.min.js; theme.js. doctools.js; favicon.ico; jquery.js; searchtools.js; underscore.js. /4.1; . /apidoc; ; API documentation — QuTiP 4.1 Documentation; Classes — QuTiP 4.1 Documentation; Functions — QuTiP 4.1 Documentation. Bibliography — QuTiP 4.1 Documentation; Change Log — QuTiP 4.1 Documentation; Developers — QuTiP 4.1 Documentation; Frontmatter — QuTiP 4.1 Documentation; Index — QuTiP 4.1 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 4.1 Documentation; Dynamics Simulation Results — QuTiP 4.1 Documentation; Floquet Formalism — QuTiP 4.1 Documentation; Lindblad Master Equation Solver — QuTiP 4.1 Documentation; Monte Carlo Solver — QuTiP 4.1 Documentation; Setting Options for the Dynamics Solvers — QuTiP 4.1 Documentation; Solving Problems with Time-dependent Hamiltonians — QuTiP 4.1 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex2.py; correlation_ex3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; ex_steady.pdf; ex_steady.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 4.1 Documentation; Basic Operations on Quantum Objects — QuTiP 4.1 Documentation; Plotting on the Bloch Sphere — QuTiP 4.1 Documentation; Quantum Optimal Control — QuTiP 4.1 Documentation; Two-time correlation functions — QuTiP 4.1 Documentation; Time Evo,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:17880,Usability,guid,guide-states-,17880,tion_ex2.py; correlation_ex3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; ex_steady.pdf; ex_steady.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 4.1 Documentation; Basic Operations on Quantum Objects — QuTiP 4.1 Documentation; Plotting on the Bloch Sphere — QuTiP 4.1 Documentation; Quantum Optimal Control — QuTiP 4.1 Documentation; Two-time correlation functions — QuTiP 4.1 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 4.1 Documentation; An Overview of the Eseries Class — QuTiP 4.1 Documentation; Guide Overview — QuTiP 4.1 Documentation; Parallel computation — QuTiP 4.1 Documentation; Generating Random Quantum States & Operators — QuTiP 4.1 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.1 Documentation; Modifying Internal QuTiP Settings — QuTiP 4.1 Documentation; Manipulating States and Operators — QuTiP 4.1 Documentation; guide-states-1.pdf; guide-states-1.py; Solving for Steady-State Solutions — QuTiP 4.1 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.1 Documentation; Visualization of quantum states and processes — QuTiP 4.1 Documentation. /images; ; qutip_tree.pdf. QuTiP: Quantum Toolbox in Python (4.1) — QuTiP 4.1 Documentation; Installation — QuTiP 4.1 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.1 Documentation; qutip.control.dynamics — QuTiP 4.1 Documentation; qutip.control.fidcomp — QuTiP 4.1 Documentation; qutip.control.optimizer — QuTiP 4.1 Documentation; qutip.control.optimresult — QuTiP 4.1 Documentation; qutip.control.propcomp — QuTiP 4.1 Documentation; qutip.control.pulsegen — QuTiP 4.1 Documentation; qutip.control.pulseoptim — QuTiP 4.1 Documentation; qutip.control.stats — QuTiP 4.1 Documentation; qutip.control.termcond — QuTiP 4.1 Documentation; qutip.control.tslotcomp — QuTiP 4.1 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTi,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:17900,Usability,guid,guide-states-,17900,x3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; ex_steady.pdf; ex_steady.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 4.1 Documentation; Basic Operations on Quantum Objects — QuTiP 4.1 Documentation; Plotting on the Bloch Sphere — QuTiP 4.1 Documentation; Quantum Optimal Control — QuTiP 4.1 Documentation; Two-time correlation functions — QuTiP 4.1 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 4.1 Documentation; An Overview of the Eseries Class — QuTiP 4.1 Documentation; Guide Overview — QuTiP 4.1 Documentation; Parallel computation — QuTiP 4.1 Documentation; Generating Random Quantum States & Operators — QuTiP 4.1 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.1 Documentation; Modifying Internal QuTiP Settings — QuTiP 4.1 Documentation; Manipulating States and Operators — QuTiP 4.1 Documentation; guide-states-1.pdf; guide-states-1.py; Solving for Steady-State Solutions — QuTiP 4.1 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.1 Documentation; Visualization of quantum states and processes — QuTiP 4.1 Documentation. /images; ; qutip_tree.pdf. QuTiP: Quantum Toolbox in Python (4.1) — QuTiP 4.1 Documentation; Installation — QuTiP 4.1 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.1 Documentation; qutip.control.dynamics — QuTiP 4.1 Documentation; qutip.control.fidcomp — QuTiP 4.1 Documentation; qutip.control.optimizer — QuTiP 4.1 Documentation; qutip.control.optimresult — QuTiP 4.1 Documentation; qutip.control.propcomp — QuTiP 4.1 Documentation; qutip.control.pulsegen — QuTiP 4.1 Documentation; qutip.control.pulseoptim — QuTiP 4.1 Documentation; qutip.control.stats — QuTiP 4.1 Documentation; qutip.control.termcond — QuTiP 4.1 Documentation; qutip.control.tslotcomp — QuTiP 4.1 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.1 Documentation; qutip,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:21976,Usability,guid,guide,21976, Documentation; qutip.utilities — QuTiP 4.1 Documentation; qutip.visualization — QuTiP 4.1 Documentation; qutip.wigner — QuTiP 4.1 Documentation. Overview: module code — QuTiP 4.1 Documentation. Python Module Index — QuTiP 4.1 Documentation; Search — QuTiP 4.1 Documentation. /static; . /css; ; theme.css. /fonts; ; fontawesome-webfont-1.eot; fontawesome-webfont.eot; fontawesome-webfont.svg; fontawesome-webfont.ttf; fontawesome-webfont.woff; Inconsolata-Bold.ttf; Inconsolata-Regular.ttf; Lato-Bold.ttf; Lato-Regular.ttf; RobotoSlab-Bold.ttf; RobotoSlab-Regular.ttf. /js; ; modernizr.min.js; theme.js. doctools.js; favicon.ico; jquery.js; searchtools.js; underscore.js. /4.2; . /apidoc; ; API documentation — QuTiP 4.2 Documentation; Classes — QuTiP 4.2 Documentation; Functions — QuTiP 4.2 Documentation. Bibliography — QuTiP 4.2 Documentation; Change Log — QuTiP 4.2 Documentation; Developers — QuTiP 4.2 Documentation; Frontmatter — QuTiP 4.2 Documentation; Index — QuTiP 4.2 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 4.2 Documentation; Dynamics Simulation Results — QuTiP 4.2 Documentation; Floquet Formalism — QuTiP 4.2 Documentation; Lindblad Master Equation Solver — QuTiP 4.2 Documentation; Monte Carlo Solver — QuTiP 4.2 Documentation; Setting Options for the Dynamics Solvers — QuTiP 4.2 Documentation; Solving Problems with Time-dependent Hamiltonians — QuTiP 4.2 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex2.py; correlation_ex3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; ex_steady.pdf; ex_steady.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 4.2 Documentation; Basic Operations on Quantum Objects — QuTiP 4.2 Documentation; Plotting on the Bloch Sphere — QuTiP 4.2 Documentation; Quantum Optimal Control — QuTiP 4.2 Documentation; Two-time correlation functions — QuTiP 4.2 Documentation; Time Evo,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:23447,Usability,guid,guide-states-,23447,tion_ex2.py; correlation_ex3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; ex_steady.pdf; ex_steady.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 4.2 Documentation; Basic Operations on Quantum Objects — QuTiP 4.2 Documentation; Plotting on the Bloch Sphere — QuTiP 4.2 Documentation; Quantum Optimal Control — QuTiP 4.2 Documentation; Two-time correlation functions — QuTiP 4.2 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 4.2 Documentation; An Overview of the Eseries Class — QuTiP 4.2 Documentation; Guide Overview — QuTiP 4.2 Documentation; Parallel computation — QuTiP 4.2 Documentation; Generating Random Quantum States & Operators — QuTiP 4.2 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.2 Documentation; Modifying Internal QuTiP Settings — QuTiP 4.2 Documentation; Manipulating States and Operators — QuTiP 4.2 Documentation; guide-states-1.pdf; guide-states-1.py; Solving for Steady-State Solutions — QuTiP 4.2 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.2 Documentation; Visualization of quantum states and processes — QuTiP 4.2 Documentation. /images; ; qutip_tree.pdf. QuTiP: Quantum Toolbox in Python (4.2) — QuTiP 4.2 Documentation; Installation — QuTiP 4.2 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.2 Documentation; qutip.control.dynamics — QuTiP 4.2 Documentation; qutip.control.fidcomp — QuTiP 4.2 Documentation; qutip.control.optimizer — QuTiP 4.2 Documentation; qutip.control.optimresult — QuTiP 4.2 Documentation; qutip.control.propcomp — QuTiP 4.2 Documentation; qutip.control.pulsegen — QuTiP 4.2 Documentation; qutip.control.pulseoptim — QuTiP 4.2 Documentation; qutip.control.stats — QuTiP 4.2 Documentation; qutip.control.termcond — QuTiP 4.2 Documentation; qutip.control.tslotcomp — QuTiP 4.2 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTi,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:23467,Usability,guid,guide-states-,23467,x3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; ex_steady.pdf; ex_steady.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 4.2 Documentation; Basic Operations on Quantum Objects — QuTiP 4.2 Documentation; Plotting on the Bloch Sphere — QuTiP 4.2 Documentation; Quantum Optimal Control — QuTiP 4.2 Documentation; Two-time correlation functions — QuTiP 4.2 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 4.2 Documentation; An Overview of the Eseries Class — QuTiP 4.2 Documentation; Guide Overview — QuTiP 4.2 Documentation; Parallel computation — QuTiP 4.2 Documentation; Generating Random Quantum States & Operators — QuTiP 4.2 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.2 Documentation; Modifying Internal QuTiP Settings — QuTiP 4.2 Documentation; Manipulating States and Operators — QuTiP 4.2 Documentation; guide-states-1.pdf; guide-states-1.py; Solving for Steady-State Solutions — QuTiP 4.2 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.2 Documentation; Visualization of quantum states and processes — QuTiP 4.2 Documentation. /images; ; qutip_tree.pdf. QuTiP: Quantum Toolbox in Python (4.2) — QuTiP 4.2 Documentation; Installation — QuTiP 4.2 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.2 Documentation; qutip.control.dynamics — QuTiP 4.2 Documentation; qutip.control.fidcomp — QuTiP 4.2 Documentation; qutip.control.optimizer — QuTiP 4.2 Documentation; qutip.control.optimresult — QuTiP 4.2 Documentation; qutip.control.propcomp — QuTiP 4.2 Documentation; qutip.control.pulsegen — QuTiP 4.2 Documentation; qutip.control.pulseoptim — QuTiP 4.2 Documentation; qutip.control.stats — QuTiP 4.2 Documentation; qutip.control.termcond — QuTiP 4.2 Documentation; qutip.control.tslotcomp — QuTiP 4.2 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.2 Documentation; qutip,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:27573,Usability,guid,guide,27573,s — QuTiP 4.2 Documentation; qutip.visualization — QuTiP 4.2 Documentation; qutip.wigner — QuTiP 4.2 Documentation. Overview: module code — QuTiP 4.2 Documentation. Python Module Index — QuTiP 4.2 Documentation; Search — QuTiP 4.2 Documentation. /static; . /css; ; theme.css. /fonts; ; fontawesome-webfont-1.eot; fontawesome-webfont.eot; fontawesome-webfont.svg; fontawesome-webfont.ttf; fontawesome-webfont.woff; Inconsolata-Bold.ttf; Inconsolata-Regular.ttf; Lato-Bold.ttf; Lato-Regular.ttf; RobotoSlab-Bold.ttf; RobotoSlab-Regular.ttf. /js; ; modernizr.min.js; theme.js. doctools.js; favicon.ico; jquery.js; searchtools.js; underscore.js. /4.3; . /apidoc; ; API documentation — QuTiP 4.3 Documentation; Classes — QuTiP 4.3 Documentation; Functions — QuTiP 4.3 Documentation. Bibliography — QuTiP 4.3 Documentation; Change Log — QuTiP 4.3 Documentation; Developers — QuTiP 4.3 Documentation. /downloads; ; qutip_tree.pdf. Frontmatter — QuTiP 4.3 Documentation; Index — QuTiP 4.3 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 4.3 Documentation; Dynamics Simulation Results — QuTiP 4.3 Documentation; Floquet Formalism — QuTiP 4.3 Documentation; Lindblad Master Equation Solver — QuTiP 4.3 Documentation; Monte Carlo Solver — QuTiP 4.3 Documentation; Setting Options for the Dynamics Solvers — QuTiP 4.3 Documentation; Permutational Invariance — QuTiP 4.3 Documentation; Solving Problems with Time-dependent Hamiltonians — QuTiP 4.3 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex2.py; correlation_ex3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; ex_steady.pdf; ex_steady.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 4.3 Documentation; Basic Operations on Quantum Objects — QuTiP 4.3 Documentation; Plotting on the Bloch Sphere — QuTiP 4.3 Documentation; Quantum Optimal Control — QuTiP 4.3 Documentation; Two-time corre,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:29096,Usability,guid,guide-states-,29096,tion_ex2.py; correlation_ex3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; ex_steady.pdf; ex_steady.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 4.3 Documentation; Basic Operations on Quantum Objects — QuTiP 4.3 Documentation; Plotting on the Bloch Sphere — QuTiP 4.3 Documentation; Quantum Optimal Control — QuTiP 4.3 Documentation; Two-time correlation functions — QuTiP 4.3 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 4.3 Documentation; An Overview of the Eseries Class — QuTiP 4.3 Documentation; Guide Overview — QuTiP 4.3 Documentation; Parallel computation — QuTiP 4.3 Documentation; Generating Random Quantum States & Operators — QuTiP 4.3 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.3 Documentation; Modifying Internal QuTiP Settings — QuTiP 4.3 Documentation; Manipulating States and Operators — QuTiP 4.3 Documentation; guide-states-1.pdf; guide-states-1.py; Solving for Steady-State Solutions — QuTiP 4.3 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.3 Documentation; Visualization of quantum states and processes — QuTiP 4.3 Documentation. QuTiP: Quantum Toolbox in Python (4.3) — QuTiP 4.3 Documentation; Installation — QuTiP 4.3 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.3 Documentation; qutip.control.dynamics — QuTiP 4.3 Documentation; qutip.control.fidcomp — QuTiP 4.3 Documentation; qutip.control.optimizer — QuTiP 4.3 Documentation; qutip.control.optimresult — QuTiP 4.3 Documentation; qutip.control.propcomp — QuTiP 4.3 Documentation; qutip.control.pulsegen — QuTiP 4.3 Documentation; qutip.control.pulseoptim — QuTiP 4.3 Documentation; qutip.control.stats — QuTiP 4.3 Documentation; qutip.control.termcond — QuTiP 4.3 Documentation; qutip.control.tslotcomp — QuTiP 4.3 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.3 Documentation; qutip.,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:29116,Usability,guid,guide-states-,29116,x3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; ex_steady.pdf; ex_steady.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 4.3 Documentation; Basic Operations on Quantum Objects — QuTiP 4.3 Documentation; Plotting on the Bloch Sphere — QuTiP 4.3 Documentation; Quantum Optimal Control — QuTiP 4.3 Documentation; Two-time correlation functions — QuTiP 4.3 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 4.3 Documentation; An Overview of the Eseries Class — QuTiP 4.3 Documentation; Guide Overview — QuTiP 4.3 Documentation; Parallel computation — QuTiP 4.3 Documentation; Generating Random Quantum States & Operators — QuTiP 4.3 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.3 Documentation; Modifying Internal QuTiP Settings — QuTiP 4.3 Documentation; Manipulating States and Operators — QuTiP 4.3 Documentation; guide-states-1.pdf; guide-states-1.py; Solving for Steady-State Solutions — QuTiP 4.3 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.3 Documentation; Visualization of quantum states and processes — QuTiP 4.3 Documentation. QuTiP: Quantum Toolbox in Python (4.3) — QuTiP 4.3 Documentation; Installation — QuTiP 4.3 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.3 Documentation; qutip.control.dynamics — QuTiP 4.3 Documentation; qutip.control.fidcomp — QuTiP 4.3 Documentation; qutip.control.optimizer — QuTiP 4.3 Documentation; qutip.control.optimresult — QuTiP 4.3 Documentation; qutip.control.propcomp — QuTiP 4.3 Documentation; qutip.control.pulsegen — QuTiP 4.3 Documentation; qutip.control.pulseoptim — QuTiP 4.3 Documentation; qutip.control.stats — QuTiP 4.3 Documentation; qutip.control.termcond — QuTiP 4.3 Documentation; qutip.control.tslotcomp — QuTiP 4.3 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.3 Documentation; qutip.nonmarkov.memorycascade — ,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:34009,Usability,guid,guide,34009,lar-1.eot. lato-regular-1.eot; lato-regular.ttf; lato-regular.woff; lato-regular.woff2. /RobotoSlab; . roboto-slab-v7-bold.eot. roboto-slab-v7-bold.eot; roboto-slab-v7-bold-1.eot. roboto-slab-v7-bold-1.eot; roboto-slab-v7-bold.ttf; roboto-slab-v7-bold.woff; roboto-slab-v7-bold.woff2; roboto-slab-v7-regular.eot; roboto-slab-v7-regular.ttf; roboto-slab-v7-regular.woff; roboto-slab-v7-regular.woff2. fontawesome-webfont-1.eot; fontawesome-webfont.eot; fontawesome-webfont.svg; fontawesome-webfont.ttf; fontawesome-webfont.woff; fontawesome-webfont.woff2. /js; ; modernizr.min.js; theme.js. doctools.js; favicon.ico; jquery.js; pygments.css; searchtools.js; underscore.js. /4.4; . /apidoc; ; API documentation — QuTiP 4.4 Documentation; Classes — QuTiP 4.4 Documentation; Functions — QuTiP 4.4 Documentation. Bibliography — QuTiP 4.4 Documentation; Change Log — QuTiP 4.4 Documentation; Developers — QuTiP 4.4 Documentation; Frontmatter — QuTiP 4.4 Documentation; Index — QuTiP 4.4 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 4.4 Documentation; Dynamics Simulation Results — QuTiP 4.4 Documentation; Floquet Formalism — QuTiP 4.4 Documentation; Lindblad Master Equation Solver — QuTiP 4.4 Documentation; Monte Carlo Solver — QuTiP 4.4 Documentation; Setting Options for the Dynamics Solvers — QuTiP 4.4 Documentation; Stochastic Solver - Photocurrent — QuTiP 4.4 Documentation; Permutational Invariance — QuTiP 4.4 Documentation; Stochastic Solver — QuTiP 4.4 Documentation; Solving Problems with Time-dependent Hamiltonians — QuTiP 4.4 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex2.py; correlation_ex3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; ex_steady.pdf; ex_steady.py; floquet_ex1.py; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 4.4 Documentation; Basic Operations on Quantum Objects — QuTiP 4.4 Documentation; Plotting on the Bloch Sphere — QuTiP 4.4 Documenta,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:35603,Usability,guid,guide-states-,35603,ts; ; correlation_ex2.pdf; correlation_ex2.py; correlation_ex3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; ex_steady.pdf; ex_steady.py; floquet_ex1.py; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 4.4 Documentation; Basic Operations on Quantum Objects — QuTiP 4.4 Documentation; Plotting on the Bloch Sphere — QuTiP 4.4 Documentation; Quantum Optimal Control — QuTiP 4.4 Documentation; Two-time correlation functions — QuTiP 4.4 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 4.4 Documentation; An Overview of the Eseries Class — QuTiP 4.4 Documentation; Guide Overview — QuTiP 4.4 Documentation; Parallel computation — QuTiP 4.4 Documentation; Generating Random Quantum States & Operators — QuTiP 4.4 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.4 Documentation; Modifying Internal QuTiP Settings — QuTiP 4.4 Documentation; Manipulating States and Operators — QuTiP 4.4 Documentation; guide-states-1.pdf; guide-states-1.py; Solving for Steady-State Solutions — QuTiP 4.4 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.4 Documentation; Visualization of quantum states and processes — QuTiP 4.4 Documentation. QuTiP: Quantum Toolbox in Python (4.4) — QuTiP 4.4 Documentation; Installation — QuTiP 4.4 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.4 Documentation; qutip.control.dynamics — QuTiP 4.4 Documentation; qutip.control.fidcomp — QuTiP 4.4 Documentation; qutip.control.optimizer — QuTiP 4.4 Documentation; qutip.control.optimresult — QuTiP 4.4 Documentation; qutip.control.propcomp — QuTiP 4.4 Documentation; qutip.control.pulsegen — QuTiP 4.4 Documentation; qutip.control.pulseoptim — QuTiP 4.4 Documentation; qutip.control.stats — QuTiP 4.4 Documentation; qutip.control.termcond — QuTiP 4.4 Documentation; qutip.control.tslotcomp — QuTiP 4.4 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.4 Documentation; qutip.,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:35623,Usability,guid,guide-states-,35623, correlation_ex2.py; correlation_ex3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; ex_steady.pdf; ex_steady.py; floquet_ex1.py; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 4.4 Documentation; Basic Operations on Quantum Objects — QuTiP 4.4 Documentation; Plotting on the Bloch Sphere — QuTiP 4.4 Documentation; Quantum Optimal Control — QuTiP 4.4 Documentation; Two-time correlation functions — QuTiP 4.4 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 4.4 Documentation; An Overview of the Eseries Class — QuTiP 4.4 Documentation; Guide Overview — QuTiP 4.4 Documentation; Parallel computation — QuTiP 4.4 Documentation; Generating Random Quantum States & Operators — QuTiP 4.4 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.4 Documentation; Modifying Internal QuTiP Settings — QuTiP 4.4 Documentation; Manipulating States and Operators — QuTiP 4.4 Documentation; guide-states-1.pdf; guide-states-1.py; Solving for Steady-State Solutions — QuTiP 4.4 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.4 Documentation; Visualization of quantum states and processes — QuTiP 4.4 Documentation. QuTiP: Quantum Toolbox in Python (4.4) — QuTiP 4.4 Documentation; Installation — QuTiP 4.4 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.4 Documentation; qutip.control.dynamics — QuTiP 4.4 Documentation; qutip.control.fidcomp — QuTiP 4.4 Documentation; qutip.control.optimizer — QuTiP 4.4 Documentation; qutip.control.optimresult — QuTiP 4.4 Documentation; qutip.control.propcomp — QuTiP 4.4 Documentation; qutip.control.pulsegen — QuTiP 4.4 Documentation; qutip.control.pulseoptim — QuTiP 4.4 Documentation; qutip.control.stats — QuTiP 4.4 Documentation; qutip.control.termcond — QuTiP 4.4 Documentation; qutip.control.tslotcomp — QuTiP 4.4 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.4 Documentation; qutip.nonmarkov.memorycascade — ,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:41279,Usability,guid,guide,41279,. /apidoc; ; API documentation — QuTiP 4.5 Documentation; Classes — QuTiP 4.5 Documentation; Functions — QuTiP 4.5 Documentation. Bibliography — QuTiP 4.5 Documentation; Change Log — QuTiP 4.5 Documentation; Developers — QuTiP 4.5 Documentation. /downloads; . /0a0d7dafe3f05d5f557344a23a835b36; ; plot_qip_amplitude_noise.py. /14df9cb9ce9929475a42b569fbb148fc; ; plot_qip_intro_processor.ipynb. /59247c9cb8a48d534ebd46ff105c141b; ; plot_qip_amplitude_noise.ipynb. /839a90675d1beebb9439ea0d47dac946; ; plot_qip_relaxation.py. /e1a1bbebf99cf434ac461d7e6da91f40; ; qutip_tree.pdf. /e57ad33a2917887dba8bce16c8b8588d; ; plot_qip_relaxation.ipynb. /f96e7cc4c3405f73eeeff70f35cf5f6f; ; plot_qip_intro_processor.py. Frontmatter — QuTiP 4.5 Documentation. /gallery; . /qutip_examples; . /qip; ; Control Amplitude Noise — QuTiP 4.5 Documentation; Basic use of Processor — QuTiP 4.5 Documentation; T2 Relaxation — QuTiP 4.5 Documentation. Gallery — QuTiP 4.5 Documentation. Index — QuTiP 4.5 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 4.5 Documentation; Dynamics Simulation Results — QuTiP 4.5 Documentation; Floquet Formalism — QuTiP 4.5 Documentation; Lindblad Master Equation Solver — QuTiP 4.5 Documentation; Monte Carlo Solver — QuTiP 4.5 Documentation; Setting Options for the Dynamics Solvers — QuTiP 4.5 Documentation; Stochastic Solver - Photocurrent — QuTiP 4.5 Documentation; Permutational Invariance — QuTiP 4.5 Documentation; Stochastic Solver — QuTiP 4.5 Documentation; Solving Problems with Time-dependent Hamiltonians — QuTiP 4.5 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex2.py; correlation_ex3.pdf; correlation_ex3.py; correlation_ex4.pdf; correlation_ex4.py; ex_steady.pdf; ex_steady.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 4.5 Documentation; Basic Operations on Quantum Objects — QuTiP 4.5 Documentation; Plotting on the ,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:42965,Usability,guid,guide-states-,42965,elation_ex4.pdf; correlation_ex4.py; ex_steady.pdf; ex_steady.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 4.5 Documentation; Basic Operations on Quantum Objects — QuTiP 4.5 Documentation; Plotting on the Bloch Sphere — QuTiP 4.5 Documentation; Quantum Optimal Control — QuTiP 4.5 Documentation; Two-time correlation functions — QuTiP 4.5 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 4.5 Documentation; An Overview of the Eseries Class — QuTiP 4.5 Documentation; Guide Overview — QuTiP 4.5 Documentation; Parallel computation — QuTiP 4.5 Documentation; Quantum Information Processing — QuTiP 4.5 Documentation; Generating Random Quantum States & Operators — QuTiP 4.5 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.5 Documentation; Modifying Internal QuTiP Settings — QuTiP 4.5 Documentation; Manipulating States and Operators — QuTiP 4.5 Documentation; guide-states-1.pdf; guide-states-1.py; Solving for Steady-State Solutions — QuTiP 4.5 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.5 Documentation; Visualization of quantum states and processes — QuTiP 4.5 Documentation. QuTiP: Quantum Toolbox in Python (4.5) — QuTiP 4.5 Documentation; Installation — QuTiP 4.5 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.5 Documentation; qutip.control.dynamics — QuTiP 4.5 Documentation; qutip.control.fidcomp — QuTiP 4.5 Documentation; qutip.control.optimizer — QuTiP 4.5 Documentation; qutip.control.optimresult — QuTiP 4.5 Documentation; qutip.control.propcomp — QuTiP 4.5 Documentation; qutip.control.pulsegen — QuTiP 4.5 Documentation; qutip.control.pulseoptim — QuTiP 4.5 Documentation; qutip.control.stats — QuTiP 4.5 Documentation; qutip.control.termcond — QuTiP 4.5 Documentation; qutip.control.tslotcomp — QuTiP 4.5 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.5 Documentation; qutip.,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:42985,Usability,guid,guide-states-,42985,on_ex4.py; ex_steady.pdf; ex_steady.py; floquet_ex1.pdf; floquet_ex1.py; floquet_ex2.pdf; floquet_ex2.py; floquet_ex3.pdf; floquet_ex3.py; spectrum_ex1.pdf; spectrum_ex1.py. Users Guide — QuTiP 4.5 Documentation; Basic Operations on Quantum Objects — QuTiP 4.5 Documentation; Plotting on the Bloch Sphere — QuTiP 4.5 Documentation; Quantum Optimal Control — QuTiP 4.5 Documentation; Two-time correlation functions — QuTiP 4.5 Documentation; Time Evolution and Quantum System Dynamics — QuTiP 4.5 Documentation; An Overview of the Eseries Class — QuTiP 4.5 Documentation; Guide Overview — QuTiP 4.5 Documentation; Parallel computation — QuTiP 4.5 Documentation; Quantum Information Processing — QuTiP 4.5 Documentation; Generating Random Quantum States & Operators — QuTiP 4.5 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.5 Documentation; Modifying Internal QuTiP Settings — QuTiP 4.5 Documentation; Manipulating States and Operators — QuTiP 4.5 Documentation; guide-states-1.pdf; guide-states-1.py; Solving for Steady-State Solutions — QuTiP 4.5 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.5 Documentation; Visualization of quantum states and processes — QuTiP 4.5 Documentation. QuTiP: Quantum Toolbox in Python (4.5) — QuTiP 4.5 Documentation; Installation — QuTiP 4.5 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.5 Documentation; qutip.control.dynamics — QuTiP 4.5 Documentation; qutip.control.fidcomp — QuTiP 4.5 Documentation; qutip.control.optimizer — QuTiP 4.5 Documentation; qutip.control.optimresult — QuTiP 4.5 Documentation; qutip.control.propcomp — QuTiP 4.5 Documentation; qutip.control.pulsegen — QuTiP 4.5 Documentation; qutip.control.pulseoptim — QuTiP 4.5 Documentation; qutip.control.stats — QuTiP 4.5 Documentation; qutip.control.termcond — QuTiP 4.5 Documentation; qutip.control.tslotcomp — QuTiP 4.5 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.5 Documentation; qutip.nonmarkov.memorycascade — ,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:49637,Usability,guid,guide,49637,umentation; Working with the QuTiP Documentation — QuTiP 4.6 Documentation; docs-1.pdf; Ideas for future QuTiP development — QuTiP 4.6 Documentation; Release and Distribution — QuTiP 4.6 Documentation; QuTiP Development Roadmap — QuTiP 4.6 Documentation. /downloads; . /12a86e4dcaaba8c4a8de323bd441ab96; ; plot_qip_relaxation.py. /1b50abbe88595fe251e07102f532b361; ; plot_qip_amplitude_noise.ipynb. /3f58cb72e9b73bcbfbeb9e0f6960b60b; ; plot_qip_relaxation.ipynb. /5bc733f4cdb3729576a991efbdd8c026; ; plot_qip_intro_processor.ipynb. /7aaebc4b1d6f7b38aa6c893905ac98ef; ; plot_qip_intro_processor.py. /aacc19a817412ec042804206e9c23202; ; plot_qip_amplitude_noise.py. /e1a1bbebf99cf434ac461d7e6da91f40; ; qutip_tree.pdf. Frontmatter — QuTiP 4.6 Documentation. /gallery; . /build; . /qip; ; Control Amplitude Noise — QuTiP 4.6 Documentation; Basic use of Processor — QuTiP 4.6 Documentation; T2 Relaxation — QuTiP 4.6 Documentation. Gallery — QuTiP 4.6 Documentation. Index — QuTiP 4.6 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 4.6 Documentation; dynamics-bloch-redfield-3.pdf; dynamics-bloch-redfield-6.pdf; dynamics-bloch-redfield-8.pdf; Dynamics Simulation Results — QuTiP 4.6 Documentation; Floquet Formalism — QuTiP 4.6 Documentation; dynamics-floquet-1.pdf; dynamics-floquet-2.pdf; dynamics-floquet-3_00.pdf; dynamics-floquet-3_01.pdf; Lindblad Master Equation Solver — QuTiP 4.6 Documentation; dynamics-master-3.pdf; dynamics-master-5.pdf; dynamics-master-6.pdf; Monte Carlo Solver — QuTiP 4.6 Documentation; dynamics-monte-1_00.pdf; dynamics-monte-1_01.pdf; dynamics-monte-7.pdf; Setting Options for the Dynamics Solvers — QuTiP 4.6 Documentation; Stochastic Solver - Photocurrent — QuTiP 4.6 Documentation; Permutational Invariance — QuTiP 4.6 Documentation; Stochastic Solver — QuTiP 4.6 Documentation; dynamics-stochastic-1.pdf; Solving Problems with Time-dependent Hamiltonians — QuTiP 4.6 Documentation; dynamics-time-1.pdf; dynamics-time-10.pdf; dynamics-t,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:51506,Usability,guid,guide-bloch-,51506,pdf; Solving Problems with Time-dependent Hamiltonians — QuTiP 4.6 Documentation; dynamics-time-1.pdf; dynamics-time-10.pdf; dynamics-time-11.pdf; dynamics-time-12.pdf; dynamics-time-13_00.pdf; dynamics-time-13_01.pdf; dynamics-time-14.pdf; dynamics-time-2.pdf; dynamics-time-3.pdf; dynamics-time-4.pdf; dynamics-time-5.pdf; dynamics-time-6.pdf; dynamics-time-7.pdf; dynamics-time-8.pdf; dynamics-time-9.pdf. /qip; ; Quantum Information Processing — QuTiP 4.6 Documentation; Pulse-level circuit simulation — QuTiP 4.6 Documentation; qip-processor-1.pdf; qip-processor-2.pdf; qip-processor-3_00.pdf; qip-processor-3_01.pdf; Operator-level circuit simulation — QuTiP 4.6 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex3.pdf; correlation_ex4.pdf; ex_steady.pdf; floquet_ex1.pdf; floquet_ex2.pdf; floquet_ex3.pdf; spectrum_ex1.pdf. Users Guide — QuTiP 4.6 Documentation; Basic Operations on Quantum Objects — QuTiP 4.6 Documentation; Plotting on the Bloch Sphere — QuTiP 4.6 Documentation; guide-bloch-10.pdf; guide-bloch-11.pdf; guide-bloch-12.pdf; guide-bloch-13.pdf; guide-bloch-2.pdf; guide-bloch-3.pdf; guide-bloch-4.pdf; guide-bloch-5.pdf; guide-bloch-6.pdf; guide-bloch-7.pdf; guide-bloch-8.pdf; guide-bloch-9.pdf; Quantum Optimal Control — QuTiP 4.6 Documentation; Two-time correlation functions — QuTiP 4.6 Documentation; guide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solut,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:51526,Usability,guid,guide-bloch-,51526, Time-dependent Hamiltonians — QuTiP 4.6 Documentation; dynamics-time-1.pdf; dynamics-time-10.pdf; dynamics-time-11.pdf; dynamics-time-12.pdf; dynamics-time-13_00.pdf; dynamics-time-13_01.pdf; dynamics-time-14.pdf; dynamics-time-2.pdf; dynamics-time-3.pdf; dynamics-time-4.pdf; dynamics-time-5.pdf; dynamics-time-6.pdf; dynamics-time-7.pdf; dynamics-time-8.pdf; dynamics-time-9.pdf. /qip; ; Quantum Information Processing — QuTiP 4.6 Documentation; Pulse-level circuit simulation — QuTiP 4.6 Documentation; qip-processor-1.pdf; qip-processor-2.pdf; qip-processor-3_00.pdf; qip-processor-3_01.pdf; Operator-level circuit simulation — QuTiP 4.6 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex3.pdf; correlation_ex4.pdf; ex_steady.pdf; floquet_ex1.pdf; floquet_ex2.pdf; floquet_ex3.pdf; spectrum_ex1.pdf. Users Guide — QuTiP 4.6 Documentation; Basic Operations on Quantum Objects — QuTiP 4.6 Documentation; Plotting on the Bloch Sphere — QuTiP 4.6 Documentation; guide-bloch-10.pdf; guide-bloch-11.pdf; guide-bloch-12.pdf; guide-bloch-13.pdf; guide-bloch-2.pdf; guide-bloch-3.pdf; guide-bloch-4.pdf; guide-bloch-5.pdf; guide-bloch-6.pdf; guide-bloch-7.pdf; guide-bloch-8.pdf; guide-bloch-9.pdf; Quantum Optimal Control — QuTiP 4.6 Documentation; Two-time correlation functions — QuTiP 4.6 Documentation; guide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documenta,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:51546,Usability,guid,guide-bloch-,51546,ltonians — QuTiP 4.6 Documentation; dynamics-time-1.pdf; dynamics-time-10.pdf; dynamics-time-11.pdf; dynamics-time-12.pdf; dynamics-time-13_00.pdf; dynamics-time-13_01.pdf; dynamics-time-14.pdf; dynamics-time-2.pdf; dynamics-time-3.pdf; dynamics-time-4.pdf; dynamics-time-5.pdf; dynamics-time-6.pdf; dynamics-time-7.pdf; dynamics-time-8.pdf; dynamics-time-9.pdf. /qip; ; Quantum Information Processing — QuTiP 4.6 Documentation; Pulse-level circuit simulation — QuTiP 4.6 Documentation; qip-processor-1.pdf; qip-processor-2.pdf; qip-processor-3_00.pdf; qip-processor-3_01.pdf; Operator-level circuit simulation — QuTiP 4.6 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex3.pdf; correlation_ex4.pdf; ex_steady.pdf; floquet_ex1.pdf; floquet_ex2.pdf; floquet_ex3.pdf; spectrum_ex1.pdf. Users Guide — QuTiP 4.6 Documentation; Basic Operations on Quantum Objects — QuTiP 4.6 Documentation; Plotting on the Bloch Sphere — QuTiP 4.6 Documentation; guide-bloch-10.pdf; guide-bloch-11.pdf; guide-bloch-12.pdf; guide-bloch-13.pdf; guide-bloch-2.pdf; guide-bloch-3.pdf; guide-bloch-4.pdf; guide-bloch-5.pdf; guide-bloch-6.pdf; guide-bloch-7.pdf; guide-bloch-8.pdf; guide-bloch-9.pdf; Quantum Optimal Control — QuTiP 4.6 Documentation; Two-time correlation functions — QuTiP 4.6 Documentation; guide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor P,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:51566,Usability,guid,guide-bloch-,51566, Documentation; dynamics-time-1.pdf; dynamics-time-10.pdf; dynamics-time-11.pdf; dynamics-time-12.pdf; dynamics-time-13_00.pdf; dynamics-time-13_01.pdf; dynamics-time-14.pdf; dynamics-time-2.pdf; dynamics-time-3.pdf; dynamics-time-4.pdf; dynamics-time-5.pdf; dynamics-time-6.pdf; dynamics-time-7.pdf; dynamics-time-8.pdf; dynamics-time-9.pdf. /qip; ; Quantum Information Processing — QuTiP 4.6 Documentation; Pulse-level circuit simulation — QuTiP 4.6 Documentation; qip-processor-1.pdf; qip-processor-2.pdf; qip-processor-3_00.pdf; qip-processor-3_01.pdf; Operator-level circuit simulation — QuTiP 4.6 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex3.pdf; correlation_ex4.pdf; ex_steady.pdf; floquet_ex1.pdf; floquet_ex2.pdf; floquet_ex3.pdf; spectrum_ex1.pdf. Users Guide — QuTiP 4.6 Documentation; Basic Operations on Quantum Objects — QuTiP 4.6 Documentation; Plotting on the Bloch Sphere — QuTiP 4.6 Documentation; guide-bloch-10.pdf; guide-bloch-11.pdf; guide-bloch-12.pdf; guide-bloch-13.pdf; guide-bloch-2.pdf; guide-bloch-3.pdf; guide-bloch-4.pdf; guide-bloch-5.pdf; guide-bloch-6.pdf; guide-bloch-7.pdf; guide-bloch-8.pdf; guide-bloch-9.pdf; Quantum Optimal Control — QuTiP 4.6 Documentation; Two-time correlation functions — QuTiP 4.6 Documentation; guide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor Products and Partial ,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:51586,Usability,guid,guide-bloch-,51586,amics-time-1.pdf; dynamics-time-10.pdf; dynamics-time-11.pdf; dynamics-time-12.pdf; dynamics-time-13_00.pdf; dynamics-time-13_01.pdf; dynamics-time-14.pdf; dynamics-time-2.pdf; dynamics-time-3.pdf; dynamics-time-4.pdf; dynamics-time-5.pdf; dynamics-time-6.pdf; dynamics-time-7.pdf; dynamics-time-8.pdf; dynamics-time-9.pdf. /qip; ; Quantum Information Processing — QuTiP 4.6 Documentation; Pulse-level circuit simulation — QuTiP 4.6 Documentation; qip-processor-1.pdf; qip-processor-2.pdf; qip-processor-3_00.pdf; qip-processor-3_01.pdf; Operator-level circuit simulation — QuTiP 4.6 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex3.pdf; correlation_ex4.pdf; ex_steady.pdf; floquet_ex1.pdf; floquet_ex2.pdf; floquet_ex3.pdf; spectrum_ex1.pdf. Users Guide — QuTiP 4.6 Documentation; Basic Operations on Quantum Objects — QuTiP 4.6 Documentation; Plotting on the Bloch Sphere — QuTiP 4.6 Documentation; guide-bloch-10.pdf; guide-bloch-11.pdf; guide-bloch-12.pdf; guide-bloch-13.pdf; guide-bloch-2.pdf; guide-bloch-3.pdf; guide-bloch-4.pdf; guide-bloch-5.pdf; guide-bloch-6.pdf; guide-bloch-7.pdf; guide-bloch-8.pdf; guide-bloch-9.pdf; Quantum Optimal Control — QuTiP 4.6 Documentation; Two-time correlation functions — QuTiP 4.6 Documentation; guide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.6 D,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:51605,Usability,guid,guide-bloch-,51605,ynamics-time-10.pdf; dynamics-time-11.pdf; dynamics-time-12.pdf; dynamics-time-13_00.pdf; dynamics-time-13_01.pdf; dynamics-time-14.pdf; dynamics-time-2.pdf; dynamics-time-3.pdf; dynamics-time-4.pdf; dynamics-time-5.pdf; dynamics-time-6.pdf; dynamics-time-7.pdf; dynamics-time-8.pdf; dynamics-time-9.pdf. /qip; ; Quantum Information Processing — QuTiP 4.6 Documentation; Pulse-level circuit simulation — QuTiP 4.6 Documentation; qip-processor-1.pdf; qip-processor-2.pdf; qip-processor-3_00.pdf; qip-processor-3_01.pdf; Operator-level circuit simulation — QuTiP 4.6 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex3.pdf; correlation_ex4.pdf; ex_steady.pdf; floquet_ex1.pdf; floquet_ex2.pdf; floquet_ex3.pdf; spectrum_ex1.pdf. Users Guide — QuTiP 4.6 Documentation; Basic Operations on Quantum Objects — QuTiP 4.6 Documentation; Plotting on the Bloch Sphere — QuTiP 4.6 Documentation; guide-bloch-10.pdf; guide-bloch-11.pdf; guide-bloch-12.pdf; guide-bloch-13.pdf; guide-bloch-2.pdf; guide-bloch-3.pdf; guide-bloch-4.pdf; guide-bloch-5.pdf; guide-bloch-6.pdf; guide-bloch-7.pdf; guide-bloch-8.pdf; guide-bloch-9.pdf; Quantum Optimal Control — QuTiP 4.6 Documentation; Two-time correlation functions — QuTiP 4.6 Documentation; guide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.6 Documentation; Visua,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:51624,Usability,guid,guide-bloch-,51624,; dynamics-time-11.pdf; dynamics-time-12.pdf; dynamics-time-13_00.pdf; dynamics-time-13_01.pdf; dynamics-time-14.pdf; dynamics-time-2.pdf; dynamics-time-3.pdf; dynamics-time-4.pdf; dynamics-time-5.pdf; dynamics-time-6.pdf; dynamics-time-7.pdf; dynamics-time-8.pdf; dynamics-time-9.pdf. /qip; ; Quantum Information Processing — QuTiP 4.6 Documentation; Pulse-level circuit simulation — QuTiP 4.6 Documentation; qip-processor-1.pdf; qip-processor-2.pdf; qip-processor-3_00.pdf; qip-processor-3_01.pdf; Operator-level circuit simulation — QuTiP 4.6 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex3.pdf; correlation_ex4.pdf; ex_steady.pdf; floquet_ex1.pdf; floquet_ex2.pdf; floquet_ex3.pdf; spectrum_ex1.pdf. Users Guide — QuTiP 4.6 Documentation; Basic Operations on Quantum Objects — QuTiP 4.6 Documentation; Plotting on the Bloch Sphere — QuTiP 4.6 Documentation; guide-bloch-10.pdf; guide-bloch-11.pdf; guide-bloch-12.pdf; guide-bloch-13.pdf; guide-bloch-2.pdf; guide-bloch-3.pdf; guide-bloch-4.pdf; guide-bloch-5.pdf; guide-bloch-6.pdf; guide-bloch-7.pdf; guide-bloch-8.pdf; guide-bloch-9.pdf; Quantum Optimal Control — QuTiP 4.6 Documentation; Two-time correlation functions — QuTiP 4.6 Documentation; guide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.6 Documentation; Visualization of quantum,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:51643,Usability,guid,guide-bloch-,51643,pdf; dynamics-time-12.pdf; dynamics-time-13_00.pdf; dynamics-time-13_01.pdf; dynamics-time-14.pdf; dynamics-time-2.pdf; dynamics-time-3.pdf; dynamics-time-4.pdf; dynamics-time-5.pdf; dynamics-time-6.pdf; dynamics-time-7.pdf; dynamics-time-8.pdf; dynamics-time-9.pdf. /qip; ; Quantum Information Processing — QuTiP 4.6 Documentation; Pulse-level circuit simulation — QuTiP 4.6 Documentation; qip-processor-1.pdf; qip-processor-2.pdf; qip-processor-3_00.pdf; qip-processor-3_01.pdf; Operator-level circuit simulation — QuTiP 4.6 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex3.pdf; correlation_ex4.pdf; ex_steady.pdf; floquet_ex1.pdf; floquet_ex2.pdf; floquet_ex3.pdf; spectrum_ex1.pdf. Users Guide — QuTiP 4.6 Documentation; Basic Operations on Quantum Objects — QuTiP 4.6 Documentation; Plotting on the Bloch Sphere — QuTiP 4.6 Documentation; guide-bloch-10.pdf; guide-bloch-11.pdf; guide-bloch-12.pdf; guide-bloch-13.pdf; guide-bloch-2.pdf; guide-bloch-3.pdf; guide-bloch-4.pdf; guide-bloch-5.pdf; guide-bloch-6.pdf; guide-bloch-7.pdf; guide-bloch-8.pdf; guide-bloch-9.pdf; Quantum Optimal Control — QuTiP 4.6 Documentation; Two-time correlation functions — QuTiP 4.6 Documentation; guide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.6 Documentation; Visualization of quantum states and process,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:51662,Usability,guid,guide-bloch-,51662,12.pdf; dynamics-time-13_00.pdf; dynamics-time-13_01.pdf; dynamics-time-14.pdf; dynamics-time-2.pdf; dynamics-time-3.pdf; dynamics-time-4.pdf; dynamics-time-5.pdf; dynamics-time-6.pdf; dynamics-time-7.pdf; dynamics-time-8.pdf; dynamics-time-9.pdf. /qip; ; Quantum Information Processing — QuTiP 4.6 Documentation; Pulse-level circuit simulation — QuTiP 4.6 Documentation; qip-processor-1.pdf; qip-processor-2.pdf; qip-processor-3_00.pdf; qip-processor-3_01.pdf; Operator-level circuit simulation — QuTiP 4.6 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex3.pdf; correlation_ex4.pdf; ex_steady.pdf; floquet_ex1.pdf; floquet_ex2.pdf; floquet_ex3.pdf; spectrum_ex1.pdf. Users Guide — QuTiP 4.6 Documentation; Basic Operations on Quantum Objects — QuTiP 4.6 Documentation; Plotting on the Bloch Sphere — QuTiP 4.6 Documentation; guide-bloch-10.pdf; guide-bloch-11.pdf; guide-bloch-12.pdf; guide-bloch-13.pdf; guide-bloch-2.pdf; guide-bloch-3.pdf; guide-bloch-4.pdf; guide-bloch-5.pdf; guide-bloch-6.pdf; guide-bloch-7.pdf; guide-bloch-8.pdf; guide-bloch-9.pdf; Quantum Optimal Control — QuTiP 4.6 Documentation; Two-time correlation functions — QuTiP 4.6 Documentation; guide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.6 Documentation; Visualization of quantum states and processes — QuTiP 4.6 Docu,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:51681,Usability,guid,guide-bloch-,51681,me-13_00.pdf; dynamics-time-13_01.pdf; dynamics-time-14.pdf; dynamics-time-2.pdf; dynamics-time-3.pdf; dynamics-time-4.pdf; dynamics-time-5.pdf; dynamics-time-6.pdf; dynamics-time-7.pdf; dynamics-time-8.pdf; dynamics-time-9.pdf. /qip; ; Quantum Information Processing — QuTiP 4.6 Documentation; Pulse-level circuit simulation — QuTiP 4.6 Documentation; qip-processor-1.pdf; qip-processor-2.pdf; qip-processor-3_00.pdf; qip-processor-3_01.pdf; Operator-level circuit simulation — QuTiP 4.6 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex3.pdf; correlation_ex4.pdf; ex_steady.pdf; floquet_ex1.pdf; floquet_ex2.pdf; floquet_ex3.pdf; spectrum_ex1.pdf. Users Guide — QuTiP 4.6 Documentation; Basic Operations on Quantum Objects — QuTiP 4.6 Documentation; Plotting on the Bloch Sphere — QuTiP 4.6 Documentation; guide-bloch-10.pdf; guide-bloch-11.pdf; guide-bloch-12.pdf; guide-bloch-13.pdf; guide-bloch-2.pdf; guide-bloch-3.pdf; guide-bloch-4.pdf; guide-bloch-5.pdf; guide-bloch-6.pdf; guide-bloch-7.pdf; guide-bloch-8.pdf; guide-bloch-9.pdf; Quantum Optimal Control — QuTiP 4.6 Documentation; Two-time correlation functions — QuTiP 4.6 Documentation; guide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.6 Documentation; Visualization of quantum states and processes — QuTiP 4.6 Documentation; guide-vi,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:51700,Usability,guid,guide-bloch-,51700,ics-time-13_01.pdf; dynamics-time-14.pdf; dynamics-time-2.pdf; dynamics-time-3.pdf; dynamics-time-4.pdf; dynamics-time-5.pdf; dynamics-time-6.pdf; dynamics-time-7.pdf; dynamics-time-8.pdf; dynamics-time-9.pdf. /qip; ; Quantum Information Processing — QuTiP 4.6 Documentation; Pulse-level circuit simulation — QuTiP 4.6 Documentation; qip-processor-1.pdf; qip-processor-2.pdf; qip-processor-3_00.pdf; qip-processor-3_01.pdf; Operator-level circuit simulation — QuTiP 4.6 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex3.pdf; correlation_ex4.pdf; ex_steady.pdf; floquet_ex1.pdf; floquet_ex2.pdf; floquet_ex3.pdf; spectrum_ex1.pdf. Users Guide — QuTiP 4.6 Documentation; Basic Operations on Quantum Objects — QuTiP 4.6 Documentation; Plotting on the Bloch Sphere — QuTiP 4.6 Documentation; guide-bloch-10.pdf; guide-bloch-11.pdf; guide-bloch-12.pdf; guide-bloch-13.pdf; guide-bloch-2.pdf; guide-bloch-3.pdf; guide-bloch-4.pdf; guide-bloch-5.pdf; guide-bloch-6.pdf; guide-bloch-7.pdf; guide-bloch-8.pdf; guide-bloch-9.pdf; Quantum Optimal Control — QuTiP 4.6 Documentation; Two-time correlation functions — QuTiP 4.6 Documentation; guide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.6 Documentation; Visualization of quantum states and processes — QuTiP 4.6 Documentation; guide-visualization-13.pdf;,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:51719,Usability,guid,guide-bloch-,51719, dynamics-time-14.pdf; dynamics-time-2.pdf; dynamics-time-3.pdf; dynamics-time-4.pdf; dynamics-time-5.pdf; dynamics-time-6.pdf; dynamics-time-7.pdf; dynamics-time-8.pdf; dynamics-time-9.pdf. /qip; ; Quantum Information Processing — QuTiP 4.6 Documentation; Pulse-level circuit simulation — QuTiP 4.6 Documentation; qip-processor-1.pdf; qip-processor-2.pdf; qip-processor-3_00.pdf; qip-processor-3_01.pdf; Operator-level circuit simulation — QuTiP 4.6 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex3.pdf; correlation_ex4.pdf; ex_steady.pdf; floquet_ex1.pdf; floquet_ex2.pdf; floquet_ex3.pdf; spectrum_ex1.pdf. Users Guide — QuTiP 4.6 Documentation; Basic Operations on Quantum Objects — QuTiP 4.6 Documentation; Plotting on the Bloch Sphere — QuTiP 4.6 Documentation; guide-bloch-10.pdf; guide-bloch-11.pdf; guide-bloch-12.pdf; guide-bloch-13.pdf; guide-bloch-2.pdf; guide-bloch-3.pdf; guide-bloch-4.pdf; guide-bloch-5.pdf; guide-bloch-6.pdf; guide-bloch-7.pdf; guide-bloch-8.pdf; guide-bloch-9.pdf; Quantum Optimal Control — QuTiP 4.6 Documentation; Two-time correlation functions — QuTiP 4.6 Documentation; guide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.6 Documentation; Visualization of quantum states and processes — QuTiP 4.6 Documentation; guide-visualization-13.pdf; guide-visualizatio,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:51847,Usability,guid,guide-correlation-,51847, dynamics-time-7.pdf; dynamics-time-8.pdf; dynamics-time-9.pdf. /qip; ; Quantum Information Processing — QuTiP 4.6 Documentation; Pulse-level circuit simulation — QuTiP 4.6 Documentation; qip-processor-1.pdf; qip-processor-2.pdf; qip-processor-3_00.pdf; qip-processor-3_01.pdf; Operator-level circuit simulation — QuTiP 4.6 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex3.pdf; correlation_ex4.pdf; ex_steady.pdf; floquet_ex1.pdf; floquet_ex2.pdf; floquet_ex3.pdf; spectrum_ex1.pdf. Users Guide — QuTiP 4.6 Documentation; Basic Operations on Quantum Objects — QuTiP 4.6 Documentation; Plotting on the Bloch Sphere — QuTiP 4.6 Documentation; guide-bloch-10.pdf; guide-bloch-11.pdf; guide-bloch-12.pdf; guide-bloch-13.pdf; guide-bloch-2.pdf; guide-bloch-3.pdf; guide-bloch-4.pdf; guide-bloch-5.pdf; guide-bloch-6.pdf; guide-bloch-7.pdf; guide-bloch-8.pdf; guide-bloch-9.pdf; Quantum Optimal Control — QuTiP 4.6 Documentation; Two-time correlation functions — QuTiP 4.6 Documentation; guide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.6 Documentation; Visualization of quantum states and processes — QuTiP 4.6 Documentation; guide-visualization-13.pdf; guide-visualization-3.pdf; guide-visualization-4.pdf; guide-visualization-5.pdf; guide-visualization-6.pdf; guide-visualization-7.pdf; guide-vis,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:51875,Usability,guid,guide-correlation-,51875,e-8.pdf; dynamics-time-9.pdf. /qip; ; Quantum Information Processing — QuTiP 4.6 Documentation; Pulse-level circuit simulation — QuTiP 4.6 Documentation; qip-processor-1.pdf; qip-processor-2.pdf; qip-processor-3_00.pdf; qip-processor-3_01.pdf; Operator-level circuit simulation — QuTiP 4.6 Documentation. /scripts; ; correlation_ex2.pdf; correlation_ex3.pdf; correlation_ex4.pdf; ex_steady.pdf; floquet_ex1.pdf; floquet_ex2.pdf; floquet_ex3.pdf; spectrum_ex1.pdf. Users Guide — QuTiP 4.6 Documentation; Basic Operations on Quantum Objects — QuTiP 4.6 Documentation; Plotting on the Bloch Sphere — QuTiP 4.6 Documentation; guide-bloch-10.pdf; guide-bloch-11.pdf; guide-bloch-12.pdf; guide-bloch-13.pdf; guide-bloch-2.pdf; guide-bloch-3.pdf; guide-bloch-4.pdf; guide-bloch-5.pdf; guide-bloch-6.pdf; guide-bloch-7.pdf; guide-bloch-8.pdf; guide-bloch-9.pdf; Quantum Optimal Control — QuTiP 4.6 Documentation; Two-time correlation functions — QuTiP 4.6 Documentation; guide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.6 Documentation; Visualization of quantum states and processes — QuTiP 4.6 Documentation; guide-visualization-13.pdf; guide-visualization-3.pdf; guide-visualization-4.pdf; guide-visualization-5.pdf; guide-visualization-6.pdf; guide-visualization-7.pdf; guide-visualization-8.pdf; guide-visualizat,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:52313,Usability,guid,guide-saving-,52313, floquet_ex3.pdf; spectrum_ex1.pdf. Users Guide — QuTiP 4.6 Documentation; Basic Operations on Quantum Objects — QuTiP 4.6 Documentation; Plotting on the Bloch Sphere — QuTiP 4.6 Documentation; guide-bloch-10.pdf; guide-bloch-11.pdf; guide-bloch-12.pdf; guide-bloch-13.pdf; guide-bloch-2.pdf; guide-bloch-3.pdf; guide-bloch-4.pdf; guide-bloch-5.pdf; guide-bloch-6.pdf; guide-bloch-7.pdf; guide-bloch-8.pdf; guide-bloch-9.pdf; Quantum Optimal Control — QuTiP 4.6 Documentation; Two-time correlation functions — QuTiP 4.6 Documentation; guide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.6 Documentation; Visualization of quantum states and processes — QuTiP 4.6 Documentation; guide-visualization-13.pdf; guide-visualization-3.pdf; guide-visualization-4.pdf; guide-visualization-5.pdf; guide-visualization-6.pdf; guide-visualization-7.pdf; guide-visualization-8.pdf; guide-visualization-9.pdf. QuTiP: Quantum Toolbox in Python — QuTiP 4.6 Documentation; Installation — QuTiP 4.6 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.6 Documentation; qutip.control.dynamics — QuTiP 4.6 Documentation; qutip.control.fidcomp — QuTiP 4.6 Documentation; qutip.control.optimizer — QuTiP 4.6 Documentation; qutip.control.optimresult — QuTiP 4.6 Documentation; qutip.control.propcomp — QuTiP 4.6,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:52455,Usability,guid,guide-states-,52455,ting on the Bloch Sphere — QuTiP 4.6 Documentation; guide-bloch-10.pdf; guide-bloch-11.pdf; guide-bloch-12.pdf; guide-bloch-13.pdf; guide-bloch-2.pdf; guide-bloch-3.pdf; guide-bloch-4.pdf; guide-bloch-5.pdf; guide-bloch-6.pdf; guide-bloch-7.pdf; guide-bloch-8.pdf; guide-bloch-9.pdf; Quantum Optimal Control — QuTiP 4.6 Documentation; Two-time correlation functions — QuTiP 4.6 Documentation; guide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.6 Documentation; Visualization of quantum states and processes — QuTiP 4.6 Documentation; guide-visualization-13.pdf; guide-visualization-3.pdf; guide-visualization-4.pdf; guide-visualization-5.pdf; guide-visualization-6.pdf; guide-visualization-7.pdf; guide-visualization-8.pdf; guide-visualization-9.pdf. QuTiP: Quantum Toolbox in Python — QuTiP 4.6 Documentation; Installation — QuTiP 4.6 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.6 Documentation; qutip.control.dynamics — QuTiP 4.6 Documentation; qutip.control.fidcomp — QuTiP 4.6 Documentation; qutip.control.optimizer — QuTiP 4.6 Documentation; qutip.control.optimresult — QuTiP 4.6 Documentation; qutip.control.propcomp — QuTiP 4.6 Documentation; qutip.control.pulsegen — QuTiP 4.6 Documentation; qutip.control.pulseoptim — QuTiP 4.6 Documentation; qutip.control.stats — Qu,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:52678,Usability,guid,guide-visualization-,52678,guide-bloch-7.pdf; guide-bloch-8.pdf; guide-bloch-9.pdf; Quantum Optimal Control — QuTiP 4.6 Documentation; Two-time correlation functions — QuTiP 4.6 Documentation; guide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.6 Documentation; Visualization of quantum states and processes — QuTiP 4.6 Documentation; guide-visualization-13.pdf; guide-visualization-3.pdf; guide-visualization-4.pdf; guide-visualization-5.pdf; guide-visualization-6.pdf; guide-visualization-7.pdf; guide-visualization-8.pdf; guide-visualization-9.pdf. QuTiP: Quantum Toolbox in Python — QuTiP 4.6 Documentation; Installation — QuTiP 4.6 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.6 Documentation; qutip.control.dynamics — QuTiP 4.6 Documentation; qutip.control.fidcomp — QuTiP 4.6 Documentation; qutip.control.optimizer — QuTiP 4.6 Documentation; qutip.control.optimresult — QuTiP 4.6 Documentation; qutip.control.propcomp — QuTiP 4.6 Documentation; qutip.control.pulsegen — QuTiP 4.6 Documentation; qutip.control.pulseoptim — QuTiP 4.6 Documentation; qutip.control.stats — QuTiP 4.6 Documentation; qutip.control.termcond — QuTiP 4.6 Documentation; qutip.control.tslotcomp — QuTiP 4.6 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.6 Documentation; qutip.nonmarkov.memorycascade — QuTiP 4.6,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:52706,Usability,guid,guide-visualization-,52706,pdf; guide-bloch-9.pdf; Quantum Optimal Control — QuTiP 4.6 Documentation; Two-time correlation functions — QuTiP 4.6 Documentation; guide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.6 Documentation; Visualization of quantum states and processes — QuTiP 4.6 Documentation; guide-visualization-13.pdf; guide-visualization-3.pdf; guide-visualization-4.pdf; guide-visualization-5.pdf; guide-visualization-6.pdf; guide-visualization-7.pdf; guide-visualization-8.pdf; guide-visualization-9.pdf. QuTiP: Quantum Toolbox in Python — QuTiP 4.6 Documentation; Installation — QuTiP 4.6 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.6 Documentation; qutip.control.dynamics — QuTiP 4.6 Documentation; qutip.control.fidcomp — QuTiP 4.6 Documentation; qutip.control.optimizer — QuTiP 4.6 Documentation; qutip.control.optimresult — QuTiP 4.6 Documentation; qutip.control.propcomp — QuTiP 4.6 Documentation; qutip.control.pulsegen — QuTiP 4.6 Documentation; qutip.control.pulseoptim — QuTiP 4.6 Documentation; qutip.control.stats — QuTiP 4.6 Documentation; qutip.control.termcond — QuTiP 4.6 Documentation; qutip.control.tslotcomp — QuTiP 4.6 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.6 Documentation; qutip.nonmarkov.memorycascade — QuTiP 4.6 Documentation; qutip.nonmarkov.tr,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:52733,Usability,guid,guide-visualization-,52733,ntum Optimal Control — QuTiP 4.6 Documentation; Two-time correlation functions — QuTiP 4.6 Documentation; guide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.6 Documentation; Visualization of quantum states and processes — QuTiP 4.6 Documentation; guide-visualization-13.pdf; guide-visualization-3.pdf; guide-visualization-4.pdf; guide-visualization-5.pdf; guide-visualization-6.pdf; guide-visualization-7.pdf; guide-visualization-8.pdf; guide-visualization-9.pdf. QuTiP: Quantum Toolbox in Python — QuTiP 4.6 Documentation; Installation — QuTiP 4.6 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.6 Documentation; qutip.control.dynamics — QuTiP 4.6 Documentation; qutip.control.fidcomp — QuTiP 4.6 Documentation; qutip.control.optimizer — QuTiP 4.6 Documentation; qutip.control.optimresult — QuTiP 4.6 Documentation; qutip.control.propcomp — QuTiP 4.6 Documentation; qutip.control.pulsegen — QuTiP 4.6 Documentation; qutip.control.pulseoptim — QuTiP 4.6 Documentation; qutip.control.stats — QuTiP 4.6 Documentation; qutip.control.termcond — QuTiP 4.6 Documentation; qutip.control.tslotcomp — QuTiP 4.6 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.6 Documentation; qutip.nonmarkov.memorycascade — QuTiP 4.6 Documentation; qutip.nonmarkov.transfertensor — QuTiP 4.6 Do,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:52760,Usability,guid,guide-visualization-,52760,P 4.6 Documentation; Two-time correlation functions — QuTiP 4.6 Documentation; guide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.6 Documentation; Visualization of quantum states and processes — QuTiP 4.6 Documentation; guide-visualization-13.pdf; guide-visualization-3.pdf; guide-visualization-4.pdf; guide-visualization-5.pdf; guide-visualization-6.pdf; guide-visualization-7.pdf; guide-visualization-8.pdf; guide-visualization-9.pdf. QuTiP: Quantum Toolbox in Python — QuTiP 4.6 Documentation; Installation — QuTiP 4.6 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.6 Documentation; qutip.control.dynamics — QuTiP 4.6 Documentation; qutip.control.fidcomp — QuTiP 4.6 Documentation; qutip.control.optimizer — QuTiP 4.6 Documentation; qutip.control.optimresult — QuTiP 4.6 Documentation; qutip.control.propcomp — QuTiP 4.6 Documentation; qutip.control.pulsegen — QuTiP 4.6 Documentation; qutip.control.pulseoptim — QuTiP 4.6 Documentation; qutip.control.stats — QuTiP 4.6 Documentation; qutip.control.termcond — QuTiP 4.6 Documentation; qutip.control.tslotcomp — QuTiP 4.6 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.6 Documentation; qutip.nonmarkov.memorycascade — QuTiP 4.6 Documentation; qutip.nonmarkov.transfertensor — QuTiP 4.6 Documentation. /qip; . /algor,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:52787,Usability,guid,guide-visualization-,52787,me correlation functions — QuTiP 4.6 Documentation; guide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.6 Documentation; Visualization of quantum states and processes — QuTiP 4.6 Documentation; guide-visualization-13.pdf; guide-visualization-3.pdf; guide-visualization-4.pdf; guide-visualization-5.pdf; guide-visualization-6.pdf; guide-visualization-7.pdf; guide-visualization-8.pdf; guide-visualization-9.pdf. QuTiP: Quantum Toolbox in Python — QuTiP 4.6 Documentation; Installation — QuTiP 4.6 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.6 Documentation; qutip.control.dynamics — QuTiP 4.6 Documentation; qutip.control.fidcomp — QuTiP 4.6 Documentation; qutip.control.optimizer — QuTiP 4.6 Documentation; qutip.control.optimresult — QuTiP 4.6 Documentation; qutip.control.propcomp — QuTiP 4.6 Documentation; qutip.control.pulsegen — QuTiP 4.6 Documentation; qutip.control.pulseoptim — QuTiP 4.6 Documentation; qutip.control.stats — QuTiP 4.6 Documentation; qutip.control.termcond — QuTiP 4.6 Documentation; qutip.control.tslotcomp — QuTiP 4.6 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.6 Documentation; qutip.nonmarkov.memorycascade — QuTiP 4.6 Documentation; qutip.nonmarkov.transfertensor — QuTiP 4.6 Documentation. /qip; . /algorithms; ; qutip.qip.algorith,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:52814,Usability,guid,guide-visualization-,52814,QuTiP 4.6 Documentation; guide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.6 Documentation; Visualization of quantum states and processes — QuTiP 4.6 Documentation; guide-visualization-13.pdf; guide-visualization-3.pdf; guide-visualization-4.pdf; guide-visualization-5.pdf; guide-visualization-6.pdf; guide-visualization-7.pdf; guide-visualization-8.pdf; guide-visualization-9.pdf. QuTiP: Quantum Toolbox in Python — QuTiP 4.6 Documentation; Installation — QuTiP 4.6 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.6 Documentation; qutip.control.dynamics — QuTiP 4.6 Documentation; qutip.control.fidcomp — QuTiP 4.6 Documentation; qutip.control.optimizer — QuTiP 4.6 Documentation; qutip.control.optimresult — QuTiP 4.6 Documentation; qutip.control.propcomp — QuTiP 4.6 Documentation; qutip.control.pulsegen — QuTiP 4.6 Documentation; qutip.control.pulseoptim — QuTiP 4.6 Documentation; qutip.control.stats — QuTiP 4.6 Documentation; qutip.control.termcond — QuTiP 4.6 Documentation; qutip.control.tslotcomp — QuTiP 4.6 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.6 Documentation; qutip.nonmarkov.memorycascade — QuTiP 4.6 Documentation; qutip.nonmarkov.transfertensor — QuTiP 4.6 Documentation. /qip; . /algorithms; ; qutip.qip.algorithms.qft — QuTiP 4.6 Document,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:52841,Usability,guid,guide-visualization-,52841,ide-correlation-1_00.pdf; guide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.6 Documentation; Visualization of quantum states and processes — QuTiP 4.6 Documentation; guide-visualization-13.pdf; guide-visualization-3.pdf; guide-visualization-4.pdf; guide-visualization-5.pdf; guide-visualization-6.pdf; guide-visualization-7.pdf; guide-visualization-8.pdf; guide-visualization-9.pdf. QuTiP: Quantum Toolbox in Python — QuTiP 4.6 Documentation; Installation — QuTiP 4.6 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.6 Documentation; qutip.control.dynamics — QuTiP 4.6 Documentation; qutip.control.fidcomp — QuTiP 4.6 Documentation; qutip.control.optimizer — QuTiP 4.6 Documentation; qutip.control.optimresult — QuTiP 4.6 Documentation; qutip.control.propcomp — QuTiP 4.6 Documentation; qutip.control.pulsegen — QuTiP 4.6 Documentation; qutip.control.pulseoptim — QuTiP 4.6 Documentation; qutip.control.stats — QuTiP 4.6 Documentation; qutip.control.termcond — QuTiP 4.6 Documentation; qutip.control.tslotcomp — QuTiP 4.6 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.6 Documentation; qutip.nonmarkov.memorycascade — QuTiP 4.6 Documentation; qutip.nonmarkov.transfertensor — QuTiP 4.6 Documentation. /qip; . /algorithms; ; qutip.qip.algorithms.qft — QuTiP 4.6 Documentation. /compiler; ; qutip.q,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:52868,Usability,guid,guide-visualization-,52868,uide-correlation-1_01.pdf; Time Evolution and Quantum System Dynamics — QuTiP 4.6 Documentation; Measurement of Quantum Objects — QuTiP 4.6 Documentation; Guide Overview — QuTiP 4.6 Documentation; Parallel computation — QuTiP 4.6 Documentation; Quantum Information Processing — QuTiP 4.6 Documentation; Generating Random Quantum States & Operators — QuTiP 4.6 Documentation; Saving QuTiP Objects and Data Sets — QuTiP 4.6 Documentation; guide-saving-4.pdf; Modifying Internal QuTiP Settings — QuTiP 4.6 Documentation; Manipulating States and Operators — QuTiP 4.6 Documentation; guide-states-1.pdf; Solving for Steady-State Solutions — QuTiP 4.6 Documentation; Using Tensor Products and Partial Traces — QuTiP 4.6 Documentation; Visualization of quantum states and processes — QuTiP 4.6 Documentation; guide-visualization-13.pdf; guide-visualization-3.pdf; guide-visualization-4.pdf; guide-visualization-5.pdf; guide-visualization-6.pdf; guide-visualization-7.pdf; guide-visualization-8.pdf; guide-visualization-9.pdf. QuTiP: Quantum Toolbox in Python — QuTiP 4.6 Documentation; Installation — QuTiP 4.6 Documentation. /modules; . /qutip; . /control; ; qutip.control.dump — QuTiP 4.6 Documentation; qutip.control.dynamics — QuTiP 4.6 Documentation; qutip.control.fidcomp — QuTiP 4.6 Documentation; qutip.control.optimizer — QuTiP 4.6 Documentation; qutip.control.optimresult — QuTiP 4.6 Documentation; qutip.control.propcomp — QuTiP 4.6 Documentation; qutip.control.pulsegen — QuTiP 4.6 Documentation; qutip.control.pulseoptim — QuTiP 4.6 Documentation; qutip.control.stats — QuTiP 4.6 Documentation; qutip.control.termcond — QuTiP 4.6 Documentation; qutip.control.tslotcomp — QuTiP 4.6 Documentation. /nonmarkov; ; qutip.nonmarkov.heom — QuTiP 4.6 Documentation; qutip.nonmarkov.memorycascade — QuTiP 4.6 Documentation; qutip.nonmarkov.transfertensor — QuTiP 4.6 Documentation. /qip; . /algorithms; ; qutip.qip.algorithms.qft — QuTiP 4.6 Documentation. /compiler; ; qutip.qip.compiler.cavityqedcompil,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index-wcopy.html:59402,Usability,guid,guide,59402,uTiP 4.7 Documentation; Working with the QuTiP Documentation — QuTiP 4.7 Documentation; Ideas for future QuTiP development — QuTiP 4.7 Documentation; Release and Distribution — QuTiP 4.7 Documentation; QuTiP Development Roadmap — QuTiP 4.7 Documentation. /downloads; . /12a86e4dcaaba8c4a8de323bd441ab96; ; plot_qip_relaxation.py. /1b50abbe88595fe251e07102f532b361; ; plot_qip_amplitude_noise.ipynb. /3f58cb72e9b73bcbfbeb9e0f6960b60b; ; plot_qip_relaxation.ipynb. /5bc733f4cdb3729576a991efbdd8c026; ; plot_qip_intro_processor.ipynb. /7aaebc4b1d6f7b38aa6c893905ac98ef; ; plot_qip_intro_processor.py. /aacc19a817412ec042804206e9c23202; ; plot_qip_amplitude_noise.py. /e1a1bbebf99cf434ac461d7e6da91f40; ; qutip_tree.pdf. Frontmatter — QuTiP 4.7 Documentation. /gallery; . /build; . /qip; ; Control Amplitude Noise — QuTiP 4.7 Documentation; Basic use of Processor — QuTiP 4.7 Documentation; T2 Relaxation — QuTiP 4.7 Documentation. Gallery — QuTiP 4.7 Documentation. Index — QuTiP 4.7 Documentation. /guide; . /dynamics; ; Bloch-Redfield master equation — QuTiP 4.7 Documentation; Dynamics Simulation Results — QuTiP 4.7 Documentation; Floquet Formalism — QuTiP 4.7 Documentation; Introduction — QuTiP 4.7 Documentation; Krylov Solver — QuTiP 4.7 Documentation; Lindblad Master Equation Solver — QuTiP 4.7 Documentation; Monte Carlo Solver — QuTiP 4.7 Documentation; Setting Options for the Dynamics Solvers — QuTiP 4.7 Documentation; Stochastic Solver - Photocurrent — QuTiP 4.7 Documentation; Permutational Invariance — QuTiP 4.7 Documentation; Stochastic Solver — QuTiP 4.7 Documentation; Solving Problems with Time-dependent Hamiltonians — QuTiP 4.7 Documentation. /heom; ; Bosonic Environments — QuTiP 4.7 Documentation; Fermionic Environments — QuTiP 4.7 Documentation; Previous implementations — QuTiP 4.7 Documentation; Introduction — QuTiP 4.7 Documentation; References — QuTiP 4.7 Documentation. /qip; ; Quantum Information Processing — QuTiP 4.7 Documentation; Pulse-level circuit simulation —,MatchSource.WIKI,index-wcopy.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index-wcopy.html
https://qutip.org/index.html:837,Availability,avail,available,837,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP is open-source software for simulating the dynamics of open quantum systems. The QuTiP library depends on the excellent Numpy, Scipy, and Cython numerical packages. In addition, graphical output is provided by Matplotlib. QuTiP aims to provide user-friendly and efficient numerical simulations of a wide variety of Hamiltonians, including those with arbitrary time-dependence, commonly found in a wide range of physics applications such as quantum optics, trapped ions, superconducting circuits, and quantum nanomechanical resonators. QuTiP is freely available for use and/or modification on all major platforms such as Linux, Mac OSX, and Windows*. Being free of any licensing fees, QuTiP is ideal for exploring quantum mechanics and dynamics in the classroom. *QuTiP is developed on Unix platforms only, and some features may not be available under Windows. From the classroom to the corporate office, QuTiP is used around the world to advance research in quantum optics, quantum information, quantum open systems, optomechanics, and many related fields. QuTiP is in use at nearly every single research university around the globe, government-funded research labs, and is relied upon by every major corporation focused on developing a quantum computer. QuTiP is already being used at a variety of institutions around the globe, and has been downloaded more than a million times since its initial release. Need; help in simulating a tricky problem? Our large community of users are gracious enough to take a moment of their time and help in tackling even the most esoteric of issues. Distribution of the 39,420 Unique Visitors in 2020. Supporting Organizations; Developers from Nori's lab and Blais' lab have been ",MatchSource.WIKI,index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index.html
https://qutip.org/index.html:1121,Availability,avail,available,1121,". News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP is open-source software for simulating the dynamics of open quantum systems. The QuTiP library depends on the excellent Numpy, Scipy, and Cython numerical packages. In addition, graphical output is provided by Matplotlib. QuTiP aims to provide user-friendly and efficient numerical simulations of a wide variety of Hamiltonians, including those with arbitrary time-dependence, commonly found in a wide range of physics applications such as quantum optics, trapped ions, superconducting circuits, and quantum nanomechanical resonators. QuTiP is freely available for use and/or modification on all major platforms such as Linux, Mac OSX, and Windows*. Being free of any licensing fees, QuTiP is ideal for exploring quantum mechanics and dynamics in the classroom. *QuTiP is developed on Unix platforms only, and some features may not be available under Windows. From the classroom to the corporate office, QuTiP is used around the world to advance research in quantum optics, quantum information, quantum open systems, optomechanics, and many related fields. QuTiP is in use at nearly every single research university around the globe, government-funded research labs, and is relied upon by every major corporation focused on developing a quantum computer. QuTiP is already being used at a variety of institutions around the globe, and has been downloaded more than a million times since its initial release. Need; help in simulating a tricky problem? Our large community of users are gracious enough to take a moment of their time and help in tackling even the most esoteric of issues. Distribution of the 39,420 Unique Visitors in 2020. Supporting Organizations; Developers from Nori's lab and Blais' lab have been actively contributing QuTiP. QuTiP is currently supported by these organizations:. QuTiP is pro",MatchSource.WIKI,index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index.html
https://qutip.org/index.html:1629,Availability,down,downloaded,1629,"ncluding those with arbitrary time-dependence, commonly found in a wide range of physics applications such as quantum optics, trapped ions, superconducting circuits, and quantum nanomechanical resonators. QuTiP is freely available for use and/or modification on all major platforms such as Linux, Mac OSX, and Windows*. Being free of any licensing fees, QuTiP is ideal for exploring quantum mechanics and dynamics in the classroom. *QuTiP is developed on Unix platforms only, and some features may not be available under Windows. From the classroom to the corporate office, QuTiP is used around the world to advance research in quantum optics, quantum information, quantum open systems, optomechanics, and many related fields. QuTiP is in use at nearly every single research university around the globe, government-funded research labs, and is relied upon by every major corporation focused on developing a quantum computer. QuTiP is already being used at a variety of institutions around the globe, and has been downloaded more than a million times since its initial release. Need; help in simulating a tricky problem? Our large community of users are gracious enough to take a moment of their time and help in tackling even the most esoteric of issues. Distribution of the 39,420 Unique Visitors in 2020. Supporting Organizations; Developers from Nori's lab and Blais' lab have been actively contributing QuTiP. QuTiP is currently supported by these organizations:. QuTiP is proud to be affiliated to:. The development of QuTiP was partially supported by the following organizations:. We also thank Google for their support through the Google Summer of Code program. . Latest releases. QuTiP 5.0.4:; ; September 03, 2024; install; docs; src; changelog. QuTiP 4.7.5:; ; April 5, 2024; install; docs; src; changelog. About QuTiP. GitHub ; Documentation ; Issue tracker ; Mailing list ; Wiki ; License ; Code of conduct . Related projects. SciPy ; NumPy ; Cython ; Matplotlib ; IPython ; SymPy . Affil",MatchSource.WIKI,index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index.html
https://qutip.org/index.html:1684,Deployability,release,release,1684,"ncluding those with arbitrary time-dependence, commonly found in a wide range of physics applications such as quantum optics, trapped ions, superconducting circuits, and quantum nanomechanical resonators. QuTiP is freely available for use and/or modification on all major platforms such as Linux, Mac OSX, and Windows*. Being free of any licensing fees, QuTiP is ideal for exploring quantum mechanics and dynamics in the classroom. *QuTiP is developed on Unix platforms only, and some features may not be available under Windows. From the classroom to the corporate office, QuTiP is used around the world to advance research in quantum optics, quantum information, quantum open systems, optomechanics, and many related fields. QuTiP is in use at nearly every single research university around the globe, government-funded research labs, and is relied upon by every major corporation focused on developing a quantum computer. QuTiP is already being used at a variety of institutions around the globe, and has been downloaded more than a million times since its initial release. Need; help in simulating a tricky problem? Our large community of users are gracious enough to take a moment of their time and help in tackling even the most esoteric of issues. Distribution of the 39,420 Unique Visitors in 2020. Supporting Organizations; Developers from Nori's lab and Blais' lab have been actively contributing QuTiP. QuTiP is currently supported by these organizations:. QuTiP is proud to be affiliated to:. The development of QuTiP was partially supported by the following organizations:. We also thank Google for their support through the Google Summer of Code program. . Latest releases. QuTiP 5.0.4:; ; September 03, 2024; install; docs; src; changelog. QuTiP 4.7.5:; ; April 5, 2024; install; docs; src; changelog. About QuTiP. GitHub ; Documentation ; Issue tracker ; Mailing list ; Wiki ; License ; Code of conduct . Related projects. SciPy ; NumPy ; Cython ; Matplotlib ; IPython ; SymPy . Affil",MatchSource.WIKI,index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index.html
https://qutip.org/index.html:2294,Deployability,release,releases,2294,"ge of physics applications such as quantum optics, trapped ions, superconducting circuits, and quantum nanomechanical resonators. QuTiP is freely available for use and/or modification on all major platforms such as Linux, Mac OSX, and Windows*. Being free of any licensing fees, QuTiP is ideal for exploring quantum mechanics and dynamics in the classroom. *QuTiP is developed on Unix platforms only, and some features may not be available under Windows. From the classroom to the corporate office, QuTiP is used around the world to advance research in quantum optics, quantum information, quantum open systems, optomechanics, and many related fields. QuTiP is in use at nearly every single research university around the globe, government-funded research labs, and is relied upon by every major corporation focused on developing a quantum computer. QuTiP is already being used at a variety of institutions around the globe, and has been downloaded more than a million times since its initial release. Need; help in simulating a tricky problem? Our large community of users are gracious enough to take a moment of their time and help in tackling even the most esoteric of issues. Distribution of the 39,420 Unique Visitors in 2020. Supporting Organizations; Developers from Nori's lab and Blais' lab have been actively contributing QuTiP. QuTiP is currently supported by these organizations:. QuTiP is proud to be affiliated to:. The development of QuTiP was partially supported by the following organizations:. We also thank Google for their support through the Google Summer of Code program. . Latest releases. QuTiP 5.0.4:; ; September 03, 2024; install; docs; src; changelog. QuTiP 4.7.5:; ; April 5, 2024; install; docs; src; changelog. About QuTiP. GitHub ; Documentation ; Issue tracker ; Mailing list ; Wiki ; License ; Code of conduct . Related projects. SciPy ; NumPy ; Cython ; Matplotlib ; IPython ; SymPy . Affiliated to. . © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index.html
https://qutip.org/index.html:2340,Deployability,install,install,2340,"ge of physics applications such as quantum optics, trapped ions, superconducting circuits, and quantum nanomechanical resonators. QuTiP is freely available for use and/or modification on all major platforms such as Linux, Mac OSX, and Windows*. Being free of any licensing fees, QuTiP is ideal for exploring quantum mechanics and dynamics in the classroom. *QuTiP is developed on Unix platforms only, and some features may not be available under Windows. From the classroom to the corporate office, QuTiP is used around the world to advance research in quantum optics, quantum information, quantum open systems, optomechanics, and many related fields. QuTiP is in use at nearly every single research university around the globe, government-funded research labs, and is relied upon by every major corporation focused on developing a quantum computer. QuTiP is already being used at a variety of institutions around the globe, and has been downloaded more than a million times since its initial release. Need; help in simulating a tricky problem? Our large community of users are gracious enough to take a moment of their time and help in tackling even the most esoteric of issues. Distribution of the 39,420 Unique Visitors in 2020. Supporting Organizations; Developers from Nori's lab and Blais' lab have been actively contributing QuTiP. QuTiP is currently supported by these organizations:. QuTiP is proud to be affiliated to:. The development of QuTiP was partially supported by the following organizations:. We also thank Google for their support through the Google Summer of Code program. . Latest releases. QuTiP 5.0.4:; ; September 03, 2024; install; docs; src; changelog. QuTiP 4.7.5:; ; April 5, 2024; install; docs; src; changelog. About QuTiP. GitHub ; Documentation ; Issue tracker ; Mailing list ; Wiki ; License ; Code of conduct . Related projects. SciPy ; NumPy ; Cython ; Matplotlib ; IPython ; SymPy . Affiliated to. . © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index.html
https://qutip.org/index.html:2402,Deployability,install,install,2402,"ge of physics applications such as quantum optics, trapped ions, superconducting circuits, and quantum nanomechanical resonators. QuTiP is freely available for use and/or modification on all major platforms such as Linux, Mac OSX, and Windows*. Being free of any licensing fees, QuTiP is ideal for exploring quantum mechanics and dynamics in the classroom. *QuTiP is developed on Unix platforms only, and some features may not be available under Windows. From the classroom to the corporate office, QuTiP is used around the world to advance research in quantum optics, quantum information, quantum open systems, optomechanics, and many related fields. QuTiP is in use at nearly every single research university around the globe, government-funded research labs, and is relied upon by every major corporation focused on developing a quantum computer. QuTiP is already being used at a variety of institutions around the globe, and has been downloaded more than a million times since its initial release. Need; help in simulating a tricky problem? Our large community of users are gracious enough to take a moment of their time and help in tackling even the most esoteric of issues. Distribution of the 39,420 Unique Visitors in 2020. Supporting Organizations; Developers from Nori's lab and Blais' lab have been actively contributing QuTiP. QuTiP is currently supported by these organizations:. QuTiP is proud to be affiliated to:. The development of QuTiP was partially supported by the following organizations:. We also thank Google for their support through the Google Summer of Code program. . Latest releases. QuTiP 5.0.4:; ; September 03, 2024; install; docs; src; changelog. QuTiP 4.7.5:; ; April 5, 2024; install; docs; src; changelog. About QuTiP. GitHub ; Documentation ; Issue tracker ; Mailing list ; Wiki ; License ; Code of conduct . Related projects. SciPy ; NumPy ; Cython ; Matplotlib ; IPython ; SymPy . Affiliated to. . © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index.html
https://qutip.org/index.html:548,Energy Efficiency,efficient,efficient,548,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP is open-source software for simulating the dynamics of open quantum systems. The QuTiP library depends on the excellent Numpy, Scipy, and Cython numerical packages. In addition, graphical output is provided by Matplotlib. QuTiP aims to provide user-friendly and efficient numerical simulations of a wide variety of Hamiltonians, including those with arbitrary time-dependence, commonly found in a wide range of physics applications such as quantum optics, trapped ions, superconducting circuits, and quantum nanomechanical resonators. QuTiP is freely available for use and/or modification on all major platforms such as Linux, Mac OSX, and Windows*. Being free of any licensing fees, QuTiP is ideal for exploring quantum mechanics and dynamics in the classroom. *QuTiP is developed on Unix platforms only, and some features may not be available under Windows. From the classroom to the corporate office, QuTiP is used around the world to advance research in quantum optics, quantum information, quantum open systems, optomechanics, and many related fields. QuTiP is in use at nearly every single research university around the globe, government-funded research labs, and is relied upon by every major corporation focused on developing a quantum computer. QuTiP is already being used at a variety of institutions around the globe, and has been downloaded more than a million times since its initial release. Need; help in simulating a tricky problem? Our large community of users are gracious enough to take a moment of their time and help in tackling even the most esoteric of issues. Distribution of the 39,420 Unique Visitors in 2020. Supporting Organizations; Developers from Nori's lab and Blais' lab have been ",MatchSource.WIKI,index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index.html
https://qutip.org/index.html:381,Integrability,depend,depends,381,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP is open-source software for simulating the dynamics of open quantum systems. The QuTiP library depends on the excellent Numpy, Scipy, and Cython numerical packages. In addition, graphical output is provided by Matplotlib. QuTiP aims to provide user-friendly and efficient numerical simulations of a wide variety of Hamiltonians, including those with arbitrary time-dependence, commonly found in a wide range of physics applications such as quantum optics, trapped ions, superconducting circuits, and quantum nanomechanical resonators. QuTiP is freely available for use and/or modification on all major platforms such as Linux, Mac OSX, and Windows*. Being free of any licensing fees, QuTiP is ideal for exploring quantum mechanics and dynamics in the classroom. *QuTiP is developed on Unix platforms only, and some features may not be available under Windows. From the classroom to the corporate office, QuTiP is used around the world to advance research in quantum optics, quantum information, quantum open systems, optomechanics, and many related fields. QuTiP is in use at nearly every single research university around the globe, government-funded research labs, and is relied upon by every major corporation focused on developing a quantum computer. QuTiP is already being used at a variety of institutions around the globe, and has been downloaded more than a million times since its initial release. Need; help in simulating a tricky problem? Our large community of users are gracious enough to take a moment of their time and help in tackling even the most esoteric of issues. Distribution of the 39,420 Unique Visitors in 2020. Supporting Organizations; Developers from Nori's lab and Blais' lab have been ",MatchSource.WIKI,index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index.html
https://qutip.org/index.html:651,Integrability,depend,dependence,651,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP is open-source software for simulating the dynamics of open quantum systems. The QuTiP library depends on the excellent Numpy, Scipy, and Cython numerical packages. In addition, graphical output is provided by Matplotlib. QuTiP aims to provide user-friendly and efficient numerical simulations of a wide variety of Hamiltonians, including those with arbitrary time-dependence, commonly found in a wide range of physics applications such as quantum optics, trapped ions, superconducting circuits, and quantum nanomechanical resonators. QuTiP is freely available for use and/or modification on all major platforms such as Linux, Mac OSX, and Windows*. Being free of any licensing fees, QuTiP is ideal for exploring quantum mechanics and dynamics in the classroom. *QuTiP is developed on Unix platforms only, and some features may not be available under Windows. From the classroom to the corporate office, QuTiP is used around the world to advance research in quantum optics, quantum information, quantum open systems, optomechanics, and many related fields. QuTiP is in use at nearly every single research university around the globe, government-funded research labs, and is relied upon by every major corporation focused on developing a quantum computer. QuTiP is already being used at a variety of institutions around the globe, and has been downloaded more than a million times since its initial release. Need; help in simulating a tricky problem? Our large community of users are gracious enough to take a moment of their time and help in tackling even the most esoteric of issues. Distribution of the 39,420 Unique Visitors in 2020. Supporting Organizations; Developers from Nori's lab and Blais' lab have been ",MatchSource.WIKI,index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index.html
https://qutip.org/index.html:530,Usability,user-friendly,user-friendly,530,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP is open-source software for simulating the dynamics of open quantum systems. The QuTiP library depends on the excellent Numpy, Scipy, and Cython numerical packages. In addition, graphical output is provided by Matplotlib. QuTiP aims to provide user-friendly and efficient numerical simulations of a wide variety of Hamiltonians, including those with arbitrary time-dependence, commonly found in a wide range of physics applications such as quantum optics, trapped ions, superconducting circuits, and quantum nanomechanical resonators. QuTiP is freely available for use and/or modification on all major platforms such as Linux, Mac OSX, and Windows*. Being free of any licensing fees, QuTiP is ideal for exploring quantum mechanics and dynamics in the classroom. *QuTiP is developed on Unix platforms only, and some features may not be available under Windows. From the classroom to the corporate office, QuTiP is used around the world to advance research in quantum optics, quantum information, quantum open systems, optomechanics, and many related fields. QuTiP is in use at nearly every single research university around the globe, government-funded research labs, and is relied upon by every major corporation focused on developing a quantum computer. QuTiP is already being used at a variety of institutions around the globe, and has been downloaded more than a million times since its initial release. Need; help in simulating a tricky problem? Our large community of users are gracious enough to take a moment of their time and help in tackling even the most esoteric of issues. Distribution of the 39,420 Unique Visitors in 2020. Supporting Organizations; Developers from Nori's lab and Blais' lab have been ",MatchSource.WIKI,index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/index.html
https://qutip.org/jobs.html:333,Availability,avail,available,333,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. Job Announcements; At this time we have no positions available. If you are interested in contributing to QuTiP via schemes like GSOC, Unitary Fund, or otherwise please contact the admin team qutip-admin@googlegroups.com. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,jobs.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/jobs.html
https://qutip.org/news.html:741,Availability,down,downloads,741,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP News. Mar 7, 2023; QuTiP 2022 Annual Report. QuTiP 2022 Annual Report. Feb 6, 2023; Google Summer of Code 2023 is coming!. NumFOCUS GSoC 2023; QuTiP Proposal Ideas; Application Period: 20 March - 4 April, 2023. December 12, 2022; QuTiP 4.7.1 Released. Release Notes; PyPI; Conda-forge. November 23, 2022; New QuTiP Tutorials and Benchmarks Pages Added to the Website. Benchmarks; Tutorials. November 16, 2022; QuTiP Reaches 1 Milion Downloads. Post; PyPI downloads; Conda Forge downloads. November 7, 2022; QuTiP highlighted in the 2022 Quantum Open Source Software Survey. Results from the Unitary Fund Survey. October 26, 2022; 2022 QuTiP Student Presentations (GSoC Projects). YouTube link. September 6, 2022; QuTiP Workshop at Quantum Africa Summer School in Kigali, Rwanda. Tutorials on QIP (Jupyter Book). July 1, 2022; QuTiP 2022 Google Summer of Code Projects Announced. Christian: QuTiP notebook CI testing and v5 update; Xavier: QuTiP benchmarks; Shreyas: qutip-qip backend for Qiskit. April 15, 2022; QuTiP 2022 Google Summer of Code Proposals Due!. NumFOCUS GSoC 2022; QuTiP Proposal Ideas; Application Period: 4 - 19 April, 2022. April 13, 2022; QuTiP 4.7 Released. Release Notes; PyPI; Conda-forge. April 11, 2022; QuTiP 2021 Annual Report. QuTiP 2021 Annual Report. June 7, 2021; 2021 Google Summer of Code Project Updates. Felipe's blog posts; Purva's blog posts; Asier's blog posts. March 18, 2021; Technical Staff Position for QuTiP Available at RIKEN. See QuTiP Jobs. March 15, 2021; QuTiP applies to Google Summer of Code 2021 under the NumFOCUS organization. NumFOCUS GSoC 2021; QuTiP Proposal Ideas; Application Period: March 29- April 13, 2021. June 22, 2020; 2020 Google Summer of Code Proje",MatchSource.WIKI,news.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/news.html
https://qutip.org/news.html:764,Availability,down,downloads,764,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP News. Mar 7, 2023; QuTiP 2022 Annual Report. QuTiP 2022 Annual Report. Feb 6, 2023; Google Summer of Code 2023 is coming!. NumFOCUS GSoC 2023; QuTiP Proposal Ideas; Application Period: 20 March - 4 April, 2023. December 12, 2022; QuTiP 4.7.1 Released. Release Notes; PyPI; Conda-forge. November 23, 2022; New QuTiP Tutorials and Benchmarks Pages Added to the Website. Benchmarks; Tutorials. November 16, 2022; QuTiP Reaches 1 Milion Downloads. Post; PyPI downloads; Conda Forge downloads. November 7, 2022; QuTiP highlighted in the 2022 Quantum Open Source Software Survey. Results from the Unitary Fund Survey. October 26, 2022; 2022 QuTiP Student Presentations (GSoC Projects). YouTube link. September 6, 2022; QuTiP Workshop at Quantum Africa Summer School in Kigali, Rwanda. Tutorials on QIP (Jupyter Book). July 1, 2022; QuTiP 2022 Google Summer of Code Projects Announced. Christian: QuTiP notebook CI testing and v5 update; Xavier: QuTiP benchmarks; Shreyas: qutip-qip backend for Qiskit. April 15, 2022; QuTiP 2022 Google Summer of Code Proposals Due!. NumFOCUS GSoC 2022; QuTiP Proposal Ideas; Application Period: 4 - 19 April, 2022. April 13, 2022; QuTiP 4.7 Released. Release Notes; PyPI; Conda-forge. April 11, 2022; QuTiP 2021 Annual Report. QuTiP 2021 Annual Report. June 7, 2021; 2021 Google Summer of Code Project Updates. Felipe's blog posts; Purva's blog posts; Asier's blog posts. March 18, 2021; Technical Staff Position for QuTiP Available at RIKEN. See QuTiP Jobs. March 15, 2021; QuTiP applies to Google Summer of Code 2021 under the NumFOCUS organization. NumFOCUS GSoC 2021; QuTiP Proposal Ideas; Application Period: March 29- April 13, 2021. June 22, 2020; 2020 Google Summer of Code Proje",MatchSource.WIKI,news.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/news.html
https://qutip.org/news.html:2430,Availability,avail,available,2430," Released. Release Notes; PyPI; Conda-forge. April 11, 2022; QuTiP 2021 Annual Report. QuTiP 2021 Annual Report. June 7, 2021; 2021 Google Summer of Code Project Updates. Felipe's blog posts; Purva's blog posts; Asier's blog posts. March 18, 2021; Technical Staff Position for QuTiP Available at RIKEN. See QuTiP Jobs. March 15, 2021; QuTiP applies to Google Summer of Code 2021 under the NumFOCUS organization. NumFOCUS GSoC 2021; QuTiP Proposal Ideas; Application Period: March 29- April 13, 2021. June 22, 2020; 2020 Google Summer of Code Project Updates. Jake's Blog posts; Sidhant's Blog posts; Asad's Blog posts. April 6, 2020; Unitary Fund supports QuTiP development through remote mentorships. Website; Blog post. March 16, 2020; Student applications open for Google Summer of Code 2020. Project Ideas. December 12, 2019; Krotov is a new quantum optimal control library built on top of QuTiP. Github repository; SciPost paper. November 31, 2019; QuTiP is listed as an available project in Kharagpur Winter of Code for Indian Institute of Technology students. KWoC 2019. September 11, 2019; QuTiP features for quantum information science are presented in a talk at IQIS 2019 in Milan, Italy. IQIS 2019. September 3-4, 2019; QuTiP joins the European open-source community of scientist using Python at EuroScipy 2019 in Bilbao, Spain. Tutorial: Quantum measurement; Seminar: QuTiP as an ecosystem for quantum physics exploration. July 23, 2019; Two students working on QuTiP projects for Google Summer of Code. Boxi's Blog on noise in QIP; Saumya's Blog on lattice models. July 3, 2019; QuTiP 4.4.0 is released. Available with conda and pip. Changelog. June 25, 2019; An interactive course on QuTiP and open source for physicists is taught at ICTP Trieste, Italy. Slides and MyBinder Notebooks. March 19, 2019; QuTiP Poster Presented at the Coherent Network Computing Conference in Atsugi, Japan. Poster; CNC Website. March 1, 2019; QuTiP Participates to Google Summer of Code 2019 trough NumFOC",MatchSource.WIKI,news.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/news.html
https://qutip.org/news.html:1209,Deployability,update,update,1209,"ist; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP News. Mar 7, 2023; QuTiP 2022 Annual Report. QuTiP 2022 Annual Report. Feb 6, 2023; Google Summer of Code 2023 is coming!. NumFOCUS GSoC 2023; QuTiP Proposal Ideas; Application Period: 20 March - 4 April, 2023. December 12, 2022; QuTiP 4.7.1 Released. Release Notes; PyPI; Conda-forge. November 23, 2022; New QuTiP Tutorials and Benchmarks Pages Added to the Website. Benchmarks; Tutorials. November 16, 2022; QuTiP Reaches 1 Milion Downloads. Post; PyPI downloads; Conda Forge downloads. November 7, 2022; QuTiP highlighted in the 2022 Quantum Open Source Software Survey. Results from the Unitary Fund Survey. October 26, 2022; 2022 QuTiP Student Presentations (GSoC Projects). YouTube link. September 6, 2022; QuTiP Workshop at Quantum Africa Summer School in Kigali, Rwanda. Tutorials on QIP (Jupyter Book). July 1, 2022; QuTiP 2022 Google Summer of Code Projects Announced. Christian: QuTiP notebook CI testing and v5 update; Xavier: QuTiP benchmarks; Shreyas: qutip-qip backend for Qiskit. April 15, 2022; QuTiP 2022 Google Summer of Code Proposals Due!. NumFOCUS GSoC 2022; QuTiP Proposal Ideas; Application Period: 4 - 19 April, 2022. April 13, 2022; QuTiP 4.7 Released. Release Notes; PyPI; Conda-forge. April 11, 2022; QuTiP 2021 Annual Report. QuTiP 2021 Annual Report. June 7, 2021; 2021 Google Summer of Code Project Updates. Felipe's blog posts; Purva's blog posts; Asier's blog posts. March 18, 2021; Technical Staff Position for QuTiP Available at RIKEN. See QuTiP Jobs. March 15, 2021; QuTiP applies to Google Summer of Code 2021 under the NumFOCUS organization. NumFOCUS GSoC 2021; QuTiP Proposal Ideas; Application Period: March 29- April 13, 2021. June 22, 2020; 2020 Google Summer of Code Project Updates. Jake's Blog posts; Sidhant's Blog posts; Asad's Blog posts. April 6, 2020; Unitary Fund supports QuTiP development through remote mentorships. Website; Blog post. March 16, 2020; Student applications open for G",MatchSource.WIKI,news.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/news.html
https://qutip.org/news.html:3061,Deployability,release,released,3061,"og posts. April 6, 2020; Unitary Fund supports QuTiP development through remote mentorships. Website; Blog post. March 16, 2020; Student applications open for Google Summer of Code 2020. Project Ideas. December 12, 2019; Krotov is a new quantum optimal control library built on top of QuTiP. Github repository; SciPost paper. November 31, 2019; QuTiP is listed as an available project in Kharagpur Winter of Code for Indian Institute of Technology students. KWoC 2019. September 11, 2019; QuTiP features for quantum information science are presented in a talk at IQIS 2019 in Milan, Italy. IQIS 2019. September 3-4, 2019; QuTiP joins the European open-source community of scientist using Python at EuroScipy 2019 in Bilbao, Spain. Tutorial: Quantum measurement; Seminar: QuTiP as an ecosystem for quantum physics exploration. July 23, 2019; Two students working on QuTiP projects for Google Summer of Code. Boxi's Blog on noise in QIP; Saumya's Blog on lattice models. July 3, 2019; QuTiP 4.4.0 is released. Available with conda and pip. Changelog. June 25, 2019; An interactive course on QuTiP and open source for physicists is taught at ICTP Trieste, Italy. Slides and MyBinder Notebooks. March 19, 2019; QuTiP Poster Presented at the Coherent Network Computing Conference in Atsugi, Japan. Poster; CNC Website. March 1, 2019; QuTiP Participates to Google Summer of Code 2019 trough NumFOCUS. NumFOCUS at GSoC 2019; GSoC 2019 QuTiP's Project Proposals. February 21, 2019; First QuTiP Developers Workshop Held at RIKEN on February 19-21, 2019. RIKEN. Feruary 2, 2019; QuTiP is Presented at FOSDEM 2019 in Bruxelles, Belgium. ""Make Your Code Count"" Talk on Youtube; Open Source Quantum Software at FOSDEM 19. January 26, 2019; QuTiP is Presented in an Invited Talk at the RIKEN Berkeley Workshop on Quantum Information Science. rb19 at lbl.gov; Talk Slides. January 9, 2019; QuTiP is Featured on Nature's Physics Blog. The Rise of Open-Source in Quantum Physics Research. November 19, 2018; QuTiP Fea",MatchSource.WIKI,news.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/news.html
https://qutip.org/news.html:1194,Testability,test,testing,1194,"ist; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP News. Mar 7, 2023; QuTiP 2022 Annual Report. QuTiP 2022 Annual Report. Feb 6, 2023; Google Summer of Code 2023 is coming!. NumFOCUS GSoC 2023; QuTiP Proposal Ideas; Application Period: 20 March - 4 April, 2023. December 12, 2022; QuTiP 4.7.1 Released. Release Notes; PyPI; Conda-forge. November 23, 2022; New QuTiP Tutorials and Benchmarks Pages Added to the Website. Benchmarks; Tutorials. November 16, 2022; QuTiP Reaches 1 Milion Downloads. Post; PyPI downloads; Conda Forge downloads. November 7, 2022; QuTiP highlighted in the 2022 Quantum Open Source Software Survey. Results from the Unitary Fund Survey. October 26, 2022; 2022 QuTiP Student Presentations (GSoC Projects). YouTube link. September 6, 2022; QuTiP Workshop at Quantum Africa Summer School in Kigali, Rwanda. Tutorials on QIP (Jupyter Book). July 1, 2022; QuTiP 2022 Google Summer of Code Projects Announced. Christian: QuTiP notebook CI testing and v5 update; Xavier: QuTiP benchmarks; Shreyas: qutip-qip backend for Qiskit. April 15, 2022; QuTiP 2022 Google Summer of Code Proposals Due!. NumFOCUS GSoC 2022; QuTiP Proposal Ideas; Application Period: 4 - 19 April, 2022. April 13, 2022; QuTiP 4.7 Released. Release Notes; PyPI; Conda-forge. April 11, 2022; QuTiP 2021 Annual Report. QuTiP 2021 Annual Report. June 7, 2021; 2021 Google Summer of Code Project Updates. Felipe's blog posts; Purva's blog posts; Asier's blog posts. March 18, 2021; Technical Staff Position for QuTiP Available at RIKEN. See QuTiP Jobs. March 15, 2021; QuTiP applies to Google Summer of Code 2021 under the NumFOCUS organization. NumFOCUS GSoC 2021; QuTiP Proposal Ideas; Application Period: March 29- April 13, 2021. June 22, 2020; 2020 Google Summer of Code Project Updates. Jake's Blog posts; Sidhant's Blog posts; Asad's Blog posts. April 6, 2020; Unitary Fund supports QuTiP development through remote mentorships. Website; Blog post. March 16, 2020; Student applications open for G",MatchSource.WIKI,news.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/news.html
https://qutip.org/news.html:1231,Testability,benchmark,benchmarks,1231,"ist; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP News. Mar 7, 2023; QuTiP 2022 Annual Report. QuTiP 2022 Annual Report. Feb 6, 2023; Google Summer of Code 2023 is coming!. NumFOCUS GSoC 2023; QuTiP Proposal Ideas; Application Period: 20 March - 4 April, 2023. December 12, 2022; QuTiP 4.7.1 Released. Release Notes; PyPI; Conda-forge. November 23, 2022; New QuTiP Tutorials and Benchmarks Pages Added to the Website. Benchmarks; Tutorials. November 16, 2022; QuTiP Reaches 1 Milion Downloads. Post; PyPI downloads; Conda Forge downloads. November 7, 2022; QuTiP highlighted in the 2022 Quantum Open Source Software Survey. Results from the Unitary Fund Survey. October 26, 2022; 2022 QuTiP Student Presentations (GSoC Projects). YouTube link. September 6, 2022; QuTiP Workshop at Quantum Africa Summer School in Kigali, Rwanda. Tutorials on QIP (Jupyter Book). July 1, 2022; QuTiP 2022 Google Summer of Code Projects Announced. Christian: QuTiP notebook CI testing and v5 update; Xavier: QuTiP benchmarks; Shreyas: qutip-qip backend for Qiskit. April 15, 2022; QuTiP 2022 Google Summer of Code Proposals Due!. NumFOCUS GSoC 2022; QuTiP Proposal Ideas; Application Period: 4 - 19 April, 2022. April 13, 2022; QuTiP 4.7 Released. Release Notes; PyPI; Conda-forge. April 11, 2022; QuTiP 2021 Annual Report. QuTiP 2021 Annual Report. June 7, 2021; 2021 Google Summer of Code Project Updates. Felipe's blog posts; Purva's blog posts; Asier's blog posts. March 18, 2021; Technical Staff Position for QuTiP Available at RIKEN. See QuTiP Jobs. March 15, 2021; QuTiP applies to Google Summer of Code 2021 under the NumFOCUS organization. NumFOCUS GSoC 2021; QuTiP Proposal Ideas; Application Period: March 29- April 13, 2021. June 22, 2020; 2020 Google Summer of Code Project Updates. Jake's Blog posts; Sidhant's Blog posts; Asad's Blog posts. April 6, 2020; Unitary Fund supports QuTiP development through remote mentorships. Website; Blog post. March 16, 2020; Student applications open for G",MatchSource.WIKI,news.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/news.html
https://qutip.org/qutip-virtual-lab.html:599,Deployability,install,installing,599,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP Virtual Lab. Exploring simple quantum systems with QuTiP can help build intuition for them,; but there are many cases where writing code and Jupyter notebooks can get; in the way:. When teaching, coding can be a big distraction. Quantum mechanics is complex ; enough without your students having to struggle with installing software,; messing up their notebooks or learning QuTiP at the same time. When doing research, coding can be a big detour. You just want to do a quick; check to remind yourself how a simple system works, not spend the afternoon; fiddling in a text editor. You have papers to write and grant reports to fill; in. Time is precious. When at a party or while pitching your cool ideas, you don’t want to take out; your laptop to show people how cool your ideas are. It breaks the flow. You; need to be able to show them on your tablet. For all of these use cases, there is QuTiP Virtual Lab – a tablet and web; optimized graphical interface for building and exploring simple quantum systems.; It runs entirely in your browser, so there’s no server and nothing to install.; Click the button below to get started!; Enter QuTiP Virtual Lab.; There’s a handy tutorial with videos included in the virtual lab itself and some pre-built systems; to get you started. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,qutip-virtual-lab.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-virtual-lab.html
https://qutip.org/qutip-virtual-lab.html:1368,Deployability,install,install,1368,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP Virtual Lab. Exploring simple quantum systems with QuTiP can help build intuition for them,; but there are many cases where writing code and Jupyter notebooks can get; in the way:. When teaching, coding can be a big distraction. Quantum mechanics is complex ; enough without your students having to struggle with installing software,; messing up their notebooks or learning QuTiP at the same time. When doing research, coding can be a big detour. You just want to do a quick; check to remind yourself how a simple system works, not spend the afternoon; fiddling in a text editor. You have papers to write and grant reports to fill; in. Time is precious. When at a party or while pitching your cool ideas, you don’t want to take out; your laptop to show people how cool your ideas are. It breaks the flow. You; need to be able to show them on your tablet. For all of these use cases, there is QuTiP Virtual Lab – a tablet and web; optimized graphical interface for building and exploring simple quantum systems.; It runs entirely in your browser, so there’s no server and nothing to install.; Click the button below to get started!; Enter QuTiP Virtual Lab.; There’s a handy tutorial with videos included in the virtual lab itself and some pre-built systems; to get you started. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,qutip-virtual-lab.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-virtual-lab.html
https://qutip.org/qutip-virtual-lab.html:1236,Integrability,interface,interface,1236,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP Virtual Lab. Exploring simple quantum systems with QuTiP can help build intuition for them,; but there are many cases where writing code and Jupyter notebooks can get; in the way:. When teaching, coding can be a big distraction. Quantum mechanics is complex ; enough without your students having to struggle with installing software,; messing up their notebooks or learning QuTiP at the same time. When doing research, coding can be a big detour. You just want to do a quick; check to remind yourself how a simple system works, not spend the afternoon; fiddling in a text editor. You have papers to write and grant reports to fill; in. Time is precious. When at a party or while pitching your cool ideas, you don’t want to take out; your laptop to show people how cool your ideas are. It breaks the flow. You; need to be able to show them on your tablet. For all of these use cases, there is QuTiP Virtual Lab – a tablet and web; optimized graphical interface for building and exploring simple quantum systems.; It runs entirely in your browser, so there’s no server and nothing to install.; Click the button below to get started!; Enter QuTiP Virtual Lab.; There’s a handy tutorial with videos included in the virtual lab itself and some pre-built systems; to get you started. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,qutip-virtual-lab.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-virtual-lab.html
https://qutip.org/qutip-virtual-lab.html:1216,Performance,optimiz,optimized,1216,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP Virtual Lab. Exploring simple quantum systems with QuTiP can help build intuition for them,; but there are many cases where writing code and Jupyter notebooks can get; in the way:. When teaching, coding can be a big distraction. Quantum mechanics is complex ; enough without your students having to struggle with installing software,; messing up their notebooks or learning QuTiP at the same time. When doing research, coding can be a big detour. You just want to do a quick; check to remind yourself how a simple system works, not spend the afternoon; fiddling in a text editor. You have papers to write and grant reports to fill; in. Time is precious. When at a party or while pitching your cool ideas, you don’t want to take out; your laptop to show people how cool your ideas are. It breaks the flow. You; need to be able to show them on your tablet. For all of these use cases, there is QuTiP Virtual Lab – a tablet and web; optimized graphical interface for building and exploring simple quantum systems.; It runs entirely in your browser, so there’s no server and nothing to install.; Click the button below to get started!; Enter QuTiP Virtual Lab.; There’s a handy tutorial with videos included in the virtual lab itself and some pre-built systems; to get you started. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,qutip-virtual-lab.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-virtual-lab.html
https://qutip.org/qutip-virtual-lab.html:309,Usability,simpl,simple,309,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP Virtual Lab. Exploring simple quantum systems with QuTiP can help build intuition for them,; but there are many cases where writing code and Jupyter notebooks can get; in the way:. When teaching, coding can be a big distraction. Quantum mechanics is complex ; enough without your students having to struggle with installing software,; messing up their notebooks or learning QuTiP at the same time. When doing research, coding can be a big detour. You just want to do a quick; check to remind yourself how a simple system works, not spend the afternoon; fiddling in a text editor. You have papers to write and grant reports to fill; in. Time is precious. When at a party or while pitching your cool ideas, you don’t want to take out; your laptop to show people how cool your ideas are. It breaks the flow. You; need to be able to show them on your tablet. For all of these use cases, there is QuTiP Virtual Lab – a tablet and web; optimized graphical interface for building and exploring simple quantum systems.; It runs entirely in your browser, so there’s no server and nothing to install.; Click the button below to get started!; Enter QuTiP Virtual Lab.; There’s a handy tutorial with videos included in the virtual lab itself and some pre-built systems; to get you started. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,qutip-virtual-lab.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-virtual-lab.html
https://qutip.org/qutip-virtual-lab.html:358,Usability,intuit,intuition,358,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP Virtual Lab. Exploring simple quantum systems with QuTiP can help build intuition for them,; but there are many cases where writing code and Jupyter notebooks can get; in the way:. When teaching, coding can be a big distraction. Quantum mechanics is complex ; enough without your students having to struggle with installing software,; messing up their notebooks or learning QuTiP at the same time. When doing research, coding can be a big detour. You just want to do a quick; check to remind yourself how a simple system works, not spend the afternoon; fiddling in a text editor. You have papers to write and grant reports to fill; in. Time is precious. When at a party or while pitching your cool ideas, you don’t want to take out; your laptop to show people how cool your ideas are. It breaks the flow. You; need to be able to show them on your tablet. For all of these use cases, there is QuTiP Virtual Lab – a tablet and web; optimized graphical interface for building and exploring simple quantum systems.; It runs entirely in your browser, so there’s no server and nothing to install.; Click the button below to get started!; Enter QuTiP Virtual Lab.; There’s a handy tutorial with videos included in the virtual lab itself and some pre-built systems; to get you started. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,qutip-virtual-lab.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-virtual-lab.html
https://qutip.org/qutip-virtual-lab.html:651,Usability,learn,learning,651,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP Virtual Lab. Exploring simple quantum systems with QuTiP can help build intuition for them,; but there are many cases where writing code and Jupyter notebooks can get; in the way:. When teaching, coding can be a big distraction. Quantum mechanics is complex ; enough without your students having to struggle with installing software,; messing up their notebooks or learning QuTiP at the same time. When doing research, coding can be a big detour. You just want to do a quick; check to remind yourself how a simple system works, not spend the afternoon; fiddling in a text editor. You have papers to write and grant reports to fill; in. Time is precious. When at a party or while pitching your cool ideas, you don’t want to take out; your laptop to show people how cool your ideas are. It breaks the flow. You; need to be able to show them on your tablet. For all of these use cases, there is QuTiP Virtual Lab – a tablet and web; optimized graphical interface for building and exploring simple quantum systems.; It runs entirely in your browser, so there’s no server and nothing to install.; Click the button below to get started!; Enter QuTiP Virtual Lab.; There’s a handy tutorial with videos included in the virtual lab itself and some pre-built systems; to get you started. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,qutip-virtual-lab.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-virtual-lab.html
https://qutip.org/qutip-virtual-lab.html:793,Usability,simpl,simple,793,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP Virtual Lab. Exploring simple quantum systems with QuTiP can help build intuition for them,; but there are many cases where writing code and Jupyter notebooks can get; in the way:. When teaching, coding can be a big distraction. Quantum mechanics is complex ; enough without your students having to struggle with installing software,; messing up their notebooks or learning QuTiP at the same time. When doing research, coding can be a big detour. You just want to do a quick; check to remind yourself how a simple system works, not spend the afternoon; fiddling in a text editor. You have papers to write and grant reports to fill; in. Time is precious. When at a party or while pitching your cool ideas, you don’t want to take out; your laptop to show people how cool your ideas are. It breaks the flow. You; need to be able to show them on your tablet. For all of these use cases, there is QuTiP Virtual Lab – a tablet and web; optimized graphical interface for building and exploring simple quantum systems.; It runs entirely in your browser, so there’s no server and nothing to install.; Click the button below to get started!; Enter QuTiP Virtual Lab.; There’s a handy tutorial with videos included in the virtual lab itself and some pre-built systems; to get you started. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,qutip-virtual-lab.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-virtual-lab.html
https://qutip.org/qutip-virtual-lab.html:1273,Usability,simpl,simple,1273,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. QuTiP Virtual Lab. Exploring simple quantum systems with QuTiP can help build intuition for them,; but there are many cases where writing code and Jupyter notebooks can get; in the way:. When teaching, coding can be a big distraction. Quantum mechanics is complex ; enough without your students having to struggle with installing software,; messing up their notebooks or learning QuTiP at the same time. When doing research, coding can be a big detour. You just want to do a quick; check to remind yourself how a simple system works, not spend the afternoon; fiddling in a text editor. You have papers to write and grant reports to fill; in. Time is precious. When at a party or while pitching your cool ideas, you don’t want to take out; your laptop to show people how cool your ideas are. It breaks the flow. You; need to be able to show them on your tablet. For all of these use cases, there is QuTiP Virtual Lab – a tablet and web; optimized graphical interface for building and exploring simple quantum systems.; It runs entirely in your browser, so there’s no server and nothing to install.; Click the button below to get started!; Enter QuTiP Virtual Lab.; There’s a handy tutorial with videos included in the virtual lab itself and some pre-built systems; to get you started. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,qutip-virtual-lab.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-virtual-lab.html
https://qutip.org/users.html:3905,Availability,error,error,3905,"oherent oscillations inside a quantum manifold stabilized by dissipation"", ; arXiv:1705.02401. 350. Zhao et al., ""Two-photon driven Kerr resonator for quantum annealing with three-dimensional circuit QED"", ; arXiv:1712.03613. 349. Tezak et al., ""Low-dimensional manifolds for exact representation of open quantum systems"", ; Phys. Rev. A 96, 062113 (2017). 348. Lambert et al., ""Amplified and tunable transverse and longitudinal spin-photon coupling in hybrid circuit-QED"", ; arXiv:1712.02077. 347. Mirkin et al., ""In the quest of relations between non-Markovianity and quantum optimal control"", ; arXiv:1711.10551. 346. Gu et al., ""Topological edge states and pumping in a chain of coupled superconducting qubits"", ; arXiv:1711.06829. 345. Jiang et al., ""Quantum algorithms to simulate many-body physics of correlated fermions"", ; arXiv:1711.05395. 344. Brambilla et al., ""Heavy quarkonium suppression in a fireball"", ; arXiv:1711.04515. 343. Johnson et al., ""QVECTOR: an algorithm for device-tailored quantum error correction"", ; arXiv:1711.02249. 342. Li et al., ""Preparing entangled states between two NV centers via the damping of nanomechanical resonators"", ; Sci. Rep. 7, 14116 (2017). 341. Khan et al., ""Frequency combs in a lumped element Josephson junction circuit"", ; arXiv:1711.00772. 340. Trautmann et al., ""Trapped-ion quantum simulation of excitation transport: disordered, noisy, and long-range connected quantum networks"", ; arXiv:1710.09408. 339. Hu et al., ""Dark states and delocalization: competing effects of quantum coherence on the efficiency of light harvesting systems"", ; arXiv:1710.06792. 338. Potočnik et al., ""Studying Light-Harvesting Models with Superconducting Circuits"", ; arXiv:1710.07466. 337. Banchi et al., ""Driven Quantum Dynamics: Will It Blend?"", ; Phys. Rev. X 7, 041015 (2017). 336. Dhand et al., ""Quantum simulation via all-optically generated tensor network states"", ; arXiv:1710.06103. 335. Poonia et al., ""Quantum Biomimetic Modeling of Diamond NV- Center",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:20857,Availability,error,error,20857," SciPost Phys. 2, 003 (2017). 220. Dory et al., ""Tuning the photon statistics of a strongly coupled nanophotonic system"", ; Phys. Rev. A 95, 023804 (2017). 219. Lachance-Quirion et al., ""Resolving quanta of collective spin excitations in a millimeter-sized ferromagnet"", ; Science Advances 3, (2017). 218. Doyeux et al., ""Excitation injector in an atomic chain: Long-range transport and efficiency amplification"", ; Phys. Rev. A 95, 012138 (2017). 217. Roulet et al., ""Autonomous Rotor Heat Engine"", ; Phys. Rev. E 95, 062131 (2017). 216. Nigg et al., ""Robust quantum optimizer with full connectivity"", ; Science Advances 3, 1602273 (2017). 215. Puri et al., ""Quantum annealing with all-to-all connected nonlinear oscillators"", ; Nat. Commun. 8, 15785 (2017).>. 214. Shi et al., ""Model reduction of cavity nonlinear optics for photonic logic: a quasi-principal components approach"", ; J. Phys. D: Appl. Phys. 49, 465501 (2016). 213. McNally et al., ""Performance of 1D quantum cellular automata in the presence of error"", ; AIP Advances 6, 095115 (2016). 212. Zhong et al., ""Towards quantum entanglement of micromirrors via a two-level atom and radiation pressure"", ; arXiv:1609.00590. 211. Roth et al., ""Synchronization of active atomic clocks via quantum and classical channels"", ; Phys. Rev. A 94, 043841 (2016). 210. Jarlov et al., ""Effect of Pure Dephasing and Phonon Scattering on the Coupling of Semiconductor Quantum Dots to Optical Cavities"", ; Phys. Rev. Lett. 117, 076801 (2016). 209. Mahajan et al., ""Entanglement structure of non-equilibrium steady states"", ; arXiv:1608.05074. 208. Zhu et al., ""Implementing phase-covariant cloning in circuit quantum electrodynamics"", ; Annals of Physics 373, 512 (2016). 207. Fischer et al., ""Dynamical modeling of pulsed two-photon interference"", ; New J. Phys. 18, 113053 (2016).; Notebook1; Notebook2. 206. Seifoory et al., ""The properties of squeezed optical states created in lossy cavities"", ; arXiv:1608.05005. 205. Qin et al., ""Heralded quantum",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:22962,Availability,error,errors,22962," et al., ""Interactively Applying the Variational Method to the Dihydrogen Molecule: Exploring Bonding and Antibonding"", ; Journal of Chemical Education (2016). 203. Pleinert et al., ""Quantum signatures of collective behavior of a coherently driven two atom system coupled to a single-mode of the electromagnetic field"", ; arXiv:1608.00137. 202. Wang et al., ""Multiple-output microwave single-photon source using superconducting circuits with longitudinal and transverse couplings"", ; Phys. Rev. A 94, 053858 (2016). 201. Marshall et al., ""Continuous-variable quantum computing on encrypted data"", ; Nat. Comm. 7, 13795 (2016). 200. Dajka et al., ""Leggett–Garg inequalities for a quantum top affected by classical noise"", ; J. Quantum Inf. Process. (2016). 199. Rouxinol et al., ""Measurements of nanoresonator-qubit interactions in a hybrid quantum electromechanical system"", ; Nanotechnology 27, 364003 (2016). 198. Hocker et al., ""PEET: a Matlab tool for estimating physical gate errors in quantum information processing systems"", ; Quantum Information Processing (2016). 197. Daskin, ""Quantum eigenvalue estimation for irreducible non-negative matrices"", ; Int. J. Quantum Inform. 14, 1650005 (2016). 196. Dlaska et al., ""Robust quantum state transfer via topologically protected edge channels in dipolar arrays"", ; Quantum Sci. Technol. 2, 015001 (2017). 195. Juliusson et al., ""Manipulating Fock states of a harmonic oscillator while preserving its linearity"", ; Phys. Rev. A 94, 063861 (2016). 194. Banchi et al., ""Quantum gate learning in qubit networks: Toffoli gate without time-dependent control"", ; njp Quantum Information 2, 16019 (2016). 193. Hofer et al., ""Autonomous quantum refrigerator in a circuit QED architecture based on a Josephson junction"", ; Phys. Rev. B 94, 235420 (2016). 192. Sampaio et al., ""Calorimetric measurement of work for a driven harmonic oscillator"", ; Phys. Rev. E 94, 062122 (2016). 191. Molony et al., ""Production of ultracold 87Rb133Cs in the absolute ground s",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:29311,Availability,error,error,29311,"urement of a dynamic Mollow triplet in the solid state"", ; Nat. Photonics 10, 163 (2016). 157. Zhao et al., ""Vacuum Rabi Splitting in Nanomechanical QED System with Nonlinear Resonator"", ; arXiv:1603.00215. 156. Türkpençe et al., ""Quantum fuel with multilevel atomic coherence for ultrahigh specific work in a photonic Carnot engine"", ; Phys. Rev. E 93, 012145 (2016). 155. Joo et al., ""Deterministic amplification of Schrödinger cat states in circuit quantum electrodynamics"", ; New J. Phys. 18, 023028 (2016). 154. Hofer et al., ""Quantum heat engine based on photon-assisted Cooper pair tunneling"", ; Phys. Rev. B 93, 041418(R) (2016). 153. Hwang et al., ""Recurrent Delocalization and Quasiequilibration of Photons in Coupled Systems in Circuit Quantum Electrodynamics"", ; Phys. Rev. Lett. 116, 153601 (2016). 152. Gharavi et al., ""Readout of Majorana parity states using a quantum dot"", ; Phys. Rev. B 94, 155417 (2016). 151. Ofek et al., ""Extending the lifetime of a quantum bit with error correction in superconducting circuits"", ; Nature 536, 441 (2016). 150. Nunes et al., ""A Simple Scheme for Quantum Non Demolition of Phonons Number of the Nanoelectromechanics Systems"", ; arXiv:1601.03750. 149. Escobedo, ""Heavy quarkonium suppression in a fireball"", ; AIP Conf. Proc. 1701, 060009 (2016). 148. Straubel et al., ""Efficient mode conversion in an optical nanoantenna mediated by quantum emitters"", ; Opt. Lett. 41, 2294 (2016). 147. Ramos et al., ""Non-Markovian dynamics in chiral quantum networks with spins and photons"", ; Phys. Rev. A 93, 062104 (2016). 146. Souquet et al., ""Fock-state stabilization and emission in superconducting circuits using dc-biased Josephson junctions"", ; Phys. Rev. A 93, 060301(R) (2016). 145. Müller et al., ""Self-homodyne-enabled generation of indistinguishable photons"", ; Optica 3, 931 (2016). 144. Morrison et al., ""Low-Scaling Quantum Chemistry Approach to Excited-State Properties via an ab Initio Exciton Model: Application to Excitation Energy Transfer",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:48701,Availability,error,error,48701,"radiation from the dynamical Casimir effect"", ; Phys. Rev. A 87, 043804 (2013). 14. Majumdar et al., ""Coupling an electron spin in a semiconductor quantum dot to an optical nano-cavity"", ; Phys. Rev. Lett. 111, 027402 (2013). 13. Hardal et al., ""Spin squeezing, entanglement and coherence in two driven, dissipative, nonlinear cavities coupled with single and two-photon exchange"", ; J. Opt. Soc. Am. B 31, 1402 (2014). 12. Reiter et al., ""Steady-state entanglement of two superconducting qubits engineered by dissipation"", ; Phys. Rev. A 88, 032317 (2013). 11. Moelbjerg et al., ""Dynamical Properties of Nanolasers Based on Few Discrete Emitters"", ; Quantum Electronics, IEEE Journal of, 44 945 (2013). 10. Xu et al., ""Quantum Photovoltaic Effect in Double Quantum Dots"", ; Phys. Rev. B 87, 035429 (2013). 9. Li et al., ""Floquet poor man's Majorana fermions in double quantum dots"", ; arXiv:1301.3623. 8. Hardal et al., ""Discrete time quantum walk with nitrogen-vacancy centers in diamond coupled to a superconducting flux qubit"", ; Phys. Rev. A 88, 022303 (2013). 7. Grimsmo et al., ""Cavity QED simulation of qubit-oscillator dynamics in the ultrastrong coupling regime"", ; Phys. Rev. A 87, 033814 (2013). 6. Tipsmark et al., ""Displacement-enhanced entanglement distillation of single-mode-squeezed entangled states"", ; Opt. Express 21, 6670 (2013). 5. Nigg et al., ""Stabilizer quantum error correction toolbox for superconducting qubits"", ; Phys. Rev. Lett. 110, 243604 (2013). 4. Holloway et al., ""Optimal pair generation rate for Entanglement-based QKD"", ; Phys. Rev. A 87, 022342 (2013). 3. Murch et al., ""Cavity-assisted quantum bath engineering"", ; Phys. Rev. Lett. 109 183602 (2012). 2. Tezak et al., ""Specification of photonic circuits using Quantum Hardware Description Language"", ; Phil. Trans. R. Soc. A 370 5270 (2012). 1. Dereli et al., ""Two-Frequency Jahn-Teller Systems in Circuit QED"", ; Phys. Rev. A 85 053841 (2012). © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:15749,Deployability,upgrade,upgrade,15749,"2017). 258. Gely et al., ""Convergence of the multimode quantum Rabi model of circuit quantum electrodynamics"", ; Phys. Rev. B 95, 245115 (2017). 257. Radtke et al., ""Photonic Quantum Operations via the Quantum Carburettor Effect"", ; arXiv:1701.04251. 256. Lagoudakis et al., ""Observation of Mollow Triplets with Tunable Interactions in Double Lambda Systems of Individual Hole Spins"", ; Phys. Rev. Lett. 118, 013602 (2017). 255. Pucci et al., ""Quantum effects in the cooperative scattering of light by atomic clouds"", ; Phys. Rev. A 95, 053625 (2017). 254. Gessner et al., ""Resolution-enhanced entanglement detection"", ; Phys. Rev. A 95, 032326 (2017). 253. Nigg et al., ""Superconducting Grid-Bus Surface Code Architecture for Hole-Spin Qubits"", ; Phys. Rev. Lett. 118, 147701 (2017). 252. Lüer et al., ""Lévy Defects in Matrix-Immobilized J Aggregates: Tracing Intra-and Intersegmental Exciton Relaxation"", ; J. Phys. Chem. Lett. 8, 547 (2017). 251. Dive et al., ""In situ upgrade of quantum simulators to universal computers"", ; arXiv:1701.01723. 250. Barnes et al., ""Fast microwave-driven three-qubit gates for cavity-coupled superconducting qubits"", ; Phys. Rev. B 96, 024504 (2017). 249. Hu, ""Spin-based single-photon transistor, dynamic random access memory, diodes, and routers in semiconductors"", ; Phys. Rev. B 94, 245307 (2016). 248. Leung et al., ""Speedup for quantum optimal control from automatic differentiation based on graphics processing units"", ; Phys. Rev. A 95, 042318 (2017). 247. Bruhat et al., ""Strong coupling between an electron in a quantum dot circuit and a photon in a cavity"", ; arXiv:1612.05214. 246. Zanoci et al., ""Entanglement and thermalization in open fermion systems"", ; arXiv:1612.04840. 245. Volokitin et al., ""Computation of the asymptotic states of modulated open quantum systems with a numerically exact realization of the quantum trajectory method"", ; Phys. Rev. E 96, 053313 (2017). 244. Montenegro et al., ""Macroscopic nonclassical-state preparation via posts",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:37383,Deployability,continuous,continuous,37383,". Rev. B 92, 060406(R) 2015). 97. Nation, ""Steady-state solution methods for open quantum optical systems"", ; arXiv:1504.06768. 96. Higgins et al., ""Quantum-Enhanced Capture of Photons Using Optical Ratchet States"", ; J. Phys. Chem. C 121, 20714 (2017). 95. Bassereh et al., ""Perfect energy transport via single edge deletion in a complete network"", ; arXiv:1504.04398. 94. Wiśniewska et al., ""High performance computing and quantum trajectory method in CPU and GPU systems"", ; J. Phys.: Conf. Ser. 574, 012127 (2015). 93. Holland et al., ""Single-Photon-Resolved Cross-Kerr Interaction for Autonomous Stabilization of Photon-Number States"", ; Phys. Rev. Lett. 115, 180501 (2015). 92. Ardelt et al., ""Controlled tunneling-induced dephasing of Rabi rotations for high-fidelity hole spin initialization"", ; Phys. Rev. B 92, 115306 (2015). 91. Wallman et al., ""Estimating the coherence of noise"", ; New J. Phys. 17, 113020 (2015). 90. Černotík et al., ""Adiabatic elimination of Gaussian subsystems from quantum dynamics under continuous measurement"", ; Phys. Rev. A 92, 012124 (2015). 89. Müller et al., ""Ultrafast Polariton-Phonon Dynamics of Strongly Coupled Quantum Dot-Nanocavity Systems"", ; Phys. Rev. X 5, 031006 (2015). 88. Osipovs et al., ""Markov Chains in the Task of Author's Writing Style Profile Construction"", ; Information Technology and Management Science 17, 119 (2014). 87. Armour et al., ""Josephson photonics with a two-mode superconducting circuit"", ; Phys. Rev. B 91, 184508 (2015). 86. Li et al., ""Hybrid Quantum Device Based on NV Centers in Diamond Nanomechanical Resonators Plus Superconducting Waveguide Cavities"", ; Phys. Rev. Applied 4, 044003 (2015). 85. Li et al., ""Enhanced electromechanical coupling of a nanomechanical resonator to coupled superconducting cavities"", ; Sci. Rep. 6, 19065 (2016). 84. del Pino et al., ""Quantum theory of collective strong coupling of molecular vibrations with a microcavity mode"", ; New. J. Phys. 17, 053040 (2015). 83. Rossetti et al., ""Tr",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:44719,Deployability,continuous,continuous,44719,"ff et al., ""Unconditional quantum teleportation between distant solid-state quantum bits"", ; Science 345, 532 (2014). 42. Granade et al., ""Accelerated randomized benchmarking"", ; New J. Phys. 17, 013042 (2015). 41. Karakaya et al., ""Controlled excitations of surface plasmons via optical soliton photons in the quantum regime"", ; Phys. Scr. T160, 014020 (2014). 40. Hardal et al., ""Einstein–Podolsky–Rosen-type quantum entanglement between coupled cavities"", ; Phys. Scr. T160, 014016 (2014). 39. Kyriienko et al., ""Tunable single photon emission from dipolaritons"", ; Phys. Rev. A 90, 033807 (2014). 38. Prado et al., ""Steady Fock states via atomic reservoir"", ; Eur. Phys. Lett. 107, 13001 (2014). 37. Gessner et al., ""Observing a quantum phase transition by measuring a single spin"", ; Euro. Phys. Lett. 107, 40005 (2014). 36. Migdal et al., ""Multiphoton states related via linear optics"", ; Phys. Rev. A 89, 062329 (2014). 35. Haikka et al., ""Dissipative Landau-Zener level crossing subject to continuous measurement: Excitation despite decay"", ; Phys. Rev. A 89, 052114 (2014). 34. Peuntinger et al., ""Distribution of Squeezed States through an Atmospheric Channel"", ; Phys. Rev. Lett. 113, 060502 (2014). 33. Johansson et al., ""Entangled-state generation and Bell inequality violations in nanomechanical resonators"", ; Phys. Rev. B 90, 174307 (2014). 32. Xu et al., ""Nonadiabatic Dynamics of a Dissipative Two-level System"", ; Phys. Rev. A 89, 052102 (2014). 31. Nigg, ""Deterministic Hadamard gate for microwave ""cat-state"" qubits in cQED"", ; Phys. Rev. A 89, 022340 (2014). 30. Gessner et al., ""Nonlinear spectroscopy of controllable many-body quantum systems"", ; New J. Phys. 16, 092001 (2014). 29. Chen et al., ""Realization of a single-Cooper-pair Josephson laser"", ; Phys. Rev. B 90, 020506 (2014). 28. Dajka, ""Disentanglement of Qubits in Classical Limit of Interaction"", ; Int. J. Theor. Phys., (2013). 27. Lörch et al., ""Laser Theory for Optomechanics: Limit Cycles in the Quantum Regime",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:16998,Energy Efficiency,efficient,efficient,16998,"ynamic random access memory, diodes, and routers in semiconductors"", ; Phys. Rev. B 94, 245307 (2016). 248. Leung et al., ""Speedup for quantum optimal control from automatic differentiation based on graphics processing units"", ; Phys. Rev. A 95, 042318 (2017). 247. Bruhat et al., ""Strong coupling between an electron in a quantum dot circuit and a photon in a cavity"", ; arXiv:1612.05214. 246. Zanoci et al., ""Entanglement and thermalization in open fermion systems"", ; arXiv:1612.04840. 245. Volokitin et al., ""Computation of the asymptotic states of modulated open quantum systems with a numerically exact realization of the quantum trajectory method"", ; Phys. Rev. E 96, 053313 (2017). 244. Montenegro et al., ""Macroscopic nonclassical-state preparation via postselection"", ; Phys. Rev. A 96, 053851 (2017). 243. Cirio et al., ""Amplified Optomechanical Transduction of Virtual Radiation Pressure"", ; Phys. Rev. Lett. 119, 053601 (2017). 242. Romero et al., ""Quantum autoencoders for efficient compression of quantum data"", ; Quantum Sci. Technol. 2, 045001 (2017). 241. Zhong, ""Controllable and fast quantum-information transfer between distant nodes in two-dimensional networks"", ; Sci. Rep. 6, 8 (2016). 240. Guo et al., ""Giant acoustic atom: A single quantum system with a deterministic time delay"", ; Phys. Rev. A 95, 053821 (2017). 239. Vermersch et al., ""Quantum State Transfer via Noisy Photonic and Phononic Waveguides"", ; Phys. Rev. Lett. 118, 133601 (2017). 238. Gudmundsson et al., ""Time-dependent current into and through multilevel parallel quantum dots in a photon cavity"", ; Phys. Rev. B 95, 195307 (2017). 237. Braumüller et al., ""Analog quantum simulation of the Rabi model in the ultra-strong coupling regime"", ; Nat. Commun. 8, 779 (2017). 236. Lagoudakis et al., ""Ultrafast coherent manipulation of trions in site-controlled nanowire quantum dots"", ; Optica 3, 1430 (2016). 235. Roghani et al., ""Dissipative Preparation of Entangled Many-Body States with Rydberg Atoms"", ; arX",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:24968,Energy Efficiency,monitor,monitoring,24968,"complete characterisation of the STIRAP transfer"", ; ChemPhysChem (2016). 190. Moran, ""Quintuple: a Python 5-qubit quantum computer simulator to facilitate cloud quantum computing"", ; arXiv:1606.09225. 189. Falloon et al., ""QSWalk: A Mathematica package for quantum stochastic walks on arbitrary graphs"", ; Comp. Phys. Commun. 217, 162 (2017). 188. Lammers et al., ""Open-system many-body dynamics through interferometric measurements and feedback"", ; Phys. Rev. A 94, 052120 (2016). 187. Li et al., ""Hybrid Quantum Device with Nitrogen-Vacancy Centers in Diamond Coupled to Carbon Nanotubes"", ; Phys. Rev. Lett. 117, 015502 (2016). 186. Grimm et al., ""Optomechanical self-oscillations in an anharmonic potential: engineering a nonclassical steady state"", ; J. Opt. 18, 094004 (2016). 185. Puri et al., ""Engineering the quantum states of light in a Kerr-nonlinear resonator by two-photon driving"", ; npj Quantum Information 3, 18 (2017). 184. Rossatto et al., ""Relaxation time for monitoring the quantumness of an intense cavity field"", ; Phys. Rev. A 94, 033819 (2016). 183. Shackerley-Bennett et al., ""The reachable set of single-mode quadratic Hamiltonians"", ; J. Phys. A: Math. Theor. 50, 155203 (2017). 182. Blumoff et al., ""Implementing and Characterizing Precise Multiqubit Measurements"", ; Phys. Rev. X 6, 031041 (2016). 181. Li et al., ""Entangling a single NV centre with a superconducting qubit via parametric couplings between photons and phonons in a hybrid system"", ; Journal of Modern Optics (2016). 180. Straubel et al., ""Entangled light from bimodal optical nanoantennas"", ; Phys. Rev. B 95, 085421 (2017). 179. Vool et al., ""Continuous Quantum Nondemolition Measurement of the Transverse Component of a Qubit"", ; Phys. Rev. Lett. 117, 133601 (2016). 178. Granade et al., ""Practical adaptive quantum tomography"", ; New J. Phys. 19, 113017 (2017). 177. Plankensteiner et al., ""Laser noise imposed limitations of ensemble quantum metrology"", ; J. Phys. B: At. Mol. Opt. Phys. 49, 245501 ",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:25786,Energy Efficiency,adapt,adaptive,25786,"ring the quantum states of light in a Kerr-nonlinear resonator by two-photon driving"", ; npj Quantum Information 3, 18 (2017). 184. Rossatto et al., ""Relaxation time for monitoring the quantumness of an intense cavity field"", ; Phys. Rev. A 94, 033819 (2016). 183. Shackerley-Bennett et al., ""The reachable set of single-mode quadratic Hamiltonians"", ; J. Phys. A: Math. Theor. 50, 155203 (2017). 182. Blumoff et al., ""Implementing and Characterizing Precise Multiqubit Measurements"", ; Phys. Rev. X 6, 031041 (2016). 181. Li et al., ""Entangling a single NV centre with a superconducting qubit via parametric couplings between photons and phonons in a hybrid system"", ; Journal of Modern Optics (2016). 180. Straubel et al., ""Entangled light from bimodal optical nanoantennas"", ; Phys. Rev. B 95, 085421 (2017). 179. Vool et al., ""Continuous Quantum Nondemolition Measurement of the Transverse Component of a Qubit"", ; Phys. Rev. Lett. 117, 133601 (2016). 178. Granade et al., ""Practical adaptive quantum tomography"", ; New J. Phys. 19, 113017 (2017). 177. Plankensteiner et al., ""Laser noise imposed limitations of ensemble quantum metrology"", ; J. Phys. B: At. Mol. Opt. Phys. 49, 245501 (2016). 176. Levi et al., ""Coherent exciton dynamics in a dissipative environment maintained by an off-resonant vibrational mode"", ; Phys. Rev. A 93, 042109 (2016). 175. Li et al., ""Proposal for a quantum delayed-choice experiment with a spin-mechanical setup"", ; Phys. Rev. A 94, 042130 (2016). 174. Lambert et al., ""Leggett-Garg inequality violations with a large ensemble of qubits"", ; Phys. Rev. A 94, 012105 (2016). 173. Ardelt et al., ""Optical control of nonlinearly dressed states in an individual quantum dot"", ; Phys. Rev. B 93, 165305 (2016). 172. Nakajima et al., ""Phase control of local and non-local entanglement in a triple spin qubit"", ; arXiv:1604.02232. 171. Snijders et al., ""Purification of a single photon nonlinearity"", ; Nat. Commun. 7, 12578 (2016). 170. Levi et al., ""Designing spin-chan",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:27583,Energy Efficiency,charge,charge,27583,"l entanglement in a triple spin qubit"", ; arXiv:1604.02232. 171. Snijders et al., ""Purification of a single photon nonlinearity"", ; Nat. Commun. 7, 12578 (2016). 170. Levi et al., ""Designing spin-channel geometries for entanglement distribution"", ; Phys. Rev. A 94, 032302 (2016). 169. Vermersch et al., ""Implementation of chiral quantum optics with Rydberg and trapped-ion setups"", ; Phys. Rev. A 93, 063830 (2016). 168. Apollaro et al., ""Entanglement entropy in a periodically driven quantum Ising ring"", ; Phys. Rev. B 94, 134304 (2016). 167. Jonas, ""Fortran code for generating random probability vectors, unitaries, and quantum states"", ; Frontiers in ICT 3 (2016). 166. Ong et al., ""The Effect of Spin Squeezing on the Entanglement Entropy of Kicked Tops"", ; Entopy 18, 116 (2016). 165. Yang et al., ""Crosstalk-insensitive method for simultaneously coupling multiple pairs of resonators"", ; Phys. Rev. A 93, 042307 (2016). 164. Mavalankar et al., ""Photon-assisted tunneling and charge dephasing in a carbon nanotube double quantum dot"", ; Phys. Rev. B 93, 235428 (2016). 163. Hush et al., ""Quantum state transfer through time reversal of an optical channel"", ; Phys. Rev. A 94, 062302 (2016). 162. Royer et al., ""Fast and high-fidelity entangling gate through parametrically modulated longitudinal coupling"", ; Quantum 1, 11 (2017). 161. Lörch et al., ""Genuine Quantum Signatures in Synchronization of Anharmonic Self-Oscillators"", ; Phys. Rev. Lett. 117, 073601 (2016). 160. Ejtemaee et al., ""3D Sisyphus Cooling of Trapped Ions"", ; Phys. Rev. Lett. 119, 043001 (2017). 159. Rogers, ""The EPR Paradox Implies A Minimum Achievable Temperature"", ; Phys. Rev. E 95, 012149 (2017). 158. Fischer et al., ""Self-homodyne measurement of a dynamic Mollow triplet in the solid state"", ; Nat. Photonics 10, 163 (2016). 157. Zhao et al., ""Vacuum Rabi Splitting in Nanomechanical QED System with Nonlinear Resonator"", ; arXiv:1603.00215. 156. Türkpençe et al., ""Quantum fuel with multilevel atomic coherence ",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:32839,Energy Efficiency,energy,energy,32839,", 40004 (2015). 132. Iles-Smith et al., ""Energy transfer in structured and unstructured environments: Master equations beyond the Born-Markov approximations"", ; J. Chem. Phys. 144, 044110 (2016). 131. Korkmaz et al., ""Nuclear spin squeezing via electric quadrupole interaction"", ; Phys. Rev. A 93, 013812 (2016). 130. del Pino et al., ""Signatures of Vibrational Strong Coupling in Raman Scattering"", ; J. Phys. Chem. C 119, 29132 (2015). 129. Ardelt et al., ""Optical control of nonlinearly dressed states in an individual quantum dot"", ; Phys. Rev. B 93, 165305 (2016). 128. Deng et al., ""Coupling two distant double quantum dots to a microwave resonator"", ; Nano Letters 15, 6620 (2015). 127. Straubel et al., ""Plasmonic nanoantenna based triggered single-photon source"", ; Phys. Rev. B 93, 195412 (2016). 126. Levi et al., ""Robustness of Many-Body Localization in the Presence of Dissipation"", ; Phys. Rev. Lett. 116, 237203 (2016). 125. Verdon-Akzam et al., ""Asymptotically limitless quantum energy teleportation via qudit probes"", ; Phys. Rev. A 93, 022308 (2016). 124. Overbeck et al., ""Time evolution of open quantum many-body systems"", ; Phys. Rev. A 93, 012106 (2016). 123. Dast et al., ""Purity oscillations in Bose-Einstein condensates with balanced gain and loss"", ; Phys. Rev. A 93, 033617 (2016). 122. Zhao et al., ""Quantum statistics control with a plasmonic nanocavity: Multimode-enhanced interferences"", ; Phys. Rev. A 92, 033836 (2015). 121. Granade et al., ""Practical Bayesian tomography"", ; New J. Phys. 18, 033024 (2016). 120. Wan et al., ""Tolerance in the Ramsey interference of a trapped nanodiamond"", ; Phys. Rev. A 93, 043852 (2016). 119. Cirio et al., ""Ground State Electroluminescence"", ; Phys. Rev. Lett. 116, 113601 (2016). 118. Lee et al., ""Ramsey interference in a multilevel quantum system"", ; Phys. Rev. B 93, 085407 (2016). 117. Huang et al., ""Dark state in a nonlinear optomechanical system with quadratic coupling"", ; Phys. Rev. A 92, 013829 (2015). 116. Friis et al.",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:35917,Energy Efficiency,energy,energy,35917," consisting of an optomechanical device coupled to a two-level system"", ; Phys. Rev. A 92, 033806 (2015). 107. Mattioli et al., ""From classical to quantum non-equilibrium dynamics of Rydberg excitations in optical lattices"", ; New J. Phys. 17, 113039 (2015). 106. Lambert et al., ""Bistable Photon Emission from a Solid-State Single-Atom Laser"", ; Phys. Rev. Lett. 115, 216803 (2015). 105. Keller et al., ""Precise determination of micromotion for trapped-ion optical clocks"", ; J. Appl. Phys. 118, 104501 (2015). 104. Wen et al., ""A scheme for two-photon lasing with two coupled flux qubits in circuit quantum electrodynamics"", ; Chin. Phys. B 24, 064207 (2015). 103. Gessner et al., ""Probing polariton dynamics in trapped ions with phase-coherent two-dimensional spectroscopy"", ; J. Chem. Phys. 142, 212439 (2015). 102. Bretheau et al., ""Quantum dynamics of an electromagnetic mode that cannot contain N photons"", ; Science 348, 776 (2015). 101. Leggio et al., ""Thermally activated nonlocal amplification in quantum energy transport"", ; Euro. Phys. Lett 110, 40002 (2015). 100. Patrzyk et al., ""Towards a novel environment for simulation of quantum computing"", ; Computer Science 16, 103 (2015). 99. Plankensteiner et al., ""Selective protected state preparation of coupled dissipative quantum emitters"", ; Sci Rep. 5, 16231 (2015). 98. Goryachev et al., ""Single-photon level study of microwave properties of lithium niobate at millikelvin temperatures"", ; Phys. Rev. B 92, 060406(R) 2015). 97. Nation, ""Steady-state solution methods for open quantum optical systems"", ; arXiv:1504.06768. 96. Higgins et al., ""Quantum-Enhanced Capture of Photons Using Optical Ratchet States"", ; J. Phys. Chem. C 121, 20714 (2017). 95. Bassereh et al., ""Perfect energy transport via single edge deletion in a complete network"", ; arXiv:1504.04398. 94. Wiśniewska et al., ""High performance computing and quantum trajectory method in CPU and GPU systems"", ; J. Phys.: Conf. Ser. 574, 012127 (2015). 93. Holland et al., ""S",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:36645,Energy Efficiency,energy,energy,36645,"; J. Chem. Phys. 142, 212439 (2015). 102. Bretheau et al., ""Quantum dynamics of an electromagnetic mode that cannot contain N photons"", ; Science 348, 776 (2015). 101. Leggio et al., ""Thermally activated nonlocal amplification in quantum energy transport"", ; Euro. Phys. Lett 110, 40002 (2015). 100. Patrzyk et al., ""Towards a novel environment for simulation of quantum computing"", ; Computer Science 16, 103 (2015). 99. Plankensteiner et al., ""Selective protected state preparation of coupled dissipative quantum emitters"", ; Sci Rep. 5, 16231 (2015). 98. Goryachev et al., ""Single-photon level study of microwave properties of lithium niobate at millikelvin temperatures"", ; Phys. Rev. B 92, 060406(R) 2015). 97. Nation, ""Steady-state solution methods for open quantum optical systems"", ; arXiv:1504.06768. 96. Higgins et al., ""Quantum-Enhanced Capture of Photons Using Optical Ratchet States"", ; J. Phys. Chem. C 121, 20714 (2017). 95. Bassereh et al., ""Perfect energy transport via single edge deletion in a complete network"", ; arXiv:1504.04398. 94. Wiśniewska et al., ""High performance computing and quantum trajectory method in CPU and GPU systems"", ; J. Phys.: Conf. Ser. 574, 012127 (2015). 93. Holland et al., ""Single-Photon-Resolved Cross-Kerr Interaction for Autonomous Stabilization of Photon-Number States"", ; Phys. Rev. Lett. 115, 180501 (2015). 92. Ardelt et al., ""Controlled tunneling-induced dephasing of Rabi rotations for high-fidelity hole spin initialization"", ; Phys. Rev. B 92, 115306 (2015). 91. Wallman et al., ""Estimating the coherence of noise"", ; New J. Phys. 17, 113020 (2015). 90. Černotík et al., ""Adiabatic elimination of Gaussian subsystems from quantum dynamics under continuous measurement"", ; Phys. Rev. A 92, 012124 (2015). 89. Müller et al., ""Ultrafast Polariton-Phonon Dynamics of Strongly Coupled Quantum Dot-Nanocavity Systems"", ; Phys. Rev. X 5, 031006 (2015). 88. Osipovs et al., ""Markov Chains in the Task of Author's Writing Style Profile Construction"",",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:39858,Energy Efficiency,power,power,39858,". 79. Dalmonte et al., ""Cluster Luttinger liquids and emergent supersymmetric conformal critical points in the one-dimensional soft-shoulder Hubbard model"", ; Phys. Rev. B 92, 045106 (2015). 78. Weimer, ""Variational analysis of driven-dissipative Rydberg gases"", ; Phys. Rev. A 91, 063401 (2015). 77. Schulte et al., ""Quantum Algorithmic Readout in Multi-Ion Clocks"", ; Phys. Rev. Lett. 116, 013002 (2016). 76. Dalmonte et al., ""Realizing dipolar spin models with arrays of superconducting qubits"", ; Phys. Rev. B 92, 174507 (2015). 75. Neilinger et al., ""Two-photon lasing by a superconducting qubit"", ; Phys. Rev. B 91, 104516 (2015). 74. Elliott et al., ""Enhancement and state tomography of a squeezed vacuum with circuit quantum electrodynamics"", ; Phys. Rev. A 92, 013826 (2015). 73. Borregaard et al., ""Heralded Quantum Gates with Integrated Error Detection in Optical Cavities"", ; Phys. Rev. Lett. 114, 110502 (2015). 72. Killoran et al., ""Enhancing light-harvesting power with coherent vibrational interactions: a quantum heat engine picture"", ; J. Chem. Phys. 143, 155102 (2015). 71. Lu et al., ""Squeezed Optomechanics with Phase-Matched Amplification and Dissipation"", ; Phys. Rev. Lett. 114, 093602 (2015). 70. Hush et al., ""Spin correlations as a probe of quantum synchronization in trapped-ion phonon lasers"", ; Phys. Rev. A 91, 061401(R) (2015). 69. Hauke et al., ""Probing entanglement in adiabatic quantum optimization with trapped ions"", ; Front. Phys. 3, 21 (2015). 68. Nation et al., ""Iterative solutions to the steady-state density matrix for optomechanical systems"", ; Phys. Rev. E 91, 013307 (2015). 67. Schlawin et al., ""Nonlinear spectroscopy of trapped ions"", ; Phys. Rev. A 90, 023603 (2014). 66. Dunning et al., ""Composite pulses for interferometry in a thermal cold atom cloud"", ; Phys. Rev. A 90, 033608 (2014). 65. Rosado et al., ""Upper-bounded and sliced Jaynes- and anti-Jaynes-Cummings Hamiltonians and Liouvillians in cavity quantum electrodynamics"", ; J. Modern Opti",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:42790,Energy Efficiency,power,powered,42790," nanowire quantum dot"", ; arXiv:1409.4728v1. 57. Feist et al., ""Extraordinary Exciton Conductance Induced by Strong Coupling"", ; Phys. Rev. Lett. 114, 196402 (2015). 56. Molony et al., ""Creation of Ultracold 87RbCs Molecules in the Rovibrational Ground State"", ; Phys. Rev. Lett. 113, 255301 (2014). 55. Lecocq et al., ""Resolving the vacuum fluctuations of an optomechanical system using an artificial atom"", ; Nat. Phys. 11, 635 (2015). 54. Bassereh et al., ""Effect of Noise on the Efficiency of Quantum Excitation Energy Transfer in a Toy Model of a Linear Protein Structure"", ; arXiv:1408.6256. 53. Müller et al., ""Coherent Generation of Nonclassical Light on Chip via Detuned Photon Blockade"", ; Phys. Rev. Lett. 114, 233601 (2015). 52. Reimann et al., ""Cavity-Modified Collective Rayleigh Scattering of Two Atoms"", ; Phys. Rev. Lett. 114, 023601 (2015). 51. Ostermann et al., ""Protected subspace Ramsey metrology"", ; Phys. Rev. A 90, 053823 (2014). 50. Mari et al., ""Quantum optomechanical piston engines powered by heat"", ; J. Phys. B 48, 175501 (2015). 49. Lin et al., ""Josephson parametric phase-locked oscillator and its application to dispersive readout of superconducting qubits"", ; Nat. Commun. 5, 4480 (2014). 48. Lagoudakis et al., ""Hole Spin Pumping and Re-pumping in a p-type δ-doped InAs Quantum Dot"", ; Phys. Rev. B 90, 121402(R) (2014). 47. Figueiredo Roque et al., ""Dissipation-driven squeezed and sub-Poissonian mechanical states in quadratic optomechanical systems"", ; arXiv:1406.1987. 46. Hardal, ""Dynamics of mode entanglement in a system of cavities coupled with a chiral mirror"", ; J. Opt. Soc. Am. B 31, 2339 (2014). 45. Craddock et al., ""The Feasibility of Coherent Energy Transfer in Microtubules"", ; J. R. Soc. Interface 11, 1742 (2014). 44. Seilmeier et al., ""Optical Thermometry of an Electron Reservoir Coupled to a Single Quantum Dot in the Millikelvin Range"", ; Phys. Rev. Applied 2, 024002 (2014). 43. Pfaff et al., ""Unconditional quantum teleportation between dist",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:5502,Integrability,interface,interface,5502,"točnik et al., ""Studying Light-Harvesting Models with Superconducting Circuits"", ; arXiv:1710.07466. 337. Banchi et al., ""Driven Quantum Dynamics: Will It Blend?"", ; Phys. Rev. X 7, 041015 (2017). 336. Dhand et al., ""Quantum simulation via all-optically generated tensor network states"", ; arXiv:1710.06103. 335. Poonia et al., ""Quantum Biomimetic Modeling of Diamond NV- Center Spin Dynamics"", ; arXiv:1709.07632. 334. Nimmrichter et al., ""Quantum and classical dynamics of a three-mode absorption refrigerator"", ; Quantum 1, 37 (2017). 333. Qin et al., ""Exponentially-Enhanced Light-Matter Interaction, Cooperativities, and Steady-State Entanglement Using Parametric Amplification"", ; arXiv:1709.09555. 332. Ishibashi et al., ""Oscillation collapse in coupled quantum van der Pol oscillators"", ; Phys. Rev. E 96, 052210 (2017). 331. Elbin et al., ""Rényi Entropies from Random Quenches in Atomic Hubbard and Spin Models"", ; arXiv:1709.05060. 330. Li et al., ""Quantum microwave-optical interface with nitrogen-vacancy centers in diamond"", ; Phys. Rev. A 96, 032342 (2017). 329. Diguna et al., ""The coupling of single-photon exciton–biexciton quantum dot and cavity"", ; J. Nonlinear Optic. Phys. Mat. 1750029, (2017). 328. Lee et al., ""Effective formalism for open-quantum-system dynamics: Time-coarse-graining approach"", ; Phys. Rev. A 97, 012102 (2018). 327. de Moraes Neto et al., ""Steady many-body entanglements in dissipative systems"", ; Phys. Rev. A 96, 062313 (2017). 326. Zhang et al., ""Efficient numerical solution of excitation number conserving quantum systems"", ; AIP Advances 7, 085225 (2017). 325. Heuck et al., ""Temporally and frequency multiplexed single photon source using quantum feedback control for scalable photonic quantum technologies"", ; arXiv:1708.08875. 324. Kurian et al., ""Oxidative species-induced excitonic transport in tubulin aromatic networks: Potential implications for neurodegenerative disease"", ; J. Photochem. Photobiol. B: Biology (2017). 323. Hwang et al., ""Diss",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:9030,Integrability,synchroniz,synchronization,9030,"antumOptics.jl: A Julia framework for simulating open quantum systems"", ; arXiv:1707.01060. 310. Schneeweiss et al., ""Cold-atom based implementation of the quantum Rabi model"", ; arXiv:1706.07781. 309. Powell et al., ""Redfield Treatment of Multi-Pathway Electron Transfer in Artificial Photosynthetic Systems"", ; J. Phys. Chem. B (2017). 308. Qvarfort et al., ""Gravimetry through non-linear optomechanics"", ; arXiv:1706.09131. 307. Zhao et al., ""Circuit QED with qutrits: Coupling three or more atoms via virtual-photon exchange"", ; Phys. Rev. A 96, 043833 (2017). 306. Calic et al., ""Deterministic radiative coupling of two semiconductor quantum dots to the optical mode of a photonic crystal nanocavity"", ; Sci. Rep. 7, 4100 (2017). 305. Forn-Díaz et al., ""On-Demand Microwave Generator of Shaped Single Photons"", ; Phys. Rev. Appl. 8, 054015 (2017). 304. Bauckhage et al., ""Adiabatic Quantum Computing for Binary Clustering"", ; arXiv:1706.05528. 303. Nigg, ""Observing quantum synchronization blockade in circuit quantum electrodynamics"", ; Phys. Rev. A 97, 013811 (2018). 302. Liu et al., ""High Purcell factor generation of coherent on-chip single photons"", ; arXiv:1706.04422. 301. Román-Ancheyta et al., ""Dynamical Casimir effect in stochastic systems: Photon harvesting through noise"", ; Phys. Rev. A 96, 032501 (2017). 300. Hong et al., ""Hanbury Brown and Twiss interferometry of single phonons from an optomechanical resonator"", ; Science 358, 203 (2017). 299. Pérez-Ríos et al., ""Ultracold molecule assembly with photonic crystals"", ; New J. Phys. 19, 123035 (2017). 298. Zambrano-Serrano et al., ""Chaos generation in fractional-order switched systems and its digital implementation"", ; International Journal of Electronics and Communications (2017). 297. Yoshihara et al., ""Characteristic spectra of circuit quantum electrodynamics systems from the ultrastrong- to the deep-strong-coupling regime"", ; Phys. Rev. A 95, 053824 (2017). 296. Endo et al., ""Dynamics of an ultra-strongly-coupled s",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:12023,Integrability,rout,router,12023," constraints upon quantum control speed limits"", ; New J. Phys. 19, 103015 (2017). 287. Leroux et al., ""Simple variational ground state and pure-cat-state generation in the quantum Rabi model"", ; Phys. Rev. A 96, 043834 (2017). 286. Laflamme et al., ""Continuous measurement of an atomic current"", ; Phys. Rev. A 95, 043843 (2017). 285. de Assis et al., ""Negative response with an optical cavity and traveling wave fields"", ; Phys. Rev. A 96, 013821 (2017). 284. Gough, ""The Tyranny of Qubits - Quantum Technology's Scalability Bottleneck"", ; arXiv:1703.05342. 283. Hamsen et al., ""Two-Photon Blockade in an Atom-Driven Cavity QED System"", ; Phys. Rev. Lett. 118, 133604 (2017). 282. Hu et al., ""Accessing dark states optically through excitation-ferrying states"", ; arXiv:1703.09614. 281. Escobedo, ""Effective Field Theories for heavy probes in a hot QCD plasma and in the early universe"", ; EPJ Web of Conferences 137, 01008 (2017). 280. Hu, ""Photonic transistor and router using a single quantum-dot-confined spin in a single-sided optical microcavity"", ; Sci. Rep. 7, 45582 (2017). 279. Robertson et al., ""Tailored Codes for Small Quantum Memories"", ; Phys. Rev. Applied 8, 064004 (2017). 278. Raghunandan et al., ""High-density quantum sensing with dissipative first order transitions"", ; arXiv:1703.07358. 277. Gilmore et al., ""Amplitude Sensing below the Zero-Point Fluctuations with a Two-Dimensional Trapped-Ion Mechanical Oscillator"", ; Phys. Rev. Lett. 118, 263602 (2017). 276. Friedman et al., ""The Wigner Flow for Open Quantum Systems"", ; arXiv:1703.04844. 275. Lörch et al., ""Quantum Synchronization Blockade: Energy Quantization Hinders Synchronization of Identical Oscillators"", ; Phys. Rev. Lett. 118, 243602 (2017). 274. Manenti et al., ""Circuit quantum acoustodynamics with surface acoustic waves"", ; Nat. Commun. 8, 975 (2017). 273. Amitai et al., ""Synchronization of an optomechanical system to an external drive"", ; Phys. Rev. A 95, 053858 (2017). 272. Cesa et al., ""Two-qubit ent",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:16052,Integrability,rout,routers,16052," 256. Lagoudakis et al., ""Observation of Mollow Triplets with Tunable Interactions in Double Lambda Systems of Individual Hole Spins"", ; Phys. Rev. Lett. 118, 013602 (2017). 255. Pucci et al., ""Quantum effects in the cooperative scattering of light by atomic clouds"", ; Phys. Rev. A 95, 053625 (2017). 254. Gessner et al., ""Resolution-enhanced entanglement detection"", ; Phys. Rev. A 95, 032326 (2017). 253. Nigg et al., ""Superconducting Grid-Bus Surface Code Architecture for Hole-Spin Qubits"", ; Phys. Rev. Lett. 118, 147701 (2017). 252. Lüer et al., ""Lévy Defects in Matrix-Immobilized J Aggregates: Tracing Intra-and Intersegmental Exciton Relaxation"", ; J. Phys. Chem. Lett. 8, 547 (2017). 251. Dive et al., ""In situ upgrade of quantum simulators to universal computers"", ; arXiv:1701.01723. 250. Barnes et al., ""Fast microwave-driven three-qubit gates for cavity-coupled superconducting qubits"", ; Phys. Rev. B 96, 024504 (2017). 249. Hu, ""Spin-based single-photon transistor, dynamic random access memory, diodes, and routers in semiconductors"", ; Phys. Rev. B 94, 245307 (2016). 248. Leung et al., ""Speedup for quantum optimal control from automatic differentiation based on graphics processing units"", ; Phys. Rev. A 95, 042318 (2017). 247. Bruhat et al., ""Strong coupling between an electron in a quantum dot circuit and a photon in a cavity"", ; arXiv:1612.05214. 246. Zanoci et al., ""Entanglement and thermalization in open fermion systems"", ; arXiv:1612.04840. 245. Volokitin et al., ""Computation of the asymptotic states of modulated open quantum systems with a numerically exact realization of the quantum trajectory method"", ; Phys. Rev. E 96, 053313 (2017). 244. Montenegro et al., ""Macroscopic nonclassical-state preparation via postselection"", ; Phys. Rev. A 96, 053851 (2017). 243. Cirio et al., ""Amplified Optomechanical Transduction of Virtual Radiation Pressure"", ; Phys. Rev. Lett. 119, 053601 (2017). 242. Romero et al., ""Quantum autoencoders for efficient compression of quan",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:17514,Integrability,depend,dependent,17514,"es of modulated open quantum systems with a numerically exact realization of the quantum trajectory method"", ; Phys. Rev. E 96, 053313 (2017). 244. Montenegro et al., ""Macroscopic nonclassical-state preparation via postselection"", ; Phys. Rev. A 96, 053851 (2017). 243. Cirio et al., ""Amplified Optomechanical Transduction of Virtual Radiation Pressure"", ; Phys. Rev. Lett. 119, 053601 (2017). 242. Romero et al., ""Quantum autoencoders for efficient compression of quantum data"", ; Quantum Sci. Technol. 2, 045001 (2017). 241. Zhong, ""Controllable and fast quantum-information transfer between distant nodes in two-dimensional networks"", ; Sci. Rep. 6, 8 (2016). 240. Guo et al., ""Giant acoustic atom: A single quantum system with a deterministic time delay"", ; Phys. Rev. A 95, 053821 (2017). 239. Vermersch et al., ""Quantum State Transfer via Noisy Photonic and Phononic Waveguides"", ; Phys. Rev. Lett. 118, 133601 (2017). 238. Gudmundsson et al., ""Time-dependent current into and through multilevel parallel quantum dots in a photon cavity"", ; Phys. Rev. B 95, 195307 (2017). 237. Braumüller et al., ""Analog quantum simulation of the Rabi model in the ultra-strong coupling regime"", ; Nat. Commun. 8, 779 (2017). 236. Lagoudakis et al., ""Ultrafast coherent manipulation of trions in site-controlled nanowire quantum dots"", ; Optica 3, 1430 (2016). 235. Roghani et al., ""Dissipative Preparation of Entangled Many-Body States with Rydberg Atoms"", ; arXiv:1611.09612. 234. Lambert et al., ""Superradiance with an ensemble of superconducting flux qubits"", ; Phys. Rev. B 94, 224510 (2016). 233. Yanay et al., ""Shelving-style QND phonon-number detection in quantum optomechanics"", ; New J. Phys. 19, 033014 (2017). 232. Kirton et al., ""Suppressing and Restoring the Dicke Superradiance Transition by Dephasing and Decay"", ; Phys. Rev. Lett. 118, 123602 (2017). 231. Fischer et al., ""On-Chip Architecture for Self-Homodyned Nonclassical Light"", ; Phys. Rev. Applied 7, 044002 (2017).; Notebook. 230. Comb",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:20177,Integrability,inject,injector,20177,"-Phonon Interaction through Mode Field Coupling in Hybrid Optomechanical Systems"", ; Phys. Rev. Lett. 118, 133603 (2017). 224. Jonsson et al., ""Efficient determination of the Markovian time-evolution towards a steady-state of a complex open quantum system"", ; Comput. Phys. Commun. 220, 81 (2017). 223. Lahoz-Beltra, ""Quantum Genetic Algorithms for Computer Scientists"", ; Computers 5, 24 (2016). 222. Davis-Tilley et al., ""Synchronization of micromasers"", ; Phys. Rev. A 94, 063819 (2016). 221. Weinberg et al., ""QuSpin: a Python package for dynamics and exact diagonalisation of quantum many body systems part I: spin chains"", ; SciPost Phys. 2, 003 (2017). 220. Dory et al., ""Tuning the photon statistics of a strongly coupled nanophotonic system"", ; Phys. Rev. A 95, 023804 (2017). 219. Lachance-Quirion et al., ""Resolving quanta of collective spin excitations in a millimeter-sized ferromagnet"", ; Science Advances 3, (2017). 218. Doyeux et al., ""Excitation injector in an atomic chain: Long-range transport and efficiency amplification"", ; Phys. Rev. A 95, 012138 (2017). 217. Roulet et al., ""Autonomous Rotor Heat Engine"", ; Phys. Rev. E 95, 062131 (2017). 216. Nigg et al., ""Robust quantum optimizer with full connectivity"", ; Science Advances 3, 1602273 (2017). 215. Puri et al., ""Quantum annealing with all-to-all connected nonlinear oscillators"", ; Nat. Commun. 8, 15785 (2017).>. 214. Shi et al., ""Model reduction of cavity nonlinear optics for photonic logic: a quasi-principal components approach"", ; J. Phys. D: Appl. Phys. 49, 465501 (2016). 213. McNally et al., ""Performance of 1D quantum cellular automata in the presence of error"", ; AIP Advances 6, 095115 (2016). 212. Zhong et al., ""Towards quantum entanglement of micromirrors via a two-level atom and radiation pressure"", ; arXiv:1609.00590. 211. Roth et al., ""Synchronization of active atomic clocks via quantum and classical channels"", ; Phys. Rev. A 94, 043841 (2016). 210. Jarlov et al., ""Effect of Pure Dephasing and Phono",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:23568,Integrability,depend,dependent,23568,"rypted data"", ; Nat. Comm. 7, 13795 (2016). 200. Dajka et al., ""Leggett–Garg inequalities for a quantum top affected by classical noise"", ; J. Quantum Inf. Process. (2016). 199. Rouxinol et al., ""Measurements of nanoresonator-qubit interactions in a hybrid quantum electromechanical system"", ; Nanotechnology 27, 364003 (2016). 198. Hocker et al., ""PEET: a Matlab tool for estimating physical gate errors in quantum information processing systems"", ; Quantum Information Processing (2016). 197. Daskin, ""Quantum eigenvalue estimation for irreducible non-negative matrices"", ; Int. J. Quantum Inform. 14, 1650005 (2016). 196. Dlaska et al., ""Robust quantum state transfer via topologically protected edge channels in dipolar arrays"", ; Quantum Sci. Technol. 2, 015001 (2017). 195. Juliusson et al., ""Manipulating Fock states of a harmonic oscillator while preserving its linearity"", ; Phys. Rev. A 94, 063861 (2016). 194. Banchi et al., ""Quantum gate learning in qubit networks: Toffoli gate without time-dependent control"", ; njp Quantum Information 2, 16019 (2016). 193. Hofer et al., ""Autonomous quantum refrigerator in a circuit QED architecture based on a Josephson junction"", ; Phys. Rev. B 94, 235420 (2016). 192. Sampaio et al., ""Calorimetric measurement of work for a driven harmonic oscillator"", ; Phys. Rev. E 94, 062122 (2016). 191. Molony et al., ""Production of ultracold 87Rb133Cs in the absolute ground state: complete characterisation of the STIRAP transfer"", ; ChemPhysChem (2016). 190. Moran, ""Quintuple: a Python 5-qubit quantum computer simulator to facilitate cloud quantum computing"", ; arXiv:1606.09225. 189. Falloon et al., ""QSWalk: A Mathematica package for quantum stochastic walks on arbitrary graphs"", ; Comp. Phys. Commun. 217, 162 (2017). 188. Lammers et al., ""Open-system many-body dynamics through interferometric measurements and feedback"", ; Phys. Rev. A 94, 052120 (2016). 187. Li et al., ""Hybrid Quantum Device with Nitrogen-Vacancy Centers in Diamond Coupled to Ca",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:29698,Integrability,mediat,mediated,29698,"). 155. Joo et al., ""Deterministic amplification of Schrödinger cat states in circuit quantum electrodynamics"", ; New J. Phys. 18, 023028 (2016). 154. Hofer et al., ""Quantum heat engine based on photon-assisted Cooper pair tunneling"", ; Phys. Rev. B 93, 041418(R) (2016). 153. Hwang et al., ""Recurrent Delocalization and Quasiequilibration of Photons in Coupled Systems in Circuit Quantum Electrodynamics"", ; Phys. Rev. Lett. 116, 153601 (2016). 152. Gharavi et al., ""Readout of Majorana parity states using a quantum dot"", ; Phys. Rev. B 94, 155417 (2016). 151. Ofek et al., ""Extending the lifetime of a quantum bit with error correction in superconducting circuits"", ; Nature 536, 441 (2016). 150. Nunes et al., ""A Simple Scheme for Quantum Non Demolition of Phonons Number of the Nanoelectromechanics Systems"", ; arXiv:1601.03750. 149. Escobedo, ""Heavy quarkonium suppression in a fireball"", ; AIP Conf. Proc. 1701, 060009 (2016). 148. Straubel et al., ""Efficient mode conversion in an optical nanoantenna mediated by quantum emitters"", ; Opt. Lett. 41, 2294 (2016). 147. Ramos et al., ""Non-Markovian dynamics in chiral quantum networks with spins and photons"", ; Phys. Rev. A 93, 062104 (2016). 146. Souquet et al., ""Fock-state stabilization and emission in superconducting circuits using dc-biased Josephson junctions"", ; Phys. Rev. A 93, 060301(R) (2016). 145. Müller et al., ""Self-homodyne-enabled generation of indistinguishable photons"", ; Optica 3, 931 (2016). 144. Morrison et al., ""Low-Scaling Quantum Chemistry Approach to Excited-State Properties via an ab Initio Exciton Model: Application to Excitation Energy Transfer in a Self-Assembled Nanotube"", ; J. Phys. Chem. Lett. 6, 4390 (2015). 143. Yamamoto et al., ""Parametric Amplifier and Oscillator Based on Josephson Junction Circuitry"", ; Lecture Notes in Physics 911, 495 (2016). 142. Dory et al., ""Complete Coherent Control of a Quantum Dot Strongly Coupled to a Nanocavity"", ; Sci. Rep. 6, 25172 (2016). 141. Kaczmarczyk et al., """,MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:34745,Integrability,wrap,wrapper,34745,"em with quadratic coupling"", ; Phys. Rev. A 92, 013829 (2015). 116. Friis et al., ""Coherent controlization using superconducting qubits"", ; Sci. Rep. 5, 18036 (2015). 115. Glaser et al., ""Training Schrödinger's cat: quantum optimal control"", ; Eur. Phys. J. D 69, 279 (2015). 114. Łobejko et al., ""Interference of qubits in pure dephasing and almost pure dephasing environments"", ; J. Phys. A: Math. Theor. 48, 275302 (2015). 113. Hua et al., ""Quantum state transfer and controlled-phase gate on one-dimensional superconducting resonators assisted by a quantum bus"", ; Sci. Rep. 6, 22037 (2016). 112. Layden et al., ""Universal scheme for indirect quantum control"", ; Phys. Rev. A 93, 040301(R) (2016). 111. Zhang et al., ""Coherent manipulation of a Majorana qubit by a mechanical resonator"", ; Phys. Rev. B 92, 115303 (2015). 110. Yang et al., ""Entangling superconducting qubits in a multi-cavity system"", ; New. J. Phys. 18, 013025 (2016). 109. Hou et al., ""A multi-model Python wrapper for operational oil spill transport forecasts"", ; Comput. Sci. Disc. 8, 014004 (2015). 108. Wang et al., ""Tunable photon blockade in a hybrid system consisting of an optomechanical device coupled to a two-level system"", ; Phys. Rev. A 92, 033806 (2015). 107. Mattioli et al., ""From classical to quantum non-equilibrium dynamics of Rydberg excitations in optical lattices"", ; New J. Phys. 17, 113039 (2015). 106. Lambert et al., ""Bistable Photon Emission from a Solid-State Single-Atom Laser"", ; Phys. Rev. Lett. 115, 216803 (2015). 105. Keller et al., ""Precise determination of micromotion for trapped-ion optical clocks"", ; J. Appl. Phys. 118, 104501 (2015). 104. Wen et al., ""A scheme for two-photon lasing with two coupled flux qubits in circuit quantum electrodynamics"", ; Chin. Phys. B 24, 064207 (2015). 103. Gessner et al., ""Probing polariton dynamics in trapped ions with phase-coherent two-dimensional spectroscopy"", ; J. Chem. Phys. 142, 212439 (2015). 102. Bretheau et al., ""Quantum dynamics of an elec",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:40160,Integrability,synchroniz,synchronization,40160," 063401 (2015). 77. Schulte et al., ""Quantum Algorithmic Readout in Multi-Ion Clocks"", ; Phys. Rev. Lett. 116, 013002 (2016). 76. Dalmonte et al., ""Realizing dipolar spin models with arrays of superconducting qubits"", ; Phys. Rev. B 92, 174507 (2015). 75. Neilinger et al., ""Two-photon lasing by a superconducting qubit"", ; Phys. Rev. B 91, 104516 (2015). 74. Elliott et al., ""Enhancement and state tomography of a squeezed vacuum with circuit quantum electrodynamics"", ; Phys. Rev. A 92, 013826 (2015). 73. Borregaard et al., ""Heralded Quantum Gates with Integrated Error Detection in Optical Cavities"", ; Phys. Rev. Lett. 114, 110502 (2015). 72. Killoran et al., ""Enhancing light-harvesting power with coherent vibrational interactions: a quantum heat engine picture"", ; J. Chem. Phys. 143, 155102 (2015). 71. Lu et al., ""Squeezed Optomechanics with Phase-Matched Amplification and Dissipation"", ; Phys. Rev. Lett. 114, 093602 (2015). 70. Hush et al., ""Spin correlations as a probe of quantum synchronization in trapped-ion phonon lasers"", ; Phys. Rev. A 91, 061401(R) (2015). 69. Hauke et al., ""Probing entanglement in adiabatic quantum optimization with trapped ions"", ; Front. Phys. 3, 21 (2015). 68. Nation et al., ""Iterative solutions to the steady-state density matrix for optomechanical systems"", ; Phys. Rev. E 91, 013307 (2015). 67. Schlawin et al., ""Nonlinear spectroscopy of trapped ions"", ; Phys. Rev. A 90, 023603 (2014). 66. Dunning et al., ""Composite pulses for interferometry in a thermal cold atom cloud"", ; Phys. Rev. A 90, 033608 (2014). 65. Rosado et al., ""Upper-bounded and sliced Jaynes- and anti-Jaynes-Cummings Hamiltonians and Liouvillians in cavity quantum electrodynamics"", ; J. Modern Optics 62, 1561 (2015). 64. Braumüller et al., ""Multiphoton dressing of an anharmonic superconducting many-level quantum circuit"", ; Phys. Rev. B 91, 054523 (2015). 63. Hu et al., ""Quantum coherence in ultrastrong optomechanics"", ; Phys. Rev. A 91, 013812 (2015). 62. Weimer, ""Variation",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:2782,Modifiability,coupling,coupling,2782,"; arXiv:1712.09762. 359. Dahlberg et al., ""SimulaQron - A simulator for developing quantum internet software"", ; arXiv:1712.08032. 358. Abdel-Wahab et al., ""Dynamic evolution of double Λ five-level atom interacting with one-mode electromagnetic cavity field"", ; Pramana - J. Phys. 89, 87 (2017). 357. Dai et al., ""Quantum simulation of the general semi-classical Rabi model in regimes of arbitrarily strong driving"", ; Appl. Phys. Lett. 111, 242601 (2017). 356. Zhou et al., ""Simulating the Lipkin-Meshkov-Glick model in a hybrid quantum system"", ; arXiv:1712.06234. 355. Otterbach et al., ""Unsupervised Machine Learning on a Hybrid Quantum Computer"", ; arXiv:1712.05771. 354. Wang et al., ""Parallel quantum operations with chiral spin states in a superconducting circuit"", ; arXiv:1712.05261. 353. Tugen et al., ""A Comparative Study of Coupled High-Q Cavity-Quantum Dot System Regarding Dipole Induced Transparency"", ; arXiv:1712.01944. 352. Chen et al., ""Tuning coupling between superconducting resonators with collective qubits"", ; arXiv:1712.04357. 351. Touzard et al., ""Coherent oscillations inside a quantum manifold stabilized by dissipation"", ; arXiv:1705.02401. 350. Zhao et al., ""Two-photon driven Kerr resonator for quantum annealing with three-dimensional circuit QED"", ; arXiv:1712.03613. 349. Tezak et al., ""Low-dimensional manifolds for exact representation of open quantum systems"", ; Phys. Rev. A 96, 062113 (2017). 348. Lambert et al., ""Amplified and tunable transverse and longitudinal spin-photon coupling in hybrid circuit-QED"", ; arXiv:1712.02077. 347. Mirkin et al., ""In the quest of relations between non-Markovianity and quantum optimal control"", ; arXiv:1711.10551. 346. Gu et al., ""Topological edge states and pumping in a chain of coupled superconducting qubits"", ; arXiv:1711.06829. 345. Jiang et al., ""Quantum algorithms to simulate many-body physics of correlated fermions"", ; arXiv:1711.05395. 344. Brambilla et al., ""Heavy quarkonium suppression in a fireball"", ; arX",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:3335,Modifiability,coupling,coupling,3335,"lick model in a hybrid quantum system"", ; arXiv:1712.06234. 355. Otterbach et al., ""Unsupervised Machine Learning on a Hybrid Quantum Computer"", ; arXiv:1712.05771. 354. Wang et al., ""Parallel quantum operations with chiral spin states in a superconducting circuit"", ; arXiv:1712.05261. 353. Tugen et al., ""A Comparative Study of Coupled High-Q Cavity-Quantum Dot System Regarding Dipole Induced Transparency"", ; arXiv:1712.01944. 352. Chen et al., ""Tuning coupling between superconducting resonators with collective qubits"", ; arXiv:1712.04357. 351. Touzard et al., ""Coherent oscillations inside a quantum manifold stabilized by dissipation"", ; arXiv:1705.02401. 350. Zhao et al., ""Two-photon driven Kerr resonator for quantum annealing with three-dimensional circuit QED"", ; arXiv:1712.03613. 349. Tezak et al., ""Low-dimensional manifolds for exact representation of open quantum systems"", ; Phys. Rev. A 96, 062113 (2017). 348. Lambert et al., ""Amplified and tunable transverse and longitudinal spin-photon coupling in hybrid circuit-QED"", ; arXiv:1712.02077. 347. Mirkin et al., ""In the quest of relations between non-Markovianity and quantum optimal control"", ; arXiv:1711.10551. 346. Gu et al., ""Topological edge states and pumping in a chain of coupled superconducting qubits"", ; arXiv:1711.06829. 345. Jiang et al., ""Quantum algorithms to simulate many-body physics of correlated fermions"", ; arXiv:1711.05395. 344. Brambilla et al., ""Heavy quarkonium suppression in a fireball"", ; arXiv:1711.04515. 343. Johnson et al., ""QVECTOR: an algorithm for device-tailored quantum error correction"", ; arXiv:1711.02249. 342. Li et al., ""Preparing entangled states between two NV centers via the damping of nanomechanical resonators"", ; Sci. Rep. 7, 14116 (2017). 341. Khan et al., ""Frequency combs in a lumped element Josephson junction circuit"", ; arXiv:1711.00772. 340. Trautmann et al., ""Trapped-ion quantum simulation of excitation transport: disordered, noisy, and long-range connected quantum net",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:5614,Modifiability,coupling,coupling,5614,"uantum Dynamics: Will It Blend?"", ; Phys. Rev. X 7, 041015 (2017). 336. Dhand et al., ""Quantum simulation via all-optically generated tensor network states"", ; arXiv:1710.06103. 335. Poonia et al., ""Quantum Biomimetic Modeling of Diamond NV- Center Spin Dynamics"", ; arXiv:1709.07632. 334. Nimmrichter et al., ""Quantum and classical dynamics of a three-mode absorption refrigerator"", ; Quantum 1, 37 (2017). 333. Qin et al., ""Exponentially-Enhanced Light-Matter Interaction, Cooperativities, and Steady-State Entanglement Using Parametric Amplification"", ; arXiv:1709.09555. 332. Ishibashi et al., ""Oscillation collapse in coupled quantum van der Pol oscillators"", ; Phys. Rev. E 96, 052210 (2017). 331. Elbin et al., ""Rényi Entropies from Random Quenches in Atomic Hubbard and Spin Models"", ; arXiv:1709.05060. 330. Li et al., ""Quantum microwave-optical interface with nitrogen-vacancy centers in diamond"", ; Phys. Rev. A 96, 032342 (2017). 329. Diguna et al., ""The coupling of single-photon exciton–biexciton quantum dot and cavity"", ; J. Nonlinear Optic. Phys. Mat. 1750029, (2017). 328. Lee et al., ""Effective formalism for open-quantum-system dynamics: Time-coarse-graining approach"", ; Phys. Rev. A 97, 012102 (2018). 327. de Moraes Neto et al., ""Steady many-body entanglements in dissipative systems"", ; Phys. Rev. A 96, 062313 (2017). 326. Zhang et al., ""Efficient numerical solution of excitation number conserving quantum systems"", ; AIP Advances 7, 085225 (2017). 325. Heuck et al., ""Temporally and frequency multiplexed single photon source using quantum feedback control for scalable photonic quantum technologies"", ; arXiv:1708.08875. 324. Kurian et al., ""Oxidative species-induced excitonic transport in tubulin aromatic networks: Potential implications for neurodegenerative disease"", ; J. Photochem. Photobiol. B: Biology (2017). 323. Hwang et al., ""Dissipative phase transition in the open quantum Rabi model"", ; Phys. Rev. A 97, 013825 (2018). 322. Higgins et al., ""Coherent Contro",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:8660,Modifiability,coupling,coupling,8660,"opy of Entanglement Hamiltonians"", ; arXiv:1707.04455. 313. Gu et al., ""Microwave photonics with superconducting quantum circuits"", ; Phys. Rep. 718-719, 1 (2017). 312. Kiršanskas et al., ""QmeQ 1.0: An open-source Python package for calculations of transport through quantum dot devices"", ; Comput. Phys. Commun. 221, 317 (2017). 311. Krämer et al., ""QuantumOptics.jl: A Julia framework for simulating open quantum systems"", ; arXiv:1707.01060. 310. Schneeweiss et al., ""Cold-atom based implementation of the quantum Rabi model"", ; arXiv:1706.07781. 309. Powell et al., ""Redfield Treatment of Multi-Pathway Electron Transfer in Artificial Photosynthetic Systems"", ; J. Phys. Chem. B (2017). 308. Qvarfort et al., ""Gravimetry through non-linear optomechanics"", ; arXiv:1706.09131. 307. Zhao et al., ""Circuit QED with qutrits: Coupling three or more atoms via virtual-photon exchange"", ; Phys. Rev. A 96, 043833 (2017). 306. Calic et al., ""Deterministic radiative coupling of two semiconductor quantum dots to the optical mode of a photonic crystal nanocavity"", ; Sci. Rep. 7, 4100 (2017). 305. Forn-Díaz et al., ""On-Demand Microwave Generator of Shaped Single Photons"", ; Phys. Rev. Appl. 8, 054015 (2017). 304. Bauckhage et al., ""Adiabatic Quantum Computing for Binary Clustering"", ; arXiv:1706.05528. 303. Nigg, ""Observing quantum synchronization blockade in circuit quantum electrodynamics"", ; Phys. Rev. A 97, 013811 (2018). 302. Liu et al., ""High Purcell factor generation of coherent on-chip single photons"", ; arXiv:1706.04422. 301. Román-Ancheyta et al., ""Dynamical Casimir effect in stochastic systems: Photon harvesting through noise"", ; Phys. Rev. A 96, 032501 (2017). 300. Hong et al., ""Hanbury Brown and Twiss interferometry of single phonons from an optomechanical resonator"", ; Science 358, 203 (2017). 299. Pérez-Ríos et al., ""Ultracold molecule assembly with photonic crystals"", ; New J. Phys. 19, 123035 (2017). 298. Zambrano-Serrano et al., ""Chaos generation in fractional-order swit",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:9942,Modifiability,coupling,coupling,9942,"17). 304. Bauckhage et al., ""Adiabatic Quantum Computing for Binary Clustering"", ; arXiv:1706.05528. 303. Nigg, ""Observing quantum synchronization blockade in circuit quantum electrodynamics"", ; Phys. Rev. A 97, 013811 (2018). 302. Liu et al., ""High Purcell factor generation of coherent on-chip single photons"", ; arXiv:1706.04422. 301. Román-Ancheyta et al., ""Dynamical Casimir effect in stochastic systems: Photon harvesting through noise"", ; Phys. Rev. A 96, 032501 (2017). 300. Hong et al., ""Hanbury Brown and Twiss interferometry of single phonons from an optomechanical resonator"", ; Science 358, 203 (2017). 299. Pérez-Ríos et al., ""Ultracold molecule assembly with photonic crystals"", ; New J. Phys. 19, 123035 (2017). 298. Zambrano-Serrano et al., ""Chaos generation in fractional-order switched systems and its digital implementation"", ; International Journal of Electronics and Communications (2017). 297. Yoshihara et al., ""Characteristic spectra of circuit quantum electrodynamics systems from the ultrastrong- to the deep-strong-coupling regime"", ; Phys. Rev. A 95, 053824 (2017). 296. Endo et al., ""Dynamics of an ultra-strongly-coupled system interacting with a driven nonlinear resonator"", ; arXiv:1705.08688. 295. Venkatesh et al., ""Cooperative Effects in Closely Packed Quantum Emitters with Collective Dephasing"", ; Phys. Rev. Lett. 120, 033602 (2018). 294. Snijders et al., ""A fiber coupled cavity QED source of identical single photons"", ; arXiv:1705.05876. 293. Zanker et al., ""Analyzing the spectral density of a perturbed analog quantum simulator using Keldysh formalism"", ; arXiv:1705.02325. 292. Csurgay et al., ""Toward engineering design of quantum circuits"", ; Int. J. Circ. Theor. Appl. (2017). 291. Megyeri et al., ""Why material slow light does not improve cavity-enhanced atom detection"", ; J. Mod. Phys. (2017). 290. Huembeli et al., ""Towards a heralded eigenstate-preserving measurement of multi-qubit parity in circuit QED"", ; Phys. Rev. A 96, 012313 (2017). 289. Sh",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:10694,Modifiability,enhance,enhanced,10694,"ional-order switched systems and its digital implementation"", ; International Journal of Electronics and Communications (2017). 297. Yoshihara et al., ""Characteristic spectra of circuit quantum electrodynamics systems from the ultrastrong- to the deep-strong-coupling regime"", ; Phys. Rev. A 95, 053824 (2017). 296. Endo et al., ""Dynamics of an ultra-strongly-coupled system interacting with a driven nonlinear resonator"", ; arXiv:1705.08688. 295. Venkatesh et al., ""Cooperative Effects in Closely Packed Quantum Emitters with Collective Dephasing"", ; Phys. Rev. Lett. 120, 033602 (2018). 294. Snijders et al., ""A fiber coupled cavity QED source of identical single photons"", ; arXiv:1705.05876. 293. Zanker et al., ""Analyzing the spectral density of a perturbed analog quantum simulator using Keldysh formalism"", ; arXiv:1705.02325. 292. Csurgay et al., ""Toward engineering design of quantum circuits"", ; Int. J. Circ. Theor. Appl. (2017). 291. Megyeri et al., ""Why material slow light does not improve cavity-enhanced atom detection"", ; J. Mod. Phys. (2017). 290. Huembeli et al., ""Towards a heralded eigenstate-preserving measurement of multi-qubit parity in circuit QED"", ; Phys. Rev. A 96, 012313 (2017). 289. Shammah et al., ""Superradiance with local phase-breaking effects"", ; Phys. Rev. A 96, 023863 (2017). 288. Arenz et al., ""The roles of drift and control field constraints upon quantum control speed limits"", ; New J. Phys. 19, 103015 (2017). 287. Leroux et al., ""Simple variational ground state and pure-cat-state generation in the quantum Rabi model"", ; Phys. Rev. A 96, 043834 (2017). 286. Laflamme et al., ""Continuous measurement of an atomic current"", ; Phys. Rev. A 95, 043843 (2017). 285. de Assis et al., ""Negative response with an optical cavity and traveling wave fields"", ; Phys. Rev. A 96, 013821 (2017). 284. Gough, ""The Tyranny of Qubits - Quantum Technology's Scalability Bottleneck"", ; arXiv:1703.05342. 283. Hamsen et al., ""Two-Photon Blockade in an Atom-Driven Cavity QED",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:13996,Modifiability,enhance,enhancement,13996,"17). 272. Cesa et al., ""Two-qubit entangling gates between distant atomic qubits in a lattice"", ; Phys. Rev. A 95, 052330 (2017). 271. Ren et al., ""Evanescent-Vacuum-Enhanced Photon-Exciton Coupling and Fluorescence Collection"", ; Phys. Rev. Lett. 118, 073604 (2017). 270. Chu et al., ""Quantum acoustics with superconducting qubits"", ; Science 358, 199 (2017). 269. Fischer et al., ""Signatures of two-photon pulses from a quantum two-level system"", ; Nat. Phys. 13, 649 (2017). 268. Marshman et al., ""Investigating and improving student understanding of the probability distributions for measuring physical observables in quantum mechanics"", ; Eur. J. Phys. 38, 025705 (2017). 267. Borges et al., ""Influence of the asymmetric excited state decay on coherent population trapping: atom × quantum dot"", ; arXiv:1702.07692. 266. Pleinert et al., ""Hyperradiance from collective behavior of coherently driven atoms"", ; Optica 4, 779 (2017). 265. Oviedo-Casado et al., ""Magnetic field enhancement of organic photovoltaic cells performance"", ; Sci. Rep. 7, 4297 (2017). 264. Whalen et al., ""Open quantum systems with delayed coherent feedback"", ; Quantum Sci. Technol. 2, 044008 (2017). 263. Cottet et al., ""Observing a quantum Maxwell demon at work"", ; Proc. Natl. Acad. Sci. U.S.A. 114, 7561 (2017). 262. Mazloom et al., ""Adiabatic state preparation of stripe phases with strongly magnetic atoms"", ; Phys. Rev. A 96, 033602 (2017). 261. Poonia et al., ""Functional window of the avian compass"", ; Phys. Rev. E 95, 052417 (2017). 260. Su et al., ""Generating double NOON states of photons in circuit QED"", ; Phys. Rev. A 95, 022339 (2017). 259. Kiukas et al., ""Remote parameter estimation in a quantum spin chain enhanced by local control"", ; Phys. Rev. A 95, 052132 (2017). 258. Gely et al., ""Convergence of the multimode quantum Rabi model of circuit quantum electrodynamics"", ; Phys. Rev. B 95, 245115 (2017). 257. Radtke et al., ""Photonic Quantum Operations via the Quantum Carburettor Effect"", ; arXiv:17",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:14722,Modifiability,enhance,enhanced,14722,"., ""Influence of the asymmetric excited state decay on coherent population trapping: atom × quantum dot"", ; arXiv:1702.07692. 266. Pleinert et al., ""Hyperradiance from collective behavior of coherently driven atoms"", ; Optica 4, 779 (2017). 265. Oviedo-Casado et al., ""Magnetic field enhancement of organic photovoltaic cells performance"", ; Sci. Rep. 7, 4297 (2017). 264. Whalen et al., ""Open quantum systems with delayed coherent feedback"", ; Quantum Sci. Technol. 2, 044008 (2017). 263. Cottet et al., ""Observing a quantum Maxwell demon at work"", ; Proc. Natl. Acad. Sci. U.S.A. 114, 7561 (2017). 262. Mazloom et al., ""Adiabatic state preparation of stripe phases with strongly magnetic atoms"", ; Phys. Rev. A 96, 033602 (2017). 261. Poonia et al., ""Functional window of the avian compass"", ; Phys. Rev. E 95, 052417 (2017). 260. Su et al., ""Generating double NOON states of photons in circuit QED"", ; Phys. Rev. A 95, 022339 (2017). 259. Kiukas et al., ""Remote parameter estimation in a quantum spin chain enhanced by local control"", ; Phys. Rev. A 95, 052132 (2017). 258. Gely et al., ""Convergence of the multimode quantum Rabi model of circuit quantum electrodynamics"", ; Phys. Rev. B 95, 245115 (2017). 257. Radtke et al., ""Photonic Quantum Operations via the Quantum Carburettor Effect"", ; arXiv:1701.04251. 256. Lagoudakis et al., ""Observation of Mollow Triplets with Tunable Interactions in Double Lambda Systems of Individual Hole Spins"", ; Phys. Rev. Lett. 118, 013602 (2017). 255. Pucci et al., ""Quantum effects in the cooperative scattering of light by atomic clouds"", ; Phys. Rev. A 95, 053625 (2017). 254. Gessner et al., ""Resolution-enhanced entanglement detection"", ; Phys. Rev. A 95, 032326 (2017). 253. Nigg et al., ""Superconducting Grid-Bus Surface Code Architecture for Hole-Spin Qubits"", ; Phys. Rev. Lett. 118, 147701 (2017). 252. Lüer et al., ""Lévy Defects in Matrix-Immobilized J Aggregates: Tracing Intra-and Intersegmental Exciton Relaxation"", ; J. Phys. Chem. Lett. 8, 54",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:15362,Modifiability,enhance,enhanced,15362,"ses with strongly magnetic atoms"", ; Phys. Rev. A 96, 033602 (2017). 261. Poonia et al., ""Functional window of the avian compass"", ; Phys. Rev. E 95, 052417 (2017). 260. Su et al., ""Generating double NOON states of photons in circuit QED"", ; Phys. Rev. A 95, 022339 (2017). 259. Kiukas et al., ""Remote parameter estimation in a quantum spin chain enhanced by local control"", ; Phys. Rev. A 95, 052132 (2017). 258. Gely et al., ""Convergence of the multimode quantum Rabi model of circuit quantum electrodynamics"", ; Phys. Rev. B 95, 245115 (2017). 257. Radtke et al., ""Photonic Quantum Operations via the Quantum Carburettor Effect"", ; arXiv:1701.04251. 256. Lagoudakis et al., ""Observation of Mollow Triplets with Tunable Interactions in Double Lambda Systems of Individual Hole Spins"", ; Phys. Rev. Lett. 118, 013602 (2017). 255. Pucci et al., ""Quantum effects in the cooperative scattering of light by atomic clouds"", ; Phys. Rev. A 95, 053625 (2017). 254. Gessner et al., ""Resolution-enhanced entanglement detection"", ; Phys. Rev. A 95, 032326 (2017). 253. Nigg et al., ""Superconducting Grid-Bus Surface Code Architecture for Hole-Spin Qubits"", ; Phys. Rev. Lett. 118, 147701 (2017). 252. Lüer et al., ""Lévy Defects in Matrix-Immobilized J Aggregates: Tracing Intra-and Intersegmental Exciton Relaxation"", ; J. Phys. Chem. Lett. 8, 547 (2017). 251. Dive et al., ""In situ upgrade of quantum simulators to universal computers"", ; arXiv:1701.01723. 250. Barnes et al., ""Fast microwave-driven three-qubit gates for cavity-coupled superconducting qubits"", ; Phys. Rev. B 96, 024504 (2017). 249. Hu, ""Spin-based single-photon transistor, dynamic random access memory, diodes, and routers in semiconductors"", ; Phys. Rev. B 94, 245307 (2016). 248. Leung et al., ""Speedup for quantum optimal control from automatic differentiation based on graphics processing units"", ; Phys. Rev. A 95, 042318 (2017). 247. Bruhat et al., ""Strong coupling between an electron in a quantum dot circuit and a photon in a cavi",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:16300,Modifiability,coupling,coupling,16300,"et al., ""Resolution-enhanced entanglement detection"", ; Phys. Rev. A 95, 032326 (2017). 253. Nigg et al., ""Superconducting Grid-Bus Surface Code Architecture for Hole-Spin Qubits"", ; Phys. Rev. Lett. 118, 147701 (2017). 252. Lüer et al., ""Lévy Defects in Matrix-Immobilized J Aggregates: Tracing Intra-and Intersegmental Exciton Relaxation"", ; J. Phys. Chem. Lett. 8, 547 (2017). 251. Dive et al., ""In situ upgrade of quantum simulators to universal computers"", ; arXiv:1701.01723. 250. Barnes et al., ""Fast microwave-driven three-qubit gates for cavity-coupled superconducting qubits"", ; Phys. Rev. B 96, 024504 (2017). 249. Hu, ""Spin-based single-photon transistor, dynamic random access memory, diodes, and routers in semiconductors"", ; Phys. Rev. B 94, 245307 (2016). 248. Leung et al., ""Speedup for quantum optimal control from automatic differentiation based on graphics processing units"", ; Phys. Rev. A 95, 042318 (2017). 247. Bruhat et al., ""Strong coupling between an electron in a quantum dot circuit and a photon in a cavity"", ; arXiv:1612.05214. 246. Zanoci et al., ""Entanglement and thermalization in open fermion systems"", ; arXiv:1612.04840. 245. Volokitin et al., ""Computation of the asymptotic states of modulated open quantum systems with a numerically exact realization of the quantum trajectory method"", ; Phys. Rev. E 96, 053313 (2017). 244. Montenegro et al., ""Macroscopic nonclassical-state preparation via postselection"", ; Phys. Rev. A 96, 053851 (2017). 243. Cirio et al., ""Amplified Optomechanical Transduction of Virtual Radiation Pressure"", ; Phys. Rev. Lett. 119, 053601 (2017). 242. Romero et al., ""Quantum autoencoders for efficient compression of quantum data"", ; Quantum Sci. Technol. 2, 045001 (2017). 241. Zhong, ""Controllable and fast quantum-information transfer between distant nodes in two-dimensional networks"", ; Sci. Rep. 6, 8 (2016). 240. Guo et al., ""Giant acoustic atom: A single quantum system with a deterministic time delay"", ; Phys. Rev. A 95, 05382",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:17726,Modifiability,coupling,coupling,17726,". Montenegro et al., ""Macroscopic nonclassical-state preparation via postselection"", ; Phys. Rev. A 96, 053851 (2017). 243. Cirio et al., ""Amplified Optomechanical Transduction of Virtual Radiation Pressure"", ; Phys. Rev. Lett. 119, 053601 (2017). 242. Romero et al., ""Quantum autoencoders for efficient compression of quantum data"", ; Quantum Sci. Technol. 2, 045001 (2017). 241. Zhong, ""Controllable and fast quantum-information transfer between distant nodes in two-dimensional networks"", ; Sci. Rep. 6, 8 (2016). 240. Guo et al., ""Giant acoustic atom: A single quantum system with a deterministic time delay"", ; Phys. Rev. A 95, 053821 (2017). 239. Vermersch et al., ""Quantum State Transfer via Noisy Photonic and Phononic Waveguides"", ; Phys. Rev. Lett. 118, 133601 (2017). 238. Gudmundsson et al., ""Time-dependent current into and through multilevel parallel quantum dots in a photon cavity"", ; Phys. Rev. B 95, 195307 (2017). 237. Braumüller et al., ""Analog quantum simulation of the Rabi model in the ultra-strong coupling regime"", ; Nat. Commun. 8, 779 (2017). 236. Lagoudakis et al., ""Ultrafast coherent manipulation of trions in site-controlled nanowire quantum dots"", ; Optica 3, 1430 (2016). 235. Roghani et al., ""Dissipative Preparation of Entangled Many-Body States with Rydberg Atoms"", ; arXiv:1611.09612. 234. Lambert et al., ""Superradiance with an ensemble of superconducting flux qubits"", ; Phys. Rev. B 94, 224510 (2016). 233. Yanay et al., ""Shelving-style QND phonon-number detection in quantum optomechanics"", ; New J. Phys. 19, 033014 (2017). 232. Kirton et al., ""Suppressing and Restoring the Dicke Superradiance Transition by Dephasing and Decay"", ; Phys. Rev. Lett. 118, 123602 (2017). 231. Fischer et al., ""On-Chip Architecture for Self-Homodyned Nonclassical Light"", ; Phys. Rev. Applied 7, 044002 (2017).; Notebook. 230. Combes et al., ""The SLH framework for modeling quantum input-output networks"", ; Advances in Physics: X 2, 784 (2017). 229. Lucarelli, ""Quantum optimal",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:22451,Modifiability,coupling,couplings,22451,"y states"", ; arXiv:1608.05074. 208. Zhu et al., ""Implementing phase-covariant cloning in circuit quantum electrodynamics"", ; Annals of Physics 373, 512 (2016). 207. Fischer et al., ""Dynamical modeling of pulsed two-photon interference"", ; New J. Phys. 18, 113053 (2016).; Notebook1; Notebook2. 206. Seifoory et al., ""The properties of squeezed optical states created in lossy cavities"", ; arXiv:1608.05005. 205. Qin et al., ""Heralded quantum controlled-phase gates with dissipative dynamics in macroscopically distant resonators"", ; Phys. Rev. A 96, 012315 (2017). 204. Cruzeiro et al., ""Interactively Applying the Variational Method to the Dihydrogen Molecule: Exploring Bonding and Antibonding"", ; Journal of Chemical Education (2016). 203. Pleinert et al., ""Quantum signatures of collective behavior of a coherently driven two atom system coupled to a single-mode of the electromagnetic field"", ; arXiv:1608.00137. 202. Wang et al., ""Multiple-output microwave single-photon source using superconducting circuits with longitudinal and transverse couplings"", ; Phys. Rev. A 94, 053858 (2016). 201. Marshall et al., ""Continuous-variable quantum computing on encrypted data"", ; Nat. Comm. 7, 13795 (2016). 200. Dajka et al., ""Leggett–Garg inequalities for a quantum top affected by classical noise"", ; J. Quantum Inf. Process. (2016). 199. Rouxinol et al., ""Measurements of nanoresonator-qubit interactions in a hybrid quantum electromechanical system"", ; Nanotechnology 27, 364003 (2016). 198. Hocker et al., ""PEET: a Matlab tool for estimating physical gate errors in quantum information processing systems"", ; Quantum Information Processing (2016). 197. Daskin, ""Quantum eigenvalue estimation for irreducible non-negative matrices"", ; Int. J. Quantum Inform. 14, 1650005 (2016). 196. Dlaska et al., ""Robust quantum state transfer via topologically protected edge channels in dipolar arrays"", ; Quantum Sci. Technol. 2, 015001 (2017). 195. Juliusson et al., ""Manipulating Fock states of a harmonic os",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:22531,Modifiability,variab,variable,22531," 512 (2016). 207. Fischer et al., ""Dynamical modeling of pulsed two-photon interference"", ; New J. Phys. 18, 113053 (2016).; Notebook1; Notebook2. 206. Seifoory et al., ""The properties of squeezed optical states created in lossy cavities"", ; arXiv:1608.05005. 205. Qin et al., ""Heralded quantum controlled-phase gates with dissipative dynamics in macroscopically distant resonators"", ; Phys. Rev. A 96, 012315 (2017). 204. Cruzeiro et al., ""Interactively Applying the Variational Method to the Dihydrogen Molecule: Exploring Bonding and Antibonding"", ; Journal of Chemical Education (2016). 203. Pleinert et al., ""Quantum signatures of collective behavior of a coherently driven two atom system coupled to a single-mode of the electromagnetic field"", ; arXiv:1608.00137. 202. Wang et al., ""Multiple-output microwave single-photon source using superconducting circuits with longitudinal and transverse couplings"", ; Phys. Rev. A 94, 053858 (2016). 201. Marshall et al., ""Continuous-variable quantum computing on encrypted data"", ; Nat. Comm. 7, 13795 (2016). 200. Dajka et al., ""Leggett–Garg inequalities for a quantum top affected by classical noise"", ; J. Quantum Inf. Process. (2016). 199. Rouxinol et al., ""Measurements of nanoresonator-qubit interactions in a hybrid quantum electromechanical system"", ; Nanotechnology 27, 364003 (2016). 198. Hocker et al., ""PEET: a Matlab tool for estimating physical gate errors in quantum information processing systems"", ; Quantum Information Processing (2016). 197. Daskin, ""Quantum eigenvalue estimation for irreducible non-negative matrices"", ; Int. J. Quantum Inform. 14, 1650005 (2016). 196. Dlaska et al., ""Robust quantum state transfer via topologically protected edge channels in dipolar arrays"", ; Quantum Sci. Technol. 2, 015001 (2017). 195. Juliusson et al., ""Manipulating Fock states of a harmonic oscillator while preserving its linearity"", ; Phys. Rev. A 94, 063861 (2016). 194. Banchi et al., ""Quantum gate learning in qubit networks: Toffoli g",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:25407,Modifiability,coupling,couplings,25407,"ements and feedback"", ; Phys. Rev. A 94, 052120 (2016). 187. Li et al., ""Hybrid Quantum Device with Nitrogen-Vacancy Centers in Diamond Coupled to Carbon Nanotubes"", ; Phys. Rev. Lett. 117, 015502 (2016). 186. Grimm et al., ""Optomechanical self-oscillations in an anharmonic potential: engineering a nonclassical steady state"", ; J. Opt. 18, 094004 (2016). 185. Puri et al., ""Engineering the quantum states of light in a Kerr-nonlinear resonator by two-photon driving"", ; npj Quantum Information 3, 18 (2017). 184. Rossatto et al., ""Relaxation time for monitoring the quantumness of an intense cavity field"", ; Phys. Rev. A 94, 033819 (2016). 183. Shackerley-Bennett et al., ""The reachable set of single-mode quadratic Hamiltonians"", ; J. Phys. A: Math. Theor. 50, 155203 (2017). 182. Blumoff et al., ""Implementing and Characterizing Precise Multiqubit Measurements"", ; Phys. Rev. X 6, 031041 (2016). 181. Li et al., ""Entangling a single NV centre with a superconducting qubit via parametric couplings between photons and phonons in a hybrid system"", ; Journal of Modern Optics (2016). 180. Straubel et al., ""Entangled light from bimodal optical nanoantennas"", ; Phys. Rev. B 95, 085421 (2017). 179. Vool et al., ""Continuous Quantum Nondemolition Measurement of the Transverse Component of a Qubit"", ; Phys. Rev. Lett. 117, 133601 (2016). 178. Granade et al., ""Practical adaptive quantum tomography"", ; New J. Phys. 19, 113017 (2017). 177. Plankensteiner et al., ""Laser noise imposed limitations of ensemble quantum metrology"", ; J. Phys. B: At. Mol. Opt. Phys. 49, 245501 (2016). 176. Levi et al., ""Coherent exciton dynamics in a dissipative environment maintained by an off-resonant vibrational mode"", ; Phys. Rev. A 93, 042109 (2016). 175. Li et al., ""Proposal for a quantum delayed-choice experiment with a spin-mechanical setup"", ; Phys. Rev. A 94, 042130 (2016). 174. Lambert et al., ""Leggett-Garg inequality violations with a large ensemble of qubits"", ; Phys. Rev. A 94, 012105 (2016). 173. A",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:25786,Modifiability,adapt,adaptive,25786,"ring the quantum states of light in a Kerr-nonlinear resonator by two-photon driving"", ; npj Quantum Information 3, 18 (2017). 184. Rossatto et al., ""Relaxation time for monitoring the quantumness of an intense cavity field"", ; Phys. Rev. A 94, 033819 (2016). 183. Shackerley-Bennett et al., ""The reachable set of single-mode quadratic Hamiltonians"", ; J. Phys. A: Math. Theor. 50, 155203 (2017). 182. Blumoff et al., ""Implementing and Characterizing Precise Multiqubit Measurements"", ; Phys. Rev. X 6, 031041 (2016). 181. Li et al., ""Entangling a single NV centre with a superconducting qubit via parametric couplings between photons and phonons in a hybrid system"", ; Journal of Modern Optics (2016). 180. Straubel et al., ""Entangled light from bimodal optical nanoantennas"", ; Phys. Rev. B 95, 085421 (2017). 179. Vool et al., ""Continuous Quantum Nondemolition Measurement of the Transverse Component of a Qubit"", ; Phys. Rev. Lett. 117, 133601 (2016). 178. Granade et al., ""Practical adaptive quantum tomography"", ; New J. Phys. 19, 113017 (2017). 177. Plankensteiner et al., ""Laser noise imposed limitations of ensemble quantum metrology"", ; J. Phys. B: At. Mol. Opt. Phys. 49, 245501 (2016). 176. Levi et al., ""Coherent exciton dynamics in a dissipative environment maintained by an off-resonant vibrational mode"", ; Phys. Rev. A 93, 042109 (2016). 175. Li et al., ""Proposal for a quantum delayed-choice experiment with a spin-mechanical setup"", ; Phys. Rev. A 94, 042130 (2016). 174. Lambert et al., ""Leggett-Garg inequality violations with a large ensemble of qubits"", ; Phys. Rev. A 94, 012105 (2016). 173. Ardelt et al., ""Optical control of nonlinearly dressed states in an individual quantum dot"", ; Phys. Rev. B 93, 165305 (2016). 172. Nakajima et al., ""Phase control of local and non-local entanglement in a triple spin qubit"", ; arXiv:1604.02232. 171. Snijders et al., ""Purification of a single photon nonlinearity"", ; Nat. Commun. 7, 12578 (2016). 170. Levi et al., ""Designing spin-chan",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:27454,Modifiability,coupling,coupling,27454,"linearly dressed states in an individual quantum dot"", ; Phys. Rev. B 93, 165305 (2016). 172. Nakajima et al., ""Phase control of local and non-local entanglement in a triple spin qubit"", ; arXiv:1604.02232. 171. Snijders et al., ""Purification of a single photon nonlinearity"", ; Nat. Commun. 7, 12578 (2016). 170. Levi et al., ""Designing spin-channel geometries for entanglement distribution"", ; Phys. Rev. A 94, 032302 (2016). 169. Vermersch et al., ""Implementation of chiral quantum optics with Rydberg and trapped-ion setups"", ; Phys. Rev. A 93, 063830 (2016). 168. Apollaro et al., ""Entanglement entropy in a periodically driven quantum Ising ring"", ; Phys. Rev. B 94, 134304 (2016). 167. Jonas, ""Fortran code for generating random probability vectors, unitaries, and quantum states"", ; Frontiers in ICT 3 (2016). 166. Ong et al., ""The Effect of Spin Squeezing on the Entanglement Entropy of Kicked Tops"", ; Entopy 18, 116 (2016). 165. Yang et al., ""Crosstalk-insensitive method for simultaneously coupling multiple pairs of resonators"", ; Phys. Rev. A 93, 042307 (2016). 164. Mavalankar et al., ""Photon-assisted tunneling and charge dephasing in a carbon nanotube double quantum dot"", ; Phys. Rev. B 93, 235428 (2016). 163. Hush et al., ""Quantum state transfer through time reversal of an optical channel"", ; Phys. Rev. A 94, 062302 (2016). 162. Royer et al., ""Fast and high-fidelity entangling gate through parametrically modulated longitudinal coupling"", ; Quantum 1, 11 (2017). 161. Lörch et al., ""Genuine Quantum Signatures in Synchronization of Anharmonic Self-Oscillators"", ; Phys. Rev. Lett. 117, 073601 (2016). 160. Ejtemaee et al., ""3D Sisyphus Cooling of Trapped Ions"", ; Phys. Rev. Lett. 119, 043001 (2017). 159. Rogers, ""The EPR Paradox Implies A Minimum Achievable Temperature"", ; Phys. Rev. E 95, 012149 (2017). 158. Fischer et al., ""Self-homodyne measurement of a dynamic Mollow triplet in the solid state"", ; Nat. Photonics 10, 163 (2016). 157. Zhao et al., ""Vacuum Rabi Splittin",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:27903,Modifiability,coupling,coupling,27903,"6). 169. Vermersch et al., ""Implementation of chiral quantum optics with Rydberg and trapped-ion setups"", ; Phys. Rev. A 93, 063830 (2016). 168. Apollaro et al., ""Entanglement entropy in a periodically driven quantum Ising ring"", ; Phys. Rev. B 94, 134304 (2016). 167. Jonas, ""Fortran code for generating random probability vectors, unitaries, and quantum states"", ; Frontiers in ICT 3 (2016). 166. Ong et al., ""The Effect of Spin Squeezing on the Entanglement Entropy of Kicked Tops"", ; Entopy 18, 116 (2016). 165. Yang et al., ""Crosstalk-insensitive method for simultaneously coupling multiple pairs of resonators"", ; Phys. Rev. A 93, 042307 (2016). 164. Mavalankar et al., ""Photon-assisted tunneling and charge dephasing in a carbon nanotube double quantum dot"", ; Phys. Rev. B 93, 235428 (2016). 163. Hush et al., ""Quantum state transfer through time reversal of an optical channel"", ; Phys. Rev. A 94, 062302 (2016). 162. Royer et al., ""Fast and high-fidelity entangling gate through parametrically modulated longitudinal coupling"", ; Quantum 1, 11 (2017). 161. Lörch et al., ""Genuine Quantum Signatures in Synchronization of Anharmonic Self-Oscillators"", ; Phys. Rev. Lett. 117, 073601 (2016). 160. Ejtemaee et al., ""3D Sisyphus Cooling of Trapped Ions"", ; Phys. Rev. Lett. 119, 043001 (2017). 159. Rogers, ""The EPR Paradox Implies A Minimum Achievable Temperature"", ; Phys. Rev. E 95, 012149 (2017). 158. Fischer et al., ""Self-homodyne measurement of a dynamic Mollow triplet in the solid state"", ; Nat. Photonics 10, 163 (2016). 157. Zhao et al., ""Vacuum Rabi Splitting in Nanomechanical QED System with Nonlinear Resonator"", ; arXiv:1603.00215. 156. Türkpençe et al., ""Quantum fuel with multilevel atomic coherence for ultrahigh specific work in a photonic Carnot engine"", ; Phys. Rev. E 93, 012145 (2016). 155. Joo et al., ""Deterministic amplification of Schrödinger cat states in circuit quantum electrodynamics"", ; New J. Phys. 18, 023028 (2016). 154. Hofer et al., ""Quantum heat engine b",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:31502,Modifiability,enhance,enhanced,31502,"in Physics 911, 495 (2016). 142. Dory et al., ""Complete Coherent Control of a Quantum Dot Strongly Coupled to a Nanocavity"", ; Sci. Rep. 6, 25172 (2016). 141. Kaczmarczyk et al., ""Dissipative preparation of antiferromagnetic order in the Fermi-Hubbard model"", ; New J. Phys. 18 093042 (2016). 140. Rogers et al., ""Atom-field entanglement in cavity QED: Nonlinearity and saturation"", ; Phys. Rev. A 96, 052311 (2017). 139. de Moras Neto et al., ""Quantum state transfer in optomechanical arrays"", ; Phys. Rev. A 93, 062339 (2016). 138. Puri et al., ""High-Fidelity Resonator-Induced Phase Gate with Single-Mode Squeezing"", ; Phys. Rev. Lett. 116, 180501 (2016). 137. Ivanov et al., ""Incoherent quantum feedback control of collective light scattering by Bose-Einstein condensates"", ; arXiv:1601.02230. 136. Dooley et al., ""A hybrid-systems approach to spin squeezing using a highly dissipative ancillary system"", ; New J. Phys. 18, 053011 (2016). 135. Fischbach et al., ""Steady-state entanglement enhanced by a dissipative ancilla"", ; Phys. Rev. A 92, 052327 (2015). 134. Goryachev et al., ""Creating Tuneable Microwave Media from a Two-Dimensional Lattice of Re-entrant Posts"", ; J. Appl. Phys. 118, 204504 (2015). 133. Leggio et al., ""Distributed thermal tasks on many-body systems through a single quantum machine"", ; Europhys. Lett. 112, 40004 (2015). 132. Iles-Smith et al., ""Energy transfer in structured and unstructured environments: Master equations beyond the Born-Markov approximations"", ; J. Chem. Phys. 144, 044110 (2016). 131. Korkmaz et al., ""Nuclear spin squeezing via electric quadrupole interaction"", ; Phys. Rev. A 93, 013812 (2016). 130. del Pino et al., ""Signatures of Vibrational Strong Coupling in Raman Scattering"", ; J. Phys. Chem. C 119, 29132 (2015). 129. Ardelt et al., ""Optical control of nonlinearly dressed states in an individual quantum dot"", ; Phys. Rev. B 93, 165305 (2016). 128. Deng et al., ""Coupling two distant double quantum dots to a microwave resonator"", ; Nano L",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:33238,Modifiability,enhance,enhanced,33238,"ng in Raman Scattering"", ; J. Phys. Chem. C 119, 29132 (2015). 129. Ardelt et al., ""Optical control of nonlinearly dressed states in an individual quantum dot"", ; Phys. Rev. B 93, 165305 (2016). 128. Deng et al., ""Coupling two distant double quantum dots to a microwave resonator"", ; Nano Letters 15, 6620 (2015). 127. Straubel et al., ""Plasmonic nanoantenna based triggered single-photon source"", ; Phys. Rev. B 93, 195412 (2016). 126. Levi et al., ""Robustness of Many-Body Localization in the Presence of Dissipation"", ; Phys. Rev. Lett. 116, 237203 (2016). 125. Verdon-Akzam et al., ""Asymptotically limitless quantum energy teleportation via qudit probes"", ; Phys. Rev. A 93, 022308 (2016). 124. Overbeck et al., ""Time evolution of open quantum many-body systems"", ; Phys. Rev. A 93, 012106 (2016). 123. Dast et al., ""Purity oscillations in Bose-Einstein condensates with balanced gain and loss"", ; Phys. Rev. A 93, 033617 (2016). 122. Zhao et al., ""Quantum statistics control with a plasmonic nanocavity: Multimode-enhanced interferences"", ; Phys. Rev. A 92, 033836 (2015). 121. Granade et al., ""Practical Bayesian tomography"", ; New J. Phys. 18, 033024 (2016). 120. Wan et al., ""Tolerance in the Ramsey interference of a trapped nanodiamond"", ; Phys. Rev. A 93, 043852 (2016). 119. Cirio et al., ""Ground State Electroluminescence"", ; Phys. Rev. Lett. 116, 113601 (2016). 118. Lee et al., ""Ramsey interference in a multilevel quantum system"", ; Phys. Rev. B 93, 085407 (2016). 117. Huang et al., ""Dark state in a nonlinear optomechanical system with quadratic coupling"", ; Phys. Rev. A 92, 013829 (2015). 116. Friis et al., ""Coherent controlization using superconducting qubits"", ; Sci. Rep. 5, 18036 (2015). 115. Glaser et al., ""Training Schrödinger's cat: quantum optimal control"", ; Eur. Phys. J. D 69, 279 (2015). 114. Łobejko et al., ""Interference of qubits in pure dephasing and almost pure dephasing environments"", ; J. Phys. A: Math. Theor. 48, 275302 (2015). 113. Hua et al., ""Quantum sta",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:33783,Modifiability,coupling,coupling,33783,"116, 237203 (2016). 125. Verdon-Akzam et al., ""Asymptotically limitless quantum energy teleportation via qudit probes"", ; Phys. Rev. A 93, 022308 (2016). 124. Overbeck et al., ""Time evolution of open quantum many-body systems"", ; Phys. Rev. A 93, 012106 (2016). 123. Dast et al., ""Purity oscillations in Bose-Einstein condensates with balanced gain and loss"", ; Phys. Rev. A 93, 033617 (2016). 122. Zhao et al., ""Quantum statistics control with a plasmonic nanocavity: Multimode-enhanced interferences"", ; Phys. Rev. A 92, 033836 (2015). 121. Granade et al., ""Practical Bayesian tomography"", ; New J. Phys. 18, 033024 (2016). 120. Wan et al., ""Tolerance in the Ramsey interference of a trapped nanodiamond"", ; Phys. Rev. A 93, 043852 (2016). 119. Cirio et al., ""Ground State Electroluminescence"", ; Phys. Rev. Lett. 116, 113601 (2016). 118. Lee et al., ""Ramsey interference in a multilevel quantum system"", ; Phys. Rev. B 93, 085407 (2016). 117. Huang et al., ""Dark state in a nonlinear optomechanical system with quadratic coupling"", ; Phys. Rev. A 92, 013829 (2015). 116. Friis et al., ""Coherent controlization using superconducting qubits"", ; Sci. Rep. 5, 18036 (2015). 115. Glaser et al., ""Training Schrödinger's cat: quantum optimal control"", ; Eur. Phys. J. D 69, 279 (2015). 114. Łobejko et al., ""Interference of qubits in pure dephasing and almost pure dephasing environments"", ; J. Phys. A: Math. Theor. 48, 275302 (2015). 113. Hua et al., ""Quantum state transfer and controlled-phase gate on one-dimensional superconducting resonators assisted by a quantum bus"", ; Sci. Rep. 6, 22037 (2016). 112. Layden et al., ""Universal scheme for indirect quantum control"", ; Phys. Rev. A 93, 040301(R) (2016). 111. Zhang et al., ""Coherent manipulation of a Majorana qubit by a mechanical resonator"", ; Phys. Rev. B 92, 115303 (2015). 110. Yang et al., ""Entangling superconducting qubits in a multi-cavity system"", ; New. J. Phys. 18, 013025 (2016). 109. Hou et al., ""A multi-model Python wrapper for op",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:38079,Modifiability,coupling,coupling,38079,"bi rotations for high-fidelity hole spin initialization"", ; Phys. Rev. B 92, 115306 (2015). 91. Wallman et al., ""Estimating the coherence of noise"", ; New J. Phys. 17, 113020 (2015). 90. Černotík et al., ""Adiabatic elimination of Gaussian subsystems from quantum dynamics under continuous measurement"", ; Phys. Rev. A 92, 012124 (2015). 89. Müller et al., ""Ultrafast Polariton-Phonon Dynamics of Strongly Coupled Quantum Dot-Nanocavity Systems"", ; Phys. Rev. X 5, 031006 (2015). 88. Osipovs et al., ""Markov Chains in the Task of Author's Writing Style Profile Construction"", ; Information Technology and Management Science 17, 119 (2014). 87. Armour et al., ""Josephson photonics with a two-mode superconducting circuit"", ; Phys. Rev. B 91, 184508 (2015). 86. Li et al., ""Hybrid Quantum Device Based on NV Centers in Diamond Nanomechanical Resonators Plus Superconducting Waveguide Cavities"", ; Phys. Rev. Applied 4, 044003 (2015). 85. Li et al., ""Enhanced electromechanical coupling of a nanomechanical resonator to coupled superconducting cavities"", ; Sci. Rep. 6, 19065 (2016). 84. del Pino et al., ""Quantum theory of collective strong coupling of molecular vibrations with a microcavity mode"", ; New. J. Phys. 17, 053040 (2015). 83. Rossetti et al., ""Trapped-ion Lissajous trajectories by engineering Rashba- and Dresselhaus-type spin-orbit interactions in a Paul trap"", ; Euro. Phys. Lett. 115, 53001 (2016). 82. Batalhao et al., ""Irreversibility and the Arrow of Time in a Quenched Quantum System"", ; Phys. Rev. Lett. 115, 190601 (2015). 81. Gonzalez-Ballestero et al., ""Harvesting excitons through plasmonic strong coupling"", ; Phys. Rev. B 92, 121402 (2015). 80. Lörch et al., ""Sub-Poissonian phonon lasing in three-mode optomechanics"", ; Phys. Rev. A 91, 061803(R) (2015). 79. Dalmonte et al., ""Cluster Luttinger liquids and emergent supersymmetric conformal critical points in the one-dimensional soft-shoulder Hubbard model"", ; Phys. Rev. B 92, 045106 (2015). 78. Weimer, ""Variational analys",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:38243,Modifiability,coupling,coupling,38243,"New J. Phys. 17, 113020 (2015). 90. Černotík et al., ""Adiabatic elimination of Gaussian subsystems from quantum dynamics under continuous measurement"", ; Phys. Rev. A 92, 012124 (2015). 89. Müller et al., ""Ultrafast Polariton-Phonon Dynamics of Strongly Coupled Quantum Dot-Nanocavity Systems"", ; Phys. Rev. X 5, 031006 (2015). 88. Osipovs et al., ""Markov Chains in the Task of Author's Writing Style Profile Construction"", ; Information Technology and Management Science 17, 119 (2014). 87. Armour et al., ""Josephson photonics with a two-mode superconducting circuit"", ; Phys. Rev. B 91, 184508 (2015). 86. Li et al., ""Hybrid Quantum Device Based on NV Centers in Diamond Nanomechanical Resonators Plus Superconducting Waveguide Cavities"", ; Phys. Rev. Applied 4, 044003 (2015). 85. Li et al., ""Enhanced electromechanical coupling of a nanomechanical resonator to coupled superconducting cavities"", ; Sci. Rep. 6, 19065 (2016). 84. del Pino et al., ""Quantum theory of collective strong coupling of molecular vibrations with a microcavity mode"", ; New. J. Phys. 17, 053040 (2015). 83. Rossetti et al., ""Trapped-ion Lissajous trajectories by engineering Rashba- and Dresselhaus-type spin-orbit interactions in a Paul trap"", ; Euro. Phys. Lett. 115, 53001 (2016). 82. Batalhao et al., ""Irreversibility and the Arrow of Time in a Quenched Quantum System"", ; Phys. Rev. Lett. 115, 190601 (2015). 81. Gonzalez-Ballestero et al., ""Harvesting excitons through plasmonic strong coupling"", ; Phys. Rev. B 92, 121402 (2015). 80. Lörch et al., ""Sub-Poissonian phonon lasing in three-mode optomechanics"", ; Phys. Rev. A 91, 061803(R) (2015). 79. Dalmonte et al., ""Cluster Luttinger liquids and emergent supersymmetric conformal critical points in the one-dimensional soft-shoulder Hubbard model"", ; Phys. Rev. B 92, 045106 (2015). 78. Weimer, ""Variational analysis of driven-dissipative Rydberg gases"", ; Phys. Rev. A 91, 063401 (2015). 77. Schulte et al., ""Quantum Algorithmic Readout in Multi-Ion Clocks"", ; Ph",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:38726,Modifiability,coupling,coupling,38726,"nagement Science 17, 119 (2014). 87. Armour et al., ""Josephson photonics with a two-mode superconducting circuit"", ; Phys. Rev. B 91, 184508 (2015). 86. Li et al., ""Hybrid Quantum Device Based on NV Centers in Diamond Nanomechanical Resonators Plus Superconducting Waveguide Cavities"", ; Phys. Rev. Applied 4, 044003 (2015). 85. Li et al., ""Enhanced electromechanical coupling of a nanomechanical resonator to coupled superconducting cavities"", ; Sci. Rep. 6, 19065 (2016). 84. del Pino et al., ""Quantum theory of collective strong coupling of molecular vibrations with a microcavity mode"", ; New. J. Phys. 17, 053040 (2015). 83. Rossetti et al., ""Trapped-ion Lissajous trajectories by engineering Rashba- and Dresselhaus-type spin-orbit interactions in a Paul trap"", ; Euro. Phys. Lett. 115, 53001 (2016). 82. Batalhao et al., ""Irreversibility and the Arrow of Time in a Quenched Quantum System"", ; Phys. Rev. Lett. 115, 190601 (2015). 81. Gonzalez-Ballestero et al., ""Harvesting excitons through plasmonic strong coupling"", ; Phys. Rev. B 92, 121402 (2015). 80. Lörch et al., ""Sub-Poissonian phonon lasing in three-mode optomechanics"", ; Phys. Rev. A 91, 061803(R) (2015). 79. Dalmonte et al., ""Cluster Luttinger liquids and emergent supersymmetric conformal critical points in the one-dimensional soft-shoulder Hubbard model"", ; Phys. Rev. B 92, 045106 (2015). 78. Weimer, ""Variational analysis of driven-dissipative Rydberg gases"", ; Phys. Rev. A 91, 063401 (2015). 77. Schulte et al., ""Quantum Algorithmic Readout in Multi-Ion Clocks"", ; Phys. Rev. Lett. 116, 013002 (2016). 76. Dalmonte et al., ""Realizing dipolar spin models with arrays of superconducting qubits"", ; Phys. Rev. B 92, 174507 (2015). 75. Neilinger et al., ""Two-photon lasing by a superconducting qubit"", ; Phys. Rev. B 91, 104516 (2015). 74. Elliott et al., ""Enhancement and state tomography of a squeezed vacuum with circuit quantum electrodynamics"", ; Phys. Rev. A 92, 013826 (2015). 73. Borregaard et al., ""Heralded Quantum G",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:48469,Modifiability,coupling,coupling,48469,"radiation from the dynamical Casimir effect"", ; Phys. Rev. A 87, 043804 (2013). 14. Majumdar et al., ""Coupling an electron spin in a semiconductor quantum dot to an optical nano-cavity"", ; Phys. Rev. Lett. 111, 027402 (2013). 13. Hardal et al., ""Spin squeezing, entanglement and coherence in two driven, dissipative, nonlinear cavities coupled with single and two-photon exchange"", ; J. Opt. Soc. Am. B 31, 1402 (2014). 12. Reiter et al., ""Steady-state entanglement of two superconducting qubits engineered by dissipation"", ; Phys. Rev. A 88, 032317 (2013). 11. Moelbjerg et al., ""Dynamical Properties of Nanolasers Based on Few Discrete Emitters"", ; Quantum Electronics, IEEE Journal of, 44 945 (2013). 10. Xu et al., ""Quantum Photovoltaic Effect in Double Quantum Dots"", ; Phys. Rev. B 87, 035429 (2013). 9. Li et al., ""Floquet poor man's Majorana fermions in double quantum dots"", ; arXiv:1301.3623. 8. Hardal et al., ""Discrete time quantum walk with nitrogen-vacancy centers in diamond coupled to a superconducting flux qubit"", ; Phys. Rev. A 88, 022303 (2013). 7. Grimsmo et al., ""Cavity QED simulation of qubit-oscillator dynamics in the ultrastrong coupling regime"", ; Phys. Rev. A 87, 033814 (2013). 6. Tipsmark et al., ""Displacement-enhanced entanglement distillation of single-mode-squeezed entangled states"", ; Opt. Express 21, 6670 (2013). 5. Nigg et al., ""Stabilizer quantum error correction toolbox for superconducting qubits"", ; Phys. Rev. Lett. 110, 243604 (2013). 4. Holloway et al., ""Optimal pair generation rate for Entanglement-based QKD"", ; Phys. Rev. A 87, 022342 (2013). 3. Murch et al., ""Cavity-assisted quantum bath engineering"", ; Phys. Rev. Lett. 109 183602 (2012). 2. Tezak et al., ""Specification of photonic circuits using Quantum Hardware Description Language"", ; Phil. Trans. R. Soc. A 370 5270 (2012). 1. Dereli et al., ""Two-Frequency Jahn-Teller Systems in Circuit QED"", ; Phys. Rev. A 85 053841 (2012). © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:48555,Modifiability,enhance,enhanced,48555,"radiation from the dynamical Casimir effect"", ; Phys. Rev. A 87, 043804 (2013). 14. Majumdar et al., ""Coupling an electron spin in a semiconductor quantum dot to an optical nano-cavity"", ; Phys. Rev. Lett. 111, 027402 (2013). 13. Hardal et al., ""Spin squeezing, entanglement and coherence in two driven, dissipative, nonlinear cavities coupled with single and two-photon exchange"", ; J. Opt. Soc. Am. B 31, 1402 (2014). 12. Reiter et al., ""Steady-state entanglement of two superconducting qubits engineered by dissipation"", ; Phys. Rev. A 88, 032317 (2013). 11. Moelbjerg et al., ""Dynamical Properties of Nanolasers Based on Few Discrete Emitters"", ; Quantum Electronics, IEEE Journal of, 44 945 (2013). 10. Xu et al., ""Quantum Photovoltaic Effect in Double Quantum Dots"", ; Phys. Rev. B 87, 035429 (2013). 9. Li et al., ""Floquet poor man's Majorana fermions in double quantum dots"", ; arXiv:1301.3623. 8. Hardal et al., ""Discrete time quantum walk with nitrogen-vacancy centers in diamond coupled to a superconducting flux qubit"", ; Phys. Rev. A 88, 022303 (2013). 7. Grimsmo et al., ""Cavity QED simulation of qubit-oscillator dynamics in the ultrastrong coupling regime"", ; Phys. Rev. A 87, 033814 (2013). 6. Tipsmark et al., ""Displacement-enhanced entanglement distillation of single-mode-squeezed entangled states"", ; Opt. Express 21, 6670 (2013). 5. Nigg et al., ""Stabilizer quantum error correction toolbox for superconducting qubits"", ; Phys. Rev. Lett. 110, 243604 (2013). 4. Holloway et al., ""Optimal pair generation rate for Entanglement-based QKD"", ; Phys. Rev. A 87, 022342 (2013). 3. Murch et al., ""Cavity-assisted quantum bath engineering"", ; Phys. Rev. Lett. 109 183602 (2012). 2. Tezak et al., ""Specification of photonic circuits using Quantum Hardware Description Language"", ; Phil. Trans. R. Soc. A 370 5270 (2012). 1. Dereli et al., ""Two-Frequency Jahn-Teller Systems in Circuit QED"", ; Phys. Rev. A 85 053841 (2012). © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:6235,Performance,scalab,scalable,6235,".09555. 332. Ishibashi et al., ""Oscillation collapse in coupled quantum van der Pol oscillators"", ; Phys. Rev. E 96, 052210 (2017). 331. Elbin et al., ""Rényi Entropies from Random Quenches in Atomic Hubbard and Spin Models"", ; arXiv:1709.05060. 330. Li et al., ""Quantum microwave-optical interface with nitrogen-vacancy centers in diamond"", ; Phys. Rev. A 96, 032342 (2017). 329. Diguna et al., ""The coupling of single-photon exciton–biexciton quantum dot and cavity"", ; J. Nonlinear Optic. Phys. Mat. 1750029, (2017). 328. Lee et al., ""Effective formalism for open-quantum-system dynamics: Time-coarse-graining approach"", ; Phys. Rev. A 97, 012102 (2018). 327. de Moraes Neto et al., ""Steady many-body entanglements in dissipative systems"", ; Phys. Rev. A 96, 062313 (2017). 326. Zhang et al., ""Efficient numerical solution of excitation number conserving quantum systems"", ; AIP Advances 7, 085225 (2017). 325. Heuck et al., ""Temporally and frequency multiplexed single photon source using quantum feedback control for scalable photonic quantum technologies"", ; arXiv:1708.08875. 324. Kurian et al., ""Oxidative species-induced excitonic transport in tubulin aromatic networks: Potential implications for neurodegenerative disease"", ; J. Photochem. Photobiol. B: Biology (2017). 323. Hwang et al., ""Dissipative phase transition in the open quantum Rabi model"", ; Phys. Rev. A 97, 013825 (2018). 322. Higgins et al., ""Coherent Control of a Single Trapped Rydberg Ion"", ; Phys. Rev. Lett. 119, 220501 (2017). 321. Schlipf et al., ""A molecular quantum spin network controlled by a single qubit"", ; Sci. Adv. 3, 1701116 (2017). 320. Hardal et al., ""Quantum heat engine with coupled superconducting resonators"", ; Phys. Rev. E 96, 062120 (2017). 319. Katabarwa et al., ""Quantum Projective Simulation with Hamiltonian Evolution: A study in reinforcement learning"", ; arXiv:1708.00123. 318. Kienzler et al., ""Quantum Harmonic Oscillator State Control in a Squeezed Fock Basis"", ; Phys. Rev. Lett. 119, 0336",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:14038,Performance,perform,performance,14038,"17). 272. Cesa et al., ""Two-qubit entangling gates between distant atomic qubits in a lattice"", ; Phys. Rev. A 95, 052330 (2017). 271. Ren et al., ""Evanescent-Vacuum-Enhanced Photon-Exciton Coupling and Fluorescence Collection"", ; Phys. Rev. Lett. 118, 073604 (2017). 270. Chu et al., ""Quantum acoustics with superconducting qubits"", ; Science 358, 199 (2017). 269. Fischer et al., ""Signatures of two-photon pulses from a quantum two-level system"", ; Nat. Phys. 13, 649 (2017). 268. Marshman et al., ""Investigating and improving student understanding of the probability distributions for measuring physical observables in quantum mechanics"", ; Eur. J. Phys. 38, 025705 (2017). 267. Borges et al., ""Influence of the asymmetric excited state decay on coherent population trapping: atom × quantum dot"", ; arXiv:1702.07692. 266. Pleinert et al., ""Hyperradiance from collective behavior of coherently driven atoms"", ; Optica 4, 779 (2017). 265. Oviedo-Casado et al., ""Magnetic field enhancement of organic photovoltaic cells performance"", ; Sci. Rep. 7, 4297 (2017). 264. Whalen et al., ""Open quantum systems with delayed coherent feedback"", ; Quantum Sci. Technol. 2, 044008 (2017). 263. Cottet et al., ""Observing a quantum Maxwell demon at work"", ; Proc. Natl. Acad. Sci. U.S.A. 114, 7561 (2017). 262. Mazloom et al., ""Adiabatic state preparation of stripe phases with strongly magnetic atoms"", ; Phys. Rev. A 96, 033602 (2017). 261. Poonia et al., ""Functional window of the avian compass"", ; Phys. Rev. E 95, 052417 (2017). 260. Su et al., ""Generating double NOON states of photons in circuit QED"", ; Phys. Rev. A 95, 022339 (2017). 259. Kiukas et al., ""Remote parameter estimation in a quantum spin chain enhanced by local control"", ; Phys. Rev. A 95, 052132 (2017). 258. Gely et al., ""Convergence of the multimode quantum Rabi model of circuit quantum electrodynamics"", ; Phys. Rev. B 95, 245115 (2017). 257. Radtke et al., ""Photonic Quantum Operations via the Quantum Carburettor Effect"", ; arXiv:17",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:20412,Performance,optimiz,optimizer,20412," a complex open quantum system"", ; Comput. Phys. Commun. 220, 81 (2017). 223. Lahoz-Beltra, ""Quantum Genetic Algorithms for Computer Scientists"", ; Computers 5, 24 (2016). 222. Davis-Tilley et al., ""Synchronization of micromasers"", ; Phys. Rev. A 94, 063819 (2016). 221. Weinberg et al., ""QuSpin: a Python package for dynamics and exact diagonalisation of quantum many body systems part I: spin chains"", ; SciPost Phys. 2, 003 (2017). 220. Dory et al., ""Tuning the photon statistics of a strongly coupled nanophotonic system"", ; Phys. Rev. A 95, 023804 (2017). 219. Lachance-Quirion et al., ""Resolving quanta of collective spin excitations in a millimeter-sized ferromagnet"", ; Science Advances 3, (2017). 218. Doyeux et al., ""Excitation injector in an atomic chain: Long-range transport and efficiency amplification"", ; Phys. Rev. A 95, 012138 (2017). 217. Roulet et al., ""Autonomous Rotor Heat Engine"", ; Phys. Rev. E 95, 062131 (2017). 216. Nigg et al., ""Robust quantum optimizer with full connectivity"", ; Science Advances 3, 1602273 (2017). 215. Puri et al., ""Quantum annealing with all-to-all connected nonlinear oscillators"", ; Nat. Commun. 8, 15785 (2017).>. 214. Shi et al., ""Model reduction of cavity nonlinear optics for photonic logic: a quasi-principal components approach"", ; J. Phys. D: Appl. Phys. 49, 465501 (2016). 213. McNally et al., ""Performance of 1D quantum cellular automata in the presence of error"", ; AIP Advances 6, 095115 (2016). 212. Zhong et al., ""Towards quantum entanglement of micromirrors via a two-level atom and radiation pressure"", ; arXiv:1609.00590. 211. Roth et al., ""Synchronization of active atomic clocks via quantum and classical channels"", ; Phys. Rev. A 94, 043841 (2016). 210. Jarlov et al., ""Effect of Pure Dephasing and Phonon Scattering on the Coupling of Semiconductor Quantum Dots to Optical Cavities"", ; Phys. Rev. Lett. 117, 076801 (2016). 209. Mahajan et al., ""Entanglement structure of non-equilibrium steady states"", ; arXiv:1608.05074. 208. ",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:36760,Performance,perform,performance,36760,"ontain N photons"", ; Science 348, 776 (2015). 101. Leggio et al., ""Thermally activated nonlocal amplification in quantum energy transport"", ; Euro. Phys. Lett 110, 40002 (2015). 100. Patrzyk et al., ""Towards a novel environment for simulation of quantum computing"", ; Computer Science 16, 103 (2015). 99. Plankensteiner et al., ""Selective protected state preparation of coupled dissipative quantum emitters"", ; Sci Rep. 5, 16231 (2015). 98. Goryachev et al., ""Single-photon level study of microwave properties of lithium niobate at millikelvin temperatures"", ; Phys. Rev. B 92, 060406(R) 2015). 97. Nation, ""Steady-state solution methods for open quantum optical systems"", ; arXiv:1504.06768. 96. Higgins et al., ""Quantum-Enhanced Capture of Photons Using Optical Ratchet States"", ; J. Phys. Chem. C 121, 20714 (2017). 95. Bassereh et al., ""Perfect energy transport via single edge deletion in a complete network"", ; arXiv:1504.04398. 94. Wiśniewska et al., ""High performance computing and quantum trajectory method in CPU and GPU systems"", ; J. Phys.: Conf. Ser. 574, 012127 (2015). 93. Holland et al., ""Single-Photon-Resolved Cross-Kerr Interaction for Autonomous Stabilization of Photon-Number States"", ; Phys. Rev. Lett. 115, 180501 (2015). 92. Ardelt et al., ""Controlled tunneling-induced dephasing of Rabi rotations for high-fidelity hole spin initialization"", ; Phys. Rev. B 92, 115306 (2015). 91. Wallman et al., ""Estimating the coherence of noise"", ; New J. Phys. 17, 113020 (2015). 90. Černotík et al., ""Adiabatic elimination of Gaussian subsystems from quantum dynamics under continuous measurement"", ; Phys. Rev. A 92, 012124 (2015). 89. Müller et al., ""Ultrafast Polariton-Phonon Dynamics of Strongly Coupled Quantum Dot-Nanocavity Systems"", ; Phys. Rev. X 5, 031006 (2015). 88. Osipovs et al., ""Markov Chains in the Task of Author's Writing Style Profile Construction"", ; Information Technology and Management Science 17, 119 (2014). 87. Armour et al., ""Josephson photonics with a two-mo",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:40305,Performance,optimiz,optimization,40305," et al., ""Realizing dipolar spin models with arrays of superconducting qubits"", ; Phys. Rev. B 92, 174507 (2015). 75. Neilinger et al., ""Two-photon lasing by a superconducting qubit"", ; Phys. Rev. B 91, 104516 (2015). 74. Elliott et al., ""Enhancement and state tomography of a squeezed vacuum with circuit quantum electrodynamics"", ; Phys. Rev. A 92, 013826 (2015). 73. Borregaard et al., ""Heralded Quantum Gates with Integrated Error Detection in Optical Cavities"", ; Phys. Rev. Lett. 114, 110502 (2015). 72. Killoran et al., ""Enhancing light-harvesting power with coherent vibrational interactions: a quantum heat engine picture"", ; J. Chem. Phys. 143, 155102 (2015). 71. Lu et al., ""Squeezed Optomechanics with Phase-Matched Amplification and Dissipation"", ; Phys. Rev. Lett. 114, 093602 (2015). 70. Hush et al., ""Spin correlations as a probe of quantum synchronization in trapped-ion phonon lasers"", ; Phys. Rev. A 91, 061401(R) (2015). 69. Hauke et al., ""Probing entanglement in adiabatic quantum optimization with trapped ions"", ; Front. Phys. 3, 21 (2015). 68. Nation et al., ""Iterative solutions to the steady-state density matrix for optomechanical systems"", ; Phys. Rev. E 91, 013307 (2015). 67. Schlawin et al., ""Nonlinear spectroscopy of trapped ions"", ; Phys. Rev. A 90, 023603 (2014). 66. Dunning et al., ""Composite pulses for interferometry in a thermal cold atom cloud"", ; Phys. Rev. A 90, 033608 (2014). 65. Rosado et al., ""Upper-bounded and sliced Jaynes- and anti-Jaynes-Cummings Hamiltonians and Liouvillians in cavity quantum electrodynamics"", ; J. Modern Optics 62, 1561 (2015). 64. Braumüller et al., ""Multiphoton dressing of an anharmonic superconducting many-level quantum circuit"", ; Phys. Rev. B 91, 054523 (2015). 63. Hu et al., ""Quantum coherence in ultrastrong optomechanics"", ; Phys. Rev. A 91, 013812 (2015). 62. Weimer, ""Variational Principle for Steady States of Dissipative Quantum Many-Body Systems"", ; Phys. Rev. Lett. 114, 040402 (2015). 61. Ardelt et al., ""Diss",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:10708,Safety,detect,detection,10708,"ional-order switched systems and its digital implementation"", ; International Journal of Electronics and Communications (2017). 297. Yoshihara et al., ""Characteristic spectra of circuit quantum electrodynamics systems from the ultrastrong- to the deep-strong-coupling regime"", ; Phys. Rev. A 95, 053824 (2017). 296. Endo et al., ""Dynamics of an ultra-strongly-coupled system interacting with a driven nonlinear resonator"", ; arXiv:1705.08688. 295. Venkatesh et al., ""Cooperative Effects in Closely Packed Quantum Emitters with Collective Dephasing"", ; Phys. Rev. Lett. 120, 033602 (2018). 294. Snijders et al., ""A fiber coupled cavity QED source of identical single photons"", ; arXiv:1705.05876. 293. Zanker et al., ""Analyzing the spectral density of a perturbed analog quantum simulator using Keldysh formalism"", ; arXiv:1705.02325. 292. Csurgay et al., ""Toward engineering design of quantum circuits"", ; Int. J. Circ. Theor. Appl. (2017). 291. Megyeri et al., ""Why material slow light does not improve cavity-enhanced atom detection"", ; J. Mod. Phys. (2017). 290. Huembeli et al., ""Towards a heralded eigenstate-preserving measurement of multi-qubit parity in circuit QED"", ; Phys. Rev. A 96, 012313 (2017). 289. Shammah et al., ""Superradiance with local phase-breaking effects"", ; Phys. Rev. A 96, 023863 (2017). 288. Arenz et al., ""The roles of drift and control field constraints upon quantum control speed limits"", ; New J. Phys. 19, 103015 (2017). 287. Leroux et al., ""Simple variational ground state and pure-cat-state generation in the quantum Rabi model"", ; Phys. Rev. A 96, 043834 (2017). 286. Laflamme et al., ""Continuous measurement of an atomic current"", ; Phys. Rev. A 95, 043843 (2017). 285. de Assis et al., ""Negative response with an optical cavity and traveling wave fields"", ; Phys. Rev. A 96, 013821 (2017). 284. Gough, ""The Tyranny of Qubits - Quantum Technology's Scalability Bottleneck"", ; arXiv:1703.05342. 283. Hamsen et al., ""Two-Photon Blockade in an Atom-Driven Cavity QED",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:15384,Safety,detect,detection,15384,"ses with strongly magnetic atoms"", ; Phys. Rev. A 96, 033602 (2017). 261. Poonia et al., ""Functional window of the avian compass"", ; Phys. Rev. E 95, 052417 (2017). 260. Su et al., ""Generating double NOON states of photons in circuit QED"", ; Phys. Rev. A 95, 022339 (2017). 259. Kiukas et al., ""Remote parameter estimation in a quantum spin chain enhanced by local control"", ; Phys. Rev. A 95, 052132 (2017). 258. Gely et al., ""Convergence of the multimode quantum Rabi model of circuit quantum electrodynamics"", ; Phys. Rev. B 95, 245115 (2017). 257. Radtke et al., ""Photonic Quantum Operations via the Quantum Carburettor Effect"", ; arXiv:1701.04251. 256. Lagoudakis et al., ""Observation of Mollow Triplets with Tunable Interactions in Double Lambda Systems of Individual Hole Spins"", ; Phys. Rev. Lett. 118, 013602 (2017). 255. Pucci et al., ""Quantum effects in the cooperative scattering of light by atomic clouds"", ; Phys. Rev. A 95, 053625 (2017). 254. Gessner et al., ""Resolution-enhanced entanglement detection"", ; Phys. Rev. A 95, 032326 (2017). 253. Nigg et al., ""Superconducting Grid-Bus Surface Code Architecture for Hole-Spin Qubits"", ; Phys. Rev. Lett. 118, 147701 (2017). 252. Lüer et al., ""Lévy Defects in Matrix-Immobilized J Aggregates: Tracing Intra-and Intersegmental Exciton Relaxation"", ; J. Phys. Chem. Lett. 8, 547 (2017). 251. Dive et al., ""In situ upgrade of quantum simulators to universal computers"", ; arXiv:1701.01723. 250. Barnes et al., ""Fast microwave-driven three-qubit gates for cavity-coupled superconducting qubits"", ; Phys. Rev. B 96, 024504 (2017). 249. Hu, ""Spin-based single-photon transistor, dynamic random access memory, diodes, and routers in semiconductors"", ; Phys. Rev. B 94, 245307 (2016). 248. Leung et al., ""Speedup for quantum optimal control from automatic differentiation based on graphics processing units"", ; Phys. Rev. A 95, 042318 (2017). 247. Bruhat et al., ""Strong coupling between an electron in a quantum dot circuit and a photon in a cavi",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:18199,Safety,detect,detection,18199,"Rep. 6, 8 (2016). 240. Guo et al., ""Giant acoustic atom: A single quantum system with a deterministic time delay"", ; Phys. Rev. A 95, 053821 (2017). 239. Vermersch et al., ""Quantum State Transfer via Noisy Photonic and Phononic Waveguides"", ; Phys. Rev. Lett. 118, 133601 (2017). 238. Gudmundsson et al., ""Time-dependent current into and through multilevel parallel quantum dots in a photon cavity"", ; Phys. Rev. B 95, 195307 (2017). 237. Braumüller et al., ""Analog quantum simulation of the Rabi model in the ultra-strong coupling regime"", ; Nat. Commun. 8, 779 (2017). 236. Lagoudakis et al., ""Ultrafast coherent manipulation of trions in site-controlled nanowire quantum dots"", ; Optica 3, 1430 (2016). 235. Roghani et al., ""Dissipative Preparation of Entangled Many-Body States with Rydberg Atoms"", ; arXiv:1611.09612. 234. Lambert et al., ""Superradiance with an ensemble of superconducting flux qubits"", ; Phys. Rev. B 94, 224510 (2016). 233. Yanay et al., ""Shelving-style QND phonon-number detection in quantum optomechanics"", ; New J. Phys. 19, 033014 (2017). 232. Kirton et al., ""Suppressing and Restoring the Dicke Superradiance Transition by Dephasing and Decay"", ; Phys. Rev. Lett. 118, 123602 (2017). 231. Fischer et al., ""On-Chip Architecture for Self-Homodyned Nonclassical Light"", ; Phys. Rev. Applied 7, 044002 (2017).; Notebook. 230. Combes et al., ""The SLH framework for modeling quantum input-output networks"", ; Advances in Physics: X 2, 784 (2017). 229. Lucarelli, ""Quantum optimal control via gradient ascent in function space and the time-bandwidth quantum speed limit"", ; arXiv:1611.00188. 228. Bulutay, ""Cat-state generation and stabilization for a nuclear spin through electric quadrupole interaction"", ; Phys. Rev. A 96, 012312 (2017). 227. De Roeck et al., ""Step Density Profiles in Localized Chains"", ; J. Stat. Phys. 167, 1143 (2017). 226. Granade et al., ""QInfer: Statistical inference software for quantum applications"", ; Quantum 1, 5 (2017). 225. Cotrufo et al., ""Coh",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:16025,Security,access,access,16025," 256. Lagoudakis et al., ""Observation of Mollow Triplets with Tunable Interactions in Double Lambda Systems of Individual Hole Spins"", ; Phys. Rev. Lett. 118, 013602 (2017). 255. Pucci et al., ""Quantum effects in the cooperative scattering of light by atomic clouds"", ; Phys. Rev. A 95, 053625 (2017). 254. Gessner et al., ""Resolution-enhanced entanglement detection"", ; Phys. Rev. A 95, 032326 (2017). 253. Nigg et al., ""Superconducting Grid-Bus Surface Code Architecture for Hole-Spin Qubits"", ; Phys. Rev. Lett. 118, 147701 (2017). 252. Lüer et al., ""Lévy Defects in Matrix-Immobilized J Aggregates: Tracing Intra-and Intersegmental Exciton Relaxation"", ; J. Phys. Chem. Lett. 8, 547 (2017). 251. Dive et al., ""In situ upgrade of quantum simulators to universal computers"", ; arXiv:1701.01723. 250. Barnes et al., ""Fast microwave-driven three-qubit gates for cavity-coupled superconducting qubits"", ; Phys. Rev. B 96, 024504 (2017). 249. Hu, ""Spin-based single-photon transistor, dynamic random access memory, diodes, and routers in semiconductors"", ; Phys. Rev. B 94, 245307 (2016). 248. Leung et al., ""Speedup for quantum optimal control from automatic differentiation based on graphics processing units"", ; Phys. Rev. A 95, 042318 (2017). 247. Bruhat et al., ""Strong coupling between an electron in a quantum dot circuit and a photon in a cavity"", ; arXiv:1612.05214. 246. Zanoci et al., ""Entanglement and thermalization in open fermion systems"", ; arXiv:1612.04840. 245. Volokitin et al., ""Computation of the asymptotic states of modulated open quantum systems with a numerically exact realization of the quantum trajectory method"", ; Phys. Rev. E 96, 053313 (2017). 244. Montenegro et al., ""Macroscopic nonclassical-state preparation via postselection"", ; Phys. Rev. A 96, 053851 (2017). 243. Cirio et al., ""Amplified Optomechanical Transduction of Virtual Radiation Pressure"", ; Phys. Rev. Lett. 119, 053601 (2017). 242. Romero et al., ""Quantum autoencoders for efficient compression of quan",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:20177,Security,inject,injector,20177,"-Phonon Interaction through Mode Field Coupling in Hybrid Optomechanical Systems"", ; Phys. Rev. Lett. 118, 133603 (2017). 224. Jonsson et al., ""Efficient determination of the Markovian time-evolution towards a steady-state of a complex open quantum system"", ; Comput. Phys. Commun. 220, 81 (2017). 223. Lahoz-Beltra, ""Quantum Genetic Algorithms for Computer Scientists"", ; Computers 5, 24 (2016). 222. Davis-Tilley et al., ""Synchronization of micromasers"", ; Phys. Rev. A 94, 063819 (2016). 221. Weinberg et al., ""QuSpin: a Python package for dynamics and exact diagonalisation of quantum many body systems part I: spin chains"", ; SciPost Phys. 2, 003 (2017). 220. Dory et al., ""Tuning the photon statistics of a strongly coupled nanophotonic system"", ; Phys. Rev. A 95, 023804 (2017). 219. Lachance-Quirion et al., ""Resolving quanta of collective spin excitations in a millimeter-sized ferromagnet"", ; Science Advances 3, (2017). 218. Doyeux et al., ""Excitation injector in an atomic chain: Long-range transport and efficiency amplification"", ; Phys. Rev. A 95, 012138 (2017). 217. Roulet et al., ""Autonomous Rotor Heat Engine"", ; Phys. Rev. E 95, 062131 (2017). 216. Nigg et al., ""Robust quantum optimizer with full connectivity"", ; Science Advances 3, 1602273 (2017). 215. Puri et al., ""Quantum annealing with all-to-all connected nonlinear oscillators"", ; Nat. Commun. 8, 15785 (2017).>. 214. Shi et al., ""Model reduction of cavity nonlinear optics for photonic logic: a quasi-principal components approach"", ; J. Phys. D: Appl. Phys. 49, 465501 (2016). 213. McNally et al., ""Performance of 1D quantum cellular automata in the presence of error"", ; AIP Advances 6, 095115 (2016). 212. Zhong et al., ""Towards quantum entanglement of micromirrors via a two-level atom and radiation pressure"", ; arXiv:1609.00590. 211. Roth et al., ""Synchronization of active atomic clocks via quantum and classical channels"", ; Phys. Rev. A 94, 043841 (2016). 210. Jarlov et al., ""Effect of Pure Dephasing and Phono",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:22561,Security,encrypt,encrypted,22561," 512 (2016). 207. Fischer et al., ""Dynamical modeling of pulsed two-photon interference"", ; New J. Phys. 18, 113053 (2016).; Notebook1; Notebook2. 206. Seifoory et al., ""The properties of squeezed optical states created in lossy cavities"", ; arXiv:1608.05005. 205. Qin et al., ""Heralded quantum controlled-phase gates with dissipative dynamics in macroscopically distant resonators"", ; Phys. Rev. A 96, 012315 (2017). 204. Cruzeiro et al., ""Interactively Applying the Variational Method to the Dihydrogen Molecule: Exploring Bonding and Antibonding"", ; Journal of Chemical Education (2016). 203. Pleinert et al., ""Quantum signatures of collective behavior of a coherently driven two atom system coupled to a single-mode of the electromagnetic field"", ; arXiv:1608.00137. 202. Wang et al., ""Multiple-output microwave single-photon source using superconducting circuits with longitudinal and transverse couplings"", ; Phys. Rev. A 94, 053858 (2016). 201. Marshall et al., ""Continuous-variable quantum computing on encrypted data"", ; Nat. Comm. 7, 13795 (2016). 200. Dajka et al., ""Leggett–Garg inequalities for a quantum top affected by classical noise"", ; J. Quantum Inf. Process. (2016). 199. Rouxinol et al., ""Measurements of nanoresonator-qubit interactions in a hybrid quantum electromechanical system"", ; Nanotechnology 27, 364003 (2016). 198. Hocker et al., ""PEET: a Matlab tool for estimating physical gate errors in quantum information processing systems"", ; Quantum Information Processing (2016). 197. Daskin, ""Quantum eigenvalue estimation for irreducible non-negative matrices"", ; Int. J. Quantum Inform. 14, 1650005 (2016). 196. Dlaska et al., ""Robust quantum state transfer via topologically protected edge channels in dipolar arrays"", ; Quantum Sci. Technol. 2, 015001 (2017). 195. Juliusson et al., ""Manipulating Fock states of a harmonic oscillator while preserving its linearity"", ; Phys. Rev. A 94, 063861 (2016). 194. Banchi et al., ""Quantum gate learning in qubit networks: Toffoli g",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:988,Testability,benchmark,benchmarking,988," QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. Papers Using QuTiP; Found QuTiP useful for your own work? Please consider helping out by donating an example notebook highlighting how QuTiP was used in your publication. Paper; Journal; Notebook. 371. Fischer et al., ""Scattering into one-dimensional waveguides from a coherently-driven quantum-optical system"", ; Quantum 2, 69 (2018).; Notebook. 370. Fischer et al., ""Particle emission from open quantum systems"", ; arXiv:1803.04648; Notebook. 369. Sonar et al., ""Squeezing Enhances Quantum Synchronization"", ; arXiv:1801.10383. 368. Bergfield et al., ""Signatures of Plexitonic States in Molecular Electroluminescence"", ; Sci. Rep. 8, 2314 (2018). 367. Benedetti et al., ""A generative modeling approach for benchmarking and training shallow quantum circuits"", ; arXiv:1801.07686. 366. Botzem et al., ""Tuning methods for semiconductor spin--qubits"", ; arXiv:1801.03755. 365. Schneider et al., ""Local Sensing with an AC Stark Spectrum Analyzer"", ; arXiv:1801.05144. 364. Seah et al., ""Work production of quantum rotor engines"", ; arXiv:1801.02820. 363. Susa et al., ""Exponential Speedup of Quantum Annealing by Inhomogeneous Driving of the Transverse Field"", ; arXiv:1801.02005. 362. Hanschke et al., ""Quantum dot single photon sources with ultra-low multi-photon probability"", ; arXiv:1801.01672; Notebook. 361. Vermersch et al., ""Unitary n-designs via random quenches in atomic Hubbard and Spin models: Application to the measurement of Renyi entropies"", ; arXiv:1801.00999. 360. Krastanov et al., ""Optimized Entanglement Purification"", ; arXiv:1712.09762. 359. Dahlberg et al., ""SimulaQron - A simulator for developing quantum internet software"", ; arXiv:1712.08032. 358. Abdel-Wahab et al., ""Dynamic evolution of double",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:20680,Testability,log,logic,20680,"s. Rev. A 94, 063819 (2016). 221. Weinberg et al., ""QuSpin: a Python package for dynamics and exact diagonalisation of quantum many body systems part I: spin chains"", ; SciPost Phys. 2, 003 (2017). 220. Dory et al., ""Tuning the photon statistics of a strongly coupled nanophotonic system"", ; Phys. Rev. A 95, 023804 (2017). 219. Lachance-Quirion et al., ""Resolving quanta of collective spin excitations in a millimeter-sized ferromagnet"", ; Science Advances 3, (2017). 218. Doyeux et al., ""Excitation injector in an atomic chain: Long-range transport and efficiency amplification"", ; Phys. Rev. A 95, 012138 (2017). 217. Roulet et al., ""Autonomous Rotor Heat Engine"", ; Phys. Rev. E 95, 062131 (2017). 216. Nigg et al., ""Robust quantum optimizer with full connectivity"", ; Science Advances 3, 1602273 (2017). 215. Puri et al., ""Quantum annealing with all-to-all connected nonlinear oscillators"", ; Nat. Commun. 8, 15785 (2017).>. 214. Shi et al., ""Model reduction of cavity nonlinear optics for photonic logic: a quasi-principal components approach"", ; J. Phys. D: Appl. Phys. 49, 465501 (2016). 213. McNally et al., ""Performance of 1D quantum cellular automata in the presence of error"", ; AIP Advances 6, 095115 (2016). 212. Zhong et al., ""Towards quantum entanglement of micromirrors via a two-level atom and radiation pressure"", ; arXiv:1609.00590. 211. Roth et al., ""Synchronization of active atomic clocks via quantum and classical channels"", ; Phys. Rev. A 94, 043841 (2016). 210. Jarlov et al., ""Effect of Pure Dephasing and Phonon Scattering on the Coupling of Semiconductor Quantum Dots to Optical Cavities"", ; Phys. Rev. Lett. 117, 076801 (2016). 209. Mahajan et al., ""Entanglement structure of non-equilibrium steady states"", ; arXiv:1608.05074. 208. Zhu et al., ""Implementing phase-covariant cloning in circuit quantum electrodynamics"", ; Annals of Physics 373, 512 (2016). 207. Fischer et al., ""Dynamical modeling of pulsed two-photon interference"", ; New J. Phys. 18, 113053 (2016).; N",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:43883,Testability,benchmark,benchmarking,43883,"se-locked oscillator and its application to dispersive readout of superconducting qubits"", ; Nat. Commun. 5, 4480 (2014). 48. Lagoudakis et al., ""Hole Spin Pumping and Re-pumping in a p-type δ-doped InAs Quantum Dot"", ; Phys. Rev. B 90, 121402(R) (2014). 47. Figueiredo Roque et al., ""Dissipation-driven squeezed and sub-Poissonian mechanical states in quadratic optomechanical systems"", ; arXiv:1406.1987. 46. Hardal, ""Dynamics of mode entanglement in a system of cavities coupled with a chiral mirror"", ; J. Opt. Soc. Am. B 31, 2339 (2014). 45. Craddock et al., ""The Feasibility of Coherent Energy Transfer in Microtubules"", ; J. R. Soc. Interface 11, 1742 (2014). 44. Seilmeier et al., ""Optical Thermometry of an Electron Reservoir Coupled to a Single Quantum Dot in the Millikelvin Range"", ; Phys. Rev. Applied 2, 024002 (2014). 43. Pfaff et al., ""Unconditional quantum teleportation between distant solid-state quantum bits"", ; Science 345, 532 (2014). 42. Granade et al., ""Accelerated randomized benchmarking"", ; New J. Phys. 17, 013042 (2015). 41. Karakaya et al., ""Controlled excitations of surface plasmons via optical soliton photons in the quantum regime"", ; Phys. Scr. T160, 014020 (2014). 40. Hardal et al., ""Einstein–Podolsky–Rosen-type quantum entanglement between coupled cavities"", ; Phys. Scr. T160, 014016 (2014). 39. Kyriienko et al., ""Tunable single photon emission from dipolaritons"", ; Phys. Rev. A 90, 033807 (2014). 38. Prado et al., ""Steady Fock states via atomic reservoir"", ; Eur. Phys. Lett. 107, 13001 (2014). 37. Gessner et al., ""Observing a quantum phase transition by measuring a single spin"", ; Euro. Phys. Lett. 107, 40005 (2014). 36. Migdal et al., ""Multiphoton states related via linear optics"", ; Phys. Rev. A 89, 062329 (2014). 35. Haikka et al., ""Dissipative Landau-Zener level crossing subject to continuous measurement: Excitation despite decay"", ; Phys. Rev. A 89, 052114 (2014). 34. Peuntinger et al., ""Distribution of Squeezed States through an Atmospheric",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:6214,Usability,feedback,feedback,6214,".09555. 332. Ishibashi et al., ""Oscillation collapse in coupled quantum van der Pol oscillators"", ; Phys. Rev. E 96, 052210 (2017). 331. Elbin et al., ""Rényi Entropies from Random Quenches in Atomic Hubbard and Spin Models"", ; arXiv:1709.05060. 330. Li et al., ""Quantum microwave-optical interface with nitrogen-vacancy centers in diamond"", ; Phys. Rev. A 96, 032342 (2017). 329. Diguna et al., ""The coupling of single-photon exciton–biexciton quantum dot and cavity"", ; J. Nonlinear Optic. Phys. Mat. 1750029, (2017). 328. Lee et al., ""Effective formalism for open-quantum-system dynamics: Time-coarse-graining approach"", ; Phys. Rev. A 97, 012102 (2018). 327. de Moraes Neto et al., ""Steady many-body entanglements in dissipative systems"", ; Phys. Rev. A 96, 062313 (2017). 326. Zhang et al., ""Efficient numerical solution of excitation number conserving quantum systems"", ; AIP Advances 7, 085225 (2017). 325. Heuck et al., ""Temporally and frequency multiplexed single photon source using quantum feedback control for scalable photonic quantum technologies"", ; arXiv:1708.08875. 324. Kurian et al., ""Oxidative species-induced excitonic transport in tubulin aromatic networks: Potential implications for neurodegenerative disease"", ; J. Photochem. Photobiol. B: Biology (2017). 323. Hwang et al., ""Dissipative phase transition in the open quantum Rabi model"", ; Phys. Rev. A 97, 013825 (2018). 322. Higgins et al., ""Coherent Control of a Single Trapped Rydberg Ion"", ; Phys. Rev. Lett. 119, 220501 (2017). 321. Schlipf et al., ""A molecular quantum spin network controlled by a single qubit"", ; Sci. Adv. 3, 1701116 (2017). 320. Hardal et al., ""Quantum heat engine with coupled superconducting resonators"", ; Phys. Rev. E 96, 062120 (2017). 319. Katabarwa et al., ""Quantum Projective Simulation with Hamiltonian Evolution: A study in reinforcement learning"", ; arXiv:1708.00123. 318. Kienzler et al., ""Quantum Harmonic Oscillator State Control in a Squeezed Fock Basis"", ; Phys. Rev. Lett. 119, 0336",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:7063,Usability,learn,learning,7063,"lution of excitation number conserving quantum systems"", ; AIP Advances 7, 085225 (2017). 325. Heuck et al., ""Temporally and frequency multiplexed single photon source using quantum feedback control for scalable photonic quantum technologies"", ; arXiv:1708.08875. 324. Kurian et al., ""Oxidative species-induced excitonic transport in tubulin aromatic networks: Potential implications for neurodegenerative disease"", ; J. Photochem. Photobiol. B: Biology (2017). 323. Hwang et al., ""Dissipative phase transition in the open quantum Rabi model"", ; Phys. Rev. A 97, 013825 (2018). 322. Higgins et al., ""Coherent Control of a Single Trapped Rydberg Ion"", ; Phys. Rev. Lett. 119, 220501 (2017). 321. Schlipf et al., ""A molecular quantum spin network controlled by a single qubit"", ; Sci. Adv. 3, 1701116 (2017). 320. Hardal et al., ""Quantum heat engine with coupled superconducting resonators"", ; Phys. Rev. E 96, 062120 (2017). 319. Katabarwa et al., ""Quantum Projective Simulation with Hamiltonian Evolution: A study in reinforcement learning"", ; arXiv:1708.00123. 318. Kienzler et al., ""Quantum Harmonic Oscillator State Control in a Squeezed Fock Basis"", ; Phys. Rev. Lett. 119, 033602 (2017). 317. Wen et al., ""Reflective amplification without population inversion from a strongly driven superconducting qubit"", ; arXiv:1707.06400. 316. Schmidt et al., ""WavePacket: A Matlab package for numerical quantum dynamics. II: Open quantum systems, optimal control, and model reduction"", ; arXiv:1707.06077. 315. Impens et al., ""Shortcut to adiabaticity in a Stern-Gerlach apparatus"", ; Phys. Rev. A 96, 043609 (2017). 314. Dalmonte et al., ""Quantum Simulation and Spectroscopy of Entanglement Hamiltonians"", ; arXiv:1707.04455. 313. Gu et al., ""Microwave photonics with superconducting quantum circuits"", ; Phys. Rep. 718-719, 1 (2017). 312. Kiršanskas et al., ""QmeQ 1.0: An open-source Python package for calculations of transport through quantum dot devices"", ; Comput. Phys. Commun. 221, 317 (2017). 311.",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:14144,Usability,feedback,feedback,14144,"052330 (2017). 271. Ren et al., ""Evanescent-Vacuum-Enhanced Photon-Exciton Coupling and Fluorescence Collection"", ; Phys. Rev. Lett. 118, 073604 (2017). 270. Chu et al., ""Quantum acoustics with superconducting qubits"", ; Science 358, 199 (2017). 269. Fischer et al., ""Signatures of two-photon pulses from a quantum two-level system"", ; Nat. Phys. 13, 649 (2017). 268. Marshman et al., ""Investigating and improving student understanding of the probability distributions for measuring physical observables in quantum mechanics"", ; Eur. J. Phys. 38, 025705 (2017). 267. Borges et al., ""Influence of the asymmetric excited state decay on coherent population trapping: atom × quantum dot"", ; arXiv:1702.07692. 266. Pleinert et al., ""Hyperradiance from collective behavior of coherently driven atoms"", ; Optica 4, 779 (2017). 265. Oviedo-Casado et al., ""Magnetic field enhancement of organic photovoltaic cells performance"", ; Sci. Rep. 7, 4297 (2017). 264. Whalen et al., ""Open quantum systems with delayed coherent feedback"", ; Quantum Sci. Technol. 2, 044008 (2017). 263. Cottet et al., ""Observing a quantum Maxwell demon at work"", ; Proc. Natl. Acad. Sci. U.S.A. 114, 7561 (2017). 262. Mazloom et al., ""Adiabatic state preparation of stripe phases with strongly magnetic atoms"", ; Phys. Rev. A 96, 033602 (2017). 261. Poonia et al., ""Functional window of the avian compass"", ; Phys. Rev. E 95, 052417 (2017). 260. Su et al., ""Generating double NOON states of photons in circuit QED"", ; Phys. Rev. A 95, 022339 (2017). 259. Kiukas et al., ""Remote parameter estimation in a quantum spin chain enhanced by local control"", ; Phys. Rev. A 95, 052132 (2017). 258. Gely et al., ""Convergence of the multimode quantum Rabi model of circuit quantum electrodynamics"", ; Phys. Rev. B 95, 245115 (2017). 257. Radtke et al., ""Photonic Quantum Operations via the Quantum Carburettor Effect"", ; arXiv:1701.04251. 256. Lagoudakis et al., ""Observation of Mollow Triplets with Tunable Interactions in Double Lambda Systems",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:23514,Usability,learn,learning,23514,"rypted data"", ; Nat. Comm. 7, 13795 (2016). 200. Dajka et al., ""Leggett–Garg inequalities for a quantum top affected by classical noise"", ; J. Quantum Inf. Process. (2016). 199. Rouxinol et al., ""Measurements of nanoresonator-qubit interactions in a hybrid quantum electromechanical system"", ; Nanotechnology 27, 364003 (2016). 198. Hocker et al., ""PEET: a Matlab tool for estimating physical gate errors in quantum information processing systems"", ; Quantum Information Processing (2016). 197. Daskin, ""Quantum eigenvalue estimation for irreducible non-negative matrices"", ; Int. J. Quantum Inform. 14, 1650005 (2016). 196. Dlaska et al., ""Robust quantum state transfer via topologically protected edge channels in dipolar arrays"", ; Quantum Sci. Technol. 2, 015001 (2017). 195. Juliusson et al., ""Manipulating Fock states of a harmonic oscillator while preserving its linearity"", ; Phys. Rev. A 94, 063861 (2016). 194. Banchi et al., ""Quantum gate learning in qubit networks: Toffoli gate without time-dependent control"", ; njp Quantum Information 2, 16019 (2016). 193. Hofer et al., ""Autonomous quantum refrigerator in a circuit QED architecture based on a Josephson junction"", ; Phys. Rev. B 94, 235420 (2016). 192. Sampaio et al., ""Calorimetric measurement of work for a driven harmonic oscillator"", ; Phys. Rev. E 94, 062122 (2016). 191. Molony et al., ""Production of ultracold 87Rb133Cs in the absolute ground state: complete characterisation of the STIRAP transfer"", ; ChemPhysChem (2016). 190. Moran, ""Quintuple: a Python 5-qubit quantum computer simulator to facilitate cloud quantum computing"", ; arXiv:1606.09225. 189. Falloon et al., ""QSWalk: A Mathematica package for quantum stochastic walks on arbitrary graphs"", ; Comp. Phys. Commun. 217, 162 (2017). 188. Lammers et al., ""Open-system many-body dynamics through interferometric measurements and feedback"", ; Phys. Rev. A 94, 052120 (2016). 187. Li et al., ""Hybrid Quantum Device with Nitrogen-Vacancy Centers in Diamond Coupled to Ca",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:24426,Usability,feedback,feedback,24426,"onic oscillator while preserving its linearity"", ; Phys. Rev. A 94, 063861 (2016). 194. Banchi et al., ""Quantum gate learning in qubit networks: Toffoli gate without time-dependent control"", ; njp Quantum Information 2, 16019 (2016). 193. Hofer et al., ""Autonomous quantum refrigerator in a circuit QED architecture based on a Josephson junction"", ; Phys. Rev. B 94, 235420 (2016). 192. Sampaio et al., ""Calorimetric measurement of work for a driven harmonic oscillator"", ; Phys. Rev. E 94, 062122 (2016). 191. Molony et al., ""Production of ultracold 87Rb133Cs in the absolute ground state: complete characterisation of the STIRAP transfer"", ; ChemPhysChem (2016). 190. Moran, ""Quintuple: a Python 5-qubit quantum computer simulator to facilitate cloud quantum computing"", ; arXiv:1606.09225. 189. Falloon et al., ""QSWalk: A Mathematica package for quantum stochastic walks on arbitrary graphs"", ; Comp. Phys. Commun. 217, 162 (2017). 188. Lammers et al., ""Open-system many-body dynamics through interferometric measurements and feedback"", ; Phys. Rev. A 94, 052120 (2016). 187. Li et al., ""Hybrid Quantum Device with Nitrogen-Vacancy Centers in Diamond Coupled to Carbon Nanotubes"", ; Phys. Rev. Lett. 117, 015502 (2016). 186. Grimm et al., ""Optomechanical self-oscillations in an anharmonic potential: engineering a nonclassical steady state"", ; J. Opt. 18, 094004 (2016). 185. Puri et al., ""Engineering the quantum states of light in a Kerr-nonlinear resonator by two-photon driving"", ; npj Quantum Information 3, 18 (2017). 184. Rossatto et al., ""Relaxation time for monitoring the quantumness of an intense cavity field"", ; Phys. Rev. A 94, 033819 (2016). 183. Shackerley-Bennett et al., ""The reachable set of single-mode quadratic Hamiltonians"", ; J. Phys. A: Math. Theor. 50, 155203 (2017). 182. Blumoff et al., ""Implementing and Characterizing Precise Multiqubit Measurements"", ; Phys. Rev. X 6, 031041 (2016). 181. Li et al., ""Entangling a single NV centre with a superconducting qubit via pa",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/users.html:31208,Usability,feedback,feedback,31208,"erties via an ab Initio Exciton Model: Application to Excitation Energy Transfer in a Self-Assembled Nanotube"", ; J. Phys. Chem. Lett. 6, 4390 (2015). 143. Yamamoto et al., ""Parametric Amplifier and Oscillator Based on Josephson Junction Circuitry"", ; Lecture Notes in Physics 911, 495 (2016). 142. Dory et al., ""Complete Coherent Control of a Quantum Dot Strongly Coupled to a Nanocavity"", ; Sci. Rep. 6, 25172 (2016). 141. Kaczmarczyk et al., ""Dissipative preparation of antiferromagnetic order in the Fermi-Hubbard model"", ; New J. Phys. 18 093042 (2016). 140. Rogers et al., ""Atom-field entanglement in cavity QED: Nonlinearity and saturation"", ; Phys. Rev. A 96, 052311 (2017). 139. de Moras Neto et al., ""Quantum state transfer in optomechanical arrays"", ; Phys. Rev. A 93, 062339 (2016). 138. Puri et al., ""High-Fidelity Resonator-Induced Phase Gate with Single-Mode Squeezing"", ; Phys. Rev. Lett. 116, 180501 (2016). 137. Ivanov et al., ""Incoherent quantum feedback control of collective light scattering by Bose-Einstein condensates"", ; arXiv:1601.02230. 136. Dooley et al., ""A hybrid-systems approach to spin squeezing using a highly dissipative ancillary system"", ; New J. Phys. 18, 053011 (2016). 135. Fischbach et al., ""Steady-state entanglement enhanced by a dissipative ancilla"", ; Phys. Rev. A 92, 052327 (2015). 134. Goryachev et al., ""Creating Tuneable Microwave Media from a Two-Dimensional Lattice of Re-entrant Posts"", ; J. Appl. Phys. 118, 204504 (2015). 133. Leggio et al., ""Distributed thermal tasks on many-body systems through a single quantum machine"", ; Europhys. Lett. 112, 40004 (2015). 132. Iles-Smith et al., ""Energy transfer in structured and unstructured environments: Master equations beyond the Born-Markov approximations"", ; J. Chem. Phys. 144, 044110 (2016). 131. Korkmaz et al., ""Nuclear spin squeezing via electric quadrupole interaction"", ; Phys. Rev. A 93, 013812 (2016). 130. del Pino et al., ""Signatures of Vibrational Strong Coupling in Raman Scattering"",",MatchSource.WIKI,users.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/users.html
https://qutip.org/qutip-tutorials/index-v4.html:5626,Energy Efficiency,charge,charge,5626,"1d: Spin-Bath model, fitting of spectrum and correlation functions; HEOM 1e: Spin-Bath model (pure dephasing); HEOM 2: Dynamics in Fenna-Mathews-Olsen complex (FMO); HEOM 3: Quantum Heat Transport; HEOM 4: Dynamical decoupling of a non-Markovian environment; HEOM 5a: Fermionic single impurity model; HEOM 5b: Discrete boson coupled to an impurity and fermionic leads; Hierarchical Equation of Motion Examples. Miscellaneous tutorials. Lecture: Single-photon Interference. Quantum mechanics lectures with QuTiP; These lecture-style notebooks focus on particular quantum mechanics; topics and analyze them numerically using QuTiP (some more detailed than others). Lecture 0 - Introduction to QuTiP; Lecture 1 - Vacuum Rabi oscillations in the Jaynes-Cummings model; Lecture 2A - Simulation of a two-qubit gate using a resonator as coupler; Lecture 2B - Single-Atom-Lasing; Lecture 3A - The Dicke model; Lecture 3B - Jaynes-Cummings-like model in the ultrastrong coupling regime; Lecture 4 - Correlation functions; Lecture 5 - Evolution and quantum statistics of a quantum parameter amplifier; Lecture 6 - Quantum Monte-Carlo Trajectories; Lecture 7 - Two-qubit iSWAP gate and process tomography; Lecture 8 - Adiabatic sweep; Lecture 9 - Squeezed states of a quantum harmonic oscillator; Lecture 10 - Cavity-QED in the dispersive regime; Lecture 11 - Superconducting Josephson charge qubits; Lecture 12 - Decay into a squeezed vacuum field; Lecture 13 - Resonance flourescence; Lecture 14 - Kerr nonlinearities; Lecture 15 - Nonclassically driven atoms (cascaded quantum systems); Lecture 16 - Gallery of Wigner functions. Contributing; If you would like to contribute a notebook or report a bug, you may open; an issue or pull request in the; qutip-tutorials; GitHub repository. A few of the notebooks are still maintained in the repository; qutip-notebooks and; a complete archive of older versions of the tutorials is maintained there. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,qutip-tutorials/index-v4.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-tutorials/index-v4.html
https://qutip.org/qutip-tutorials/index-v4.html:2522,Integrability,depend,dependent,2522,Decomposition of the Toffoli gate in terms of CNOT and single-qubit rotations; Imports and Exports QASM circuit; QuTiP example: Quantum Gates and their usage; Quantum Teleportation Circuit. Pulse-level circuit simulation. Compiling and simulating a 10-qubit Quantum Fourier Transform (QFT) algorithm; Custimize the pulse-level simulation; Examples for OptPulseProcessor; Scheduler for quantum gates and instructions; Simulating randomized benchmarking; Simulating the Deutsch–Jozsa algorithm at the pulse level; measuring the relaxation time with the idling gate. Time evolution. QobjEvo: time-dependent quantum objects; Schrödinger Equation Solver: Larmor precession; Master Equation Solver: Single-Qubit Dynamics; Master Equation Solver: Vacuum Rabi oscillations; Master Equation Solver: Dynamics of a Spin Chain; Monte Carlo Solver: Birth and Death of Photons in a Cavity; Bloch-Redfield Solver: Two Level System; Bloch-Redfield Solver: Time dependent operators; Bloch-Redfield Solver: Dissipative Atom-Cavity system; Bloch-Redfield Solver: Phonon-assisted initialization; Floquet Solvers; Floquet Formalism; Time-dependent Master Equation: Landau-Zener transitions; Time-dependent Master Equation: Landau-Zener-Stuckelberg inteferometry; Stochastic Solver: Heterodyne Detection; Stochastic Solver: Mixing stochastic and deterministic equations; Stochastic Solver: Photo-current detection in a JC model; Stochastic vs. Monte-Carlo Solver: Cat states become coherent; Steady-State: Optomechanical System in the Single-Photon Strong-Coupling Regime; Steady-State: Homodyned Jaynes-Cummings emission; Steady-State: Time-dependent (periodic) quantum system. Optimal control. Overview ; Hadamard ; QFT ; Lindbladian ; Symplectic ; QFT (CRAB) ; State to state (CRAB) ; CNOT ; iSWAP ; Single-qubit rotation ; Toffoli gate . Tomography. Density matrix estimation with iterative maximum likelihood estimation . Permutational invariant Lindblad dynamics. Overview ; Superradiant light emission ; Steady stat,MatchSource.WIKI,qutip-tutorials/index-v4.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-tutorials/index-v4.html
https://qutip.org/qutip-tutorials/index-v4.html:2873,Integrability,depend,dependent,2873,Decomposition of the Toffoli gate in terms of CNOT and single-qubit rotations; Imports and Exports QASM circuit; QuTiP example: Quantum Gates and their usage; Quantum Teleportation Circuit. Pulse-level circuit simulation. Compiling and simulating a 10-qubit Quantum Fourier Transform (QFT) algorithm; Custimize the pulse-level simulation; Examples for OptPulseProcessor; Scheduler for quantum gates and instructions; Simulating randomized benchmarking; Simulating the Deutsch–Jozsa algorithm at the pulse level; measuring the relaxation time with the idling gate. Time evolution. QobjEvo: time-dependent quantum objects; Schrödinger Equation Solver: Larmor precession; Master Equation Solver: Single-Qubit Dynamics; Master Equation Solver: Vacuum Rabi oscillations; Master Equation Solver: Dynamics of a Spin Chain; Monte Carlo Solver: Birth and Death of Photons in a Cavity; Bloch-Redfield Solver: Two Level System; Bloch-Redfield Solver: Time dependent operators; Bloch-Redfield Solver: Dissipative Atom-Cavity system; Bloch-Redfield Solver: Phonon-assisted initialization; Floquet Solvers; Floquet Formalism; Time-dependent Master Equation: Landau-Zener transitions; Time-dependent Master Equation: Landau-Zener-Stuckelberg inteferometry; Stochastic Solver: Heterodyne Detection; Stochastic Solver: Mixing stochastic and deterministic equations; Stochastic Solver: Photo-current detection in a JC model; Stochastic vs. Monte-Carlo Solver: Cat states become coherent; Steady-State: Optomechanical System in the Single-Photon Strong-Coupling Regime; Steady-State: Homodyned Jaynes-Cummings emission; Steady-State: Time-dependent (periodic) quantum system. Optimal control. Overview ; Hadamard ; QFT ; Lindbladian ; Symplectic ; QFT (CRAB) ; State to state (CRAB) ; CNOT ; iSWAP ; Single-qubit rotation ; Toffoli gate . Tomography. Density matrix estimation with iterative maximum likelihood estimation . Permutational invariant Lindblad dynamics. Overview ; Superradiant light emission ; Steady stat,MatchSource.WIKI,qutip-tutorials/index-v4.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-tutorials/index-v4.html
https://qutip.org/qutip-tutorials/index-v4.html:3045,Integrability,depend,dependent,3045,Decomposition of the Toffoli gate in terms of CNOT and single-qubit rotations; Imports and Exports QASM circuit; QuTiP example: Quantum Gates and their usage; Quantum Teleportation Circuit. Pulse-level circuit simulation. Compiling and simulating a 10-qubit Quantum Fourier Transform (QFT) algorithm; Custimize the pulse-level simulation; Examples for OptPulseProcessor; Scheduler for quantum gates and instructions; Simulating randomized benchmarking; Simulating the Deutsch–Jozsa algorithm at the pulse level; measuring the relaxation time with the idling gate. Time evolution. QobjEvo: time-dependent quantum objects; Schrödinger Equation Solver: Larmor precession; Master Equation Solver: Single-Qubit Dynamics; Master Equation Solver: Vacuum Rabi oscillations; Master Equation Solver: Dynamics of a Spin Chain; Monte Carlo Solver: Birth and Death of Photons in a Cavity; Bloch-Redfield Solver: Two Level System; Bloch-Redfield Solver: Time dependent operators; Bloch-Redfield Solver: Dissipative Atom-Cavity system; Bloch-Redfield Solver: Phonon-assisted initialization; Floquet Solvers; Floquet Formalism; Time-dependent Master Equation: Landau-Zener transitions; Time-dependent Master Equation: Landau-Zener-Stuckelberg inteferometry; Stochastic Solver: Heterodyne Detection; Stochastic Solver: Mixing stochastic and deterministic equations; Stochastic Solver: Photo-current detection in a JC model; Stochastic vs. Monte-Carlo Solver: Cat states become coherent; Steady-State: Optomechanical System in the Single-Photon Strong-Coupling Regime; Steady-State: Homodyned Jaynes-Cummings emission; Steady-State: Time-dependent (periodic) quantum system. Optimal control. Overview ; Hadamard ; QFT ; Lindbladian ; Symplectic ; QFT (CRAB) ; State to state (CRAB) ; CNOT ; iSWAP ; Single-qubit rotation ; Toffoli gate . Tomography. Density matrix estimation with iterative maximum likelihood estimation . Permutational invariant Lindblad dynamics. Overview ; Superradiant light emission ; Steady stat,MatchSource.WIKI,qutip-tutorials/index-v4.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-tutorials/index-v4.html
https://qutip.org/qutip-tutorials/index-v4.html:3103,Integrability,depend,dependent,3103,Decomposition of the Toffoli gate in terms of CNOT and single-qubit rotations; Imports and Exports QASM circuit; QuTiP example: Quantum Gates and their usage; Quantum Teleportation Circuit. Pulse-level circuit simulation. Compiling and simulating a 10-qubit Quantum Fourier Transform (QFT) algorithm; Custimize the pulse-level simulation; Examples for OptPulseProcessor; Scheduler for quantum gates and instructions; Simulating randomized benchmarking; Simulating the Deutsch–Jozsa algorithm at the pulse level; measuring the relaxation time with the idling gate. Time evolution. QobjEvo: time-dependent quantum objects; Schrödinger Equation Solver: Larmor precession; Master Equation Solver: Single-Qubit Dynamics; Master Equation Solver: Vacuum Rabi oscillations; Master Equation Solver: Dynamics of a Spin Chain; Monte Carlo Solver: Birth and Death of Photons in a Cavity; Bloch-Redfield Solver: Two Level System; Bloch-Redfield Solver: Time dependent operators; Bloch-Redfield Solver: Dissipative Atom-Cavity system; Bloch-Redfield Solver: Phonon-assisted initialization; Floquet Solvers; Floquet Formalism; Time-dependent Master Equation: Landau-Zener transitions; Time-dependent Master Equation: Landau-Zener-Stuckelberg inteferometry; Stochastic Solver: Heterodyne Detection; Stochastic Solver: Mixing stochastic and deterministic equations; Stochastic Solver: Photo-current detection in a JC model; Stochastic vs. Monte-Carlo Solver: Cat states become coherent; Steady-State: Optomechanical System in the Single-Photon Strong-Coupling Regime; Steady-State: Homodyned Jaynes-Cummings emission; Steady-State: Time-dependent (periodic) quantum system. Optimal control. Overview ; Hadamard ; QFT ; Lindbladian ; Symplectic ; QFT (CRAB) ; State to state (CRAB) ; CNOT ; iSWAP ; Single-qubit rotation ; Toffoli gate . Tomography. Density matrix estimation with iterative maximum likelihood estimation . Permutational invariant Lindblad dynamics. Overview ; Superradiant light emission ; Steady stat,MatchSource.WIKI,qutip-tutorials/index-v4.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-tutorials/index-v4.html
https://qutip.org/qutip-tutorials/index-v4.html:3548,Integrability,depend,dependent,3548,"ime with the idling gate. Time evolution. QobjEvo: time-dependent quantum objects; Schrödinger Equation Solver: Larmor precession; Master Equation Solver: Single-Qubit Dynamics; Master Equation Solver: Vacuum Rabi oscillations; Master Equation Solver: Dynamics of a Spin Chain; Monte Carlo Solver: Birth and Death of Photons in a Cavity; Bloch-Redfield Solver: Two Level System; Bloch-Redfield Solver: Time dependent operators; Bloch-Redfield Solver: Dissipative Atom-Cavity system; Bloch-Redfield Solver: Phonon-assisted initialization; Floquet Solvers; Floquet Formalism; Time-dependent Master Equation: Landau-Zener transitions; Time-dependent Master Equation: Landau-Zener-Stuckelberg inteferometry; Stochastic Solver: Heterodyne Detection; Stochastic Solver: Mixing stochastic and deterministic equations; Stochastic Solver: Photo-current detection in a JC model; Stochastic vs. Monte-Carlo Solver: Cat states become coherent; Steady-State: Optomechanical System in the Single-Photon Strong-Coupling Regime; Steady-State: Homodyned Jaynes-Cummings emission; Steady-State: Time-dependent (periodic) quantum system. Optimal control. Overview ; Hadamard ; QFT ; Lindbladian ; Symplectic ; QFT (CRAB) ; State to state (CRAB) ; CNOT ; iSWAP ; Single-qubit rotation ; Toffoli gate . Tomography. Density matrix estimation with iterative maximum likelihood estimation . Permutational invariant Lindblad dynamics. Overview ; Superradiant light emission ; Steady state superradiance ; Open Dicke model ; Spin squeezing with noise ; Boundary time crystals ; Multiple spin ensembles ; Von Neumann entropy and purity . Hierarchical Equations of Motion. HEOM 1a: Spin-Bath model (introduction); HEOM 1b: Spin-Bath model (very strong coupling); HEOM 1c: Spin-Bath model (Underdamped Case); HEOM 1d: Spin-Bath model, fitting of spectrum and correlation functions; HEOM 1e: Spin-Bath model (pure dephasing); HEOM 2: Dynamics in Fenna-Mathews-Olsen complex (FMO); HEOM 3: Quantum Heat Transport; HEOM 4: Dynamical ",MatchSource.WIKI,qutip-tutorials/index-v4.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-tutorials/index-v4.html
https://qutip.org/qutip-tutorials/index-v4.html:4190,Modifiability,coupling,coupling,4190,"me coherent; Steady-State: Optomechanical System in the Single-Photon Strong-Coupling Regime; Steady-State: Homodyned Jaynes-Cummings emission; Steady-State: Time-dependent (periodic) quantum system. Optimal control. Overview ; Hadamard ; QFT ; Lindbladian ; Symplectic ; QFT (CRAB) ; State to state (CRAB) ; CNOT ; iSWAP ; Single-qubit rotation ; Toffoli gate . Tomography. Density matrix estimation with iterative maximum likelihood estimation . Permutational invariant Lindblad dynamics. Overview ; Superradiant light emission ; Steady state superradiance ; Open Dicke model ; Spin squeezing with noise ; Boundary time crystals ; Multiple spin ensembles ; Von Neumann entropy and purity . Hierarchical Equations of Motion. HEOM 1a: Spin-Bath model (introduction); HEOM 1b: Spin-Bath model (very strong coupling); HEOM 1c: Spin-Bath model (Underdamped Case); HEOM 1d: Spin-Bath model, fitting of spectrum and correlation functions; HEOM 1e: Spin-Bath model (pure dephasing); HEOM 2: Dynamics in Fenna-Mathews-Olsen complex (FMO); HEOM 3: Quantum Heat Transport; HEOM 4: Dynamical decoupling of a non-Markovian environment; HEOM 5a: Fermionic single impurity model; HEOM 5b: Discrete boson coupled to an impurity and fermionic leads; Hierarchical Equation of Motion Examples. Miscellaneous tutorials. Lecture: Single-photon Interference. Quantum mechanics lectures with QuTiP; These lecture-style notebooks focus on particular quantum mechanics; topics and analyze them numerically using QuTiP (some more detailed than others). Lecture 0 - Introduction to QuTiP; Lecture 1 - Vacuum Rabi oscillations in the Jaynes-Cummings model; Lecture 2A - Simulation of a two-qubit gate using a resonator as coupler; Lecture 2B - Single-Atom-Lasing; Lecture 3A - The Dicke model; Lecture 3B - Jaynes-Cummings-like model in the ultrastrong coupling regime; Lecture 4 - Correlation functions; Lecture 5 - Evolution and quantum statistics of a quantum parameter amplifier; Lecture 6 - Quantum Monte-Carlo Trajectorie",MatchSource.WIKI,qutip-tutorials/index-v4.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-tutorials/index-v4.html
https://qutip.org/qutip-tutorials/index-v4.html:5212,Modifiability,coupling,coupling,5212,"1d: Spin-Bath model, fitting of spectrum and correlation functions; HEOM 1e: Spin-Bath model (pure dephasing); HEOM 2: Dynamics in Fenna-Mathews-Olsen complex (FMO); HEOM 3: Quantum Heat Transport; HEOM 4: Dynamical decoupling of a non-Markovian environment; HEOM 5a: Fermionic single impurity model; HEOM 5b: Discrete boson coupled to an impurity and fermionic leads; Hierarchical Equation of Motion Examples. Miscellaneous tutorials. Lecture: Single-photon Interference. Quantum mechanics lectures with QuTiP; These lecture-style notebooks focus on particular quantum mechanics; topics and analyze them numerically using QuTiP (some more detailed than others). Lecture 0 - Introduction to QuTiP; Lecture 1 - Vacuum Rabi oscillations in the Jaynes-Cummings model; Lecture 2A - Simulation of a two-qubit gate using a resonator as coupler; Lecture 2B - Single-Atom-Lasing; Lecture 3A - The Dicke model; Lecture 3B - Jaynes-Cummings-like model in the ultrastrong coupling regime; Lecture 4 - Correlation functions; Lecture 5 - Evolution and quantum statistics of a quantum parameter amplifier; Lecture 6 - Quantum Monte-Carlo Trajectories; Lecture 7 - Two-qubit iSWAP gate and process tomography; Lecture 8 - Adiabatic sweep; Lecture 9 - Squeezed states of a quantum harmonic oscillator; Lecture 10 - Cavity-QED in the dispersive regime; Lecture 11 - Superconducting Josephson charge qubits; Lecture 12 - Decay into a squeezed vacuum field; Lecture 13 - Resonance flourescence; Lecture 14 - Kerr nonlinearities; Lecture 15 - Nonclassically driven atoms (cascaded quantum systems); Lecture 16 - Gallery of Wigner functions. Contributing; If you would like to contribute a notebook or report a bug, you may open; an issue or pull request in the; qutip-tutorials; GitHub repository. A few of the notebooks are still maintained in the repository; qutip-notebooks and; a complete archive of older versions of the tutorials is maintained there. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,qutip-tutorials/index-v4.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-tutorials/index-v4.html
https://qutip.org/qutip-tutorials/index-v4.html:3310,Safety,detect,detection,3310,Decomposition of the Toffoli gate in terms of CNOT and single-qubit rotations; Imports and Exports QASM circuit; QuTiP example: Quantum Gates and their usage; Quantum Teleportation Circuit. Pulse-level circuit simulation. Compiling and simulating a 10-qubit Quantum Fourier Transform (QFT) algorithm; Custimize the pulse-level simulation; Examples for OptPulseProcessor; Scheduler for quantum gates and instructions; Simulating randomized benchmarking; Simulating the Deutsch–Jozsa algorithm at the pulse level; measuring the relaxation time with the idling gate. Time evolution. QobjEvo: time-dependent quantum objects; Schrödinger Equation Solver: Larmor precession; Master Equation Solver: Single-Qubit Dynamics; Master Equation Solver: Vacuum Rabi oscillations; Master Equation Solver: Dynamics of a Spin Chain; Monte Carlo Solver: Birth and Death of Photons in a Cavity; Bloch-Redfield Solver: Two Level System; Bloch-Redfield Solver: Time dependent operators; Bloch-Redfield Solver: Dissipative Atom-Cavity system; Bloch-Redfield Solver: Phonon-assisted initialization; Floquet Solvers; Floquet Formalism; Time-dependent Master Equation: Landau-Zener transitions; Time-dependent Master Equation: Landau-Zener-Stuckelberg inteferometry; Stochastic Solver: Heterodyne Detection; Stochastic Solver: Mixing stochastic and deterministic equations; Stochastic Solver: Photo-current detection in a JC model; Stochastic vs. Monte-Carlo Solver: Cat states become coherent; Steady-State: Optomechanical System in the Single-Photon Strong-Coupling Regime; Steady-State: Homodyned Jaynes-Cummings emission; Steady-State: Time-dependent (periodic) quantum system. Optimal control. Overview ; Hadamard ; QFT ; Lindbladian ; Symplectic ; QFT (CRAB) ; State to state (CRAB) ; CNOT ; iSWAP ; Single-qubit rotation ; Toffoli gate . Tomography. Density matrix estimation with iterative maximum likelihood estimation . Permutational invariant Lindblad dynamics. Overview ; Superradiant light emission ; Steady stat,MatchSource.WIKI,qutip-tutorials/index-v4.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-tutorials/index-v4.html
https://qutip.org/qutip-tutorials/index-v4.html:2367,Testability,benchmark,benchmarking,2367,and introduce specific functionality in QuTiP. Python Introduction. Introduction to Python; Introduction to NumPy Arrays; Plotting in Python Using Matplotlib; Lecture 0 - Introduction to QuTiP. For a more in depth discussion see: Lectures on scientific computing with Python.; Visualization. Bloch Sphere animation; Bloch Sphere with colorbar; Energy-level diagrams; Pseudo-probability functions; Quantum Process Tomography; Qubism visualizations; Visualization demos; Wigner functions. Quantum information processing; This section requires an additional package qutip-qip.; Quantum circuits and algorithms. Decomposition of the Toffoli gate in terms of CNOT and single-qubit rotations; Imports and Exports QASM circuit; QuTiP example: Quantum Gates and their usage; Quantum Teleportation Circuit. Pulse-level circuit simulation. Compiling and simulating a 10-qubit Quantum Fourier Transform (QFT) algorithm; Custimize the pulse-level simulation; Examples for OptPulseProcessor; Scheduler for quantum gates and instructions; Simulating randomized benchmarking; Simulating the Deutsch–Jozsa algorithm at the pulse level; measuring the relaxation time with the idling gate. Time evolution. QobjEvo: time-dependent quantum objects; Schrödinger Equation Solver: Larmor precession; Master Equation Solver: Single-Qubit Dynamics; Master Equation Solver: Vacuum Rabi oscillations; Master Equation Solver: Dynamics of a Spin Chain; Monte Carlo Solver: Birth and Death of Photons in a Cavity; Bloch-Redfield Solver: Two Level System; Bloch-Redfield Solver: Time dependent operators; Bloch-Redfield Solver: Dissipative Atom-Cavity system; Bloch-Redfield Solver: Phonon-assisted initialization; Floquet Solvers; Floquet Formalism; Time-dependent Master Equation: Landau-Zener transitions; Time-dependent Master Equation: Landau-Zener-Stuckelberg inteferometry; Stochastic Solver: Heterodyne Detection; Stochastic Solver: Mixing stochastic and deterministic equations; Stochastic Solver: Photo-current detection ,MatchSource.WIKI,qutip-tutorials/index-v4.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-tutorials/index-v4.html
https://qutip.org/qutip-tutorials/index-v4.html:803,Usability,guid,guide,803,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. Tutorials for QuTiP Version 4. This page contains our collection of Jupyter (formerly IPython) notebooks; for introducing and demonstrating features of QuTiP.; Going through these notebooks should be a good way to get familiarized with the software.; If you are new to scientific computing with Python, you might also find it; useful to have a look at these IPython notebook; Lectures on scientific computing with Python. This are the tutorials for QuTiP Version 4. You can find the tutorials for QuTiP Version 5 here. ; A guide for transitioning from version 4 to version 5 can be found here. ; The following are the contents of this page:. Example notebooks. Python Introduction; Visualization; Quantum information processing. Quantum circuits and algoritms; Pulse-level circuit simulation. Time evolution; Optimal control; Tomography; Permutational invariant Lindblad dynamics; Hierarchical Equations of Motion; Miscellaneous tutorials. Quantum mechanics lectures with QuTiP; Contributing. Example notebooks. These notebooks demonstrate and introduce specific functionality in QuTiP. Python Introduction. Introduction to Python; Introduction to NumPy Arrays; Plotting in Python Using Matplotlib; Lecture 0 - Introduction to QuTiP. For a more in depth discussion see: Lectures on scientific computing with Python.; Visualization. Bloch Sphere animation; Bloch Sphere with colorbar; Energy-level diagrams; Pseudo-probability functions; Quantum Process Tomography; Qubism visualizations; Visualization demos; Wigner functions. Quantum information processing; This section requires an additional package qutip-qip.; Quantum circuits and algorithms. Decomposition of the Toffoli gate in terms of CNOT and single-qubit rotat",MatchSource.WIKI,qutip-tutorials/index-v4.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-tutorials/index-v4.html
https://qutip.org/qutip-tutorials/index.html:5603,Energy Efficiency,charge,charge,5603,"pectrum and correlation functions; HEOM 1e: Spin-Bath model (pure dephasing); HEOM 2: Dynamics in Fenna-Mathews-Olsen complex (FMO); HEOM 3: Quantum Heat Transport; HEOM 4: Dynamical decoupling of a non-Markovian environment; HEOM 5a: Fermionic single impurity model; HEOM 5b: Discrete boson coupled to an impurity and fermionic leads; Hierarchical Equation of Motion Examples. Miscellaneous tutorials. Lecture: Single-photon Interference; qutip-jax JAX backend for qutip. Quantum mechanics lectures with QuTiP; These lecture-style notebooks focus on particular quantum mechanics; topics and analyze them numerically using QuTiP (some more detailed than others). Lecture 0 - Introduction to QuTiP; Lecture 1 - Vacuum Rabi oscillations in the Jaynes-Cummings model; Lecture 2A - simulation of a two-qubit gate using a resonator as coupler; Lecture 2B - Single-Atom-Lasing; Lecture 3A - The Dicke model; Lecture 3B - Jaynes-Cummings-like model in the ultrastrong coupling regime; Lecture 4 - Correlation functions; Lecture 5 - Evolution and quantum statistics of a quantum parameter amplifier; Lecture 6 - Quantum Monte-Carlo Trajectories; Lecture 7 - Two-qubit iSWAP gate and process tomography; Lecture 8 - Adiabatic sweep; Lecture 9 - Squeezed states of a quantum harmonic oscillator; Lecture 10 - Cavity-QED in the dispersive regime; Lecture 11 - Superconducting Josephson charge qubits; Lecture 12 - Decay into a squeezed vacuum field; Lecture 13 - Resonance flourescence; Lecture 14 - Kerr nonlinearities; Lecture 15 - Nonclassically driven atoms (cascaded quantum systems); Lecture 16 - Gallery of Wigner functions. Contributing; If you would like to contribute a notebook or report a bug, you may open; an issue or pull request in the; qutip-tutorials; GitHub repository. A few of the notebooks are still maintained in the repository; qutip-notebooks and; a complete archive of older versions of the tutorials is maintained there. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,qutip-tutorials/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-tutorials/index.html
https://qutip.org/qutip-tutorials/index.html:2539,Integrability,depend,dependent,2539,p.; Quantum circuits and algorithms. Decomposition of the Toffoli gate in terms of CNOT and single-qubit rotations; Imports and Exports QASM circuit; QuTiP example: Quantum Gates and their usage; Quantum Teleportation Circuit. Pulse-level circuit simulation. Compiling and simulating a 10-qubit Quantum Fourier Transform (QFT) algorithm; Custimize the pulse-level simulation; Examples for OptPulseProcessor; Scheduler for quantum gates and instructions; Simulating randomized benchmarking; Simulating the Deutsch–Jozsa algorithm at the pulse level; measuring the relaxation time with the idling gate. Time evolution. QobjEvo: time-dependent quantum objects; Schrödinger Equation Solver: Larmor precession; Master Equation Solver: Single-Qubit Dynamics; Master Equation Solver: Vacuum Rabi oscillations; Master Equation Solver: Dynamics of a Spin Chain; Monte Carlo Solver: Birth and Death of Photons in a Cavity; Bloch-Redfield Solver: Two Level System; Bloch-Redfield Solver: Time dependent operators; Bloch-Redfield Solver: Dissipative Atom-Cavity system; Bloch-Redfield Solver: Phonon-assisted initialization; Floquet Solvers; Floquet Formalism; Non-Markovian Monte Carlo Solver: Two Physical Examples; Stochastic Solver: Heterodyne Detection; Stochastic Solver: Mixing stochastic and deterministic equations; Stochastic Solver: Photo-current detection in a JC model; Stochastic vs. Monte-Carlo Solver: Cat states become coherent; Steady-State: Optomechanical System in the Single-Photon Strong-Coupling Regime; Steady-State: Homodyned Jaynes-Cummings emission; Steady-State: Time-dependent (periodic) quantum system. Optimal control. Overview ; Hadamard ; QFT ; Lindbladian ; Symplectic ; QFT (CRAB) ; State to state (CRAB) ; CNOT ; iSWAP ; Single-qubit rotation ; Toffoli gate . Tomography. Density matrix estimation with iterative maximum likelihood estimation . Permutational invariant Lindblad dynamics. Overview ; Superradiant light emission ; Steady state superradiance ; Open Dicke model ; ,MatchSource.WIKI,qutip-tutorials/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-tutorials/index.html
https://qutip.org/qutip-tutorials/index.html:2890,Integrability,depend,dependent,2890,p.; Quantum circuits and algorithms. Decomposition of the Toffoli gate in terms of CNOT and single-qubit rotations; Imports and Exports QASM circuit; QuTiP example: Quantum Gates and their usage; Quantum Teleportation Circuit. Pulse-level circuit simulation. Compiling and simulating a 10-qubit Quantum Fourier Transform (QFT) algorithm; Custimize the pulse-level simulation; Examples for OptPulseProcessor; Scheduler for quantum gates and instructions; Simulating randomized benchmarking; Simulating the Deutsch–Jozsa algorithm at the pulse level; measuring the relaxation time with the idling gate. Time evolution. QobjEvo: time-dependent quantum objects; Schrödinger Equation Solver: Larmor precession; Master Equation Solver: Single-Qubit Dynamics; Master Equation Solver: Vacuum Rabi oscillations; Master Equation Solver: Dynamics of a Spin Chain; Monte Carlo Solver: Birth and Death of Photons in a Cavity; Bloch-Redfield Solver: Two Level System; Bloch-Redfield Solver: Time dependent operators; Bloch-Redfield Solver: Dissipative Atom-Cavity system; Bloch-Redfield Solver: Phonon-assisted initialization; Floquet Solvers; Floquet Formalism; Non-Markovian Monte Carlo Solver: Two Physical Examples; Stochastic Solver: Heterodyne Detection; Stochastic Solver: Mixing stochastic and deterministic equations; Stochastic Solver: Photo-current detection in a JC model; Stochastic vs. Monte-Carlo Solver: Cat states become coherent; Steady-State: Optomechanical System in the Single-Photon Strong-Coupling Regime; Steady-State: Homodyned Jaynes-Cummings emission; Steady-State: Time-dependent (periodic) quantum system. Optimal control. Overview ; Hadamard ; QFT ; Lindbladian ; Symplectic ; QFT (CRAB) ; State to state (CRAB) ; CNOT ; iSWAP ; Single-qubit rotation ; Toffoli gate . Tomography. Density matrix estimation with iterative maximum likelihood estimation . Permutational invariant Lindblad dynamics. Overview ; Superradiant light emission ; Steady state superradiance ; Open Dicke model ; ,MatchSource.WIKI,qutip-tutorials/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-tutorials/index.html
https://qutip.org/qutip-tutorials/index.html:3492,Integrability,depend,dependent,3492,"he Deutsch–Jozsa algorithm at the pulse level; measuring the relaxation time with the idling gate. Time evolution. QobjEvo: time-dependent quantum objects; Schrödinger Equation Solver: Larmor precession; Master Equation Solver: Single-Qubit Dynamics; Master Equation Solver: Vacuum Rabi oscillations; Master Equation Solver: Dynamics of a Spin Chain; Monte Carlo Solver: Birth and Death of Photons in a Cavity; Bloch-Redfield Solver: Two Level System; Bloch-Redfield Solver: Time dependent operators; Bloch-Redfield Solver: Dissipative Atom-Cavity system; Bloch-Redfield Solver: Phonon-assisted initialization; Floquet Solvers; Floquet Formalism; Non-Markovian Monte Carlo Solver: Two Physical Examples; Stochastic Solver: Heterodyne Detection; Stochastic Solver: Mixing stochastic and deterministic equations; Stochastic Solver: Photo-current detection in a JC model; Stochastic vs. Monte-Carlo Solver: Cat states become coherent; Steady-State: Optomechanical System in the Single-Photon Strong-Coupling Regime; Steady-State: Homodyned Jaynes-Cummings emission; Steady-State: Time-dependent (periodic) quantum system. Optimal control. Overview ; Hadamard ; QFT ; Lindbladian ; Symplectic ; QFT (CRAB) ; State to state (CRAB) ; CNOT ; iSWAP ; Single-qubit rotation ; Toffoli gate . Tomography. Density matrix estimation with iterative maximum likelihood estimation . Permutational invariant Lindblad dynamics. Overview ; Superradiant light emission ; Steady state superradiance ; Open Dicke model ; Spin squeezing with noise ; Boundary time crystals ; Multiple spin ensembles ; Von Neumann entropy and purity . Hierarchical Equations of Motion. HEOM 1a: Spin-Bath model (introduction); HEOM 1b: Spin-Bath model (very strong coupling); HEOM 1c: Spin-Bath model (Underdamped Case); HEOM 1d: Spin-Bath model, fitting of spectrum and correlation functions; HEOM 1e: Spin-Bath model (pure dephasing); HEOM 2: Dynamics in Fenna-Mathews-Olsen complex (FMO); HEOM 3: Quantum Heat Transport; HEOM 4: Dynamical ",MatchSource.WIKI,qutip-tutorials/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-tutorials/index.html
https://qutip.org/qutip-tutorials/index.html:4134,Modifiability,coupling,coupling,4134,"me coherent; Steady-State: Optomechanical System in the Single-Photon Strong-Coupling Regime; Steady-State: Homodyned Jaynes-Cummings emission; Steady-State: Time-dependent (periodic) quantum system. Optimal control. Overview ; Hadamard ; QFT ; Lindbladian ; Symplectic ; QFT (CRAB) ; State to state (CRAB) ; CNOT ; iSWAP ; Single-qubit rotation ; Toffoli gate . Tomography. Density matrix estimation with iterative maximum likelihood estimation . Permutational invariant Lindblad dynamics. Overview ; Superradiant light emission ; Steady state superradiance ; Open Dicke model ; Spin squeezing with noise ; Boundary time crystals ; Multiple spin ensembles ; Von Neumann entropy and purity . Hierarchical Equations of Motion. HEOM 1a: Spin-Bath model (introduction); HEOM 1b: Spin-Bath model (very strong coupling); HEOM 1c: Spin-Bath model (Underdamped Case); HEOM 1d: Spin-Bath model, fitting of spectrum and correlation functions; HEOM 1e: Spin-Bath model (pure dephasing); HEOM 2: Dynamics in Fenna-Mathews-Olsen complex (FMO); HEOM 3: Quantum Heat Transport; HEOM 4: Dynamical decoupling of a non-Markovian environment; HEOM 5a: Fermionic single impurity model; HEOM 5b: Discrete boson coupled to an impurity and fermionic leads; Hierarchical Equation of Motion Examples. Miscellaneous tutorials. Lecture: Single-photon Interference; qutip-jax JAX backend for qutip. Quantum mechanics lectures with QuTiP; These lecture-style notebooks focus on particular quantum mechanics; topics and analyze them numerically using QuTiP (some more detailed than others). Lecture 0 - Introduction to QuTiP; Lecture 1 - Vacuum Rabi oscillations in the Jaynes-Cummings model; Lecture 2A - simulation of a two-qubit gate using a resonator as coupler; Lecture 2B - Single-Atom-Lasing; Lecture 3A - The Dicke model; Lecture 3B - Jaynes-Cummings-like model in the ultrastrong coupling regime; Lecture 4 - Correlation functions; Lecture 5 - Evolution and quantum statistics of a quantum parameter amplifier; Lecture 6 ",MatchSource.WIKI,qutip-tutorials/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-tutorials/index.html
https://qutip.org/qutip-tutorials/index.html:5189,Modifiability,coupling,coupling,5189,"pectrum and correlation functions; HEOM 1e: Spin-Bath model (pure dephasing); HEOM 2: Dynamics in Fenna-Mathews-Olsen complex (FMO); HEOM 3: Quantum Heat Transport; HEOM 4: Dynamical decoupling of a non-Markovian environment; HEOM 5a: Fermionic single impurity model; HEOM 5b: Discrete boson coupled to an impurity and fermionic leads; Hierarchical Equation of Motion Examples. Miscellaneous tutorials. Lecture: Single-photon Interference; qutip-jax JAX backend for qutip. Quantum mechanics lectures with QuTiP; These lecture-style notebooks focus on particular quantum mechanics; topics and analyze them numerically using QuTiP (some more detailed than others). Lecture 0 - Introduction to QuTiP; Lecture 1 - Vacuum Rabi oscillations in the Jaynes-Cummings model; Lecture 2A - simulation of a two-qubit gate using a resonator as coupler; Lecture 2B - Single-Atom-Lasing; Lecture 3A - The Dicke model; Lecture 3B - Jaynes-Cummings-like model in the ultrastrong coupling regime; Lecture 4 - Correlation functions; Lecture 5 - Evolution and quantum statistics of a quantum parameter amplifier; Lecture 6 - Quantum Monte-Carlo Trajectories; Lecture 7 - Two-qubit iSWAP gate and process tomography; Lecture 8 - Adiabatic sweep; Lecture 9 - Squeezed states of a quantum harmonic oscillator; Lecture 10 - Cavity-QED in the dispersive regime; Lecture 11 - Superconducting Josephson charge qubits; Lecture 12 - Decay into a squeezed vacuum field; Lecture 13 - Resonance flourescence; Lecture 14 - Kerr nonlinearities; Lecture 15 - Nonclassically driven atoms (cascaded quantum systems); Lecture 16 - Gallery of Wigner functions. Contributing; If you would like to contribute a notebook or report a bug, you may open; an issue or pull request in the; qutip-tutorials; GitHub repository. A few of the notebooks are still maintained in the repository; qutip-notebooks and; a complete archive of older versions of the tutorials is maintained there. © 2011 to 2024 inclusive, QuTiP developers and contributors. . ",MatchSource.WIKI,qutip-tutorials/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-tutorials/index.html
https://qutip.org/qutip-tutorials/index.html:3254,Safety,detect,detection,3254,p.; Quantum circuits and algorithms. Decomposition of the Toffoli gate in terms of CNOT and single-qubit rotations; Imports and Exports QASM circuit; QuTiP example: Quantum Gates and their usage; Quantum Teleportation Circuit. Pulse-level circuit simulation. Compiling and simulating a 10-qubit Quantum Fourier Transform (QFT) algorithm; Custimize the pulse-level simulation; Examples for OptPulseProcessor; Scheduler for quantum gates and instructions; Simulating randomized benchmarking; Simulating the Deutsch–Jozsa algorithm at the pulse level; measuring the relaxation time with the idling gate. Time evolution. QobjEvo: time-dependent quantum objects; Schrödinger Equation Solver: Larmor precession; Master Equation Solver: Single-Qubit Dynamics; Master Equation Solver: Vacuum Rabi oscillations; Master Equation Solver: Dynamics of a Spin Chain; Monte Carlo Solver: Birth and Death of Photons in a Cavity; Bloch-Redfield Solver: Two Level System; Bloch-Redfield Solver: Time dependent operators; Bloch-Redfield Solver: Dissipative Atom-Cavity system; Bloch-Redfield Solver: Phonon-assisted initialization; Floquet Solvers; Floquet Formalism; Non-Markovian Monte Carlo Solver: Two Physical Examples; Stochastic Solver: Heterodyne Detection; Stochastic Solver: Mixing stochastic and deterministic equations; Stochastic Solver: Photo-current detection in a JC model; Stochastic vs. Monte-Carlo Solver: Cat states become coherent; Steady-State: Optomechanical System in the Single-Photon Strong-Coupling Regime; Steady-State: Homodyned Jaynes-Cummings emission; Steady-State: Time-dependent (periodic) quantum system. Optimal control. Overview ; Hadamard ; QFT ; Lindbladian ; Symplectic ; QFT (CRAB) ; State to state (CRAB) ; CNOT ; iSWAP ; Single-qubit rotation ; Toffoli gate . Tomography. Density matrix estimation with iterative maximum likelihood estimation . Permutational invariant Lindblad dynamics. Overview ; Superradiant light emission ; Steady state superradiance ; Open Dicke model ; ,MatchSource.WIKI,qutip-tutorials/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-tutorials/index.html
https://qutip.org/qutip-tutorials/index.html:2384,Testability,benchmark,benchmarking,2384,cific functionality in QuTiP. Python Introduction. Introduction to Python; Introduction to NumPy Arrays; Plotting in Python Using Matplotlib; Lecture 0 - Introduction to QuTiP. For a more in depth discussion see: Lectures on scientific computing with Python.; Visualization. Animation demos; Bloch Sphere animation; Bloch Sphere with colorbar; Energy-level diagrams; Pseudo-probability functions; Quantum Process Tomography; Qubism visualizations; Visualization demos; Wigner functions. Quantum information processing; This section requires an additional package qutip-qip.; Quantum circuits and algorithms. Decomposition of the Toffoli gate in terms of CNOT and single-qubit rotations; Imports and Exports QASM circuit; QuTiP example: Quantum Gates and their usage; Quantum Teleportation Circuit. Pulse-level circuit simulation. Compiling and simulating a 10-qubit Quantum Fourier Transform (QFT) algorithm; Custimize the pulse-level simulation; Examples for OptPulseProcessor; Scheduler for quantum gates and instructions; Simulating randomized benchmarking; Simulating the Deutsch–Jozsa algorithm at the pulse level; measuring the relaxation time with the idling gate. Time evolution. QobjEvo: time-dependent quantum objects; Schrödinger Equation Solver: Larmor precession; Master Equation Solver: Single-Qubit Dynamics; Master Equation Solver: Vacuum Rabi oscillations; Master Equation Solver: Dynamics of a Spin Chain; Monte Carlo Solver: Birth and Death of Photons in a Cavity; Bloch-Redfield Solver: Two Level System; Bloch-Redfield Solver: Time dependent operators; Bloch-Redfield Solver: Dissipative Atom-Cavity system; Bloch-Redfield Solver: Phonon-assisted initialization; Floquet Solvers; Floquet Formalism; Non-Markovian Monte Carlo Solver: Two Physical Examples; Stochastic Solver: Heterodyne Detection; Stochastic Solver: Mixing stochastic and deterministic equations; Stochastic Solver: Photo-current detection in a JC model; Stochastic vs. Monte-Carlo Solver: Cat states become coher,MatchSource.WIKI,qutip-tutorials/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-tutorials/index.html
https://qutip.org/qutip-tutorials/index.html:803,Usability,guid,guide,803,"﻿. QuTiP - Quantum Toolbox in Python. Fork me on GitHub. QuTiP; Quantum Toolbox in Python. QuTiP. News; Releases. Documentation. Users Guide; Tutorials; Benchmarks; QuTiP Virtual Lab; Features; Citing. Community. Mailing List; Github; Papers Using QuTiP; Job Announcements. Devs. Tutorials for QuTiP Version 5. This page contains our collection of Jupyter (formerly IPython) notebooks; for introducing and demonstrating features of QuTiP.; Going through these notebooks should be a good way to get familiarized with the software.; If you are new to scientific computing with Python, you might also find it; useful to have a look at these IPython notebook; Lectures on scientific computing with Python. This are the tutorials for QuTiP Version 5. You can find the tutorials for QuTiP Version 4 here. ; A guide for transitioning from version 4 to version 5 can be found here. ; The following are the contents of this page:. Example notebooks. Python Introduction; Visualization; Quantum information processing. Quantum circuits and algoritms; Pulse-level circuit simulation. Time evolution; Optimal control; Tomography; Permutational invariant Lindblad dynamics; Hierarchical Equations of Motion; Miscellaneous tutorials. Quantum mechanics lectures with QuTiP; Contributing. Example notebooks. These notebooks demonstrate and introduce specific functionality in QuTiP. Python Introduction. Introduction to Python; Introduction to NumPy Arrays; Plotting in Python Using Matplotlib; Lecture 0 - Introduction to QuTiP. For a more in depth discussion see: Lectures on scientific computing with Python.; Visualization. Animation demos; Bloch Sphere animation; Bloch Sphere with colorbar; Energy-level diagrams; Pseudo-probability functions; Quantum Process Tomography; Qubism visualizations; Visualization demos; Wigner functions. Quantum information processing; This section requires an additional package qutip-qip.; Quantum circuits and algorithms. Decomposition of the Toffoli gate in terms of CNOT and s",MatchSource.WIKI,qutip-tutorials/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/qutip-tutorials/index.html
https://qutip.org/docs/3.0.0/biblio.html:225,Deployability,install,installation,225,". Bibliography — QuTiP 3.0 Documentation. QuTiP; 3.0.0. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.6+); Installation on Windows; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.0 (July X, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Bibliography. « Developers. Bibliography¶. [Hav03]Havel, T. Robust procedures for converting among Lindblad, Kraus and matrix representations of quantum dynamical semigroups. Journal of Mathematical Physics 44 2, 534 (2003). doi:10.1063/1.1518555. [Wat13]Watrous, J. Theory of Quantum Information, lecture notes. [Moh08]; Mohseni, A. T. Rezakhani, D. A. Lidar, Quantum-process tomography: Resource analysis of different strategies, Phys. Rev. A 77, 032322 (2008). doi:10.1103/PhysRevA.77.032322. [Gri98]; Grifoni, P. Hänggi, Driven quantum tunneling, Physics Reports 304, 299 (1998). do",MatchSource.WIKI,docs/3.0.0/biblio.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/biblio.html
https://qutip.org/docs/3.0.0/biblio.html:2551,Deployability,update,updated,2551,"volution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.0 (July X, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Bibliography. « Developers. Bibliography¶. [Hav03]Havel, T. Robust procedures for converting among Lindblad, Kraus and matrix representations of quantum dynamical semigroups. Journal of Mathematical Physics 44 2, 534 (2003). doi:10.1063/1.1518555. [Wat13]Watrous, J. Theory of Quantum Information, lecture notes. [Moh08]; Mohseni, A. T. Rezakhani, D. A. Lidar, Quantum-process tomography: Resource analysis of different strategies, Phys. Rev. A 77, 032322 (2008). doi:10.1103/PhysRevA.77.032322. [Gri98]; Grifoni, P. Hänggi, Driven quantum tunneling, Physics Reports 304, 299 (1998). doi:10.1016/S0370-1573(98)00022-2. [Cre03]. Creffield, Location of crossings in the Floquet spectrum of a driven two-level system, Phys. Rev. B 67, 165301 (2003). doi:10.1103/PhysRevB.67.165301. [Gar03]Gardineer and Zoller, Quantum Noise (Springer, 2004). [Bre02]H.-P. Breuer and F. Petruccione, The Theory of Open Quantum Systems (Oxford, 2002). [Coh92]; Cohen-Tannoudji, J. Dupont-Roc, G. Grynberg, Atom-Photon Interactions: Basic Processes and Applications, (Wiley, 1992). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 16, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/biblio.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/biblio.html
https://qutip.org/docs/3.0.0/changelog.html:4681,Availability,avail,available,4681,"spin_Jy, spin_Jz and; spin_state, spin_coherent.; The expect function now supports a list of operators, in addition to the; previously supported list of states.; Simplified creation of qubit states using ket function.; The module qutip.cyQ has been renamed to qutip.cy and the sparse; matrix-vector functions spmv and spmv1d has been combined into one; function spmv. New functions for operating directly on the underlaying; sparse CSR data have been added (e.g., spmv_csr). Performance; improvements. New and improved Cython functions for calculating expectation; values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squ",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:5640,Availability,avail,available,5640,"and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:12739,Availability,toler,tolerance,12739," factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 17, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:223,Deployability,install,installation,223,". Change Log — QuTiP 3.0 Documentation. QuTiP; 3.0.0. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.6+); Installation on Windows; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Change Log; Version 3.0.0 (July 17, 2014):; New Features; Improvements. Version 2.2.0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). « Functions. Developers ». Change Log¶. Versio",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:6212,Deployability,integrat,integration,6212,"lback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to ",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:7499,Deployability,install,installation,7499," for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gates.; Functions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag()",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:8840,Deployability,release,release,8840,"name in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The qu",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:9147,Deployability,install,installed,9147,".; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum obj",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:10696,Deployability,install,installation,10696,"and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying the installation.; Demos window now lets you copy and paste code from each example. Version 1.1.4 (May 28, 2012):¶. Bug Fixes:¶. Fixed bug pointed out by Brendan Abolins.; Qobj.tr() returns zero-dim ndarray instead of float or complex.; Updated factorial import for scipy version 0.10+. Version 1.1.3 (November 21, 2011):¶. New Functions:¶. Allow custom naming of Bloch sphere. Bug Fixes:¶. Fixed text alignment issues in AboutBox.; Added fix for SciPy V>0.10 where factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-R",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:13018,Deployability,release,release,13018," factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 17, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:13103,Deployability,update,updated,13103," factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 17, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:4435,Energy Efficiency,power,power,4435,"w; prefixed with plot_ (e.g., plot_fock_distribution). The; plot_wigner and plot_wigner_fock_distribution now supports 3D views; in addition to contour views.; New API and new functions for working with spin operators and states,; including for example spin_Jx, spin_Jy, spin_Jz and; spin_state, spin_coherent.; The expect function now supports a list of operators, in addition to the; previously supported list of states.; Simplified creation of qubit states using ket function.; The module qutip.cyQ has been renamed to qutip.cy and the sparse; matrix-vector functions spmv and spmv1d has been combined into one; function spmv. New functions for operating directly on the underlaying; sparse CSR data have been added (e.g., spmv_csr). Performance; improvements. New and improved Cython functions for calculating expectation; values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which n",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:9719,Energy Efficiency,efficient,efficient,9719," of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying ",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:2876,Integrability,depend,dependent,2876," (July 29, 2011). « Functions. Developers ». Change Log¶. Version 3.0.0 (July 17, 2014):¶. New Features¶. New module qutip.stochastic with stochastic master equation and stochastic; Schrödinger equation solvers.; Expanded steady state solvers. The function steady has been deprecated in; favor of steadystate. The steadystate solver no longer use umfpack by; default. New pre-processing methods for reordering and balancing the linear; equation system used in direct solution of the steady state.; New module qutip.qip with utilities for quantum information processing,; including pre-defined quantum gates along with functions for expanding; arbitrary 1, 2, and 3 qubit gates to N qubit registers, circuit; representations, library of quantum algorithms, and basic physical models for; some common QIP architectures.; New module qutip.distributions with unified API for working with; distribution functions.; New format for defining time-dependent Hamiltonians and collapse operators,; using a precalculated numpy array that specifies the values of the; Qobj-coefficients for each time step.; New functions for working with different superoperator representations,; including Kraus and Chi representation.; New functions for visualizing quantum states using Qubism and Schimdt plots:; plot_qubism and plot_schmidt.; Dynamics solver now support taking argument e_ops (expectation value; operators) in dictionary form.; Public plotting functions from the qutip.visualization module are now; prefixed with plot_ (e.g., plot_fock_distribution). The; plot_wigner and plot_wigner_fock_distribution now supports 3D views; in addition to contour views.; New API and new functions for working with spin operators and states,; including for example spin_Jx, spin_Jy, spin_Jz and; spin_state, spin_coherent.; The expect function now supports a list of operators, in addition to the; previously supported list of states.; Simplified creation of qubit states using ket function.; The module qutip.cyQ has been re",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:5170,Integrability,depend,dependent,5170," values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:5233,Integrability,depend,depend,5233," values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:6212,Integrability,integrat,integration,6212,"lback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to ",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:7131,Integrability,depend,dependent,7131,"rk scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gates.; Functions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:8330,Integrability,depend,dependence,8330,"ed on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gates.; Functions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and par",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:8758,Integrability,rout,routines,8758,"s as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum obje",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:9023,Integrability,depend,dependent,9023,"urns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:9099,Integrability,depend,dependent,9099,".; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum obj",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:9214,Integrability,depend,dependent,9214,"ow correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can h",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:9538,Integrability,depend,dependent,9538,"rmitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single functi",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:6464,Modifiability,variab,variable,6464,"eData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gate",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:4326,Performance,concurren,concurrence,4326,".; Public plotting functions from the qutip.visualization module are now; prefixed with plot_ (e.g., plot_fock_distribution). The; plot_wigner and plot_wigner_fock_distribution now supports 3D views; in addition to contour views.; New API and new functions for working with spin operators and states,; including for example spin_Jx, spin_Jy, spin_Jz and; spin_state, spin_coherent.; The expect function now supports a list of operators, in addition to the; previously supported list of states.; Simplified creation of qubit states using ket function.; The module qutip.cyQ has been renamed to qutip.cy and the sparse; matrix-vector functions spmv and spmv1d has been combined into one; function spmv. New functions for operating directly on the underlaying; sparse CSR data have been added (e.g., spmv_csr). Performance; improvements. New and improved Cython functions for calculating expectation; values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Imp",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:5383,Performance,optimiz,optimized,5383,"two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose func",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:6049,Performance,perform,performance,6049,"; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualizati",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:6955,Performance,perform,performance,6955,"instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gates.; Functions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is ",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:8680,Performance,perform,performance,8680,"s as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum obje",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:10169,Performance,optimiz,optimized,10169,"ed to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying the installation.; Demos window now lets you copy and paste code from each example. Version 1.1.4 (May 28, 2012):¶. Bug Fixes:¶. Fixed bug pointed out by Brendan Abolins.; Qobj.tr() returns zero-dim ndarray instead of float or complex.; Updated factorial import for scipy version 0.10+. Version 1.1.3 (November 21, 2011):¶. New Functions:¶. Allow custom naming of Bloch sphere. Bug Fixes:¶. Fixed text alignment issues in AboutBox.; Added fix for SciPy V>0.10 where factorial was moved to scipy.",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:10395,Performance,concurren,concurrence,10395,"t; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying the installation.; Demos window now lets you copy and paste code from each example. Version 1.1.4 (May 28, 2012):¶. Bug Fixes:¶. Fixed bug pointed out by Brendan Abolins.; Qobj.tr() returns zero-dim ndarray instead of float or complex.; Updated factorial import for scipy version 0.10+. Version 1.1.3 (November 21, 2011):¶. New Functions:¶. Allow custom naming of Bloch sphere. Bug Fixes:¶. Fixed text alignment issues in AboutBox.; Added fix for SciPy V>0.10 where factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts a",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:12216,Performance,concurren,concurrence,12216," factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 17, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:12408,Performance,load,loading,12408," factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 17, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:5476,Safety,avoid,avoiding,5476,"two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose func",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:6224,Testability,test,tests,6224,"lback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to ",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:6574,Testability,log,logarithmic,6574,"eData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gate",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:10672,Testability,test,tests,10672,"and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying the installation.; Demos window now lets you copy and paste code from each example. Version 1.1.4 (May 28, 2012):¶. Bug Fixes:¶. Fixed bug pointed out by Brendan Abolins.; Qobj.tr() returns zero-dim ndarray instead of float or complex.; Updated factorial import for scipy version 0.10+. Version 1.1.3 (November 21, 2011):¶. New Functions:¶. Allow custom naming of Bloch sphere. Bug Fixes:¶. Fixed text alignment issues in AboutBox.; Added fix for SciPy V>0.10 where factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-R",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:5994,Usability,simpl,simplified,5994," for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner co",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:8534,Usability,progress bar,progress bar,8534,"tions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent argume",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/changelog.html:9347,Usability,simpl,simplifying,9347,"ime-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method in",MatchSource.WIKI,docs/3.0.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/changelog.html
https://qutip.org/docs/3.0.0/contributors.html:223,Deployability,install,installation,223,". Developers — QuTiP 3.0 Documentation. QuTiP; 3.0.0. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.6+); Installation on Windows; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.0 (July X, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Developers; Lead Developers; Contributors. « Change Log. Bibliography ». Developers¶. Lead Developers¶; Robert Johansson (RIKEN); Paul Nation (Korea University). Contributors¶. Note; Anyone is welcome to contribute to QuTiP. If you are interested in helping, please let us know!. alexbrc (github user) - Code contributor; Amit Jamadagni - Bug fix; Anders Lund (Technical University of Denmark) - Bug hunting for the Monte-Carlo solver; Andre Carvalho - Bug hunter; André Xuereb (University of Hannover) - Bug hunter; Anubhav Vardhan (IIT, Kanpur) - Bug hunter, Code contributor, Documenta",MatchSource.WIKI,docs/3.0.0/contributors.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/contributors.html
https://qutip.org/docs/3.0.0/contributors.html:3555,Deployability,update,updated,3555,"come to contribute to QuTiP. If you are interested in helping, please let us know!. alexbrc (github user) - Code contributor; Amit Jamadagni - Bug fix; Anders Lund (Technical University of Denmark) - Bug hunting for the Monte-Carlo solver; Andre Carvalho - Bug hunter; André Xuereb (University of Hannover) - Bug hunter; Anubhav Vardhan (IIT, Kanpur) - Bug hunter, Code contributor, Documentation; Arne Grimsmo (University of Auckland) - Bug hunter, Code contributor; Ben Criger (Waterloo IQC) - Code contributor; Bredan Abolins (Berkeley) - Bug hunter; Chris Granadeł - Code contributor; Claudia Degrandi (Yale University) - Documentation; Dawid Crivelli - Bug hunter; Denis Vasilyev (St. Petersburg State University) - Code contributor; Dong Zhou (Yale University) - Bug hunter; Florian Ong (Institute for Quantum Computation) - Bug hunter; Frank Schima - Macports packaging; Henri Nielsen (Technical University of Denmark) - Bug hunter; Hwajung Kang (Systems Biology Institute, Tokyo) - Suggestions for improving Bloch class; James Clemens (Miami University - Ohio) - Bug hunter; Johannes Feist - Code contributor; Jonas Hörsch - Code contributor; Jonas Neergaard-Nielsen (Technical University of Denmark) - Code contributor, Windows support; JP Hadden (University of Bristol) - Code contributor, improved Bloch sphere visualization; Laurence Stant - Documentation; Markus Baden (Centre for Quantum Technologies, Singapore) - Code contributor, Documentation; Myung-Joong Hwang (Pohang University of Science and Technology) - Bug hunter; Neill Lambert (RIKEN) - Code contributor, Windows support; Per Nielsen (Technical University of Denmark) - Bug hunter, Code contributor; Piotr Migdał (ICFO) - Code contributor; Reinier Heeres (Yale University) - Code contributor; Robert Jördens (NIST) - Linux packaging; Simon Whalen - Code contributor; W.M. Witzel - Bug hunter. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 16, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/contributors.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/contributors.html
https://qutip.org/docs/3.0.0/frontmatter.html:1721,Availability,avail,available,1721,"rrelation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.0 (July X, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. « QuTiP: Quantum T... Installation ». Frontmatter¶. About This Documentation¶; This document contains a user guide and automatically generated API documentation for QuTiP. A PDF version of this text is available at the documentation page.; For more information see the QuTiP project web page. Author:P.D. Nation. Address:Department of Physics, Korea University,; Seongbuk-gu Seoul, 136-713 South Korea. Author:J.R. Johansson. Address:iTHES Research Group, RIKEN,; Wako-shi Saitama, 351-0198 Japan. version:3.0. status:Released. copyright:This documentation is licensed under the Creative Commons Attribution 3.0 Unported License. Citing This Project¶; If you find this project useful, then please cite:. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP 2: A Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Jap",MatchSource.WIKI,docs/3.0.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/frontmatter.html
https://qutip.org/docs/3.0.0/frontmatter.html:2556,Availability,down,download,2556,"ntmatter¶. About This Documentation¶; This document contains a user guide and automatically generated API documentation for QuTiP. A PDF version of this text is available at the documentation page.; For more information see the QuTiP project web page. Author:P.D. Nation. Address:Department of Physics, Korea University,; Seongbuk-gu Seoul, 136-713 South Korea. Author:J.R. Johansson. Address:iTHES Research Group, RIKEN,; Wako-shi Saitama, 351-0198 Japan. version:3.0. status:Released. copyright:This documentation is licensed under the Creative Commons Attribution 3.0 Unported License. Citing This Project¶; If you find this project useful, then please cite:. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP 2: A Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system ",MatchSource.WIKI,docs/3.0.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/frontmatter.html
https://qutip.org/docs/3.0.0/frontmatter.html:4734,Availability,avail,available,4734,"system dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optics, trapped ions, superconducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, excited by a small number of quanta, that are amenable to classical simulation in a truncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions by providing the following advantages:. QuTiP relies on completely open-source software. You are free to modify and use it as you wish with no licensing fees.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.",MatchSource.WIKI,docs/3.0.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/frontmatter.html
https://qutip.org/docs/3.0.0/frontmatter.html:224,Deployability,install,installation,224,". Frontmatter — QuTiP 3.0 Documentation. QuTiP; 3.0.0. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.6+); Installation on Windows; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.0 (July X, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. « QuTiP: Quantum T... Installation ». Frontmatter¶. About This Documentation¶; This document contains a user guide and automatically generated API documentation for QuTiP. A PDF version of this text is available at the documentation page.; For more information see the QuTiP project web page. Author:P.D. Nation. Address:Department of Physics, Korea University,; Seongbuk-gu Seoul, 136-713 South Korea. Author:J.R. Johansson. Address:iTHES Research Group, RIKEN,; Wako-shi Saitama, ",MatchSource.WIKI,docs/3.0.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/frontmatter.html
https://qutip.org/docs/3.0.0/frontmatter.html:5903,Deployability,release,release,5903,"ace.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions by providing the following advantages:. QuTiP relies on completely open-source software. You are free to modify and use it as you wish with no licensing fees.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 16, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/frontmatter.html
https://qutip.org/docs/3.0.0/frontmatter.html:6396,Deployability,update,updated,6396,"ace.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions by providing the following advantages:. QuTiP relies on completely open-source software. You are free to modify and use it as you wish with no licensing fees.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 16, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/frontmatter.html
https://qutip.org/docs/3.0.0/frontmatter.html:4087,Energy Efficiency,efficient,efficiently,4087," quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system and its environment is an essential step in understanding the dynamics of quantum systems.; In general, for all but the most basic of Hamiltonians, an analytical description of the system dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optics, trapped ions, superconducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, excited by a small number of quanta, that are amenable to classical simulation in a truncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions by providing the following advantages:. QuTiP relies on completely open-source software. You are free to modify and use it as you wish with no licensing fees.; QuTiP is based on the Python scripting language, provid",MatchSource.WIKI,docs/3.0.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/frontmatter.html
https://qutip.org/docs/3.0.0/frontmatter.html:5339,Integrability,depend,dependence,5339,"tor and spin components, excited by a small number of quanta, that are amenable to classical simulation in a truncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions by providing the following advantages:. QuTiP relies on completely open-source software. You are free to modify and use it as you wish with no licensing fees.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Ba",MatchSource.WIKI,docs/3.0.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/frontmatter.html
https://qutip.org/docs/3.0.0/frontmatter.html:5387,Integrability,depend,dependent,5387,"ncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions by providing the following advantages:. QuTiP relies on completely open-source software. You are free to modify and use it as you wish with no licensing fees.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 16, 2014.; Created usi",MatchSource.WIKI,docs/3.0.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/frontmatter.html
https://qutip.org/docs/3.0.0/frontmatter.html:3196,Modifiability,coupling,coupling,3196,"g This Project¶; If you find this project useful, then please cite:. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP 2: A Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system and its environment is an essential step in understanding the dynamics of quantum systems.; In general, for all but the most basic of Hamiltonians, an analytical description of the system dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optic",MatchSource.WIKI,docs/3.0.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/frontmatter.html
https://qutip.org/docs/3.0.0/frontmatter.html:3334,Modifiability,coupling,coupling,3334,"ys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system and its environment is an essential step in understanding the dynamics of quantum systems.; In general, for all but the most basic of Hamiltonians, an analytical description of the system dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optics, trapped ions, superconducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, ",MatchSource.WIKI,docs/3.0.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/frontmatter.html
https://qutip.org/docs/3.0.0/frontmatter.html:3289,Performance,perform,performed,3289,"ys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system and its environment is an essential step in understanding the dynamics of quantum systems.; In general, for all but the most basic of Hamiltonians, an analytical description of the system dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optics, trapped ions, superconducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, ",MatchSource.WIKI,docs/3.0.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/frontmatter.html
https://qutip.org/docs/3.0.0/frontmatter.html:5474,Performance,perform,performance,5474,"ncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions by providing the following advantages:. QuTiP relies on completely open-source software. You are free to modify and use it as you wish with no licensing fees.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 16, 2014.; Created usi",MatchSource.WIKI,docs/3.0.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/frontmatter.html
https://qutip.org/docs/3.0.0/frontmatter.html:5105,Testability,test,tested,5105,"ed ions, superconducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, excited by a small number of quanta, that are amenable to classical simulation in a truncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions by providing the following advantages:. QuTiP relies on completely open-source software. You are free to modify and use it as you wish with no licensing fees.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See C",MatchSource.WIKI,docs/3.0.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/frontmatter.html
https://qutip.org/docs/3.0.0/frontmatter.html:1628,Usability,guid,guide,1628,"m Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.0 (July X, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. « QuTiP: Quantum T... Installation ». Frontmatter¶. About This Documentation¶; This document contains a user guide and automatically generated API documentation for QuTiP. A PDF version of this text is available at the documentation page.; For more information see the QuTiP project web page. Author:P.D. Nation. Address:Department of Physics, Korea University,; Seongbuk-gu Seoul, 136-713 South Korea. Author:J.R. Johansson. Address:iTHES Research Group, RIKEN,; Wako-shi Saitama, 351-0198 Japan. version:3.0. status:Released. copyright:This documentation is licensed under the Creative Commons Attribution 3.0 Unported License. Citing This Project¶; If you find this project useful, then please cite:. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP 2: A Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.",MatchSource.WIKI,docs/3.0.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/frontmatter.html
https://qutip.org/docs/3.0.0/frontmatter.html:5636,Usability,learn,learning,5636,"ace.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions by providing the following advantages:. QuTiP relies on completely open-source software. You are free to modify and use it as you wish with no licensing fees.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 16, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/frontmatter.html
https://qutip.org/docs/3.0.0/genindex.html:218,Deployability,install,installation,218,". Index — QuTiP 3.0 Documentation. QuTiP; 3.0.0. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.6+); Installation on Windows; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Index. A; | B; | C; | D; | E; | F; | G; | H; | I; | J; | K; | L; | M; | N; | O; | P; | Q; | R; | S; | T; | U; | V; | W. A. about() (in module qutip). add_1q_gate() (QubitCircuit method). add_annotation() (Bloch method). add_circuit() (QubitCircuit method). add_gate() (QubitCircuit method). add_points() (Bloch method). (Bloch3d method). add_states() (Bloch method). (Bloch3d method). add_vectors() (Bloch method). (Bloch3d method). adjacent_gates() (CircuitProcessor method). (QubitCircuit method). (SpinChain method). B. basis() (in module qutip.states). berkeley() (in module qutip.qip.gat",MatchSource.WIKI,docs/3.0.0/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/genindex.html
https://qutip.org/docs/3.0.0/genindex.html:12089,Deployability,update,update,12089,"s). squeeze() (in module qutip.operators). squeezing() (in module qutip.operators). ssepdpsolve() (in module qutip.stochastic). ssesolve() (in module qutip.stochastic). state_index_number() (in module qutip.states). state_number_enumerate() (in module qutip.states). state_number_index() (in module qutip.states). state_number_qobj() (in module qutip.states). steadystate() (in module qutip.steadystate). StochasticSolverOptions (class in qutip.stochastic). swap() (in module qutip.qip.gates). swapalpha() (in module qutip.qip.gates). T. tensor() (in module qutip.tensor). thermal_dm() (in module qutip.states). three_level_basis() (in module qutip.three_level_atom). three_level_ops() (in module qutip.three_level_atom). tidyup() (eseries method). (Qobj method). to_choi() (in module qutip.superop_reps). to_kraus() (in module qutip.superop_reps). to_super() (in module qutip.superop_reps). toffoli() (in module qutip.qip.gates). tr() (Qobj method). tracedist() (in module qutip.metrics). trans() (Qobj method). transform() (Qobj method). TwoModeQuadratureCorrelation (class in qutip.distributions). U. unit() (Qobj method). update() (HarmonicOscillatorProbabilityFunction method). (HarmonicOscillatorWaveFunction method). (TwoModeQuadratureCorrelation method). update_psi() (TwoModeQuadratureCorrelation method). update_rho() (TwoModeQuadratureCorrelation method). V. value() (eseries method). variance() (in module qutip.expect). vector_mutation (Bloch attribute). vector_style (Bloch attribute). vector_to_operator() (in module qutip.superoperator). vector_width (Bloch attribute). version_table() (in module qutip.ipynbtools). visualize() (Distribution method). W. wigner() (in module qutip.wigner). wigner_cmap() (in module qutip.visualization). wigner_covariance_matrix() (in module qutip.continuous_variables). WignerDistribution (class in qutip.distributions). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 17, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/genindex.html
https://qutip.org/docs/3.0.0/genindex.html:12909,Deployability,update,updated,12909,"s). squeeze() (in module qutip.operators). squeezing() (in module qutip.operators). ssepdpsolve() (in module qutip.stochastic). ssesolve() (in module qutip.stochastic). state_index_number() (in module qutip.states). state_number_enumerate() (in module qutip.states). state_number_index() (in module qutip.states). state_number_qobj() (in module qutip.states). steadystate() (in module qutip.steadystate). StochasticSolverOptions (class in qutip.stochastic). swap() (in module qutip.qip.gates). swapalpha() (in module qutip.qip.gates). T. tensor() (in module qutip.tensor). thermal_dm() (in module qutip.states). three_level_basis() (in module qutip.three_level_atom). three_level_ops() (in module qutip.three_level_atom). tidyup() (eseries method). (Qobj method). to_choi() (in module qutip.superop_reps). to_kraus() (in module qutip.superop_reps). to_super() (in module qutip.superop_reps). toffoli() (in module qutip.qip.gates). tr() (Qobj method). tracedist() (in module qutip.metrics). trans() (Qobj method). transform() (Qobj method). TwoModeQuadratureCorrelation (class in qutip.distributions). U. unit() (Qobj method). update() (HarmonicOscillatorProbabilityFunction method). (HarmonicOscillatorWaveFunction method). (TwoModeQuadratureCorrelation method). update_psi() (TwoModeQuadratureCorrelation method). update_rho() (TwoModeQuadratureCorrelation method). V. value() (eseries method). variance() (in module qutip.expect). vector_mutation (Bloch attribute). vector_style (Bloch attribute). vector_to_operator() (in module qutip.superoperator). vector_width (Bloch attribute). version_table() (in module qutip.ipynbtools). visualize() (Distribution method). W. wigner() (in module qutip.wigner). wigner_cmap() (in module qutip.visualization). wigner_covariance_matrix() (in module qutip.continuous_variables). WignerDistribution (class in qutip.distributions). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 17, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/genindex.html
https://qutip.org/docs/3.0.0/genindex.html:2716,Performance,concurren,concurrence,2716,loch3d method). add_states() (Bloch method). (Bloch3d method). add_vectors() (Bloch method). (Bloch3d method). adjacent_gates() (CircuitProcessor method). (QubitCircuit method). (SpinChain method). B. basis() (in module qutip.states). berkeley() (in module qutip.qip.gates). Bloch (class in qutip.bloch). Bloch3d (class in qutip.bloch3d). bloch_redfield_solve() (in module qutip.bloch_redfield). bloch_redfield_tensor() (in module qutip.bloch_redfield). breadth_first_search() (in module qutip.graph). brmesolve() (in module qutip.bloch_redfield). C. checkherm() (Qobj method). CircuitProcessor (class in qutip.qip.models). CircularSpinChain (class in qutip.qip.models.spinchain). clear() (Bloch method). (Bloch3d method). clebsch() (in module qutip.utilities). cnot() (in module qutip.qip.gates). coherence_function_g1() (in module qutip.correlation). coherence_function_g2() (in module qutip.correlation). coherent() (in module qutip.states). coherent_dm() (in module qutip.states). concurrence() (in module qutip.entropy). conj() (Qobj method). controlled_gate() (in module qutip.qip.gates). convert_unit() (in module qutip.utilities). correlation() (in module qutip.correlation). correlation_2op_1t() (in module qutip.correlation). correlation_2op_2t() (in module qutip.correlation). correlation_4op_1t() (in module qutip.correlation). correlation_4op_2t() (in module qutip.correlation). correlation_matrix() (in module qutip.continuous_variables). correlation_matrix_field() (in module qutip.continuous_variables). correlation_matrix_quadrature() (in module qutip.continuous_variables). correlation_ss() (in module qutip.correlation). covariance_matrix() (in module qutip.continuous_variables). cphase() (in module qutip.qip.gates). create() (in module qutip.operators). csign() (in module qutip.qip.gates). D. dag() (Qobj method). destroy() (in module qutip.operators). diag() (Qobj method). dispersive_gate_correction() (DispersivecQED method). DispersivecQED (class in qutip.qip.models.cqed).,MatchSource.WIKI,docs/3.0.0/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/genindex.html
https://qutip.org/docs/3.0.0/genindex.html:2412,Usability,clear,clear,2412, | C; | D; | E; | F; | G; | H; | I; | J; | K; | L; | M; | N; | O; | P; | Q; | R; | S; | T; | U; | V; | W. A. about() (in module qutip). add_1q_gate() (QubitCircuit method). add_annotation() (Bloch method). add_circuit() (QubitCircuit method). add_gate() (QubitCircuit method). add_points() (Bloch method). (Bloch3d method). add_states() (Bloch method). (Bloch3d method). add_vectors() (Bloch method). (Bloch3d method). adjacent_gates() (CircuitProcessor method). (QubitCircuit method). (SpinChain method). B. basis() (in module qutip.states). berkeley() (in module qutip.qip.gates). Bloch (class in qutip.bloch). Bloch3d (class in qutip.bloch3d). bloch_redfield_solve() (in module qutip.bloch_redfield). bloch_redfield_tensor() (in module qutip.bloch_redfield). breadth_first_search() (in module qutip.graph). brmesolve() (in module qutip.bloch_redfield). C. checkherm() (Qobj method). CircuitProcessor (class in qutip.qip.models). CircularSpinChain (class in qutip.qip.models.spinchain). clear() (Bloch method). (Bloch3d method). clebsch() (in module qutip.utilities). cnot() (in module qutip.qip.gates). coherence_function_g1() (in module qutip.correlation). coherence_function_g2() (in module qutip.correlation). coherent() (in module qutip.states). coherent_dm() (in module qutip.states). concurrence() (in module qutip.entropy). conj() (Qobj method). controlled_gate() (in module qutip.qip.gates). convert_unit() (in module qutip.utilities). correlation() (in module qutip.correlation). correlation_2op_1t() (in module qutip.correlation). correlation_2op_2t() (in module qutip.correlation). correlation_4op_1t() (in module qutip.correlation). correlation_4op_2t() (in module qutip.correlation). correlation_matrix() (in module qutip.continuous_variables). correlation_matrix_field() (in module qutip.continuous_variables). correlation_matrix_quadrature() (in module qutip.continuous_variables). correlation_ss() (in module qutip.correlation). covariance_matrix() (in module qutip.continuous_vari,MatchSource.WIKI,docs/3.0.0/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/genindex.html
https://qutip.org/docs/3.0.0/index.html:253,Deployability,install,installation,253,". QuTiP: Quantum Toolbox in Python (3.0.0) — QuTiP 3.0 Documentation. QuTiP; 3.0.0. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.6+); Installation on Windows; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . QuTiP: Quantum Toolbox in Python (3.0.0); Indices and tables. Frontmatter ». QuTiP: Quantum Toolbox in Python (3.0.0)¶. Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windo",MatchSource.WIKI,docs/3.0.0/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/index.html
https://qutip.org/docs/3.0.0/index.html:1726,Deployability,install,installation,1726,"ns; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . QuTiP: Quantum Toolbox in Python (3.0.0); Indices and tables. Frontmatter ». QuTiP: Quantum Toolbox in Python (3.0.0)¶. Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Organization. Basic Operations on Quantum Objects; First things first; The quantum object class; Functions operating on Qobj class. Manipulating States and Operators; Introduction; State Vectors (kets or bras); Density matrices; Qubit (two-level) systems; Expectation values; Superoperators and Vectorized Operators. Using Tensor Products and Partial Traces; Tensor products; Example: Constructing composite Hamiltonians; Partial trace. Time Evolution and Quantum System Dynamics; Dynamics Simulation Results; Lindblad Master Equation Solver; Monte Carlo Solver; Bloch-Redfield master equation; Solving Problems with Time-dependent Hamiltonians; Floque",MatchSource.WIKI,docs/3.0.0/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/index.html
https://qutip.org/docs/3.0.0/index.html:1841,Deployability,install,installation,1841,"ns; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . QuTiP: Quantum Toolbox in Python (3.0.0); Indices and tables. Frontmatter ». QuTiP: Quantum Toolbox in Python (3.0.0)¶. Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Organization. Basic Operations on Quantum Objects; First things first; The quantum object class; Functions operating on Qobj class. Manipulating States and Operators; Introduction; State Vectors (kets or bras); Density matrices; Qubit (two-level) systems; Expectation values; Superoperators and Vectorized Operators. Using Tensor Products and Partial Traces; Tensor products; Example: Constructing composite Hamiltonians; Partial trace. Time Evolution and Quantum System Dynamics; Dynamics Simulation Results; Lindblad Master Equation Solver; Monte Carlo Solver; Bloch-Redfield master equation; Solving Problems with Time-dependent Hamiltonians; Floque",MatchSource.WIKI,docs/3.0.0/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/index.html
https://qutip.org/docs/3.0.0/index.html:5056,Deployability,update,updated,5056,"jects; Applications of exponential series. Two-time correlation functions; Steadystate correlation function; Emission spectrum; Non-steadystate correlation function. Plotting on the Bloch Sphere; Introduction; The Bloch and Bloch3d Classes; Configuring the Bloch sphere; Animating with the Bloch sphere. Visualization of quantum states and processes; Fock-basis probability distribution; Quasi-probability distributions; Visualizing operators; Quantum process tomography. Running Problems in Parallel; QuTiP’s Built-in Parallel for-loop; IPython-Based parfor; Parallel picloud Computations. Saving QuTiP Objects and Data Sets; Storing and loading QuTiP objects; Storing and loading datasets. Generating Random Quantum States & Operators; Composite random objects. Modifying Internal QuTiP Settings; User Accessible Parameters; Example: Changing Settings; Persistent Settings. API documentation; Classes; Qobj; eseries; Bloch sphere; Solver Options and Results; Distribution functions; Quantum information processing. Functions; Manipulation and Creation of States and Operators; Functions acting on states and operators; Dynamics and Time-Evolution; Visualization; Quantum Information Processing; Utilitiy Functions. Change Log; Version 3.0.0 (July 17, 2014):; New Features; Improvements. Version 2.2.0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Indices and tables¶. Index; Module Index; Search Page. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 17, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/index.html
https://qutip.org/docs/3.0.0/index.html:1857,Integrability,depend,dependencies,1857,"ns; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . QuTiP: Quantum Toolbox in Python (3.0.0); Indices and tables. Frontmatter ». QuTiP: Quantum Toolbox in Python (3.0.0)¶. Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Organization. Basic Operations on Quantum Objects; First things first; The quantum object class; Functions operating on Qobj class. Manipulating States and Operators; Introduction; State Vectors (kets or bras); Density matrices; Qubit (two-level) systems; Expectation values; Superoperators and Vectorized Operators. Using Tensor Products and Partial Traces; Tensor products; Example: Constructing composite Hamiltonians; Partial trace. Time Evolution and Quantum System Dynamics; Dynamics Simulation Results; Lindblad Master Equation Solver; Monte Carlo Solver; Bloch-Redfield master equation; Solving Problems with Time-dependent Hamiltonians; Floque",MatchSource.WIKI,docs/3.0.0/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/index.html
https://qutip.org/docs/3.0.0/index.html:2739,Integrability,depend,dependent,2739,ion; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Organization. Basic Operations on Quantum Objects; First things first; The quantum object class; Functions operating on Qobj class. Manipulating States and Operators; Introduction; State Vectors (kets or bras); Density matrices; Qubit (two-level) systems; Expectation values; Superoperators and Vectorized Operators. Using Tensor Products and Partial Traces; Tensor products; Example: Constructing composite Hamiltonians; Partial trace. Time Evolution and Quantum System Dynamics; Dynamics Simulation Results; Lindblad Master Equation Solver; Monte Carlo Solver; Bloch-Redfield master equation; Solving Problems with Time-dependent Hamiltonians; Floquet Formalism; Performance (QuTiP vs. qotoolbox); Setting Options for the Dynamics Solvers. Solving for Steady-State Solutions; Introduction; Using the Steadystate Solver; Additional Solver Arguments; Example: Harmonic Oscillator in Thermal Bath. An Overview of the Eseries Class; Exponential-series representation of time-dependent quantum objects; Applications of exponential series. Two-time correlation functions; Steadystate correlation function; Emission spectrum; Non-steadystate correlation function. Plotting on the Bloch Sphere; Introduction; The Bloch and Bloch3d Classes; Configuring the Bloch sphere; Animating with the Bloch sphere. Visualization of quantum states and processes; Fock-basis probability distribution; Quasi-probability distributions; Visualizing operators; Quantum process tomography. Running Problems in Parallel; QuTiP’s Built-in Parallel for-loop; IPython-Based parfor; Parallel ,MatchSource.WIKI,docs/3.0.0/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/index.html
https://qutip.org/docs/3.0.0/index.html:3090,Integrability,depend,dependent,3090,tion. Users Guide; Guide Overview; Organization. Basic Operations on Quantum Objects; First things first; The quantum object class; Functions operating on Qobj class. Manipulating States and Operators; Introduction; State Vectors (kets or bras); Density matrices; Qubit (two-level) systems; Expectation values; Superoperators and Vectorized Operators. Using Tensor Products and Partial Traces; Tensor products; Example: Constructing composite Hamiltonians; Partial trace. Time Evolution and Quantum System Dynamics; Dynamics Simulation Results; Lindblad Master Equation Solver; Monte Carlo Solver; Bloch-Redfield master equation; Solving Problems with Time-dependent Hamiltonians; Floquet Formalism; Performance (QuTiP vs. qotoolbox); Setting Options for the Dynamics Solvers. Solving for Steady-State Solutions; Introduction; Using the Steadystate Solver; Additional Solver Arguments; Example: Harmonic Oscillator in Thermal Bath. An Overview of the Eseries Class; Exponential-series representation of time-dependent quantum objects; Applications of exponential series. Two-time correlation functions; Steadystate correlation function; Emission spectrum; Non-steadystate correlation function. Plotting on the Bloch Sphere; Introduction; The Bloch and Bloch3d Classes; Configuring the Bloch sphere; Animating with the Bloch sphere. Visualization of quantum states and processes; Fock-basis probability distribution; Quasi-probability distributions; Visualizing operators; Quantum process tomography. Running Problems in Parallel; QuTiP’s Built-in Parallel for-loop; IPython-Based parfor; Parallel picloud Computations. Saving QuTiP Objects and Data Sets; Storing and loading QuTiP objects; Storing and loading datasets. Generating Random Quantum States & Operators; Composite random objects. Modifying Internal QuTiP Settings; User Accessible Parameters; Example: Changing Settings; Persistent Settings. API documentation; Classes; Qobj; eseries; Bloch sphere; Solver Options and Results; Distribution,MatchSource.WIKI,docs/3.0.0/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/index.html
https://qutip.org/docs/3.0.0/index.html:3749,Performance,load,loading,3749,"amiltonians; Floquet Formalism; Performance (QuTiP vs. qotoolbox); Setting Options for the Dynamics Solvers. Solving for Steady-State Solutions; Introduction; Using the Steadystate Solver; Additional Solver Arguments; Example: Harmonic Oscillator in Thermal Bath. An Overview of the Eseries Class; Exponential-series representation of time-dependent quantum objects; Applications of exponential series. Two-time correlation functions; Steadystate correlation function; Emission spectrum; Non-steadystate correlation function. Plotting on the Bloch Sphere; Introduction; The Bloch and Bloch3d Classes; Configuring the Bloch sphere; Animating with the Bloch sphere. Visualization of quantum states and processes; Fock-basis probability distribution; Quasi-probability distributions; Visualizing operators; Quantum process tomography. Running Problems in Parallel; QuTiP’s Built-in Parallel for-loop; IPython-Based parfor; Parallel picloud Computations. Saving QuTiP Objects and Data Sets; Storing and loading QuTiP objects; Storing and loading datasets. Generating Random Quantum States & Operators; Composite random objects. Modifying Internal QuTiP Settings; User Accessible Parameters; Example: Changing Settings; Persistent Settings. API documentation; Classes; Qobj; eseries; Bloch sphere; Solver Options and Results; Distribution functions; Quantum information processing. Functions; Manipulation and Creation of States and Operators; Functions acting on states and operators; Dynamics and Time-Evolution; Visualization; Quantum Information Processing; Utilitiy Functions. Change Log; Version 3.0.0 (July 17, 2014):; New Features; Improvements. Version 2.2.0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); ",MatchSource.WIKI,docs/3.0.0/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/index.html
https://qutip.org/docs/3.0.0/index.html:3784,Performance,load,loading,3784,"amiltonians; Floquet Formalism; Performance (QuTiP vs. qotoolbox); Setting Options for the Dynamics Solvers. Solving for Steady-State Solutions; Introduction; Using the Steadystate Solver; Additional Solver Arguments; Example: Harmonic Oscillator in Thermal Bath. An Overview of the Eseries Class; Exponential-series representation of time-dependent quantum objects; Applications of exponential series. Two-time correlation functions; Steadystate correlation function; Emission spectrum; Non-steadystate correlation function. Plotting on the Bloch Sphere; Introduction; The Bloch and Bloch3d Classes; Configuring the Bloch sphere; Animating with the Bloch sphere. Visualization of quantum states and processes; Fock-basis probability distribution; Quasi-probability distributions; Visualizing operators; Quantum process tomography. Running Problems in Parallel; QuTiP’s Built-in Parallel for-loop; IPython-Based parfor; Parallel picloud Computations. Saving QuTiP Objects and Data Sets; Storing and loading QuTiP objects; Storing and loading datasets. Generating Random Quantum States & Operators; Composite random objects. Modifying Internal QuTiP Settings; User Accessible Parameters; Example: Changing Settings; Persistent Settings. API documentation; Classes; Qobj; eseries; Bloch sphere; Solver Options and Results; Distribution functions; Quantum information processing. Functions; Manipulation and Creation of States and Operators; Functions acting on states and operators; Dynamics and Time-Evolution; Visualization; Quantum Information Processing; Utilitiy Functions. Change Log; Version 3.0.0 (July 17, 2014):; New Features; Improvements. Version 2.2.0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); ",MatchSource.WIKI,docs/3.0.0/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/index.html
https://qutip.org/docs/3.0.0/installation.html:3596,Availability,avail,available,3596,"tran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:3615,Availability,down,download,3615,"tran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:3681,Availability,down,download,3681,". Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:3726,Availability,avail,available,3726,"d for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases;",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:7530,Availability,avail,available,7530,"nstall py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Note; The next step is optional, but is necessary if you plan to use the string (Cython) based time-dependent format. See Solving Problems with Time-dependent Hamiltonians. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc47 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc47. Running port select again should give:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47 (active); none. Installing QuTiP via Macports will take a long time as each of the QuTiP dependencies is build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on W",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:10302,Availability,error,errors,10302,"/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; >>> from qutip import *; >>> about(). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 16, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:225,Deployability,install,installation,225,". Installation — QuTiP 3.0 Documentation. QuTiP; 3.0.0. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.6+); Installation on Windows; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.0 (July X, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:1472,Deployability,install,installation,1472,"jects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.0 (July X, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.13+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carl",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:1587,Deployability,install,installation,1587,"jects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.0 (July X, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.13+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carl",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:2586,Deployability,install,installing,2586,"n of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.13+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are ava",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:3042,Deployability,install,install,3042,"hon; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.13+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:3248,Deployability,install,installation,3248,"r versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardles",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:3291,Deployability,install,install,3291,"r versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardles",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:3357,Deployability,install,install,3357,"iltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python se",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:3386,Deployability,install,installing,3386,"files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:3500,Deployability,install,installation,3500,"; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo f",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:3574,Deployability,release,releases,3574,"tran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:3842,Deployability,release,release,3842,"s an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is r",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:4126,Deployability,install,installation,4126,"he Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the req",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:4304,Deployability,install,install,4304,"Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install pyt",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:4366,Deployability,install,install,4366,"ip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then ins",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:4459,Deployability,install,install,4459,"ore detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:4604,Deployability,install,install,4604,"ailable from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get insta",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:4717,Deployability,release,releases,4717,"est source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 ins",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:4740,Deployability,update,update,4740,"est source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 ins",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:4761,Deployability,install,install,4761,"est source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 ins",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:4836,Deployability,install,installed,4836,"nterested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # o",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:4896,Deployability,release,released,4896,"nterested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # o",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:4915,Deployability,upgrade,upgraded,4915,"nterested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # o",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:5055,Deployability,install,install,5055,"QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:5110,Deployability,install,install,5110,"QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:5146,Deployability,install,installation,5146,"d Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Dow",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:5183,Deployability,install,install,5183,"d Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Dow",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:5238,Deployability,install,install,5238,"d Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Dow",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:5308,Deployability,install,install,5308,"d Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Dow",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:5366,Deployability,install,install,5366,"optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacP",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:5469,Deployability,install,install,5469,"llation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:5520,Deployability,install,install,5520,"llation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:5593,Deployability,install,install,5593,"llation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:5665,Deployability,install,installation,5665,"epository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo po",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:5771,Deployability,install,installed,5771,"uTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select p",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:5802,Deployability,install,install,5802,"uTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select p",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:5858,Deployability,install,install,5858,"uTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select p",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:5917,Deployability,install,install,5917,"uTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select p",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:5994,Deployability,install,install,5994,"uTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select p",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:6123,Deployability,install,install,6123,"a. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Note; The next step is optional, but is necessary if you plan to use the string (Cython) based time-dependent format. See Solving P",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:6195,Deployability,install,installation,6195,"tall python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Note; The next step is optional, but is necessary if you plan to use the string (Cython) based time-dependent format. See Solving Problems with Time-dependent Hamiltonians. Finally, we want to set the macports compiler to the vanilla GC",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:6261,Deployability,install,install,6261,"tall python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Note; The next step is optional, but is necessary if you plan to use the string (Cython) based time-dependent format. See Solving Problems with Time-dependent Hamiltonians. Finally, we want to set the macports compiler to the vanilla GC",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:6357,Deployability,install,install,6357,"n-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Note; The next step is optional, but is necessary if you plan to use the string (Cython) based time-dependent format. See Solving Problems with Time-dependent Hamiltonians. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers,",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:6408,Deployability,install,installation,6408,"-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Note; The next step is optional, but is necessary if you plan to use the string (Cython) based time-dependent format. See Solving Problems with Time-dependent Hamiltonians. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47; none (active). We want to set the the compiler to the gcc4x compiler, where x is the ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:6461,Deployability,install,installed,6461,"-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Note; The next step is optional, but is necessary if you plan to use the string (Cython) based time-dependent format. See Solving Problems with Time-dependent Hamiltonians. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47; none (active). We want to set the the compiler to the gcc4x compiler, where x is the ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:6486,Deployability,install,install,6486,"-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Note; The next step is optional, but is necessary if you plan to use the string (Cython) based time-dependent format. See Solving Problems with Time-dependent Hamiltonians. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47; none (active). We want to set the the compiler to the gcc4x compiler, where x is the ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:6516,Deployability,install,install,6516,"-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Note; The next step is optional, but is necessary if you plan to use the string (Cython) based time-dependent format. See Solving Problems with Time-dependent Hamiltonians. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47; none (active). We want to set the the compiler to the gcc4x compiler, where x is the ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:6558,Deployability,install,install,6558,"-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Note; The next step is optional, but is necessary if you plan to use the string (Cython) based time-dependent format. See Solving Problems with Time-dependent Hamiltonians. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47; none (active). We want to set the the compiler to the gcc4x compiler, where x is the ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:6589,Deployability,install,install,6589,"-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Note; The next step is optional, but is necessary if you plan to use the string (Cython) based time-dependent format. See Solving Problems with Time-dependent Hamiltonians. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47; none (active). We want to set the the compiler to the gcc4x compiler, where x is the ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:6688,Deployability,install,install,6688,"f python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Note; The next step is optional, but is necessary if you plan to use the string (Cython) based time-dependent format. See Solving Problems with Time-dependent Hamiltonians. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc47 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc47. Running port select again should give:; Available versions for gcc:; appl",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:6750,Deployability,install,install,6750,"f python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Note; The next step is optional, but is necessary if you plan to use the string (Cython) based time-dependent format. See Solving Problems with Time-dependent Hamiltonians. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc47 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc47. Running port select again should give:; Available versions for gcc:; appl",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:6943,Deployability,install,install,6943,"o solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Note; The next step is optional, but is necessary if you plan to use the string (Cython) based time-dependent format. See Solving Problems with Time-dependent Hamiltonians. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc47 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc47. Running port select again should give:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47 (active); none. Installing QuTiP via Macports will take a long time as each of the QuTiP dependencies is build from source code. The advantage is that all dependencies are resolved automatically, and the result should be ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:6987,Deployability,install,install,6987,"o solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Note; The next step is optional, but is necessary if you plan to use the string (Cython) based time-dependent format. See Solving Problems with Time-dependent Hamiltonians. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc47 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc47. Running port select again should give:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47 (active); none. Installing QuTiP via Macports will take a long time as each of the QuTiP dependencies is build from source code. The advantage is that all dependencies are resolved automatically, and the result should be ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:7328,Deployability,install,installed,7328,"equired libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Note; The next step is optional, but is necessary if you plan to use the string (Cython) based time-dependent format. See Solving Problems with Time-dependent Hamiltonians. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc47 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc47. Running port select again should give:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47 (active); none. Installing QuTiP via Macports will take a long time as each of the QuTiP dependencies is build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:8042,Deployability,install,install,8042,"essary if you plan to use the string (Cython) based time-dependent format. See Solving Problems with Time-dependent Hamiltonians. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc47 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc47. Running port select again should give:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47 (active); none. Installing QuTiP via Macports will take a long time as each of the QuTiP dependencies is build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [bui",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:8129,Deployability,install,installing,8129,"ime-dependent Hamiltonians. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc47 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc47. Running port select again should give:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47 (active); none. Installing QuTiP via Macports will take a long time as each of the QuTiP dependencies is build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file s",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:8276,Deployability,install,install,8276,"on. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc47 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc47. Running port select again should give:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47 (active); none. Installing QuTiP via Macports will take a long time as each of the QuTiP dependencies is build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different loc",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:8544,Deployability,install,installation,8544,"ghest number available, in this case mp-gcc47 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc47. Running port select again should give:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47 (active); none. Installing QuTiP via Macports will take a long time as each of the QuTiP dependencies is build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\Min",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:8779,Deployability,install,installing,8779,"each of the QuTiP dependencies is build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:8858,Deployability,install,installation,8858,"each of the QuTiP dependencies is build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:9197,Deployability,install,installed,9197,"stribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If su",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:9314,Deployability,install,installed,9314,"ws¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:9727,Deployability,install,installed,9727," also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important depe",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:9807,Deployability,install,installed,9807," also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important depe",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:9962,Deployability,install,installation,9962,"owing content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; >>> from qutip import *; >>> about(). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last upda",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:10071,Deployability,install,installing,10071,"/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; >>> from qutip import *; >>> about(). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 16, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:10099,Deployability,install,installation,10099,"/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; >>> from qutip import *; >>> about(). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 16, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:10344,Deployability,install,installed,10344,"/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; >>> from qutip import *; >>> about(). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 16, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:10424,Deployability,install,installed,10424,"/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; >>> from qutip import *; >>> about(). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 16, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:10755,Deployability,install,installed,10755,"/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; >>> from qutip import *; >>> about(). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 16, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:10922,Deployability,update,updated,10922,"/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; >>> from qutip import *; >>> about(). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 16, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:1603,Integrability,depend,dependencies,1603,"jects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.0 (July X, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.13+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carl",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:1908,Integrability,depend,depends,1908,"Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.0 (July X, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.13+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver t",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:2344,Integrability,depend,dependent,2344,"y 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.13+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package mana",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:3490,Integrability,depend,dependent,3490,"; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo f",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:4094,Integrability,depend,dependencies,4094,"st have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the te",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:4148,Integrability,depend,dependencies,4148,"he Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the req",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:4819,Integrability,depend,dependencies,4819,"nterested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # o",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:5000,Integrability,depend,dependencies,5000,"QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:5162,Integrability,depend,dependencies,5162,"d Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Dow",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:5204,Integrability,depend,dependencies,5204,"d Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (12.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Dow",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:5751,Integrability,depend,dependencies,5751,"uTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select p",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:7105,Integrability,depend,dependent,7105,"tion on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Note; The next step is optional, but is necessary if you plan to use the string (Cython) based time-dependent format. See Solving Problems with Time-dependent Hamiltonians. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc47 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc47. Running port select again should give:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47 (active); none. Installing QuTiP via Macports will take a long time as each of the QuTiP dependencies is build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:7154,Integrability,depend,dependent,7154,"veloper tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Note; The next step is optional, but is necessary if you plan to use the string (Cython) based time-dependent format. See Solving Problems with Time-dependent Hamiltonians. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc47 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc47. Running port select again should give:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47 (active); none. Installing QuTiP via Macports will take a long time as each of the QuTiP dependencies is build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superp",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:7840,Integrability,depend,dependencies,7840,"X which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Note; The next step is optional, but is necessary if you plan to use the string (Cython) based time-dependent format. See Solving Problems with Time-dependent Hamiltonians. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc47 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc47. Running port select again should give:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47 (active); none. Installing QuTiP via Macports will take a long time as each of the QuTiP dependencies is build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:7906,Integrability,depend,dependencies,7906,"n34. To install QuTiP from Macports, run; sudo port install py-qutip. Note; The next step is optional, but is necessary if you plan to use the string (Cython) based time-dependent format. See Solving Problems with Time-dependent Hamiltonians. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc47 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc47. Running port select again should give:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47 (active); none. Installing QuTiP via Macports will take a long time as each of the QuTiP dependencies is build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following cont",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:9847,Integrability,depend,dependencies,9847," also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important depe",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:10456,Integrability,depend,dependencies,10456,"/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; >>> from qutip import *; >>> about(). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 16, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:10556,Integrability,message,message,10556,"/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; >>> from qutip import *; >>> about(). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 16, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:10742,Integrability,depend,dependencies,10742,"/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; >>> from qutip import *; >>> about(). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 16, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:9483,Modifiability,variab,variable,9483,"eshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, t",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:2966,Performance,perform,performance,2966,"cientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.13+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:2153,Testability,test,tested,2153,"1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.13+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present,",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:2857,Testability,test,tests,2857,"s Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.13+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of Q",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:3187,Testability,test,tested,3187,"13+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platfo",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:8630,Testability,test,tested,8630,"elect gcc mp-gcc47. Running port select again should give:; Available versions for gcc:; apple-gcc42; gcc42; llvm-gcc42; mp-gcc47 (active); none. Installing QuTiP via Macports will take a long time as each of the QuTiP dependencies is build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-package",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:9931,Testability,test,test,9931,"owing content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; >>> from qutip import *; >>> about(). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last upda",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:10011,Testability,test,tests,10011,"/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; >>> from qutip import *; >>> about(). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 16, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:10048,Testability,test,testing,10048,"/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; >>> from qutip import *; >>> about(). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 16, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:10176,Testability,test,testing,10176,"/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; >>> from qutip import *; >>> about(). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 16, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:10226,Testability,test,tests,10226,"/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; >>> from qutip import *; >>> about(). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 16, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/installation.html:10479,Testability,test,tests,10479,"/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; >>> from qutip import *; >>> about(). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 16, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/installation.html
https://qutip.org/docs/3.0.0/py-modindex.html:232,Deployability,install,installation,232,". Python Module Index — QuTiP 3.0 Documentation. QuTiP; 3.0.0. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.6+); Installation on Windows; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Python Module Index. q.  . q. qutip.    ; qutip.bloch_redfield.    ; qutip.continuous_variables.    ; qutip.correlation.    ; qutip.entropy.    ; qutip.essolve.    ; qutip.expect.    ; qutip.fileio.    ; qutip.floquet.    ; qutip.fortran.mcsolve_f90.    ; qutip.graph.    ; qutip.ipynbtools.    ; qutip.mcsolve.    ; qutip.mesolve.    ; qutip.metrics.    ; qutip.operators.    ; qutip.partial_transpose.    ; qutip.propagator.    ; qutip.qip.algorithms.qft.    ; qutip.qip.gates.    ; qutip.qip.qubits.    ; qutip.random_objects.    ; qutip.sesolve.    ; qutip.states.    ; quti",MatchSource.WIKI,docs/3.0.0/py-modindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/py-modindex.html
https://qutip.org/docs/3.0.0/py-modindex.html:2304,Deployability,update,updated,2304,"tallation on Windows; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Python Module Index. q.  . q. qutip.    ; qutip.bloch_redfield.    ; qutip.continuous_variables.    ; qutip.correlation.    ; qutip.entropy.    ; qutip.essolve.    ; qutip.expect.    ; qutip.fileio.    ; qutip.floquet.    ; qutip.fortran.mcsolve_f90.    ; qutip.graph.    ; qutip.ipynbtools.    ; qutip.mcsolve.    ; qutip.mesolve.    ; qutip.metrics.    ; qutip.operators.    ; qutip.partial_transpose.    ; qutip.propagator.    ; qutip.qip.algorithms.qft.    ; qutip.qip.gates.    ; qutip.qip.qubits.    ; qutip.random_objects.    ; qutip.sesolve.    ; qutip.states.    ; qutip.steadystate.    ; qutip.stochastic.    ; qutip.superop_reps.    ; qutip.superoperator.    ; qutip.tensor.    ; qutip.three_level_atom.    ; qutip.tomography.    ; qutip.utilities.    ; qutip.visualization.    ; qutip.wigner. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 17, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/py-modindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/py-modindex.html
https://qutip.org/docs/3.0.0/search.html:219,Deployability,install,installation,219,". Search — QuTiP 3.0 Documentation. QuTiP; 3.0.0. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.6+); Installation on Windows; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Search. Please activate JavaScript to enable the search; functionality.; . From here you can search these documents. Enter your search; words into the box below and click ""search"". Note that the search; function will automatically search for all of the words. Pages; containing fewer words won't appear in the result list.; . Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 17, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/search.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/search.html
https://qutip.org/docs/3.0.0/search.html:1812,Deployability,update,updated,1812,". Search — QuTiP 3.0 Documentation. QuTiP; 3.0.0. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.6+); Installation on Windows; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Search. Please activate JavaScript to enable the search; functionality.; . From here you can search these documents. Enter your search; words into the box below and click ""search"". Note that the search; function will automatically search for all of the words. Pages; containing fewer words won't appear in the result list.; . Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Jul 17, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.0/search.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.0/search.html
https://qutip.org/docs/3.0.1/biblio.html:225,Deployability,install,installation,225,". Bibliography — QuTiP 3.0 Documentation. QuTiP; 3.0.1. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.6+); Installation on Windows; Optional Installation Options; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Bibliography. « Developers. Bibliography¶. [Hav03]Havel, T. Robust procedures for converting among Lindblad, Kraus and matrix representations of quantum dynamical semigroups. Journal of Mathematical Physics 44 2, 534 (2003). doi:10.1063/1.1518555. [Wat13]Watrous, J. Theory of Quantum Information, lecture notes. [Moh08]; Mohseni, A. T. Rezakhani, D. A. Lidar, Quantum-process tomography: Resource analysis of different strategies, Phys. Rev. A 77, 032322 (2008). doi:10.1103/PhysRevA.77.032322. [Gri98]; Grifoni, P. Hänggi,",MatchSource.WIKI,docs/3.0.1/biblio.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/biblio.html
https://qutip.org/docs/3.0.1/biblio.html:2613,Deployability,update,updated,2613,"amics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Bibliography. « Developers. Bibliography¶. [Hav03]Havel, T. Robust procedures for converting among Lindblad, Kraus and matrix representations of quantum dynamical semigroups. Journal of Mathematical Physics 44 2, 534 (2003). doi:10.1063/1.1518555. [Wat13]Watrous, J. Theory of Quantum Information, lecture notes. [Moh08]; Mohseni, A. T. Rezakhani, D. A. Lidar, Quantum-process tomography: Resource analysis of different strategies, Phys. Rev. A 77, 032322 (2008). doi:10.1103/PhysRevA.77.032322. [Gri98]; Grifoni, P. Hänggi, Driven quantum tunneling, Physics Reports 304, 299 (1998). doi:10.1016/S0370-1573(98)00022-2. [Cre03]. Creffield, Location of crossings in the Floquet spectrum of a driven two-level system, Phys. Rev. B 67, 165301 (2003). doi:10.1103/PhysRevB.67.165301. [Gar03]Gardineer and Zoller, Quantum Noise (Springer, 2004). [Bre02]H.-P. Breuer and F. Petruccione, The Theory of Open Quantum Systems (Oxford, 2002). [Coh92]; Cohen-Tannoudji, J. Dupont-Roc, G. Grynberg, Atom-Photon Interactions: Basic Processes and Applications, (Wiley, 1992). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/biblio.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/biblio.html
https://qutip.org/docs/3.0.1/changelog.html:2596,Availability,failure,failure,2596,".0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). « Functions. Developers ». Change Log¶. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories when using only 1 CPU.; Fix bug in parsing of time-dependent Hamiltonian/collapse operator arguments; that occured when the args argument is not a dictionary.; Fix bug in internal _version2int function that cause a failure when parsing; the version number of the Cython package. Version 3.0.0 (July 17, 2014):¶. New Features¶. New module qutip.stochastic with stochastic master equation and stochastic; Schrödinger equation solvers.; Expanded steady state solvers. The function steady has been deprecated in; favor of steadystate. The steadystate solver no longer use umfpack by; default. New pre-processing methods for reordering and balancing the linear; equation system used in direct solution of the steady state.; New module qutip.qip with utilities for quantum information processing,; including pre-defined quantum gates along with functions for expanding; arbitrary 1, 2, and 3 qubit gates to N qubit registers, circuit; representations, library of quantum algorithms, and basic physical models for; some common QIP architectures.; New module qutip.distributions with unified API for working with; distribution functions.; New format for defining time-dependent Hamiltonians and collapse operators,; using a pr",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:5346,Availability,avail,available,5346,"spin_Jy, spin_Jz and; spin_state, spin_coherent.; The expect function now supports a list of operators, in addition to the; previously supported list of states.; Simplified creation of qubit states using ket function.; The module qutip.cyQ has been renamed to qutip.cy and the sparse; matrix-vector functions spmv and spmv1d has been combined into one; function spmv. New functions for operating directly on the underlaying; sparse CSR data have been added (e.g., spmv_csr). Performance; improvements. New and improved Cython functions for calculating expectation; values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squ",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:6305,Availability,avail,available,6305,"and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:13404,Availability,toler,tolerance,13404," factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:223,Deployability,install,installation,223,". Change Log — QuTiP 3.0 Documentation. QuTiP; 3.0.1. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.6+); Installation on Windows; Optional Installation Options; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Change Log; Version 3.0.1 (Aug 5, 2014):; Bug Fixes. Version 3.0.0 (July 17, 2014):; New Features; Improvements. Version 2.2.0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); N",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:6877,Deployability,integrat,integration,6877,"lback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to ",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:8164,Deployability,install,installation,8164," for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gates.; Functions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag()",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:9505,Deployability,release,release,9505,"name in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The qu",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:9812,Deployability,install,installed,9812,".; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum obj",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:11361,Deployability,install,installation,11361,"and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying the installation.; Demos window now lets you copy and paste code from each example. Version 1.1.4 (May 28, 2012):¶. Bug Fixes:¶. Fixed bug pointed out by Brendan Abolins.; Qobj.tr() returns zero-dim ndarray instead of float or complex.; Updated factorial import for scipy version 0.10+. Version 1.1.3 (November 21, 2011):¶. New Functions:¶. Allow custom naming of Bloch sphere. Bug Fixes:¶. Fixed text alignment issues in AboutBox.; Added fix for SciPy V>0.10 where factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-R",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:13683,Deployability,release,release,13683," factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:13768,Deployability,update,updated,13768," factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:5100,Energy Efficiency,power,power,5100,"w; prefixed with plot_ (e.g., plot_fock_distribution). The; plot_wigner and plot_wigner_fock_distribution now supports 3D views; in addition to contour views.; New API and new functions for working with spin operators and states,; including for example spin_Jx, spin_Jy, spin_Jz and; spin_state, spin_coherent.; The expect function now supports a list of operators, in addition to the; previously supported list of states.; Simplified creation of qubit states using ket function.; The module qutip.cyQ has been renamed to qutip.cy and the sparse; matrix-vector functions spmv and spmv1d has been combined into one; function spmv. New functions for operating directly on the underlaying; sparse CSR data have been added (e.g., spmv_csr). Performance; improvements. New and improved Cython functions for calculating expectation; values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which n",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:10384,Energy Efficiency,efficient,efficient,10384," of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying ",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:2432,Integrability,depend,dependent,2432,"e . Change Log; Version 3.0.1 (Aug 5, 2014):; Bug Fixes. Version 3.0.0 (July 17, 2014):; New Features; Improvements. Version 2.2.0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). « Functions. Developers ». Change Log¶. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories when using only 1 CPU.; Fix bug in parsing of time-dependent Hamiltonian/collapse operator arguments; that occured when the args argument is not a dictionary.; Fix bug in internal _version2int function that cause a failure when parsing; the version number of the Cython package. Version 3.0.0 (July 17, 2014):¶. New Features¶. New module qutip.stochastic with stochastic master equation and stochastic; Schrödinger equation solvers.; Expanded steady state solvers. The function steady has been deprecated in; favor of steadystate. The steadystate solver no longer use umfpack by; default. New pre-processing methods for reordering and balancing the linear; equation system used in direct solution of the steady state.; New module qutip.qip with utilities for quantum information processing,; including pre-defined quantum gates along with functions for expanding; arbitrary 1, 2, and 3 qubit gates to N qubit registers, circuit; representations, library of quantum algorithms, and basic physical models for; some common QIP architectures.; New module qutip.distributions with unified API fo",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:3541,Integrability,depend,dependent,3541,"e when parsing; the version number of the Cython package. Version 3.0.0 (July 17, 2014):¶. New Features¶. New module qutip.stochastic with stochastic master equation and stochastic; Schrödinger equation solvers.; Expanded steady state solvers. The function steady has been deprecated in; favor of steadystate. The steadystate solver no longer use umfpack by; default. New pre-processing methods for reordering and balancing the linear; equation system used in direct solution of the steady state.; New module qutip.qip with utilities for quantum information processing,; including pre-defined quantum gates along with functions for expanding; arbitrary 1, 2, and 3 qubit gates to N qubit registers, circuit; representations, library of quantum algorithms, and basic physical models for; some common QIP architectures.; New module qutip.distributions with unified API for working with; distribution functions.; New format for defining time-dependent Hamiltonians and collapse operators,; using a precalculated numpy array that specifies the values of the; Qobj-coefficients for each time step.; New functions for working with different superoperator representations,; including Kraus and Chi representation.; New functions for visualizing quantum states using Qubism and Schimdt plots:; plot_qubism and plot_schmidt.; Dynamics solver now support taking argument e_ops (expectation value; operators) in dictionary form.; Public plotting functions from the qutip.visualization module are now; prefixed with plot_ (e.g., plot_fock_distribution). The; plot_wigner and plot_wigner_fock_distribution now supports 3D views; in addition to contour views.; New API and new functions for working with spin operators and states,; including for example spin_Jx, spin_Jy, spin_Jz and; spin_state, spin_coherent.; The expect function now supports a list of operators, in addition to the; previously supported list of states.; Simplified creation of qubit states using ket function.; The module qutip.cyQ has been re",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:5835,Integrability,depend,dependent,5835," values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:5898,Integrability,depend,depend,5898," values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:6877,Integrability,integrat,integration,6877,"lback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to ",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:7796,Integrability,depend,dependent,7796,"rk scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gates.; Functions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:8995,Integrability,depend,dependence,8995,"ed on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gates.; Functions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and par",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:9423,Integrability,rout,routines,9423,"s as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum obje",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:9688,Integrability,depend,dependent,9688,"urns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:9764,Integrability,depend,dependent,9764,".; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum obj",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:9879,Integrability,depend,dependent,9879,"ow correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can h",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:10203,Integrability,depend,dependent,10203,"rmitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single functi",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:7129,Modifiability,variab,variable,7129,"eData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gate",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:4991,Performance,concurren,concurrence,4991,".; Public plotting functions from the qutip.visualization module are now; prefixed with plot_ (e.g., plot_fock_distribution). The; plot_wigner and plot_wigner_fock_distribution now supports 3D views; in addition to contour views.; New API and new functions for working with spin operators and states,; including for example spin_Jx, spin_Jy, spin_Jz and; spin_state, spin_coherent.; The expect function now supports a list of operators, in addition to the; previously supported list of states.; Simplified creation of qubit states using ket function.; The module qutip.cyQ has been renamed to qutip.cy and the sparse; matrix-vector functions spmv and spmv1d has been combined into one; function spmv. New functions for operating directly on the underlaying; sparse CSR data have been added (e.g., spmv_csr). Performance; improvements. New and improved Cython functions for calculating expectation; values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Imp",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:6048,Performance,optimiz,optimized,6048,"two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose func",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:6714,Performance,perform,performance,6714,"; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualizati",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:7620,Performance,perform,performance,7620,"instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gates.; Functions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is ",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:9345,Performance,perform,performance,9345,"s as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum obje",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:10834,Performance,optimiz,optimized,10834,"ed to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying the installation.; Demos window now lets you copy and paste code from each example. Version 1.1.4 (May 28, 2012):¶. Bug Fixes:¶. Fixed bug pointed out by Brendan Abolins.; Qobj.tr() returns zero-dim ndarray instead of float or complex.; Updated factorial import for scipy version 0.10+. Version 1.1.3 (November 21, 2011):¶. New Functions:¶. Allow custom naming of Bloch sphere. Bug Fixes:¶. Fixed text alignment issues in AboutBox.; Added fix for SciPy V>0.10 where factorial was moved to scipy.",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:11060,Performance,concurren,concurrence,11060,"t; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying the installation.; Demos window now lets you copy and paste code from each example. Version 1.1.4 (May 28, 2012):¶. Bug Fixes:¶. Fixed bug pointed out by Brendan Abolins.; Qobj.tr() returns zero-dim ndarray instead of float or complex.; Updated factorial import for scipy version 0.10+. Version 1.1.3 (November 21, 2011):¶. New Functions:¶. Allow custom naming of Bloch sphere. Bug Fixes:¶. Fixed text alignment issues in AboutBox.; Added fix for SciPy V>0.10 where factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts a",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:12881,Performance,concurren,concurrence,12881," factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:13073,Performance,load,loading,13073," factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:6141,Safety,avoid,avoiding,6141,"two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose func",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:6889,Testability,test,tests,6889,"lback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to ",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:7239,Testability,log,logarithmic,7239,"eData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gate",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:11337,Testability,test,tests,11337,"and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying the installation.; Demos window now lets you copy and paste code from each example. Version 1.1.4 (May 28, 2012):¶. Bug Fixes:¶. Fixed bug pointed out by Brendan Abolins.; Qobj.tr() returns zero-dim ndarray instead of float or complex.; Updated factorial import for scipy version 0.10+. Version 1.1.3 (November 21, 2011):¶. New Functions:¶. Allow custom naming of Bloch sphere. Bug Fixes:¶. Fixed text alignment issues in AboutBox.; Added fix for SciPy V>0.10 where factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-R",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:6659,Usability,simpl,simplified,6659," for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master eqautions with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructued.; QuTiP is now using continous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner co",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:9199,Usability,progress bar,progress bar,9199,"tions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent argume",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/changelog.html:10012,Usability,simpl,simplifying,10012,"ime-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method in",MatchSource.WIKI,docs/3.0.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/changelog.html
https://qutip.org/docs/3.0.1/contributors.html:223,Deployability,install,installation,223,". Developers — QuTiP 3.0 Documentation. QuTiP; 3.0.1. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.6+); Installation on Windows; Optional Installation Options; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Developers; Lead Developers; Contributors. « Change Log. Bibliography ». Developers¶. Lead Developers¶; Robert Johansson (RIKEN); Paul Nation (Korea University). Contributors¶. Note; Anyone is welcome to contribute to QuTiP. If you are interested in helping, please let us know!. alexbrc (github user) - Code contributor; Amit Jamadagni - Bug fix; Anders Lund (Technical University of Denmark) - Bug hunting for the Monte-Carlo solver; Andre Carvalho - Bug hunter; André Xuereb (University of Hannover) - Bug hunter; Anubhav V",MatchSource.WIKI,docs/3.0.1/contributors.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/contributors.html
https://qutip.org/docs/3.0.1/contributors.html:3617,Deployability,update,updated,3617,"come to contribute to QuTiP. If you are interested in helping, please let us know!. alexbrc (github user) - Code contributor; Amit Jamadagni - Bug fix; Anders Lund (Technical University of Denmark) - Bug hunting for the Monte-Carlo solver; Andre Carvalho - Bug hunter; André Xuereb (University of Hannover) - Bug hunter; Anubhav Vardhan (IIT, Kanpur) - Bug hunter, Code contributor, Documentation; Arne Grimsmo (University of Auckland) - Bug hunter, Code contributor; Ben Criger (Waterloo IQC) - Code contributor; Bredan Abolins (Berkeley) - Bug hunter; Chris Granadeł - Code contributor; Claudia Degrandi (Yale University) - Documentation; Dawid Crivelli - Bug hunter; Denis Vasilyev (St. Petersburg State University) - Code contributor; Dong Zhou (Yale University) - Bug hunter; Florian Ong (Institute for Quantum Computation) - Bug hunter; Frank Schima - Macports packaging; Henri Nielsen (Technical University of Denmark) - Bug hunter; Hwajung Kang (Systems Biology Institute, Tokyo) - Suggestions for improving Bloch class; James Clemens (Miami University - Ohio) - Bug hunter; Johannes Feist - Code contributor; Jonas Hörsch - Code contributor; Jonas Neergaard-Nielsen (Technical University of Denmark) - Code contributor, Windows support; JP Hadden (University of Bristol) - Code contributor, improved Bloch sphere visualization; Laurence Stant - Documentation; Markus Baden (Centre for Quantum Technologies, Singapore) - Code contributor, Documentation; Myung-Joong Hwang (Pohang University of Science and Technology) - Bug hunter; Neill Lambert (RIKEN) - Code contributor, Windows support; Per Nielsen (Technical University of Denmark) - Bug hunter, Code contributor; Piotr Migdał (ICFO) - Code contributor; Reinier Heeres (Yale University) - Code contributor; Robert Jördens (NIST) - Linux packaging; Simon Whalen - Code contributor; W.M. Witzel - Bug hunter. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/contributors.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/contributors.html
https://qutip.org/docs/3.0.1/frontmatter.html:1783,Availability,avail,available,1783,"n the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. « QuTiP: Quantum T... Installation ». Frontmatter¶. About This Documentation¶; This document contains a user guide and automatically generated API documentation for QuTiP. A PDF version of this text is available at the documentation page.; For more information see the QuTiP project web page. Author:P.D. Nation. Address:Department of Physics, Korea University,; Seongbuk-gu Seoul, 136-713 South Korea. Author:J.R. Johansson. Address:iTHES Research Group, RIKEN,; Wako-shi Saitama, 351-0198 Japan. version:3.0. status:Released. copyright:This documentation is licensed under the Creative Commons Attribution 3.0 Unported License. Citing This Project¶; If you find this project useful, then please cite:. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP 2: A Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Jap",MatchSource.WIKI,docs/3.0.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/frontmatter.html
https://qutip.org/docs/3.0.1/frontmatter.html:2618,Availability,down,download,2618,"ntmatter¶. About This Documentation¶; This document contains a user guide and automatically generated API documentation for QuTiP. A PDF version of this text is available at the documentation page.; For more information see the QuTiP project web page. Author:P.D. Nation. Address:Department of Physics, Korea University,; Seongbuk-gu Seoul, 136-713 South Korea. Author:J.R. Johansson. Address:iTHES Research Group, RIKEN,; Wako-shi Saitama, 351-0198 Japan. version:3.0. status:Released. copyright:This documentation is licensed under the Creative Commons Attribution 3.0 Unported License. Citing This Project¶; If you find this project useful, then please cite:. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP 2: A Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system ",MatchSource.WIKI,docs/3.0.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/frontmatter.html
https://qutip.org/docs/3.0.1/frontmatter.html:4796,Availability,avail,available,4796,"system dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optics, trapped ions, superconducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, excited by a small number of quanta, that are amenable to classical simulation in a truncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions by providing the following advantages:. QuTiP relies on completely open-source software. You are free to modify and use it as you wish with no licensing fees.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.",MatchSource.WIKI,docs/3.0.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/frontmatter.html
https://qutip.org/docs/3.0.1/frontmatter.html:224,Deployability,install,installation,224,". Frontmatter — QuTiP 3.0 Documentation. QuTiP; 3.0.1. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.6+); Installation on Windows; Optional Installation Options; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. « QuTiP: Quantum T... Installation ». Frontmatter¶. About This Documentation¶; This document contains a user guide and automatically generated API documentation for QuTiP. A PDF version of this text is available at the documentation page.; For more information see the QuTiP project web page. Author:P.D. Nation. Address:Department of Physics, Korea University,; Seongbuk-gu Seoul, 136-713 South Korea. Author:J.R. Johan",MatchSource.WIKI,docs/3.0.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/frontmatter.html
https://qutip.org/docs/3.0.1/frontmatter.html:5965,Deployability,release,release,5965,"ace.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions by providing the following advantages:. QuTiP relies on completely open-source software. You are free to modify and use it as you wish with no licensing fees.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/frontmatter.html
https://qutip.org/docs/3.0.1/frontmatter.html:6458,Deployability,update,updated,6458,"ace.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions by providing the following advantages:. QuTiP relies on completely open-source software. You are free to modify and use it as you wish with no licensing fees.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/frontmatter.html
https://qutip.org/docs/3.0.1/frontmatter.html:4149,Energy Efficiency,efficient,efficiently,4149," quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system and its environment is an essential step in understanding the dynamics of quantum systems.; In general, for all but the most basic of Hamiltonians, an analytical description of the system dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optics, trapped ions, superconducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, excited by a small number of quanta, that are amenable to classical simulation in a truncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions by providing the following advantages:. QuTiP relies on completely open-source software. You are free to modify and use it as you wish with no licensing fees.; QuTiP is based on the Python scripting language, provid",MatchSource.WIKI,docs/3.0.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/frontmatter.html
https://qutip.org/docs/3.0.1/frontmatter.html:5401,Integrability,depend,dependence,5401,"tor and spin components, excited by a small number of quanta, that are amenable to classical simulation in a truncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions by providing the following advantages:. QuTiP relies on completely open-source software. You are free to modify and use it as you wish with no licensing fees.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Ba",MatchSource.WIKI,docs/3.0.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/frontmatter.html
https://qutip.org/docs/3.0.1/frontmatter.html:5449,Integrability,depend,dependent,5449,"ncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions by providing the following advantages:. QuTiP relies on completely open-source software. You are free to modify and use it as you wish with no licensing fees.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created usi",MatchSource.WIKI,docs/3.0.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/frontmatter.html
https://qutip.org/docs/3.0.1/frontmatter.html:3258,Modifiability,coupling,coupling,3258,"g This Project¶; If you find this project useful, then please cite:. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP 2: A Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system and its environment is an essential step in understanding the dynamics of quantum systems.; In general, for all but the most basic of Hamiltonians, an analytical description of the system dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optic",MatchSource.WIKI,docs/3.0.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/frontmatter.html
https://qutip.org/docs/3.0.1/frontmatter.html:3396,Modifiability,coupling,coupling,3396,"ys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system and its environment is an essential step in understanding the dynamics of quantum systems.; In general, for all but the most basic of Hamiltonians, an analytical description of the system dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optics, trapped ions, superconducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, ",MatchSource.WIKI,docs/3.0.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/frontmatter.html
https://qutip.org/docs/3.0.1/frontmatter.html:3351,Performance,perform,performed,3351,"ys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system and its environment is an essential step in understanding the dynamics of quantum systems.; In general, for all but the most basic of Hamiltonians, an analytical description of the system dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optics, trapped ions, superconducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, ",MatchSource.WIKI,docs/3.0.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/frontmatter.html
https://qutip.org/docs/3.0.1/frontmatter.html:5536,Performance,perform,performance,5536,"ncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions by providing the following advantages:. QuTiP relies on completely open-source software. You are free to modify and use it as you wish with no licensing fees.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created usi",MatchSource.WIKI,docs/3.0.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/frontmatter.html
https://qutip.org/docs/3.0.1/frontmatter.html:5167,Testability,test,tested,5167,"ed ions, superconducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, excited by a small number of quanta, that are amenable to classical simulation in a truncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions by providing the following advantages:. QuTiP relies on completely open-source software. You are free to modify and use it as you wish with no licensing fees.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See C",MatchSource.WIKI,docs/3.0.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/frontmatter.html
https://qutip.org/docs/3.0.1/frontmatter.html:1690,Usability,guid,guide,1690,"State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. « QuTiP: Quantum T... Installation ». Frontmatter¶. About This Documentation¶; This document contains a user guide and automatically generated API documentation for QuTiP. A PDF version of this text is available at the documentation page.; For more information see the QuTiP project web page. Author:P.D. Nation. Address:Department of Physics, Korea University,; Seongbuk-gu Seoul, 136-713 South Korea. Author:J.R. Johansson. Address:iTHES Research Group, RIKEN,; Wako-shi Saitama, 351-0198 Japan. version:3.0. status:Released. copyright:This documentation is licensed under the Creative Commons Attribution 3.0 Unported License. Citing This Project¶; If you find this project useful, then please cite:. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP 2: A Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.",MatchSource.WIKI,docs/3.0.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/frontmatter.html
https://qutip.org/docs/3.0.1/frontmatter.html:5698,Usability,learn,learning,5698,"ace.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions by providing the following advantages:. QuTiP relies on completely open-source software. You are free to modify and use it as you wish with no licensing fees.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/frontmatter.html
https://qutip.org/docs/3.0.1/genindex.html:218,Deployability,install,installation,218,". Index — QuTiP 3.0 Documentation. QuTiP; 3.0.1. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.6+); Installation on Windows; Optional Installation Options; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Index. A; | B; | C; | D; | E; | F; | G; | H; | I; | J; | K; | L; | M; | N; | O; | P; | Q; | R; | S; | T; | U; | V; | W. A. about() (in module qutip). add_1q_gate() (QubitCircuit method). add_annotation() (Bloch method). add_circuit() (QubitCircuit method). add_gate() (QubitCircuit method). add_points() (Bloch method). (Bloch3d method). add_states() (Bloch method). (Bloch3d method). add_vectors() (Bloch method). (Bloch3d method). adjacent_gates() (CircuitProcessor method). (QubitCircuit method). (SpinChain method). B. basis() ",MatchSource.WIKI,docs/3.0.1/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/genindex.html
https://qutip.org/docs/3.0.1/genindex.html:12150,Deployability,update,update,12150,"s). squeeze() (in module qutip.operators). squeezing() (in module qutip.operators). ssepdpsolve() (in module qutip.stochastic). ssesolve() (in module qutip.stochastic). state_index_number() (in module qutip.states). state_number_enumerate() (in module qutip.states). state_number_index() (in module qutip.states). state_number_qobj() (in module qutip.states). steadystate() (in module qutip.steadystate). StochasticSolverOptions (class in qutip.stochastic). swap() (in module qutip.qip.gates). swapalpha() (in module qutip.qip.gates). T. tensor() (in module qutip.tensor). thermal_dm() (in module qutip.states). three_level_basis() (in module qutip.three_level_atom). three_level_ops() (in module qutip.three_level_atom). tidyup() (eseries method). (Qobj method). to_choi() (in module qutip.superop_reps). to_kraus() (in module qutip.superop_reps). to_super() (in module qutip.superop_reps). toffoli() (in module qutip.qip.gates). tr() (Qobj method). tracedist() (in module qutip.metrics). trans() (Qobj method). transform() (Qobj method). TwoModeQuadratureCorrelation (class in qutip.distributions). U. unit() (Qobj method). update() (HarmonicOscillatorProbabilityFunction method). (HarmonicOscillatorWaveFunction method). (TwoModeQuadratureCorrelation method). update_psi() (TwoModeQuadratureCorrelation method). update_rho() (TwoModeQuadratureCorrelation method). V. value() (eseries method). variance() (in module qutip.expect). vector_mutation (Bloch attribute). vector_style (Bloch attribute). vector_to_operator() (in module qutip.superoperator). vector_width (Bloch attribute). version_table() (in module qutip.ipynbtools). visualize() (Distribution method). W. wigner() (in module qutip.wigner). wigner_cmap() (in module qutip.visualization). wigner_covariance_matrix() (in module qutip.continuous_variables). WignerDistribution (class in qutip.distributions). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/genindex.html
https://qutip.org/docs/3.0.1/genindex.html:12970,Deployability,update,updated,12970,"s). squeeze() (in module qutip.operators). squeezing() (in module qutip.operators). ssepdpsolve() (in module qutip.stochastic). ssesolve() (in module qutip.stochastic). state_index_number() (in module qutip.states). state_number_enumerate() (in module qutip.states). state_number_index() (in module qutip.states). state_number_qobj() (in module qutip.states). steadystate() (in module qutip.steadystate). StochasticSolverOptions (class in qutip.stochastic). swap() (in module qutip.qip.gates). swapalpha() (in module qutip.qip.gates). T. tensor() (in module qutip.tensor). thermal_dm() (in module qutip.states). three_level_basis() (in module qutip.three_level_atom). three_level_ops() (in module qutip.three_level_atom). tidyup() (eseries method). (Qobj method). to_choi() (in module qutip.superop_reps). to_kraus() (in module qutip.superop_reps). to_super() (in module qutip.superop_reps). toffoli() (in module qutip.qip.gates). tr() (Qobj method). tracedist() (in module qutip.metrics). trans() (Qobj method). transform() (Qobj method). TwoModeQuadratureCorrelation (class in qutip.distributions). U. unit() (Qobj method). update() (HarmonicOscillatorProbabilityFunction method). (HarmonicOscillatorWaveFunction method). (TwoModeQuadratureCorrelation method). update_psi() (TwoModeQuadratureCorrelation method). update_rho() (TwoModeQuadratureCorrelation method). V. value() (eseries method). variance() (in module qutip.expect). vector_mutation (Bloch attribute). vector_style (Bloch attribute). vector_to_operator() (in module qutip.superoperator). vector_width (Bloch attribute). version_table() (in module qutip.ipynbtools). visualize() (Distribution method). W. wigner() (in module qutip.wigner). wigner_cmap() (in module qutip.visualization). wigner_covariance_matrix() (in module qutip.continuous_variables). WignerDistribution (class in qutip.distributions). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/genindex.html
https://qutip.org/docs/3.0.1/genindex.html:2777,Performance,concurren,concurrence,2777,loch3d method). add_states() (Bloch method). (Bloch3d method). add_vectors() (Bloch method). (Bloch3d method). adjacent_gates() (CircuitProcessor method). (QubitCircuit method). (SpinChain method). B. basis() (in module qutip.states). berkeley() (in module qutip.qip.gates). Bloch (class in qutip.bloch). Bloch3d (class in qutip.bloch3d). bloch_redfield_solve() (in module qutip.bloch_redfield). bloch_redfield_tensor() (in module qutip.bloch_redfield). breadth_first_search() (in module qutip.graph). brmesolve() (in module qutip.bloch_redfield). C. checkherm() (Qobj method). CircuitProcessor (class in qutip.qip.models). CircularSpinChain (class in qutip.qip.models.spinchain). clear() (Bloch method). (Bloch3d method). clebsch() (in module qutip.utilities). cnot() (in module qutip.qip.gates). coherence_function_g1() (in module qutip.correlation). coherence_function_g2() (in module qutip.correlation). coherent() (in module qutip.states). coherent_dm() (in module qutip.states). concurrence() (in module qutip.entropy). conj() (Qobj method). controlled_gate() (in module qutip.qip.gates). convert_unit() (in module qutip.utilities). correlation() (in module qutip.correlation). correlation_2op_1t() (in module qutip.correlation). correlation_2op_2t() (in module qutip.correlation). correlation_4op_1t() (in module qutip.correlation). correlation_4op_2t() (in module qutip.correlation). correlation_matrix() (in module qutip.continuous_variables). correlation_matrix_field() (in module qutip.continuous_variables). correlation_matrix_quadrature() (in module qutip.continuous_variables). correlation_ss() (in module qutip.correlation). covariance_matrix() (in module qutip.continuous_variables). cphase() (in module qutip.qip.gates). create() (in module qutip.operators). csign() (in module qutip.qip.gates). D. dag() (Qobj method). destroy() (in module qutip.operators). diag() (Qobj method). dispersive_gate_correction() (DispersivecQED method). DispersivecQED (class in qutip.qip.models.cqed).,MatchSource.WIKI,docs/3.0.1/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/genindex.html
https://qutip.org/docs/3.0.1/genindex.html:2473,Usability,clear,clear,2473, | C; | D; | E; | F; | G; | H; | I; | J; | K; | L; | M; | N; | O; | P; | Q; | R; | S; | T; | U; | V; | W. A. about() (in module qutip). add_1q_gate() (QubitCircuit method). add_annotation() (Bloch method). add_circuit() (QubitCircuit method). add_gate() (QubitCircuit method). add_points() (Bloch method). (Bloch3d method). add_states() (Bloch method). (Bloch3d method). add_vectors() (Bloch method). (Bloch3d method). adjacent_gates() (CircuitProcessor method). (QubitCircuit method). (SpinChain method). B. basis() (in module qutip.states). berkeley() (in module qutip.qip.gates). Bloch (class in qutip.bloch). Bloch3d (class in qutip.bloch3d). bloch_redfield_solve() (in module qutip.bloch_redfield). bloch_redfield_tensor() (in module qutip.bloch_redfield). breadth_first_search() (in module qutip.graph). brmesolve() (in module qutip.bloch_redfield). C. checkherm() (Qobj method). CircuitProcessor (class in qutip.qip.models). CircularSpinChain (class in qutip.qip.models.spinchain). clear() (Bloch method). (Bloch3d method). clebsch() (in module qutip.utilities). cnot() (in module qutip.qip.gates). coherence_function_g1() (in module qutip.correlation). coherence_function_g2() (in module qutip.correlation). coherent() (in module qutip.states). coherent_dm() (in module qutip.states). concurrence() (in module qutip.entropy). conj() (Qobj method). controlled_gate() (in module qutip.qip.gates). convert_unit() (in module qutip.utilities). correlation() (in module qutip.correlation). correlation_2op_1t() (in module qutip.correlation). correlation_2op_2t() (in module qutip.correlation). correlation_4op_1t() (in module qutip.correlation). correlation_4op_2t() (in module qutip.correlation). correlation_matrix() (in module qutip.continuous_variables). correlation_matrix_field() (in module qutip.continuous_variables). correlation_matrix_quadrature() (in module qutip.continuous_variables). correlation_ss() (in module qutip.correlation). covariance_matrix() (in module qutip.continuous_vari,MatchSource.WIKI,docs/3.0.1/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/genindex.html
https://qutip.org/docs/3.0.1/index.html:253,Deployability,install,installation,253,". QuTiP: Quantum Toolbox in Python (3.0.1) — QuTiP 3.0 Documentation. QuTiP; 3.0.1. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.6+); Installation on Windows; Optional Installation Options; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . QuTiP: Quantum Toolbox in Python (3.0.1); Indices and tables. Frontmatter ». QuTiP: Quantum Toolbox in Python (3.0.1)¶. Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via Sci",MatchSource.WIKI,docs/3.0.1/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/index.html
https://qutip.org/docs/3.0.1/index.html:1787,Deployability,install,installation,1787,"re; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . QuTiP: Quantum Toolbox in Python (3.0.1); Indices and tables. Frontmatter ». QuTiP: Quantum Toolbox in Python (3.0.1)¶. Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Organization. Basic Operations on Quantum Objects; First things first; The quantum object class; Functions operating on Qobj class. Manipulating States and Operators; Introduction; State Vectors (kets or bras); Density matrices; Qubit (two-level) systems; Expectation values; Superoperators and Vectorized Operators. Using Tensor Products and Partial Traces; Tensor products; Example: Constructing composite Hamiltonians; Partial trace. Time Evolution and Quantum System Dynamics; Dynamics Simulation Results; Lindblad Master Equation Solver; Monte Carlo Solver; Bloch-Red",MatchSource.WIKI,docs/3.0.1/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/index.html
https://qutip.org/docs/3.0.1/index.html:1902,Deployability,install,installation,1902,"re; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . QuTiP: Quantum Toolbox in Python (3.0.1); Indices and tables. Frontmatter ». QuTiP: Quantum Toolbox in Python (3.0.1)¶. Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Organization. Basic Operations on Quantum Objects; First things first; The quantum object class; Functions operating on Qobj class. Manipulating States and Operators; Introduction; State Vectors (kets or bras); Density matrices; Qubit (two-level) systems; Expectation values; Superoperators and Vectorized Operators. Using Tensor Products and Partial Traces; Tensor products; Example: Constructing composite Hamiltonians; Partial trace. Time Evolution and Quantum System Dynamics; Dynamics Simulation Results; Lindblad Master Equation Solver; Monte Carlo Solver; Bloch-Red",MatchSource.WIKI,docs/3.0.1/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/index.html
https://qutip.org/docs/3.0.1/index.html:5238,Deployability,update,updated,5238,". Two-time correlation functions; Steadystate correlation function; Emission spectrum; Non-steadystate correlation function. Plotting on the Bloch Sphere; Introduction; The Bloch and Bloch3d Classes; Configuring the Bloch sphere; Animating with the Bloch sphere. Visualization of quantum states and processes; Fock-basis probability distribution; Quasi-probability distributions; Visualizing operators; Quantum process tomography. Running Problems in Parallel; QuTiP’s Built-in Parallel for-loop; IPython-Based parfor; Parallel picloud Computations. Saving QuTiP Objects and Data Sets; Storing and loading QuTiP objects; Storing and loading datasets. Generating Random Quantum States & Operators; Composite random objects. Modifying Internal QuTiP Settings; User Accessible Parameters; Example: Changing Settings; Persistent Settings. API documentation; Classes; Qobj; eseries; Bloch sphere; Solver Options and Results; Distribution functions; Quantum information processing. Functions; Manipulation and Creation of States and Operators; Functions acting on states and operators; Dynamics and Time-Evolution; Visualization; Quantum Information Processing; Utilitiy Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Bug Fixes. Version 3.0.0 (July 17, 2014):; New Features; Improvements. Version 2.2.0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Indices and tables¶. Index; Module Index; Search Page. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/index.html
https://qutip.org/docs/3.0.1/index.html:1918,Integrability,depend,dependencies,1918,"re; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . QuTiP: Quantum Toolbox in Python (3.0.1); Indices and tables. Frontmatter ». QuTiP: Quantum Toolbox in Python (3.0.1)¶. Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Organization. Basic Operations on Quantum Objects; First things first; The quantum object class; Functions operating on Qobj class. Manipulating States and Operators; Introduction; State Vectors (kets or bras); Density matrices; Qubit (two-level) systems; Expectation values; Superoperators and Vectorized Operators. Using Tensor Products and Partial Traces; Tensor products; Example: Constructing composite Hamiltonians; Partial trace. Time Evolution and Quantum System Dynamics; Dynamics Simulation Results; Lindblad Master Equation Solver; Monte Carlo Solver; Bloch-Red",MatchSource.WIKI,docs/3.0.1/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/index.html
https://qutip.org/docs/3.0.1/index.html:2880,Integrability,depend,dependent,2880,e; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Organization. Basic Operations on Quantum Objects; First things first; The quantum object class; Functions operating on Qobj class. Manipulating States and Operators; Introduction; State Vectors (kets or bras); Density matrices; Qubit (two-level) systems; Expectation values; Superoperators and Vectorized Operators. Using Tensor Products and Partial Traces; Tensor products; Example: Constructing composite Hamiltonians; Partial trace. Time Evolution and Quantum System Dynamics; Dynamics Simulation Results; Lindblad Master Equation Solver; Monte Carlo Solver; Bloch-Redfield master equation; Solving Problems with Time-dependent Hamiltonians; Floquet Formalism; Performance (QuTiP vs. qotoolbox); Setting Options for the Dynamics Solvers. Solving for Steady-State Solutions; Introduction; Using the Steadystate Solver; Additional Solver Arguments; Example: Harmonic Oscillator in Thermal Bath. An Overview of the Eseries Class; Exponential-series representation of time-dependent quantum objects; Applications of exponential series. Two-time correlation functions; Steadystate correlation function; Emission spectrum; Non-steadystate correlation function. Plotting on the Bloch Sphere; Introduction; The Bloch and Bloch3d Classes; Configuring the Bloch sphere; Animating with the Bloch sphere. Visualization of quantum states and processes; Fock-basis probability distribution; Quasi-probability distributions; Visualizing operators; Quantum process tomography. Running Problems in Parallel; QuTiP’s Built-in Parallel for-loop; IPython-Based parfor; Parallel ,MatchSource.WIKI,docs/3.0.1/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/index.html
https://qutip.org/docs/3.0.1/index.html:3231,Integrability,depend,dependent,3231,tion. Users Guide; Guide Overview; Organization. Basic Operations on Quantum Objects; First things first; The quantum object class; Functions operating on Qobj class. Manipulating States and Operators; Introduction; State Vectors (kets or bras); Density matrices; Qubit (two-level) systems; Expectation values; Superoperators and Vectorized Operators. Using Tensor Products and Partial Traces; Tensor products; Example: Constructing composite Hamiltonians; Partial trace. Time Evolution and Quantum System Dynamics; Dynamics Simulation Results; Lindblad Master Equation Solver; Monte Carlo Solver; Bloch-Redfield master equation; Solving Problems with Time-dependent Hamiltonians; Floquet Formalism; Performance (QuTiP vs. qotoolbox); Setting Options for the Dynamics Solvers. Solving for Steady-State Solutions; Introduction; Using the Steadystate Solver; Additional Solver Arguments; Example: Harmonic Oscillator in Thermal Bath. An Overview of the Eseries Class; Exponential-series representation of time-dependent quantum objects; Applications of exponential series. Two-time correlation functions; Steadystate correlation function; Emission spectrum; Non-steadystate correlation function. Plotting on the Bloch Sphere; Introduction; The Bloch and Bloch3d Classes; Configuring the Bloch sphere; Animating with the Bloch sphere. Visualization of quantum states and processes; Fock-basis probability distribution; Quasi-probability distributions; Visualizing operators; Quantum process tomography. Running Problems in Parallel; QuTiP’s Built-in Parallel for-loop; IPython-Based parfor; Parallel picloud Computations. Saving QuTiP Objects and Data Sets; Storing and loading QuTiP objects; Storing and loading datasets. Generating Random Quantum States & Operators; Composite random objects. Modifying Internal QuTiP Settings; User Accessible Parameters; Example: Changing Settings; Persistent Settings. API documentation; Classes; Qobj; eseries; Bloch sphere; Solver Options and Results; Distribution,MatchSource.WIKI,docs/3.0.1/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/index.html
https://qutip.org/docs/3.0.1/index.html:3890,Performance,load,loading,3890,"amiltonians; Floquet Formalism; Performance (QuTiP vs. qotoolbox); Setting Options for the Dynamics Solvers. Solving for Steady-State Solutions; Introduction; Using the Steadystate Solver; Additional Solver Arguments; Example: Harmonic Oscillator in Thermal Bath. An Overview of the Eseries Class; Exponential-series representation of time-dependent quantum objects; Applications of exponential series. Two-time correlation functions; Steadystate correlation function; Emission spectrum; Non-steadystate correlation function. Plotting on the Bloch Sphere; Introduction; The Bloch and Bloch3d Classes; Configuring the Bloch sphere; Animating with the Bloch sphere. Visualization of quantum states and processes; Fock-basis probability distribution; Quasi-probability distributions; Visualizing operators; Quantum process tomography. Running Problems in Parallel; QuTiP’s Built-in Parallel for-loop; IPython-Based parfor; Parallel picloud Computations. Saving QuTiP Objects and Data Sets; Storing and loading QuTiP objects; Storing and loading datasets. Generating Random Quantum States & Operators; Composite random objects. Modifying Internal QuTiP Settings; User Accessible Parameters; Example: Changing Settings; Persistent Settings. API documentation; Classes; Qobj; eseries; Bloch sphere; Solver Options and Results; Distribution functions; Quantum information processing. Functions; Manipulation and Creation of States and Operators; Functions acting on states and operators; Dynamics and Time-Evolution; Visualization; Quantum Information Processing; Utilitiy Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Bug Fixes. Version 3.0.0 (July 17, 2014):; New Features; Improvements. Version 2.2.0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug ",MatchSource.WIKI,docs/3.0.1/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/index.html
https://qutip.org/docs/3.0.1/index.html:3925,Performance,load,loading,3925,"amiltonians; Floquet Formalism; Performance (QuTiP vs. qotoolbox); Setting Options for the Dynamics Solvers. Solving for Steady-State Solutions; Introduction; Using the Steadystate Solver; Additional Solver Arguments; Example: Harmonic Oscillator in Thermal Bath. An Overview of the Eseries Class; Exponential-series representation of time-dependent quantum objects; Applications of exponential series. Two-time correlation functions; Steadystate correlation function; Emission spectrum; Non-steadystate correlation function. Plotting on the Bloch Sphere; Introduction; The Bloch and Bloch3d Classes; Configuring the Bloch sphere; Animating with the Bloch sphere. Visualization of quantum states and processes; Fock-basis probability distribution; Quasi-probability distributions; Visualizing operators; Quantum process tomography. Running Problems in Parallel; QuTiP’s Built-in Parallel for-loop; IPython-Based parfor; Parallel picloud Computations. Saving QuTiP Objects and Data Sets; Storing and loading QuTiP objects; Storing and loading datasets. Generating Random Quantum States & Operators; Composite random objects. Modifying Internal QuTiP Settings; User Accessible Parameters; Example: Changing Settings; Persistent Settings. API documentation; Classes; Qobj; eseries; Bloch sphere; Solver Options and Results; Distribution functions; Quantum information processing. Functions; Manipulation and Creation of States and Operators; Functions acting on states and operators; Dynamics and Time-Evolution; Visualization; Quantum Information Processing; Utilitiy Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Bug Fixes. Version 3.0.0 (July 17, 2014):; New Features; Improvements. Version 2.2.0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug ",MatchSource.WIKI,docs/3.0.1/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/index.html
https://qutip.org/docs/3.0.1/installation.html:3815,Availability,avail,available,3815," class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:3834,Availability,down,download,3834," class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:3900,Availability,down,download,3900,"; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:3945,Availability,avail,available,3945," LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases;",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:5029,Availability,avail,available,5029,"t stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optiona",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:7647,Availability,avail,available,7647,"rts¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc48. Running port select again should give:; Available versions for gcc:; mp-gcc48 (active); none. Installing QuTiP via Macports may take a long time as some or all of the QuTiP dependencies are build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:10556,Availability,avail,available,10556,"dit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of test",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:10790,Availability,avail,available,10790,"; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:11849,Availability,error,errors,11849,"t against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. ('QuTiP Version: ', '3.0.1'); ('Numpy Version: ', '1.8.0'); ('Scipy Version: ', '0.13.3'); ('Cython Version: ', '0.20.1post0'); ('Matplotlib Version: ', '1.3.1'); ('Fortran mcsolver: ', 'True'); ('scikits.umfpack: ', 'False'); ('Python Version: ', '2.7.6'); ('Platform Info: ', 'Linux', '(x86_64)'); (). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last u",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:225,Deployability,install,installation,225,". Installation — QuTiP 3.0 Documentation. QuTiP; 3.0.1. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.6+); Installation on Windows; Optional Installation Options; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guid",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:1534,Deployability,install,installation,1534,"Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.13+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; C",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:1649,Deployability,install,installation,1649,"Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.13+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; C",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:2728,Deployability,install,installing,2728," via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.13+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternati",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:3261,Deployability,install,install,3261,"er versions. Scipy; 0.13+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:3467,Deployability,install,installation,3467,"ians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardles",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:3510,Deployability,install,install,3510,"ians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardles",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:3576,Deployability,install,install,3576,"ompiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python se",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:3605,Deployability,install,installing,3605,"an-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:3719,Deployability,install,installation,3719,"d for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo f",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:3793,Deployability,release,releases,3793," class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:4061,Deployability,release,release,4061,"s an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this m",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:4345,Deployability,install,installation,4345,"he Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:4523,Deployability,install,install,4523,"Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:4585,Deployability,install,install,4585,"ip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython py",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:4678,Deployability,install,install,4678,"ore detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:4823,Deployability,install,install,4823,"ailable from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:4936,Deployability,release,releases,4936,"est source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install pyt",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:4959,Deployability,update,update,4959,"est source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install pyt",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:4980,Deployability,install,install,4980,"est source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install pyt",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:5051,Deployability,install,installed,5051,"t stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optiona",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:5082,Deployability,install,install,5082,"t stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optiona",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:5158,Deployability,install,installed,5158,"nt version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # o",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:5218,Deployability,release,released,5218,"nt version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # o",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:5237,Deployability,upgrade,upgraded,5237,"nt version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # o",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:5377,Deployability,install,install,5377,"ies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:5432,Deployability,install,install,5432,"ies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:5468,Deployability,install,installation,5468,"thon setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Dow",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:5505,Deployability,install,install,5505,"thon setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Dow",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:5560,Deployability,install,install,5560,"thon setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Dow",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:5630,Deployability,install,install,5630,"thon setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Dow",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:5688,Deployability,install,install,5688,"sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacP",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:5791,Deployability,install,install,5791,"er) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:5842,Deployability,install,install,5842,"er) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:5915,Deployability,install,install,5915,"er) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:5987,Deployability,install,installation,5987,"hon 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo po",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:6093,Deployability,install,installed,6093,"uTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select p",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:6124,Deployability,install,install,6124,"uTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select p",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:6180,Deployability,install,install,6180,"uTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select p",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:6239,Deployability,install,install,6239,"uTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select p",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:6316,Deployability,install,install,6316,"uTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select p",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:6445,Deployability,install,install,6445,"a. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:6517,Deployability,install,installation,6517,"tall python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; mp-gcc48; none (active). W",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:6583,Deployability,install,install,6583,"tall python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; mp-gcc48; none (active). W",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:6679,Deployability,install,install,6679,"n-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:6730,Deployability,install,installation,6730,"-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc48. Running port select again should give:; Available versions for gcc:; mp-gcc48 (",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:6783,Deployability,install,installed,6783,"-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc48. Running port select again should give:; Available versions for gcc:; mp-gcc48 (",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:6808,Deployability,install,install,6808,"-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc48. Running port select again should give:; Available versions for gcc:; mp-gcc48 (",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:6838,Deployability,install,install,6838,"-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc48. Running port select again should give:; Available versions for gcc:; mp-gcc48 (",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:6880,Deployability,install,install,6880,"-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc48. Running port select again should give:; Available versions for gcc:; mp-gcc48 (",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:6911,Deployability,install,install,6911,"-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc48. Running port select again should give:; Available versions for gcc:; mp-gcc48 (",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:7010,Deployability,install,install,7010,"f python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc48. Running port select again should give:; Available versions for gcc:; mp-gcc48 (active); none. Installing QuTiP via Macports may take a long time as some or all of the QuTiP dependencies are build from source code. The advantage is that all dependencies are resolved automaticall",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:7072,Deployability,install,install,7072,"f python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc48. Running port select again should give:; Available versions for gcc:; mp-gcc48 (active); none. Installing QuTiP via Macports may take a long time as some or all of the QuTiP dependencies are build from source code. The advantage is that all dependencies are resolved automaticall",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:7265,Deployability,install,install,7265,"o solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc48. Running port select again should give:; Available versions for gcc:; mp-gcc48 (active); none. Installing QuTiP via Macports may take a long time as some or all of the QuTiP dependencies are build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anacon",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:7309,Deployability,install,install,7309,"o solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc48. Running port select again should give:; Available versions for gcc:; mp-gcc48 (active); none. Installing QuTiP via Macports may take a long time as some or all of the QuTiP dependencies are build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anacon",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:7477,Deployability,install,installed,7477," Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc48. Running port select again should give:; Available versions for gcc:; mp-gcc48 (active); none. Installing QuTiP via Macports may take a long time as some or all of the QuTiP dependencies are build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:8134,Deployability,install,install,8134,"l OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc48. Running port select again should give:; Available versions for gcc:; mp-gcc48 (active); none. Installing QuTiP via Macports may take a long time as some or all of the QuTiP dependencies are build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [bui",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:8221,Deployability,install,installing,8221," ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc48. Running port select again should give:; Available versions for gcc:; mp-gcc48 (active); none. Installing QuTiP via Macports may take a long time as some or all of the QuTiP dependencies are build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file s",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:8368,Deployability,install,install,8368,"ant to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc48. Running port select again should give:; Available versions for gcc:; mp-gcc48 (active); none. Installing QuTiP via Macports may take a long time as some or all of the QuTiP dependencies are build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different loc",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:8636,Deployability,install,installation,8636,"mpiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc48. Running port select again should give:; Available versions for gcc:; mp-gcc48 (active); none. Installing QuTiP via Macports may take a long time as some or all of the QuTiP dependencies are build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\Min",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:8871,Deployability,install,installing,8871,"all of the QuTiP dependencies are build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:8950,Deployability,install,installation,8950,"all of the QuTiP dependencies are build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:9289,Deployability,install,installed,9289,"stribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack li",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:9406,Deployability,install,installed,9406,"ws¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routi",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:9819,Deployability,install,installed,9819," also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes t",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:9899,Deployability,install,installed,9899," also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes t",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:10525,Deployability,update,updated,10525,"o work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was s",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:10620,Deployability,install,installed,10620,"either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing Q",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:11509,Deployability,install,installation,11509," used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D.",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:11618,Deployability,install,installing,11618,"k library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. ('QuTiP Version: ', '3.0.1'); ('Numpy Version: ', '1.8.0'); ('Scipy Version: ', '0.13.3'); ('Cython Version: ', '0.20.1post0'); ('Matplotlib Version: ', '1.3.1'); ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:11646,Deployability,install,installation,11646,"k library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. ('QuTiP Version: ', '3.0.1'); ('Numpy Version: ', '1.8.0'); ('Scipy Version: ', '0.13.3'); ('Cython Version: ', '0.20.1post0'); ('Matplotlib Version: ', '1.3.1'); ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:11891,Deployability,install,installed,11891,"t against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. ('QuTiP Version: ', '3.0.1'); ('Numpy Version: ', '1.8.0'); ('Scipy Version: ', '0.13.3'); ('Cython Version: ', '0.20.1post0'); ('Matplotlib Version: ', '1.3.1'); ('Fortran mcsolver: ', 'True'); ('scikits.umfpack: ', 'False'); ('Python Version: ', '2.7.6'); ('Platform Info: ', 'Linux', '(x86_64)'); (). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last u",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:11971,Deployability,install,installed,11971,"tage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. ('QuTiP Version: ', '3.0.1'); ('Numpy Version: ', '1.8.0'); ('Scipy Version: ', '0.13.3'); ('Cython Version: ', '0.20.1post0'); ('Matplotlib Version: ', '1.3.1'); ('Fortran mcsolver: ', 'True'); ('scikits.umfpack: ', 'False'); ('Python Version: ', '2.7.6'); ('Platform Info: ', 'Linux', '(x86_64)'); (). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:12302,Deployability,install,installed,12302,"tage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. ('QuTiP Version: ', '3.0.1'); ('Numpy Version: ', '1.8.0'); ('Scipy Version: ', '0.13.3'); ('Cython Version: ', '0.20.1post0'); ('Matplotlib Version: ', '1.3.1'); ('Fortran mcsolver: ', 'True'); ('scikits.umfpack: ', 'False'); ('Python Version: ', '2.7.6'); ('Platform Info: ', 'Linux', '(x86_64)'); (). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:12884,Deployability,update,updated,12884,"tage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. ('QuTiP Version: ', '3.0.1'); ('Numpy Version: ', '1.8.0'); ('Scipy Version: ', '0.13.3'); ('Cython Version: ', '0.20.1post0'); ('Matplotlib Version: ', '1.3.1'); ('Fortran mcsolver: ', 'True'); ('scikits.umfpack: ', 'False'); ('Python Version: ', '2.7.6'); ('Platform Info: ', 'Linux', '(x86_64)'); (). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:1665,Integrability,depend,dependencies,1665,"Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.13+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; C",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:2050,Integrability,depend,depends,2050,"on 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.13+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:2486,Integrability,depend,dependent,2486,"tallation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.13+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:3709,Integrability,depend,dependent,3709,"d for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo f",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:4313,Integrability,depend,dependencies,4313,"st have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management sy",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:4367,Integrability,depend,dependencies,4367,"he Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:5141,Integrability,depend,dependencies,5141,"nt version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # o",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:5322,Integrability,depend,dependencies,5322,"ies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:5484,Integrability,depend,dependencies,5484,"thon setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Dow",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:5526,Integrability,depend,dependencies,5526,"thon setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Dow",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:6073,Integrability,depend,dependencies,6073,"uTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.6+)¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’. Setup Using Macports¶; On the Mac OS, we recommended that you install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via; sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select p",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:7931,Integrability,depend,dependencies,7931,"install py34-ipython +notebook+parallel. Optional, but highly recommended ports include; sudo port install vtk5 +python27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc48. Running port select again should give:; Available versions for gcc:; mp-gcc48 (active); none. Installing QuTiP via Macports may take a long time as some or all of the QuTiP dependencies are build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly selec",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:7998,Integrability,depend,dependencies,7998,"hon27 #used for the Bloch3d class; sudo port install py27-mayavi #used for the Bloch3d class. Now, we want to tell OSX which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34. To install QuTiP from Macports, run; sudo port install py-qutip. Finally, we want to set the macports compiler to the vanilla GCC version. From the command line type:; port select gcc. which will bring up a list of installed compilers, such as:; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type:; sudo port select gcc mp-gcc48. Running port select again should give:; Available versions for gcc:; mp-gcc48 (active); none. Installing QuTiP via Macports may take a long time as some or all of the QuTiP dependencies are build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following cont",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:9939,Integrability,depend,dependencies,9939," also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes t",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:10055,Integrability,rout,routines,10055,"te the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these p",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:10410,Integrability,rout,routines,10410,"ng the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Ins",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:12003,Integrability,depend,dependencies,12003,"tage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. ('QuTiP Version: ', '3.0.1'); ('Numpy Version: ', '1.8.0'); ('Scipy Version: ', '0.13.3'); ('Cython Version: ', '0.20.1post0'); ('Matplotlib Version: ', '1.3.1'); ('Fortran mcsolver: ', 'True'); ('scikits.umfpack: ', 'False'); ('Python Version: ', '2.7.6'); ('Platform Info: ', 'Linux', '(x86_64)'); (). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:12103,Integrability,message,message,12103,"tage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. ('QuTiP Version: ', '3.0.1'); ('Numpy Version: ', '1.8.0'); ('Scipy Version: ', '0.13.3'); ('Cython Version: ', '0.20.1post0'); ('Matplotlib Version: ', '1.3.1'); ('Fortran mcsolver: ', 'True'); ('scikits.umfpack: ', 'False'); ('Python Version: ', '2.7.6'); ('Platform Info: ', 'Linux', '(x86_64)'); (). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:12289,Integrability,depend,dependencies,12289,"tage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. ('QuTiP Version: ', '3.0.1'); ('Numpy Version: ', '1.8.0'); ('Scipy Version: ', '0.13.3'); ('Cython Version: ', '0.20.1post0'); ('Matplotlib Version: ', '1.3.1'); ('Fortran mcsolver: ', 'True'); ('scikits.umfpack: ', 'False'); ('Python Version: ', '2.7.6'); ('Platform Info: ', 'Linux', '(x86_64)'); (). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:9575,Modifiability,variab,variable,9575,"eshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/non",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:3185,Performance,perform,performance,3185,"es are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.13+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:10447,Performance,perform,performance,10447,"ng the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Ins",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:10756,Performance,optimiz,optimized,10756,"; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:10950,Performance,perform,performance,10950," all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:10984,Performance,optimiz,optimized,10984," all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:11024,Performance,multi-thread,multi-threaded,11024," solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to th",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:11285,Performance,load,loading,11285,"udes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information abou",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:2295,Testability,test,tested,2295,"27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.6+); Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.13+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortra",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:2999,Testability,test,tests,2999,"s Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.13+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.c",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:3406,Testability,test,tested,3406,"does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has a substantial performance benefit when compared with the Python-based solver. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are only tested on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; sudo pip install qutip. However, when installing QuTiP this way the Fortran-based Monte Carlo solver is not included.; More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platfo",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:8722,Testability,test,tested,8722,"o this type:; sudo port select gcc mp-gcc48. Running port select again should give:; Available versions for gcc:; mp-gcc48 (active); none. Installing QuTiP via Macports may take a long time as some or all of the QuTiP dependencies are build from source code. The advantage is that all dependencies are resolved automatically, and the result should be a consistent build. Setup via SciPy Superpack¶; A second option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of the QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-package",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:11478,Testability,test,test,11478," used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D.",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:11558,Testability,test,tests,11558,"//github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. ('QuTiP Version: ', '3.0.1'); ('Numpy Version: ', '1.8.0'); ('Scipy Ve",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:11595,Testability,test,testing,11595,"//github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. ('QuTiP Version: ', '3.0.1'); ('Numpy Version: ', '1.8.0'); ('Scipy Ve",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:11723,Testability,test,testing,11723,"antage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. ('QuTiP Version: ', '3.0.1'); ('Numpy Version: ', '1.8.0'); ('Scipy Version: ', '0.13.3'); ('Cython Version: ', '0.20.1post0'); ('Matplotlib Version: ', '1.3.1'); ('Fortran mcsolver: ', 'True'); ('scikits.umfpack: ', 'False'); ('P",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:11773,Testability,test,tests,11773,"ble for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. ('QuTiP Version: ', '3.0.1'); ('Numpy Version: ', '1.8.0'); ('Scipy Version: ', '0.13.3'); ('Cython Version: ', '0.20.1post0'); ('Matplotlib Version: ', '1.3.1'); ('Fortran mcsolver: ', 'True'); ('scikits.umfpack: ', 'False'); ('Python Version: ', '2.7.6'); ('Platform Info: ', 'Linux', '(x86",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/installation.html:12026,Testability,test,tests,12026,"tage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that your have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. ('QuTiP Version: ', '3.0.1'); ('Numpy Version: ', '1.8.0'); ('Scipy Version: ', '0.13.3'); ('Cython Version: ', '0.20.1post0'); ('Matplotlib Version: ', '1.3.1'); ('Fortran mcsolver: ', 'True'); ('scikits.umfpack: ', 'False'); ('Python Version: ', '2.7.6'); ('Platform Info: ', 'Linux', '(x86_64)'); (). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/installation.html
https://qutip.org/docs/3.0.1/py-modindex.html:232,Deployability,install,installation,232,". Python Module Index — QuTiP 3.0 Documentation. QuTiP; 3.0.1. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.6+); Installation on Windows; Optional Installation Options; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Python Module Index. q.  . q. qutip.    ; qutip.bloch_redfield.    ; qutip.continuous_variables.    ; qutip.correlation.    ; qutip.entropy.    ; qutip.essolve.    ; qutip.expect.    ; qutip.fileio.    ; qutip.floquet.    ; qutip.fortran.mcsolve_f90.    ; qutip.graph.    ; qutip.ipynbtools.    ; qutip.mcsolve.    ; qutip.mesolve.    ; qutip.metrics.    ; qutip.operators.    ; qutip.partial_transpose.    ; qutip.propagator.    ; qutip.qip.algorithms.qft.    ; qutip.qip.gates.    ; qutip.qip.qubits.    ; qutip.ran",MatchSource.WIKI,docs/3.0.1/py-modindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/py-modindex.html
https://qutip.org/docs/3.0.1/py-modindex.html:2365,Deployability,update,updated,2365,"g the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Python Module Index. q.  . q. qutip.    ; qutip.bloch_redfield.    ; qutip.continuous_variables.    ; qutip.correlation.    ; qutip.entropy.    ; qutip.essolve.    ; qutip.expect.    ; qutip.fileio.    ; qutip.floquet.    ; qutip.fortran.mcsolve_f90.    ; qutip.graph.    ; qutip.ipynbtools.    ; qutip.mcsolve.    ; qutip.mesolve.    ; qutip.metrics.    ; qutip.operators.    ; qutip.partial_transpose.    ; qutip.propagator.    ; qutip.qip.algorithms.qft.    ; qutip.qip.gates.    ; qutip.qip.qubits.    ; qutip.random_objects.    ; qutip.sesolve.    ; qutip.states.    ; qutip.steadystate.    ; qutip.stochastic.    ; qutip.superop_reps.    ; qutip.superoperator.    ; qutip.tensor.    ; qutip.three_level_atom.    ; qutip.tomography.    ; qutip.utilities.    ; qutip.visualization.    ; qutip.wigner. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/py-modindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/py-modindex.html
https://qutip.org/docs/3.0.1/search.html:219,Deployability,install,installation,219,". Search — QuTiP 3.0 Documentation. QuTiP; 3.0.1. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.6+); Installation on Windows; Optional Installation Options; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Search. Please activate JavaScript to enable the search; functionality.; . From here you can search these documents. Enter your search; words into the box below and click ""search"". Note that the search; function will automatically search for all of the words. Pages; containing fewer words won't appear in the result list.; . Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/search.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/search.html
https://qutip.org/docs/3.0.1/search.html:1873,Deployability,update,updated,1873,". Search — QuTiP 3.0 Documentation. QuTiP; 3.0.1. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.6+); Installation on Windows; Optional Installation Options; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Running Problems in Parallel; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Search. Please activate JavaScript to enable the search; functionality.; . From here you can search these documents. Enter your search; words into the box below and click ""search"". Note that the search; function will automatically search for all of the words. Pages; containing fewer words won't appear in the result list.; . Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Aug 05, 2014.; Created using Sphinx 1.2.2. ",MatchSource.WIKI,docs/3.0.1/search.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.0.1/search.html
https://qutip.org/docs/3.1.0/biblio.html:239,Deployability,install,installation,239,"﻿. Bibliography — QuTiP 3.1.0 Documentation. QuTiP; 3.1.0. qutip.org. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.8+); Installation on Windows; Optional Installation Options; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Parallel computation; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.1.0 (January 1, 2015):; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Bibliography. « Developers. Bibliography¶. [Hav03]Havel, T. Robust procedures for converting among Lindblad, Kraus and matrix representations of quantum dynamical semigroups. Journal of Mathematical Physics 44 2, 534 (2003). doi:10.1063/1.1518555. [Wat13]Watrous, J. Theory of Quantum Information, lecture notes. [Moh08]; Mohseni, A. T. Rezakhani, D. A. Lidar, Quantum-process tomography: Resource analysis of different strategies, Phys. Rev. A 77, 032322 (2008). doi:10.1103/PhysRevA",MatchSource.WIKI,docs/3.1.0/biblio.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/biblio.html
https://qutip.org/docs/3.1.0/biblio.html:2777,Deployability,update,updated,2777,"on of quantum states and processes; Parallel computation; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.1.0 (January 1, 2015):; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Bibliography. « Developers. Bibliography¶. [Hav03]Havel, T. Robust procedures for converting among Lindblad, Kraus and matrix representations of quantum dynamical semigroups. Journal of Mathematical Physics 44 2, 534 (2003). doi:10.1063/1.1518555. [Wat13]Watrous, J. Theory of Quantum Information, lecture notes. [Moh08]; Mohseni, A. T. Rezakhani, D. A. Lidar, Quantum-process tomography: Resource analysis of different strategies, Phys. Rev. A 77, 032322 (2008). doi:10.1103/PhysRevA.77.032322. [Gri98]; Grifoni, P. Hänggi, Driven quantum tunneling, Physics Reports 304, 299 (1998). doi:10.1016/S0370-1573(98)00022-2. [Cre03]. Creffield, Location of crossings in the Floquet spectrum of a driven two-level system, Phys. Rev. B 67, 165301 (2003). doi:10.1103/PhysRevB.67.165301. [Gar03]Gardineer and Zoller, Quantum Noise (Springer, 2004). [Bre02]H.-P. Breuer and F. Petruccione, The Theory of Open Quantum Systems (Oxford, 2002). [Coh92]; Cohen-Tannoudji, J. Dupont-Roc, G. Grynberg, Atom-Photon Interactions: Basic Processes and Applications, (Wiley, 1992). [WBC11]C. Wood, J. Biamonte, D. G. Cory, Tensor networks and graphical calculus for; open quantum systems. arXiv:1111.6950. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/biblio.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/biblio.html
https://qutip.org/docs/3.1.0/changelog.html:2701,Availability,avail,available,2701,"New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). « Functions. Developers ». Change Log¶. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True);",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:3209,Availability,error,errors,3209,"rsion 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator r",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:4493,Availability,failure,failure,4493,"ring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories when using only 1 CPU.; Fix bug in parsing of time-dependent Hamiltonian/collapse operator arguments; that occurred when the args argument is not a dictionary.; Fix bug in internal _version2int function that cause a failure when parsing; the version number of the Cython package. Version 3.0.0 (July 17, 2014):¶. New Features¶. New module qutip.stochastic with stochastic master equation and stochastic; Schrödinger equation solvers.; Expanded steady state solvers. The function steady has been deprecated in; favor of steadystate. The steadystate solver no longer use umfpack by; default. New pre-processing methods for reordering and balancing the linear; equation system used in direct solution of the steady state.; New module qutip.qip with utilities for quantum information processing,; including pre-defined quantum gates along with functions for expanding; arbitrary 1, 2, and 3 qubit gates to N qubit registers, circuit; representations, library of quantum algorithms, and basic physical models for; some common QIP architectures.; New module qutip.distributions with unified API for working with; distribution functions.; New format for defining time-dependent Hamiltonians and collapse operators,; using a pr",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:7244,Availability,avail,available,7244,"spin_Jy, spin_Jz and; spin_state, spin_coherent.; The expect function now supports a list of operators, in addition to the; previously supported list of states.; Simplified creation of qubit states using ket function.; The module qutip.cyQ has been renamed to qutip.cy and the sparse; matrix-vector functions spmv and spmv1d has been combined into one; function spmv. New functions for operating directly on the underlaying; sparse CSR data have been added (e.g., spmv_csr). Performance; improvements. New and improved Cython functions for calculating expectation; values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squ",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:8203,Availability,avail,available,8203,"and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity f",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:15304,Availability,toler,tolerance,15304," factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:237,Deployability,install,installation,237,"﻿. Change Log — QuTiP 3.1.0 Documentation. QuTiP; 3.1.0. qutip.org. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.8+); Installation on Windows; Optional Installation Options; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Parallel computation; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.1.0 (January 1, 2015):; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Change Log; Version 3.1.0 (January 1, 2015):; New Features; Bug Fixes. Version 3.0.1 (Aug 5, 2014):; Bug Fixes. Version 3.0.0 (July 17, 2014):; New Features; Improvements. Version 2.2.0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fix",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:3197,Deployability,integrat,integration,3197,"rsion 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator r",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:8766,Deployability,continuous,continuous,8766,"back functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to ",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:8777,Deployability,integrat,integration,8777,"back functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to ",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:10064,Deployability,install,installation,10064," for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gates.; Functions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag()",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:11405,Deployability,release,release,11405,"name in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The qu",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:11712,Deployability,install,installed,11712,".; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum obj",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:13261,Deployability,install,installation,13261,"and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying the installation.; Demos window now lets you copy and paste code from each example. Version 1.1.4 (May 28, 2012):¶. Bug Fixes:¶. Fixed bug pointed out by Brendan Abolins.; Qobj.tr() returns zero-dim ndarray instead of float or complex.; Updated factorial import for scipy version 0.10+. Version 1.1.3 (November 21, 2011):¶. New Functions:¶. Allow custom naming of Bloch sphere. Bug Fixes:¶. Fixed text alignment issues in AboutBox.; Added fix for SciPy V>0.10 where factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-R",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:15583,Deployability,release,release,15583," factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:15668,Deployability,update,updated,15668," factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:3637,Energy Efficiency,power,power,3637,"ntract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories when using only 1 CPU.; Fix bug in parsing of time-dependent Hamiltonian/collapse operator arguments; that occurred when the args argument is not a dictionary.; Fix bug in internal _version2int function that cause a failure when parsing; the version number of the Cython package. Version 3.0.0 (July 17, 2014):¶. New Features¶. New module qutip.stochasti",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:6998,Energy Efficiency,power,power,6998,"w; prefixed with plot_ (e.g., plot_fock_distribution). The; plot_wigner and plot_wigner_fock_distribution now supports 3D views; in addition to contour views.; New API and new functions for working with spin operators and states,; including for example spin_Jx, spin_Jy, spin_Jz and; spin_state, spin_coherent.; The expect function now supports a list of operators, in addition to the; previously supported list of states.; Simplified creation of qubit states using ket function.; The module qutip.cyQ has been renamed to qutip.cy and the sparse; matrix-vector functions spmv and spmv1d has been combined into one; function spmv. New functions for operating directly on the underlaying; sparse CSR data have been added (e.g., spmv_csr). Performance; improvements. New and improved Cython functions for calculating expectation; values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which n",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:12284,Energy Efficiency,efficient,efficient,12284," of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying ",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:2942,Integrability,depend,dependent,2942,"n 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). « Functions. Developers ». Change Log¶. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in co",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:3197,Integrability,integrat,integration,3197,"rsion 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator r",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:3306,Integrability,depend,dependent,3306,"quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories ",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:3542,Integrability,depend,dependent,3542,"operator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories when using only 1 CPU.; Fix bug in parsing of time-dependent Hamiltonian/collapse operator arguments; that occurred when the args argument is not a dictionary.; Fix bug in internal _version2int function that cause a failure when parsing; the version number of the Cython packa",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:3903,Integrability,depend,dependent,3903,"Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories when using only 1 CPU.; Fix bug in parsing of time-dependent Hamiltonian/collapse operator arguments; that occurred when the args argument is not a dictionary.; Fix bug in internal _version2int function that cause a failure when parsing; the version number of the Cython package. Version 3.0.0 (July 17, 2014):¶. New Features¶. New module qutip.stochastic with stochastic master equation and stochastic; Schrödinger equation solvers.; Expanded steady state solvers. The function steady has been deprecated in; favor of steadystate. The steadystate solver no longer use umfpack by; default. New pre-processing methods for reordering and balancing the linear; eq",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:4328,Integrability,depend,dependent,4328,"n now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories when using only 1 CPU.; Fix bug in parsing of time-dependent Hamiltonian/collapse operator arguments; that occurred when the args argument is not a dictionary.; Fix bug in internal _version2int function that cause a failure when parsing; the version number of the Cython package. Version 3.0.0 (July 17, 2014):¶. New Features¶. New module qutip.stochastic with stochastic master equation and stochastic; Schrödinger equation solvers.; Expanded steady state solvers. The function steady has been deprecated in; favor of steadystate. The steadystate solver no longer use umfpack by; default. New pre-processing methods for reordering and balancing the linear; equation system used in direct solution of the steady state.; New module qutip.qip with utilities for quantum information processing,; including pre-defined quantum gates along with functions for expanding; arbitrary 1, 2, and 3 qubit gates to N qubit registers, circuit; representations, library of quantum algorithms, and basic physical models for; some common QIP architectures.; New module qutip.distributions with unified API fo",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:5438,Integrability,depend,dependent,5438,"e when parsing; the version number of the Cython package. Version 3.0.0 (July 17, 2014):¶. New Features¶. New module qutip.stochastic with stochastic master equation and stochastic; Schrödinger equation solvers.; Expanded steady state solvers. The function steady has been deprecated in; favor of steadystate. The steadystate solver no longer use umfpack by; default. New pre-processing methods for reordering and balancing the linear; equation system used in direct solution of the steady state.; New module qutip.qip with utilities for quantum information processing,; including pre-defined quantum gates along with functions for expanding; arbitrary 1, 2, and 3 qubit gates to N qubit registers, circuit; representations, library of quantum algorithms, and basic physical models for; some common QIP architectures.; New module qutip.distributions with unified API for working with; distribution functions.; New format for defining time-dependent Hamiltonians and collapse operators,; using a pre-calculated numpy array that specifies the values of the; Qobj-coefficients for each time step.; New functions for working with different superoperator representations,; including Kraus and Chi representation.; New functions for visualizing quantum states using Qubism and Schimdt plots:; plot_qubism and plot_schmidt.; Dynamics solver now support taking argument e_ops (expectation value; operators) in dictionary form.; Public plotting functions from the qutip.visualization module are now; prefixed with plot_ (e.g., plot_fock_distribution). The; plot_wigner and plot_wigner_fock_distribution now supports 3D views; in addition to contour views.; New API and new functions for working with spin operators and states,; including for example spin_Jx, spin_Jy, spin_Jz and; spin_state, spin_coherent.; The expect function now supports a list of operators, in addition to the; previously supported list of states.; Simplified creation of qubit states using ket function.; The module qutip.cyQ has been re",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:7733,Integrability,depend,dependent,7733," values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:7796,Integrability,depend,depend,7796," values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:8777,Integrability,integrat,integration,8777,"back functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to ",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:9696,Integrability,depend,dependent,9696," scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gates.; Functions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:10895,Integrability,depend,dependence,10895,"ed on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gates.; Functions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and par",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:11323,Integrability,rout,routines,11323,"s as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum obje",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:11588,Integrability,depend,dependent,11588,"urns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:11664,Integrability,depend,dependent,11664,".; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum obj",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:11779,Integrability,depend,dependent,11779,"ow correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can h",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:12103,Integrability,depend,dependent,12103,"rmitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single functi",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:2756,Modifiability,enhance,enhanced,2756,":; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). « Functions. Developers ». Change Log¶. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:9029,Modifiability,variab,variable,9029,"ata, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gate",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:3438,Performance,perform,performance,3438,"r counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories when using only 1 CPU.; Fix bug in parsing of time-dependent Hamiltonian/collapse operator arguments; that occurred when the args argument is not a dictionary.; Fix bug in internal _version",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:6889,Performance,concurren,concurrence,6889,".; Public plotting functions from the qutip.visualization module are now; prefixed with plot_ (e.g., plot_fock_distribution). The; plot_wigner and plot_wigner_fock_distribution now supports 3D views; in addition to contour views.; New API and new functions for working with spin operators and states,; including for example spin_Jx, spin_Jy, spin_Jz and; spin_state, spin_coherent.; The expect function now supports a list of operators, in addition to the; previously supported list of states.; Simplified creation of qubit states using ket function.; The module qutip.cyQ has been renamed to qutip.cy and the sparse; matrix-vector functions spmv and spmv1d has been combined into one; function spmv. New functions for operating directly on the underlaying; sparse CSR data have been added (e.g., spmv_csr). Performance; improvements. New and improved Cython functions for calculating expectation; values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Imp",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:7946,Performance,optimiz,optimized,7946,"two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose fu",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:8612,Performance,perform,performance,8612,"; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualiza",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:9520,Performance,perform,performance,9520,"stances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gates.; Functions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is ",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:11245,Performance,perform,performance,11245,"s as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum obje",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:12734,Performance,optimiz,optimized,12734,"ed to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying the installation.; Demos window now lets you copy and paste code from each example. Version 1.1.4 (May 28, 2012):¶. Bug Fixes:¶. Fixed bug pointed out by Brendan Abolins.; Qobj.tr() returns zero-dim ndarray instead of float or complex.; Updated factorial import for scipy version 0.10+. Version 1.1.3 (November 21, 2011):¶. New Functions:¶. Allow custom naming of Bloch sphere. Bug Fixes:¶. Fixed text alignment issues in AboutBox.; Added fix for SciPy V>0.10 where factorial was moved to scipy.",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:12960,Performance,concurren,concurrence,12960,"t; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying the installation.; Demos window now lets you copy and paste code from each example. Version 1.1.4 (May 28, 2012):¶. Bug Fixes:¶. Fixed bug pointed out by Brendan Abolins.; Qobj.tr() returns zero-dim ndarray instead of float or complex.; Updated factorial import for scipy version 0.10+. Version 1.1.3 (November 21, 2011):¶. New Functions:¶. Allow custom naming of Bloch sphere. Bug Fixes:¶. Fixed text alignment issues in AboutBox.; Added fix for SciPy V>0.10 where factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts a",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:14781,Performance,concurren,concurrence,14781," factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:14973,Performance,load,loading,14973," factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:8039,Safety,avoid,avoiding,8039,"two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose fu",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:2645,Testability,log,logging,2645,"ew Features; Improvements. Version 2.2.0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). « Functions. Developers ». Change Log¶. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady sta",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:2681,Testability,log,logging,2681,". Version 2.2.0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). « Functions. Developers ». Change Log¶. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now su",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:8789,Testability,test,tests,8789,"back functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to ",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:9139,Testability,log,logarithmic,9139,"ata, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gate",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:13237,Testability,test,tests,13237,"and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying the installation.; Demos window now lets you copy and paste code from each example. Version 1.1.4 (May 28, 2012):¶. Bug Fixes:¶. Fixed bug pointed out by Brendan Abolins.; Qobj.tr() returns zero-dim ndarray instead of float or complex.; Updated factorial import for scipy version 0.10+. Version 1.1.3 (November 21, 2011):¶. New Functions:¶. Allow custom naming of Bloch sphere. Bug Fixes:¶. Fixed text alignment issues in AboutBox.; Added fix for SciPy V>0.10 where factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-R",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:2898,Usability,progress bar,progress bars,2898," (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). « Functions. Developers ». Change Log¶. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-depende",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:8557,Usability,simpl,simplified,8557," for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner ",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:11099,Usability,progress bar,progress bar,11099,"tions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent argume",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/changelog.html:11912,Usability,simpl,simplifying,11912,"ime-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method in",MatchSource.WIKI,docs/3.1.0/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/changelog.html
https://qutip.org/docs/3.1.0/contributors.html:237,Deployability,install,installation,237,"﻿. Developers — QuTiP 3.1.0 Documentation. QuTiP; 3.1.0. qutip.org. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.8+); Installation on Windows; Optional Installation Options; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Parallel computation; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.1.0 (January 1, 2015):; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Developers; Lead Developers; Contributors. « Change Log. Bibliography ». Developers¶. Lead Developers¶; Robert Johansson (RIKEN); Paul Nation (Korea University). Contributors¶. Note; Anyone is welcome to contribute to QuTiP. If you are interested in helping, please let us know!. alexbrc (github user) - Code contributor; Alexander Pitchford (Aberystwyth University) - Code contributor; Amit Jamadagni - Bug fix; Anders Lund (Technical University of Denmark) - Bug hunting for the Monte",MatchSource.WIKI,docs/3.1.0/contributors.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/contributors.html
https://qutip.org/docs/3.1.0/contributors.html:3811,Deployability,update,updated,3811,"wyth University) - Code contributor; Amit Jamadagni - Bug fix; Anders Lund (Technical University of Denmark) - Bug hunting for the Monte-Carlo solver; Andre Carvalho - Bug hunter; André Xuereb (University of Hannover) - Bug hunter; Anubhav Vardhan (IIT, Kanpur) - Bug hunter, Code contributor, Documentation; Arne Grimsmo (University of Auckland) - Bug hunter, Code contributor; Ben Criger (Waterloo IQC) - Code contributor; Bredan Abolins (Berkeley) - Bug hunter; Chris Granade - Code contributor; Claudia Degrandi (Yale University) - Documentation; Dawid Crivelli - Bug hunter; Denis Vasilyev (St. Petersburg State University) - Code contributor; Dong Zhou (Yale University) - Bug hunter; Florian Ong (Institute for Quantum Computation) - Bug hunter; Frank Schima - Macports packaging; Henri Nielsen (Technical University of Denmark) - Bug hunter; Hwajung Kang (Systems Biology Institute, Tokyo) - Suggestions for improving Bloch class; James Clemens (Miami University - Ohio) - Bug hunter; Johannes Feist - Code contributor; Jonas Hörsch - Code contributor; Jonas Neergaard-Nielsen (Technical University of Denmark) - Code contributor, Windows support; JP Hadden (University of Bristol) - Code contributor, improved Bloch sphere visualization; Kevin Fischer (Stanford) - Code contributor; Laurence Stant - Documentation; Markus Baden (Centre for Quantum Technologies, Singapore) - Code contributor, Documentation; Myung-Joong Hwang (Pohang University of Science and Technology) - Bug hunter; Neill Lambert (RIKEN) - Code contributor, Windows support; Nikolas Tezak (Stanford) - Code contributor; Per Nielsen (Technical University of Denmark) - Bug hunter, Code contributor; Piotr Migdał (ICFO) - Code contributor; Reinier Heeres (Yale University) - Code contributor; Robert Jördens (NIST) - Linux packaging; Simon Whalen - Code contributor; W.M. Witzel - Bug hunter. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/contributors.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/contributors.html
https://qutip.org/docs/3.1.0/frontmatter.html:1823,Availability,avail,available,1823,"ization of quantum states and processes; Parallel computation; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.1.0 (January 1, 2015):; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. « QuTiP: Quantum T... Installation ». Frontmatter¶. About This Documentation¶; This document contains a user guide and automatically generated API documentation for QuTiP. A PDF version of this text is available at the documentation page.; For more information see the QuTiP project web page. Author:P.D. Nation. Address:Department of Physics, Korea University,; Seongbuk-gu Seoul, 136-713 South Korea. Author:J.R. Johansson. Address:iTHES Research Group, RIKEN,; Wako-shi Saitama, 351-0198 Japan. version:3.1.0. status:Released (January 1, 2015). copyright:This documentation is licensed under the Creative Commons Attribution 3.0 Unported License. Citing This Project¶; If you find this project useful, then please cite:. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP 2: A Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially ",MatchSource.WIKI,docs/3.1.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/frontmatter.html
https://qutip.org/docs/3.1.0/frontmatter.html:2678,Availability,down,download,2678,"s Documentation¶; This document contains a user guide and automatically generated API documentation for QuTiP. A PDF version of this text is available at the documentation page.; For more information see the QuTiP project web page. Author:P.D. Nation. Address:Department of Physics, Korea University,; Seongbuk-gu Seoul, 136-713 South Korea. Author:J.R. Johansson. Address:iTHES Research Group, RIKEN,; Wako-shi Saitama, 351-0198 Japan. version:3.1.0. status:Released (January 1, 2015). copyright:This documentation is licensed under the Creative Commons Attribution 3.0 Unported License. Citing This Project¶; If you find this project useful, then please cite:. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP 2: A Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system ",MatchSource.WIKI,docs/3.1.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/frontmatter.html
https://qutip.org/docs/3.1.0/frontmatter.html:4858,Availability,avail,available,4858,"stem dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optics, trapped ions, superconducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, excited by a limited number of quanta, that are amenable to classical simulation in a truncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox b",MatchSource.WIKI,docs/3.1.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/frontmatter.html
https://qutip.org/docs/3.1.0/frontmatter.html:238,Deployability,install,installation,238,"﻿. Frontmatter — QuTiP 3.1.0 Documentation. QuTiP; 3.1.0. qutip.org. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.8+); Installation on Windows; Optional Installation Options; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Parallel computation; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.1.0 (January 1, 2015):; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. « QuTiP: Quantum T... Installation ». Frontmatter¶. About This Documentation¶; This document contains a user guide and automatically generated API documentation for QuTiP. A PDF version of this text is available at the documentation page.; For more information see the QuTiP project web page. Author:P.D. Nation. Address:Department of Physics, Korea University,; Seongbuk-gu Seoul",MatchSource.WIKI,docs/3.1.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/frontmatter.html
https://qutip.org/docs/3.1.0/frontmatter.html:6040,Deployability,release,release,6040,"ntum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/frontmatter.html
https://qutip.org/docs/3.1.0/frontmatter.html:6533,Deployability,update,updated,6533,"ntum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/frontmatter.html
https://qutip.org/docs/3.1.0/frontmatter.html:4209,Energy Efficiency,efficient,efficiently,4209," quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system and its environment is an essential step in understanding the dynamics of quantum systems.; In general, for all but the most basic of Hamiltonians, an analytical description of the system dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optics, trapped ions, superconducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, excited by a limited number of quanta, that are amenable to classical simulation in a truncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting l",MatchSource.WIKI,docs/3.1.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/frontmatter.html
https://qutip.org/docs/3.1.0/frontmatter.html:5476,Integrability,depend,dependence,5476,"mponents, excited by a limited number of quanta, that are amenable to classical simulation in a truncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Ba",MatchSource.WIKI,docs/3.1.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/frontmatter.html
https://qutip.org/docs/3.1.0/frontmatter.html:5524,Integrability,depend,dependent,5524,"t space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created usi",MatchSource.WIKI,docs/3.1.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/frontmatter.html
https://qutip.org/docs/3.1.0/frontmatter.html:3318,Modifiability,coupling,coupling,3318,"g This Project¶; If you find this project useful, then please cite:. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP 2: A Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system and its environment is an essential step in understanding the dynamics of quantum systems.; In general, for all but the most basic of Hamiltonians, an analytical description of the system dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optic",MatchSource.WIKI,docs/3.1.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/frontmatter.html
https://qutip.org/docs/3.1.0/frontmatter.html:3456,Modifiability,coupling,coupling,3456,"ys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system and its environment is an essential step in understanding the dynamics of quantum systems.; In general, for all but the most basic of Hamiltonians, an analytical description of the system dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optics, trapped ions, superconducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, ",MatchSource.WIKI,docs/3.1.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/frontmatter.html
https://qutip.org/docs/3.1.0/frontmatter.html:3411,Performance,perform,performed,3411,"ys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system and its environment is an essential step in understanding the dynamics of quantum systems.; In general, for all but the most basic of Hamiltonians, an analytical description of the system dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optics, trapped ions, superconducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, ",MatchSource.WIKI,docs/3.1.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/frontmatter.html
https://qutip.org/docs/3.1.0/frontmatter.html:5611,Performance,perform,performance,5611,"t space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created usi",MatchSource.WIKI,docs/3.1.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/frontmatter.html
https://qutip.org/docs/3.1.0/frontmatter.html:5242,Testability,test,tested,5242,"onducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, excited by a limited number of quanta, that are amenable to classical simulation in a truncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See C",MatchSource.WIKI,docs/3.1.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/frontmatter.html
https://qutip.org/docs/3.1.0/frontmatter.html:1730,Usability,guid,guide,1730,"ew of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Parallel computation; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.1.0 (January 1, 2015):; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. « QuTiP: Quantum T... Installation ». Frontmatter¶. About This Documentation¶; This document contains a user guide and automatically generated API documentation for QuTiP. A PDF version of this text is available at the documentation page.; For more information see the QuTiP project web page. Author:P.D. Nation. Address:Department of Physics, Korea University,; Seongbuk-gu Seoul, 136-713 South Korea. Author:J.R. Johansson. Address:iTHES Research Group, RIKEN,; Wako-shi Saitama, 351-0198 Japan. version:3.1.0. status:Released (January 1, 2015). copyright:This documentation is licensed under the Creative Commons Attribution 3.0 Unported License. Citing This Project¶; If you find this project useful, then please cite:. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP 2: A Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http:/",MatchSource.WIKI,docs/3.1.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/frontmatter.html
https://qutip.org/docs/3.1.0/frontmatter.html:5773,Usability,learn,learning,5773,"ntum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy and Scipy libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/frontmatter.html
https://qutip.org/docs/3.1.0/genindex.html:232,Deployability,install,installation,232,"﻿. Index — QuTiP 3.1.0 Documentation. QuTiP; 3.1.0. qutip.org. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.8+); Installation on Windows; Optional Installation Options; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Parallel computation; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.1.0 (January 1, 2015):; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Index. A; | B; | C; | D; | E; | F; | G; | H; | I; | J; | K; | L; | M; | N; | O; | P; | Q; | R; | S; | T; | U; | V; | W. A. about() (in module qutip). add_1q_gate() (QubitCircuit method). add_annotation() (Bloch method). add_circuit() (QubitCircuit method). add_gate() (QubitCircuit method). add_points() (Bloch method). (Bloch3d method). add_states() (Bloch method). (Bloch3d method). add_vectors() (Bloch method). (Bloch3d method). adjacent_gates() (CircuitProcessor method). (QubitCircuit ",MatchSource.WIKI,docs/3.1.0/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/genindex.html
https://qutip.org/docs/3.1.0/genindex.html:15548,Deployability,update,update,15548,"solve() (in module qutip.stochastic). state_index_number() (in module qutip.states). state_number_enumerate() (in module qutip.states). state_number_index() (in module qutip.states). state_number_qobj() (in module qutip.states). steadystate() (in module qutip.steadystate). StochasticSolverOptions (class in qutip.stochastic). super_tensor() (in module qutip.tensor). swap() (in module qutip.qip.gates). swapalpha() (in module qutip.qip.gates). T. tensor() (in module qutip.tensor). tensor_contract() (in module qutip.tensor). thermal_dm() (in module qutip.states). three_level_basis() (in module qutip.three_level_atom). three_level_ops() (in module qutip.three_level_atom). tidyup() (eseries method). (Qobj method). to_choi() (in module qutip.superop_reps). to_kraus() (in module qutip.superop_reps). to_super() (in module qutip.superop_reps). toffoli() (in module qutip.qip.gates). tr() (Qobj method). tracedist() (in module qutip.metrics). trans() (Qobj method). transform() (Qobj method). TwoModeQuadratureCorrelation (class in qutip.distributions). U. unit() (Qobj method). update() (HarmonicOscillatorProbabilityFunction method). (HarmonicOscillatorWaveFunction method). (TwoModeQuadratureCorrelation method). update_ctrl_amps() (Dynamics method). update_psi() (TwoModeQuadratureCorrelation method). update_rho() (TwoModeQuadratureCorrelation method). V. value() (eseries method). variance() (in module qutip.expect). vector_mutation (Bloch attribute). vector_style (Bloch attribute). vector_to_operator() (in module qutip.superoperator). vector_width (Bloch attribute). version_table() (in module qutip.ipynbtools). visualize() (Distribution method). W. weighted_bipartite_matching() (in module qutip.graph). wigner() (in module qutip.wigner). wigner_covariance_matrix() (in module qutip.continuous_variables). WignerDistribution (class in qutip.distributions). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/genindex.html
https://qutip.org/docs/3.1.0/genindex.html:16414,Deployability,update,updated,16414,"solve() (in module qutip.stochastic). state_index_number() (in module qutip.states). state_number_enumerate() (in module qutip.states). state_number_index() (in module qutip.states). state_number_qobj() (in module qutip.states). steadystate() (in module qutip.steadystate). StochasticSolverOptions (class in qutip.stochastic). super_tensor() (in module qutip.tensor). swap() (in module qutip.qip.gates). swapalpha() (in module qutip.qip.gates). T. tensor() (in module qutip.tensor). tensor_contract() (in module qutip.tensor). thermal_dm() (in module qutip.states). three_level_basis() (in module qutip.three_level_atom). three_level_ops() (in module qutip.three_level_atom). tidyup() (eseries method). (Qobj method). to_choi() (in module qutip.superop_reps). to_kraus() (in module qutip.superop_reps). to_super() (in module qutip.superop_reps). toffoli() (in module qutip.qip.gates). tr() (Qobj method). tracedist() (in module qutip.metrics). trans() (Qobj method). transform() (Qobj method). TwoModeQuadratureCorrelation (class in qutip.distributions). U. unit() (Qobj method). update() (HarmonicOscillatorProbabilityFunction method). (HarmonicOscillatorWaveFunction method). (TwoModeQuadratureCorrelation method). update_ctrl_amps() (Dynamics method). update_psi() (TwoModeQuadratureCorrelation method). update_rho() (TwoModeQuadratureCorrelation method). V. value() (eseries method). variance() (in module qutip.expect). vector_mutation (Bloch attribute). vector_style (Bloch attribute). vector_to_operator() (in module qutip.superoperator). vector_width (Bloch attribute). version_table() (in module qutip.ipynbtools). visualize() (Distribution method). W. weighted_bipartite_matching() (in module qutip.graph). wigner() (in module qutip.wigner). wigner_covariance_matrix() (in module qutip.continuous_variables). WignerDistribution (class in qutip.distributions). Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/genindex.html
https://qutip.org/docs/3.1.0/genindex.html:3117,Performance,concurren,concurrence,3117, module qutip.qip.gates). Bloch (class in qutip.bloch). Bloch3d (class in qutip.bloch3d). bloch_redfield_solve() (in module qutip.bloch_redfield). bloch_redfield_tensor() (in module qutip.bloch_redfield). breadth_first_search() (in module qutip.graph). brmesolve() (in module qutip.bloch_redfield). build_preconditioner() (in module qutip.steadystate). bures_angle() (in module qutip.metrics). bures_dist() (in module qutip.metrics). C. checkherm() (Qobj method). CircuitProcessor (class in qutip.qip.models). CircularSpinChain (class in qutip.qip.models.spinchain). clear() (Bloch method). (Bloch3d method). clebsch() (in module qutip.utilities). cnot() (in module qutip.qip.gates). coherence_function_g1() (in module qutip.correlation). coherence_function_g2() (in module qutip.correlation). coherent() (in module qutip.states). coherent_dm() (in module qutip.states). combine_dyn_gen() (Dynamics method). composite() (in module qutip.tensor). compute_evolution() (Dynamics method). concurrence() (in module qutip.entropy). conj() (Qobj method). controlled_gate() (in module qutip.qip.gates). convert_unit() (in module qutip.utilities). correlation() (in module qutip.correlation). correlation_2op_1t() (in module qutip.correlation). correlation_2op_2t() (in module qutip.correlation). correlation_3op_1t() (in module qutip.correlation). correlation_3op_2t() (in module qutip.correlation). correlation_4op_1t() (in module qutip.correlation). correlation_4op_2t() (in module qutip.correlation). correlation_matrix() (in module qutip.continuous_variables). correlation_matrix_field() (in module qutip.continuous_variables). correlation_matrix_quadrature() (in module qutip.continuous_variables). correlation_ss() (in module qutip.correlation). covariance_matrix() (in module qutip.continuous_variables). cphase() (in module qutip.qip.gates). create() (in module qutip.operators). create_pulse_gen() (in module qutip.control.pulsegen). create_pulse_optimizer() (in module qutip.control.pulseoptim). cs,MatchSource.WIKI,docs/3.1.0/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/genindex.html
https://qutip.org/docs/3.1.0/genindex.html:2699,Usability,clear,clear,2699,n() (Bloch method). add_circuit() (QubitCircuit method). add_gate() (QubitCircuit method). add_points() (Bloch method). (Bloch3d method). add_states() (Bloch method). (Bloch3d method). add_vectors() (Bloch method). (Bloch3d method). adjacent_gates() (CircuitProcessor method). (QubitCircuit method). (SpinChain method). average_gate_fidelity() (in module qutip.metrics). B. basis() (in module qutip.states). berkeley() (in module qutip.qip.gates). Bloch (class in qutip.bloch). Bloch3d (class in qutip.bloch3d). bloch_redfield_solve() (in module qutip.bloch_redfield). bloch_redfield_tensor() (in module qutip.bloch_redfield). breadth_first_search() (in module qutip.graph). brmesolve() (in module qutip.bloch_redfield). build_preconditioner() (in module qutip.steadystate). bures_angle() (in module qutip.metrics). bures_dist() (in module qutip.metrics). C. checkherm() (Qobj method). CircuitProcessor (class in qutip.qip.models). CircularSpinChain (class in qutip.qip.models.spinchain). clear() (Bloch method). (Bloch3d method). clebsch() (in module qutip.utilities). cnot() (in module qutip.qip.gates). coherence_function_g1() (in module qutip.correlation). coherence_function_g2() (in module qutip.correlation). coherent() (in module qutip.states). coherent_dm() (in module qutip.states). combine_dyn_gen() (Dynamics method). composite() (in module qutip.tensor). compute_evolution() (Dynamics method). concurrence() (in module qutip.entropy). conj() (Qobj method). controlled_gate() (in module qutip.qip.gates). convert_unit() (in module qutip.utilities). correlation() (in module qutip.correlation). correlation_2op_1t() (in module qutip.correlation). correlation_2op_2t() (in module qutip.correlation). correlation_3op_1t() (in module qutip.correlation). correlation_3op_2t() (in module qutip.correlation). correlation_4op_1t() (in module qutip.correlation). correlation_4op_2t() (in module qutip.correlation). correlation_matrix() (in module qutip.continuous_variables). correlation_matrix_fi,MatchSource.WIKI,docs/3.1.0/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/genindex.html
https://qutip.org/docs/3.1.0/index.html:267,Deployability,install,installation,267,"﻿. QuTiP: Quantum Toolbox in Python (3.1.0) — QuTiP 3.1.0 Documentation. QuTiP; 3.1.0. qutip.org. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.8+); Installation on Windows; Optional Installation Options; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Parallel computation; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.1.0 (January 1, 2015):; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . QuTiP: Quantum Toolbox in Python (3.1.0); Indices and tables. Frontmatter ». QuTiP: Quantum Toolbox in Python (3.1.0)¶. Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.",MatchSource.WIKI,docs/3.1.0/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/index.html
https://qutip.org/docs/3.1.0/index.html:1827,Deployability,install,installation,1827,"um states and processes; Parallel computation; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.1.0 (January 1, 2015):; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . QuTiP: Quantum Toolbox in Python (3.1.0); Indices and tables. Frontmatter ». QuTiP: Quantum Toolbox in Python (3.1.0)¶. Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.8+); Setup Using Homebrew; Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Organization. Basic Operations on Quantum Objects; First things first; The quantum object class; Functions operating on Qobj class. Manipulating States and Operators; Introduction; State Vectors (kets or bras); Density matrices; Qubit (two-level) systems; Expectation values; Superoperators and Vectorized Operators. Using Tensor Products and Partial Traces; Tensor products; Example: Constructing composite Hamiltonians; Partial trace; Superoperators and Tensor Manipulations. Time Evolution and Quantum System Dynamics; Dynamics Simulation Results;",MatchSource.WIKI,docs/3.1.0/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/index.html
https://qutip.org/docs/3.1.0/index.html:1942,Deployability,install,installation,1942,"um states and processes; Parallel computation; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.1.0 (January 1, 2015):; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . QuTiP: Quantum Toolbox in Python (3.1.0); Indices and tables. Frontmatter ». QuTiP: Quantum Toolbox in Python (3.1.0)¶. Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.8+); Setup Using Homebrew; Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Organization. Basic Operations on Quantum Objects; First things first; The quantum object class; Functions operating on Qobj class. Manipulating States and Operators; Introduction; State Vectors (kets or bras); Density matrices; Qubit (two-level) systems; Expectation values; Superoperators and Vectorized Operators. Using Tensor Products and Partial Traces; Tensor products; Example: Constructing composite Hamiltonians; Partial trace; Superoperators and Tensor Manipulations. Time Evolution and Quantum System Dynamics; Dynamics Simulation Results;",MatchSource.WIKI,docs/3.1.0/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/index.html
https://qutip.org/docs/3.1.0/index.html:5443,Deployability,update,updated,5443,"nction; Emission spectrum; Non-steadystate correlation function. Plotting on the Bloch Sphere; Introduction; The Bloch and Bloch3d Classes; Configuring the Bloch sphere; Animating with the Bloch sphere. Visualization of quantum states and processes; Fock-basis probability distribution; Quasi-probability distributions; Visualizing operators; Quantum process tomography. Parallel computation; Parallel map and parallel for-loop; IPython-based parallel_map. Saving QuTiP Objects and Data Sets; Storing and loading QuTiP objects; Storing and loading datasets. Generating Random Quantum States & Operators; Composite random objects. Modifying Internal QuTiP Settings; User Accessible Parameters; Example: Changing Settings; Persistent Settings. API documentation; Classes; Qobj; eseries; Bloch sphere; Solver Options and Results; Distribution functions; Quantum information processing; Optimal control. Functions; Manipulation and Creation of States and Operators; Functions acting on states and operators; Dynamics and Time-Evolution; Visualization; Quantum Information Processing; Optimal control; Utilitiy Functions. Change Log; Version 3.1.0 (January 1, 2015):; New Features; Bug Fixes. Version 3.0.1 (Aug 5, 2014):; Bug Fixes. Version 3.0.0 (July 17, 2014):; New Features; Improvements. Version 2.2.0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Indices and tables¶. Index; Module Index; Search Page. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/index.html
https://qutip.org/docs/3.1.0/index.html:1958,Integrability,depend,dependencies,1958,"um states and processes; Parallel computation; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.1.0 (January 1, 2015):; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . QuTiP: Quantum Toolbox in Python (3.1.0); Indices and tables. Frontmatter ». QuTiP: Quantum Toolbox in Python (3.1.0)¶. Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.8+); Setup Using Homebrew; Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Organization. Basic Operations on Quantum Objects; First things first; The quantum object class; Functions operating on Qobj class. Manipulating States and Operators; Introduction; State Vectors (kets or bras); Density matrices; Qubit (two-level) systems; Expectation values; Superoperators and Vectorized Operators. Using Tensor Products and Partial Traces; Tensor products; Example: Constructing composite Hamiltonians; Partial trace; Superoperators and Tensor Manipulations. Time Evolution and Quantum System Dynamics; Dynamics Simulation Results;",MatchSource.WIKI,docs/3.1.0/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/index.html
https://qutip.org/docs/3.1.0/index.html:2983,Integrability,depend,dependent,2983,A; Manual installation of dependencies. Installation on Mac OS X (10.8+); Setup Using Homebrew; Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Organization. Basic Operations on Quantum Objects; First things first; The quantum object class; Functions operating on Qobj class. Manipulating States and Operators; Introduction; State Vectors (kets or bras); Density matrices; Qubit (two-level) systems; Expectation values; Superoperators and Vectorized Operators. Using Tensor Products and Partial Traces; Tensor products; Example: Constructing composite Hamiltonians; Partial trace; Superoperators and Tensor Manipulations. Time Evolution and Quantum System Dynamics; Dynamics Simulation Results; Lindblad Master Equation Solver; Monte Carlo Solver; Bloch-Redfield master equation; Solving Problems with Time-dependent Hamiltonians; Floquet Formalism; Setting Options for the Dynamics Solvers. Solving for Steady-State Solutions; Introduction; Steady State Solutions for Arbitrary Systems; Steady State solvers in QuTiP; Using the Steadystate Solver; Additional Solver Arguments; Example: Harmonic Oscillator in Thermal Bath. An Overview of the Eseries Class; Exponential-series representation of time-dependent quantum objects; Applications of exponential series. Two-time correlation functions; Steadystate correlation function; Emission spectrum; Non-steadystate correlation function. Plotting on the Bloch Sphere; Introduction; The Bloch and Bloch3d Classes; Configuring the Bloch sphere; Animating with the Bloch sphere. Visualization of quantum states and processes; Fock-basis probability distribution; Quasi-probability distributions; Visualizing operators; Quantum process tomography. Parallel computation; Parallel map and parallel for-loop; IPytho,MatchSource.WIKI,docs/3.1.0/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/index.html
https://qutip.org/docs/3.1.0/index.html:3376,Integrability,depend,dependent,3376,s; First things first; The quantum object class; Functions operating on Qobj class. Manipulating States and Operators; Introduction; State Vectors (kets or bras); Density matrices; Qubit (two-level) systems; Expectation values; Superoperators and Vectorized Operators. Using Tensor Products and Partial Traces; Tensor products; Example: Constructing composite Hamiltonians; Partial trace; Superoperators and Tensor Manipulations. Time Evolution and Quantum System Dynamics; Dynamics Simulation Results; Lindblad Master Equation Solver; Monte Carlo Solver; Bloch-Redfield master equation; Solving Problems with Time-dependent Hamiltonians; Floquet Formalism; Setting Options for the Dynamics Solvers. Solving for Steady-State Solutions; Introduction; Steady State Solutions for Arbitrary Systems; Steady State solvers in QuTiP; Using the Steadystate Solver; Additional Solver Arguments; Example: Harmonic Oscillator in Thermal Bath. An Overview of the Eseries Class; Exponential-series representation of time-dependent quantum objects; Applications of exponential series. Two-time correlation functions; Steadystate correlation function; Emission spectrum; Non-steadystate correlation function. Plotting on the Bloch Sphere; Introduction; The Bloch and Bloch3d Classes; Configuring the Bloch sphere; Animating with the Bloch sphere. Visualization of quantum states and processes; Fock-basis probability distribution; Quasi-probability distributions; Visualizing operators; Quantum process tomography. Parallel computation; Parallel map and parallel for-loop; IPython-based parallel_map. Saving QuTiP Objects and Data Sets; Storing and loading QuTiP objects; Storing and loading datasets. Generating Random Quantum States & Operators; Composite random objects. Modifying Internal QuTiP Settings; User Accessible Parameters; Example: Changing Settings; Persistent Settings. API documentation; Classes; Qobj; eseries; Bloch sphere; Solver Options and Results; Distribution functions; Quantum information p,MatchSource.WIKI,docs/3.1.0/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/index.html
https://qutip.org/docs/3.1.0/index.html:4002,Performance,load,loading,4002,"ns; Floquet Formalism; Setting Options for the Dynamics Solvers. Solving for Steady-State Solutions; Introduction; Steady State Solutions for Arbitrary Systems; Steady State solvers in QuTiP; Using the Steadystate Solver; Additional Solver Arguments; Example: Harmonic Oscillator in Thermal Bath. An Overview of the Eseries Class; Exponential-series representation of time-dependent quantum objects; Applications of exponential series. Two-time correlation functions; Steadystate correlation function; Emission spectrum; Non-steadystate correlation function. Plotting on the Bloch Sphere; Introduction; The Bloch and Bloch3d Classes; Configuring the Bloch sphere; Animating with the Bloch sphere. Visualization of quantum states and processes; Fock-basis probability distribution; Quasi-probability distributions; Visualizing operators; Quantum process tomography. Parallel computation; Parallel map and parallel for-loop; IPython-based parallel_map. Saving QuTiP Objects and Data Sets; Storing and loading QuTiP objects; Storing and loading datasets. Generating Random Quantum States & Operators; Composite random objects. Modifying Internal QuTiP Settings; User Accessible Parameters; Example: Changing Settings; Persistent Settings. API documentation; Classes; Qobj; eseries; Bloch sphere; Solver Options and Results; Distribution functions; Quantum information processing; Optimal control. Functions; Manipulation and Creation of States and Operators; Functions acting on states and operators; Dynamics and Time-Evolution; Visualization; Quantum Information Processing; Optimal control; Utilitiy Functions. Change Log; Version 3.1.0 (January 1, 2015):; New Features; Bug Fixes. Version 3.0.1 (Aug 5, 2014):; Bug Fixes. Version 3.0.0 (July 17, 2014):; New Features; Improvements. Version 2.2.0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1",MatchSource.WIKI,docs/3.1.0/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/index.html
https://qutip.org/docs/3.1.0/index.html:4037,Performance,load,loading,4037,"ns; Floquet Formalism; Setting Options for the Dynamics Solvers. Solving for Steady-State Solutions; Introduction; Steady State Solutions for Arbitrary Systems; Steady State solvers in QuTiP; Using the Steadystate Solver; Additional Solver Arguments; Example: Harmonic Oscillator in Thermal Bath. An Overview of the Eseries Class; Exponential-series representation of time-dependent quantum objects; Applications of exponential series. Two-time correlation functions; Steadystate correlation function; Emission spectrum; Non-steadystate correlation function. Plotting on the Bloch Sphere; Introduction; The Bloch and Bloch3d Classes; Configuring the Bloch sphere; Animating with the Bloch sphere. Visualization of quantum states and processes; Fock-basis probability distribution; Quasi-probability distributions; Visualizing operators; Quantum process tomography. Parallel computation; Parallel map and parallel for-loop; IPython-based parallel_map. Saving QuTiP Objects and Data Sets; Storing and loading QuTiP objects; Storing and loading datasets. Generating Random Quantum States & Operators; Composite random objects. Modifying Internal QuTiP Settings; User Accessible Parameters; Example: Changing Settings; Persistent Settings. API documentation; Classes; Qobj; eseries; Bloch sphere; Solver Options and Results; Distribution functions; Quantum information processing; Optimal control. Functions; Manipulation and Creation of States and Operators; Functions acting on states and operators; Dynamics and Time-Evolution; Visualization; Quantum Information Processing; Optimal control; Utilitiy Functions. Change Log; Version 3.1.0 (January 1, 2015):; New Features; Bug Fixes. Version 3.0.1 (Aug 5, 2014):; Bug Fixes. Version 3.0.0 (July 17, 2014):; New Features; Improvements. Version 2.2.0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1",MatchSource.WIKI,docs/3.1.0/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/index.html
https://qutip.org/docs/3.1.0/installation.html:3904,Availability,avail,available,3904,"7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:3923,Availability,down,download,3923,"7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:3989,Availability,down,download,3989,"Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:4034,Availability,avail,available,4034,"1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases;",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:5118,Availability,avail,available,5118,"t stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Option",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:6810,Availability,down,downloaded,6810," environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necess",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:7145,Availability,error,errors,7145," can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:8656,Availability,avail,available,8656,"le Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now, we want to tell OS X which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34; sudo port select pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will bring up a list of installed compilers, such as; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type; sudo port select gcc mp-gcc48. Running port select again should give; Available versions for gcc:; mp-gcc48 (active); none. To install QuTiP, run; sudo pip install qutip --install-option=--with-f90mc. Warning; Having both macports and homebrew installations on the same machine is not recommended, and can lead to QuTiP installation problems. Setup via SciPy Superpack¶; A third option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:11545,Availability,avail,available,11545,"dit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of test",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:11779,Availability,avail,available,11779,"; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:12838,Availability,error,errors,12838,"lt against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. QuTiP Version: 3.1.0; Numpy Version: 1.9.1; Scipy Version: 0.14.0; Cython Version: 0.21.1; Matplotlib Version: 1.4.2; Fortran mcsolver: True; scikits.umfpack: False; Python Version: 2.7.9; Platform Info: Darwin (x86_64); Installation path: /opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/qutip. Back to top. © Copyright 2011 and later, P.D. N",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:239,Deployability,install,installation,239,"﻿. Installation — QuTiP 3.1.0 Documentation. QuTiP; 3.1.0. qutip.org. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.8+); Installation on Windows; Optional Installation Options; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Parallel computation; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.1.0 (January 1, 2015):; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.8+); Setup Using Homebrew; Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version I",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:1574,Deployability,install,installation,1574,"oducts and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Parallel computation; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.1.0 (January 1, 2015):; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.8+); Setup Using Homebrew; Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.14+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cy",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:1689,Deployability,install,installation,1689,"oducts and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Parallel computation; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.1.0 (January 1, 2015):; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.8+); Setup Using Homebrew; Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.14+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cy",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:2790,Deployability,install,installing,2790," via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.14+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-depen",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:3330,Deployability,install,install,3330,"ions. Scipy; 0.14+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from sourc",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:3536,Deployability,install,installation,3536,"CC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are giv",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:3579,Deployability,install,install,3579,"CC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are giv",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:3640,Deployability,install,install,3640,"er; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source co",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:3730,Deployability,install,install,3730," Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fo",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:3746,Deployability,install,install-option,3746," Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fo",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:3808,Deployability,install,installation,3808,"te Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo f",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:3882,Deployability,release,releases,3882,"7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:4150,Deployability,release,release,4150," Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this m",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:4434,Deployability,install,installation,4434,"atforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:4612,Deployability,install,install,4612,"er pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:4674,Deployability,install,install,4674,"so include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython py",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:4767,Deployability,install,install,4767,"ore detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:4912,Deployability,install,install,4912,"ailable from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:5025,Deployability,release,releases,5025,"est source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install py",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:5048,Deployability,update,update,5048,"est source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install py",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:5069,Deployability,install,install,5069,"est source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install py",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:5140,Deployability,install,installed,5140,"t stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Option",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:5171,Deployability,install,install,5171,"t stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Option",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:5247,Deployability,install,installed,5247,"nt version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get insta",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:5307,Deployability,release,released,5307,"nt version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get insta",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:5326,Deployability,upgrade,upgraded,5326,"nt version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get insta",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:5466,Deployability,install,install,5466,"ies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran M",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:5521,Deployability,install,install,5521,"ies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran M",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:5557,Deployability,install,installation,5557,"thon setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:5594,Deployability,install,install,5594,"thon setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:5649,Deployability,install,install,5649,"thon setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:5719,Deployability,install,install,5719,"thon setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:5777,Deployability,install,install,5777,"sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Havi",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:5880,Deployability,install,install,5880,"r) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (rep",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:5931,Deployability,install,install,5931,"r) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (rep",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:6005,Deployability,install,install,6005,"r) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (rep",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:6077,Deployability,install,installation,6077,"on 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:6183,Deployability,install,installed,6183," standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipyth",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:6214,Deployability,install,install,6214," standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipyth",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:6283,Deployability,install,install,6283," standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipyth",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:6342,Deployability,install,install,6342," standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipyth",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:6419,Deployability,install,install,6419," standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipyth",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:6498,Deployability,install,install,6498," standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipyth",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:6660,Deployability,install,installed,6660,"ev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tool",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:6711,Deployability,install,installation,6711,"ev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tool",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:6750,Deployability,install,installation,6750,"lotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, an",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:6782,Deployability,install,installation,6782,"from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:6892,Deployability,install,installation,6892," environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necess",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:7020,Deployability,install,install,7020," do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo p",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:7080,Deployability,install,installing,7080," do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo p",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:7168,Deployability,configurat,configuration,7168," can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:7378,Deployability,install,installed,7378,"nte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now, we want to tell OS X which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34; sudo port select pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:7525,Deployability,install,install,7525,"nte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now, we want to tell OS X which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34; sudo port select pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:7628,Deployability,install,install,7628,"ion of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now, we want to tell OS X which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34; sudo port select pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will bring up a list of installed compilers, such as; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:7700,Deployability,install,installation,7700,"2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now, we want to tell OS X which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34; sudo port select pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will bring up a list of installed compilers, such as; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type; sudo port s",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:7766,Deployability,install,install,7766,"2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now, we want to tell OS X which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34; sudo port select pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will bring up a list of installed compilers, such as; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type; sudo port s",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:7824,Deployability,install,install,7824,"orresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now, we want to tell OS X which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34; sudo port select pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will bring up a list of installed compilers, such as; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type; sudo port select gcc mp-gcc48. Running port select again should give; Available versions for gcc:; ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:7875,Deployability,install,installation,7875," the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now, we want to tell OS X which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34; sudo port select pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will bring up a list of installed compilers, such as; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type; sudo port select gcc mp-gcc48. Running port select again should give; Available versions for gcc:; mp-gcc48 (active); none. To install QuTiP, run; sudo pip install qutip --install-option=--with",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:7928,Deployability,install,installed,7928," the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now, we want to tell OS X which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34; sudo port select pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will bring up a list of installed compilers, such as; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type; sudo port select gcc mp-gcc48. Running port select again should give; Available versions for gcc:; mp-gcc48 (active); none. To install QuTiP, run; sudo pip install qutip --install-option=--with",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:8001,Deployability,install,install,8001," installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now, we want to tell OS X which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34; sudo port select pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will bring up a list of installed compilers, such as; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type; sudo port select gcc mp-gcc48. Running port select again should give; Available versions for gcc:; mp-gcc48 (active); none. To install QuTiP, run; sudo pip install qutip --install-option=--with-f90mc. Warning; Having both macports and homebrew installations on the same machine is not recommended, and can lead to QuTiP installation problems. Se",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:8031,Deployability,install,install,8031," installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now, we want to tell OS X which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34; sudo port select pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will bring up a list of installed compilers, such as; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type; sudo port select gcc mp-gcc48. Running port select again should give; Available versions for gcc:; mp-gcc48 (active); none. To install QuTiP, run; sudo pip install qutip --install-option=--with-f90mc. Warning; Having both macports and homebrew installations on the same machine is not recommended, and can lead to QuTiP installation problems. Se",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:8073,Deployability,install,install,8073," installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now, we want to tell OS X which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34; sudo port select pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will bring up a list of installed compilers, such as; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type; sudo port select gcc mp-gcc48. Running port select again should give; Available versions for gcc:; mp-gcc48 (active); none. To install QuTiP, run; sudo pip install qutip --install-option=--with-f90mc. Warning; Having both macports and homebrew installations on the same machine is not recommended, and can lead to QuTiP installation problems. Se",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:8104,Deployability,install,install,8104," installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now, we want to tell OS X which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34; sudo port select pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will bring up a list of installed compilers, such as; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type; sudo port select gcc mp-gcc48. Running port select again should give; Available versions for gcc:; mp-gcc48 (active); none. To install QuTiP, run; sudo pip install qutip --install-option=--with-f90mc. Warning; Having both macports and homebrew installations on the same machine is not recommended, and can lead to QuTiP installation problems. Se",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:8155,Deployability,install,install,8155," installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now, we want to tell OS X which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34; sudo port select pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will bring up a list of installed compilers, such as; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type; sudo port select gcc mp-gcc48. Running port select again should give; Available versions for gcc:; mp-gcc48 (active); none. To install QuTiP, run; sudo pip install qutip --install-option=--with-f90mc. Warning; Having both macports and homebrew installations on the same machine is not recommended, and can lead to QuTiP installation problems. Se",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:8487,Deployability,install,installed,8487,"may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now, we want to tell OS X which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34; sudo port select pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will bring up a list of installed compilers, such as; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type; sudo port select gcc mp-gcc48. Running port select again should give; Available versions for gcc:; mp-gcc48 (active); none. To install QuTiP, run; sudo pip install qutip --install-option=--with-f90mc. Warning; Having both macports and homebrew installations on the same machine is not recommended, and can lead to QuTiP installation problems. Setup via SciPy Superpack¶; A third option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:8862,Deployability,install,install,8862,"essary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now, we want to tell OS X which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34; sudo port select pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will bring up a list of installed compilers, such as; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type; sudo port select gcc mp-gcc48. Running port select again should give; Available versions for gcc:; mp-gcc48 (active); none. To install QuTiP, run; sudo pip install qutip --install-option=--with-f90mc. Warning; Having both macports and homebrew installations on the same machine is not recommended, and can lead to QuTiP installation problems. Setup via SciPy Superpack¶; A third option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly se",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:8891,Deployability,install,install,8891,"essary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now, we want to tell OS X which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34; sudo port select pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will bring up a list of installed compilers, such as; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type; sudo port select gcc mp-gcc48. Running port select again should give; Available versions for gcc:; mp-gcc48 (active); none. To install QuTiP, run; sudo pip install qutip --install-option=--with-f90mc. Warning; Having both macports and homebrew installations on the same machine is not recommended, and can lead to QuTiP installation problems. Setup via SciPy Superpack¶; A third option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly se",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:8907,Deployability,install,install-option,8907,"essary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now, we want to tell OS X which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34; sudo port select pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will bring up a list of installed compilers, such as; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type; sudo port select gcc mp-gcc48. Running port select again should give; Available versions for gcc:; mp-gcc48 (active); none. To install QuTiP, run; sudo pip install qutip --install-option=--with-f90mc. Warning; Having both macports and homebrew installations on the same machine is not recommended, and can lead to QuTiP installation problems. Setup via SciPy Superpack¶; A third option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly se",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:8979,Deployability,install,installations,8979,"ll py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now, we want to tell OS X which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34; sudo port select pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will bring up a list of installed compilers, such as; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type; sudo port select gcc mp-gcc48. Running port select again should give; Available versions for gcc:; mp-gcc48 (active); none. To install QuTiP, run; sudo pip install qutip --install-option=--with-f90mc. Warning; Having both macports and homebrew installations on the same machine is not recommended, and can lead to QuTiP installation problems. Setup via SciPy Superpack¶; A third option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the foll",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:9055,Deployability,install,installation,9055,"ll py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now, we want to tell OS X which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34; sudo port select pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will bring up a list of installed compilers, such as; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type; sudo port select gcc mp-gcc48. Running port select again should give; Available versions for gcc:; mp-gcc48 (active); none. To install QuTiP, run; sudo pip install qutip --install-option=--with-f90mc. Warning; Having both macports and homebrew installations on the same machine is not recommended, and can lead to QuTiP installation problems. Setup via SciPy Superpack¶; A third option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the foll",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:9127,Deployability,install,install,9127,"k+parallel; sudo port install py34-pip. Now, we want to tell OS X which Python and iPython we are going to use; sudo port select python python34; sudo port select ipython ipython34; sudo port select pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will bring up a list of installed compilers, such as; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type; sudo port select gcc mp-gcc48. Running port select again should give; Available versions for gcc:; mp-gcc48 (active); none. To install QuTiP, run; sudo pip install qutip --install-option=--with-f90mc. Warning; Having both macports and homebrew installations on the same machine is not recommended, and can lead to QuTiP installation problems. Setup via SciPy Superpack¶; A third option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:9214,Deployability,install,installing,9214,"g to use; sudo port select python python34; sudo port select ipython ipython34; sudo port select pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will bring up a list of installed compilers, such as; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type; sudo port select gcc mp-gcc48. Running port select again should give; Available versions for gcc:; mp-gcc48 (active); none. To install QuTiP, run; sudo pip install qutip --install-option=--with-f90mc. Warning; Having both macports and homebrew installations on the same machine is not recommended, and can lead to QuTiP installation problems. Setup via SciPy Superpack¶; A third option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file shoul",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:9361,Deployability,install,install,9361," pip pip34. We now want to set the macports compiler to the vanilla GCC version. From the command line type; port select gcc. which will bring up a list of installed compilers, such as; Available versions for gcc:; mp-gcc48; none (active). We want to set the the compiler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type; sudo port select gcc mp-gcc48. Running port select again should give; Available versions for gcc:; mp-gcc48 (active); none. To install QuTiP, run; sudo pip install qutip --install-option=--with-f90mc. Warning; Having both macports and homebrew installations on the same machine is not recommended, and can lead to QuTiP installation problems. Setup via SciPy Superpack¶; A third option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different locat",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:9625,Deployability,install,installation,9625,"iler to the gcc4x compiler, where x is the highest number available, in this case mp-gcc48 (the “mp-” does not matter). To do this type; sudo port select gcc mp-gcc48. Running port select again should give; Available versions for gcc:; mp-gcc48 (active); none. To install QuTiP, run; sudo pip install qutip --install-option=--with-f90mc. Warning; Having both macports and homebrew installations on the same machine is not recommended, and can lead to QuTiP installation problems. Setup via SciPy Superpack¶; A third option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\Min",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:9860,Deployability,install,installing,9860,"p --install-option=--with-f90mc. Warning; Having both macports and homebrew installations on the same machine is not recommended, and can lead to QuTiP installation problems. Setup via SciPy Superpack¶; A third option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:9939,Deployability,install,installation,9939,"p --install-option=--with-f90mc. Warning; Having both macports and homebrew installations on the same machine is not recommended, and can lead to QuTiP installation problems. Setup via SciPy Superpack¶; A third option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:10278,Deployability,install,installed,10278,"E Distribution¶; Finally, one can also use the Anaconda CE package to install all of QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack li",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:10395,Deployability,install,installed,10395,"ws¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routi",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:10808,Deployability,install,installed,10808," also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes t",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:10888,Deployability,install,installed,10888," also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes t",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:11514,Deployability,update,updated,11514,"o work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was s",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:11609,Deployability,install,installed,11609,"either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing Q",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:12498,Deployability,install,installation,12498," used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:12607,Deployability,install,installing,12607,"k library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. QuTiP Version: 3.1.0; Numpy Version: 1.9.1; Scipy Version: 0.14.0; Cython Version: 0.21.1; Matplotlib Version: 1.4.2; Fortran mcsolver: True; scikits.umfpack: False",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:12635,Deployability,install,installation,12635,"k library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. QuTiP Version: 3.1.0; Numpy Version: 1.9.1; Scipy Version: 0.14.0; Cython Version: 0.21.1; Matplotlib Version: 1.4.2; Fortran mcsolver: True; scikits.umfpack: False",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:12879,Deployability,install,installed,12879,"lt against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. QuTiP Version: 3.1.0; Numpy Version: 1.9.1; Scipy Version: 0.14.0; Cython Version: 0.21.1; Matplotlib Version: 1.4.2; Fortran mcsolver: True; scikits.umfpack: False; Python Version: 2.7.9; Platform Info: Darwin (x86_64); Installation path: /opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/qutip. Back to top. © Copyright 2011 and later, P.D. N",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:12959,Deployability,install,installed,12959," by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. QuTiP Version: 3.1.0; Numpy Version: 1.9.1; Scipy Version: 0.14.0; Cython Version: 0.21.1; Matplotlib Version: 1.4.2; Fortran mcsolver: True; scikits.umfpack: False; Python Version: 2.7.9; Platform Info: Darwin (x86_64); Installation path: /opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/qutip. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:13290,Deployability,install,installed,13290," by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. QuTiP Version: 3.1.0; Numpy Version: 1.9.1; Scipy Version: 0.14.0; Cython Version: 0.21.1; Matplotlib Version: 1.4.2; Fortran mcsolver: True; scikits.umfpack: False; Python Version: 2.7.9; Platform Info: Darwin (x86_64); Installation path: /opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/qutip. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:13903,Deployability,update,updated,13903," by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. QuTiP Version: 3.1.0; Numpy Version: 1.9.1; Scipy Version: 0.14.0; Cython Version: 0.21.1; Matplotlib Version: 1.4.2; Fortran mcsolver: True; scikits.umfpack: False; Python Version: 2.7.9; Platform Info: Darwin (x86_64); Installation path: /opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/qutip. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:1705,Integrability,depend,dependencies,1705,"oducts and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Parallel computation; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.1.0 (January 1, 2015):; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.8+); Setup Using Homebrew; Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.14+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cy",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:2112,Integrability,depend,depends,2112,"4):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.8+); Setup Using Homebrew; Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.14+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:2548,Integrability,depend,dependent,2548,"uirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.8+); Setup Using Homebrew; Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.14+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms. Platform-independent instal",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:3798,Integrability,depend,dependent,3798,"te Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo f",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:4402,Integrability,depend,dependencies,4402,"mpiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management sy",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:4456,Integrability,depend,dependencies,4456,"atforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:5230,Integrability,depend,dependencies,5230,"nt version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get insta",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:5411,Integrability,depend,dependencies,5411,"ies is different on each platform, and detailed instructions for Linux (Ubuntu), Mac OS X and Windows are given below.; Regardless of platform, to install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran M",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:5573,Integrability,depend,dependencies,5573,"thon setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:5615,Integrability,depend,dependencies,5615,"thon setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Installation on Ubuntu Linux¶. Using QuTiP’s PPA¶; The easiest way to install QuTiP in Ubuntu (14.04 and later) is to use the QuTiP PPA; sudo add-apt-repository ppa:jrjohansson/qutip-releases; sudo apt-get update; sudo apt-get install python-qutip. A Python 3 version is also available, and can be installed using:; sudo apt-get install python3-qutip. With this method the most important dependencies are installed automatically, and when a new version of QuTiP is released it can be upgraded through the standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:6163,Integrability,depend,dependencies,6163," standard package management system. In addition to the required dependencies, it is also strongly recommended that you install the texlive-latex-extra package:; sudo apt-get install texlive-latex-extra. Manual installation of dependencies¶; First install the required dependencies using:; sudo apt-get install python-dev cython python-setuptools python-nose; sudo apt-get install python-numpy python-scipy python-matplotlib. Then install QuTiP from source following the instructions given above.; Alternatively (or additionally), to install a Python 3 environment, use:; sudo apt-get install python3-dev cython3 python3-setuptools python3-nose; sudo apt-get install python3-numpy python3-scipy python3-matplotlib. and then do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipyth",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:7060,Integrability,depend,dependencies,7060," do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo p",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:10928,Integrability,depend,dependencies,10928," also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes t",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:11044,Integrability,rout,routines,11044,"te the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these p",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:11399,Integrability,rout,routines,11399,"ng the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Ins",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:12991,Integrability,depend,dependencies,12991," by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. QuTiP Version: 3.1.0; Numpy Version: 1.9.1; Scipy Version: 0.14.0; Cython Version: 0.21.1; Matplotlib Version: 1.4.2; Fortran mcsolver: True; scikits.umfpack: False; Python Version: 2.7.9; Platform Info: Darwin (x86_64); Installation path: /opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/qutip. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:13091,Integrability,message,message,13091," by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. QuTiP Version: 3.1.0; Numpy Version: 1.9.1; Scipy Version: 0.14.0; Cython Version: 0.21.1; Matplotlib Version: 1.4.2; Fortran mcsolver: True; scikits.umfpack: False; Python Version: 2.7.9; Platform Info: Darwin (x86_64); Installation path: /opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/qutip. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:13277,Integrability,depend,dependencies,13277," by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. QuTiP Version: 3.1.0; Numpy Version: 1.9.1; Scipy Version: 0.14.0; Cython Version: 0.21.1; Matplotlib Version: 1.4.2; Fortran mcsolver: True; scikits.umfpack: False; Python Version: 2.7.9; Platform Info: Darwin (x86_64); Installation path: /opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/qutip. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:7168,Modifiability,config,configuration,7168," can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo port install py34-cython; sudo port install py34-ipython +notebook+parallel; sudo port install py34-pip. Now",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:10564,Modifiability,variab,variable,10564,"eshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/non",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:3238,Performance,perform,performance,3238,"re currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.14+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:11436,Performance,perform,performance,11436,"ng the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-packages\PyQt4. This is to make sure; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Ins",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:11745,Performance,optimiz,optimized,11745,"; that the right version of the MinGW compiler is used if more than one; is installed (not uncommon under Windows, since many packages are; distributed and installed with their own version of all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:11939,Performance,perform,performance,11939," all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See t",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:11973,Performance,optimiz,optimized,11973," all dependencies). Optional Installation Options¶. UMFPACK Linear Solver¶; As of SciPy 0.14+, the umfpack linear solver routines for solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See t",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:12013,Performance,multi-thread,multi-threaded,12013," solving large-scale sparse linear systems have been replaced due to licensing restrictions. The default method for all sparse linear problems is now the SuperLU library. However, scipy still includes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:12274,Performance,load,loading,12274,"udes the ability to call the umfpack library via the scikits.umfpack module. In our experience, the umfpack solver is 2-5x faster than the SuperLU routines, which is a very noticeable performance increase when used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:2357,Testability,test,tested,2357,".1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Using QuTiP’s PPA; Manual installation of dependencies. Installation on Mac OS X (10.8+); Setup Using Homebrew; Setup Using Macports; Setup via SciPy Superpack; Anaconda CE Distribution. Installation on Windows; Optional Installation Options; UMFPACK Linear Solver; Optimized BLAS Libraries. Verifying the Installation; Checking Version Information using the About Function. « Frontmatter. Users Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.14+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:3061,Testability,test,tests,3061,"s Guide ». Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.3+ is highly recommended. Numpy; 1.7+; Not tested on lower versions. Scipy; 0.14+; Lower versions have missing features. Matplotlib; 1.2.0+; Some plotting does not work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:3470,Testability,test,tested,3470,"t work on lower versions. Cython; 0.15+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Fortran; Compiler; Fortran 90; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Optional. Needed for using the Bloch3d class. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. LaTeX; TexLive 2009+; Optional. Needed if using LaTeX in figures. nose; 1.1.2+; Optional. For running tests. scikits.umfpack; 5.2.0+; Optional. Faster (~2-5x) steady state calculations. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms. Platform-independent installation¶; Often the easiest way is to install QuTiP is to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Get the source code¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository. Installing from source¶; Installing QuTiP from source requires that all the dependencies are satisfied. The installation of these dependencies is diff",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:7129,Testability,test,test,7129," do the installation from source using python3 instead of python.; Optional, but recommended, dependencies can be installed using:; sudo apt-get install texlive-latex-extra # recommended for plotting; sudo apt-get install mayavi2 # optional, for Bloch3d only; sudo apt-get install libblas-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install liblapack-dev # optional, for Fortran Monte Carlo solver; sudo apt-get install gfortran # optional, for Fortran Monte Carlo solver. Installation on Mac OS X (10.8+)¶. Setup Using Homebrew¶; The latest version of QuTiP can be quickly installed on OS X using Homebrew and the automated installation shell scripts. Python 2.7 installation script; Python 3.4 installation script. Having downloaded the script corresponding to the version of Python you want to use, the installation script can be run from the terminal using (replacing X with 2 or 3); sh install_qutip_pyX.sh. The script will then install Homebrew and the required QuTiP dependencies before installing QuTiP itself and running the built in test suite. Any errors in the homebrew configuration will be displayed at the end. Using Python 2.7 or 3.4, the python commend-line and IPython interpreter can be run by calling python and ipython or python3 and ipython3, respectively.; If you have installed other packages in the /usr/local/ directory, or have changed the permissions of any of its sub-directories, then this script may fail to install all the necessary tools automatically. Setup Using Macports¶; If you have not done so already, install the Apple Xcode developer tools from the Apple App Store. After installation, open Xcode and go to: Preferences -> Downloads, and install the ‘Command Line Tools’.; On the Mac OS, you can install the required libraries via MacPorts. After installation, the necessary “ports” for QuTiP may be installed via (Replace ‘34’ with ‘27’ if you want Python 2.7); sudo port install py34-scipy; sudo port install py34-matplotlib +latex; sudo p",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:9711,Testability,test,tested,9711,"es not matter). To do this type; sudo port select gcc mp-gcc48. Running port select again should give; Available versions for gcc:; mp-gcc48 (active); none. To install QuTiP, run; sudo pip install qutip --install-option=--with-f90mc. Warning; Having both macports and homebrew installations on the same machine is not recommended, and can lead to QuTiP installation problems. Setup via SciPy Superpack¶; A third option is to install the required Python packages using the SciPy Superpack. Further information on installing the superpack can be found on the SciPy Downloads page. Anaconda CE Distribution¶; Finally, one can also use the Anaconda CE package to install all of QuTiP. Installation on Windows¶; QuTiP is primarily developed for Unix-based platforms such as Linux an Mac OS X, but it can also be used on Windows. We have limited experience and ability to help troubleshoot problems on Windows, but the following installation steps have been reported to work:. Install the Python(X,Y) distribution (tested with version 2.7.3.1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32. [build_ext]; compiler = mingw32. The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above. Obtain the QuTiP source code and installed it following the instructions given above. Note; In some cases, to get the dynamic compilation of Cython code to work, it; might be necessary to edit the PATH variable and make sure that; C:\MinGW32-xy\bin appears either first in the PATH list, or possibly; right after C:\Python27\Lib\site-package",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:12467,Testability,test,test,12467," used for solving steady state solutions. We have an updated scikits.umfpack module available at http://github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:12547,Testability,test,tests,12547,"//github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. QuTiP Version: 3.1.0; Numpy Version: 1.9.1; Scipy Version: 0.14.0; Cyth",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:12584,Testability,test,testing,12584,"//github.com/nonhermitian/umfpack that can be installed to have SciPy find and use the umfpack library. Optimized BLAS Libraries¶; QuTiP is designed to take advantage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. QuTiP Version: 3.1.0; Numpy Version: 1.9.1; Scipy Version: 0.14.0; Cyth",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:12712,Testability,test,testing,12712,"antage of some of the optimized BLAS libraries that are available for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. QuTiP Version: 3.1.0; Numpy Version: 1.9.1; Scipy Version: 0.14.0; Cython Version: 0.21.1; Matplotlib Version: 1.4.2; Fortran mcsolver: True; scikits.umfpack: False; Python Version: 2.7.9; Platform Info: Darwin (x86_64); Installati",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:12762,Testability,test,tests,12762,"ble for NumPy. At present, this includes the OPENBLAS and MKL libraries. If NumPy is built against these libraries, then QuTiP will take advantage of the performance gained by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. QuTiP Version: 3.1.0; Numpy Version: 1.9.1; Scipy Version: 0.14.0; Cython Version: 0.21.1; Matplotlib Version: 1.4.2; Fortran mcsolver: True; scikits.umfpack: False; Python Version: 2.7.9; Platform Info: Darwin (x86_64); Installation path: /opt/local/Library/Frameworks/Python.framework/Versio",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/installation.html:13014,Testability,test,tests,13014," by using these optimized tools. As these libraries are multi-threaded, you can change the number of threads used in these packages by adding:; >>> import os; >>> os.environ['OPENBLAS_NUM_THREADS'] = '4'; >>> os.environ['MKL_NUM_THREADS'] = '4'. at the top of your Python script files, or iPython notebooks, and then loading the QuTiP framework. If these commands are not present, then QuTiP automatically sets the number of threads to one. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; >>> import qutip.testing as qt; >>> qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. QuTiP Version: 3.1.0; Numpy Version: 1.9.1; Scipy Version: 0.14.0; Cython Version: 0.21.1; Matplotlib Version: 1.4.2; Fortran mcsolver: True; scikits.umfpack: False; Python Version: 2.7.9; Platform Info: Darwin (x86_64); Installation path: /opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/qutip. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/installation.html
https://qutip.org/docs/3.1.0/py-modindex.html:246,Deployability,install,installation,246,"﻿. Python Module Index — QuTiP 3.1.0 Documentation. QuTiP; 3.1.0. qutip.org. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.8+); Installation on Windows; Optional Installation Options; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Parallel computation; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.1.0 (January 1, 2015):; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Python Module Index. q.  . q. qutip.    ; qutip.bloch_redfield.    ; qutip.continuous_variables.    ; qutip.control.grape.    ; qutip.control.pulsegen.    ; qutip.control.pulseoptim.    ; qutip.correlation.    ; qutip.entropy.    ; qutip.essolve.    ; qutip.expect.    ; qutip.fileio.    ; qutip.floquet.    ; qutip.fortran.mcsolve_f90.    ; qutip.graph.    ; qutip.ipynbtools.    ; qutip.mcsolve.    ; qutip.mesolve.    ; qutip.metrics.    ; qutip.operators.    ; qutip.parall",MatchSource.WIKI,docs/3.1.0/py-modindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/py-modindex.html
https://qutip.org/docs/3.1.0/py-modindex.html:2512,Deployability,update,updated,2512,"bjects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Parallel computation; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.1.0 (January 1, 2015):; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Python Module Index. q.  . q. qutip.    ; qutip.bloch_redfield.    ; qutip.continuous_variables.    ; qutip.control.grape.    ; qutip.control.pulsegen.    ; qutip.control.pulseoptim.    ; qutip.correlation.    ; qutip.entropy.    ; qutip.essolve.    ; qutip.expect.    ; qutip.fileio.    ; qutip.floquet.    ; qutip.fortran.mcsolve_f90.    ; qutip.graph.    ; qutip.ipynbtools.    ; qutip.mcsolve.    ; qutip.mesolve.    ; qutip.metrics.    ; qutip.operators.    ; qutip.parallel.    ; qutip.partial_transpose.    ; qutip.propagator.    ; qutip.qip.algorithms.qft.    ; qutip.qip.gates.    ; qutip.qip.qubits.    ; qutip.random_objects.    ; qutip.sesolve.    ; qutip.states.    ; qutip.steadystate.    ; qutip.stochastic.    ; qutip.superop_reps.    ; qutip.superoperator.    ; qutip.tensor.    ; qutip.three_level_atom.    ; qutip.tomography.    ; qutip.utilities.    ; qutip.visualization.    ; qutip.wigner. Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/py-modindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/py-modindex.html
https://qutip.org/docs/3.1.0/search.html:233,Deployability,install,installation,233,"﻿. Search — QuTiP 3.1.0 Documentation. QuTiP; 3.1.0. qutip.org. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.8+); Installation on Windows; Optional Installation Options; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Parallel computation; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.1.0 (January 1, 2015):; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Search. Please activate JavaScript to enable the search; functionality.; . From here you can search these documents. Enter your search; words into the box below and click ""search"". Note that the search; function will automatically search for all of the words. Pages; containing fewer words won't appear in the result list.; . Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/search.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/search.html
https://qutip.org/docs/3.1.0/search.html:1913,Deployability,update,updated,1913,"﻿. Search — QuTiP 3.1.0 Documentation. QuTiP; 3.1.0. qutip.org. Docs . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; General Requirements; Platform-independent installation; Get the source code; Installing from source; Installation on Ubuntu Linux; Installation on Mac OS X (10.8+); Installation on Windows; Optional Installation Options; Verifying the Installation; Checking Version Information using the About Function. Users Guide; Guide Overview; Basic Operations on Quantum Objects; Manipulating States and Operators; Using Tensor Products and Partial Traces; Time Evolution and Quantum System Dynamics; Solving for Steady-State Solutions; An Overview of the Eseries Class; Two-time correlation functions; Plotting on the Bloch Sphere; Visualization of quantum states and processes; Parallel computation; Saving QuTiP Objects and Data Sets; Generating Random Quantum States & Operators; Modifying Internal QuTiP Settings. API documentation; Classes; Functions. Change Log; Version 3.1.0 (January 1, 2015):; Version 3.0.1 (Aug 5, 2014):; Version 3.0.0 (July 17, 2014):; Version 2.2.0 (March 01, 2013):; Version 2.1.0 (October 05, 2012):; Version 2.0.0 (June 01, 2012):; Version 1.1.4 (May 28, 2012):; Version 1.1.3 (November 21, 2011):; Version 1.1.2 (October 27, 2011); Version 1.1.1 (October 25, 2011); Version 1.1.0 (October 04, 2011); Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Page . Search. Please activate JavaScript to enable the search; functionality.; . From here you can search these documents. Enter your search; words into the box below and click ""search"". Note that the search; function will automatically search for all of the words. Pages; containing fewer words won't appear in the result list.; . Back to top. © Copyright 2011 and later, P.D. Nation, J.R. Johansson.; Last updated on Dec 31, 2014.; Created using Sphinx 1.2.3. ",MatchSource.WIKI,docs/3.1.0/search.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/3.1.0/search.html
https://qutip.org/docs/4.0.2/biblio.html:1999,Deployability,update,updated,1999,"; . Frontmatter; Installation; Users Guide; API documentation; Change Log; Developers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs »; Bibliography. Bibliography¶. [BCSZ08]; Bruzda, V. Cappellini, H.-J. Sommers, K. Życzkowski, Random Quantum Operations, Phys. Lett. A 373, 320-324 (2009). doi:10.1016/j.physleta.2008.11.043. [Hav03]Havel, T. Robust procedures for converting among Lindblad, Kraus and matrix representations of quantum dynamical semigroups. Journal of Mathematical Physics 44 2, 534 (2003). doi:10.1063/1.1518555. [Wat13]Watrous, J. Theory of Quantum Information, lecture notes. [Mez07]; Mezzadri, How to generate random matrices from the classical compact groups, Notices of the AMS 54 592-604 (2007). arXiv:math-ph/0609050. [Mis12]. Miszczak, Generating and using truly random quantum states in Mathematica, Computer Physics Communications 183 1, 118-124 (2012). doi:10.1016/j.cpc.2011.08.002. [Moh08]; Mohseni, A. T. Rezakhani, D. A. Lidar, Quantum-process tomography: Resource analysis of different strategies, Phys. Rev. A 77, 032322 (2008). doi:10.1103/PhysRevA.77.032322. [Gri98]; Grifoni, P. Hänggi, Driven quantum tunneling, Physics Reports 304, 299 (1998). doi:10.1016/S0370-1573(98)00022-2. [Cre03]. Creffield, Location of crossings in the Floquet spectrum of a driven two-level system, Phys. Rev. B 67, 165301 (2003). doi:10.1103/PhysRevB.67.165301. [Gar03]Gardineer and Zoller, Quantum Noise (Springer, 2004). [Bre02]H.-P. Breuer and F. Petruccione, The Theory of Open Quantum Systems (Oxford, 2002). [Coh92]; Cohen-Tannoudji, J. Dupont-Roc, G. Grynberg, Atom-Photon Interactions: Basic Processes and Applications, (Wiley, 1992). [WBC11]C. Wood, J. Biamonte, D. G. Cory, Tensor networks and graphical calculus for; open quantum systems. arXiv:1111.6950. Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Jan 11, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.0.2/biblio.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/biblio.html
https://qutip.org/docs/4.0.2/changelog.html:6748,Availability,error,error,6748,"o; set_phase_option function now property phase_option. propcomp properties; grad_exact (now read only). propcomp functions; compute_propagator now _compute_propagator; compute_diff_prop now _compute_diff_prop; compute_prop_grad now _compute_prop_grad. tslotcomp functions; get_timeslot_for_fidelity_calc now _get_timeslot_for_fidelity_calc. Miscellaneous. QuTiP Travis CI tests now use the Anaconda distribution.; The about box and ipynb version_table now display addition system information.; Updated Cython cleanup to remove depreciation warning in sysconfig.; Updated ipynb_parallel to look for ipyparallel module in V4 of the notebooks. Bug Fixes¶. Fixes for countstat and psuedo-inverse functions; Fixed Qobj division tests on 32-bit systems.; Removed extra call to Python in time-dependent Cython code.; Fixed issue with repeated Bloch sphere saving.; Fixed T_0 triplet state not normalized properly. (Fixed by Eric Hontz); Simplified compiler flags (support for ARM systems).; Fixed a decoding error in qload.; Fixed issue using complex.h math and np.kind_t variables.; Corrected output states mismatch for ntraj=1 in the mcf90 solver.; Qobj data is now copied by default to avoid a bug in multiplication. (Fixed by Richard Brierley); Fixed bug overwriting hardware_info in __init__. (Fixed by Johannes Feist); Restored ability to explicity set Q.isherm, Q.type, and Q.superrep.; Fixed integer depreciation warnings from NumPy.; Qobj * (dense vec) would result in a recursive loop.; Fixed args=None -> args={} in correlation functions to be compatible with mesolve.; Fixed depreciation warnings in mcsolve.; Fixed neagtive only real parts in rand_ket.; Fixed a complicated list-cast-map-list antipattern in super operator reps. (Fixed by Stefan Krastanov); Fixed incorrect isherm for sigmam spin operator.; Fixed the dims when using final_state_output in mesolve and sesolve. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NA",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:8135,Availability,avail,available,8135,"iation warnings from NumPy.; Qobj * (dense vec) would result in a recursive loop.; Fixed args=None -> args={} in correlation functions to be compatible with mesolve.; Fixed depreciation warnings in mcsolve.; Fixed neagtive only real parts in rand_ket.; Fixed a complicated list-cast-map-list antipattern in super operator reps. (Fixed by Stefan Krastanov); Fixed incorrect isherm for sigmam spin operator.; Fixed the dims when using final_state_output in mesolve and sesolve. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True);",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:8643,Availability,error,errors,8643,"rsion 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator r",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:9927,Availability,failure,failure,9927,"uring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories when using only 1 CPU.; Fix bug in parsing of time-dependent Hamiltonian/collapse operator arguments; that occurred when the args argument is not a dictionary.; Fix bug in internal _version2int function that cause a failure when parsingthe version number of the Cython package. Version 3.0.0 (July 17, 2014):¶. New Features¶. New module qutip.stochastic with stochastic master equation and stochastic; Schrödinger equation solvers.; Expanded steady state solvers. The function steady has been deprecated in; favor of steadystate. The steadystate solver no longer use umfpack by; default. New pre-processing methods for reordering and balancing the linear; equation system used in direct solution of the steady state.; New module qutip.qip with utilities for quantum information processing,; including pre-defined quantum gates along with functions for expanding; arbitrary 1, 2, and 3 qubit gates to N qubit registers, circuit; representations, library of quantum algorithms, and basic physical models for; some common QIP architectures.; New module qutip.distributions with unified API for working with; distribution functions.; New format for defining time-dependent Hamiltonians and collapse operators,; using a pre",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:12676,Availability,avail,available,12676,"spin_Jy, spin_Jz and; spin_state, spin_coherent.; The expect function now supports a list of operators, in addition to the; previously supported list of states.; Simplified creation of qubit states using ket function.; The module qutip.cyQ has been renamed to qutip.cy and the sparse; matrix-vector functions spmv and spmv1d has been combined into one; function spmv. New functions for operating directly on the underlaying; sparse CSR data have been added (e.g., spmv_csr). Performance; improvements. New and improved Cython functions for calculating expectation; values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squ",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:13635,Availability,avail,available,13635,"and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity f",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:20736,Availability,toler,tolerance,20736,"utput.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Jan 11, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:334,Deployability,release,released,334,". . Change Log — QuTiP 4.0 Documentation. QuTiP: Quantum Toolbox in Python; . ; . 4.0; . Frontmatter; Installation; Users Guide; API documentation; Change Log; Version 4.1.0 (in dev); Improvements. Version 4.0.2 (January 5, 2017); Bug Fixes. Version 4.0.0 (December 22, 2016); Improvements; Bug Fixes. Version 3.2.0 (Never officially released); New Features; Improvements; Bug Fixes. Version 3.1.0 (January 1, 2015):; New Features; Bug Fixes. Version 3.0.1 (Aug 5, 2014):; Bug Fixes. Version 3.0.0 (July 17, 2014):; New Features; Improvements. Version 2.2.0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). Developers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs »; Change Log. Change Log¶. Version 4.1.0 (in dev)¶. Improvements¶; Core libraries. erf supported function in td strings. QIP. Gate object can be used to instantiate another identical gate. Version 4.0.2 (January 5, 2017)¶. Bug Fixes¶. td files no longer left behind by correlation tests; Various fast sparse fixes. Version 4.0.0 (December 22, 2016)¶. Improvements¶; Core libraries. MAJOR FEATURE: Fast sparse: New subclass of csr_matrix added that overrides commonly used methods to avoid certain checks that incurr execution cost. All Qobj.data now fast_csr_matrix; HEOM performance enhancements; spmv now faster; mcsolve codegen further optimised. Control modules. Time dependent drift (through list of pwc dynamics generators); memory optimisation options provided for control.dynamics. Bug Fixes¶. recompilation of pyx files on first import removed; tau array in control.pulseoptim funcs now works. Version 3.2.0 (Neve",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:2014,Deployability,release,released,2014,"1). Developers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs »; Change Log. Change Log¶. Version 4.1.0 (in dev)¶. Improvements¶; Core libraries. erf supported function in td strings. QIP. Gate object can be used to instantiate another identical gate. Version 4.0.2 (January 5, 2017)¶. Bug Fixes¶. td files no longer left behind by correlation tests; Various fast sparse fixes. Version 4.0.0 (December 22, 2016)¶. Improvements¶; Core libraries. MAJOR FEATURE: Fast sparse: New subclass of csr_matrix added that overrides commonly used methods to avoid certain checks that incurr execution cost. All Qobj.data now fast_csr_matrix; HEOM performance enhancements; spmv now faster; mcsolve codegen further optimised. Control modules. Time dependent drift (through list of pwc dynamics generators); memory optimisation options provided for control.dynamics. Bug Fixes¶. recompilation of pyx files on first import removed; tau array in control.pulseoptim funcs now works. Version 3.2.0 (Never officially released)¶. New Features¶; Core libraries. MAJOR FEATURE: Non-Markovian solvers: Hierarchy (Added by Neill Lambert), Memory-Cascade, and Transfer-Tensor methods.; MAJOR FEATURE: Default steady state solver now up to 100x faster using the Intel Pardiso library under the Anaconda and Intel Python distributions.; The default Wigner function now uses a Clenshaw summation algorithm to evaluate a polynomial series that is applicable for any number of exciations (previous limitation was ~50 quanta), and is ~3x faster than before. (Added by Denis Vasilyev); Can now define a given eigen spectrum for random Hermitian and density operators.; The Qobj expm method now uses the equivilent SciPy routine, and performs a much faster exp operation if the matrix is diagonal.; One can now build zero operators using the qzero function. Control modules. MAJOR FEATURE: CRAB algorithm added; This is an alternative to the GRAPE algorithm, which allows for analytical control functions, which means that expe",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:4112,Deployability,configurat,configuration,4112,"xperimental constraints can more easily be added into optimisation.; See tutorial notebook for full information. Improvements¶; Core libraries. Two-time correlation functions can now be calculated for fully time-dependent Hamiltonians and collapse operators. (Added by Kevin Fischer); The code for the inverse-power method for the steady state solver has been simplified.; Bloch-Redfield tensor creation is now up to an order of magnitude faster. (Added by Johannes Feist); Q.transform now works properly for arrays directly from sp_eigs (or eig).; Q.groundstate now checks for degeneracy.; Added sinm and cosm methods to the Qobj class.; Added charge and tunneling operators.; Time-dependent Cython code is now easier to read and debug. Control modules. The internal state / quantum operator data type can now be either Qobj or ndarray; Previous only ndarray was possible. This now opens up possibility of using Qobj methods in fidelity calculations; The attributes and functions that return these operators are now preceded by an underscore, to indicate that the data type could change depending on the configuration options.; In most cases these functions were for internal processing only anyway, and should have been ‘private’.; Accessors to the properties that could be useful outside of the library have been added. These always return Qobj. If the internal operator data type is not Qobj, then there could be signicant overhead in the conversion, and so this should be avoided during pulse optimisation.; If custom sub-classes are developed that use Qobj properties and methods (e.g. partial trace), then it is very likely that it will be more efficient to set the internal data type to Qobj.; The internal operator data will be chosen automatically based on the size and sparsity of the dynamics generator. It can be forced by setting dynamics.oper_dtype = <type>; Note this can be done by passing dyn_params={'oper_dtype':<type>} in any of the pulseoptim functions.; Some other properties a",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:8631,Deployability,integrat,integration,8631,"rsion 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator r",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:14198,Deployability,continuous,continuous,14198,"back functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to ",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:14209,Deployability,integrat,integration,14209,"back functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to ",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:15496,Deployability,install,installation,15496," for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gates.; Functions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag()",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:16837,Deployability,release,release,16837,"name in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The qu",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:17144,Deployability,install,installed,17144,".; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum obj",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:18693,Deployability,install,installation,18693,"and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying the installation.; Demos window now lets you copy and paste code from each example. Version 1.1.4 (May 28, 2012):¶. Bug Fixes:¶. Fixed bug pointed out by Brendan Abolins.; Qobj.tr() returns zero-dim ndarray instead of float or complex.; Updated factorial import for scipy version 0.10+. Version 1.1.3 (November 21, 2011):¶. New Functions:¶. Allow custom naming of Bloch sphere. Bug Fixes:¶. Fixed text alignment issues in AboutBox.; Added fix for SciPy V>0.10 where factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-R",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:21015,Deployability,release,release,21015,"utput.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Jan 11, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:21152,Deployability,update,updated,21152,"utput.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Jan 11, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:3317,Energy Efficiency,power,power,3317,"ns.; The default Wigner function now uses a Clenshaw summation algorithm to evaluate a polynomial series that is applicable for any number of exciations (previous limitation was ~50 quanta), and is ~3x faster than before. (Added by Denis Vasilyev); Can now define a given eigen spectrum for random Hermitian and density operators.; The Qobj expm method now uses the equivilent SciPy routine, and performs a much faster exp operation if the matrix is diagonal.; One can now build zero operators using the qzero function. Control modules. MAJOR FEATURE: CRAB algorithm added; This is an alternative to the GRAPE algorithm, which allows for analytical control functions, which means that experimental constraints can more easily be added into optimisation.; See tutorial notebook for full information. Improvements¶; Core libraries. Two-time correlation functions can now be calculated for fully time-dependent Hamiltonians and collapse operators. (Added by Kevin Fischer); The code for the inverse-power method for the steady state solver has been simplified.; Bloch-Redfield tensor creation is now up to an order of magnitude faster. (Added by Johannes Feist); Q.transform now works properly for arrays directly from sp_eigs (or eig).; Q.groundstate now checks for degeneracy.; Added sinm and cosm methods to the Qobj class.; Added charge and tunneling operators.; Time-dependent Cython code is now easier to read and debug. Control modules. The internal state / quantum operator data type can now be either Qobj or ndarray; Previous only ndarray was possible. This now opens up possibility of using Qobj methods in fidelity calculations; The attributes and functions that return these operators are now preceded by an underscore, to indicate that the data type could change depending on the configuration options.; In most cases these functions were for internal processing only anyway, and should have been ‘private’.; Accessors to the properties that could be useful outside of the library have been",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:3652,Energy Efficiency,charge,charge,3652,"xpm method now uses the equivilent SciPy routine, and performs a much faster exp operation if the matrix is diagonal.; One can now build zero operators using the qzero function. Control modules. MAJOR FEATURE: CRAB algorithm added; This is an alternative to the GRAPE algorithm, which allows for analytical control functions, which means that experimental constraints can more easily be added into optimisation.; See tutorial notebook for full information. Improvements¶; Core libraries. Two-time correlation functions can now be calculated for fully time-dependent Hamiltonians and collapse operators. (Added by Kevin Fischer); The code for the inverse-power method for the steady state solver has been simplified.; Bloch-Redfield tensor creation is now up to an order of magnitude faster. (Added by Johannes Feist); Q.transform now works properly for arrays directly from sp_eigs (or eig).; Q.groundstate now checks for degeneracy.; Added sinm and cosm methods to the Qobj class.; Added charge and tunneling operators.; Time-dependent Cython code is now easier to read and debug. Control modules. The internal state / quantum operator data type can now be either Qobj or ndarray; Previous only ndarray was possible. This now opens up possibility of using Qobj methods in fidelity calculations; The attributes and functions that return these operators are now preceded by an underscore, to indicate that the data type could change depending on the configuration options.; In most cases these functions were for internal processing only anyway, and should have been ‘private’.; Accessors to the properties that could be useful outside of the library have been added. These always return Qobj. If the internal operator data type is not Qobj, then there could be signicant overhead in the conversion, and so this should be avoided during pulse optimisation.; If custom sub-classes are developed that use Qobj properties and methods (e.g. partial trace), then it is very likely that it will be more effic",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:4659,Energy Efficiency,efficient,efficient,4659,"charge and tunneling operators.; Time-dependent Cython code is now easier to read and debug. Control modules. The internal state / quantum operator data type can now be either Qobj or ndarray; Previous only ndarray was possible. This now opens up possibility of using Qobj methods in fidelity calculations; The attributes and functions that return these operators are now preceded by an underscore, to indicate that the data type could change depending on the configuration options.; In most cases these functions were for internal processing only anyway, and should have been ‘private’.; Accessors to the properties that could be useful outside of the library have been added. These always return Qobj. If the internal operator data type is not Qobj, then there could be signicant overhead in the conversion, and so this should be avoided during pulse optimisation.; If custom sub-classes are developed that use Qobj properties and methods (e.g. partial trace), then it is very likely that it will be more efficient to set the internal data type to Qobj.; The internal operator data will be chosen automatically based on the size and sparsity of the dynamics generator. It can be forced by setting dynamics.oper_dtype = <type>; Note this can be done by passing dyn_params={'oper_dtype':<type>} in any of the pulseoptim functions.; Some other properties and methods were renamed at the same time. A full list is given here. All modules; - function: set_log_level -> property: log_level; dynamics functions; _init_lists now _init_evo; get_num_ctrls now property: num_ctrls; get_owd_evo_target now property: onto_evo_target; combine_dyn_gen now _combine_dyn_gen (no longer returns a value); get_dyn_gen now _get_phased_dyn_gen; get_ctrl_den_gen now _get_phased_ctrl_dyn_gen; ensure_decomp_curr now _ensure_decomp_curr; spectral_decomp now _spectral_decomp. dynamics properties; evo_init2t now _fwd_evo (fwd_evo as Qobj); evo_t2end now _onwd_evo (onwd_evo as Qobj); evo_t2targ now _onto_evo (onto_evo as ",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:9071,Energy Efficiency,power,power,9071,"ntract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories when using only 1 CPU.; Fix bug in parsing of time-dependent Hamiltonian/collapse operator arguments; that occurred when the args argument is not a dictionary.; Fix bug in internal _version2int function that cause a failure when parsingthe version number of the Cython package. Version 3.0.0 (July 17, 2014):¶. New Features¶. New module qutip.stochastic ",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:12430,Energy Efficiency,power,power,12430,"w; prefixed with plot_ (e.g., plot_fock_distribution). The; plot_wigner and plot_wigner_fock_distribution now supports 3D views; in addition to contour views.; New API and new functions for working with spin operators and states,; including for example spin_Jx, spin_Jy, spin_Jz and; spin_state, spin_coherent.; The expect function now supports a list of operators, in addition to the; previously supported list of states.; Simplified creation of qubit states using ket function.; The module qutip.cyQ has been renamed to qutip.cy and the sparse; matrix-vector functions spmv and spmv1d has been combined into one; function spmv. New functions for operating directly on the underlaying; sparse CSR data have been added (e.g., spmv_csr). Performance; improvements. New and improved Cython functions for calculating expectation; values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which n",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:17716,Energy Efficiency,efficient,efficient,17716," of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying ",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:1751,Integrability,depend,dependent,1751,":; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). Developers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs »; Change Log. Change Log¶. Version 4.1.0 (in dev)¶. Improvements¶; Core libraries. erf supported function in td strings. QIP. Gate object can be used to instantiate another identical gate. Version 4.0.2 (January 5, 2017)¶. Bug Fixes¶. td files no longer left behind by correlation tests; Various fast sparse fixes. Version 4.0.0 (December 22, 2016)¶. Improvements¶; Core libraries. MAJOR FEATURE: Fast sparse: New subclass of csr_matrix added that overrides commonly used methods to avoid certain checks that incurr execution cost. All Qobj.data now fast_csr_matrix; HEOM performance enhancements; spmv now faster; mcsolve codegen further optimised. Control modules. Time dependent drift (through list of pwc dynamics generators); memory optimisation options provided for control.dynamics. Bug Fixes¶. recompilation of pyx files on first import removed; tau array in control.pulseoptim funcs now works. Version 3.2.0 (Never officially released)¶. New Features¶; Core libraries. MAJOR FEATURE: Non-Markovian solvers: Hierarchy (Added by Neill Lambert), Memory-Cascade, and Transfer-Tensor methods.; MAJOR FEATURE: Default steady state solver now up to 100x faster using the Intel Pardiso library under the Anaconda and Intel Python distributions.; The default Wigner function now uses a Clenshaw summation algorithm to evaluate a polynomial series that is applicable for any number of exciations (previous limitation was ~50 quanta), and is ~3x faster than before. (Added by Denis Vasilyev); Can now define a given eigen spectrum for random Hermitian and density operators.; The Qobj expm method now uses the equivilent SciPy routine, and performs a much faster exp operation if the matrix is diagonal.; One can now build ze",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:2704,Integrability,rout,routine,2704,"er optimised. Control modules. Time dependent drift (through list of pwc dynamics generators); memory optimisation options provided for control.dynamics. Bug Fixes¶. recompilation of pyx files on first import removed; tau array in control.pulseoptim funcs now works. Version 3.2.0 (Never officially released)¶. New Features¶; Core libraries. MAJOR FEATURE: Non-Markovian solvers: Hierarchy (Added by Neill Lambert), Memory-Cascade, and Transfer-Tensor methods.; MAJOR FEATURE: Default steady state solver now up to 100x faster using the Intel Pardiso library under the Anaconda and Intel Python distributions.; The default Wigner function now uses a Clenshaw summation algorithm to evaluate a polynomial series that is applicable for any number of exciations (previous limitation was ~50 quanta), and is ~3x faster than before. (Added by Denis Vasilyev); Can now define a given eigen spectrum for random Hermitian and density operators.; The Qobj expm method now uses the equivilent SciPy routine, and performs a much faster exp operation if the matrix is diagonal.; One can now build zero operators using the qzero function. Control modules. MAJOR FEATURE: CRAB algorithm added; This is an alternative to the GRAPE algorithm, which allows for analytical control functions, which means that experimental constraints can more easily be added into optimisation.; See tutorial notebook for full information. Improvements¶; Core libraries. Two-time correlation functions can now be calculated for fully time-dependent Hamiltonians and collapse operators. (Added by Kevin Fischer); The code for the inverse-power method for the steady state solver has been simplified.; Bloch-Redfield tensor creation is now up to an order of magnitude faster. (Added by Johannes Feist); Q.transform now works properly for arrays directly from sp_eigs (or eig).; Q.groundstate now checks for degeneracy.; Added sinm and cosm methods to the Qobj class.; Added charge and tunneling operators.; Time-dependent Cython code is n",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:3219,Integrability,depend,dependent,3219,"state solver now up to 100x faster using the Intel Pardiso library under the Anaconda and Intel Python distributions.; The default Wigner function now uses a Clenshaw summation algorithm to evaluate a polynomial series that is applicable for any number of exciations (previous limitation was ~50 quanta), and is ~3x faster than before. (Added by Denis Vasilyev); Can now define a given eigen spectrum for random Hermitian and density operators.; The Qobj expm method now uses the equivilent SciPy routine, and performs a much faster exp operation if the matrix is diagonal.; One can now build zero operators using the qzero function. Control modules. MAJOR FEATURE: CRAB algorithm added; This is an alternative to the GRAPE algorithm, which allows for analytical control functions, which means that experimental constraints can more easily be added into optimisation.; See tutorial notebook for full information. Improvements¶; Core libraries. Two-time correlation functions can now be calculated for fully time-dependent Hamiltonians and collapse operators. (Added by Kevin Fischer); The code for the inverse-power method for the steady state solver has been simplified.; Bloch-Redfield tensor creation is now up to an order of magnitude faster. (Added by Johannes Feist); Q.transform now works properly for arrays directly from sp_eigs (or eig).; Q.groundstate now checks for degeneracy.; Added sinm and cosm methods to the Qobj class.; Added charge and tunneling operators.; Time-dependent Cython code is now easier to read and debug. Control modules. The internal state / quantum operator data type can now be either Qobj or ndarray; Previous only ndarray was possible. This now opens up possibility of using Qobj methods in fidelity calculations; The attributes and functions that return these operators are now preceded by an underscore, to indicate that the data type could change depending on the configuration options.; In most cases these functions were for internal processing only anyway, ",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:3690,Integrability,depend,dependent,3690,"and performs a much faster exp operation if the matrix is diagonal.; One can now build zero operators using the qzero function. Control modules. MAJOR FEATURE: CRAB algorithm added; This is an alternative to the GRAPE algorithm, which allows for analytical control functions, which means that experimental constraints can more easily be added into optimisation.; See tutorial notebook for full information. Improvements¶; Core libraries. Two-time correlation functions can now be calculated for fully time-dependent Hamiltonians and collapse operators. (Added by Kevin Fischer); The code for the inverse-power method for the steady state solver has been simplified.; Bloch-Redfield tensor creation is now up to an order of magnitude faster. (Added by Johannes Feist); Q.transform now works properly for arrays directly from sp_eigs (or eig).; Q.groundstate now checks for degeneracy.; Added sinm and cosm methods to the Qobj class.; Added charge and tunneling operators.; Time-dependent Cython code is now easier to read and debug. Control modules. The internal state / quantum operator data type can now be either Qobj or ndarray; Previous only ndarray was possible. This now opens up possibility of using Qobj methods in fidelity calculations; The attributes and functions that return these operators are now preceded by an underscore, to indicate that the data type could change depending on the configuration options.; In most cases these functions were for internal processing only anyway, and should have been ‘private’.; Accessors to the properties that could be useful outside of the library have been added. These always return Qobj. If the internal operator data type is not Qobj, then there could be signicant overhead in the conversion, and so this should be avoided during pulse optimisation.; If custom sub-classes are developed that use Qobj properties and methods (e.g. partial trace), then it is very likely that it will be more efficient to set the internal data type to Qobj.; The i",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:4095,Integrability,depend,depending,4095,"xperimental constraints can more easily be added into optimisation.; See tutorial notebook for full information. Improvements¶; Core libraries. Two-time correlation functions can now be calculated for fully time-dependent Hamiltonians and collapse operators. (Added by Kevin Fischer); The code for the inverse-power method for the steady state solver has been simplified.; Bloch-Redfield tensor creation is now up to an order of magnitude faster. (Added by Johannes Feist); Q.transform now works properly for arrays directly from sp_eigs (or eig).; Q.groundstate now checks for degeneracy.; Added sinm and cosm methods to the Qobj class.; Added charge and tunneling operators.; Time-dependent Cython code is now easier to read and debug. Control modules. The internal state / quantum operator data type can now be either Qobj or ndarray; Previous only ndarray was possible. This now opens up possibility of using Qobj methods in fidelity calculations; The attributes and functions that return these operators are now preceded by an underscore, to indicate that the data type could change depending on the configuration options.; In most cases these functions were for internal processing only anyway, and should have been ‘private’.; Accessors to the properties that could be useful outside of the library have been added. These always return Qobj. If the internal operator data type is not Qobj, then there could be signicant overhead in the conversion, and so this should be avoided during pulse optimisation.; If custom sub-classes are developed that use Qobj properties and methods (e.g. partial trace), then it is very likely that it will be more efficient to set the internal data type to Qobj.; The internal operator data will be chosen automatically based on the size and sparsity of the dynamics generator. It can be forced by setting dynamics.oper_dtype = <type>; Note this can be done by passing dyn_params={'oper_dtype':<type>} in any of the pulseoptim functions.; Some other properties a",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:6533,Integrability,depend,dependent,6533,"es; evo_init2t now _fwd_evo (fwd_evo as Qobj); evo_t2end now _onwd_evo (onwd_evo as Qobj); evo_t2targ now _onto_evo (onto_evo as Qobj). fidcomp properties; uses_evo_t2end now uses_onwd_evo; uses_evo_t2targ now uses_onto_evo; set_phase_option function now property phase_option. propcomp properties; grad_exact (now read only). propcomp functions; compute_propagator now _compute_propagator; compute_diff_prop now _compute_diff_prop; compute_prop_grad now _compute_prop_grad. tslotcomp functions; get_timeslot_for_fidelity_calc now _get_timeslot_for_fidelity_calc. Miscellaneous. QuTiP Travis CI tests now use the Anaconda distribution.; The about box and ipynb version_table now display addition system information.; Updated Cython cleanup to remove depreciation warning in sysconfig.; Updated ipynb_parallel to look for ipyparallel module in V4 of the notebooks. Bug Fixes¶. Fixes for countstat and psuedo-inverse functions; Fixed Qobj division tests on 32-bit systems.; Removed extra call to Python in time-dependent Cython code.; Fixed issue with repeated Bloch sphere saving.; Fixed T_0 triplet state not normalized properly. (Fixed by Eric Hontz); Simplified compiler flags (support for ARM systems).; Fixed a decoding error in qload.; Fixed issue using complex.h math and np.kind_t variables.; Corrected output states mismatch for ntraj=1 in the mcf90 solver.; Qobj data is now copied by default to avoid a bug in multiplication. (Fixed by Richard Brierley); Fixed bug overwriting hardware_info in __init__. (Fixed by Johannes Feist); Restored ability to explicity set Q.isherm, Q.type, and Q.superrep.; Fixed integer depreciation warnings from NumPy.; Qobj * (dense vec) would result in a recursive loop.; Fixed args=None -> args={} in correlation functions to be compatible with mesolve.; Fixed depreciation warnings in mcsolve.; Fixed neagtive only real parts in rand_ket.; Fixed a complicated list-cast-map-list antipattern in super operator reps. (Fixed by Stefan Krastanov); Fixed incorrec",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:8376,Integrability,depend,dependent,8376,"_ket.; Fixed a complicated list-cast-map-list antipattern in super operator reps. (Fixed by Stefan Krastanov); Fixed incorrect isherm for sigmam spin operator.; Fixed the dims when using final_state_output in mesolve and sesolve. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in co",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:8631,Integrability,integrat,integration,8631,"rsion 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator r",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:8740,Integrability,depend,dependent,8740,"quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories ",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:8976,Integrability,depend,dependent,8976,"operator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories when using only 1 CPU.; Fix bug in parsing of time-dependent Hamiltonian/collapse operator arguments; that occurred when the args argument is not a dictionary.; Fix bug in internal _version2int function that cause a failure when parsingthe version number of the Cython package",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:9337,Integrability,depend,dependent,9337,"Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories when using only 1 CPU.; Fix bug in parsing of time-dependent Hamiltonian/collapse operator arguments; that occurred when the args argument is not a dictionary.; Fix bug in internal _version2int function that cause a failure when parsingthe version number of the Cython package. Version 3.0.0 (July 17, 2014):¶. New Features¶. New module qutip.stochastic with stochastic master equation and stochastic; Schrödinger equation solvers.; Expanded steady state solvers. The function steady has been deprecated in; favor of steadystate. The steadystate solver no longer use umfpack by; default. New pre-processing methods for reordering and balancing the linear; equa",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:9762,Integrability,depend,dependent,9762,"n now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories when using only 1 CPU.; Fix bug in parsing of time-dependent Hamiltonian/collapse operator arguments; that occurred when the args argument is not a dictionary.; Fix bug in internal _version2int function that cause a failure when parsingthe version number of the Cython package. Version 3.0.0 (July 17, 2014):¶. New Features¶. New module qutip.stochastic with stochastic master equation and stochastic; Schrödinger equation solvers.; Expanded steady state solvers. The function steady has been deprecated in; favor of steadystate. The steadystate solver no longer use umfpack by; default. New pre-processing methods for reordering and balancing the linear; equation system used in direct solution of the steady state.; New module qutip.qip with utilities for quantum information processing,; including pre-defined quantum gates along with functions for expanding; arbitrary 1, 2, and 3 qubit gates to N qubit registers, circuit; representations, library of quantum algorithms, and basic physical models for; some common QIP architectures.; New module qutip.distributions with unified API for ",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:10870,Integrability,depend,dependent,10870,"ure when parsingthe version number of the Cython package. Version 3.0.0 (July 17, 2014):¶. New Features¶. New module qutip.stochastic with stochastic master equation and stochastic; Schrödinger equation solvers.; Expanded steady state solvers. The function steady has been deprecated in; favor of steadystate. The steadystate solver no longer use umfpack by; default. New pre-processing methods for reordering and balancing the linear; equation system used in direct solution of the steady state.; New module qutip.qip with utilities for quantum information processing,; including pre-defined quantum gates along with functions for expanding; arbitrary 1, 2, and 3 qubit gates to N qubit registers, circuit; representations, library of quantum algorithms, and basic physical models for; some common QIP architectures.; New module qutip.distributions with unified API for working with; distribution functions.; New format for defining time-dependent Hamiltonians and collapse operators,; using a pre-calculated numpy array that specifies the values of the; Qobj-coefficients for each time step.; New functions for working with different superoperator representations,; including Kraus and Chi representation.; New functions for visualizing quantum states using Qubism and Schimdt plots:; plot_qubism and plot_schmidt.; Dynamics solver now support taking argument e_ops (expectation value; operators) in dictionary form.; Public plotting functions from the qutip.visualization module are now; prefixed with plot_ (e.g., plot_fock_distribution). The; plot_wigner and plot_wigner_fock_distribution now supports 3D views; in addition to contour views.; New API and new functions for working with spin operators and states,; including for example spin_Jx, spin_Jy, spin_Jz and; spin_state, spin_coherent.; The expect function now supports a list of operators, in addition to the; previously supported list of states.; Simplified creation of qubit states using ket function.; The module qutip.cyQ has been re",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:13165,Integrability,depend,dependent,13165," values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:13228,Integrability,depend,depend,13228," values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:14209,Integrability,integrat,integration,14209,"back functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to ",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:15128,Integrability,depend,dependent,15128," scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gates.; Functions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:16327,Integrability,depend,dependence,16327,"ed on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gates.; Functions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and par",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:16755,Integrability,rout,routines,16755,"s as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum obje",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:17020,Integrability,depend,dependent,17020,"urns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:17096,Integrability,depend,dependent,17096,".; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum obj",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:17211,Integrability,depend,dependent,17211,"ow correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can h",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:17535,Integrability,depend,dependent,17535,"rmitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single functi",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:1663,Modifiability,enhance,enhancements,1663,"0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). Developers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs »; Change Log. Change Log¶. Version 4.1.0 (in dev)¶. Improvements¶; Core libraries. erf supported function in td strings. QIP. Gate object can be used to instantiate another identical gate. Version 4.0.2 (January 5, 2017)¶. Bug Fixes¶. td files no longer left behind by correlation tests; Various fast sparse fixes. Version 4.0.0 (December 22, 2016)¶. Improvements¶; Core libraries. MAJOR FEATURE: Fast sparse: New subclass of csr_matrix added that overrides commonly used methods to avoid certain checks that incurr execution cost. All Qobj.data now fast_csr_matrix; HEOM performance enhancements; spmv now faster; mcsolve codegen further optimised. Control modules. Time dependent drift (through list of pwc dynamics generators); memory optimisation options provided for control.dynamics. Bug Fixes¶. recompilation of pyx files on first import removed; tau array in control.pulseoptim funcs now works. Version 3.2.0 (Never officially released)¶. New Features¶; Core libraries. MAJOR FEATURE: Non-Markovian solvers: Hierarchy (Added by Neill Lambert), Memory-Cascade, and Transfer-Tensor methods.; MAJOR FEATURE: Default steady state solver now up to 100x faster using the Intel Pardiso library under the Anaconda and Intel Python distributions.; The default Wigner function now uses a Clenshaw summation algorithm to evaluate a polynomial series that is applicable for any number of exciations (previous limitation was ~50 quanta), and is ~3x faster than before. (Added by Denis Vasilyev); Can now define a given eigen spectrum for random Hermitian and density operators.; The Qobj expm method ",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:4112,Modifiability,config,configuration,4112,"xperimental constraints can more easily be added into optimisation.; See tutorial notebook for full information. Improvements¶; Core libraries. Two-time correlation functions can now be calculated for fully time-dependent Hamiltonians and collapse operators. (Added by Kevin Fischer); The code for the inverse-power method for the steady state solver has been simplified.; Bloch-Redfield tensor creation is now up to an order of magnitude faster. (Added by Johannes Feist); Q.transform now works properly for arrays directly from sp_eigs (or eig).; Q.groundstate now checks for degeneracy.; Added sinm and cosm methods to the Qobj class.; Added charge and tunneling operators.; Time-dependent Cython code is now easier to read and debug. Control modules. The internal state / quantum operator data type can now be either Qobj or ndarray; Previous only ndarray was possible. This now opens up possibility of using Qobj methods in fidelity calculations; The attributes and functions that return these operators are now preceded by an underscore, to indicate that the data type could change depending on the configuration options.; In most cases these functions were for internal processing only anyway, and should have been ‘private’.; Accessors to the properties that could be useful outside of the library have been added. These always return Qobj. If the internal operator data type is not Qobj, then there could be signicant overhead in the conversion, and so this should be avoided during pulse optimisation.; If custom sub-classes are developed that use Qobj properties and methods (e.g. partial trace), then it is very likely that it will be more efficient to set the internal data type to Qobj.; The internal operator data will be chosen automatically based on the size and sparsity of the dynamics generator. It can be forced by setting dynamics.oper_dtype = <type>; Note this can be done by passing dyn_params={'oper_dtype':<type>} in any of the pulseoptim functions.; Some other properties a",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:6812,Modifiability,variab,variables,6812,"operties; grad_exact (now read only). propcomp functions; compute_propagator now _compute_propagator; compute_diff_prop now _compute_diff_prop; compute_prop_grad now _compute_prop_grad. tslotcomp functions; get_timeslot_for_fidelity_calc now _get_timeslot_for_fidelity_calc. Miscellaneous. QuTiP Travis CI tests now use the Anaconda distribution.; The about box and ipynb version_table now display addition system information.; Updated Cython cleanup to remove depreciation warning in sysconfig.; Updated ipynb_parallel to look for ipyparallel module in V4 of the notebooks. Bug Fixes¶. Fixes for countstat and psuedo-inverse functions; Fixed Qobj division tests on 32-bit systems.; Removed extra call to Python in time-dependent Cython code.; Fixed issue with repeated Bloch sphere saving.; Fixed T_0 triplet state not normalized properly. (Fixed by Eric Hontz); Simplified compiler flags (support for ARM systems).; Fixed a decoding error in qload.; Fixed issue using complex.h math and np.kind_t variables.; Corrected output states mismatch for ntraj=1 in the mcf90 solver.; Qobj data is now copied by default to avoid a bug in multiplication. (Fixed by Richard Brierley); Fixed bug overwriting hardware_info in __init__. (Fixed by Johannes Feist); Restored ability to explicity set Q.isherm, Q.type, and Q.superrep.; Fixed integer depreciation warnings from NumPy.; Qobj * (dense vec) would result in a recursive loop.; Fixed args=None -> args={} in correlation functions to be compatible with mesolve.; Fixed depreciation warnings in mcsolve.; Fixed neagtive only real parts in rand_ket.; Fixed a complicated list-cast-map-list antipattern in super operator reps. (Fixed by Stefan Krastanov); Fixed incorrect isherm for sigmam spin operator.; Fixed the dims when using final_state_output in mesolve and sesolve. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matpl",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:8190,Modifiability,enhance,enhanced,8190,"lt in a recursive loop.; Fixed args=None -> args={} in correlation functions to be compatible with mesolve.; Fixed depreciation warnings in mcsolve.; Fixed neagtive only real parts in rand_ket.; Fixed a complicated list-cast-map-list antipattern in super operator reps. (Fixed by Stefan Krastanov); Fixed incorrect isherm for sigmam spin operator.; Fixed the dims when using final_state_output in mesolve and sesolve. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:14461,Modifiability,variab,variable,14461,"ata, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gate",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:1651,Performance,perform,performance,1651,"0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). Developers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs »; Change Log. Change Log¶. Version 4.1.0 (in dev)¶. Improvements¶; Core libraries. erf supported function in td strings. QIP. Gate object can be used to instantiate another identical gate. Version 4.0.2 (January 5, 2017)¶. Bug Fixes¶. td files no longer left behind by correlation tests; Various fast sparse fixes. Version 4.0.0 (December 22, 2016)¶. Improvements¶; Core libraries. MAJOR FEATURE: Fast sparse: New subclass of csr_matrix added that overrides commonly used methods to avoid certain checks that incurr execution cost. All Qobj.data now fast_csr_matrix; HEOM performance enhancements; spmv now faster; mcsolve codegen further optimised. Control modules. Time dependent drift (through list of pwc dynamics generators); memory optimisation options provided for control.dynamics. Bug Fixes¶. recompilation of pyx files on first import removed; tau array in control.pulseoptim funcs now works. Version 3.2.0 (Never officially released)¶. New Features¶; Core libraries. MAJOR FEATURE: Non-Markovian solvers: Hierarchy (Added by Neill Lambert), Memory-Cascade, and Transfer-Tensor methods.; MAJOR FEATURE: Default steady state solver now up to 100x faster using the Intel Pardiso library under the Anaconda and Intel Python distributions.; The default Wigner function now uses a Clenshaw summation algorithm to evaluate a polynomial series that is applicable for any number of exciations (previous limitation was ~50 quanta), and is ~3x faster than before. (Added by Denis Vasilyev); Can now define a given eigen spectrum for random Hermitian and density operators.; The Qobj expm method ",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:2717,Performance,perform,performs,2717,"er optimised. Control modules. Time dependent drift (through list of pwc dynamics generators); memory optimisation options provided for control.dynamics. Bug Fixes¶. recompilation of pyx files on first import removed; tau array in control.pulseoptim funcs now works. Version 3.2.0 (Never officially released)¶. New Features¶; Core libraries. MAJOR FEATURE: Non-Markovian solvers: Hierarchy (Added by Neill Lambert), Memory-Cascade, and Transfer-Tensor methods.; MAJOR FEATURE: Default steady state solver now up to 100x faster using the Intel Pardiso library under the Anaconda and Intel Python distributions.; The default Wigner function now uses a Clenshaw summation algorithm to evaluate a polynomial series that is applicable for any number of exciations (previous limitation was ~50 quanta), and is ~3x faster than before. (Added by Denis Vasilyev); Can now define a given eigen spectrum for random Hermitian and density operators.; The Qobj expm method now uses the equivilent SciPy routine, and performs a much faster exp operation if the matrix is diagonal.; One can now build zero operators using the qzero function. Control modules. MAJOR FEATURE: CRAB algorithm added; This is an alternative to the GRAPE algorithm, which allows for analytical control functions, which means that experimental constraints can more easily be added into optimisation.; See tutorial notebook for full information. Improvements¶; Core libraries. Two-time correlation functions can now be calculated for fully time-dependent Hamiltonians and collapse operators. (Added by Kevin Fischer); The code for the inverse-power method for the steady state solver has been simplified.; Bloch-Redfield tensor creation is now up to an order of magnitude faster. (Added by Johannes Feist); Q.transform now works properly for arrays directly from sp_eigs (or eig).; Q.groundstate now checks for degeneracy.; Added sinm and cosm methods to the Qobj class.; Added charge and tunneling operators.; Time-dependent Cython code is n",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:8872,Performance,perform,performance,8872,"r counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories when using only 1 CPU.; Fix bug in parsing of time-dependent Hamiltonian/collapse operator arguments; that occurred when the args argument is not a dictionary.; Fix bug in internal _version",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:12321,Performance,concurren,concurrence,12321,".; Public plotting functions from the qutip.visualization module are now; prefixed with plot_ (e.g., plot_fock_distribution). The; plot_wigner and plot_wigner_fock_distribution now supports 3D views; in addition to contour views.; New API and new functions for working with spin operators and states,; including for example spin_Jx, spin_Jy, spin_Jz and; spin_state, spin_coherent.; The expect function now supports a list of operators, in addition to the; previously supported list of states.; Simplified creation of qubit states using ket function.; The module qutip.cyQ has been renamed to qutip.cy and the sparse; matrix-vector functions spmv and spmv1d has been combined into one; function spmv. New functions for operating directly on the underlaying; sparse CSR data have been added (e.g., spmv_csr). Performance; improvements. New and improved Cython functions for calculating expectation; values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Imp",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:13378,Performance,optimiz,optimized,13378,"two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose fu",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:14044,Performance,perform,performance,14044,"; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualiza",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:14952,Performance,perform,performance,14952,"stances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gates.; Functions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is ",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:16677,Performance,perform,performance,16677,"s as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum obje",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:18166,Performance,optimiz,optimized,18166,"ed to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying the installation.; Demos window now lets you copy and paste code from each example. Version 1.1.4 (May 28, 2012):¶. Bug Fixes:¶. Fixed bug pointed out by Brendan Abolins.; Qobj.tr() returns zero-dim ndarray instead of float or complex.; Updated factorial import for scipy version 0.10+. Version 1.1.3 (November 21, 2011):¶. New Functions:¶. Allow custom naming of Bloch sphere. Bug Fixes:¶. Fixed text alignment issues in AboutBox.; Added fix for SciPy V>0.10 where factorial was moved to scipy.",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:18392,Performance,concurren,concurrence,18392,"t; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying the installation.; Demos window now lets you copy and paste code from each example. Version 1.1.4 (May 28, 2012):¶. Bug Fixes:¶. Fixed bug pointed out by Brendan Abolins.; Qobj.tr() returns zero-dim ndarray instead of float or complex.; Updated factorial import for scipy version 0.10+. Version 1.1.3 (November 21, 2011):¶. New Functions:¶. Allow custom naming of Bloch sphere. Bug Fixes:¶. Fixed text alignment issues in AboutBox.; Added fix for SciPy V>0.10 where factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts a",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:20213,Performance,concurren,concurrence,20213," to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Jan 11, 2017. . Built with Sphinx using a theme provided ",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:20405,Performance,load,loading,20405,"utput.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Jan 11, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:1562,Safety,avoid,avoid,1562,"vements. Version 2.2.0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). Developers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs »; Change Log. Change Log¶. Version 4.1.0 (in dev)¶. Improvements¶; Core libraries. erf supported function in td strings. QIP. Gate object can be used to instantiate another identical gate. Version 4.0.2 (January 5, 2017)¶. Bug Fixes¶. td files no longer left behind by correlation tests; Various fast sparse fixes. Version 4.0.0 (December 22, 2016)¶. Improvements¶; Core libraries. MAJOR FEATURE: Fast sparse: New subclass of csr_matrix added that overrides commonly used methods to avoid certain checks that incurr execution cost. All Qobj.data now fast_csr_matrix; HEOM performance enhancements; spmv now faster; mcsolve codegen further optimised. Control modules. Time dependent drift (through list of pwc dynamics generators); memory optimisation options provided for control.dynamics. Bug Fixes¶. recompilation of pyx files on first import removed; tau array in control.pulseoptim funcs now works. Version 3.2.0 (Never officially released)¶. New Features¶; Core libraries. MAJOR FEATURE: Non-Markovian solvers: Hierarchy (Added by Neill Lambert), Memory-Cascade, and Transfer-Tensor methods.; MAJOR FEATURE: Default steady state solver now up to 100x faster using the Intel Pardiso library under the Anaconda and Intel Python distributions.; The default Wigner function now uses a Clenshaw summation algorithm to evaluate a polynomial series that is applicable for any number of exciations (previous limitation was ~50 quanta), and is ~3x faster than ",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:4484,Safety,avoid,avoided,4484,"magnitude faster. (Added by Johannes Feist); Q.transform now works properly for arrays directly from sp_eigs (or eig).; Q.groundstate now checks for degeneracy.; Added sinm and cosm methods to the Qobj class.; Added charge and tunneling operators.; Time-dependent Cython code is now easier to read and debug. Control modules. The internal state / quantum operator data type can now be either Qobj or ndarray; Previous only ndarray was possible. This now opens up possibility of using Qobj methods in fidelity calculations; The attributes and functions that return these operators are now preceded by an underscore, to indicate that the data type could change depending on the configuration options.; In most cases these functions were for internal processing only anyway, and should have been ‘private’.; Accessors to the properties that could be useful outside of the library have been added. These always return Qobj. If the internal operator data type is not Qobj, then there could be signicant overhead in the conversion, and so this should be avoided during pulse optimisation.; If custom sub-classes are developed that use Qobj properties and methods (e.g. partial trace), then it is very likely that it will be more efficient to set the internal data type to Qobj.; The internal operator data will be chosen automatically based on the size and sparsity of the dynamics generator. It can be forced by setting dynamics.oper_dtype = <type>; Note this can be done by passing dyn_params={'oper_dtype':<type>} in any of the pulseoptim functions.; Some other properties and methods were renamed at the same time. A full list is given here. All modules; - function: set_log_level -> property: log_level; dynamics functions; _init_lists now _init_evo; get_num_ctrls now property: num_ctrls; get_owd_evo_target now property: onto_evo_target; combine_dyn_gen now _combine_dyn_gen (no longer returns a value); get_dyn_gen now _get_phased_dyn_gen; get_ctrl_den_gen now _get_phased_ctrl_dyn_gen; ensure_decom",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:6929,Safety,avoid,avoid,6929,"iff_prop now _compute_diff_prop; compute_prop_grad now _compute_prop_grad. tslotcomp functions; get_timeslot_for_fidelity_calc now _get_timeslot_for_fidelity_calc. Miscellaneous. QuTiP Travis CI tests now use the Anaconda distribution.; The about box and ipynb version_table now display addition system information.; Updated Cython cleanup to remove depreciation warning in sysconfig.; Updated ipynb_parallel to look for ipyparallel module in V4 of the notebooks. Bug Fixes¶. Fixes for countstat and psuedo-inverse functions; Fixed Qobj division tests on 32-bit systems.; Removed extra call to Python in time-dependent Cython code.; Fixed issue with repeated Bloch sphere saving.; Fixed T_0 triplet state not normalized properly. (Fixed by Eric Hontz); Simplified compiler flags (support for ARM systems).; Fixed a decoding error in qload.; Fixed issue using complex.h math and np.kind_t variables.; Corrected output states mismatch for ntraj=1 in the mcf90 solver.; Qobj data is now copied by default to avoid a bug in multiplication. (Fixed by Richard Brierley); Fixed bug overwriting hardware_info in __init__. (Fixed by Johannes Feist); Restored ability to explicity set Q.isherm, Q.type, and Q.superrep.; Fixed integer depreciation warnings from NumPy.; Qobj * (dense vec) would result in a recursive loop.; Fixed args=None -> args={} in correlation functions to be compatible with mesolve.; Fixed depreciation warnings in mcsolve.; Fixed neagtive only real parts in rand_ket.; Fixed a complicated list-cast-map-list antipattern in super operator reps. (Fixed by Stefan Krastanov); Fixed incorrect isherm for sigmam spin operator.; Fixed the dims when using final_state_output in mesolve and sesolve. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; S",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:13471,Safety,avoid,avoiding,13471,"two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose fu",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:1360,Testability,test,tests,1360,"ures; Improvements; Bug Fixes. Version 3.1.0 (January 1, 2015):; New Features; Bug Fixes. Version 3.0.1 (Aug 5, 2014):; Bug Fixes. Version 3.0.0 (July 17, 2014):; New Features; Improvements. Version 2.2.0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). Developers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs »; Change Log. Change Log¶. Version 4.1.0 (in dev)¶. Improvements¶; Core libraries. erf supported function in td strings. QIP. Gate object can be used to instantiate another identical gate. Version 4.0.2 (January 5, 2017)¶. Bug Fixes¶. td files no longer left behind by correlation tests; Various fast sparse fixes. Version 4.0.0 (December 22, 2016)¶. Improvements¶; Core libraries. MAJOR FEATURE: Fast sparse: New subclass of csr_matrix added that overrides commonly used methods to avoid certain checks that incurr execution cost. All Qobj.data now fast_csr_matrix; HEOM performance enhancements; spmv now faster; mcsolve codegen further optimised. Control modules. Time dependent drift (through list of pwc dynamics generators); memory optimisation options provided for control.dynamics. Bug Fixes¶. recompilation of pyx files on first import removed; tau array in control.pulseoptim funcs now works. Version 3.2.0 (Never officially released)¶. New Features¶; Core libraries. MAJOR FEATURE: Non-Markovian solvers: Hierarchy (Added by Neill Lambert), Memory-Cascade, and Transfer-Tensor methods.; MAJOR FEATURE: Default steady state solver now up to 100x faster using the Intel Pardiso library under the Anaconda and Intel Python distributions.; The default Wigner function",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:6119,Testability,test,tests,6119,"g_level; dynamics functions; _init_lists now _init_evo; get_num_ctrls now property: num_ctrls; get_owd_evo_target now property: onto_evo_target; combine_dyn_gen now _combine_dyn_gen (no longer returns a value); get_dyn_gen now _get_phased_dyn_gen; get_ctrl_den_gen now _get_phased_ctrl_dyn_gen; ensure_decomp_curr now _ensure_decomp_curr; spectral_decomp now _spectral_decomp. dynamics properties; evo_init2t now _fwd_evo (fwd_evo as Qobj); evo_t2end now _onwd_evo (onwd_evo as Qobj); evo_t2targ now _onto_evo (onto_evo as Qobj). fidcomp properties; uses_evo_t2end now uses_onwd_evo; uses_evo_t2targ now uses_onto_evo; set_phase_option function now property phase_option. propcomp properties; grad_exact (now read only). propcomp functions; compute_propagator now _compute_propagator; compute_diff_prop now _compute_diff_prop; compute_prop_grad now _compute_prop_grad. tslotcomp functions; get_timeslot_for_fidelity_calc now _get_timeslot_for_fidelity_calc. Miscellaneous. QuTiP Travis CI tests now use the Anaconda distribution.; The about box and ipynb version_table now display addition system information.; Updated Cython cleanup to remove depreciation warning in sysconfig.; Updated ipynb_parallel to look for ipyparallel module in V4 of the notebooks. Bug Fixes¶. Fixes for countstat and psuedo-inverse functions; Fixed Qobj division tests on 32-bit systems.; Removed extra call to Python in time-dependent Cython code.; Fixed issue with repeated Bloch sphere saving.; Fixed T_0 triplet state not normalized properly. (Fixed by Eric Hontz); Simplified compiler flags (support for ARM systems).; Fixed a decoding error in qload.; Fixed issue using complex.h math and np.kind_t variables.; Corrected output states mismatch for ntraj=1 in the mcf90 solver.; Qobj data is now copied by default to avoid a bug in multiplication. (Fixed by Richard Brierley); Fixed bug overwriting hardware_info in __init__. (Fixed by Johannes Feist); Restored ability to explicity set Q.isherm, Q.type, and Q.superrep",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:6470,Testability,test,tests,6470,"w _ensure_decomp_curr; spectral_decomp now _spectral_decomp. dynamics properties; evo_init2t now _fwd_evo (fwd_evo as Qobj); evo_t2end now _onwd_evo (onwd_evo as Qobj); evo_t2targ now _onto_evo (onto_evo as Qobj). fidcomp properties; uses_evo_t2end now uses_onwd_evo; uses_evo_t2targ now uses_onto_evo; set_phase_option function now property phase_option. propcomp properties; grad_exact (now read only). propcomp functions; compute_propagator now _compute_propagator; compute_diff_prop now _compute_diff_prop; compute_prop_grad now _compute_prop_grad. tslotcomp functions; get_timeslot_for_fidelity_calc now _get_timeslot_for_fidelity_calc. Miscellaneous. QuTiP Travis CI tests now use the Anaconda distribution.; The about box and ipynb version_table now display addition system information.; Updated Cython cleanup to remove depreciation warning in sysconfig.; Updated ipynb_parallel to look for ipyparallel module in V4 of the notebooks. Bug Fixes¶. Fixes for countstat and psuedo-inverse functions; Fixed Qobj division tests on 32-bit systems.; Removed extra call to Python in time-dependent Cython code.; Fixed issue with repeated Bloch sphere saving.; Fixed T_0 triplet state not normalized properly. (Fixed by Eric Hontz); Simplified compiler flags (support for ARM systems).; Fixed a decoding error in qload.; Fixed issue using complex.h math and np.kind_t variables.; Corrected output states mismatch for ntraj=1 in the mcf90 solver.; Qobj data is now copied by default to avoid a bug in multiplication. (Fixed by Richard Brierley); Fixed bug overwriting hardware_info in __init__. (Fixed by Johannes Feist); Restored ability to explicity set Q.isherm, Q.type, and Q.superrep.; Fixed integer depreciation warnings from NumPy.; Qobj * (dense vec) would result in a recursive loop.; Fixed args=None -> args={} in correlation functions to be compatible with mesolve.; Fixed depreciation warnings in mcsolve.; Fixed neagtive only real parts in rand_ket.; Fixed a complicated list-cast-map-list a",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:8079,Testability,log,logging,8079," set Q.isherm, Q.type, and Q.superrep.; Fixed integer depreciation warnings from NumPy.; Qobj * (dense vec) would result in a recursive loop.; Fixed args=None -> args={} in correlation functions to be compatible with mesolve.; Fixed depreciation warnings in mcsolve.; Fixed neagtive only real parts in rand_ket.; Fixed a complicated list-cast-map-list antipattern in super operator reps. (Fixed by Stefan Krastanov); Fixed incorrect isherm for sigmam spin operator.; Fixed the dims when using final_state_output in mesolve and sesolve. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady sta",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:8115,Testability,log,logging,8115,"d Q.superrep.; Fixed integer depreciation warnings from NumPy.; Qobj * (dense vec) would result in a recursive loop.; Fixed args=None -> args={} in correlation functions to be compatible with mesolve.; Fixed depreciation warnings in mcsolve.; Fixed neagtive only real parts in rand_ket.; Fixed a complicated list-cast-map-list antipattern in super operator reps. (Fixed by Stefan Krastanov); Fixed incorrect isherm for sigmam spin operator.; Fixed the dims when using final_state_output in mesolve and sesolve. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now su",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:14221,Testability,test,tests,14221,"back functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to ",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:14571,Testability,log,logarithmic,14571,"ata, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gate",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:18669,Testability,test,tests,18669,"and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying the installation.; Demos window now lets you copy and paste code from each example. Version 1.1.4 (May 28, 2012):¶. Bug Fixes:¶. Fixed bug pointed out by Brendan Abolins.; Qobj.tr() returns zero-dim ndarray instead of float or complex.; Updated factorial import for scipy version 0.10+. Version 1.1.3 (November 21, 2011):¶. New Functions:¶. Allow custom naming of Bloch sphere. Bug Fixes:¶. Fixed text alignment issues in AboutBox.; Added fix for SciPy V>0.10 where factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-R",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:3367,Usability,simpl,simplified,3367,"ns.; The default Wigner function now uses a Clenshaw summation algorithm to evaluate a polynomial series that is applicable for any number of exciations (previous limitation was ~50 quanta), and is ~3x faster than before. (Added by Denis Vasilyev); Can now define a given eigen spectrum for random Hermitian and density operators.; The Qobj expm method now uses the equivilent SciPy routine, and performs a much faster exp operation if the matrix is diagonal.; One can now build zero operators using the qzero function. Control modules. MAJOR FEATURE: CRAB algorithm added; This is an alternative to the GRAPE algorithm, which allows for analytical control functions, which means that experimental constraints can more easily be added into optimisation.; See tutorial notebook for full information. Improvements¶; Core libraries. Two-time correlation functions can now be calculated for fully time-dependent Hamiltonians and collapse operators. (Added by Kevin Fischer); The code for the inverse-power method for the steady state solver has been simplified.; Bloch-Redfield tensor creation is now up to an order of magnitude faster. (Added by Johannes Feist); Q.transform now works properly for arrays directly from sp_eigs (or eig).; Q.groundstate now checks for degeneracy.; Added sinm and cosm methods to the Qobj class.; Added charge and tunneling operators.; Time-dependent Cython code is now easier to read and debug. Control modules. The internal state / quantum operator data type can now be either Qobj or ndarray; Previous only ndarray was possible. This now opens up possibility of using Qobj methods in fidelity calculations; The attributes and functions that return these operators are now preceded by an underscore, to indicate that the data type could change depending on the configuration options.; In most cases these functions were for internal processing only anyway, and should have been ‘private’.; Accessors to the properties that could be useful outside of the library have been",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:8332,Usability,progress bar,progress bars,8332,"nings in mcsolve.; Fixed neagtive only real parts in rand_ket.; Fixed a complicated list-cast-map-list antipattern in super operator reps. (Fixed by Stefan Krastanov); Fixed incorrect isherm for sigmam spin operator.; Fixed the dims when using final_state_output in mesolve and sesolve. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-depende",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:13989,Usability,simpl,simplified,13989," for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner ",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:16531,Usability,progress bar,progress bar,16531,"tions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent argume",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/changelog.html:17344,Usability,simpl,simplifying,17344,"ime-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method in",MatchSource.WIKI,docs/4.0.2/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/changelog.html
https://qutip.org/docs/4.0.2/contributors.html:2546,Deployability,update,updated,2546,"University of Denmark) - Bug hunting for the Monte-Carlo solver; Andre Carvalho - Bug hunter; André Xuereb (University of Hannover) - Bug hunter; Anubhav Vardhan (IIT, Kanpur) - Bug hunter, Code contributor, Documentation; Arne Grimsmo (University of Auckland) - Bug hunter, Code contributor; Ben Criger (Waterloo IQC) - Code contributor; Bredan Abolins (Berkeley) - Bug hunter; Chris Granade - Code contributor; Claudia Degrandi (Yale University) - Documentation; Dawid Crivelli - Bug hunter; Denis Vasilyev (St. Petersburg State University) - Code contributor; Dong Zhou (Yale University) - Bug hunter; Florian Ong (Institute for Quantum Computation) - Bug hunter; Frank Schima - Macports packaging; Henri Nielsen (Technical University of Denmark) - Bug hunter; Hwajung Kang (Systems Biology Institute, Tokyo) - Suggestions for improving Bloch class; James Clemens (Miami University - Ohio) - Bug hunter; Johannes Feist - Code contributor; Jonas Hörsch - Code contributor; Jonas Neergaard-Nielsen (Technical University of Denmark) - Code contributor, Windows support; JP Hadden (University of Bristol) - Code contributor, improved Bloch sphere visualization; Kevin Fischer (Stanford) - Code contributor; Laurence Stant - Documentation; Markus Baden (Centre for Quantum Technologies, Singapore) - Code contributor, Documentation; Myung-Joong Hwang (Pohang University of Science and Technology) - Bug hunter; Neill Lambert (RIKEN) - Code contributor, Windows support; Nikolas Tezak (Stanford) - Code contributor; Per Nielsen (Technical University of Denmark) - Bug hunter, Code contributor; Piotr Migdał (ICFO) - Code contributor; Reinier Heeres (Yale University) - Code contributor; Robert Jördens (NIST) - Linux packaging; Simon Whalen - Code contributor; W.M. Witzel - Bug hunter. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Jan 11, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.0.2/contributors.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/contributors.html
https://qutip.org/docs/4.0.2/frontmatter.html:498,Availability,avail,available,498,". . Frontmatter — QuTiP 4.0 Documentation. QuTiP: Quantum Toolbox in Python; . ; . 4.0; . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; Users Guide; API documentation; Change Log; Developers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs »; Frontmatter. Frontmatter¶. About This Documentation¶; This document contains a user guide and automatically generated API documentation for QuTiP. A PDF version of this text is available at the documentation page.; For more information see the QuTiP project web page. Author:Alexander Pitchford. Author:Chris Grenade. Author:Arne Grimsmo. Author:P.D. Nation. Author:J.R. Johansson. version:4.0. status:Released (XX YY, 2017). copyright:This documentation is licensed under the Creative Commons Attribution 3.0 Unported License. Citing This Project¶; If you find this project useful, then please cite:. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP 2: A Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on",MatchSource.WIKI,docs/4.0.2/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/frontmatter.html
https://qutip.org/docs/4.0.2/frontmatter.html:1256,Availability,down,download,1256,"ers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs »; Frontmatter. Frontmatter¶. About This Documentation¶; This document contains a user guide and automatically generated API documentation for QuTiP. A PDF version of this text is available at the documentation page.; For more information see the QuTiP project web page. Author:Alexander Pitchford. Author:Chris Grenade. Author:Arne Grimsmo. Author:P.D. Nation. Author:J.R. Johansson. version:4.0. status:Released (XX YY, 2017). copyright:This documentation is licensed under the Creative Commons Attribution 3.0 Unported License. Citing This Project¶; If you find this project useful, then please cite:. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP 2: A Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system ",MatchSource.WIKI,docs/4.0.2/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/frontmatter.html
https://qutip.org/docs/4.0.2/frontmatter.html:3436,Availability,avail,available,3436,"stem dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optics, trapped ions, superconducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, excited by a limited number of quanta, that are amenable to classical simulation in a truncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy, Scipy, and Cython libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with (almost) arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantu",MatchSource.WIKI,docs/4.0.2/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/frontmatter.html
https://qutip.org/docs/4.0.2/frontmatter.html:4636,Deployability,release,release,4636,"thon programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy, Scipy, and Cython libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with (almost) arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Jan 11, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.0.2/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/frontmatter.html
https://qutip.org/docs/4.0.2/frontmatter.html:5181,Deployability,update,updated,5181,"thon programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy, Scipy, and Cython libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with (almost) arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Jan 11, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.0.2/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/frontmatter.html
https://qutip.org/docs/4.0.2/frontmatter.html:2787,Energy Efficiency,efficient,efficiently,2787," quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system and its environment is an essential step in understanding the dynamics of quantum systems.; In general, for all but the most basic of Hamiltonians, an analytical description of the system dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optics, trapped ions, superconducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, excited by a limited number of quanta, that are amenable to classical simulation in a truncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting l",MatchSource.WIKI,docs/4.0.2/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/frontmatter.html
https://qutip.org/docs/4.0.2/frontmatter.html:4072,Integrability,depend,dependence,4072,"ted by a limited number of quanta, that are amenable to classical simulation in a truncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy, Scipy, and Cython libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with (almost) arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpag",MatchSource.WIKI,docs/4.0.2/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/frontmatter.html
https://qutip.org/docs/4.0.2/frontmatter.html:4120,Integrability,depend,dependent,4120,"tum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy, Scipy, and Cython libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with (almost) arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. ",MatchSource.WIKI,docs/4.0.2/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/frontmatter.html
https://qutip.org/docs/4.0.2/frontmatter.html:1896,Modifiability,coupling,coupling,1896,"g This Project¶; If you find this project useful, then please cite:. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP 2: A Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system and its environment is an essential step in understanding the dynamics of quantum systems.; In general, for all but the most basic of Hamiltonians, an analytical description of the system dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optic",MatchSource.WIKI,docs/4.0.2/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/frontmatter.html
https://qutip.org/docs/4.0.2/frontmatter.html:2034,Modifiability,coupling,coupling,2034,"ys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system and its environment is an essential step in understanding the dynamics of quantum systems.; In general, for all but the most basic of Hamiltonians, an analytical description of the system dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optics, trapped ions, superconducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, ",MatchSource.WIKI,docs/4.0.2/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/frontmatter.html
https://qutip.org/docs/4.0.2/frontmatter.html:1989,Performance,perform,performed,1989,"ys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system and its environment is an essential step in understanding the dynamics of quantum systems.; In general, for all but the most basic of Hamiltonians, an analytical description of the system dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optics, trapped ions, superconducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, ",MatchSource.WIKI,docs/4.0.2/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/frontmatter.html
https://qutip.org/docs/4.0.2/frontmatter.html:4207,Performance,perform,performance,4207,"tum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy, Scipy, and Cython libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with (almost) arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. ",MatchSource.WIKI,docs/4.0.2/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/frontmatter.html
https://qutip.org/docs/4.0.2/frontmatter.html:3820,Testability,test,tested,3820,"ting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, excited by a limited number of quanta, that are amenable to classical simulation in a truncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy, Scipy, and Cython libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with (almost) arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions ar",MatchSource.WIKI,docs/4.0.2/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/frontmatter.html
https://qutip.org/docs/4.0.2/frontmatter.html:405,Usability,guid,guide,405,". . Frontmatter — QuTiP 4.0 Documentation. QuTiP: Quantum Toolbox in Python; . ; . 4.0; . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; Users Guide; API documentation; Change Log; Developers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs »; Frontmatter. Frontmatter¶. About This Documentation¶; This document contains a user guide and automatically generated API documentation for QuTiP. A PDF version of this text is available at the documentation page.; For more information see the QuTiP project web page. Author:Alexander Pitchford. Author:Chris Grenade. Author:Arne Grimsmo. Author:P.D. Nation. Author:J.R. Johansson. version:4.0. status:Released (XX YY, 2017). copyright:This documentation is licensed under the Creative Commons Attribution 3.0 Unported License. Citing This Project¶; If you find this project useful, then please cite:. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP 2: A Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on",MatchSource.WIKI,docs/4.0.2/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/frontmatter.html
https://qutip.org/docs/4.0.2/frontmatter.html:4369,Usability,learn,learning,4369,"thon programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy, Scipy, and Cython libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with (almost) arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Jan 11, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.0.2/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/frontmatter.html
https://qutip.org/docs/4.0.2/genindex.html:14149,Deployability,integrat,integrator,14149,"ttribute). HEOMSolver (class in qutip.nonmarkov.heom). hilbert_dist() (in module qutip.metrics). hinton() (in module qutip.visualization). homogeneous (StochasticSolverOptions attribute). HSolverDL (class in qutip.nonmarkov.heom). I. identity() (in module qutip.operators). init_coeffs() (PulseGenCrab method). init_comp() (FidCompTraceDiff method). (FidCompUnitary method). (FidelityComputer method). init_freqs() (PulseGenCrabFourier method). init_normalization() (FidCompUnitary method). init_optim() (Optimizer method). (OptimizerCrab method). (OptimizerLBFGSB method). init_pulse() (PulseGen method). (PulseGenCrab method). (PulseGenCrabFourier method). (PulseGenLinear method). (PulseGenPeriodic method). init_timeslots() (Dynamics method). initial (Dynamics attribute). initial_amps (OptimResult attribute). initial_ctrl_offset (Dynamics attribute). initial_ctrl_scaling (Dynamics attribute). initial_fid_err (OptimResult attribute). initialize_controls() (Dynamics method). integrator (MemoryCascade attribute). isbra (Qobj attribute). iscp (Qobj attribute). iscptp (Qobj attribute). isherm (Qobj attribute). ishp (Qobj attribute). isket (Qobj attribute). isoper (Qobj attribute). isoperbra (Qobj attribute). isoperket (Qobj attribute). issuper (Qobj attribute). istp (Qobj attribute). iswap() (in module qutip.qip.gates). iter_num (OptimIterSummary attribute). iter_step_callback_func() (Optimizer method). iter_summary (OptimDump attribute). (Optimizer attribute). J. jmat() (in module qutip.operators). K. ket() (in module qutip.states). ket2dm() (in module qutip.states). L. L1 (MemoryCascade attribute). L2 (MemoryCascade attribute). lbound (PulseGen attribute). learningtimes (TTMSolverOptions attribute). level (Dump attribute), [1]. lindblad_dissipator() (in module qutip.superoperator). LinearSpinChain (class in qutip.qip.models.spinchain). linspace_with() (in module qutip.utilities). liouvillian() (in module qutip.superoperator). load_circuit() (CircuitProcessor method). log_lev",MatchSource.WIKI,docs/4.0.2/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/genindex.html
https://qutip.org/docs/4.0.2/genindex.html:31060,Deployability,update,update,31060,"ticSolverOptions attribute). (TTMSolverOptions attribute). TimeslotComputer (class in qutip.control.tslotcomp). to_choi() (in module qutip.superop_reps). to_kraus() (in module qutip.superop_reps). to_super() (in module qutip.superop_reps). toffoli() (in module qutip.qip.gates). total_time (Stats attribute). tr() (Qobj method), [1]. tracedist() (in module qutip.metrics). trans() (Qobj method), [1]. transform() (Qobj method), [1]. trunc_neg() (Qobj method), [1]. tslot_computer (Dynamics attribute). TSlotCompUpdateAll (class in qutip.control.tslotcomp). ttmsolve() (in module qutip.nonmarkov.transfertensor). TTMSolverOptions (class in qutip.nonmarkov.transfertensor). tunneling() (in module qutip.operators). TwoModeQuadratureCorrelation (class in qutip.distributions). type (Qobj attribute). U. ubound (PulseGen attribute). unit() (Qobj method), [1]. unitarity_check() (Dynamics method). unitarity_check_level (Dynamics attribute). unitarity_tol (Dynamics attribute). update() (HarmonicOscillatorProbabilityFunction method). (HarmonicOscillatorWaveFunction method). (TwoModeQuadratureCorrelation method). update_ctrl_amps() (Dynamics method). update_fid_err_log() (OptimDump method). update_grad_log() (OptimDump method). update_grad_norm_log() (OptimDump method). update_psi() (TwoModeQuadratureCorrelation method). update_rho() (TwoModeQuadratureCorrelation method). uses_onto_evo (FidelityComputer attribute). uses_onwd_evo (FidelityComputer attribute). V. value() (eseries method), [1]. variance() (in module qutip.expect). vector_color (Bloch attribute). (Bloch3d attribute). vector_mutation (Bloch attribute), [1]. vector_style (Bloch attribute), [1]. vector_to_operator() (in module qutip.superoperator). vector_width (Bloch attribute), [1]. (Bloch3d attribute). version_table() (in module qutip.ipynbtools). view (Bloch attribute). (Bloch3d attribute). visualize() (Distribution method). W. wall_time (OptimIterSummary attribute). (OptimResult attribute). wall_time_dyn_gen_compute (Stats",MatchSource.WIKI,docs/4.0.2/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/genindex.html
https://qutip.org/docs/4.0.2/genindex.html:33241,Deployability,update,updated,33241,"m_log() (OptimDump method). update_psi() (TwoModeQuadratureCorrelation method). update_rho() (TwoModeQuadratureCorrelation method). uses_onto_evo (FidelityComputer attribute). uses_onwd_evo (FidelityComputer attribute). V. value() (eseries method), [1]. variance() (in module qutip.expect). vector_color (Bloch attribute). (Bloch3d attribute). vector_mutation (Bloch attribute), [1]. vector_style (Bloch attribute), [1]. vector_to_operator() (in module qutip.superoperator). vector_width (Bloch attribute), [1]. (Bloch3d attribute). version_table() (in module qutip.ipynbtools). view (Bloch attribute). (Bloch3d attribute). visualize() (Distribution method). W. wall_time (OptimIterSummary attribute). (OptimResult attribute). wall_time_dyn_gen_compute (Stats attribute). wall_time_fwd_prop_compute (Stats attribute). wall_time_gradient_compute (Stats attribute). wall_time_limit_exceeded (OptimResult attribute). wall_time_onwd_prop_compute (Stats attribute). wall_time_optim (Stats attribute). wall_time_optim_end (Stats attribute). wall_time_optim_start (Stats attribute). wall_time_prop_compute (Stats attribute). wavelen (PulseGenPeriodic attribute). weighted_bipartite_matching() (in module qutip.graph). wigner() (in module qutip.wigner). wigner_covariance_matrix() (in module qutip.continuous_variables). WignerDistribution (class in qutip.distributions). write_to_file (Dump attribute). writeout() (DynamicsDump method). (EvoCompDumpItem method). (OptimDump method). X. xlabel (Bloch attribute). (Bloch3d attribute). xlpos (Bloch attribute). (Bloch3d attribute). Y. ylabel (Bloch attribute). (Bloch3d attribute). ylpos (Bloch attribute). (Bloch3d attribute). Z. zero_ket() (in module qutip.states). zlabel (Bloch attribute). (Bloch3d attribute). zlpos (Bloch attribute). (Bloch3d attribute). © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Jan 11, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.0.2/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/genindex.html
https://qutip.org/docs/4.0.2/genindex.html:2578,Energy Efficiency,charge,charge,2578,odule qutip.metrics). average_states (Options attribute). axes (Bloch attribute). B. basis() (in module qutip.states). bell_state() (in module qutip.states). berkeley() (in module qutip.qip.gates). Bloch (class in qutip.bloch). Bloch3d (class in qutip.bloch3d). bloch_redfield_solve() (in module qutip.bloch_redfield). bloch_redfield_tensor() (in module qutip.bloch_redfield). bnd_cut_approx (HSolverDL attribute). boltzmann (HEOMSolver attribute). bounds (Optimizer attribute). bra() (in module qutip.states). breadth_first_search() (in module qutip.graph). brmesolve() (in module qutip.bloch_redfield). build_preconditioner() (in module qutip.steadystate). bures_angle() (in module qutip.metrics). bures_dist() (in module qutip.metrics). C. c_ops (StochasticSolverOptions attribute). c_ops_markov (MemoryCascade attribute). cache_dyn_gen_eigenvectors_adj (Dynamics attribute). cache_phased_dyn_gen (Dynamics attribute). cache_prop_grad (Dynamics attribute). calculate() (Stats method). charge() (in module qutip.operators). check_herm() (Qobj method). check_unitarity() (DynamicsUnitary method). CircuitProcessor (class in qutip.qip.models). CircularSpinChain (class in qutip.qip.models.spinchain). clear() (Bloch method). (Bloch3d method). (FidelityComputer method). (Stats method). clebsch() (in module qutip.utilities). cnot() (in module qutip.qip.gates). coeffs (PulseGenCrab attribute). coherence_function_g1() (in module qutip.correlation). coherence_function_g2() (in module qutip.correlation). coherent() (in module qutip.states). coherent_dm() (in module qutip.states). col_times (Result attribute). col_which (Result attribute). combine_dyn_gen() (Dynamics method). commutator() (in module qutip.operators). compare_amps() (TSlotCompUpdateAll method). composite() (in module qutip.tensor). compute_evolution() (Dynamics method). compute_fid_err_grad() (FidCompTraceDiff method). (FidCompTraceDiffApprox method). compute_fid_grad() (FidCompUnitary method). concurrence() (in module qutip.en,MatchSource.WIKI,docs/4.0.2/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/genindex.html
https://qutip.org/docs/4.0.2/genindex.html:14149,Integrability,integrat,integrator,14149,"ttribute). HEOMSolver (class in qutip.nonmarkov.heom). hilbert_dist() (in module qutip.metrics). hinton() (in module qutip.visualization). homogeneous (StochasticSolverOptions attribute). HSolverDL (class in qutip.nonmarkov.heom). I. identity() (in module qutip.operators). init_coeffs() (PulseGenCrab method). init_comp() (FidCompTraceDiff method). (FidCompUnitary method). (FidelityComputer method). init_freqs() (PulseGenCrabFourier method). init_normalization() (FidCompUnitary method). init_optim() (Optimizer method). (OptimizerCrab method). (OptimizerLBFGSB method). init_pulse() (PulseGen method). (PulseGenCrab method). (PulseGenCrabFourier method). (PulseGenLinear method). (PulseGenPeriodic method). init_timeslots() (Dynamics method). initial (Dynamics attribute). initial_amps (OptimResult attribute). initial_ctrl_offset (Dynamics attribute). initial_ctrl_scaling (Dynamics attribute). initial_fid_err (OptimResult attribute). initialize_controls() (Dynamics method). integrator (MemoryCascade attribute). isbra (Qobj attribute). iscp (Qobj attribute). iscptp (Qobj attribute). isherm (Qobj attribute). ishp (Qobj attribute). isket (Qobj attribute). isoper (Qobj attribute). isoperbra (Qobj attribute). isoperket (Qobj attribute). issuper (Qobj attribute). istp (Qobj attribute). iswap() (in module qutip.qip.gates). iter_num (OptimIterSummary attribute). iter_step_callback_func() (Optimizer method). iter_summary (OptimDump attribute). (Optimizer attribute). J. jmat() (in module qutip.operators). K. ket() (in module qutip.states). ket2dm() (in module qutip.states). L. L1 (MemoryCascade attribute). L2 (MemoryCascade attribute). lbound (PulseGen attribute). learningtimes (TTMSolverOptions attribute). level (Dump attribute), [1]. lindblad_dissipator() (in module qutip.superoperator). LinearSpinChain (class in qutip.qip.models.spinchain). linspace_with() (in module qutip.utilities). liouvillian() (in module qutip.superoperator). load_circuit() (CircuitProcessor method). log_lev",MatchSource.WIKI,docs/4.0.2/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/genindex.html
https://qutip.org/docs/4.0.2/genindex.html:3599,Modifiability,config,config,3599,"). check_herm() (Qobj method). check_unitarity() (DynamicsUnitary method). CircuitProcessor (class in qutip.qip.models). CircularSpinChain (class in qutip.qip.models.spinchain). clear() (Bloch method). (Bloch3d method). (FidelityComputer method). (Stats method). clebsch() (in module qutip.utilities). cnot() (in module qutip.qip.gates). coeffs (PulseGenCrab attribute). coherence_function_g1() (in module qutip.correlation). coherence_function_g2() (in module qutip.correlation). coherent() (in module qutip.states). coherent_dm() (in module qutip.states). col_times (Result attribute). col_which (Result attribute). combine_dyn_gen() (Dynamics method). commutator() (in module qutip.operators). compare_amps() (TSlotCompUpdateAll method). composite() (in module qutip.tensor). compute_evolution() (Dynamics method). compute_fid_err_grad() (FidCompTraceDiff method). (FidCompTraceDiffApprox method). compute_fid_grad() (FidCompUnitary method). concurrence() (in module qutip.entropy). config (Optimizer attribute). configure() (HEOMSolver method). (HSolverDL method). conj() (Qobj method), [1]. controlled_gate() (in module qutip.qip.gates). convert_unit() (in module qutip.utilities). correlation() (in module qutip.correlation). correlation_2op_1t() (in module qutip.correlation). correlation_2op_2t() (in module qutip.correlation). correlation_3op_1t() (in module qutip.correlation). correlation_3op_2t() (in module qutip.correlation). correlation_4op_1t() (in module qutip.correlation). correlation_4op_2t() (in module qutip.correlation). correlation_matrix() (in module qutip.continuous_variables). correlation_matrix_field() (in module qutip.continuous_variables). correlation_matrix_quadrature() (in module qutip.continuous_variables). correlation_ss() (in module qutip.correlation). cosm() (Qobj method), [1]. coup_op (HEOMSolver attribute). coup_strength (HEOMSolver attribute). covariance_matrix() (in module qutip.continuous_variables). cphase() (in module qutip.qip.gates). create() (in ",MatchSource.WIKI,docs/4.0.2/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/genindex.html
https://qutip.org/docs/4.0.2/genindex.html:3629,Modifiability,config,configure,3629,"check_unitarity() (DynamicsUnitary method). CircuitProcessor (class in qutip.qip.models). CircularSpinChain (class in qutip.qip.models.spinchain). clear() (Bloch method). (Bloch3d method). (FidelityComputer method). (Stats method). clebsch() (in module qutip.utilities). cnot() (in module qutip.qip.gates). coeffs (PulseGenCrab attribute). coherence_function_g1() (in module qutip.correlation). coherence_function_g2() (in module qutip.correlation). coherent() (in module qutip.states). coherent_dm() (in module qutip.states). col_times (Result attribute). col_which (Result attribute). combine_dyn_gen() (Dynamics method). commutator() (in module qutip.operators). compare_amps() (TSlotCompUpdateAll method). composite() (in module qutip.tensor). compute_evolution() (Dynamics method). compute_fid_err_grad() (FidCompTraceDiff method). (FidCompTraceDiffApprox method). compute_fid_grad() (FidCompUnitary method). concurrence() (in module qutip.entropy). config (Optimizer attribute). configure() (HEOMSolver method). (HSolverDL method). conj() (Qobj method), [1]. controlled_gate() (in module qutip.qip.gates). convert_unit() (in module qutip.utilities). correlation() (in module qutip.correlation). correlation_2op_1t() (in module qutip.correlation). correlation_2op_2t() (in module qutip.correlation). correlation_3op_1t() (in module qutip.correlation). correlation_3op_2t() (in module qutip.correlation). correlation_4op_1t() (in module qutip.correlation). correlation_4op_2t() (in module qutip.correlation). correlation_matrix() (in module qutip.continuous_variables). correlation_matrix_field() (in module qutip.continuous_variables). correlation_matrix_quadrature() (in module qutip.continuous_variables). correlation_ss() (in module qutip.correlation). cosm() (Qobj method), [1]. coup_op (HEOMSolver attribute). coup_strength (HEOMSolver attribute). covariance_matrix() (in module qutip.continuous_variables). cphase() (in module qutip.qip.gates). create() (in module qutip.operators). create_",MatchSource.WIKI,docs/4.0.2/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/genindex.html
https://qutip.org/docs/4.0.2/genindex.html:3558,Performance,concurren,concurrence,3558,"od). charge() (in module qutip.operators). check_herm() (Qobj method). check_unitarity() (DynamicsUnitary method). CircuitProcessor (class in qutip.qip.models). CircularSpinChain (class in qutip.qip.models.spinchain). clear() (Bloch method). (Bloch3d method). (FidelityComputer method). (Stats method). clebsch() (in module qutip.utilities). cnot() (in module qutip.qip.gates). coeffs (PulseGenCrab attribute). coherence_function_g1() (in module qutip.correlation). coherence_function_g2() (in module qutip.correlation). coherent() (in module qutip.states). coherent_dm() (in module qutip.states). col_times (Result attribute). col_which (Result attribute). combine_dyn_gen() (Dynamics method). commutator() (in module qutip.operators). compare_amps() (TSlotCompUpdateAll method). composite() (in module qutip.tensor). compute_evolution() (Dynamics method). compute_fid_err_grad() (FidCompTraceDiff method). (FidCompTraceDiffApprox method). compute_fid_grad() (FidCompUnitary method). concurrence() (in module qutip.entropy). config (Optimizer attribute). configure() (HEOMSolver method). (HSolverDL method). conj() (Qobj method), [1]. controlled_gate() (in module qutip.qip.gates). convert_unit() (in module qutip.utilities). correlation() (in module qutip.correlation). correlation_2op_1t() (in module qutip.correlation). correlation_2op_2t() (in module qutip.correlation). correlation_3op_1t() (in module qutip.correlation). correlation_3op_2t() (in module qutip.correlation). correlation_4op_1t() (in module qutip.correlation). correlation_4op_2t() (in module qutip.correlation). correlation_matrix() (in module qutip.continuous_variables). correlation_matrix_field() (in module qutip.continuous_variables). correlation_matrix_quadrature() (in module qutip.continuous_variables). correlation_ss() (in module qutip.correlation). cosm() (Qobj method), [1]. coup_op (HEOMSolver attribute). coup_strength (HEOMSolver attribute). covariance_matrix() (in module qutip.continuous_variables). cphase() (i",MatchSource.WIKI,docs/4.0.2/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/genindex.html
https://qutip.org/docs/4.0.2/genindex.html:18615,Performance,optimiz,optimizer,18615,"um_ctrl_amp_updates (Stats attribute). num_ctrls (Dynamics attribute), [1]. num_expect (Result attribute). num_fidelity_computes (Stats attribute). num_fidelity_func_calls (Stats attribute). num_grad_computes (Stats attribute). num_grad_func_calls (Stats attribute). num_iter (OptimResult attribute). (Stats attribute). num_timeslot_changes (Stats attribute). num_tslot_recompute (Stats attribute). num_tslots (Dynamics attribute). (PulseGen attribute). num_waves (PulseGenPeriodic attribute). O. ode2es() (in module qutip.essolve). offset (PulseGen attribute). omega (DynamicsSymplectic attribute). onto_evo (Dynamics attribute), [1]. onwd_evo (Dynamics attribute), [1]. oper_dtype (Dynamics attribute). operator_to_vector() (in module qutip.superoperator). opt_pulse_crab() (in module qutip.control.pulseoptim). opt_pulse_crab_unitary() (in module qutip.control.pulseoptim). optim_method (Optimizer attribute). OptimDump (class in qutip.control.dump). OptimIterSummary (class in qutip.control.optimizer). optimize_circuit() (CircuitProcessor method). optimize_pulse() (in module qutip.control.pulseoptim). optimize_pulse_unitary() (in module qutip.control.pulseoptim). Optimizer (class in qutip.control.optimizer). optimizer (OptimResult attribute). OptimizerBFGS (class in qutip.control.optimizer). OptimizerCrab (class in qutip.control.optimizer). OptimizerCrabFmin (class in qutip.control.optimizer). OptimizerLBFGSB (class in qutip.control.optimizer). OptimResult (class in qutip.control.optimresult). Options (class in qutip.solver). options (HEOMSolver attribute). (MemoryCascade attribute). (StochasticSolverOptions attribute). (TTMSolverOptions attribute). orbital() (in module qutip.orbital). order (Options attribute). outfieldcorr() (MemoryCascade method). outfieldpropagator() (MemoryCascade method). overlap() (Qobj method). P. parallel (MemoryCascade attribute). parallel_map() (in module qutip.ipynbtools). (in module qutip.parallel). params (Dynamics attribute). (Optimizer attribute",MatchSource.WIKI,docs/4.0.2/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/genindex.html
https://qutip.org/docs/4.0.2/genindex.html:18825,Performance,optimiz,optimizer,18825,"Stats attribute). num_grad_func_calls (Stats attribute). num_iter (OptimResult attribute). (Stats attribute). num_timeslot_changes (Stats attribute). num_tslot_recompute (Stats attribute). num_tslots (Dynamics attribute). (PulseGen attribute). num_waves (PulseGenPeriodic attribute). O. ode2es() (in module qutip.essolve). offset (PulseGen attribute). omega (DynamicsSymplectic attribute). onto_evo (Dynamics attribute), [1]. onwd_evo (Dynamics attribute), [1]. oper_dtype (Dynamics attribute). operator_to_vector() (in module qutip.superoperator). opt_pulse_crab() (in module qutip.control.pulseoptim). opt_pulse_crab_unitary() (in module qutip.control.pulseoptim). optim_method (Optimizer attribute). OptimDump (class in qutip.control.dump). OptimIterSummary (class in qutip.control.optimizer). optimize_circuit() (CircuitProcessor method). optimize_pulse() (in module qutip.control.pulseoptim). optimize_pulse_unitary() (in module qutip.control.pulseoptim). Optimizer (class in qutip.control.optimizer). optimizer (OptimResult attribute). OptimizerBFGS (class in qutip.control.optimizer). OptimizerCrab (class in qutip.control.optimizer). OptimizerCrabFmin (class in qutip.control.optimizer). OptimizerLBFGSB (class in qutip.control.optimizer). OptimResult (class in qutip.control.optimresult). Options (class in qutip.solver). options (HEOMSolver attribute). (MemoryCascade attribute). (StochasticSolverOptions attribute). (TTMSolverOptions attribute). orbital() (in module qutip.orbital). order (Options attribute). outfieldcorr() (MemoryCascade method). outfieldpropagator() (MemoryCascade method). overlap() (Qobj method). P. parallel (MemoryCascade attribute). parallel_map() (in module qutip.ipynbtools). (in module qutip.parallel). params (Dynamics attribute). (Optimizer attribute). parent (Dump attribute). parfor() (in module qutip.ipynbtools). (in module qutip.parallel). partial_transpose() (in module qutip.partial_transpose). periodic (PulseGen attribute). permute() (Qobj method), [1",MatchSource.WIKI,docs/4.0.2/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/genindex.html
https://qutip.org/docs/4.0.2/genindex.html:18837,Performance,optimiz,optimizer,18837,"rad_func_calls (Stats attribute). num_iter (OptimResult attribute). (Stats attribute). num_timeslot_changes (Stats attribute). num_tslot_recompute (Stats attribute). num_tslots (Dynamics attribute). (PulseGen attribute). num_waves (PulseGenPeriodic attribute). O. ode2es() (in module qutip.essolve). offset (PulseGen attribute). omega (DynamicsSymplectic attribute). onto_evo (Dynamics attribute), [1]. onwd_evo (Dynamics attribute), [1]. oper_dtype (Dynamics attribute). operator_to_vector() (in module qutip.superoperator). opt_pulse_crab() (in module qutip.control.pulseoptim). opt_pulse_crab_unitary() (in module qutip.control.pulseoptim). optim_method (Optimizer attribute). OptimDump (class in qutip.control.dump). OptimIterSummary (class in qutip.control.optimizer). optimize_circuit() (CircuitProcessor method). optimize_pulse() (in module qutip.control.pulseoptim). optimize_pulse_unitary() (in module qutip.control.pulseoptim). Optimizer (class in qutip.control.optimizer). optimizer (OptimResult attribute). OptimizerBFGS (class in qutip.control.optimizer). OptimizerCrab (class in qutip.control.optimizer). OptimizerCrabFmin (class in qutip.control.optimizer). OptimizerLBFGSB (class in qutip.control.optimizer). OptimResult (class in qutip.control.optimresult). Options (class in qutip.solver). options (HEOMSolver attribute). (MemoryCascade attribute). (StochasticSolverOptions attribute). (TTMSolverOptions attribute). orbital() (in module qutip.orbital). order (Options attribute). outfieldcorr() (MemoryCascade method). outfieldpropagator() (MemoryCascade method). overlap() (Qobj method). P. parallel (MemoryCascade attribute). parallel_map() (in module qutip.ipynbtools). (in module qutip.parallel). params (Dynamics attribute). (Optimizer attribute). parent (Dump attribute). parfor() (in module qutip.ipynbtools). (in module qutip.parallel). partial_transpose() (in module qutip.partial_transpose). periodic (PulseGen attribute). permute() (Qobj method), [1]. phase() (in module q",MatchSource.WIKI,docs/4.0.2/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/genindex.html
https://qutip.org/docs/4.0.2/genindex.html:18910,Performance,optimiz,optimizer,18910,"ute). (Stats attribute). num_timeslot_changes (Stats attribute). num_tslot_recompute (Stats attribute). num_tslots (Dynamics attribute). (PulseGen attribute). num_waves (PulseGenPeriodic attribute). O. ode2es() (in module qutip.essolve). offset (PulseGen attribute). omega (DynamicsSymplectic attribute). onto_evo (Dynamics attribute), [1]. onwd_evo (Dynamics attribute), [1]. oper_dtype (Dynamics attribute). operator_to_vector() (in module qutip.superoperator). opt_pulse_crab() (in module qutip.control.pulseoptim). opt_pulse_crab_unitary() (in module qutip.control.pulseoptim). optim_method (Optimizer attribute). OptimDump (class in qutip.control.dump). OptimIterSummary (class in qutip.control.optimizer). optimize_circuit() (CircuitProcessor method). optimize_pulse() (in module qutip.control.pulseoptim). optimize_pulse_unitary() (in module qutip.control.pulseoptim). Optimizer (class in qutip.control.optimizer). optimizer (OptimResult attribute). OptimizerBFGS (class in qutip.control.optimizer). OptimizerCrab (class in qutip.control.optimizer). OptimizerCrabFmin (class in qutip.control.optimizer). OptimizerLBFGSB (class in qutip.control.optimizer). OptimResult (class in qutip.control.optimresult). Options (class in qutip.solver). options (HEOMSolver attribute). (MemoryCascade attribute). (StochasticSolverOptions attribute). (TTMSolverOptions attribute). orbital() (in module qutip.orbital). order (Options attribute). outfieldcorr() (MemoryCascade method). outfieldpropagator() (MemoryCascade method). overlap() (Qobj method). P. parallel (MemoryCascade attribute). parallel_map() (in module qutip.ipynbtools). (in module qutip.parallel). params (Dynamics attribute). (Optimizer attribute). parent (Dump attribute). parfor() (in module qutip.ipynbtools). (in module qutip.parallel). partial_transpose() (in module qutip.partial_transpose). periodic (PulseGen attribute). permute() (Qobj method), [1]. phase() (in module qutip.operators). phase_basis() (in module qutip.states). phase",MatchSource.WIKI,docs/4.0.2/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/genindex.html
https://qutip.org/docs/4.0.2/genindex.html:18960,Performance,optimiz,optimizer,18960,"ts attribute). num_tslot_recompute (Stats attribute). num_tslots (Dynamics attribute). (PulseGen attribute). num_waves (PulseGenPeriodic attribute). O. ode2es() (in module qutip.essolve). offset (PulseGen attribute). omega (DynamicsSymplectic attribute). onto_evo (Dynamics attribute), [1]. onwd_evo (Dynamics attribute), [1]. oper_dtype (Dynamics attribute). operator_to_vector() (in module qutip.superoperator). opt_pulse_crab() (in module qutip.control.pulseoptim). opt_pulse_crab_unitary() (in module qutip.control.pulseoptim). optim_method (Optimizer attribute). OptimDump (class in qutip.control.dump). OptimIterSummary (class in qutip.control.optimizer). optimize_circuit() (CircuitProcessor method). optimize_pulse() (in module qutip.control.pulseoptim). optimize_pulse_unitary() (in module qutip.control.pulseoptim). Optimizer (class in qutip.control.optimizer). optimizer (OptimResult attribute). OptimizerBFGS (class in qutip.control.optimizer). OptimizerCrab (class in qutip.control.optimizer). OptimizerCrabFmin (class in qutip.control.optimizer). OptimizerLBFGSB (class in qutip.control.optimizer). OptimResult (class in qutip.control.optimresult). Options (class in qutip.solver). options (HEOMSolver attribute). (MemoryCascade attribute). (StochasticSolverOptions attribute). (TTMSolverOptions attribute). orbital() (in module qutip.orbital). order (Options attribute). outfieldcorr() (MemoryCascade method). outfieldpropagator() (MemoryCascade method). overlap() (Qobj method). P. parallel (MemoryCascade attribute). parallel_map() (in module qutip.ipynbtools). (in module qutip.parallel). params (Dynamics attribute). (Optimizer attribute). parent (Dump attribute). parfor() (in module qutip.ipynbtools). (in module qutip.parallel). partial_transpose() (in module qutip.partial_transpose). periodic (PulseGen attribute). permute() (Qobj method), [1]. phase() (in module qutip.operators). phase_basis() (in module qutip.states). phase_option (FidCompUnitary attribute). phasegate() (i",MatchSource.WIKI,docs/4.0.2/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/genindex.html
https://qutip.org/docs/4.0.2/genindex.html:19014,Performance,optimiz,optimizer,19014,"num_tslots (Dynamics attribute). (PulseGen attribute). num_waves (PulseGenPeriodic attribute). O. ode2es() (in module qutip.essolve). offset (PulseGen attribute). omega (DynamicsSymplectic attribute). onto_evo (Dynamics attribute), [1]. onwd_evo (Dynamics attribute), [1]. oper_dtype (Dynamics attribute). operator_to_vector() (in module qutip.superoperator). opt_pulse_crab() (in module qutip.control.pulseoptim). opt_pulse_crab_unitary() (in module qutip.control.pulseoptim). optim_method (Optimizer attribute). OptimDump (class in qutip.control.dump). OptimIterSummary (class in qutip.control.optimizer). optimize_circuit() (CircuitProcessor method). optimize_pulse() (in module qutip.control.pulseoptim). optimize_pulse_unitary() (in module qutip.control.pulseoptim). Optimizer (class in qutip.control.optimizer). optimizer (OptimResult attribute). OptimizerBFGS (class in qutip.control.optimizer). OptimizerCrab (class in qutip.control.optimizer). OptimizerCrabFmin (class in qutip.control.optimizer). OptimizerLBFGSB (class in qutip.control.optimizer). OptimResult (class in qutip.control.optimresult). Options (class in qutip.solver). options (HEOMSolver attribute). (MemoryCascade attribute). (StochasticSolverOptions attribute). (TTMSolverOptions attribute). orbital() (in module qutip.orbital). order (Options attribute). outfieldcorr() (MemoryCascade method). outfieldpropagator() (MemoryCascade method). overlap() (Qobj method). P. parallel (MemoryCascade attribute). parallel_map() (in module qutip.ipynbtools). (in module qutip.parallel). params (Dynamics attribute). (Optimizer attribute). parent (Dump attribute). parfor() (in module qutip.ipynbtools). (in module qutip.parallel). partial_transpose() (in module qutip.partial_transpose). periodic (PulseGen attribute). permute() (Qobj method), [1]. phase() (in module qutip.operators). phase_basis() (in module qutip.states). phase_option (FidCompUnitary attribute). phasegate() (in module qutip.qip.gates). planck (HEOMSolver attribut",MatchSource.WIKI,docs/4.0.2/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/genindex.html
https://qutip.org/docs/4.0.2/genindex.html:19066,Performance,optimiz,optimizer,19066,"). num_waves (PulseGenPeriodic attribute). O. ode2es() (in module qutip.essolve). offset (PulseGen attribute). omega (DynamicsSymplectic attribute). onto_evo (Dynamics attribute), [1]. onwd_evo (Dynamics attribute), [1]. oper_dtype (Dynamics attribute). operator_to_vector() (in module qutip.superoperator). opt_pulse_crab() (in module qutip.control.pulseoptim). opt_pulse_crab_unitary() (in module qutip.control.pulseoptim). optim_method (Optimizer attribute). OptimDump (class in qutip.control.dump). OptimIterSummary (class in qutip.control.optimizer). optimize_circuit() (CircuitProcessor method). optimize_pulse() (in module qutip.control.pulseoptim). optimize_pulse_unitary() (in module qutip.control.pulseoptim). Optimizer (class in qutip.control.optimizer). optimizer (OptimResult attribute). OptimizerBFGS (class in qutip.control.optimizer). OptimizerCrab (class in qutip.control.optimizer). OptimizerCrabFmin (class in qutip.control.optimizer). OptimizerLBFGSB (class in qutip.control.optimizer). OptimResult (class in qutip.control.optimresult). Options (class in qutip.solver). options (HEOMSolver attribute). (MemoryCascade attribute). (StochasticSolverOptions attribute). (TTMSolverOptions attribute). orbital() (in module qutip.orbital). order (Options attribute). outfieldcorr() (MemoryCascade method). outfieldpropagator() (MemoryCascade method). overlap() (Qobj method). P. parallel (MemoryCascade attribute). parallel_map() (in module qutip.ipynbtools). (in module qutip.parallel). params (Dynamics attribute). (Optimizer attribute). parent (Dump attribute). parfor() (in module qutip.ipynbtools). (in module qutip.parallel). partial_transpose() (in module qutip.partial_transpose). periodic (PulseGen attribute). permute() (Qobj method), [1]. phase() (in module qutip.operators). phase_basis() (in module qutip.states). phase_option (FidCompUnitary attribute). phasegate() (in module qutip.qip.gates). planck (HEOMSolver attribute). plot_energy_levels() (in module qutip.visualizat",MatchSource.WIKI,docs/4.0.2/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/genindex.html
https://qutip.org/docs/4.0.2/genindex.html:2791,Usability,clear,clear,2791,"n qutip.bloch). Bloch3d (class in qutip.bloch3d). bloch_redfield_solve() (in module qutip.bloch_redfield). bloch_redfield_tensor() (in module qutip.bloch_redfield). bnd_cut_approx (HSolverDL attribute). boltzmann (HEOMSolver attribute). bounds (Optimizer attribute). bra() (in module qutip.states). breadth_first_search() (in module qutip.graph). brmesolve() (in module qutip.bloch_redfield). build_preconditioner() (in module qutip.steadystate). bures_angle() (in module qutip.metrics). bures_dist() (in module qutip.metrics). C. c_ops (StochasticSolverOptions attribute). c_ops_markov (MemoryCascade attribute). cache_dyn_gen_eigenvectors_adj (Dynamics attribute). cache_phased_dyn_gen (Dynamics attribute). cache_prop_grad (Dynamics attribute). calculate() (Stats method). charge() (in module qutip.operators). check_herm() (Qobj method). check_unitarity() (DynamicsUnitary method). CircuitProcessor (class in qutip.qip.models). CircularSpinChain (class in qutip.qip.models.spinchain). clear() (Bloch method). (Bloch3d method). (FidelityComputer method). (Stats method). clebsch() (in module qutip.utilities). cnot() (in module qutip.qip.gates). coeffs (PulseGenCrab attribute). coherence_function_g1() (in module qutip.correlation). coherence_function_g2() (in module qutip.correlation). coherent() (in module qutip.states). coherent_dm() (in module qutip.states). col_times (Result attribute). col_which (Result attribute). combine_dyn_gen() (Dynamics method). commutator() (in module qutip.operators). compare_amps() (TSlotCompUpdateAll method). composite() (in module qutip.tensor). compute_evolution() (Dynamics method). compute_fid_err_grad() (FidCompTraceDiff method). (FidCompTraceDiffApprox method). compute_fid_grad() (FidCompUnitary method). concurrence() (in module qutip.entropy). config (Optimizer attribute). configure() (HEOMSolver method). (HSolverDL method). conj() (Qobj method), [1]. controlled_gate() (in module qutip.qip.gates). convert_unit() (in module qutip.utilities). co",MatchSource.WIKI,docs/4.0.2/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/genindex.html
https://qutip.org/docs/4.0.2/genindex.html:14843,Usability,learn,learningtimes,14843,"odic method). init_timeslots() (Dynamics method). initial (Dynamics attribute). initial_amps (OptimResult attribute). initial_ctrl_offset (Dynamics attribute). initial_ctrl_scaling (Dynamics attribute). initial_fid_err (OptimResult attribute). initialize_controls() (Dynamics method). integrator (MemoryCascade attribute). isbra (Qobj attribute). iscp (Qobj attribute). iscptp (Qobj attribute). isherm (Qobj attribute). ishp (Qobj attribute). isket (Qobj attribute). isoper (Qobj attribute). isoperbra (Qobj attribute). isoperket (Qobj attribute). issuper (Qobj attribute). istp (Qobj attribute). iswap() (in module qutip.qip.gates). iter_num (OptimIterSummary attribute). iter_step_callback_func() (Optimizer method). iter_summary (OptimDump attribute). (Optimizer attribute). J. jmat() (in module qutip.operators). K. ket() (in module qutip.states). ket2dm() (in module qutip.states). L. L1 (MemoryCascade attribute). L2 (MemoryCascade attribute). lbound (PulseGen attribute). learningtimes (TTMSolverOptions attribute). level (Dump attribute), [1]. lindblad_dissipator() (in module qutip.superoperator). LinearSpinChain (class in qutip.qip.models.spinchain). linspace_with() (in module qutip.utilities). liouvillian() (in module qutip.superoperator). load_circuit() (CircuitProcessor method). log_level (Dynamics attribute). (FidelityComputer attribute). (Optimizer attribute). (PropagatorComputer attribute). (PulseGen attribute). (TimeslotComputer attribute). logarithmic_negativity() (in module qutip.continuous_variables). M. m_ops (StochasticSolverOptions attribute). make_sphere() (Bloch method). (Bloch3d method). map_func (StochasticSolverOptions attribute). map_kwargs (StochasticSolverOptions attribute). marginal() (Distribution method). matrix_element() (Qobj method), [1]. matrix_histogram() (in module qutip.visualization). matrix_histogram_complex() (in module qutip.visualization). max_fid_func_calls (TerminationConditions attribute). max_fid_func_exceeded (OptimResult attribute)",MatchSource.WIKI,docs/4.0.2/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/genindex.html
https://qutip.org/docs/4.0.2/index.html:3539,Deployability,release,released,3539,"n; Parallel map and parallel for-loop; IPython-based parallel_map. Saving QuTiP Objects and Data Sets; Storing and loading QuTiP objects; Storing and loading datasets. Generating Random Quantum States & Operators; Random objects with a given eigen spectrum; Composite random objects. Modifying Internal QuTiP Settings; User Accessible Parameters; Example: Changing Settings; Persistent Settings. API documentation; Classes; Qobj; eseries; Bloch sphere; non-Markovian Solvers; Solver Options and Results; Distribution functions; Quantum information processing; Optimal control. Functions; Manipulation and Creation of States and Operators; Functions acting on states and operators; Dynamics and Time-Evolution; Visualization; Quantum Information Processing; non-Markovian Solvers; Optimal control; Utilitiy Functions. Change Log; Version 4.1.0 (in dev); Improvements. Version 4.0.2 (January 5, 2017); Bug Fixes. Version 4.0.0 (December 22, 2016); Improvements; Bug Fixes. Version 3.2.0 (Never officially released); New Features; Improvements; Bug Fixes. Version 3.1.0 (January 1, 2015):; New Features; Bug Fixes. Version 3.0.1 (Aug 5, 2014):; Bug Fixes. Version 3.0.0 (July 17, 2014):; New Features; Improvements. Version 2.2.0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Indices and tables¶. Index; Module Index; Search Page. Next . © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Jan 11, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.0.2/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/index.html
https://qutip.org/docs/4.0.2/index.html:4448,Deployability,update,updated,4448,"n; Parallel map and parallel for-loop; IPython-based parallel_map. Saving QuTiP Objects and Data Sets; Storing and loading QuTiP objects; Storing and loading datasets. Generating Random Quantum States & Operators; Random objects with a given eigen spectrum; Composite random objects. Modifying Internal QuTiP Settings; User Accessible Parameters; Example: Changing Settings; Persistent Settings. API documentation; Classes; Qobj; eseries; Bloch sphere; non-Markovian Solvers; Solver Options and Results; Distribution functions; Quantum information processing; Optimal control. Functions; Manipulation and Creation of States and Operators; Functions acting on states and operators; Dynamics and Time-Evolution; Visualization; Quantum Information Processing; non-Markovian Solvers; Optimal control; Utilitiy Functions. Change Log; Version 4.1.0 (in dev); Improvements. Version 4.0.2 (January 5, 2017); Bug Fixes. Version 4.0.0 (December 22, 2016); Improvements; Bug Fixes. Version 3.2.0 (Never officially released); New Features; Improvements; Bug Fixes. Version 3.1.0 (January 1, 2015):; New Features; Bug Fixes. Version 3.0.1 (Aug 5, 2014):; Bug Fixes. Version 3.0.0 (July 17, 2014):; New Features; Improvements. Version 2.2.0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). Developers; Lead Developers; Contributors. Bibliography. Indices and tables¶. Index; Module Index; Search Page. Next . © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Jan 11, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.0.2/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/index.html
https://qutip.org/docs/4.0.2/index.html:1508,Integrability,depend,dependent,1508,"eneral Requirements; Platform-independent Installation; Building your Conda environment; Adding the conda-forge channel. Installing via pip; Installing from Source; Verifying the Installation; Checking Version Information using the About Function; Installation on MS Windows. Users Guide; Guide Overview; Organization. Basic Operations on Quantum Objects; First things first; The quantum object class; Functions operating on Qobj class. Manipulating States and Operators; Introduction; State Vectors (kets or bras); Density matrices; Qubit (two-level) systems; Expectation values; Superoperators and Vectorized Operators; Choi, Kraus, Stinespring and \(\chi\) Representations; Properties of Quantum Maps. Using Tensor Products and Partial Traces; Tensor products; Example: Constructing composite Hamiltonians; Partial trace; Superoperators and Tensor Manipulations. Time Evolution and Quantum System Dynamics; Dynamics Simulation Results; Lindblad Master Equation Solver; Monte Carlo Solver; Bloch-Redfield master equation; Solving Problems with Time-dependent Hamiltonians; Floquet Formalism; Setting Options for the Dynamics Solvers. Solving for Steady-State Solutions; Introduction; Steady State solvers in QuTiP; Using the Steadystate Solver; Additional Solver Arguments; Example: Harmonic Oscillator in Thermal Bath. An Overview of the Eseries Class; Exponential-series representation of time-dependent quantum objects; Applications of exponential series. Two-time correlation functions; Steadystate correlation function; Emission spectrum; Non-steadystate correlation function. Quantum Optimal Control; Introduction; Closed Quantum Systems; The GRAPE algorithm; The CRAB Algorithm; Optimal Quantum Control in QuTiP; Using the pulseoptim functions. Plotting on the Bloch Sphere; Introduction; The Bloch and Bloch3d Classes; Configuring the Bloch sphere; Animating with the Bloch sphere. Visualization of quantum states and processes; Fock-basis probability distribution; Quasi-probability distri",MatchSource.WIKI,docs/4.0.2/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/index.html
https://qutip.org/docs/4.0.2/index.html:1855,Integrability,depend,dependent,1855,"ject class; Functions operating on Qobj class. Manipulating States and Operators; Introduction; State Vectors (kets or bras); Density matrices; Qubit (two-level) systems; Expectation values; Superoperators and Vectorized Operators; Choi, Kraus, Stinespring and \(\chi\) Representations; Properties of Quantum Maps. Using Tensor Products and Partial Traces; Tensor products; Example: Constructing composite Hamiltonians; Partial trace; Superoperators and Tensor Manipulations. Time Evolution and Quantum System Dynamics; Dynamics Simulation Results; Lindblad Master Equation Solver; Monte Carlo Solver; Bloch-Redfield master equation; Solving Problems with Time-dependent Hamiltonians; Floquet Formalism; Setting Options for the Dynamics Solvers. Solving for Steady-State Solutions; Introduction; Steady State solvers in QuTiP; Using the Steadystate Solver; Additional Solver Arguments; Example: Harmonic Oscillator in Thermal Bath. An Overview of the Eseries Class; Exponential-series representation of time-dependent quantum objects; Applications of exponential series. Two-time correlation functions; Steadystate correlation function; Emission spectrum; Non-steadystate correlation function. Quantum Optimal Control; Introduction; Closed Quantum Systems; The GRAPE algorithm; The CRAB Algorithm; Optimal Quantum Control in QuTiP; Using the pulseoptim functions. Plotting on the Bloch Sphere; Introduction; The Bloch and Bloch3d Classes; Configuring the Bloch sphere; Animating with the Bloch sphere. Visualization of quantum states and processes; Fock-basis probability distribution; Quasi-probability distributions; Visualizing operators; Quantum process tomography. Parallel computation; Parallel map and parallel for-loop; IPython-based parallel_map. Saving QuTiP Objects and Data Sets; Storing and loading QuTiP objects; Storing and loading datasets. Generating Random Quantum States & Operators; Random objects with a given eigen spectrum; Composite random objects. Modifying Internal QuTiP Set",MatchSource.WIKI,docs/4.0.2/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/index.html
https://qutip.org/docs/4.0.2/index.html:2651,Performance,load,loading,2651,"ate solvers in QuTiP; Using the Steadystate Solver; Additional Solver Arguments; Example: Harmonic Oscillator in Thermal Bath. An Overview of the Eseries Class; Exponential-series representation of time-dependent quantum objects; Applications of exponential series. Two-time correlation functions; Steadystate correlation function; Emission spectrum; Non-steadystate correlation function. Quantum Optimal Control; Introduction; Closed Quantum Systems; The GRAPE algorithm; The CRAB Algorithm; Optimal Quantum Control in QuTiP; Using the pulseoptim functions. Plotting on the Bloch Sphere; Introduction; The Bloch and Bloch3d Classes; Configuring the Bloch sphere; Animating with the Bloch sphere. Visualization of quantum states and processes; Fock-basis probability distribution; Quasi-probability distributions; Visualizing operators; Quantum process tomography. Parallel computation; Parallel map and parallel for-loop; IPython-based parallel_map. Saving QuTiP Objects and Data Sets; Storing and loading QuTiP objects; Storing and loading datasets. Generating Random Quantum States & Operators; Random objects with a given eigen spectrum; Composite random objects. Modifying Internal QuTiP Settings; User Accessible Parameters; Example: Changing Settings; Persistent Settings. API documentation; Classes; Qobj; eseries; Bloch sphere; non-Markovian Solvers; Solver Options and Results; Distribution functions; Quantum information processing; Optimal control. Functions; Manipulation and Creation of States and Operators; Functions acting on states and operators; Dynamics and Time-Evolution; Visualization; Quantum Information Processing; non-Markovian Solvers; Optimal control; Utilitiy Functions. Change Log; Version 4.1.0 (in dev); Improvements. Version 4.0.2 (January 5, 2017); Bug Fixes. Version 4.0.0 (December 22, 2016); Improvements; Bug Fixes. Version 3.2.0 (Never officially released); New Features; Improvements; Bug Fixes. Version 3.1.0 (January 1, 2015):; New Features; Bug Fixes. Versi",MatchSource.WIKI,docs/4.0.2/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/index.html
https://qutip.org/docs/4.0.2/index.html:2686,Performance,load,loading,2686,"ate solvers in QuTiP; Using the Steadystate Solver; Additional Solver Arguments; Example: Harmonic Oscillator in Thermal Bath. An Overview of the Eseries Class; Exponential-series representation of time-dependent quantum objects; Applications of exponential series. Two-time correlation functions; Steadystate correlation function; Emission spectrum; Non-steadystate correlation function. Quantum Optimal Control; Introduction; Closed Quantum Systems; The GRAPE algorithm; The CRAB Algorithm; Optimal Quantum Control in QuTiP; Using the pulseoptim functions. Plotting on the Bloch Sphere; Introduction; The Bloch and Bloch3d Classes; Configuring the Bloch sphere; Animating with the Bloch sphere. Visualization of quantum states and processes; Fock-basis probability distribution; Quasi-probability distributions; Visualizing operators; Quantum process tomography. Parallel computation; Parallel map and parallel for-loop; IPython-based parallel_map. Saving QuTiP Objects and Data Sets; Storing and loading QuTiP objects; Storing and loading datasets. Generating Random Quantum States & Operators; Random objects with a given eigen spectrum; Composite random objects. Modifying Internal QuTiP Settings; User Accessible Parameters; Example: Changing Settings; Persistent Settings. API documentation; Classes; Qobj; eseries; Bloch sphere; non-Markovian Solvers; Solver Options and Results; Distribution functions; Quantum information processing; Optimal control. Functions; Manipulation and Creation of States and Operators; Functions acting on states and operators; Dynamics and Time-Evolution; Visualization; Quantum Information Processing; non-Markovian Solvers; Optimal control; Utilitiy Functions. Change Log; Version 4.1.0 (in dev); Improvements. Version 4.0.2 (January 5, 2017); Bug Fixes. Version 4.0.0 (December 22, 2016); Improvements; Bug Fixes. Version 3.2.0 (Never officially released); New Features; Improvements; Bug Fixes. Version 3.1.0 (January 1, 2015):; New Features; Bug Fixes. Versi",MatchSource.WIKI,docs/4.0.2/index.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/index.html
https://qutip.org/docs/4.0.2/installation.html:2649,Availability,avail,available,2649,"cludes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms.; We would not recommend installation into the system Python on Linux platforms, as it is likely that the required libraries will be difficult to update to sufficiently recent versions. The system Python on Linux is used for system things, changing its configuration could lead to highly undesirable results. We are recommending and supporting Anaconda / Miniconda Python environments for QuTiP on all platforms. Platform-independent Installation¶; QuTiP is designed to work best when using the Anaconda or Intel Python distributions that support the conda package management system.; If you aleady have your conda environment set up, and have the conda-forge channel available, then you can install QuTiP using:; conda install qutip. Otherwise refer to building-conda-environment; If you are using MS Windows, then you will probably want to refer to installation-on-MS-Windows. Building your Conda environment¶; The default Anaconda environment has all the Python packages needed for running QuTiP.; You may however wish to install QuTiP in a Conda environment (env) other than the default Anaconda environment.; You may wish to this for many reasons:. It is a good idea generally; You are using MS Windows and want to use Python 3; You are using Miniconda because you do not have the disk space for full Anaconda. To create a Conda env for QuTiP called qutip:-; (note the python=3 can be ommited if you want the default Python version, if you want to use Python 3 with MS Windows, then it must be python=3.4); recommended:; conda create -n qutip python=3 mkl numpy scipy cython matplotlib nose multiprocess jupyter notebook spyder. minimum (recommended):; c",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:4999,Availability,avail,available,4999,"rge channel with lowest priority using:; conda config --append channels conda-forge. Otherwise you should consider reinstalling Anaconda / Miniconda. In theory:; conda update conda. will update your conda to the latest version, but this can lead to breaking your default Ananconda enviroment.; Alternatively, this will add conda-forge as the highest priority channel.; conda config --add channels conda-forge. It is almost certainly better to have defaults as the highest priority channel.; You can edit your .condarc (user home folder) file manually, so that conda-forge is below defaults in the channels list. Installing via pip¶; For other types of installation, it is often easiest to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Pyt",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:5018,Availability,down,download,5018,"rge channel with lowest priority using:; conda config --append channels conda-forge. Otherwise you should consider reinstalling Anaconda / Miniconda. In theory:; conda update conda. will update your conda to the latest version, but this can lead to breaking your default Ananconda enviroment.; Alternatively, this will add conda-forge as the highest priority channel.; conda config --add channels conda-forge. It is almost certainly better to have defaults as the highest priority channel.; You can edit your .condarc (user home folder) file manually, so that conda-forge is below defaults in the channels list. Installing via pip¶; For other types of installation, it is often easiest to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Pyt",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:5084,Availability,down,download,5084," Otherwise you should consider reinstalling Anaconda / Miniconda. In theory:; conda update conda. will update your conda to the latest version, but this can lead to breaking your default Ananconda enviroment.; Alternatively, this will add conda-forge as the highest priority channel.; conda config --add channels conda-forge. It is almost certainly better to have defaults as the highest priority channel.; You can edit your .condarc (user home folder) file manually, so that conda-forge is below defaults in the channels list. Installing via pip¶; For other types of installation, it is often easiest to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, the",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:5129,Availability,avail,available,5129,"g Anaconda / Miniconda. In theory:; conda update conda. will update your conda to the latest version, but this can lead to breaking your default Ananconda enviroment.; Alternatively, this will add conda-forge as the highest priority channel.; conda config --add channels conda-forge. It is almost certainly better to have defaults as the highest priority channel.; You can edit your .condarc (user home folder) file manually, so that conda-forge is below defaults in the channels list. Installing via pip¶; For other types of installation, it is often easiest to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP fu",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:6166,Availability,error,errors,6166,"we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). Installation on MS Windows¶; We are recommending and supporting installation of QuTiP into a Conda environment. Other scientific Python implementations such as Python-xy may also work.; QuTiP uses dynamic compilation of C for some of its time-dependant dynamics solvers. For MS Windows users the additional challenge is the need for a ANSI C99 compliant C compiler. Unlike other platforms, no C compiler is provided with Windows by default.; It is possible to install a Windows SDK tha",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:1414,Deployability,install,installing,1414," Change Log; Developers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs »; Installation. Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.4+ is highly recommended. Numpy; 1.8+; Not tested on lower versions. Scipy; 0.15+; Lower versions have missing features. Matplotlib; 1.2.1+; Some plotting does not work on lower versions. Cython; 0.21+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. In addition, there are several optional packages that provide additional functionality:. Package; Version; Details. gfortran; 4.2+; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Needed for using the Bloch3d class. LaTeX; TexLive 2009+; Needed if using LaTeX in matplotlib figures. nose; 1.1.2+; For running the test suite. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms.; We would not recommend installation into the system Python on Linux platforms, as it is likely that the required libraries will be difficult to update to sufficiently recent versions. The system Python on Linux is used for system things, changing its configuration could lead to highly undesirable results. We are recommending and supporting Anaconda / Miniconda Python environments for QuTiP on all platforms. Platform-independent Installation",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:1797,Deployability,install,install,1797,".15+; Lower versions have missing features. Matplotlib; 1.2.1+; Some plotting does not work on lower versions. Cython; 0.21+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. In addition, there are several optional packages that provide additional functionality:. Package; Version; Details. gfortran; 4.2+; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Needed for using the Bloch3d class. LaTeX; TexLive 2009+; Needed if using LaTeX in matplotlib figures. nose; 1.1.2+; For running the test suite. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms.; We would not recommend installation into the system Python on Linux platforms, as it is likely that the required libraries will be difficult to update to sufficiently recent versions. The system Python on Linux is used for system things, changing its configuration could lead to highly undesirable results. We are recommending and supporting Anaconda / Miniconda Python environments for QuTiP on all platforms. Platform-independent Installation¶; QuTiP is designed to work best when using the Anaconda or Intel Python distributions that support the conda package management system.; If you aleady have your conda environment set up, and have the conda-forge channel available, then you can install QuTiP using:; conda install qutip. Otherwise refer to building-conda-environment; If you are using MS Windows, then you will probably want to refer to installation-",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:2006,Deployability,install,installation,2006,"n files. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. In addition, there are several optional packages that provide additional functionality:. Package; Version; Details. gfortran; 4.2+; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Needed for using the Bloch3d class. LaTeX; TexLive 2009+; Needed if using LaTeX in matplotlib figures. nose; 1.1.2+; For running the test suite. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms.; We would not recommend installation into the system Python on Linux platforms, as it is likely that the required libraries will be difficult to update to sufficiently recent versions. The system Python on Linux is used for system things, changing its configuration could lead to highly undesirable results. We are recommending and supporting Anaconda / Miniconda Python environments for QuTiP on all platforms. Platform-independent Installation¶; QuTiP is designed to work best when using the Anaconda or Intel Python distributions that support the conda package management system.; If you aleady have your conda environment set up, and have the conda-forge channel available, then you can install QuTiP using:; conda install qutip. Otherwise refer to building-conda-environment; If you are using MS Windows, then you will probably want to refer to installation-on-MS-Windows. Building your Conda environment¶; The default Anaconda environment has all the Python packages needed for running QuTiP.; You may however wish to install QuTiP in a Conda environment (env) other than the default An",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:2127,Deployability,update,update,2127,"n files. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. In addition, there are several optional packages that provide additional functionality:. Package; Version; Details. gfortran; 4.2+; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Needed for using the Bloch3d class. LaTeX; TexLive 2009+; Needed if using LaTeX in matplotlib figures. nose; 1.1.2+; For running the test suite. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms.; We would not recommend installation into the system Python on Linux platforms, as it is likely that the required libraries will be difficult to update to sufficiently recent versions. The system Python on Linux is used for system things, changing its configuration could lead to highly undesirable results. We are recommending and supporting Anaconda / Miniconda Python environments for QuTiP on all platforms. Platform-independent Installation¶; QuTiP is designed to work best when using the Anaconda or Intel Python distributions that support the conda package management system.; If you aleady have your conda environment set up, and have the conda-forge channel available, then you can install QuTiP using:; conda install qutip. Otherwise refer to building-conda-environment; If you are using MS Windows, then you will probably want to refer to installation-on-MS-Windows. Building your Conda environment¶; The default Anaconda environment has all the Python packages needed for running QuTiP.; You may however wish to install QuTiP in a Conda environment (env) other than the default An",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:2234,Deployability,configurat,configuration,2234,"nctionality:. Package; Version; Details. gfortran; 4.2+; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Needed for using the Bloch3d class. LaTeX; TexLive 2009+; Needed if using LaTeX in matplotlib figures. nose; 1.1.2+; For running the test suite. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms.; We would not recommend installation into the system Python on Linux platforms, as it is likely that the required libraries will be difficult to update to sufficiently recent versions. The system Python on Linux is used for system things, changing its configuration could lead to highly undesirable results. We are recommending and supporting Anaconda / Miniconda Python environments for QuTiP on all platforms. Platform-independent Installation¶; QuTiP is designed to work best when using the Anaconda or Intel Python distributions that support the conda package management system.; If you aleady have your conda environment set up, and have the conda-forge channel available, then you can install QuTiP using:; conda install qutip. Otherwise refer to building-conda-environment; If you are using MS Windows, then you will probably want to refer to installation-on-MS-Windows. Building your Conda environment¶; The default Anaconda environment has all the Python packages needed for running QuTiP.; You may however wish to install QuTiP in a Conda environment (env) other than the default Anaconda environment.; You may wish to this for many reasons:. It is a good idea generally; You are using MS Windows and want to use Python 3; You are using",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:2673,Deployability,install,install,2673,"cludes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms.; We would not recommend installation into the system Python on Linux platforms, as it is likely that the required libraries will be difficult to update to sufficiently recent versions. The system Python on Linux is used for system things, changing its configuration could lead to highly undesirable results. We are recommending and supporting Anaconda / Miniconda Python environments for QuTiP on all platforms. Platform-independent Installation¶; QuTiP is designed to work best when using the Anaconda or Intel Python distributions that support the conda package management system.; If you aleady have your conda environment set up, and have the conda-forge channel available, then you can install QuTiP using:; conda install qutip. Otherwise refer to building-conda-environment; If you are using MS Windows, then you will probably want to refer to installation-on-MS-Windows. Building your Conda environment¶; The default Anaconda environment has all the Python packages needed for running QuTiP.; You may however wish to install QuTiP in a Conda environment (env) other than the default Anaconda environment.; You may wish to this for many reasons:. It is a good idea generally; You are using MS Windows and want to use Python 3; You are using Miniconda because you do not have the disk space for full Anaconda. To create a Conda env for QuTiP called qutip:-; (note the python=3 can be ommited if you want the default Python version, if you want to use Python 3 with MS Windows, then it must be python=3.4); recommended:; conda create -n qutip python=3 mkl numpy scipy cython matplotlib nose multiprocess jupyter notebook spyder. minimum (recommended):; c",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:2701,Deployability,install,install,2701,"cludes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms.; We would not recommend installation into the system Python on Linux platforms, as it is likely that the required libraries will be difficult to update to sufficiently recent versions. The system Python on Linux is used for system things, changing its configuration could lead to highly undesirable results. We are recommending and supporting Anaconda / Miniconda Python environments for QuTiP on all platforms. Platform-independent Installation¶; QuTiP is designed to work best when using the Anaconda or Intel Python distributions that support the conda package management system.; If you aleady have your conda environment set up, and have the conda-forge channel available, then you can install QuTiP using:; conda install qutip. Otherwise refer to building-conda-environment; If you are using MS Windows, then you will probably want to refer to installation-on-MS-Windows. Building your Conda environment¶; The default Anaconda environment has all the Python packages needed for running QuTiP.; You may however wish to install QuTiP in a Conda environment (env) other than the default Anaconda environment.; You may wish to this for many reasons:. It is a good idea generally; You are using MS Windows and want to use Python 3; You are using Miniconda because you do not have the disk space for full Anaconda. To create a Conda env for QuTiP called qutip:-; (note the python=3 can be ommited if you want the default Python version, if you want to use Python 3 with MS Windows, then it must be python=3.4); recommended:; conda create -n qutip python=3 mkl numpy scipy cython matplotlib nose multiprocess jupyter notebook spyder. minimum (recommended):; c",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:2832,Deployability,install,installation-on-MS-Windows,2832," order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms.; We would not recommend installation into the system Python on Linux platforms, as it is likely that the required libraries will be difficult to update to sufficiently recent versions. The system Python on Linux is used for system things, changing its configuration could lead to highly undesirable results. We are recommending and supporting Anaconda / Miniconda Python environments for QuTiP on all platforms. Platform-independent Installation¶; QuTiP is designed to work best when using the Anaconda or Intel Python distributions that support the conda package management system.; If you aleady have your conda environment set up, and have the conda-forge channel available, then you can install QuTiP using:; conda install qutip. Otherwise refer to building-conda-environment; If you are using MS Windows, then you will probably want to refer to installation-on-MS-Windows. Building your Conda environment¶; The default Anaconda environment has all the Python packages needed for running QuTiP.; You may however wish to install QuTiP in a Conda environment (env) other than the default Anaconda environment.; You may wish to this for many reasons:. It is a good idea generally; You are using MS Windows and want to use Python 3; You are using Miniconda because you do not have the disk space for full Anaconda. To create a Conda env for QuTiP called qutip:-; (note the python=3 can be ommited if you want the default Python version, if you want to use Python 3 with MS Windows, then it must be python=3.4); recommended:; conda create -n qutip python=3 mkl numpy scipy cython matplotlib nose multiprocess jupyter notebook spyder. minimum (recommended):; conda create -n qutip numpy scipy cython nose matplotlib. absolute mimimum:; conda create -n qutip numpy scipy cython. The jupyter and notebook pack",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:3006,Deployability,install,install,3006,"ython on Linux platforms, as it is likely that the required libraries will be difficult to update to sufficiently recent versions. The system Python on Linux is used for system things, changing its configuration could lead to highly undesirable results. We are recommending and supporting Anaconda / Miniconda Python environments for QuTiP on all platforms. Platform-independent Installation¶; QuTiP is designed to work best when using the Anaconda or Intel Python distributions that support the conda package management system.; If you aleady have your conda environment set up, and have the conda-forge channel available, then you can install QuTiP using:; conda install qutip. Otherwise refer to building-conda-environment; If you are using MS Windows, then you will probably want to refer to installation-on-MS-Windows. Building your Conda environment¶; The default Anaconda environment has all the Python packages needed for running QuTiP.; You may however wish to install QuTiP in a Conda environment (env) other than the default Anaconda environment.; You may wish to this for many reasons:. It is a good idea generally; You are using MS Windows and want to use Python 3; You are using Miniconda because you do not have the disk space for full Anaconda. To create a Conda env for QuTiP called qutip:-; (note the python=3 can be ommited if you want the default Python version, if you want to use Python 3 with MS Windows, then it must be python=3.4); recommended:; conda create -n qutip python=3 mkl numpy scipy cython matplotlib nose multiprocess jupyter notebook spyder. minimum (recommended):; conda create -n qutip numpy scipy cython nose matplotlib. absolute mimimum:; conda create -n qutip numpy scipy cython. The jupyter and notebook packages are for working with Jupyter notebooks (fka IPython notebooks).; Spyder is an IDE for scientific development with Python. Adding the conda-forge channel¶; If you have conda 4.1.0 or later then, add the conda-forge channel with lowest priority us",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:4170,Deployability,update,update,4170," are using MS Windows and want to use Python 3; You are using Miniconda because you do not have the disk space for full Anaconda. To create a Conda env for QuTiP called qutip:-; (note the python=3 can be ommited if you want the default Python version, if you want to use Python 3 with MS Windows, then it must be python=3.4); recommended:; conda create -n qutip python=3 mkl numpy scipy cython matplotlib nose multiprocess jupyter notebook spyder. minimum (recommended):; conda create -n qutip numpy scipy cython nose matplotlib. absolute mimimum:; conda create -n qutip numpy scipy cython. The jupyter and notebook packages are for working with Jupyter notebooks (fka IPython notebooks).; Spyder is an IDE for scientific development with Python. Adding the conda-forge channel¶; If you have conda 4.1.0 or later then, add the conda-forge channel with lowest priority using:; conda config --append channels conda-forge. Otherwise you should consider reinstalling Anaconda / Miniconda. In theory:; conda update conda. will update your conda to the latest version, but this can lead to breaking your default Ananconda enviroment.; Alternatively, this will add conda-forge as the highest priority channel.; conda config --add channels conda-forge. It is almost certainly better to have defaults as the highest priority channel.; You can edit your .condarc (user home folder) file manually, so that conda-forge is below defaults in the channels list. Installing via pip¶; For other types of installation, it is often easiest to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. ht",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:4189,Deployability,update,update,4189," because you do not have the disk space for full Anaconda. To create a Conda env for QuTiP called qutip:-; (note the python=3 can be ommited if you want the default Python version, if you want to use Python 3 with MS Windows, then it must be python=3.4); recommended:; conda create -n qutip python=3 mkl numpy scipy cython matplotlib nose multiprocess jupyter notebook spyder. minimum (recommended):; conda create -n qutip numpy scipy cython nose matplotlib. absolute mimimum:; conda create -n qutip numpy scipy cython. The jupyter and notebook packages are for working with Jupyter notebooks (fka IPython notebooks).; Spyder is an IDE for scientific development with Python. Adding the conda-forge channel¶; If you have conda 4.1.0 or later then, add the conda-forge channel with lowest priority using:; conda config --append channels conda-forge. Otherwise you should consider reinstalling Anaconda / Miniconda. In theory:; conda update conda. will update your conda to the latest version, but this can lead to breaking your default Ananconda enviroment.; Alternatively, this will add conda-forge as the highest priority channel.; conda config --add channels conda-forge. It is almost certainly better to have defaults as the highest priority channel.; You can edit your .condarc (user home folder) file manually, so that conda-forge is below defaults in the channels list. Installing via pip¶; For other types of installation, it is often easiest to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest s",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:4654,Deployability,install,installation,4654,"ipy cython nose matplotlib. absolute mimimum:; conda create -n qutip numpy scipy cython. The jupyter and notebook packages are for working with Jupyter notebooks (fka IPython notebooks).; Spyder is an IDE for scientific development with Python. Adding the conda-forge channel¶; If you have conda 4.1.0 or later then, add the conda-forge channel with lowest priority using:; conda config --append channels conda-forge. Otherwise you should consider reinstalling Anaconda / Miniconda. In theory:; conda update conda. will update your conda to the latest version, but this can lead to breaking your default Ananconda enviroment.; Alternatively, this will add conda-forge as the highest priority channel.; conda config --add channels conda-forge. It is almost certainly better to have defaults as the highest priority channel.; You can edit your .condarc (user home folder) file manually, so that conda-forge is below defaults in the channels list. Installing via pip¶; For other types of installation, it is often easiest to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --w",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:4732,Deployability,install,install,4732,"p numpy scipy cython. The jupyter and notebook packages are for working with Jupyter notebooks (fka IPython notebooks).; Spyder is an IDE for scientific development with Python. Adding the conda-forge channel¶; If you have conda 4.1.0 or later then, add the conda-forge channel with lowest priority using:; conda config --append channels conda-forge. Otherwise you should consider reinstalling Anaconda / Miniconda. In theory:; conda update conda. will update your conda to the latest version, but this can lead to breaking your default Ananconda enviroment.; Alternatively, this will add conda-forge as the highest priority channel.; conda config --add channels conda-forge. It is almost certainly better to have defaults as the highest priority channel.; You can edit your .condarc (user home folder) file manually, so that conda-forge is below defaults in the channels list. Installing via pip¶; For other types of installation, it is often easiest to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Ve",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:4822,Deployability,install,install,4822,"g with Jupyter notebooks (fka IPython notebooks).; Spyder is an IDE for scientific development with Python. Adding the conda-forge channel¶; If you have conda 4.1.0 or later then, add the conda-forge channel with lowest priority using:; conda config --append channels conda-forge. Otherwise you should consider reinstalling Anaconda / Miniconda. In theory:; conda update conda. will update your conda to the latest version, but this can lead to breaking your default Ananconda enviroment.; Alternatively, this will add conda-forge as the highest priority channel.; conda config --add channels conda-forge. It is almost certainly better to have defaults as the highest priority channel.; You can edit your .condarc (user home folder) file manually, so that conda-forge is below defaults in the channels list. Installing via pip¶; For other types of installation, it is often easiest to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in tes",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:4838,Deployability,install,install-option,4838,"g with Jupyter notebooks (fka IPython notebooks).; Spyder is an IDE for scientific development with Python. Adding the conda-forge channel¶; If you have conda 4.1.0 or later then, add the conda-forge channel with lowest priority using:; conda config --append channels conda-forge. Otherwise you should consider reinstalling Anaconda / Miniconda. In theory:; conda update conda. will update your conda to the latest version, but this can lead to breaking your default Ananconda enviroment.; Alternatively, this will add conda-forge as the highest priority channel.; conda config --add channels conda-forge. It is almost certainly better to have defaults as the highest priority channel.; You can edit your .condarc (user home folder) file manually, so that conda-forge is below defaults in the channels list. Installing via pip¶; For other types of installation, it is often easiest to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in tes",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:4900,Deployability,install,installation,4900,"h Python. Adding the conda-forge channel¶; If you have conda 4.1.0 or later then, add the conda-forge channel with lowest priority using:; conda config --append channels conda-forge. Otherwise you should consider reinstalling Anaconda / Miniconda. In theory:; conda update conda. will update your conda to the latest version, but this can lead to breaking your default Ananconda enviroment.; Alternatively, this will add conda-forge as the highest priority channel.; conda config --add channels conda-forge. It is almost certainly better to have defaults as the highest priority channel.; You can edit your .condarc (user home folder) file manually, so that conda-forge is below defaults in the channels list. Installing via pip¶; For other types of installation, it is often easiest to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you mus",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:4977,Deployability,release,releases,4977,"rge channel with lowest priority using:; conda config --append channels conda-forge. Otherwise you should consider reinstalling Anaconda / Miniconda. In theory:; conda update conda. will update your conda to the latest version, but this can lead to breaking your default Ananconda enviroment.; Alternatively, this will add conda-forge as the highest priority channel.; conda config --add channels conda-forge. It is almost certainly better to have defaults as the highest priority channel.; You can edit your .condarc (user home folder) file manually, so that conda-forge is below defaults in the channels list. Installing via pip¶; For other types of installation, it is often easiest to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Pyt",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:5245,Deployability,release,release,5245,"ernatively, this will add conda-forge as the highest priority channel.; conda config --add channels conda-forge. It is almost certainly better to have defaults as the highest priority channel.; You can edit your .condarc (user home folder) file manually, so that conda-forge is below defaults in the channels list. Installing via pip¶; For other types of installation, it is often easiest to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed ver",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:5504,Deployability,install,install,5504,"folder) file manually, so that conda-forge is below defaults in the channels list. Installing via pip¶; For other types of installation, it is often easiest to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes a",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:5566,Deployability,install,install,5566,"forge is below defaults in the channels list. Installing via pip¶; For other types of installation, it is often easiest to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing inform",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:5659,Deployability,install,install,5659,"it is often easiest to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:5834,Deployability,install,installation,5834,"Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). Installation on MS Windows¶; We are recommending and supporting installation of Q",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:5943,Deployability,install,installing,5943,"uTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). Installation on MS Windows¶; We are recommending and supporting installation of QuTiP into a Conda environment. Other scientific Python implementations such as Python-xy may also work.; QuTiP uses dynamic compilation of C for some of its time-dependant dynamics solvers. Fo",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:5971,Deployability,install,installation,5971,"uTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). Installation on MS Windows¶; We are recommending and supporting installation of QuTiP into a Conda environment. Other scientific Python implementations such as Python-xy may also work.; QuTiP uses dynamic compilation of C for some of its time-dependant dynamics solvers. Fo",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:6207,Deployability,install,installed,6207,"we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). Installation on MS Windows¶; We are recommending and supporting installation of QuTiP into a Conda environment. Other scientific Python implementations such as Python-xy may also work.; QuTiP uses dynamic compilation of C for some of its time-dependant dynamics solvers. For MS Windows users the additional challenge is the need for a ANSI C99 compliant C compiler. Unlike other platforms, no C compiler is provided with Windows by default.; It is possible to install a Windows SDK tha",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:6287,Deployability,install,installed,6287," in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). Installation on MS Windows¶; We are recommending and supporting installation of QuTiP into a Conda environment. Other scientific Python implementations such as Python-xy may also work.; QuTiP uses dynamic compilation of C for some of its time-dependant dynamics solvers. For MS Windows users the additional challenge is the need for a ANSI C99 compliant C compiler. Unlike other platforms, no C compiler is provided with Windows by default.; It is possible to install a Windows SDK that includes a C compiler, but ANSI C99 compliance is not 100%.; The mingw-w64 project lo",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:6618,Deployability,install,installed,6618,"ython setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). Installation on MS Windows¶; We are recommending and supporting installation of QuTiP into a Conda environment. Other scientific Python implementations such as Python-xy may also work.; QuTiP uses dynamic compilation of C for some of its time-dependant dynamics solvers. For MS Windows users the additional challenge is the need for a ANSI C99 compliant C compiler. Unlike other platforms, no C compiler is provided with Windows by default.; It is possible to install a Windows SDK that includes a C compiler, but ANSI C99 compliance is not 100%.; The mingw-w64 project looks to help overcome this, and to some extent it is successful.; The conda-forge packages for QuTiP will also install the Mingwpy package, which uses mingw-w64.; Currently we are only able get QuTiP working with Python <= 3.4. Python >= 3.5 is compiled with a ne",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:6781,Deployability,install,installation,6781,"ludes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). Installation on MS Windows¶; We are recommending and supporting installation of QuTiP into a Conda environment. Other scientific Python implementations such as Python-xy may also work.; QuTiP uses dynamic compilation of C for some of its time-dependant dynamics solvers. For MS Windows users the additional challenge is the need for a ANSI C99 compliant C compiler. Unlike other platforms, no C compiler is provided with Windows by default.; It is possible to install a Windows SDK that includes a C compiler, but ANSI C99 compliance is not 100%.; The mingw-w64 project looks to help overcome this, and to some extent it is successful.; The conda-forge packages for QuTiP will also install the Mingwpy package, which uses mingw-w64.; Currently we are only able get QuTiP working with Python <= 3.4. Python >= 3.5 is compiled with a newer version of the MSVC compiler, and there are currently license restrictions.; To specify the use of the mingw compiler you will need to create the following file:; <path to my Python env>/Lib/distutils/distutils.cfg. w",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:7177,Deployability,install,install,7177,"cessful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). Installation on MS Windows¶; We are recommending and supporting installation of QuTiP into a Conda environment. Other scientific Python implementations such as Python-xy may also work.; QuTiP uses dynamic compilation of C for some of its time-dependant dynamics solvers. For MS Windows users the additional challenge is the need for a ANSI C99 compliant C compiler. Unlike other platforms, no C compiler is provided with Windows by default.; It is possible to install a Windows SDK that includes a C compiler, but ANSI C99 compliance is not 100%.; The mingw-w64 project looks to help overcome this, and to some extent it is successful.; The conda-forge packages for QuTiP will also install the Mingwpy package, which uses mingw-w64.; Currently we are only able get QuTiP working with Python <= 3.4. Python >= 3.5 is compiled with a newer version of the MSVC compiler, and there are currently license restrictions.; To specify the use of the mingw compiler you will need to create the following file:; <path to my Python env>/Lib/distutils/distutils.cfg. with the following contents:; [build]; compiler=mingw32; [build_ext]; compiler=mingw32. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Jan 11, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:7399,Deployability,install,install,7399,"cessful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). Installation on MS Windows¶; We are recommending and supporting installation of QuTiP into a Conda environment. Other scientific Python implementations such as Python-xy may also work.; QuTiP uses dynamic compilation of C for some of its time-dependant dynamics solvers. For MS Windows users the additional challenge is the need for a ANSI C99 compliant C compiler. Unlike other platforms, no C compiler is provided with Windows by default.; It is possible to install a Windows SDK that includes a C compiler, but ANSI C99 compliance is not 100%.; The mingw-w64 project looks to help overcome this, and to some extent it is successful.; The conda-forge packages for QuTiP will also install the Mingwpy package, which uses mingw-w64.; Currently we are only able get QuTiP working with Python <= 3.4. Python >= 3.5 is compiled with a newer version of the MSVC compiler, and there are currently license restrictions.; To specify the use of the mingw compiler you will need to create the following file:; <path to my Python env>/Lib/distutils/distutils.cfg. with the following contents:; [build]; compiler=mingw32; [build_ext]; compiler=mingw32. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Jan 11, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:7987,Deployability,update,updated,7987,"cessful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). Installation on MS Windows¶; We are recommending and supporting installation of QuTiP into a Conda environment. Other scientific Python implementations such as Python-xy may also work.; QuTiP uses dynamic compilation of C for some of its time-dependant dynamics solvers. For MS Windows users the additional challenge is the need for a ANSI C99 compliant C compiler. Unlike other platforms, no C compiler is provided with Windows by default.; It is possible to install a Windows SDK that includes a C compiler, but ANSI C99 compliance is not 100%.; The mingw-w64 project looks to help overcome this, and to some extent it is successful.; The conda-forge packages for QuTiP will also install the Mingwpy package, which uses mingw-w64.; Currently we are only able get QuTiP working with Python <= 3.4. Python >= 3.5 is compiled with a newer version of the MSVC compiler, and there are currently license restrictions.; To specify the use of the mingw compiler you will need to create the following file:; <path to my Python env>/Lib/distutils/distutils.cfg. with the following contents:; [build]; compiler=mingw32; [build_ext]; compiler=mingw32. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Jan 11, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:565,Integrability,depend,depends,565,". . Installation — QuTiP 4.0 Documentation. QuTiP: Quantum Toolbox in Python; . ; . 4.0; . Frontmatter; Installation; General Requirements; Platform-independent Installation; Building your Conda environment; Adding the conda-forge channel. Installing via pip; Installing from Source; Verifying the Installation; Checking Version Information using the About Function; Installation on MS Windows. Users Guide; API documentation; Change Log; Developers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs »; Installation. Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.4+ is highly recommended. Numpy; 1.8+; Not tested on lower versions. Scipy; 0.15+; Lower versions have missing features. Matplotlib; 1.2.1+; Some plotting does not work on lower versions. Cython; 0.21+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. In addition, there are several optional packages that provide additional functionality:. Package; Version; Details. gfortran; 4.2+; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Needed for using the Bloch3d class. LaTeX; TexLive 2009+; Needed if using LaTeX in matplotlib figures. nose; 1.1.2+; For running the test suite. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms.; We would not recom",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:1001,Integrability,depend,dependent,1001,". . Installation — QuTiP 4.0 Documentation. QuTiP: Quantum Toolbox in Python; . ; . 4.0; . Frontmatter; Installation; General Requirements; Platform-independent Installation; Building your Conda environment; Adding the conda-forge channel. Installing via pip; Installing from Source; Verifying the Installation; Checking Version Information using the About Function; Installation on MS Windows. Users Guide; API documentation; Change Log; Developers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs »; Installation. Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.4+ is highly recommended. Numpy; 1.8+; Not tested on lower versions. Scipy; 0.15+; Lower versions have missing features. Matplotlib; 1.2.1+; Some plotting does not work on lower versions. Cython; 0.21+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. In addition, there are several optional packages that provide additional functionality:. Package; Version; Details. gfortran; 4.2+; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Needed for using the Bloch3d class. LaTeX; TexLive 2009+; Needed if using LaTeX in matplotlib figures. nose; 1.1.2+; For running the test suite. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms.; We would not recom",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:4890,Integrability,depend,dependent,4890,"h Python. Adding the conda-forge channel¶; If you have conda 4.1.0 or later then, add the conda-forge channel with lowest priority using:; conda config --append channels conda-forge. Otherwise you should consider reinstalling Anaconda / Miniconda. In theory:; conda update conda. will update your conda to the latest version, but this can lead to breaking your default Ananconda enviroment.; Alternatively, this will add conda-forge as the highest priority channel.; conda config --add channels conda-forge. It is almost certainly better to have defaults as the highest priority channel.; You can edit your .condarc (user home folder) file manually, so that conda-forge is below defaults in the channels list. Installing via pip¶; For other types of installation, it is often easiest to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you mus",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:5473,Integrability,depend,dependencies,5473,"s the highest priority channel.; You can edit your .condarc (user home folder) file manually, so that conda-forge is below defaults in the channels list. Installing via pip¶; For other types of installation, it is often easiest to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. ",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:6319,Integrability,depend,dependencies,6319," in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). Installation on MS Windows¶; We are recommending and supporting installation of QuTiP into a Conda environment. Other scientific Python implementations such as Python-xy may also work.; QuTiP uses dynamic compilation of C for some of its time-dependant dynamics solvers. For MS Windows users the additional challenge is the need for a ANSI C99 compliant C compiler. Unlike other platforms, no C compiler is provided with Windows by default.; It is possible to install a Windows SDK that includes a C compiler, but ANSI C99 compliance is not 100%.; The mingw-w64 project lo",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:6419,Integrability,message,message,6419,"om the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). Installation on MS Windows¶; We are recommending and supporting installation of QuTiP into a Conda environment. Other scientific Python implementations such as Python-xy may also work.; QuTiP uses dynamic compilation of C for some of its time-dependant dynamics solvers. For MS Windows users the additional challenge is the need for a ANSI C99 compliant C compiler. Unlike other platforms, no C compiler is provided with Windows by default.; It is possible to install a Windows SDK that includes a C compiler, but ANSI C99 compliance is not 100%.; The mingw-w64 project looks to help overcome this, and to some extent it is successful.; The conda-forge packages for QuTiP will al",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:6605,Integrability,depend,dependencies,6605,"ython setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). Installation on MS Windows¶; We are recommending and supporting installation of QuTiP into a Conda environment. Other scientific Python implementations such as Python-xy may also work.; QuTiP uses dynamic compilation of C for some of its time-dependant dynamics solvers. For MS Windows users the additional challenge is the need for a ANSI C99 compliant C compiler. Unlike other platforms, no C compiler is provided with Windows by default.; It is possible to install a Windows SDK that includes a C compiler, but ANSI C99 compliance is not 100%.; The mingw-w64 project looks to help overcome this, and to some extent it is successful.; The conda-forge packages for QuTiP will also install the Mingwpy package, which uses mingw-w64.; Currently we are only able get QuTiP working with Python <= 3.4. Python >= 3.5 is compiled with a ne",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:6960,Integrability,depend,dependant,6960,"nstalling QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). Installation on MS Windows¶; We are recommending and supporting installation of QuTiP into a Conda environment. Other scientific Python implementations such as Python-xy may also work.; QuTiP uses dynamic compilation of C for some of its time-dependant dynamics solvers. For MS Windows users the additional challenge is the need for a ANSI C99 compliant C compiler. Unlike other platforms, no C compiler is provided with Windows by default.; It is possible to install a Windows SDK that includes a C compiler, but ANSI C99 compliance is not 100%.; The mingw-w64 project looks to help overcome this, and to some extent it is successful.; The conda-forge packages for QuTiP will also install the Mingwpy package, which uses mingw-w64.; Currently we are only able get QuTiP working with Python <= 3.4. Python >= 3.5 is compiled with a newer version of the MSVC compiler, and there are currently license restrictions.; To specify the use of the mingw compiler you will need to create the following file:; <path to my Python env>/Lib/distutils/distutils.cfg. with the following contents:; [build]; compiler=mingw32; [build_ext]; compiler=mingw32. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitc",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:2234,Modifiability,config,configuration,2234,"nctionality:. Package; Version; Details. gfortran; 4.2+; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Needed for using the Bloch3d class. LaTeX; TexLive 2009+; Needed if using LaTeX in matplotlib figures. nose; 1.1.2+; For running the test suite. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms.; We would not recommend installation into the system Python on Linux platforms, as it is likely that the required libraries will be difficult to update to sufficiently recent versions. The system Python on Linux is used for system things, changing its configuration could lead to highly undesirable results. We are recommending and supporting Anaconda / Miniconda Python environments for QuTiP on all platforms. Platform-independent Installation¶; QuTiP is designed to work best when using the Anaconda or Intel Python distributions that support the conda package management system.; If you aleady have your conda environment set up, and have the conda-forge channel available, then you can install QuTiP using:; conda install qutip. Otherwise refer to building-conda-environment; If you are using MS Windows, then you will probably want to refer to installation-on-MS-Windows. Building your Conda environment¶; The default Anaconda environment has all the Python packages needed for running QuTiP.; You may however wish to install QuTiP in a Conda environment (env) other than the default Anaconda environment.; You may wish to this for many reasons:. It is a good idea generally; You are using MS Windows and want to use Python 3; You are using",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:4049,Modifiability,config,config,4049,"nda environment (env) other than the default Anaconda environment.; You may wish to this for many reasons:. It is a good idea generally; You are using MS Windows and want to use Python 3; You are using Miniconda because you do not have the disk space for full Anaconda. To create a Conda env for QuTiP called qutip:-; (note the python=3 can be ommited if you want the default Python version, if you want to use Python 3 with MS Windows, then it must be python=3.4); recommended:; conda create -n qutip python=3 mkl numpy scipy cython matplotlib nose multiprocess jupyter notebook spyder. minimum (recommended):; conda create -n qutip numpy scipy cython nose matplotlib. absolute mimimum:; conda create -n qutip numpy scipy cython. The jupyter and notebook packages are for working with Jupyter notebooks (fka IPython notebooks).; Spyder is an IDE for scientific development with Python. Adding the conda-forge channel¶; If you have conda 4.1.0 or later then, add the conda-forge channel with lowest priority using:; conda config --append channels conda-forge. Otherwise you should consider reinstalling Anaconda / Miniconda. In theory:; conda update conda. will update your conda to the latest version, but this can lead to breaking your default Ananconda enviroment.; Alternatively, this will add conda-forge as the highest priority channel.; conda config --add channels conda-forge. It is almost certainly better to have defaults as the highest priority channel.; You can edit your .condarc (user home folder) file manually, so that conda-forge is below defaults in the channels list. Installing via pip¶; For other types of installation, it is often easiest to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download s",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:4377,Modifiability,config,config,4377," the default Python version, if you want to use Python 3 with MS Windows, then it must be python=3.4); recommended:; conda create -n qutip python=3 mkl numpy scipy cython matplotlib nose multiprocess jupyter notebook spyder. minimum (recommended):; conda create -n qutip numpy scipy cython nose matplotlib. absolute mimimum:; conda create -n qutip numpy scipy cython. The jupyter and notebook packages are for working with Jupyter notebooks (fka IPython notebooks).; Spyder is an IDE for scientific development with Python. Adding the conda-forge channel¶; If you have conda 4.1.0 or later then, add the conda-forge channel with lowest priority using:; conda config --append channels conda-forge. Otherwise you should consider reinstalling Anaconda / Miniconda. In theory:; conda update conda. will update your conda to the latest version, but this can lead to breaking your default Ananconda enviroment.; Alternatively, this will add conda-forge as the highest priority channel.; conda config --add channels conda-forge. It is almost certainly better to have defaults as the highest priority channel.; You can edit your .condarc (user home folder) file manually, so that conda-forge is below defaults in the channels list. Installing via pip¶; For other types of installation, it is often easiest to use the Python package manager pip.; pip install qutip. Or, optionally, to also include the Fortran-based Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development versi",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:1705,Performance,perform,performance,1705,"equired:. Package; Version; Details. Python; 2.7+; Version 3.4+ is highly recommended. Numpy; 1.8+; Not tested on lower versions. Scipy; 0.15+; Lower versions have missing features. Matplotlib; 1.2.1+; Some plotting does not work on lower versions. Cython; 0.21+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. In addition, there are several optional packages that provide additional functionality:. Package; Version; Details. gfortran; 4.2+; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Needed for using the Bloch3d class. LaTeX; TexLive 2009+; Needed if using LaTeX in matplotlib figures. nose; 1.1.2+; For running the test suite. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms.; We would not recommend installation into the system Python on Linux platforms, as it is likely that the required libraries will be difficult to update to sufficiently recent versions. The system Python on Linux is used for system things, changing its configuration could lead to highly undesirable results. We are recommending and supporting Anaconda / Miniconda Python environments for QuTiP on all platforms. Platform-independent Installation¶; QuTiP is designed to work best when using the Anaconda or Intel Python distributions that support the conda package management system.; If you aleady have your conda environment set up, and have the conda-forge channel available, then you can install QuTiP using:; conda insta",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:810,Testability,test,tested,810,". . Installation — QuTiP 4.0 Documentation. QuTiP: Quantum Toolbox in Python; . ; . 4.0; . Frontmatter; Installation; General Requirements; Platform-independent Installation; Building your Conda environment; Adding the conda-forge channel. Installing via pip; Installing from Source; Verifying the Installation; Checking Version Information using the About Function; Installation on MS Windows. Users Guide; API documentation; Change Log; Developers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs »; Installation. Installation¶. General Requirements¶; QuTiP depends on several open-source libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.4+ is highly recommended. Numpy; 1.8+; Not tested on lower versions. Scipy; 0.15+; Lower versions have missing features. Matplotlib; 1.2.1+; Some plotting does not work on lower versions. Cython; 0.21+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. In addition, there are several optional packages that provide additional functionality:. Package; Version; Details. gfortran; 4.2+; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Needed for using the Bloch3d class. LaTeX; TexLive 2009+; Needed if using LaTeX in matplotlib figures. nose; 1.1.2+; For running the test suite. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms.; We would not recom",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:1600,Testability,test,test,1600," libraries for scientific computing in the Python; programming language. The following packages are currently required:. Package; Version; Details. Python; 2.7+; Version 3.4+ is highly recommended. Numpy; 1.8+; Not tested on lower versions. Scipy; 0.15+; Lower versions have missing features. Matplotlib; 1.2.1+; Some plotting does not work on lower versions. Cython; 0.21+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. In addition, there are several optional packages that provide additional functionality:. Package; Version; Details. gfortran; 4.2+; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Needed for using the Bloch3d class. LaTeX; TexLive 2009+; Needed if using LaTeX in matplotlib figures. nose; 1.1.2+; For running the test suite. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms.; We would not recommend installation into the system Python on Linux platforms, as it is likely that the required libraries will be difficult to update to sufficiently recent versions. The system Python on Linux is used for system things, changing its configuration could lead to highly undesirable results. We are recommending and supporting Anaconda / Miniconda Python environments for QuTiP on all platforms. Platform-independent Installation¶; QuTiP is designed to work best when using the Anaconda or Intel Python distributions that support the conda package management system.; If you aleady have your conda ",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:1937,Testability,test,tested,1937,"r versions. Cython; 0.21+; Needed for compiling some time-dependent; Hamiltonians. GCC; Compiler; 4.2+; Needed for compiling Cython files. Python; Headers; 2.7+; Linux only. Needed for compiling Cython files. In addition, there are several optional packages that provide additional functionality:. Package; Version; Details. gfortran; 4.2+; Needed for compiling the optional Fortran-based; Monte Carlo solver. BLAS; library; 1.2+; Optional, Linux & Mac only.; Needed for installing Fortran Monte Carlo solver. Mayavi; 4.1+; Needed for using the Bloch3d class. LaTeX; TexLive 2009+; Needed if using LaTeX in matplotlib figures. nose; 1.1.2+; For running the test suite. As of version 2.2, QuTiP includes an optional Fortran-based Monte Carlo solver that has some performance benefit over the Python-based solver when simulating small systems. In order to install this package you must have a Fortran compiler (for example gfortran) and BLAS development libraries. At present, these packages are tested only on the Linux and OS X platforms.; We would not recommend installation into the system Python on Linux platforms, as it is likely that the required libraries will be difficult to update to sufficiently recent versions. The system Python on Linux is used for system things, changing its configuration could lead to highly undesirable results. We are recommending and supporting Anaconda / Miniconda Python environments for QuTiP on all platforms. Platform-independent Installation¶; QuTiP is designed to work best when using the Anaconda or Intel Python distributions that support the conda package management system.; If you aleady have your conda environment set up, and have the conda-forge channel available, then you can install QuTiP using:; conda install qutip. Otherwise refer to building-conda-environment; If you are using MS Windows, then you will probably want to refer to installation-on-MS-Windows. Building your Conda environment¶; The default Anaconda environment has all the Pyth",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:5803,Testability,test,test,5803,"Monte Carlo solver:; pip install qutip --install-option=--with-f90mc. More detailed platform-dependent installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). Installation on MS Windows¶; We are recommending and supporting installation of Q",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:5883,Testability,test,tests,5883," installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). Installation on MS Windows¶; We are recommending and supporting installation of QuTiP into a Conda environment. Other scientific Python implementations such as Python-xy may also wor",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:5920,Testability,test,testing,5920," installation alternatives are given below. Installing from Source¶; Official releases of QuTiP are available from the download section on the project’s web pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). Installation on MS Windows¶; We are recommending and supporting installation of QuTiP into a Conda environment. Other scientific Python implementations such as Python-xy may also wor",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:6044,Testability,test,testing,6044,"eb pages. http://www.qutip.org/download.html; and the latest source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). Installation on MS Windows¶; We are recommending and supporting installation of QuTiP into a Conda environment. Other scientific Python implementations such as Python-xy may also work.; QuTiP uses dynamic compilation of C for some of its time-dependant dynamics solvers. For MS Windows users the additional challenge is the need for a A",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:6090,Testability,test,tests,6090," source code is available in our Github repository. http://github.com/qutip; In general we recommend users to use the latest stable release of QuTiP, but if you are interested in helping us out with development or wish to submit bug fixes, then use the latest development version from the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). Installation on MS Windows¶; We are recommending and supporting installation of QuTiP into a Conda environment. Other scientific Python implementations such as Python-xy may also work.; QuTiP uses dynamic compilation of C for some of its time-dependant dynamics solvers. For MS Windows users the additional challenge is the need for a ANSI C99 compliant C compiler. Unlike other platforms, no C c",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/installation.html:6342,Testability,test,tests,6342,"om the Github repository.; Installing QuTiP from source requires that all the dependencies are satisfied. To install QuTiP from the source code run:; sudo python setup.py install. To also include the optional Fortran Monte Carlo solver, run:; sudo python setup.py install --with-f90mc. On Windows, omit sudo from the commands given above. Verifying the Installation¶; QuTiP includes a collection of built-in test scripts to verify that an installation was successful. To run the suite of tests scripts you must have the nose testing library. After installing QuTiP, leave the installation directory, run Python (or iPython), and call:; import qutip.testing as qt; qt.run(). If successful, these tests indicate that all of the QuTiP functions are working properly. If any errors occur, please check that you have installed all of the required modules. See the next section on how to check the installed versions of the QuTiP dependencies. If these tests still fail, then head on over to the QuTiP Discussion Board and post a message detailing your particular issue. Checking Version Information using the About Function¶; QuTiP includes an “about” function for viewing information about QuTiP and the important dependencies installed on your system. To view this information:; In [1]: from qutip import *. In [2]: about(). Installation on MS Windows¶; We are recommending and supporting installation of QuTiP into a Conda environment. Other scientific Python implementations such as Python-xy may also work.; QuTiP uses dynamic compilation of C for some of its time-dependant dynamics solvers. For MS Windows users the additional challenge is the need for a ANSI C99 compliant C compiler. Unlike other platforms, no C compiler is provided with Windows by default.; It is possible to install a Windows SDK that includes a C compiler, but ANSI C99 compliance is not 100%.; The mingw-w64 project looks to help overcome this, and to some extent it is successful.; The conda-forge packages for QuTiP will al",MatchSource.WIKI,docs/4.0.2/installation.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/installation.html
https://qutip.org/docs/4.0.2/py-modindex.html:1284,Deployability,update,updated,1284,". . Python Module Index — QuTiP 4.0 Documentation. QuTiP: Quantum Toolbox in Python; . ; . 4.0; . Frontmatter; Installation; Users Guide; API documentation; Change Log; Developers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs ». Python Module Index. q.  . q. qutip.    ; qutip.bloch_redfield.    ; qutip.continuous_variables.    ; qutip.control.pulsegen.    ; qutip.control.pulseoptim.    ; qutip.correlation.    ; qutip.entropy.    ; qutip.essolve.    ; qutip.expect.    ; qutip.fileio.    ; qutip.floquet.    ; qutip.graph.    ; qutip.ipynbtools.    ; qutip.mcsolve.    ; qutip.mesolve.    ; qutip.metrics.    ; qutip.nonmarkov.transfertensor.    ; qutip.operators.    ; qutip.orbital.    ; qutip.parallel.    ; qutip.partial_transpose.    ; qutip.propagator.    ; qutip.qip.algorithms.qft.    ; qutip.qip.gates.    ; qutip.qip.qubits.    ; qutip.random_objects.    ; qutip.rhs_generate.    ; qutip.sesolve.    ; qutip.states.    ; qutip.steadystate.    ; qutip.stochastic.    ; qutip.superop_reps.    ; qutip.superoperator.    ; qutip.tensor.    ; qutip.three_level_atom.    ; qutip.tomography.    ; qutip.utilities.    ; qutip.visualization.    ; qutip.wigner. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Jan 11, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.0.2/py-modindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/py-modindex.html
https://qutip.org/docs/4.0.2/search.html:402,Deployability,update,updated,402,". . Search — QuTiP 4.0 Documentation. QuTiP: Quantum Toolbox in Python; . ; . 4.0; . Frontmatter; Installation; Users Guide; API documentation; Change Log; Developers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs ». Please activate JavaScript to enable the search; functionality.; . © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Jan 11, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.0.2/search.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.0.2/search.html
https://qutip.org/docs/4.1/biblio.html:1999,Deployability,update,updated,1999,"; . Frontmatter; Installation; Users Guide; API documentation; Change Log; Developers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs »; Bibliography. Bibliography¶. [BCSZ08]; Bruzda, V. Cappellini, H.-J. Sommers, K. Życzkowski, Random Quantum Operations, Phys. Lett. A 373, 320-324 (2009). doi:10.1016/j.physleta.2008.11.043. [Hav03]Havel, T. Robust procedures for converting among Lindblad, Kraus and matrix representations of quantum dynamical semigroups. Journal of Mathematical Physics 44 2, 534 (2003). doi:10.1063/1.1518555. [Wat13]Watrous, J. Theory of Quantum Information, lecture notes. [Mez07]; Mezzadri, How to generate random matrices from the classical compact groups, Notices of the AMS 54 592-604 (2007). arXiv:math-ph/0609050. [Mis12]. Miszczak, Generating and using truly random quantum states in Mathematica, Computer Physics Communications 183 1, 118-124 (2012). doi:10.1016/j.cpc.2011.08.002. [Moh08]; Mohseni, A. T. Rezakhani, D. A. Lidar, Quantum-process tomography: Resource analysis of different strategies, Phys. Rev. A 77, 032322 (2008). doi:10.1103/PhysRevA.77.032322. [Gri98]; Grifoni, P. Hänggi, Driven quantum tunneling, Physics Reports 304, 299 (1998). doi:10.1016/S0370-1573(98)00022-2. [Cre03]. Creffield, Location of crossings in the Floquet spectrum of a driven two-level system, Phys. Rev. B 67, 165301 (2003). doi:10.1103/PhysRevB.67.165301. [Gar03]Gardineer and Zoller, Quantum Noise (Springer, 2004). [Bre02]H.-P. Breuer and F. Petruccione, The Theory of Open Quantum Systems (Oxford, 2002). [Coh92]; Cohen-Tannoudji, J. Dupont-Roc, G. Grynberg, Atom-Photon Interactions: Basic Processes and Applications, (Wiley, 1992). [WBC11]C. Wood, J. Biamonte, D. G. Cory, Tensor networks and graphical calculus for; open quantum systems. arXiv:1111.6950. Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Mar 28, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.1/biblio.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/biblio.html
https://qutip.org/docs/4.1/changelog.html:1938,Availability,robust,robust,1938,"rsion 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). Developers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs »; Change Log. Change Log¶. Version 4.1.0 (March 10, 2017)¶. Improvements¶; Core libraries. MAJOR FEATURE: QuTiP now works for Python 3.5+ on Windows using Visual Studio 2015.; MAJOR FEATURE: Cython and other low level code switched to C++ for MS Windows compatibility.; MAJOR FEATURE: Can now use interpolating cubic splines as time-dependent coefficients.; MAJOR FEATURE: Sparse matrix - vector multiplication now parallel using OPENMP.; Automatic tuning of OPENMP threading threashold.; Partial trace function is now up to 100x+ faster.; Hermitian verification now up to 100x+ faster.; Internal Qobj objects now created up to 60x faster.; Inplace conversion from COO -> CSR sparse formats (e.g. Memory efficiency improvement.); Faster reverse Cuthill-Mckee and sparse one and inf norms. Bug Fixes¶. Cleanup of temp. Cython files now more robust and working under Windows. Version 4.0.2 (January 5, 2017)¶. Bug Fixes¶. td files no longer left behind by correlation tests; Various fast sparse fixes. Version 4.0.0 (December 22, 2016)¶. Improvements¶; Core libraries. MAJOR FEATURE: Fast sparse: New subclass of csr_matrix added that overrides commonly used methods to avoid certain checks that incurr execution cost. All Qobj.data now fast_csr_matrix; HEOM performance enhancements; spmv now faster; mcsolve codegen further optimised. Control modules. Time dependent drift (through list of pwc dynamics generators); memory optimisation options provided for control.dynamics. Bug Fixes¶. recompilation of pyx files on first import removed; tau array in control.pulseoptim funcs now works. Version 3.2.0 (Never officially released)¶. New Features¶; Core libraries. MAJOR FEATURE: Non-Markovian solvers: Hierarchy (Added by Neill Lambert), Memory-Cascade, and Transfer-Tensor methods.; MAJOR FEATURE: Default steady state solver now up to 100x fast",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:7452,Availability,error,error,7452,"o; set_phase_option function now property phase_option. propcomp properties; grad_exact (now read only). propcomp functions; compute_propagator now _compute_propagator; compute_diff_prop now _compute_diff_prop; compute_prop_grad now _compute_prop_grad. tslotcomp functions; get_timeslot_for_fidelity_calc now _get_timeslot_for_fidelity_calc. Miscellaneous. QuTiP Travis CI tests now use the Anaconda distribution.; The about box and ipynb version_table now display addition system information.; Updated Cython cleanup to remove depreciation warning in sysconfig.; Updated ipynb_parallel to look for ipyparallel module in V4 of the notebooks. Bug Fixes¶. Fixes for countstat and psuedo-inverse functions; Fixed Qobj division tests on 32-bit systems.; Removed extra call to Python in time-dependent Cython code.; Fixed issue with repeated Bloch sphere saving.; Fixed T_0 triplet state not normalized properly. (Fixed by Eric Hontz); Simplified compiler flags (support for ARM systems).; Fixed a decoding error in qload.; Fixed issue using complex.h math and np.kind_t variables.; Corrected output states mismatch for ntraj=1 in the mcf90 solver.; Qobj data is now copied by default to avoid a bug in multiplication. (Fixed by Richard Brierley); Fixed bug overwriting hardware_info in __init__. (Fixed by Johannes Feist); Restored ability to explicity set Q.isherm, Q.type, and Q.superrep.; Fixed integer depreciation warnings from NumPy.; Qobj * (dense vec) would result in a recursive loop.; Fixed args=None -> args={} in correlation functions to be compatible with mesolve.; Fixed depreciation warnings in mcsolve.; Fixed neagtive only real parts in rand_ket.; Fixed a complicated list-cast-map-list antipattern in super operator reps. (Fixed by Stefan Krastanov); Fixed incorrect isherm for sigmam spin operator.; Fixed the dims when using final_state_output in mesolve and sesolve. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NA",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:8839,Availability,avail,available,8839,"iation warnings from NumPy.; Qobj * (dense vec) would result in a recursive loop.; Fixed args=None -> args={} in correlation functions to be compatible with mesolve.; Fixed depreciation warnings in mcsolve.; Fixed neagtive only real parts in rand_ket.; Fixed a complicated list-cast-map-list antipattern in super operator reps. (Fixed by Stefan Krastanov); Fixed incorrect isherm for sigmam spin operator.; Fixed the dims when using final_state_output in mesolve and sesolve. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True);",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:9347,Availability,error,errors,9347,"rsion 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator r",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:10631,Availability,failure,failure,10631,"uring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories when using only 1 CPU.; Fix bug in parsing of time-dependent Hamiltonian/collapse operator arguments; that occurred when the args argument is not a dictionary.; Fix bug in internal _version2int function that cause a failure when parsingthe version number of the Cython package. Version 3.0.0 (July 17, 2014):¶. New Features¶. New module qutip.stochastic with stochastic master equation and stochastic; Schrödinger equation solvers.; Expanded steady state solvers. The function steady has been deprecated in; favor of steadystate. The steadystate solver no longer use umfpack by; default. New pre-processing methods for reordering and balancing the linear; equation system used in direct solution of the steady state.; New module qutip.qip with utilities for quantum information processing,; including pre-defined quantum gates along with functions for expanding; arbitrary 1, 2, and 3 qubit gates to N qubit registers, circuit; representations, library of quantum algorithms, and basic physical models for; some common QIP architectures.; New module qutip.distributions with unified API for working with; distribution functions.; New format for defining time-dependent Hamiltonians and collapse operators,; using a pre",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:13380,Availability,avail,available,13380,"spin_Jy, spin_Jz and; spin_state, spin_coherent.; The expect function now supports a list of operators, in addition to the; previously supported list of states.; Simplified creation of qubit states using ket function.; The module qutip.cyQ has been renamed to qutip.cy and the sparse; matrix-vector functions spmv and spmv1d has been combined into one; function spmv. New functions for operating directly on the underlaying; sparse CSR data have been added (e.g., spmv_csr). Performance; improvements. New and improved Cython functions for calculating expectation; values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squ",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:14339,Availability,avail,available,14339,"and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity f",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:21440,Availability,toler,tolerance,21440,"utput.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Mar 28, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:353,Deployability,release,released,353,". . Change Log — QuTiP 4.1 Documentation. QuTiP: Quantum Toolbox in Python; . ; . 4.1; . Frontmatter; Installation; Users Guide; API documentation; Change Log; Version 4.1.0 (March 10, 2017); Improvements; Bug Fixes. Version 4.0.2 (January 5, 2017); Bug Fixes. Version 4.0.0 (December 22, 2016); Improvements; Bug Fixes. Version 3.2.0 (Never officially released); New Features; Improvements; Bug Fixes. Version 3.1.0 (January 1, 2015):; New Features; Bug Fixes. Version 3.0.1 (Aug 5, 2014):; Bug Fixes. Version 3.0.0 (July 17, 2014):; New Features; Improvements. Version 2.2.0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). Developers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs »; Change Log. Change Log¶. Version 4.1.0 (March 10, 2017)¶. Improvements¶; Core libraries. MAJOR FEATURE: QuTiP now works for Python 3.5+ on Windows using Visual Studio 2015.; MAJOR FEATURE: Cython and other low level code switched to C++ for MS Windows compatibility.; MAJOR FEATURE: Can now use interpolating cubic splines as time-dependent coefficients.; MAJOR FEATURE: Sparse matrix - vector multiplication now parallel using OPENMP.; Automatic tuning of OPENMP threading threashold.; Partial trace function is now up to 100x+ faster.; Hermitian verification now up to 100x+ faster.; Internal Qobj objects now created up to 60x faster.; Inplace conversion from COO -> CSR sparse formats (e.g. Memory efficiency improvement.); Faster reverse Cuthill-Mckee and sparse one and inf norms. Bug Fixes¶. Cleanup of temp. Cython files now more robust and working under Windows. Version 4.0.2 (January 5, 201",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:2718,Deployability,release,released,2718,"reated up to 60x faster.; Inplace conversion from COO -> CSR sparse formats (e.g. Memory efficiency improvement.); Faster reverse Cuthill-Mckee and sparse one and inf norms. Bug Fixes¶. Cleanup of temp. Cython files now more robust and working under Windows. Version 4.0.2 (January 5, 2017)¶. Bug Fixes¶. td files no longer left behind by correlation tests; Various fast sparse fixes. Version 4.0.0 (December 22, 2016)¶. Improvements¶; Core libraries. MAJOR FEATURE: Fast sparse: New subclass of csr_matrix added that overrides commonly used methods to avoid certain checks that incurr execution cost. All Qobj.data now fast_csr_matrix; HEOM performance enhancements; spmv now faster; mcsolve codegen further optimised. Control modules. Time dependent drift (through list of pwc dynamics generators); memory optimisation options provided for control.dynamics. Bug Fixes¶. recompilation of pyx files on first import removed; tau array in control.pulseoptim funcs now works. Version 3.2.0 (Never officially released)¶. New Features¶; Core libraries. MAJOR FEATURE: Non-Markovian solvers: Hierarchy (Added by Neill Lambert), Memory-Cascade, and Transfer-Tensor methods.; MAJOR FEATURE: Default steady state solver now up to 100x faster using the Intel Pardiso library under the Anaconda and Intel Python distributions.; The default Wigner function now uses a Clenshaw summation algorithm to evaluate a polynomial series that is applicable for any number of exciations (previous limitation was ~50 quanta), and is ~3x faster than before. (Added by Denis Vasilyev); Can now define a given eigen spectrum for random Hermitian and density operators.; The Qobj expm method now uses the equivilent SciPy routine, and performs a much faster exp operation if the matrix is diagonal.; One can now build zero operators using the qzero function. Control modules. MAJOR FEATURE: CRAB algorithm added; This is an alternative to the GRAPE algorithm, which allows for analytical control functions, which means that expe",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:4816,Deployability,configurat,configuration,4816,"xperimental constraints can more easily be added into optimisation.; See tutorial notebook for full information. Improvements¶; Core libraries. Two-time correlation functions can now be calculated for fully time-dependent Hamiltonians and collapse operators. (Added by Kevin Fischer); The code for the inverse-power method for the steady state solver has been simplified.; Bloch-Redfield tensor creation is now up to an order of magnitude faster. (Added by Johannes Feist); Q.transform now works properly for arrays directly from sp_eigs (or eig).; Q.groundstate now checks for degeneracy.; Added sinm and cosm methods to the Qobj class.; Added charge and tunneling operators.; Time-dependent Cython code is now easier to read and debug. Control modules. The internal state / quantum operator data type can now be either Qobj or ndarray; Previous only ndarray was possible. This now opens up possibility of using Qobj methods in fidelity calculations; The attributes and functions that return these operators are now preceded by an underscore, to indicate that the data type could change depending on the configuration options.; In most cases these functions were for internal processing only anyway, and should have been ‘private’.; Accessors to the properties that could be useful outside of the library have been added. These always return Qobj. If the internal operator data type is not Qobj, then there could be signicant overhead in the conversion, and so this should be avoided during pulse optimisation.; If custom sub-classes are developed that use Qobj properties and methods (e.g. partial trace), then it is very likely that it will be more efficient to set the internal data type to Qobj.; The internal operator data will be chosen automatically based on the size and sparsity of the dynamics generator. It can be forced by setting dynamics.oper_dtype = <type>; Note this can be done by passing dyn_params={'oper_dtype':<type>} in any of the pulseoptim functions.; Some other properties a",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:9335,Deployability,integrat,integration,9335,"rsion 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator r",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:14902,Deployability,continuous,continuous,14902,"back functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to ",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:14913,Deployability,integrat,integration,14913,"back functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to ",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:16200,Deployability,install,installation,16200," for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gates.; Functions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag()",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:17541,Deployability,release,release,17541,"name in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The qu",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:17848,Deployability,install,installed,17848,".; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum obj",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:19397,Deployability,install,installation,19397,"and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying the installation.; Demos window now lets you copy and paste code from each example. Version 1.1.4 (May 28, 2012):¶. Bug Fixes:¶. Fixed bug pointed out by Brendan Abolins.; Qobj.tr() returns zero-dim ndarray instead of float or complex.; Updated factorial import for scipy version 0.10+. Version 1.1.3 (November 21, 2011):¶. New Functions:¶. Allow custom naming of Bloch sphere. Bug Fixes:¶. Fixed text alignment issues in AboutBox.; Added fix for SciPy V>0.10 where factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-R",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:21719,Deployability,release,release,21719,"utput.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Mar 28, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:21856,Deployability,update,updated,21856,"utput.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Mar 28, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:4021,Energy Efficiency,power,power,4021,"ns.; The default Wigner function now uses a Clenshaw summation algorithm to evaluate a polynomial series that is applicable for any number of exciations (previous limitation was ~50 quanta), and is ~3x faster than before. (Added by Denis Vasilyev); Can now define a given eigen spectrum for random Hermitian and density operators.; The Qobj expm method now uses the equivilent SciPy routine, and performs a much faster exp operation if the matrix is diagonal.; One can now build zero operators using the qzero function. Control modules. MAJOR FEATURE: CRAB algorithm added; This is an alternative to the GRAPE algorithm, which allows for analytical control functions, which means that experimental constraints can more easily be added into optimisation.; See tutorial notebook for full information. Improvements¶; Core libraries. Two-time correlation functions can now be calculated for fully time-dependent Hamiltonians and collapse operators. (Added by Kevin Fischer); The code for the inverse-power method for the steady state solver has been simplified.; Bloch-Redfield tensor creation is now up to an order of magnitude faster. (Added by Johannes Feist); Q.transform now works properly for arrays directly from sp_eigs (or eig).; Q.groundstate now checks for degeneracy.; Added sinm and cosm methods to the Qobj class.; Added charge and tunneling operators.; Time-dependent Cython code is now easier to read and debug. Control modules. The internal state / quantum operator data type can now be either Qobj or ndarray; Previous only ndarray was possible. This now opens up possibility of using Qobj methods in fidelity calculations; The attributes and functions that return these operators are now preceded by an underscore, to indicate that the data type could change depending on the configuration options.; In most cases these functions were for internal processing only anyway, and should have been ‘private’.; Accessors to the properties that could be useful outside of the library have been",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:4356,Energy Efficiency,charge,charge,4356,"xpm method now uses the equivilent SciPy routine, and performs a much faster exp operation if the matrix is diagonal.; One can now build zero operators using the qzero function. Control modules. MAJOR FEATURE: CRAB algorithm added; This is an alternative to the GRAPE algorithm, which allows for analytical control functions, which means that experimental constraints can more easily be added into optimisation.; See tutorial notebook for full information. Improvements¶; Core libraries. Two-time correlation functions can now be calculated for fully time-dependent Hamiltonians and collapse operators. (Added by Kevin Fischer); The code for the inverse-power method for the steady state solver has been simplified.; Bloch-Redfield tensor creation is now up to an order of magnitude faster. (Added by Johannes Feist); Q.transform now works properly for arrays directly from sp_eigs (or eig).; Q.groundstate now checks for degeneracy.; Added sinm and cosm methods to the Qobj class.; Added charge and tunneling operators.; Time-dependent Cython code is now easier to read and debug. Control modules. The internal state / quantum operator data type can now be either Qobj or ndarray; Previous only ndarray was possible. This now opens up possibility of using Qobj methods in fidelity calculations; The attributes and functions that return these operators are now preceded by an underscore, to indicate that the data type could change depending on the configuration options.; In most cases these functions were for internal processing only anyway, and should have been ‘private’.; Accessors to the properties that could be useful outside of the library have been added. These always return Qobj. If the internal operator data type is not Qobj, then there could be signicant overhead in the conversion, and so this should be avoided during pulse optimisation.; If custom sub-classes are developed that use Qobj properties and methods (e.g. partial trace), then it is very likely that it will be more effic",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:5363,Energy Efficiency,efficient,efficient,5363,"charge and tunneling operators.; Time-dependent Cython code is now easier to read and debug. Control modules. The internal state / quantum operator data type can now be either Qobj or ndarray; Previous only ndarray was possible. This now opens up possibility of using Qobj methods in fidelity calculations; The attributes and functions that return these operators are now preceded by an underscore, to indicate that the data type could change depending on the configuration options.; In most cases these functions were for internal processing only anyway, and should have been ‘private’.; Accessors to the properties that could be useful outside of the library have been added. These always return Qobj. If the internal operator data type is not Qobj, then there could be signicant overhead in the conversion, and so this should be avoided during pulse optimisation.; If custom sub-classes are developed that use Qobj properties and methods (e.g. partial trace), then it is very likely that it will be more efficient to set the internal data type to Qobj.; The internal operator data will be chosen automatically based on the size and sparsity of the dynamics generator. It can be forced by setting dynamics.oper_dtype = <type>; Note this can be done by passing dyn_params={'oper_dtype':<type>} in any of the pulseoptim functions.; Some other properties and methods were renamed at the same time. A full list is given here. All modules; - function: set_log_level -> property: log_level; dynamics functions; _init_lists now _init_evo; get_num_ctrls now property: num_ctrls; get_owd_evo_target now property: onto_evo_target; combine_dyn_gen now _combine_dyn_gen (no longer returns a value); get_dyn_gen now _get_phased_dyn_gen; get_ctrl_den_gen now _get_phased_ctrl_dyn_gen; ensure_decomp_curr now _ensure_decomp_curr; spectral_decomp now _spectral_decomp. dynamics properties; evo_init2t now _fwd_evo (fwd_evo as Qobj); evo_t2end now _onwd_evo (onwd_evo as Qobj); evo_t2targ now _onto_evo (onto_evo as ",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:9775,Energy Efficiency,power,power,9775,"ntract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories when using only 1 CPU.; Fix bug in parsing of time-dependent Hamiltonian/collapse operator arguments; that occurred when the args argument is not a dictionary.; Fix bug in internal _version2int function that cause a failure when parsingthe version number of the Cython package. Version 3.0.0 (July 17, 2014):¶. New Features¶. New module qutip.stochastic ",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:13134,Energy Efficiency,power,power,13134,"w; prefixed with plot_ (e.g., plot_fock_distribution). The; plot_wigner and plot_wigner_fock_distribution now supports 3D views; in addition to contour views.; New API and new functions for working with spin operators and states,; including for example spin_Jx, spin_Jy, spin_Jz and; spin_state, spin_coherent.; The expect function now supports a list of operators, in addition to the; previously supported list of states.; Simplified creation of qubit states using ket function.; The module qutip.cyQ has been renamed to qutip.cy and the sparse; matrix-vector functions spmv and spmv1d has been combined into one; function spmv. New functions for operating directly on the underlaying; sparse CSR data have been added (e.g., spmv_csr). Performance; improvements. New and improved Cython functions for calculating expectation; values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which n",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:18420,Energy Efficiency,efficient,efficient,18420," of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying ",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:1431,Integrability,depend,dependent,1431," 3.1.0 (January 1, 2015):; New Features; Bug Fixes. Version 3.0.1 (Aug 5, 2014):; Bug Fixes. Version 3.0.0 (July 17, 2014):; New Features; Improvements. Version 2.2.0 (March 01, 2013):; New Features; Bug Fixes:. Version 2.1.0 (October 05, 2012):; New Features; Bug Fixes:. Version 2.0.0 (June 01, 2012):; New Features. Version 1.1.4 (May 28, 2012):; Bug Fixes:. Version 1.1.3 (November 21, 2011):; New Functions:; Bug Fixes:. Version 1.1.2 (October 27, 2011); Bug Fixes. Version 1.1.1 (October 25, 2011); New Functions; Bug Fixes. Version 1.1.0 (October 04, 2011); New Functions; Bug Fixes. Version 1.0.0 (July 29, 2011). Developers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs »; Change Log. Change Log¶. Version 4.1.0 (March 10, 2017)¶. Improvements¶; Core libraries. MAJOR FEATURE: QuTiP now works for Python 3.5+ on Windows using Visual Studio 2015.; MAJOR FEATURE: Cython and other low level code switched to C++ for MS Windows compatibility.; MAJOR FEATURE: Can now use interpolating cubic splines as time-dependent coefficients.; MAJOR FEATURE: Sparse matrix - vector multiplication now parallel using OPENMP.; Automatic tuning of OPENMP threading threashold.; Partial trace function is now up to 100x+ faster.; Hermitian verification now up to 100x+ faster.; Internal Qobj objects now created up to 60x faster.; Inplace conversion from COO -> CSR sparse formats (e.g. Memory efficiency improvement.); Faster reverse Cuthill-Mckee and sparse one and inf norms. Bug Fixes¶. Cleanup of temp. Cython files now more robust and working under Windows. Version 4.0.2 (January 5, 2017)¶. Bug Fixes¶. td files no longer left behind by correlation tests; Various fast sparse fixes. Version 4.0.0 (December 22, 2016)¶. Improvements¶; Core libraries. MAJOR FEATURE: Fast sparse: New subclass of csr_matrix added that overrides commonly used methods to avoid certain checks that incurr execution cost. All Qobj.data now fast_csr_matrix; HEOM performance enhancements; spmv now faster; mcsolve code",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:2455,Integrability,depend,dependent,2455,"on now parallel using OPENMP.; Automatic tuning of OPENMP threading threashold.; Partial trace function is now up to 100x+ faster.; Hermitian verification now up to 100x+ faster.; Internal Qobj objects now created up to 60x faster.; Inplace conversion from COO -> CSR sparse formats (e.g. Memory efficiency improvement.); Faster reverse Cuthill-Mckee and sparse one and inf norms. Bug Fixes¶. Cleanup of temp. Cython files now more robust and working under Windows. Version 4.0.2 (January 5, 2017)¶. Bug Fixes¶. td files no longer left behind by correlation tests; Various fast sparse fixes. Version 4.0.0 (December 22, 2016)¶. Improvements¶; Core libraries. MAJOR FEATURE: Fast sparse: New subclass of csr_matrix added that overrides commonly used methods to avoid certain checks that incurr execution cost. All Qobj.data now fast_csr_matrix; HEOM performance enhancements; spmv now faster; mcsolve codegen further optimised. Control modules. Time dependent drift (through list of pwc dynamics generators); memory optimisation options provided for control.dynamics. Bug Fixes¶. recompilation of pyx files on first import removed; tau array in control.pulseoptim funcs now works. Version 3.2.0 (Never officially released)¶. New Features¶; Core libraries. MAJOR FEATURE: Non-Markovian solvers: Hierarchy (Added by Neill Lambert), Memory-Cascade, and Transfer-Tensor methods.; MAJOR FEATURE: Default steady state solver now up to 100x faster using the Intel Pardiso library under the Anaconda and Intel Python distributions.; The default Wigner function now uses a Clenshaw summation algorithm to evaluate a polynomial series that is applicable for any number of exciations (previous limitation was ~50 quanta), and is ~3x faster than before. (Added by Denis Vasilyev); Can now define a given eigen spectrum for random Hermitian and density operators.; The Qobj expm method now uses the equivilent SciPy routine, and performs a much faster exp operation if the matrix is diagonal.; One can now build ze",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:3408,Integrability,rout,routine,3408,"er optimised. Control modules. Time dependent drift (through list of pwc dynamics generators); memory optimisation options provided for control.dynamics. Bug Fixes¶. recompilation of pyx files on first import removed; tau array in control.pulseoptim funcs now works. Version 3.2.0 (Never officially released)¶. New Features¶; Core libraries. MAJOR FEATURE: Non-Markovian solvers: Hierarchy (Added by Neill Lambert), Memory-Cascade, and Transfer-Tensor methods.; MAJOR FEATURE: Default steady state solver now up to 100x faster using the Intel Pardiso library under the Anaconda and Intel Python distributions.; The default Wigner function now uses a Clenshaw summation algorithm to evaluate a polynomial series that is applicable for any number of exciations (previous limitation was ~50 quanta), and is ~3x faster than before. (Added by Denis Vasilyev); Can now define a given eigen spectrum for random Hermitian and density operators.; The Qobj expm method now uses the equivilent SciPy routine, and performs a much faster exp operation if the matrix is diagonal.; One can now build zero operators using the qzero function. Control modules. MAJOR FEATURE: CRAB algorithm added; This is an alternative to the GRAPE algorithm, which allows for analytical control functions, which means that experimental constraints can more easily be added into optimisation.; See tutorial notebook for full information. Improvements¶; Core libraries. Two-time correlation functions can now be calculated for fully time-dependent Hamiltonians and collapse operators. (Added by Kevin Fischer); The code for the inverse-power method for the steady state solver has been simplified.; Bloch-Redfield tensor creation is now up to an order of magnitude faster. (Added by Johannes Feist); Q.transform now works properly for arrays directly from sp_eigs (or eig).; Q.groundstate now checks for degeneracy.; Added sinm and cosm methods to the Qobj class.; Added charge and tunneling operators.; Time-dependent Cython code is n",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:3923,Integrability,depend,dependent,3923,"state solver now up to 100x faster using the Intel Pardiso library under the Anaconda and Intel Python distributions.; The default Wigner function now uses a Clenshaw summation algorithm to evaluate a polynomial series that is applicable for any number of exciations (previous limitation was ~50 quanta), and is ~3x faster than before. (Added by Denis Vasilyev); Can now define a given eigen spectrum for random Hermitian and density operators.; The Qobj expm method now uses the equivilent SciPy routine, and performs a much faster exp operation if the matrix is diagonal.; One can now build zero operators using the qzero function. Control modules. MAJOR FEATURE: CRAB algorithm added; This is an alternative to the GRAPE algorithm, which allows for analytical control functions, which means that experimental constraints can more easily be added into optimisation.; See tutorial notebook for full information. Improvements¶; Core libraries. Two-time correlation functions can now be calculated for fully time-dependent Hamiltonians and collapse operators. (Added by Kevin Fischer); The code for the inverse-power method for the steady state solver has been simplified.; Bloch-Redfield tensor creation is now up to an order of magnitude faster. (Added by Johannes Feist); Q.transform now works properly for arrays directly from sp_eigs (or eig).; Q.groundstate now checks for degeneracy.; Added sinm and cosm methods to the Qobj class.; Added charge and tunneling operators.; Time-dependent Cython code is now easier to read and debug. Control modules. The internal state / quantum operator data type can now be either Qobj or ndarray; Previous only ndarray was possible. This now opens up possibility of using Qobj methods in fidelity calculations; The attributes and functions that return these operators are now preceded by an underscore, to indicate that the data type could change depending on the configuration options.; In most cases these functions were for internal processing only anyway, ",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:4394,Integrability,depend,dependent,4394,"and performs a much faster exp operation if the matrix is diagonal.; One can now build zero operators using the qzero function. Control modules. MAJOR FEATURE: CRAB algorithm added; This is an alternative to the GRAPE algorithm, which allows for analytical control functions, which means that experimental constraints can more easily be added into optimisation.; See tutorial notebook for full information. Improvements¶; Core libraries. Two-time correlation functions can now be calculated for fully time-dependent Hamiltonians and collapse operators. (Added by Kevin Fischer); The code for the inverse-power method for the steady state solver has been simplified.; Bloch-Redfield tensor creation is now up to an order of magnitude faster. (Added by Johannes Feist); Q.transform now works properly for arrays directly from sp_eigs (or eig).; Q.groundstate now checks for degeneracy.; Added sinm and cosm methods to the Qobj class.; Added charge and tunneling operators.; Time-dependent Cython code is now easier to read and debug. Control modules. The internal state / quantum operator data type can now be either Qobj or ndarray; Previous only ndarray was possible. This now opens up possibility of using Qobj methods in fidelity calculations; The attributes and functions that return these operators are now preceded by an underscore, to indicate that the data type could change depending on the configuration options.; In most cases these functions were for internal processing only anyway, and should have been ‘private’.; Accessors to the properties that could be useful outside of the library have been added. These always return Qobj. If the internal operator data type is not Qobj, then there could be signicant overhead in the conversion, and so this should be avoided during pulse optimisation.; If custom sub-classes are developed that use Qobj properties and methods (e.g. partial trace), then it is very likely that it will be more efficient to set the internal data type to Qobj.; The i",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:4799,Integrability,depend,depending,4799,"xperimental constraints can more easily be added into optimisation.; See tutorial notebook for full information. Improvements¶; Core libraries. Two-time correlation functions can now be calculated for fully time-dependent Hamiltonians and collapse operators. (Added by Kevin Fischer); The code for the inverse-power method for the steady state solver has been simplified.; Bloch-Redfield tensor creation is now up to an order of magnitude faster. (Added by Johannes Feist); Q.transform now works properly for arrays directly from sp_eigs (or eig).; Q.groundstate now checks for degeneracy.; Added sinm and cosm methods to the Qobj class.; Added charge and tunneling operators.; Time-dependent Cython code is now easier to read and debug. Control modules. The internal state / quantum operator data type can now be either Qobj or ndarray; Previous only ndarray was possible. This now opens up possibility of using Qobj methods in fidelity calculations; The attributes and functions that return these operators are now preceded by an underscore, to indicate that the data type could change depending on the configuration options.; In most cases these functions were for internal processing only anyway, and should have been ‘private’.; Accessors to the properties that could be useful outside of the library have been added. These always return Qobj. If the internal operator data type is not Qobj, then there could be signicant overhead in the conversion, and so this should be avoided during pulse optimisation.; If custom sub-classes are developed that use Qobj properties and methods (e.g. partial trace), then it is very likely that it will be more efficient to set the internal data type to Qobj.; The internal operator data will be chosen automatically based on the size and sparsity of the dynamics generator. It can be forced by setting dynamics.oper_dtype = <type>; Note this can be done by passing dyn_params={'oper_dtype':<type>} in any of the pulseoptim functions.; Some other properties a",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:7237,Integrability,depend,dependent,7237,"es; evo_init2t now _fwd_evo (fwd_evo as Qobj); evo_t2end now _onwd_evo (onwd_evo as Qobj); evo_t2targ now _onto_evo (onto_evo as Qobj). fidcomp properties; uses_evo_t2end now uses_onwd_evo; uses_evo_t2targ now uses_onto_evo; set_phase_option function now property phase_option. propcomp properties; grad_exact (now read only). propcomp functions; compute_propagator now _compute_propagator; compute_diff_prop now _compute_diff_prop; compute_prop_grad now _compute_prop_grad. tslotcomp functions; get_timeslot_for_fidelity_calc now _get_timeslot_for_fidelity_calc. Miscellaneous. QuTiP Travis CI tests now use the Anaconda distribution.; The about box and ipynb version_table now display addition system information.; Updated Cython cleanup to remove depreciation warning in sysconfig.; Updated ipynb_parallel to look for ipyparallel module in V4 of the notebooks. Bug Fixes¶. Fixes for countstat and psuedo-inverse functions; Fixed Qobj division tests on 32-bit systems.; Removed extra call to Python in time-dependent Cython code.; Fixed issue with repeated Bloch sphere saving.; Fixed T_0 triplet state not normalized properly. (Fixed by Eric Hontz); Simplified compiler flags (support for ARM systems).; Fixed a decoding error in qload.; Fixed issue using complex.h math and np.kind_t variables.; Corrected output states mismatch for ntraj=1 in the mcf90 solver.; Qobj data is now copied by default to avoid a bug in multiplication. (Fixed by Richard Brierley); Fixed bug overwriting hardware_info in __init__. (Fixed by Johannes Feist); Restored ability to explicity set Q.isherm, Q.type, and Q.superrep.; Fixed integer depreciation warnings from NumPy.; Qobj * (dense vec) would result in a recursive loop.; Fixed args=None -> args={} in correlation functions to be compatible with mesolve.; Fixed depreciation warnings in mcsolve.; Fixed neagtive only real parts in rand_ket.; Fixed a complicated list-cast-map-list antipattern in super operator reps. (Fixed by Stefan Krastanov); Fixed incorrec",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:9080,Integrability,depend,dependent,9080,"_ket.; Fixed a complicated list-cast-map-list antipattern in super operator reps. (Fixed by Stefan Krastanov); Fixed incorrect isherm for sigmam spin operator.; Fixed the dims when using final_state_output in mesolve and sesolve. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in co",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:9335,Integrability,integrat,integration,9335,"rsion 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator r",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:9444,Integrability,depend,dependent,9444,"quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories ",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:9680,Integrability,depend,dependent,9680,"operator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories when using only 1 CPU.; Fix bug in parsing of time-dependent Hamiltonian/collapse operator arguments; that occurred when the args argument is not a dictionary.; Fix bug in internal _version2int function that cause a failure when parsingthe version number of the Cython package",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:10041,Integrability,depend,dependent,10041,"Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories when using only 1 CPU.; Fix bug in parsing of time-dependent Hamiltonian/collapse operator arguments; that occurred when the args argument is not a dictionary.; Fix bug in internal _version2int function that cause a failure when parsingthe version number of the Cython package. Version 3.0.0 (July 17, 2014):¶. New Features¶. New module qutip.stochastic with stochastic master equation and stochastic; Schrödinger equation solvers.; Expanded steady state solvers. The function steady has been deprecated in; favor of steadystate. The steadystate solver no longer use umfpack by; default. New pre-processing methods for reordering and balancing the linear; equa",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:10466,Integrability,depend,dependent,10466,"n now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories when using only 1 CPU.; Fix bug in parsing of time-dependent Hamiltonian/collapse operator arguments; that occurred when the args argument is not a dictionary.; Fix bug in internal _version2int function that cause a failure when parsingthe version number of the Cython package. Version 3.0.0 (July 17, 2014):¶. New Features¶. New module qutip.stochastic with stochastic master equation and stochastic; Schrödinger equation solvers.; Expanded steady state solvers. The function steady has been deprecated in; favor of steadystate. The steadystate solver no longer use umfpack by; default. New pre-processing methods for reordering and balancing the linear; equation system used in direct solution of the steady state.; New module qutip.qip with utilities for quantum information processing,; including pre-defined quantum gates along with functions for expanding; arbitrary 1, 2, and 3 qubit gates to N qubit registers, circuit; representations, library of quantum algorithms, and basic physical models for; some common QIP architectures.; New module qutip.distributions with unified API for ",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:11574,Integrability,depend,dependent,11574,"ure when parsingthe version number of the Cython package. Version 3.0.0 (July 17, 2014):¶. New Features¶. New module qutip.stochastic with stochastic master equation and stochastic; Schrödinger equation solvers.; Expanded steady state solvers. The function steady has been deprecated in; favor of steadystate. The steadystate solver no longer use umfpack by; default. New pre-processing methods for reordering and balancing the linear; equation system used in direct solution of the steady state.; New module qutip.qip with utilities for quantum information processing,; including pre-defined quantum gates along with functions for expanding; arbitrary 1, 2, and 3 qubit gates to N qubit registers, circuit; representations, library of quantum algorithms, and basic physical models for; some common QIP architectures.; New module qutip.distributions with unified API for working with; distribution functions.; New format for defining time-dependent Hamiltonians and collapse operators,; using a pre-calculated numpy array that specifies the values of the; Qobj-coefficients for each time step.; New functions for working with different superoperator representations,; including Kraus and Chi representation.; New functions for visualizing quantum states using Qubism and Schimdt plots:; plot_qubism and plot_schmidt.; Dynamics solver now support taking argument e_ops (expectation value; operators) in dictionary form.; Public plotting functions from the qutip.visualization module are now; prefixed with plot_ (e.g., plot_fock_distribution). The; plot_wigner and plot_wigner_fock_distribution now supports 3D views; in addition to contour views.; New API and new functions for working with spin operators and states,; including for example spin_Jx, spin_Jy, spin_Jz and; spin_state, spin_coherent.; The expect function now supports a list of operators, in addition to the; previously supported list of states.; Simplified creation of qubit states using ket function.; The module qutip.cyQ has been re",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:13869,Integrability,depend,dependent,13869," values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:13932,Integrability,depend,depend,13932," values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:14913,Integrability,integrat,integration,14913,"back functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to ",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:15832,Integrability,depend,dependent,15832," scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gates.; Functions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:17031,Integrability,depend,dependence,17031,"ed on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gates.; Functions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and par",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:17459,Integrability,rout,routines,17459,"s as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum obje",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:17724,Integrability,depend,dependent,17724,"urns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:17800,Integrability,depend,dependent,17800,".; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum obj",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:17915,Integrability,depend,dependent,17915,"ow correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can h",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:18239,Integrability,depend,dependent,18239,"rmitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single functi",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:2367,Modifiability,enhance,enhancements,2367,"URE: Can now use interpolating cubic splines as time-dependent coefficients.; MAJOR FEATURE: Sparse matrix - vector multiplication now parallel using OPENMP.; Automatic tuning of OPENMP threading threashold.; Partial trace function is now up to 100x+ faster.; Hermitian verification now up to 100x+ faster.; Internal Qobj objects now created up to 60x faster.; Inplace conversion from COO -> CSR sparse formats (e.g. Memory efficiency improvement.); Faster reverse Cuthill-Mckee and sparse one and inf norms. Bug Fixes¶. Cleanup of temp. Cython files now more robust and working under Windows. Version 4.0.2 (January 5, 2017)¶. Bug Fixes¶. td files no longer left behind by correlation tests; Various fast sparse fixes. Version 4.0.0 (December 22, 2016)¶. Improvements¶; Core libraries. MAJOR FEATURE: Fast sparse: New subclass of csr_matrix added that overrides commonly used methods to avoid certain checks that incurr execution cost. All Qobj.data now fast_csr_matrix; HEOM performance enhancements; spmv now faster; mcsolve codegen further optimised. Control modules. Time dependent drift (through list of pwc dynamics generators); memory optimisation options provided for control.dynamics. Bug Fixes¶. recompilation of pyx files on first import removed; tau array in control.pulseoptim funcs now works. Version 3.2.0 (Never officially released)¶. New Features¶; Core libraries. MAJOR FEATURE: Non-Markovian solvers: Hierarchy (Added by Neill Lambert), Memory-Cascade, and Transfer-Tensor methods.; MAJOR FEATURE: Default steady state solver now up to 100x faster using the Intel Pardiso library under the Anaconda and Intel Python distributions.; The default Wigner function now uses a Clenshaw summation algorithm to evaluate a polynomial series that is applicable for any number of exciations (previous limitation was ~50 quanta), and is ~3x faster than before. (Added by Denis Vasilyev); Can now define a given eigen spectrum for random Hermitian and density operators.; The Qobj expm method ",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:4816,Modifiability,config,configuration,4816,"xperimental constraints can more easily be added into optimisation.; See tutorial notebook for full information. Improvements¶; Core libraries. Two-time correlation functions can now be calculated for fully time-dependent Hamiltonians and collapse operators. (Added by Kevin Fischer); The code for the inverse-power method for the steady state solver has been simplified.; Bloch-Redfield tensor creation is now up to an order of magnitude faster. (Added by Johannes Feist); Q.transform now works properly for arrays directly from sp_eigs (or eig).; Q.groundstate now checks for degeneracy.; Added sinm and cosm methods to the Qobj class.; Added charge and tunneling operators.; Time-dependent Cython code is now easier to read and debug. Control modules. The internal state / quantum operator data type can now be either Qobj or ndarray; Previous only ndarray was possible. This now opens up possibility of using Qobj methods in fidelity calculations; The attributes and functions that return these operators are now preceded by an underscore, to indicate that the data type could change depending on the configuration options.; In most cases these functions were for internal processing only anyway, and should have been ‘private’.; Accessors to the properties that could be useful outside of the library have been added. These always return Qobj. If the internal operator data type is not Qobj, then there could be signicant overhead in the conversion, and so this should be avoided during pulse optimisation.; If custom sub-classes are developed that use Qobj properties and methods (e.g. partial trace), then it is very likely that it will be more efficient to set the internal data type to Qobj.; The internal operator data will be chosen automatically based on the size and sparsity of the dynamics generator. It can be forced by setting dynamics.oper_dtype = <type>; Note this can be done by passing dyn_params={'oper_dtype':<type>} in any of the pulseoptim functions.; Some other properties a",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:7516,Modifiability,variab,variables,7516,"operties; grad_exact (now read only). propcomp functions; compute_propagator now _compute_propagator; compute_diff_prop now _compute_diff_prop; compute_prop_grad now _compute_prop_grad. tslotcomp functions; get_timeslot_for_fidelity_calc now _get_timeslot_for_fidelity_calc. Miscellaneous. QuTiP Travis CI tests now use the Anaconda distribution.; The about box and ipynb version_table now display addition system information.; Updated Cython cleanup to remove depreciation warning in sysconfig.; Updated ipynb_parallel to look for ipyparallel module in V4 of the notebooks. Bug Fixes¶. Fixes for countstat and psuedo-inverse functions; Fixed Qobj division tests on 32-bit systems.; Removed extra call to Python in time-dependent Cython code.; Fixed issue with repeated Bloch sphere saving.; Fixed T_0 triplet state not normalized properly. (Fixed by Eric Hontz); Simplified compiler flags (support for ARM systems).; Fixed a decoding error in qload.; Fixed issue using complex.h math and np.kind_t variables.; Corrected output states mismatch for ntraj=1 in the mcf90 solver.; Qobj data is now copied by default to avoid a bug in multiplication. (Fixed by Richard Brierley); Fixed bug overwriting hardware_info in __init__. (Fixed by Johannes Feist); Restored ability to explicity set Q.isherm, Q.type, and Q.superrep.; Fixed integer depreciation warnings from NumPy.; Qobj * (dense vec) would result in a recursive loop.; Fixed args=None -> args={} in correlation functions to be compatible with mesolve.; Fixed depreciation warnings in mcsolve.; Fixed neagtive only real parts in rand_ket.; Fixed a complicated list-cast-map-list antipattern in super operator reps. (Fixed by Stefan Krastanov); Fixed incorrect isherm for sigmam spin operator.; Fixed the dims when using final_state_output in mesolve and sesolve. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matpl",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:8894,Modifiability,enhance,enhanced,8894,"lt in a recursive loop.; Fixed args=None -> args={} in correlation functions to be compatible with mesolve.; Fixed depreciation warnings in mcsolve.; Fixed neagtive only real parts in rand_ket.; Fixed a complicated list-cast-map-list antipattern in super operator reps. (Fixed by Stefan Krastanov); Fixed incorrect isherm for sigmam spin operator.; Fixed the dims when using final_state_output in mesolve and sesolve. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:15165,Modifiability,variab,variable,15165,"ata, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gate",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:2355,Performance,perform,performance,2355,"URE: Can now use interpolating cubic splines as time-dependent coefficients.; MAJOR FEATURE: Sparse matrix - vector multiplication now parallel using OPENMP.; Automatic tuning of OPENMP threading threashold.; Partial trace function is now up to 100x+ faster.; Hermitian verification now up to 100x+ faster.; Internal Qobj objects now created up to 60x faster.; Inplace conversion from COO -> CSR sparse formats (e.g. Memory efficiency improvement.); Faster reverse Cuthill-Mckee and sparse one and inf norms. Bug Fixes¶. Cleanup of temp. Cython files now more robust and working under Windows. Version 4.0.2 (January 5, 2017)¶. Bug Fixes¶. td files no longer left behind by correlation tests; Various fast sparse fixes. Version 4.0.0 (December 22, 2016)¶. Improvements¶; Core libraries. MAJOR FEATURE: Fast sparse: New subclass of csr_matrix added that overrides commonly used methods to avoid certain checks that incurr execution cost. All Qobj.data now fast_csr_matrix; HEOM performance enhancements; spmv now faster; mcsolve codegen further optimised. Control modules. Time dependent drift (through list of pwc dynamics generators); memory optimisation options provided for control.dynamics. Bug Fixes¶. recompilation of pyx files on first import removed; tau array in control.pulseoptim funcs now works. Version 3.2.0 (Never officially released)¶. New Features¶; Core libraries. MAJOR FEATURE: Non-Markovian solvers: Hierarchy (Added by Neill Lambert), Memory-Cascade, and Transfer-Tensor methods.; MAJOR FEATURE: Default steady state solver now up to 100x faster using the Intel Pardiso library under the Anaconda and Intel Python distributions.; The default Wigner function now uses a Clenshaw summation algorithm to evaluate a polynomial series that is applicable for any number of exciations (previous limitation was ~50 quanta), and is ~3x faster than before. (Added by Denis Vasilyev); Can now define a given eigen spectrum for random Hermitian and density operators.; The Qobj expm method ",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:3421,Performance,perform,performs,3421,"er optimised. Control modules. Time dependent drift (through list of pwc dynamics generators); memory optimisation options provided for control.dynamics. Bug Fixes¶. recompilation of pyx files on first import removed; tau array in control.pulseoptim funcs now works. Version 3.2.0 (Never officially released)¶. New Features¶; Core libraries. MAJOR FEATURE: Non-Markovian solvers: Hierarchy (Added by Neill Lambert), Memory-Cascade, and Transfer-Tensor methods.; MAJOR FEATURE: Default steady state solver now up to 100x faster using the Intel Pardiso library under the Anaconda and Intel Python distributions.; The default Wigner function now uses a Clenshaw summation algorithm to evaluate a polynomial series that is applicable for any number of exciations (previous limitation was ~50 quanta), and is ~3x faster than before. (Added by Denis Vasilyev); Can now define a given eigen spectrum for random Hermitian and density operators.; The Qobj expm method now uses the equivilent SciPy routine, and performs a much faster exp operation if the matrix is diagonal.; One can now build zero operators using the qzero function. Control modules. MAJOR FEATURE: CRAB algorithm added; This is an alternative to the GRAPE algorithm, which allows for analytical control functions, which means that experimental constraints can more easily be added into optimisation.; See tutorial notebook for full information. Improvements¶; Core libraries. Two-time correlation functions can now be calculated for fully time-dependent Hamiltonians and collapse operators. (Added by Kevin Fischer); The code for the inverse-power method for the steady state solver has been simplified.; Bloch-Redfield tensor creation is now up to an order of magnitude faster. (Added by Johannes Feist); Q.transform now works properly for arrays directly from sp_eigs (or eig).; Q.groundstate now checks for degeneracy.; Added sinm and cosm methods to the Qobj class.; Added charge and tunneling operators.; Time-dependent Cython code is n",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:9576,Performance,perform,performance,9576,"r counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-dependent problem (list string format) with multiple terms in coefficient to an operator. Version 3.0.1 (Aug 5, 2014):¶. Bug Fixes¶. Fix bug in create(), which returned a Qobj with CSC data instead of CSR.; Fix several bugs in mcsolve: Incorrect storing of collapse times and collapse; operator records. Incorrect averaging of expectation values for different; trajectories when using only 1 CPU.; Fix bug in parsing of time-dependent Hamiltonian/collapse operator arguments; that occurred when the args argument is not a dictionary.; Fix bug in internal _version",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:13025,Performance,concurren,concurrence,13025,".; Public plotting functions from the qutip.visualization module are now; prefixed with plot_ (e.g., plot_fock_distribution). The; plot_wigner and plot_wigner_fock_distribution now supports 3D views; in addition to contour views.; New API and new functions for working with spin operators and states,; including for example spin_Jx, spin_Jy, spin_Jz and; spin_state, spin_coherent.; The expect function now supports a list of operators, in addition to the; previously supported list of states.; Simplified creation of qubit states using ket function.; The module qutip.cyQ has been renamed to qutip.cy and the sparse; matrix-vector functions spmv and spmv1d has been combined into one; function spmv. New functions for operating directly on the underlaying; sparse CSR data have been added (e.g., spmv_csr). Performance; improvements. New and improved Cython functions for calculating expectation; values for state vectors, density matrices in matrix and vector form.; The concurrence function now supports both pure and mixed states. Added; function for calculating the entangling power of a two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Imp",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:14082,Performance,optimiz,optimized,14082,"two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose fu",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:14748,Performance,perform,performance,14748,"; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualiza",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:15656,Performance,perform,performance,15656,"stances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gates.; Functions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is ",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:17381,Performance,perform,performance,17381,"s as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum obje",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:18870,Performance,optimiz,optimized,18870,"ed to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying the installation.; Demos window now lets you copy and paste code from each example. Version 1.1.4 (May 28, 2012):¶. Bug Fixes:¶. Fixed bug pointed out by Brendan Abolins.; Qobj.tr() returns zero-dim ndarray instead of float or complex.; Updated factorial import for scipy version 0.10+. Version 1.1.3 (November 21, 2011):¶. New Functions:¶. Allow custom naming of Bloch sphere. Bug Fixes:¶. Fixed text alignment issues in AboutBox.; Added fix for SciPy V>0.10 where factorial was moved to scipy.",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:19096,Performance,concurren,concurrence,19096,"t; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying the installation.; Demos window now lets you copy and paste code from each example. Version 1.1.4 (May 28, 2012):¶. Bug Fixes:¶. Fixed bug pointed out by Brendan Abolins.; Qobj.tr() returns zero-dim ndarray instead of float or complex.; Updated factorial import for scipy version 0.10+. Version 1.1.3 (November 21, 2011):¶. New Functions:¶. Allow custom naming of Bloch sphere. Bug Fixes:¶. Fixed text alignment issues in AboutBox.; Added fix for SciPy V>0.10 where factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts a",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:20917,Performance,concurren,concurrence,20917," to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Mar 28, 2017. . Built with Sphinx using a theme provided ",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:21109,Performance,load,loading,21109,"utput.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-RELEASE INCLUDES VASTLY IMPROVED TIME-INDEPENDENT MCSOLVE AND ODESOLVE PERFORMANCE. New Functions¶. Added linear entropy function.; Number of CPU’s can now be changed. Bug Fixes¶. Metrics no longer use dense matrices.; Fixed Bloch sphere grid issue with matplotlib 1.1.; Qobj trace operation uses only sparse matrices.; Fixed issue where GUI windows do not raise to front. Version 1.1.0 (October 04, 2011)¶; THIS RELEASE NOW REQUIRES THE GCC COMPILER TO BE INSTALLED. New Functions¶. tidyup function to remove small elements from a Qobj.; Added concurrence function.; Added simdiag for simultaneous diagonalization of operators.; Added eigenstates method returning eigenstates and eigenvalues to Qobj class.; Added fileio for saving and loading data sets and/or Qobj’s.; Added hinton function for visualizing density matrices. Bug Fixes¶. Switched Examples to new Signals method used in PySide 1.0.6+.; Switched ProgressBar to new Signals method.; Fixed memory issue in expm functions.; Fixed memory bug in isherm.; Made all Qobj data complex by default.; Reduced ODE tolerance levels in Odeoptions.; Fixed bug in ptrace where dense matrix was used instead of sparse.; Fixed issue where PyQt4 version would not be displayed in about box.; Fixed issue in Wigner where xvec was used twice (in place of yvec). Version 1.0.0 (July 29, 2011)¶. Initial release. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Mar 28, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:2266,Safety,avoid,avoid,2266,"Windows using Visual Studio 2015.; MAJOR FEATURE: Cython and other low level code switched to C++ for MS Windows compatibility.; MAJOR FEATURE: Can now use interpolating cubic splines as time-dependent coefficients.; MAJOR FEATURE: Sparse matrix - vector multiplication now parallel using OPENMP.; Automatic tuning of OPENMP threading threashold.; Partial trace function is now up to 100x+ faster.; Hermitian verification now up to 100x+ faster.; Internal Qobj objects now created up to 60x faster.; Inplace conversion from COO -> CSR sparse formats (e.g. Memory efficiency improvement.); Faster reverse Cuthill-Mckee and sparse one and inf norms. Bug Fixes¶. Cleanup of temp. Cython files now more robust and working under Windows. Version 4.0.2 (January 5, 2017)¶. Bug Fixes¶. td files no longer left behind by correlation tests; Various fast sparse fixes. Version 4.0.0 (December 22, 2016)¶. Improvements¶; Core libraries. MAJOR FEATURE: Fast sparse: New subclass of csr_matrix added that overrides commonly used methods to avoid certain checks that incurr execution cost. All Qobj.data now fast_csr_matrix; HEOM performance enhancements; spmv now faster; mcsolve codegen further optimised. Control modules. Time dependent drift (through list of pwc dynamics generators); memory optimisation options provided for control.dynamics. Bug Fixes¶. recompilation of pyx files on first import removed; tau array in control.pulseoptim funcs now works. Version 3.2.0 (Never officially released)¶. New Features¶; Core libraries. MAJOR FEATURE: Non-Markovian solvers: Hierarchy (Added by Neill Lambert), Memory-Cascade, and Transfer-Tensor methods.; MAJOR FEATURE: Default steady state solver now up to 100x faster using the Intel Pardiso library under the Anaconda and Intel Python distributions.; The default Wigner function now uses a Clenshaw summation algorithm to evaluate a polynomial series that is applicable for any number of exciations (previous limitation was ~50 quanta), and is ~3x faster than ",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:5188,Safety,avoid,avoided,5188,"magnitude faster. (Added by Johannes Feist); Q.transform now works properly for arrays directly from sp_eigs (or eig).; Q.groundstate now checks for degeneracy.; Added sinm and cosm methods to the Qobj class.; Added charge and tunneling operators.; Time-dependent Cython code is now easier to read and debug. Control modules. The internal state / quantum operator data type can now be either Qobj or ndarray; Previous only ndarray was possible. This now opens up possibility of using Qobj methods in fidelity calculations; The attributes and functions that return these operators are now preceded by an underscore, to indicate that the data type could change depending on the configuration options.; In most cases these functions were for internal processing only anyway, and should have been ‘private’.; Accessors to the properties that could be useful outside of the library have been added. These always return Qobj. If the internal operator data type is not Qobj, then there could be signicant overhead in the conversion, and so this should be avoided during pulse optimisation.; If custom sub-classes are developed that use Qobj properties and methods (e.g. partial trace), then it is very likely that it will be more efficient to set the internal data type to Qobj.; The internal operator data will be chosen automatically based on the size and sparsity of the dynamics generator. It can be forced by setting dynamics.oper_dtype = <type>; Note this can be done by passing dyn_params={'oper_dtype':<type>} in any of the pulseoptim functions.; Some other properties and methods were renamed at the same time. A full list is given here. All modules; - function: set_log_level -> property: log_level; dynamics functions; _init_lists now _init_evo; get_num_ctrls now property: num_ctrls; get_owd_evo_target now property: onto_evo_target; combine_dyn_gen now _combine_dyn_gen (no longer returns a value); get_dyn_gen now _get_phased_dyn_gen; get_ctrl_den_gen now _get_phased_ctrl_dyn_gen; ensure_decom",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:7633,Safety,avoid,avoid,7633,"iff_prop now _compute_diff_prop; compute_prop_grad now _compute_prop_grad. tslotcomp functions; get_timeslot_for_fidelity_calc now _get_timeslot_for_fidelity_calc. Miscellaneous. QuTiP Travis CI tests now use the Anaconda distribution.; The about box and ipynb version_table now display addition system information.; Updated Cython cleanup to remove depreciation warning in sysconfig.; Updated ipynb_parallel to look for ipyparallel module in V4 of the notebooks. Bug Fixes¶. Fixes for countstat and psuedo-inverse functions; Fixed Qobj division tests on 32-bit systems.; Removed extra call to Python in time-dependent Cython code.; Fixed issue with repeated Bloch sphere saving.; Fixed T_0 triplet state not normalized properly. (Fixed by Eric Hontz); Simplified compiler flags (support for ARM systems).; Fixed a decoding error in qload.; Fixed issue using complex.h math and np.kind_t variables.; Corrected output states mismatch for ntraj=1 in the mcf90 solver.; Qobj data is now copied by default to avoid a bug in multiplication. (Fixed by Richard Brierley); Fixed bug overwriting hardware_info in __init__. (Fixed by Johannes Feist); Restored ability to explicity set Q.isherm, Q.type, and Q.superrep.; Fixed integer depreciation warnings from NumPy.; Qobj * (dense vec) would result in a recursive loop.; Fixed args=None -> args={} in correlation functions to be compatible with mesolve.; Fixed depreciation warnings in mcsolve.; Fixed neagtive only real parts in rand_ket.; Fixed a complicated list-cast-map-list antipattern in super operator reps. (Fixed by Stefan Krastanov); Fixed incorrect isherm for sigmam spin operator.; Fixed the dims when using final_state_output in mesolve and sesolve. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; S",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:14175,Safety,avoid,avoiding,14175,"two-qubit gate.; Added function for generating (generalized) Lindblad dissipator; superoperators.; New functions for generating Bell states, and singlet and triplet states.; QuTiP no longer contains the demos GUI. The examples are now available on the; QuTiP web site. The qutip.gui module has been renamed to qutip.ui and; does no longer contain graphical UI elements. New text-based and HTML-based; progressbar classes.; Support for harmonic oscillator operators/states in a Fock state basis that; does not start from zero (e.g., in the range [M,N+1]). Support for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose fu",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:2064,Testability,test,tests,2064," QuTiP: Quantum Toolbox in Python. Docs »; Change Log. Change Log¶. Version 4.1.0 (March 10, 2017)¶. Improvements¶; Core libraries. MAJOR FEATURE: QuTiP now works for Python 3.5+ on Windows using Visual Studio 2015.; MAJOR FEATURE: Cython and other low level code switched to C++ for MS Windows compatibility.; MAJOR FEATURE: Can now use interpolating cubic splines as time-dependent coefficients.; MAJOR FEATURE: Sparse matrix - vector multiplication now parallel using OPENMP.; Automatic tuning of OPENMP threading threashold.; Partial trace function is now up to 100x+ faster.; Hermitian verification now up to 100x+ faster.; Internal Qobj objects now created up to 60x faster.; Inplace conversion from COO -> CSR sparse formats (e.g. Memory efficiency improvement.); Faster reverse Cuthill-Mckee and sparse one and inf norms. Bug Fixes¶. Cleanup of temp. Cython files now more robust and working under Windows. Version 4.0.2 (January 5, 2017)¶. Bug Fixes¶. td files no longer left behind by correlation tests; Various fast sparse fixes. Version 4.0.0 (December 22, 2016)¶. Improvements¶; Core libraries. MAJOR FEATURE: Fast sparse: New subclass of csr_matrix added that overrides commonly used methods to avoid certain checks that incurr execution cost. All Qobj.data now fast_csr_matrix; HEOM performance enhancements; spmv now faster; mcsolve codegen further optimised. Control modules. Time dependent drift (through list of pwc dynamics generators); memory optimisation options provided for control.dynamics. Bug Fixes¶. recompilation of pyx files on first import removed; tau array in control.pulseoptim funcs now works. Version 3.2.0 (Never officially released)¶. New Features¶; Core libraries. MAJOR FEATURE: Non-Markovian solvers: Hierarchy (Added by Neill Lambert), Memory-Cascade, and Transfer-Tensor methods.; MAJOR FEATURE: Default steady state solver now up to 100x faster using the Intel Pardiso library under the Anaconda and Intel Python distributions.; The default Wigner function",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:6823,Testability,test,tests,6823,"g_level; dynamics functions; _init_lists now _init_evo; get_num_ctrls now property: num_ctrls; get_owd_evo_target now property: onto_evo_target; combine_dyn_gen now _combine_dyn_gen (no longer returns a value); get_dyn_gen now _get_phased_dyn_gen; get_ctrl_den_gen now _get_phased_ctrl_dyn_gen; ensure_decomp_curr now _ensure_decomp_curr; spectral_decomp now _spectral_decomp. dynamics properties; evo_init2t now _fwd_evo (fwd_evo as Qobj); evo_t2end now _onwd_evo (onwd_evo as Qobj); evo_t2targ now _onto_evo (onto_evo as Qobj). fidcomp properties; uses_evo_t2end now uses_onwd_evo; uses_evo_t2targ now uses_onto_evo; set_phase_option function now property phase_option. propcomp properties; grad_exact (now read only). propcomp functions; compute_propagator now _compute_propagator; compute_diff_prop now _compute_diff_prop; compute_prop_grad now _compute_prop_grad. tslotcomp functions; get_timeslot_for_fidelity_calc now _get_timeslot_for_fidelity_calc. Miscellaneous. QuTiP Travis CI tests now use the Anaconda distribution.; The about box and ipynb version_table now display addition system information.; Updated Cython cleanup to remove depreciation warning in sysconfig.; Updated ipynb_parallel to look for ipyparallel module in V4 of the notebooks. Bug Fixes¶. Fixes for countstat and psuedo-inverse functions; Fixed Qobj division tests on 32-bit systems.; Removed extra call to Python in time-dependent Cython code.; Fixed issue with repeated Bloch sphere saving.; Fixed T_0 triplet state not normalized properly. (Fixed by Eric Hontz); Simplified compiler flags (support for ARM systems).; Fixed a decoding error in qload.; Fixed issue using complex.h math and np.kind_t variables.; Corrected output states mismatch for ntraj=1 in the mcf90 solver.; Qobj data is now copied by default to avoid a bug in multiplication. (Fixed by Richard Brierley); Fixed bug overwriting hardware_info in __init__. (Fixed by Johannes Feist); Restored ability to explicity set Q.isherm, Q.type, and Q.superrep",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:7174,Testability,test,tests,7174,"w _ensure_decomp_curr; spectral_decomp now _spectral_decomp. dynamics properties; evo_init2t now _fwd_evo (fwd_evo as Qobj); evo_t2end now _onwd_evo (onwd_evo as Qobj); evo_t2targ now _onto_evo (onto_evo as Qobj). fidcomp properties; uses_evo_t2end now uses_onwd_evo; uses_evo_t2targ now uses_onto_evo; set_phase_option function now property phase_option. propcomp properties; grad_exact (now read only). propcomp functions; compute_propagator now _compute_propagator; compute_diff_prop now _compute_diff_prop; compute_prop_grad now _compute_prop_grad. tslotcomp functions; get_timeslot_for_fidelity_calc now _get_timeslot_for_fidelity_calc. Miscellaneous. QuTiP Travis CI tests now use the Anaconda distribution.; The about box and ipynb version_table now display addition system information.; Updated Cython cleanup to remove depreciation warning in sysconfig.; Updated ipynb_parallel to look for ipyparallel module in V4 of the notebooks. Bug Fixes¶. Fixes for countstat and psuedo-inverse functions; Fixed Qobj division tests on 32-bit systems.; Removed extra call to Python in time-dependent Cython code.; Fixed issue with repeated Bloch sphere saving.; Fixed T_0 triplet state not normalized properly. (Fixed by Eric Hontz); Simplified compiler flags (support for ARM systems).; Fixed a decoding error in qload.; Fixed issue using complex.h math and np.kind_t variables.; Corrected output states mismatch for ntraj=1 in the mcf90 solver.; Qobj data is now copied by default to avoid a bug in multiplication. (Fixed by Richard Brierley); Fixed bug overwriting hardware_info in __init__. (Fixed by Johannes Feist); Restored ability to explicity set Q.isherm, Q.type, and Q.superrep.; Fixed integer depreciation warnings from NumPy.; Qobj * (dense vec) would result in a recursive loop.; Fixed args=None -> args={} in correlation functions to be compatible with mesolve.; Fixed depreciation warnings in mcsolve.; Fixed neagtive only real parts in rand_ket.; Fixed a complicated list-cast-map-list a",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:8783,Testability,log,logging,8783," set Q.isherm, Q.type, and Q.superrep.; Fixed integer depreciation warnings from NumPy.; Qobj * (dense vec) would result in a recursive loop.; Fixed args=None -> args={} in correlation functions to be compatible with mesolve.; Fixed depreciation warnings in mcsolve.; Fixed neagtive only real parts in rand_ket.; Fixed a complicated list-cast-map-list antipattern in super operator reps. (Fixed by Stefan Krastanov); Fixed incorrect isherm for sigmam spin operator.; Fixed the dims when using final_state_output in mesolve and sesolve. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady sta",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:8819,Testability,log,logging,8819,"d Q.superrep.; Fixed integer depreciation warnings from NumPy.; Qobj * (dense vec) would result in a recursive loop.; Fixed args=None -> args={} in correlation functions to be compatible with mesolve.; Fixed depreciation warnings in mcsolve.; Fixed neagtive only real parts in rand_ket.; Fixed a complicated list-cast-map-list antipattern in super operator reps. (Fixed by Stefan Krastanov); Fixed incorrect isherm for sigmam spin operator.; Fixed the dims when using final_state_output in mesolve and sesolve. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now su",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:14925,Testability,test,tests,14925,"back functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to ",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:15275,Testability,log,logarithmic,15275,"ata, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner colormap for highlighting negative values.; More graph styles to the visualization module. Bug Fixes:¶. Function based time-dependent Hamiltonians now keep the correct phase.; mcsolve no longer prints to the command line if ntraj=1. Version 2.1.0 (October 05, 2012):¶. New Features¶. New method for generating Wigner functions based on Laguerre polynomials.; coherent(), coherent_dm(), and thermal_dm() can now be expressed using analytic values.; Unittests now use nose and can be run after installation.; Added iswap and sqrt-iswap gate",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:19373,Testability,test,tests,19373,"and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method instead of a direct solver.; There are three new entropy functions for concurrence, mutual information, and conditional entropy.; Correlation functions have been combined under a single function.; The operator norm can now be set to trace, Frobius, one, or max norm.; Global QuTiP settings can now be modified.; QuTiP includes a collection of unit tests for verifying the installation.; Demos window now lets you copy and paste code from each example. Version 1.1.4 (May 28, 2012):¶. Bug Fixes:¶. Fixed bug pointed out by Brendan Abolins.; Qobj.tr() returns zero-dim ndarray instead of float or complex.; Updated factorial import for scipy version 0.10+. Version 1.1.3 (November 21, 2011):¶. New Functions:¶. Allow custom naming of Bloch sphere. Bug Fixes:¶. Fixed text alignment issues in AboutBox.; Added fix for SciPy V>0.10 where factorial was moved to scipy.misc module.; Added tidyup function to tensor function output.; Removed openmp flags from setup.py as new Mac Xcode compiler does not recognize them.; Qobj diag method now returns real array if all imaginary parts are zero.; Examples GUI now links to new documentation.; Fixed zero-dimensional array output from metrics module. Version 1.1.2 (October 27, 2011)¶. Bug Fixes¶. Fixed issue where Monte Carlo states were not output properly. Version 1.1.1 (October 25, 2011)¶; THIS POINT-R",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:4071,Usability,simpl,simplified,4071,"ns.; The default Wigner function now uses a Clenshaw summation algorithm to evaluate a polynomial series that is applicable for any number of exciations (previous limitation was ~50 quanta), and is ~3x faster than before. (Added by Denis Vasilyev); Can now define a given eigen spectrum for random Hermitian and density operators.; The Qobj expm method now uses the equivilent SciPy routine, and performs a much faster exp operation if the matrix is diagonal.; One can now build zero operators using the qzero function. Control modules. MAJOR FEATURE: CRAB algorithm added; This is an alternative to the GRAPE algorithm, which allows for analytical control functions, which means that experimental constraints can more easily be added into optimisation.; See tutorial notebook for full information. Improvements¶; Core libraries. Two-time correlation functions can now be calculated for fully time-dependent Hamiltonians and collapse operators. (Added by Kevin Fischer); The code for the inverse-power method for the steady state solver has been simplified.; Bloch-Redfield tensor creation is now up to an order of magnitude faster. (Added by Johannes Feist); Q.transform now works properly for arrays directly from sp_eigs (or eig).; Q.groundstate now checks for degeneracy.; Added sinm and cosm methods to the Qobj class.; Added charge and tunneling operators.; Time-dependent Cython code is now easier to read and debug. Control modules. The internal state / quantum operator data type can now be either Qobj or ndarray; Previous only ndarray was possible. This now opens up possibility of using Qobj methods in fidelity calculations; The attributes and functions that return these operators are now preceded by an underscore, to indicate that the data type could change depending on the configuration options.; In most cases these functions were for internal processing only anyway, and should have been ‘private’.; Accessors to the properties that could be useful outside of the library have been",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:9036,Usability,progress bar,progress bars,9036,"nings in mcsolve.; Fixed neagtive only real parts in rand_ket.; Fixed a complicated list-cast-map-list antipattern in super operator reps. (Fixed by Stefan Krastanov); Fixed incorrect isherm for sigmam spin operator.; Fixed the dims when using final_state_output in mesolve and sesolve. Version 3.1.0 (January 1, 2015):¶. New Features¶. MAJOR FEATURE: New module for quantum control (qutip.control).; NAMESPACE CHANGE: QuTiP no longer exports symbols from NumPy and matplotlib, so those modules must now be explicitly imported when required.; New module for counting statistics.; Stochastic solvers now run trajectories in parallel.; New superoperator and tensor manipulation functions; (super_tensor, composite, tensor_contract).; New logging module for debugging (qutip.logging).; New user-available API for parallelization (parallel_map).; New enhanced (optional) text-based progressbar (qutip.ui.EnhancedTextProgressBar); Faster Python based monte carlo solver (mcsolve).; Support for progress bars in propagator function.; Time-dependent Cython code now calls complex cmath functions.; Random numbers seeds can now be reused for successive calls to mcsolve.; The Bloch-Redfield master equation solver now supports optional Lindblad type collapse operators.; Improved handling of ODE integration errors in mesolve.; Improved correlation function module (for example, improved support for time-dependent problems).; Improved parallelization of mcsolve (can now be interrupted easily, support for IPython.parallel, etc.); Many performance improvements, and much internal code restructuring. Bug Fixes¶. Cython build files for time-dependent string format now removed automatically.; Fixed incorrect solution time from inverse-power method steady state solver.; mcsolve now supports Options(store_states=True); Fixed bug in hadamard gate function.; Fixed compatibility issues with NumPy 1.9.0.; Progressbar in mcsolve can now be suppressed.; Fixed bug in gate_expand_3toN.; Fixed bug for time-depende",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:14693,Usability,simpl,simplified,14693," for; eliminating and extracting states from Qobj instances (e.g., removing one; state from a two-qubit system to obtain a three-level system).; Support for time-dependent Hamiltonian and Liouvillian callback functions that; depend on the instantaneous state, which for example can be used for solving; master equations with mean field terms. Improvements¶. Restructured and optimized implementation of Qobj, which now has; significantly lower memory footprint due to avoiding excessive copying of; internal matrix data.; The classes OdeData, Odeoptions, Odeconfig are now called; Result, Options, and Config, respectively, and are available in; the module qutip.solver.; The squeez function has been renamed to squeeze.; Better support for sparse matrices when calculating propagators using the; propagator function.; Improved Bloch sphere.; Restructured and improved the module qutip.sparse, which now only; operates directly on sparse matrices (not on Qobj instances).; Improved and simplified implement of the tensor function.; Improved performance, major code cleanup (including namespace changes),; and numerous bug fixes.; Benchmark scripts improved and restructured.; QuTiP is now using continuous integration tests (TravisCI). Version 2.2.0 (March 01, 2013):¶. New Features¶. Added Support for Windows; New Bloch3d class for plotting 3D Bloch spheres using Mayavi.; Bloch sphere vectors now look like arrows.; Partial transpose function.; Continuos variable functions for calculating correlation and covariance; matrices, the Wigner covariance matrix and the logarithmic negativity for; for multimode fields in Fock basis.; The master-equation solver (mesolve) now accepts pre-constructed Liouvillian; terms, which makes it possible to solve master equations that are not on; the standard Lindblad form.; Optional Fortran Monte Carlo solver (mcsolve_f90) by Arne Grimsmo.; A module of tools for using QuTiP in IPython notebooks.; Increased performance of the steady state solver.; New Wigner ",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:17235,Usability,progress bar,progress bar,17235,"tions for quantum process tomography.; Window icons are now set for Ubuntu application launcher.; The propagator function can now take a list of times as argument, and returns a list of corresponding propagators. Bug Fixes:¶. mesolver now correctly uses the user defined rhs_filename in Odeoptions().; rhs_generate() now handles user defined filenames properly.; Density matrix returned by propagator_steadystate is now Hermitian.; eseries_value returns real list if all imag parts are zero.; mcsolver now gives correct results for strong damping rates.; Odeoptions now prints mc_avg correctly.; Do not check for PyObj in mcsolve when gui=False.; Eseries now correctly handles purely complex rates.; thermal_dm() function now uses truncated operator method.; Cython based time-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent argume",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/changelog.html:18048,Usability,simpl,simplifying,18048,"ime-dependence now Python 3 compatible.; Removed call to NSAutoPool on mac systems.; Progress bar now displays the correct number of CPU’s used.; Qobj.diag() returns reals if operator is Hermitian.; Text for progress bar on Linux systems is no longer cutoff. Version 2.0.0 (June 01, 2012):¶; The second version of QuTiP has seen many improvements in the performance of the original code base, as well as the addition of several new routines supporting a wide range of functionality. Some of the highlights of this release include:. New Features¶. QuTiP now includes solvers for both Floquet and Bloch-Redfield master equations.; The Lindblad master equation and Monte Carlo solvers allow for time-dependent collapse operators.; It is possible to automatically compile time-dependent problems into c-code using Cython (if installed).; Python functions can be used to create arbitrary time-dependent Hamiltonians and collapse operators.; Solvers now return Odedata objects containing all simulation results and parameters, simplifying the saving of simulation results. Important; This breaks compatibility with QuTiP version 1.x. mesolve and mcsolve can reuse Hamiltonian data when only the initial state, or time-dependent arguments, need to be changed.; QuTiP includes functions for creating random quantum states and operators.; The generation and manipulation of quantum objects is now more efficient.; Quantum objects have basis transformation and matrix element calculations as built-in methods.; The quantum object eigensolver can use sparse solvers.; The partial-trace (ptrace) function is up to 20x faster.; The Bloch sphere can now be used with the Matplotlib animation function, and embedded as a subplot in a figure.; QuTiP has built-in functions for saving quantum objects and data arrays.; The steady-state solver has been further optimized for sparse matrices, and can handle much larger system Hamiltonians.; The steady-state solver can use the iterative bi-conjugate gradient method in",MatchSource.WIKI,docs/4.1/changelog.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/changelog.html
https://qutip.org/docs/4.1/contributors.html:2546,Deployability,update,updated,2546,"University of Denmark) - Bug hunting for the Monte-Carlo solver; Andre Carvalho - Bug hunter; André Xuereb (University of Hannover) - Bug hunter; Anubhav Vardhan (IIT, Kanpur) - Bug hunter, Code contributor, Documentation; Arne Grimsmo (University of Auckland) - Bug hunter, Code contributor; Ben Criger (Waterloo IQC) - Code contributor; Bredan Abolins (Berkeley) - Bug hunter; Chris Granade - Code contributor; Claudia Degrandi (Yale University) - Documentation; Dawid Crivelli - Bug hunter; Denis Vasilyev (St. Petersburg State University) - Code contributor; Dong Zhou (Yale University) - Bug hunter; Florian Ong (Institute for Quantum Computation) - Bug hunter; Frank Schima - Macports packaging; Henri Nielsen (Technical University of Denmark) - Bug hunter; Hwajung Kang (Systems Biology Institute, Tokyo) - Suggestions for improving Bloch class; James Clemens (Miami University - Ohio) - Bug hunter; Johannes Feist - Code contributor; Jonas Hörsch - Code contributor; Jonas Neergaard-Nielsen (Technical University of Denmark) - Code contributor, Windows support; JP Hadden (University of Bristol) - Code contributor, improved Bloch sphere visualization; Kevin Fischer (Stanford) - Code contributor; Laurence Stant - Documentation; Markus Baden (Centre for Quantum Technologies, Singapore) - Code contributor, Documentation; Myung-Joong Hwang (Pohang University of Science and Technology) - Bug hunter; Neill Lambert (RIKEN) - Code contributor, Windows support; Nikolas Tezak (Stanford) - Code contributor; Per Nielsen (Technical University of Denmark) - Bug hunter, Code contributor; Piotr Migdał (ICFO) - Code contributor; Reinier Heeres (Yale University) - Code contributor; Robert Jördens (NIST) - Linux packaging; Simon Whalen - Code contributor; W.M. Witzel - Bug hunter. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Mar 28, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.1/contributors.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/contributors.html
https://qutip.org/docs/4.1/frontmatter.html:498,Availability,avail,available,498,". . Frontmatter — QuTiP 4.1 Documentation. QuTiP: Quantum Toolbox in Python; . ; . 4.1; . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; Users Guide; API documentation; Change Log; Developers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs »; Frontmatter. Frontmatter¶. About This Documentation¶; This document contains a user guide and automatically generated API documentation for QuTiP. A PDF version of this text is available at the documentation page.; For more information see the QuTiP project web page. Author:P.D. Nation. Author:Alexander Pitchford. Author:Arne Grimsmo. Author:J.R. Johansson. Author:Chris Grenade. version:4.1. status:Released (March 10, 2017). copyright:This documentation is licensed under the Creative Commons Attribution 3.0 Unported License. Citing This Project¶; If you find this project useful, then please cite:. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP 2: A Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed",MatchSource.WIKI,docs/4.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/frontmatter.html
https://qutip.org/docs/4.1/frontmatter.html:1259,Availability,down,download,1259,"; Bibliography. QuTiP: Quantum Toolbox in Python. Docs »; Frontmatter. Frontmatter¶. About This Documentation¶; This document contains a user guide and automatically generated API documentation for QuTiP. A PDF version of this text is available at the documentation page.; For more information see the QuTiP project web page. Author:P.D. Nation. Author:Alexander Pitchford. Author:Arne Grimsmo. Author:J.R. Johansson. Author:Chris Grenade. version:4.1. status:Released (March 10, 2017). copyright:This documentation is licensed under the Creative Commons Attribution 3.0 Unported License. Citing This Project¶; If you find this project useful, then please cite:. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP 2: A Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system ",MatchSource.WIKI,docs/4.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/frontmatter.html
https://qutip.org/docs/4.1/frontmatter.html:3439,Availability,avail,available,3439,"stem dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optics, trapped ions, superconducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, excited by a limited number of quanta, that are amenable to classical simulation in a truncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy, Scipy, and Cython libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with (almost) arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantu",MatchSource.WIKI,docs/4.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/frontmatter.html
https://qutip.org/docs/4.1/frontmatter.html:4639,Deployability,release,release,4639,"thon programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy, Scipy, and Cython libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with (almost) arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Mar 28, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/frontmatter.html
https://qutip.org/docs/4.1/frontmatter.html:5184,Deployability,update,updated,5184,"thon programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy, Scipy, and Cython libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with (almost) arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Mar 28, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/frontmatter.html
https://qutip.org/docs/4.1/frontmatter.html:2790,Energy Efficiency,efficient,efficiently,2790," quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system and its environment is an essential step in understanding the dynamics of quantum systems.; In general, for all but the most basic of Hamiltonians, an analytical description of the system dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optics, trapped ions, superconducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, excited by a limited number of quanta, that are amenable to classical simulation in a truncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting l",MatchSource.WIKI,docs/4.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/frontmatter.html
https://qutip.org/docs/4.1/frontmatter.html:4075,Integrability,depend,dependence,4075,"ted by a limited number of quanta, that are amenable to classical simulation in a truncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy, Scipy, and Cython libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with (almost) arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpag",MatchSource.WIKI,docs/4.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/frontmatter.html
https://qutip.org/docs/4.1/frontmatter.html:4123,Integrability,depend,dependent,4123,"tum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy, Scipy, and Cython libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with (almost) arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. ",MatchSource.WIKI,docs/4.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/frontmatter.html
https://qutip.org/docs/4.1/frontmatter.html:1899,Modifiability,coupling,coupling,1899,"g This Project¶; If you find this project useful, then please cite:. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP 2: A Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system and its environment is an essential step in understanding the dynamics of quantum systems.; In general, for all but the most basic of Hamiltonians, an analytical description of the system dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optic",MatchSource.WIKI,docs/4.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/frontmatter.html
https://qutip.org/docs/4.1/frontmatter.html:2037,Modifiability,coupling,coupling,2037,"ys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system and its environment is an essential step in understanding the dynamics of quantum systems.; In general, for all but the most basic of Hamiltonians, an analytical description of the system dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optics, trapped ions, superconducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, ",MatchSource.WIKI,docs/4.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/frontmatter.html
https://qutip.org/docs/4.1/frontmatter.html:1992,Performance,perform,performed,1992,"ys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed on the system necessarily involves coupling to the measuring device, therefore introducing an additional source of external influence. Consequently, developing the necessary tools, both theoretical and numerical, to account for the interactions between a system and its environment is an essential step in understanding the dynamics of quantum systems.; In general, for all but the most basic of Hamiltonians, an analytical description of the system dynamics is not possible, and one must resort to numerical simulations of the equations of motion. In absence of a quantum computer, these simulations must be carried out using classical computing techniques, where the exponentially increasing dimensionality of the underlying Hilbert space severely limits the size of system that can be efficiently simulated. However, in many fields such as quantum optics, trapped ions, superconducting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, ",MatchSource.WIKI,docs/4.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/frontmatter.html
https://qutip.org/docs/4.1/frontmatter.html:4210,Performance,perform,performance,4210,"tum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy, Scipy, and Cython libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with (almost) arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. ",MatchSource.WIKI,docs/4.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/frontmatter.html
https://qutip.org/docs/4.1/frontmatter.html:3823,Testability,test,tested,3823,"ting circuit devices, and most recently nanomechanical systems, it is possible to design systems using a small number of effective oscillator and spin components, excited by a limited number of quanta, that are amenable to classical simulation in a truncated Hilbert space.; The Quantum Toolbox in Python, or QuTiP, is a fully open-source implementation of a framework written in the Python programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy, Scipy, and Cython libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with (almost) arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions ar",MatchSource.WIKI,docs/4.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/frontmatter.html
https://qutip.org/docs/4.1/frontmatter.html:405,Usability,guid,guide,405,". . Frontmatter — QuTiP 4.1 Documentation. QuTiP: Quantum Toolbox in Python; . ; . 4.1; . Frontmatter; About This Documentation; Citing This Project; Funding; About QuTiP; Contributing to QuTiP. Installation; Users Guide; API documentation; Change Log; Developers; Bibliography. QuTiP: Quantum Toolbox in Python. Docs »; Frontmatter. Frontmatter¶. About This Documentation¶; This document contains a user guide and automatically generated API documentation for QuTiP. A PDF version of this text is available at the documentation page.; For more information see the QuTiP project web page. Author:P.D. Nation. Author:Alexander Pitchford. Author:Arne Grimsmo. Author:J.R. Johansson. Author:Chris Grenade. version:4.1. status:Released (March 10, 2017). copyright:This documentation is licensed under the Creative Commons Attribution 3.0 Unported License. Citing This Project¶; If you find this project useful, then please cite:. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP 2: A Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 184, 1234 (2013).or. J. R. Johansson, P.D. Nation, and F. Nori, “QuTiP: An open-source Python framework for the dynamics of open quantum systems”, Comp. Phys. Comm. 183, 1760 (2012).which may also be download from http://arxiv.org/abs/1211.6518 or http://arxiv.org/abs/1110.0573, respectively. Funding¶; The development of QuTiP has been partially supported by the Japanese Society for the Promotion of Science Foreign Postdoctoral Fellowship Program under grants P11202 (PDN) and P11501 (JRJ). Additional funding comes from RIKEN, Kakenhi grant Nos. 2301202 (PDN), 2302501 (JRJ), and Korea University. About QuTiP¶; Every quantum system encountered in the real world is an open quantum system. For although much care is taken experimentally to eliminate the unwanted influence of external interactions, there remains, if ever so slight, a coupling between the system of interest and the external world. In addition, any measurement performed",MatchSource.WIKI,docs/4.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/frontmatter.html
https://qutip.org/docs/4.1/frontmatter.html:4372,Usability,learn,learning,4372,"thon programming language designed for simulating the open quantum dynamics for systems such as those listed above. This framework distinguishes itself from the other available software solutions in providing the following advantages:. QuTiP relies entirely on open-source software. You are free to modify and use it as you wish with no licensing fees or limitations.; QuTiP is based on the Python scripting language, providing easy to read, fast code generation without the need to compile after modification.; The numerics underlying QuTiP are time-tested algorithms that run at C-code speeds, thanks to the Numpy, Scipy, and Cython libraries, and are based on many of the same algorithms used in propriety software.; QuTiP allows for solving the dynamics of Hamiltonians with (almost) arbitrary time-dependence, including collapse operators.; Time-dependent problems can be automatically compiled into C-code at run-time for increased performance.; Takes advantage of the multiple processing cores found in essentially all modern computers.; QuTiP was designed from the start to require a minimal learning curve for those users who have experience using the popular quantum optics toolbox by Sze M. Tan.; Includes the ability to create high-quality plots, and animations, using the excellent Matplotlib package. For detailed information about new features of each release of QuTiP, see the Change Log. Contributing to QuTiP¶; We welcome anyone who is interested in helping us make QuTiP the best package for simulating quantum systems. Anyone who contributes will be duly recognized. Even small contributions are noted. See Contributors for a list of people who have helped in one way or another. If you are interested, please drop us a line at the QuTiP discussion group webpage. Next ; Previous. © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Mar 28, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.1/frontmatter.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/frontmatter.html
https://qutip.org/docs/4.1/genindex.html:20259,Deployability,update,update,20259,ntract() (in module qutip.tensor). TerminationConditions (class in qutip.control.termcond). thermal_dm() (in module qutip.states). three_level_basis() (in module qutip.three_level_atom). three_level_ops() (in module qutip.three_level_atom). tidyup() (eseries method). (Qobj method). TimeslotComputer (class in qutip.control.tslotcomp). to_choi() (in module qutip.superop_reps). to_kraus() (in module qutip.superop_reps). to_super() (in module qutip.superop_reps). toffoli() (in module qutip.qip.gates). tr() (Qobj method). tracedist() (in module qutip.metrics). trans() (Qobj method). transform() (Qobj method). trunc_neg() (Qobj method). TSlotCompUpdateAll (class in qutip.control.tslotcomp). ttmsolve() (in module qutip.nonmarkov.transfertensor). TTMSolverOptions (class in qutip.nonmarkov.transfertensor). tunneling() (in module qutip.operators). TwoModeQuadratureCorrelation (class in qutip.distributions). U. unit() (Qobj method). unitarity_check() (Dynamics method). update() (HarmonicOscillatorProbabilityFunction method). (HarmonicOscillatorWaveFunction method). (TwoModeQuadratureCorrelation method). update_ctrl_amps() (Dynamics method). update_fid_err_log() (OptimDump method). update_grad_log() (OptimDump method). update_grad_norm_log() (OptimDump method). update_psi() (TwoModeQuadratureCorrelation method). update_rho() (TwoModeQuadratureCorrelation method). V. value() (eseries method). variance() (in module qutip.expect). vector_mutation (Bloch attribute). vector_style (Bloch attribute). vector_to_operator() (in module qutip.superoperator). vector_width (Bloch attribute). version_table() (in module qutip.ipynbtools). visualize() (Distribution method). W. weighted_bipartite_matching() (in module qutip.graph). wigner() (in module qutip.wigner). wigner_covariance_matrix() (in module qutip.continuous_variables). WignerDistribution (class in qutip.distributions). writeout() (DynamicsDump method). (EvoCompDumpItem method). (OptimDump method). Z. zero_ket() (in module qutip.state,MatchSource.WIKI,docs/4.1/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/genindex.html
https://qutip.org/docs/4.1/genindex.html:21402,Deployability,update,updated,21402," (in module qutip.three_level_atom). tidyup() (eseries method). (Qobj method). TimeslotComputer (class in qutip.control.tslotcomp). to_choi() (in module qutip.superop_reps). to_kraus() (in module qutip.superop_reps). to_super() (in module qutip.superop_reps). toffoli() (in module qutip.qip.gates). tr() (Qobj method). tracedist() (in module qutip.metrics). trans() (Qobj method). transform() (Qobj method). trunc_neg() (Qobj method). TSlotCompUpdateAll (class in qutip.control.tslotcomp). ttmsolve() (in module qutip.nonmarkov.transfertensor). TTMSolverOptions (class in qutip.nonmarkov.transfertensor). tunneling() (in module qutip.operators). TwoModeQuadratureCorrelation (class in qutip.distributions). U. unit() (Qobj method). unitarity_check() (Dynamics method). update() (HarmonicOscillatorProbabilityFunction method). (HarmonicOscillatorWaveFunction method). (TwoModeQuadratureCorrelation method). update_ctrl_amps() (Dynamics method). update_fid_err_log() (OptimDump method). update_grad_log() (OptimDump method). update_grad_norm_log() (OptimDump method). update_psi() (TwoModeQuadratureCorrelation method). update_rho() (TwoModeQuadratureCorrelation method). V. value() (eseries method). variance() (in module qutip.expect). vector_mutation (Bloch attribute). vector_style (Bloch attribute). vector_to_operator() (in module qutip.superoperator). vector_width (Bloch attribute). version_table() (in module qutip.ipynbtools). visualize() (Distribution method). W. weighted_bipartite_matching() (in module qutip.graph). wigner() (in module qutip.wigner). wigner_covariance_matrix() (in module qutip.continuous_variables). WignerDistribution (class in qutip.distributions). writeout() (DynamicsDump method). (EvoCompDumpItem method). (OptimDump method). Z. zero_ket() (in module qutip.states). © Copyright 2011 and later, P.D. Nation, J.R. Johansson, A.J.G. Pitchford, C. Granade, and A.L. Grimsmo.; Last updated on Mar 28, 2017. . Built with Sphinx using a theme provided by Read the Docs. . ",MatchSource.WIKI,docs/4.1/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/genindex.html
https://qutip.org/docs/4.1/genindex.html:1743,Energy Efficiency,charge,charge,1743,s method). add_states() (Bloch method). add_timing() (Stats method). add_vectors() (Bloch method). adjacent_gates() (CircuitProcessor method). (QubitCircuit method). (SpinChain method). apply_method_params() (Optimizer method). apply_params() (Dynamics method). (FidelityComputer method). (Optimizer method). (PropagatorComputer method). (PulseGen method). (TimeslotComputer method). average_gate_fidelity() (in module qutip.metrics). B. basis() (in module qutip.states). bell_state() (in module qutip.states). berkeley() (in module qutip.qip.gates). Bloch (class in qutip.bloch). bloch_redfield_solve() (in module qutip.bloch_redfield). bloch_redfield_tensor() (in module qutip.bloch_redfield). bra() (in module qutip.states). breadth_first_search() (in module qutip.graph). brmesolve() (in module qutip.bloch_redfield). build_preconditioner() (in module qutip.steadystate). bures_angle() (in module qutip.metrics). bures_dist() (in module qutip.metrics). C. calculate() (Stats method). charge() (in module qutip.operators). check_herm() (Qobj method). check_unitarity() (DynamicsUnitary method). CircuitProcessor (class in qutip.qip.models). CircularSpinChain (class in qutip.qip.models.spinchain). clear() (Bloch method). (FidelityComputer method). (Stats method). clebsch() (in module qutip.utilities). cnot() (in module qutip.qip.gates). coherence_function_g1() (in module qutip.correlation). coherence_function_g2() (in module qutip.correlation). coherent() (in module qutip.states). coherent_dm() (in module qutip.states). combine_dyn_gen() (Dynamics method). commutator() (in module qutip.operators). compare_amps() (TSlotCompUpdateAll method). composite() (in module qutip.tensor). compute_evolution() (Dynamics method). compute_fid_err_grad() (FidCompTraceDiff method). (FidCompTraceDiffApprox method). compute_fid_grad() (FidCompUnitary method). concurrence() (in module qutip.entropy). configure() (HEOMSolver method). (HSolverDL method). conj() (Qobj method). controlled_gate() (in module,MatchSource.WIKI,docs/4.1/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/genindex.html
https://qutip.org/docs/4.1/genindex.html:2653,Modifiability,config,configure,2653,s). bures_dist() (in module qutip.metrics). C. calculate() (Stats method). charge() (in module qutip.operators). check_herm() (Qobj method). check_unitarity() (DynamicsUnitary method). CircuitProcessor (class in qutip.qip.models). CircularSpinChain (class in qutip.qip.models.spinchain). clear() (Bloch method). (FidelityComputer method). (Stats method). clebsch() (in module qutip.utilities). cnot() (in module qutip.qip.gates). coherence_function_g1() (in module qutip.correlation). coherence_function_g2() (in module qutip.correlation). coherent() (in module qutip.states). coherent_dm() (in module qutip.states). combine_dyn_gen() (Dynamics method). commutator() (in module qutip.operators). compare_amps() (TSlotCompUpdateAll method). composite() (in module qutip.tensor). compute_evolution() (Dynamics method). compute_fid_err_grad() (FidCompTraceDiff method). (FidCompTraceDiffApprox method). compute_fid_grad() (FidCompUnitary method). concurrence() (in module qutip.entropy). configure() (HEOMSolver method). (HSolverDL method). conj() (Qobj method). controlled_gate() (in module qutip.qip.gates). convert_unit() (in module qutip.utilities). copy() (Qobj method). correlation() (in module qutip.correlation). correlation_2op_1t() (in module qutip.correlation). correlation_2op_2t() (in module qutip.correlation). correlation_3op_1t() (in module qutip.correlation). correlation_3op_2t() (in module qutip.correlation). correlation_4op_1t() (in module qutip.correlation). correlation_4op_2t() (in module qutip.correlation). correlation_matrix() (in module qutip.continuous_variables). correlation_matrix_field() (in module qutip.continuous_variables). correlation_matrix_quadrature() (in module qutip.continuous_variables). correlation_ss() (in module qutip.correlation). cosm() (Qobj method). covariance_matrix() (in module qutip.continuous_variables). cphase() (in module qutip.qip.gates). create() (in module qutip.operators). create_dump_dir() (Dump method). create_new_stats() (HEOMSolver m,MatchSource.WIKI,docs/4.1/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/genindex.html
https://qutip.org/docs/4.1/genindex.html:2612,Performance,concurren,concurrence,2612,e). bures_angle() (in module qutip.metrics). bures_dist() (in module qutip.metrics). C. calculate() (Stats method). charge() (in module qutip.operators). check_herm() (Qobj method). check_unitarity() (DynamicsUnitary method). CircuitProcessor (class in qutip.qip.models). CircularSpinChain (class in qutip.qip.models.spinchain). clear() (Bloch method). (FidelityComputer method). (Stats method). clebsch() (in module qutip.utilities). cnot() (in module qutip.qip.gates). coherence_function_g1() (in module qutip.correlation). coherence_function_g2() (in module qutip.correlation). coherent() (in module qutip.states). coherent_dm() (in module qutip.states). combine_dyn_gen() (Dynamics method). commutator() (in module qutip.operators). compare_amps() (TSlotCompUpdateAll method). composite() (in module qutip.tensor). compute_evolution() (Dynamics method). compute_fid_err_grad() (FidCompTraceDiff method). (FidCompTraceDiffApprox method). compute_fid_grad() (FidCompUnitary method). concurrence() (in module qutip.entropy). configure() (HEOMSolver method). (HSolverDL method). conj() (Qobj method). controlled_gate() (in module qutip.qip.gates). convert_unit() (in module qutip.utilities). copy() (Qobj method). correlation() (in module qutip.correlation). correlation_2op_1t() (in module qutip.correlation). correlation_2op_2t() (in module qutip.correlation). correlation_3op_1t() (in module qutip.correlation). correlation_3op_2t() (in module qutip.correlation). correlation_4op_1t() (in module qutip.correlation). correlation_4op_2t() (in module qutip.correlation). correlation_matrix() (in module qutip.continuous_variables). correlation_matrix_field() (in module qutip.continuous_variables). correlation_matrix_quadrature() (in module qutip.continuous_variables). correlation_ss() (in module qutip.correlation). cosm() (Qobj method). covariance_matrix() (in module qutip.continuous_variables). cphase() (in module qutip.qip.gates). create() (in module qutip.operators). create_dump_dir() (Dump,MatchSource.WIKI,docs/4.1/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/genindex.html
https://qutip.org/docs/4.1/genindex.html:10652,Performance,optimiz,optimizer,10652,ix_histogram_complex() (in module qutip.visualization). maximally_mixed_dm() (in module qutip.states). maximum_bipartite_matching() (in module qutip.graph). mcsolve() (in module qutip.mcsolve). MemoryCascade (class in qutip.nonmarkov.memorycascade). mesolve() (in module qutip.mesolve). momentum() (in module qutip.operators). N. n_thermal() (in module qutip.utilities). norm() (Qobj method). normalize_gradient_PSU() (FidCompUnitary method). normalize_gradient_SU() (FidCompUnitary method). normalize_PSU() (FidCompUnitary method). normalize_SU() (FidCompUnitary method). num() (in module qutip.operators). num_ctrls (Dynamics attribute). O. ode2es() (in module qutip.essolve). onto_evo (Dynamics attribute). onwd_evo (Dynamics attribute). operator_to_vector() (in module qutip.superoperator). opt_pulse_crab() (in module qutip.control.pulseoptim). opt_pulse_crab_unitary() (in module qutip.control.pulseoptim). OptimDump (class in qutip.control.dump). OptimIterSummary (class in qutip.control.optimizer). optimize_circuit() (CircuitProcessor method). optimize_pulse() (in module qutip.control.pulseoptim). optimize_pulse_unitary() (in module qutip.control.pulseoptim). Optimizer (class in qutip.control.optimizer). OptimizerBFGS (class in qutip.control.optimizer). OptimizerCrab (class in qutip.control.optimizer). OptimizerCrabFmin (class in qutip.control.optimizer). OptimizerLBFGSB (class in qutip.control.optimizer). OptimResult (class in qutip.control.optimresult). Options (class in qutip.solver). orbital() (in module qutip.orbital). outfieldcorr() (MemoryCascade method). outfieldpropagator() (MemoryCascade method). overlap() (Qobj method). P. parallel_map() (in module qutip.ipynbtools). (in module qutip.parallel). parfor() (in module qutip.ipynbtools). (in module qutip.parallel). partial_transpose() (in module qutip.partial_transpose). permute() (Qobj method). phase() (in module qutip.operators). phase_basis() (in module qutip.states). phasegate() (in module qutip.qip.gates). plot_e,MatchSource.WIKI,docs/4.1/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/genindex.html
https://qutip.org/docs/4.1/genindex.html:10862,Performance,optimiz,optimizer,10862,lass in qutip.nonmarkov.memorycascade). mesolve() (in module qutip.mesolve). momentum() (in module qutip.operators). N. n_thermal() (in module qutip.utilities). norm() (Qobj method). normalize_gradient_PSU() (FidCompUnitary method). normalize_gradient_SU() (FidCompUnitary method). normalize_PSU() (FidCompUnitary method). normalize_SU() (FidCompUnitary method). num() (in module qutip.operators). num_ctrls (Dynamics attribute). O. ode2es() (in module qutip.essolve). onto_evo (Dynamics attribute). onwd_evo (Dynamics attribute). operator_to_vector() (in module qutip.superoperator). opt_pulse_crab() (in module qutip.control.pulseoptim). opt_pulse_crab_unitary() (in module qutip.control.pulseoptim). OptimDump (class in qutip.control.dump). OptimIterSummary (class in qutip.control.optimizer). optimize_circuit() (CircuitProcessor method). optimize_pulse() (in module qutip.control.pulseoptim). optimize_pulse_unitary() (in module qutip.control.pulseoptim). Optimizer (class in qutip.control.optimizer). OptimizerBFGS (class in qutip.control.optimizer). OptimizerCrab (class in qutip.control.optimizer). OptimizerCrabFmin (class in qutip.control.optimizer). OptimizerLBFGSB (class in qutip.control.optimizer). OptimResult (class in qutip.control.optimresult). Options (class in qutip.solver). orbital() (in module qutip.orbital). outfieldcorr() (MemoryCascade method). outfieldpropagator() (MemoryCascade method). overlap() (Qobj method). P. parallel_map() (in module qutip.ipynbtools). (in module qutip.parallel). parfor() (in module qutip.ipynbtools). (in module qutip.parallel). partial_transpose() (in module qutip.partial_transpose). permute() (Qobj method). phase() (in module qutip.operators). phase_basis() (in module qutip.states). phasegate() (in module qutip.qip.gates). plot_energy_levels() (in module qutip.visualization). plot_expectation_values() (in module qutip.visualization). plot_fock_distribution() (in module qutip.visualization). plot_pulses() (CircuitProcessor method). plot,MatchSource.WIKI,docs/4.1/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/genindex.html
https://qutip.org/docs/4.1/genindex.html:10912,Performance,optimiz,optimizer,10912,(in module qutip.mesolve). momentum() (in module qutip.operators). N. n_thermal() (in module qutip.utilities). norm() (Qobj method). normalize_gradient_PSU() (FidCompUnitary method). normalize_gradient_SU() (FidCompUnitary method). normalize_PSU() (FidCompUnitary method). normalize_SU() (FidCompUnitary method). num() (in module qutip.operators). num_ctrls (Dynamics attribute). O. ode2es() (in module qutip.essolve). onto_evo (Dynamics attribute). onwd_evo (Dynamics attribute). operator_to_vector() (in module qutip.superoperator). opt_pulse_crab() (in module qutip.control.pulseoptim). opt_pulse_crab_unitary() (in module qutip.control.pulseoptim). OptimDump (class in qutip.control.dump). OptimIterSummary (class in qutip.control.optimizer). optimize_circuit() (CircuitProcessor method). optimize_pulse() (in module qutip.control.pulseoptim). optimize_pulse_unitary() (in module qutip.control.pulseoptim). Optimizer (class in qutip.control.optimizer). OptimizerBFGS (class in qutip.control.optimizer). OptimizerCrab (class in qutip.control.optimizer). OptimizerCrabFmin (class in qutip.control.optimizer). OptimizerLBFGSB (class in qutip.control.optimizer). OptimResult (class in qutip.control.optimresult). Options (class in qutip.solver). orbital() (in module qutip.orbital). outfieldcorr() (MemoryCascade method). outfieldpropagator() (MemoryCascade method). overlap() (Qobj method). P. parallel_map() (in module qutip.ipynbtools). (in module qutip.parallel). parfor() (in module qutip.ipynbtools). (in module qutip.parallel). partial_transpose() (in module qutip.partial_transpose). permute() (Qobj method). phase() (in module qutip.operators). phase_basis() (in module qutip.states). phasegate() (in module qutip.qip.gates). plot_energy_levels() (in module qutip.visualization). plot_expectation_values() (in module qutip.visualization). plot_fock_distribution() (in module qutip.visualization). plot_pulses() (CircuitProcessor method). plot_qubism() (in module qutip.visualization). plot_sc,MatchSource.WIKI,docs/4.1/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/genindex.html
https://qutip.org/docs/4.1/genindex.html:10962,Performance,optimiz,optimizer,10962,utip.operators). N. n_thermal() (in module qutip.utilities). norm() (Qobj method). normalize_gradient_PSU() (FidCompUnitary method). normalize_gradient_SU() (FidCompUnitary method). normalize_PSU() (FidCompUnitary method). normalize_SU() (FidCompUnitary method). num() (in module qutip.operators). num_ctrls (Dynamics attribute). O. ode2es() (in module qutip.essolve). onto_evo (Dynamics attribute). onwd_evo (Dynamics attribute). operator_to_vector() (in module qutip.superoperator). opt_pulse_crab() (in module qutip.control.pulseoptim). opt_pulse_crab_unitary() (in module qutip.control.pulseoptim). OptimDump (class in qutip.control.dump). OptimIterSummary (class in qutip.control.optimizer). optimize_circuit() (CircuitProcessor method). optimize_pulse() (in module qutip.control.pulseoptim). optimize_pulse_unitary() (in module qutip.control.pulseoptim). Optimizer (class in qutip.control.optimizer). OptimizerBFGS (class in qutip.control.optimizer). OptimizerCrab (class in qutip.control.optimizer). OptimizerCrabFmin (class in qutip.control.optimizer). OptimizerLBFGSB (class in qutip.control.optimizer). OptimResult (class in qutip.control.optimresult). Options (class in qutip.solver). orbital() (in module qutip.orbital). outfieldcorr() (MemoryCascade method). outfieldpropagator() (MemoryCascade method). overlap() (Qobj method). P. parallel_map() (in module qutip.ipynbtools). (in module qutip.parallel). parfor() (in module qutip.ipynbtools). (in module qutip.parallel). partial_transpose() (in module qutip.partial_transpose). permute() (Qobj method). phase() (in module qutip.operators). phase_basis() (in module qutip.states). phasegate() (in module qutip.qip.gates). plot_energy_levels() (in module qutip.visualization). plot_expectation_values() (in module qutip.visualization). plot_fock_distribution() (in module qutip.visualization). plot_pulses() (CircuitProcessor method). plot_qubism() (in module qutip.visualization). plot_schmidt() (in module qutip.visualization). plot_spin,MatchSource.WIKI,docs/4.1/genindex.html,qutip,qutip,v5.0.4,https://qutip.org,https://qutip.org/docs/4.1/genindex.html
