id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/doc/v632/classRooRealSumPdf.html:47527,Integrability,depend,depend,47527,"Change=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:52904,Integrability,message,message,52904,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:53445,Integrability,message,message,53445,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:54435,Integrability,message,message,54435,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:57529,Integrability,message,message,57529,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption s",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:57902,Integrability,message,message,57902," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char *",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:59861,Integrability,message,messages,59861,"n'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged ev",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:59998,Integrability,integrat,integration,59998,"  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions in",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:60313,Integrability,message,message,60313,"torConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:60404,Integrability,message,messages,60404,"torConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:62733,Integrability,integrat,integration,62733,;  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooListProxy _coefList;  List of coefficients. ;  ; bool _doFloor = false;  Introduce floor at zero in pdf. ;  ; bool _extended;  Allow use as extended p.d.f. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ! The integration cache manager ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plot,MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:63542,Integrability,integrat,integration,63542,or = false;  Introduce floor at zero in pdf. ;  ; bool _extended;  Allow use as extended p.d.f. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ! The integration cache manager ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ,MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:70497,Integrability,rout,routine,70497,", kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  The cache manager. ;  ; virtual bool syncNormalizatio",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:70663,Integrability,rout,routine,70663,"kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  The cache manager. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization obser",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:72845,Integrability,integrat,integrated,72845,"ttachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:72903,Integrability,integrat,integration,72903,"ttachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:75978,Integrability,wrap,wrapper,75978,"bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:81497,Integrability,integrat,integrations,81497,"nts) . Definition at line 129 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [4/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; func1, . RooAbsReal & ; func2, . RooAbsReal & ; coef1 . ). Construct p.d.f consisting of \( \mathrm{coef}_1 * \mathrm{func}_1 + (1-\mathrm{coef}_1) * \mathrm{func}_2 \). ; The input coefficients and functions are allowed to be negative but the resulting sum is not, which is enforced at runtime. ; Definition at line 91 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [5/5]. RooRealSumPdf::RooRealSumPdf ; (; const RooRealSumPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 186 of file RooRealSumPdf.cxx. Member Function Documentation. ◆ analyticalIntegralWN() [1/2]. double RooRealSumPdf::analyticalIntegralWN ; (; Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Implement analytical integrations by deferring integration of component functions to integrators of components. ; Reimplemented from RooAbsPdf.; Definition at line 444 of file RooRealSumPdf.cxx. ◆ analyticalIntegralWN() [2/2]. double RooRealSumPdf::analyticalIntegralWN ; (; RooAbsReal const & ; caller, . RooObjCacheManager & ; normIntMgr, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName, . bool ; hasWarnedBefore . ). staticprivate . Definition at line 449 of file RooRealSumPdf.cxx. ◆ binBoundaries() [1/2]. std::list< double > * RooRealSumPdf::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented from RooAbsReal.; Definition at line 561 of file RooRealSumPdf.cxx. ◆",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:81523,Integrability,integrat,integration,81523,"nts) . Definition at line 129 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [4/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; func1, . RooAbsReal & ; func2, . RooAbsReal & ; coef1 . ). Construct p.d.f consisting of \( \mathrm{coef}_1 * \mathrm{func}_1 + (1-\mathrm{coef}_1) * \mathrm{func}_2 \). ; The input coefficients and functions are allowed to be negative but the resulting sum is not, which is enforced at runtime. ; Definition at line 91 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [5/5]. RooRealSumPdf::RooRealSumPdf ; (; const RooRealSumPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 186 of file RooRealSumPdf.cxx. Member Function Documentation. ◆ analyticalIntegralWN() [1/2]. double RooRealSumPdf::analyticalIntegralWN ; (; Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Implement analytical integrations by deferring integration of component functions to integrators of components. ; Reimplemented from RooAbsPdf.; Definition at line 444 of file RooRealSumPdf.cxx. ◆ analyticalIntegralWN() [2/2]. double RooRealSumPdf::analyticalIntegralWN ; (; RooAbsReal const & ; caller, . RooObjCacheManager & ; normIntMgr, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName, . bool ; hasWarnedBefore . ). staticprivate . Definition at line 449 of file RooRealSumPdf.cxx. ◆ binBoundaries() [1/2]. std::list< double > * RooRealSumPdf::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented from RooAbsReal.; Definition at line 561 of file RooRealSumPdf.cxx. ◆",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:81561,Integrability,integrat,integrators,81561,"nts) . Definition at line 129 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [4/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; func1, . RooAbsReal & ; func2, . RooAbsReal & ; coef1 . ). Construct p.d.f consisting of \( \mathrm{coef}_1 * \mathrm{func}_1 + (1-\mathrm{coef}_1) * \mathrm{func}_2 \). ; The input coefficients and functions are allowed to be negative but the resulting sum is not, which is enforced at runtime. ; Definition at line 91 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [5/5]. RooRealSumPdf::RooRealSumPdf ; (; const RooRealSumPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 186 of file RooRealSumPdf.cxx. Member Function Documentation. ◆ analyticalIntegralWN() [1/2]. double RooRealSumPdf::analyticalIntegralWN ; (; Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Implement analytical integrations by deferring integration of component functions to integrators of components. ; Reimplemented from RooAbsPdf.; Definition at line 444 of file RooRealSumPdf.cxx. ◆ analyticalIntegralWN() [2/2]. double RooRealSumPdf::analyticalIntegralWN ; (; RooAbsReal const & ; caller, . RooObjCacheManager & ; normIntMgr, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName, . bool ; hasWarnedBefore . ). staticprivate . Definition at line 449 of file RooRealSumPdf.cxx. ◆ binBoundaries() [1/2]. std::list< double > * RooRealSumPdf::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented from RooAbsReal.; Definition at line 561 of file RooRealSumPdf.cxx. ◆",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:88732,Integrability,depend,depend,88732,"dled internally. ; Reimplemented from RooAbsReal.; Definition at line 382 of file RooRealSumPdf.cxx. ◆ getFloor(). bool RooRealSumPdf::getFloor ; (; ); const. inline . Definition at line 63 of file RooRealSumPdf.h. ◆ getFloorGlobal(). static bool RooRealSumPdf::getFloorGlobal ; (; ). inlinestatic . Definition at line 65 of file RooRealSumPdf.h. ◆ initializeFuncsAndCoefs(). void RooRealSumPdf::initializeFuncsAndCoefs ; (; RooAbsReal const & ; caller, . const RooArgList & ; inFuncList, . const RooArgList & ; inCoefList, . RooArgList & ; funcList, . RooArgList & ; coefList . ). staticprivate . Definition at line 139 of file RooRealSumPdf.cxx. ◆ IsA(). TClass * RooRealSumPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 138 of file RooRealSumPdf.h. ◆ isBinnedDistribution() [1/2]. bool RooRealSumPdf::isBinnedDistribution ; (; const RooArgSet & ; obs); const. overridevirtual . Check if all components that depend on obs are binned. ; Reimplemented from RooAbsReal.; Definition at line 610 of file RooRealSumPdf.cxx. ◆ isBinnedDistribution() [2/2]. bool RooRealSumPdf::isBinnedDistribution ; (; RooArgList const & ; funcList, . const RooArgSet & ; obs . ). staticprivate . Definition at line 616 of file RooRealSumPdf.cxx. ◆ plotSamplingHint() [1/2]. std::list< double > * RooRealSumPdf::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented from RooAbsReal.; Definition at line 632 of file RooRealSumPdf.cxx. ◆ plotSamplingHint() [2/2]. std::list< double > * RooRealSumPdf::plotSamplingHint ; (; RooArgList const & ; funcList, . RooAbsRealLValue",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:94306,Integrability,integrat,integration,94306,"f.cxx. ◆ translateImpl(). std::string RooRealSumPdf::translateImpl ; (; RooFit::Detail::CodeSquashContext & ; ctx, . RooAbsArg const * ; klass, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . bool ; normalize = false . ). staticprivate . Definition at line 302 of file RooRealSumPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddition. friend class RooAddition. friend . Definition at line 99 of file RooRealSumPdf.h. ◆ RooAddPdf. friend class RooAddPdf. friend . Definition at line 98 of file RooRealSumPdf.h. ◆ RooRealSumFunc. friend class RooRealSumFunc. friend . Definition at line 100 of file RooRealSumPdf.h. Member Data Documentation. ◆ _coefList. RooListProxy RooRealSumPdf::_coefList. protected . List of coefficients. ; Definition at line 89 of file RooRealSumPdf.h. ◆ _doFloor. bool RooRealSumPdf::_doFloor = false. protected . Introduce floor at zero in pdf. ; Definition at line 92 of file RooRealSumPdf.h. ◆ _doFloorGlobal. bool RooRealSumPdf::_doFloorGlobal = false. staticprotected . Global flag for introducing floor at zero in pdf. ; Definition at line 94 of file RooRealSumPdf.h. ◆ _extended. bool RooRealSumPdf::_extended. protected . Allow use as extended p.d.f. ; Definition at line 90 of file RooRealSumPdf.h. ◆ _funcList. RooListProxy RooRealSumPdf::_funcList. protected . List of component FUNCs. ; Definition at line 88 of file RooRealSumPdf.h. ◆ _haveWarned. bool RooRealSumPdf::_haveWarned {false}. mutableprotected . ! ; Definition at line 93 of file RooRealSumPdf.h. ◆ _normIntMgr. RooObjCacheManager RooRealSumPdf::_normIntMgr. mutableprotected . ! The integration cache manager ; Definition at line 85 of file RooRealSumPdf.h. Libraries for RooRealSumPdf:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooRealSumPdf.h; roofit/roofitcore/src/RooRealSumPdf.cxx. RooRealSumPdf. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:10:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:1338,Modifiability,extend,extended,1338,"Static Private Member Functions |; Friends |; List of all members ; RooRealSumPdf Class ReferenceRooFit » RooFit Core. ; Implements a PDF constructed from a sum of functions: . \[; \mathrm{PDF}(x) = \frac{ \sum_{i=1}^{n-1} \mathrm{coef}_i * \mathrm{func}_i(x) + \left[ 1 - \sum_{i=1}^{n-1} \mathrm{coef}_i \right] * \mathrm{func}_n(x) }; {\sum_{i=1}^{n-1} \mathrm{coef}_i * \int \mathrm{func}_i(x)dx + \left[ 1 - \sum_{i=1}^{n-1} \mathrm{coef}_i \right] * \int \mathrm{func}_n(x) dx }; \]. where \(\mathrm{coef}_i\) and \(\mathrm{func}_i\) are RooAbsReal objects, and \( x \) is the collection of dependents. In the present version \(\mathrm{coef}_i\) may not depend on \( x \), but this limitation could be removed should the need arise.; If the number of coefficients is one less than the number of functions, the PDF is assumed to be normalised. Due to this additional constraint, \(\mathrm{coef}_n\) is computed from the other coefficients. Extending the PDF; If an \( n^\mathrm{th} \) coefficient is provided, the PDF can be used as an extended PDF, i.e. the total number of events will be measured in addition to the fractions of the various functions. This requires setting the last argument of the constructor to true. NoteFor the RooAddPdf, the extension happens automatically. Difference to RooAddPdf / RooRealSumFunc. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Definition at line 24 of file RooRealSumPdf.h. Classes; class  CacheElem;  . Public Member Functions;  RooRealSumPdf ();  Default constructor coverity[UNINIT_CTOR]. ;  ;  RooRealSumPdf (const char *name, const char *title);  Constructor with name and title. ;  ;  RooRealSumPdf (const char *name, const cha",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:1878,Modifiability,extend,extended,1878,"cts, and \( x \) is the collection of dependents. In the present version \(\mathrm{coef}_i\) may not depend on \( x \), but this limitation could be removed should the need arise.; If the number of coefficients is one less than the number of functions, the PDF is assumed to be normalised. Due to this additional constraint, \(\mathrm{coef}_n\) is computed from the other coefficients. Extending the PDF; If an \( n^\mathrm{th} \) coefficient is provided, the PDF can be used as an extended PDF, i.e. the total number of events will be measured in addition to the fractions of the various functions. This requires setting the last argument of the constructor to true. NoteFor the RooAddPdf, the extension happens automatically. Difference to RooAddPdf / RooRealSumFunc. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Definition at line 24 of file RooRealSumPdf.h. Classes; class  CacheElem;  . Public Member Functions;  RooRealSumPdf ();  Default constructor coverity[UNINIT_CTOR]. ;  ;  RooRealSumPdf (const char *name, const char *title);  Constructor with name and title. ;  ;  RooRealSumPdf (const char *name, const char *title, const RooArgList &funcList, const RooArgList &coefList, bool extended=false);  Constructor for a PDF from a list of functions and coefficients. ;  ;  RooRealSumPdf (const char *name, const char *title, RooAbsReal &func1, RooAbsReal &func2, RooAbsReal &coef1);  Construct p.d.f consisting of \( \mathrm{coef}_1 * \mathrm{func}_1 + (1-\mathrm{coef}_1) * \mathrm{func}_2 \). ;  ;  RooRealSumPdf (const RooRealSumPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:2369,Modifiability,extend,extended,2369,", i.e. the total number of events will be measured in addition to the fractions of the various functions. This requires setting the last argument of the constructor to true. NoteFor the RooAddPdf, the extension happens automatically. Difference to RooAddPdf / RooRealSumFunc. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Definition at line 24 of file RooRealSumPdf.h. Classes; class  CacheElem;  . Public Member Functions;  RooRealSumPdf ();  Default constructor coverity[UNINIT_CTOR]. ;  ;  RooRealSumPdf (const char *name, const char *title);  Constructor with name and title. ;  ;  RooRealSumPdf (const char *name, const char *title, const RooArgList &funcList, const RooArgList &coefList, bool extended=false);  Constructor for a PDF from a list of functions and coefficients. ;  ;  RooRealSumPdf (const char *name, const char *title, RooAbsReal &func1, RooAbsReal &func2, RooAbsReal &coef1);  Construct p.d.f consisting of \( \mathrm{coef}_1 * \mathrm{func}_1 + (1-\mathrm{coef}_1) * \mathrm{func}_2 \). ;  ;  RooRealSumPdf (const RooRealSumPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implement analytical integrations by deferring integration of component functions to integrators of components. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; CacheMode canNodeBeCached () const override;  ; bool checkObservables (const RooArgSet *nset) const override;  Check if FUNC is valid for given normalization set. ;  ; TObject * cl",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:4128,Modifiability,extend,extended,4128," bin boundaries if this distribution is binned in obs. ;  ; CacheMode canNodeBeCached () const override;  ; bool checkObservables (const RooArgSet *nset) const override;  Check if FUNC is valid for given normalization set. ;  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefList () const;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; double evaluate () const override;  Calculate the current value. ;  ; double expectedEvents (const RooArgSet *nset) const override;  Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; bool forceAnalyticalInt (const RooAbsArg &arg) const override;  ; const RooArgList & funcList () const;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Advertise that all integrals can be handled internally. ;  ; bool getFloor () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Check if all components that depend on obs are binned. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:4215,Modifiability,extend,extendMode,4215,"gSet *nset) const override;  Check if FUNC is valid for given normalization set. ;  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefList () const;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; double evaluate () const override;  Calculate the current value. ;  ; double expectedEvents (const RooArgSet *nset) const override;  Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; bool forceAnalyticalInt (const RooAbsArg &arg) const override;  ; const RooArgList & funcList () const;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Advertise that all integrals can be handled internally. ;  ; bool getFloor () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Check if all components that depend on obs are binned. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealSumPdf to more intuitively reflect the contents of the product operator construction. ;  ; bool selfNormalized () con",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:4280,Modifiability,extend,extended,4280,"gSet *nset) const override;  Check if FUNC is valid for given normalization set. ;  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefList () const;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; double evaluate () const override;  Calculate the current value. ;  ; double expectedEvents (const RooArgSet *nset) const override;  Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; bool forceAnalyticalInt (const RooAbsArg &arg) const override;  ; const RooArgList & funcList () const;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Advertise that all integrals can be handled internally. ;  ; bool getFloor () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Check if all components that depend on obs are binned. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealSumPdf to more intuitively reflect the contents of the product operator construction. ;  ; bool selfNormalized () con",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:5894,Modifiability,inherit,inherited,5894,"erface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealSumPdf to more intuitively reflect the contents of the product operator construction. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components of a RooRealSumPdf with cache-and-track. ;  ; void setFloor (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can provide extended likelihood term. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooArgSet &nset=RooArgSet());  Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset. ;  ; RooFit::OwningPtr< RooAbs",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:6646,Modifiability,extend,extended,6646,"r &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can provide extended likelihood term. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooArgSet &nset=RooArgSet());  Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; Roo",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:7873,Modifiability,extend,extended,7873,"et &nset=RooArgSet());  Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genCon",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:7906,Modifiability,extend,extendedTerm,7906,"ooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context fr",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:8019,Modifiability,extend,extendedTerm,8019,"dArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:8140,Modifiability,extend,extended,8140,"ntegral of the function over one or more observables listed in iset. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new d",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:8308,Modifiability,extend,extendedTerm,8308,"g(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool ra",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:8406,Modifiability,extend,extended,8406,"g(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool ra",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:9228,Modifiability,variab,variables,9228,"=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;  Generate a new dataset using a prototype dataset as a model, with values of the variables in whatVars sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, double nEvents=0, bool verbose=false, bool autoBinned=true, const char *binnedTag="""", bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:9562,Modifiability,variab,variables,9562,"xpect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;  Generate a new dataset using a prototype dataset as a model, with values of the variables in whatVars sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, double nEvents=0, bool verbose=false, bool autoBinned=true, const char *binnedTag="""", bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={});  See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooDataSet > generate (GenSpec &) const;  Generate according to GenSpec obtained from prepareMultiGen(). ;  ; virtual RooFit::Ownin",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:9805,Modifiability,extend,extended,9805,"ArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;  Generate a new dataset using a prototype dataset as a model, with values of the variables in whatVars sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, double nEvents=0, bool verbose=false, bool autoBinned=true, const char *binnedTag="""", bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={});  See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooDataSet > generate (GenSpec &) const;  Generate according to GenSpec obtained from prepareMultiGen(). ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}) const;  Generate a new dataset containing the specified variables with events sampled from our distributio",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:9877,Modifiability,variab,variables,9877,"ArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;  Generate a new dataset using a prototype dataset as a model, with values of the variables in whatVars sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, double nEvents=0, bool verbose=false, bool autoBinned=true, const char *binnedTag="""", bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={});  See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooDataSet > generate (GenSpec &) const;  Generate according to GenSpec obtained from prepareMultiGen(). ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}) const;  Generate a new dataset containing the specified variables with events sampled from our distributio",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:10722,Modifiability,variab,variables,10722,"our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, double nEvents=0, bool verbose=false, bool autoBinned=true, const char *binnedTag="""", bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={});  See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooDataSet > generate (GenSpec &) const;  Generate according to GenSpec obtained from prepareMultiGen(). ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) const;  As RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&) const. ;  ; virtual void generateEvent (Int_t code);  Interface for generation of an event using the algorithm corresponding to the specified code. ;  ; virtual RooFit::O",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:10910,Modifiability,extend,extended,10910,"ed from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={});  See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooDataSet > generate (GenSpec &) const;  Generate according to GenSpec obtained from prepareMultiGen(). ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) const;  As RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&) const. ;  ; virtual void generateEvent (Int_t code);  Interface for generation of an event using the algorithm corresponding to the specified code. ;  ; virtual RooFit::OwningPtr< RooDataSet > generateSimGlobal (const RooArgSet &whatVars, Int_t nEvents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true, bool re",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:10982,Modifiability,variab,variables,10982,"ed from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={});  See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooDataSet > generate (GenSpec &) const;  Generate according to GenSpec obtained from prepareMultiGen(). ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) const;  As RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&) const. ;  ; virtual void generateEvent (Int_t code);  Interface for generation of an event using the algorithm corresponding to the specified code. ;  ; virtual RooFit::OwningPtr< RooDataSet > generateSimGlobal (const RooArgSet &whatVars, Int_t nEvents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true, bool re",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:12533,Modifiability,config,configuration,12533,"n of an event using the algorithm corresponding to the specified code. ;  ; virtual RooFit::OwningPtr< RooDataSet > generateSimGlobal (const RooArgSet &whatVars, Int_t nEvents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true, bool removeConstraintsFromPdf=false) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet &, bool, bool=false) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over obser",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:14035,Modifiability,extend,extended,14035,"(const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:15148,Modifiability,config,configuration,15148,"normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverr",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:15809,Modifiability,config,configuration,15809,"onst. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *u",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:15905,Modifiability,config,config,15905,"* prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *u",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:15929,Modifiability,config,configuration,15929,"* prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *u",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:15975,Modifiability,config,configuration,15975,"* prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *u",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:16367,Modifiability,config,configuration,16367,"nt="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooA",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:16507,Modifiability,config,configuration,16507,"e;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with give",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:16637,Modifiability,inherit,inherited,16637," error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) t",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:17668,Modifiability,adapt,adaptor,17668,"ctions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:17715,Modifiability,variab,variables,17715,"ctions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:19395,Modifiability,variab,variable,19395,"2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooLinkedList &cmdList);  Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create a \( \chi^2 \) variable from a histogram and this function. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataHist &data, const RooLinkedList &cmdList);  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataSet &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create a \( \chi^2 \) from a series of x and y values stored in a dataset. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataSet &data, const RooLinkedList &cmdList);  See RooAbsReal::createChi2(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooAbsArg > createFundamental (const char *newname=",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:21076,Modifiability,variab,variables,21076,"inkedList &cmdList);  See RooAbsReal::createChi2(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooAbsArg > createFundamental (const char *newname=nullptr) const override;  Create a RooRealVar fundamental object with our properties. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nu",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:21839,Modifiability,config,configuration,21839,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:22800,Modifiability,config,configuration,22800,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:26956,Modifiability,config,configuration,26956,"et &addNormSet=RooArgSet(), bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:27083,Modifiability,config,configuration,27083,"e headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const overr",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:27346,Modifiability,variab,variable,27346," the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation e",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:27595,Modifiability,variab,variable,27595,"th given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; vi",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:30347,Modifiability,config,configuration,30347,"st RooArgSet &sliceSet, Option_t *drawOptions=""L"", double scaleFactor=1.0, ScaleType stype=Relative, const RooAbsData *projData=nullptr) const;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:30444,Modifiability,config,config,30444,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:30479,Modifiability,config,configuration,30479,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:30524,Modifiability,config,configuration,30524,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:30697,Modifiability,variab,variable,30697,"es for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean a",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:30945,Modifiability,config,configuration,30945,"ing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedC",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:31086,Modifiability,config,configuration,31086,"mmy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:31338,Modifiability,inherit,inherited,31338,"ool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollectio",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:32407,Modifiability,variab,variable,32407," ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPri",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:32442,Modifiability,variab,variables,32442," ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPri",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:32614,Modifiability,variab,variable,32614," transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether w",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:32649,Modifiability,variab,variables,32649," transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether w",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:35313,Modifiability,variab,variable,35313," bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable lis",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:36230,Modifiability,variab,variable,36230,"oArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; virtual bool getParameters (const RooArgSet *observables, RooArgSet &outputSet, bool stripDisconnected=true) const;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:37423,Modifiability,variab,variables,37423," set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; virtual bool getParameters (const RooArgSet *observables, RooArgSet &outputSet, bool stripDisconnected=true) const;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (const Text_t *key) const;  Get string attribute mapped under key 'key'. ;  ; bool getTransientAttribute (const Text_t *name) const;  Check if a named attribute is set. ;  ; RooFit::OwningPtr< RooArgSet > getVariables (bool stripDisconnected=true) const;  Return RooArgSet with all variables (tree leaf nodes of expression tree) ;  ; void graphVizTree (const char *fileName, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Create a GraphViz .dot file visualizing the expression tree headed by this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:49895,Modifiability,inherit,inherited,49895,"const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () cons",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:51441,Modifiability,inherit,inherited,51441,"ects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:52534,Modifiability,inherit,inheritance,52534,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:54533,Modifiability,inherit,inherits,54533,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:54650,Modifiability,inherit,inherits,54650,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:58209,Modifiability,inherit,inherited,58209,"id SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenCo",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:59110,Modifiability,inherit,inherited,59110,"bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:59385,Modifiability,config,configuration,59385,"bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:59648,Modifiability,inherit,inherited,59648,"n'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged ev",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:60010,Modifiability,config,configuration,60010,"  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions in",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:60955,Modifiability,inherit,inherited,60955,");  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static T",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:61201,Modifiability,inherit,inherited,61201,"sages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given am",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:61411,Modifiability,inherit,inherited,61411,"sages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given am",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:61929,Modifiability,inherit,inherited,61929,void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooListProxy _coefList;  List of coefficients. ;  ; bool _doFloor = false;  Introduce floor at zero in pdf. ;  ; bool _extended;  Allow use as extended p.d.f. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ! The integration cache manager ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; R,MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:62584,Modifiability,extend,extended,62584,eclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooListProxy _coefList;  List of coefficients. ;  ; bool _doFloor = false;  Introduce floor at zero in pdf. ;  ; bool _extended;  Allow use as extended p.d.f. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ! The integration cache manager ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; ,MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:62786,Modifiability,inherit,inherited,62786,;  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooListProxy _coefList;  List of coefficients. ;  ; bool _doFloor = false;  Introduce floor at zero in pdf. ;  ; bool _extended;  Allow use as extended p.d.f. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ! The integration cache manager ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plot,MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:63339,Modifiability,config,configuration,63339, RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooListProxy _coefList;  List of coefficients. ;  ; bool _doFloor = false;  Introduce floor at zero in pdf. ;  ; bool _extended;  Allow use as extended p.d.f. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ! The integration cache manager ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransi,MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:63471,Modifiability,inherit,inherited,63471,or = false;  Introduce floor at zero in pdf. ;  ; bool _extended;  Allow use as extended p.d.f. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ! The integration cache manager ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ,MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:64245,Modifiability,inherit,inherited,64245,"of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:65521,Modifiability,inherit,inherited,65521," RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _doFloorGlobal = false;  Global flag for introducing floor at zero in pdf. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:65731,Modifiability,inherit,inherited,65731,";  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _doFloorGlobal = false;  Global flag for introducing floor at zero in pdf. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; void setExtended (bool extended);  . Static Private Member Functions; static double analyticalIntegralWN (RooAbsReal const &caller, RooObjCacheManager &normIntMgr, RooArgList const &funcList, RooArgList const &coefList, Int_t code, const RooArgSet *normSet, const char *rangeName, bool hasWarnedBefore);  ; static std::list< double > * binBoundaries (RooArgList const &funcList, RooAbsRealLValue &, double, double);  ; static bool checkObservables (RooAbsReal const",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:65858,Modifiability,inherit,inherited,65858,";  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _doFloorGlobal = false;  Global flag for introducing floor at zero in pdf. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; void setExtended (bool extended);  . Static Private Member Functions; static double analyticalIntegralWN (RooAbsReal const &caller, RooObjCacheManager &normIntMgr, RooArgList const &funcList, RooArgList const &coefList, Int_t code, const RooArgSet *normSet, const char *rangeName, bool hasWarnedBefore);  ; static std::list< double > * binBoundaries (RooArgList const &funcList, RooAbsRealLValue &, double, double);  ; static bool checkObservables (RooAbsReal const",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:66226,Modifiability,inherit,inherited,66226," Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _doFloorGlobal = false;  Global flag for introducing floor at zero in pdf. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; void setExtended (bool extended);  . Static Private Member Functions; static double analyticalIntegralWN (RooAbsReal const &caller, RooObjCacheManager &normIntMgr, RooArgList const &funcList, RooArgList const &coefList, Int_t code, const RooArgSet *normSet, const char *rangeName, bool hasWarnedBefore);  ; static std::list< double > * binBoundaries (RooArgList const &funcList, RooAbsRealLValue &, double, double);  ; static bool checkObservables (RooAbsReal const &caller, RooArgSet const *nset, RooArgList const &funcList, RooArgList const &coefList);  ; static double evaluate (RooAbsReal const &caller, RooArgList const &funcList, RooArgList const &coefList, bool doFloor, bool &hasWarnedBefore);  ; static Int_t getAnalyticalIntegralWN (RooAbsReal const &caller, RooObjCacheManage",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:66395,Modifiability,inherit,inherited,66395," true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _doFloorGlobal = false;  Global flag for introducing floor at zero in pdf. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; void setExtended (bool extended);  . Static Private Member Functions; static double analyticalIntegralWN (RooAbsReal const &caller, RooObjCacheManager &normIntMgr, RooArgList const &funcList, RooArgList const &coefList, Int_t code, const RooArgSet *normSet, const char *rangeName, bool hasWarnedBefore);  ; static std::list< double > * binBoundaries (RooArgList const &funcList, RooAbsRealLValue &, double, double);  ; static bool checkObservables (RooAbsReal const &caller, RooArgSet const *nset, RooArgList const &funcList, RooArgList const &coefList);  ; static double evaluate (RooAbsReal const &caller, RooArgList const &funcList, RooArgList const &coefList, bool doFloor, bool &hasWarnedBefore);  ; static Int_t getAnalyticalIntegralWN (RooAbsReal const &caller, RooObjCacheManager &normIntMgr, RooArgList const &funcList, RooArgList const &coefList, RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, cons",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:66502,Modifiability,extend,extended,66502,"irty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _doFloorGlobal = false;  Global flag for introducing floor at zero in pdf. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; void setExtended (bool extended);  . Static Private Member Functions; static double analyticalIntegralWN (RooAbsReal const &caller, RooObjCacheManager &normIntMgr, RooArgList const &funcList, RooArgList const &coefList, Int_t code, const RooArgSet *normSet, const char *rangeName, bool hasWarnedBefore);  ; static std::list< double > * binBoundaries (RooArgList const &funcList, RooAbsRealLValue &, double, double);  ; static bool checkObservables (RooAbsReal const &caller, RooArgSet const *nset, RooArgList const &funcList, RooArgList const &coefList);  ; static double evaluate (RooAbsReal const &caller, RooArgList const &funcList, RooArgList const &coefList, bool doFloor, bool &hasWarnedBefore);  ; static Int_t getAnalyticalIntegralWN (RooAbsReal const &caller, RooObjCacheManager &normIntMgr, RooArgList const &funcList, RooArgList const &coefList, RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName);  ; static void initializeFuncsAndCoefs (RooAbsReal const &",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:68298,Modifiability,inherit,inherited,68298," ; static void printMetaArgs (RooArgList const &funcList, RooArgList const &coefList, std::ostream &os);  ; static void setCacheAndTrackHints (RooArgList const &funcList, RooArgSet &trackNodes);  ; static std::string translateImpl (RooFit::Detail::CodeSquashContext &ctx, RooAbsArg const *klass, RooArgList const &funcList, RooArgList const &coefList, bool normalize=false);  . Friends; class RooAddition;  ; class RooAddPdf;  ; class RooRealSumFunc;  . Additional Inherited Members;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; typedef std::map< constRooAbsArg *, std::pair< std::string, std::list< EvalError > > >::const_iterator EvalErrorIter;  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:68416,Modifiability,inherit,inherited,68416," ; static void printMetaArgs (RooArgList const &funcList, RooArgList const &coefList, std::ostream &os);  ; static void setCacheAndTrackHints (RooArgList const &funcList, RooArgSet &trackNodes);  ; static std::string translateImpl (RooFit::Detail::CodeSquashContext &ctx, RooAbsArg const *klass, RooArgList const &funcList, RooArgList const &coefList, bool normalize=false);  . Friends; class RooAddition;  ; class RooAddPdf;  ; class RooRealSumFunc;  . Additional Inherited Members;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; typedef std::map< constRooAbsArg *, std::pair< std::string, std::list< EvalError > > >::const_iterator EvalErrorIter;  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:68767,Modifiability,inherit,inherited,68767," ; static void printMetaArgs (RooArgList const &funcList, RooArgList const &coefList, std::ostream &os);  ; static void setCacheAndTrackHints (RooArgList const &funcList, RooArgSet &trackNodes);  ; static std::string translateImpl (RooFit::Detail::CodeSquashContext &ctx, RooAbsArg const *klass, RooArgList const &funcList, RooArgList const &coefList, bool normalize=false);  . Friends; class RooAddition;  ; class RooAddPdf;  ; class RooRealSumFunc;  . Additional Inherited Members;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; typedef std::map< constRooAbsArg *, std::pair< std::string, std::list< EvalError > > >::const_iterator EvalErrorIter;  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:69177,Modifiability,inherit,inherited,69177," ; static void printMetaArgs (RooArgList const &funcList, RooArgList const &coefList, std::ostream &os);  ; static void setCacheAndTrackHints (RooArgList const &funcList, RooArgSet &trackNodes);  ; static std::string translateImpl (RooFit::Detail::CodeSquashContext &ctx, RooAbsArg const *klass, RooArgList const &funcList, RooArgList const &coefList, bool normalize=false);  . Friends; class RooAddition;  ; class RooAddPdf;  ; class RooRealSumFunc;  . Additional Inherited Members;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; typedef std::map< constRooAbsArg *, std::pair< std::string, std::list< EvalError > > >::const_iterator EvalErrorIter;  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:69815,Modifiability,inherit,inherited,69815,"ctivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are n",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:70137,Modifiability,inherit,inherited,70137,"1000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:70236,Modifiability,inherit,inherited,70236,"1000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:71629,Modifiability,inherit,inherited,71629," bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  The cache manager. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:72594,Modifiability,parameteriz,parameterized,72594,"  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:76020,Modifiability,inherit,inherited,76020," general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtua",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:78163,Modifiability,inherit,inherited,78163," attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . #include <RooRealSumPdf.h>. Inheritance diagram for RooRealSumPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooRealSumPdf() [1/5]. RooRealSumPdf::RooRealSumPdf ; (; ). Default constructor coverity[UNINIT_CTOR]. ; Definition at line 72 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [2/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; ti",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:78381,Modifiability,inherit,inherited,78381," the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . #include <RooRealSumPdf.h>. Inheritance diagram for RooRealSumPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooRealSumPdf() [1/5]. RooRealSumPdf::RooRealSumPdf ; (; ). Default constructor coverity[UNINIT_CTOR]. ; Definition at line 72 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [2/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; title . ). Constructor with name and title. ; Definition at line 77 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [3/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; title, . ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:78567,Modifiability,inherit,inherited,78567," registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . #include <RooRealSumPdf.h>. Inheritance diagram for RooRealSumPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooRealSumPdf() [1/5]. RooRealSumPdf::RooRealSumPdf ; (; ). Default constructor coverity[UNINIT_CTOR]. ; Definition at line 72 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [2/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; title . ). Constructor with name and title. ; Definition at line 77 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [3/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; title, . const RooArgList & ; inFuncList, . const RooArgList & ; inCoefList, . bool ; extended = false . ). Constructor for a PDF from a list of functions and coefficients. ; It implements ; \[; \sum_i \mathrm{coef}_i \cdot \math",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:79499,Modifiability,extend,extended,79499,"tComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . #include <RooRealSumPdf.h>. Inheritance diagram for RooRealSumPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooRealSumPdf() [1/5]. RooRealSumPdf::RooRealSumPdf ; (; ). Default constructor coverity[UNINIT_CTOR]. ; Definition at line 72 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [2/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; title . ). Constructor with name and title. ; Definition at line 77 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [3/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; title, . const RooArgList & ; inFuncList, . const RooArgList & ; inCoefList, . bool ; extended = false . ). Constructor for a PDF from a list of functions and coefficients. ; It implements ; \[; \sum_i \mathrm{coef}_i \cdot \mathrm{func}_i,; \]. if \( N_\mathrm{coef} = N_\mathrm{func} \). With extended=true, the coefficients can take any values. With extended=false, there is the danger of getting a degenerate minimisation problem because a PDF has to be normalised, which needs one degree of freedom less.; A plain (normalised) PDF can therefore be implemented with one less coefficient. RooFit then computes ; \[; \sum_i^{N-1} \mathrm{coef}_i \cdot \mathrm{func}_i + (1 - \sum_i \mathrm{coef}_i ) \cdot \mathrm{func}_N,; \]. if \( N_\mathrm{coef} = N_\mathrm{func} - 1 \).; All coefficients and functions are allowed to be negative but the sum (i.e. the PDF) is not, which is enforced at runtime.; Parameters. nameName of the PDF ; titleTitle (for plotting) ; inFuncListList of functions to sum ; inCoefListList of coefficients ; extendedInterpret as extended PDF (requires equal number",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:79708,Modifiability,extend,extended,79708,"n a single ioStreamer pass. ;  . #include <RooRealSumPdf.h>. Inheritance diagram for RooRealSumPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooRealSumPdf() [1/5]. RooRealSumPdf::RooRealSumPdf ; (; ). Default constructor coverity[UNINIT_CTOR]. ; Definition at line 72 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [2/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; title . ). Constructor with name and title. ; Definition at line 77 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [3/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; title, . const RooArgList & ; inFuncList, . const RooArgList & ; inCoefList, . bool ; extended = false . ). Constructor for a PDF from a list of functions and coefficients. ; It implements ; \[; \sum_i \mathrm{coef}_i \cdot \mathrm{func}_i,; \]. if \( N_\mathrm{coef} = N_\mathrm{func} \). With extended=true, the coefficients can take any values. With extended=false, there is the danger of getting a degenerate minimisation problem because a PDF has to be normalised, which needs one degree of freedom less.; A plain (normalised) PDF can therefore be implemented with one less coefficient. RooFit then computes ; \[; \sum_i^{N-1} \mathrm{coef}_i \cdot \mathrm{func}_i + (1 - \sum_i \mathrm{coef}_i ) \cdot \mathrm{func}_N,; \]. if \( N_\mathrm{coef} = N_\mathrm{func} - 1 \).; All coefficients and functions are allowed to be negative but the sum (i.e. the PDF) is not, which is enforced at runtime.; Parameters. nameName of the PDF ; titleTitle (for plotting) ; inFuncListList of functions to sum ; inCoefListList of coefficients ; extendedInterpret as extended PDF (requires equal number of functions and coefficients) . Definition at line 129 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [4/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; func1, . RooAbsReal & ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:79766,Modifiability,extend,extended,79766,"ser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooRealSumPdf() [1/5]. RooRealSumPdf::RooRealSumPdf ; (; ). Default constructor coverity[UNINIT_CTOR]. ; Definition at line 72 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [2/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; title . ). Constructor with name and title. ; Definition at line 77 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [3/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; title, . const RooArgList & ; inFuncList, . const RooArgList & ; inCoefList, . bool ; extended = false . ). Constructor for a PDF from a list of functions and coefficients. ; It implements ; \[; \sum_i \mathrm{coef}_i \cdot \mathrm{func}_i,; \]. if \( N_\mathrm{coef} = N_\mathrm{func} \). With extended=true, the coefficients can take any values. With extended=false, there is the danger of getting a degenerate minimisation problem because a PDF has to be normalised, which needs one degree of freedom less.; A plain (normalised) PDF can therefore be implemented with one less coefficient. RooFit then computes ; \[; \sum_i^{N-1} \mathrm{coef}_i \cdot \mathrm{func}_i + (1 - \sum_i \mathrm{coef}_i ) \cdot \mathrm{func}_N,; \]. if \( N_\mathrm{coef} = N_\mathrm{func} - 1 \).; All coefficients and functions are allowed to be negative but the sum (i.e. the PDF) is not, which is enforced at runtime.; Parameters. nameName of the PDF ; titleTitle (for plotting) ; inFuncListList of functions to sum ; inCoefListList of coefficients ; extendedInterpret as extended PDF (requires equal number of functions and coefficients) . Definition at line 129 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [4/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; func1, . RooAbsReal & ; func2, . RooAbsReal & ; coef1 . ). Construct p.d.f consisting of \( \mathrm{coef}_1 * \mathrm{func}_1 + (1-\",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:80448,Modifiability,extend,extendedInterpret,80448,"rgList & ; inFuncList, . const RooArgList & ; inCoefList, . bool ; extended = false . ). Constructor for a PDF from a list of functions and coefficients. ; It implements ; \[; \sum_i \mathrm{coef}_i \cdot \mathrm{func}_i,; \]. if \( N_\mathrm{coef} = N_\mathrm{func} \). With extended=true, the coefficients can take any values. With extended=false, there is the danger of getting a degenerate minimisation problem because a PDF has to be normalised, which needs one degree of freedom less.; A plain (normalised) PDF can therefore be implemented with one less coefficient. RooFit then computes ; \[; \sum_i^{N-1} \mathrm{coef}_i \cdot \mathrm{func}_i + (1 - \sum_i \mathrm{coef}_i ) \cdot \mathrm{func}_N,; \]. if \( N_\mathrm{coef} = N_\mathrm{func} - 1 \).; All coefficients and functions are allowed to be negative but the sum (i.e. the PDF) is not, which is enforced at runtime.; Parameters. nameName of the PDF ; titleTitle (for plotting) ; inFuncListList of functions to sum ; inCoefListList of coefficients ; extendedInterpret as extended PDF (requires equal number of functions and coefficients) . Definition at line 129 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [4/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; func1, . RooAbsReal & ; func2, . RooAbsReal & ; coef1 . ). Construct p.d.f consisting of \( \mathrm{coef}_1 * \mathrm{func}_1 + (1-\mathrm{coef}_1) * \mathrm{func}_2 \). ; The input coefficients and functions are allowed to be negative but the resulting sum is not, which is enforced at runtime. ; Definition at line 91 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [5/5]. RooRealSumPdf::RooRealSumPdf ; (; const RooRealSumPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 186 of file RooRealSumPdf.cxx. Member Function Documentation. ◆ analyticalIntegralWN() [1/2]. double RooRealSumPdf::analyticalIntegralWN ; (; Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeN",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:80469,Modifiability,extend,extended,80469,"rgList & ; inFuncList, . const RooArgList & ; inCoefList, . bool ; extended = false . ). Constructor for a PDF from a list of functions and coefficients. ; It implements ; \[; \sum_i \mathrm{coef}_i \cdot \mathrm{func}_i,; \]. if \( N_\mathrm{coef} = N_\mathrm{func} \). With extended=true, the coefficients can take any values. With extended=false, there is the danger of getting a degenerate minimisation problem because a PDF has to be normalised, which needs one degree of freedom less.; A plain (normalised) PDF can therefore be implemented with one less coefficient. RooFit then computes ; \[; \sum_i^{N-1} \mathrm{coef}_i \cdot \mathrm{func}_i + (1 - \sum_i \mathrm{coef}_i ) \cdot \mathrm{func}_N,; \]. if \( N_\mathrm{coef} = N_\mathrm{func} - 1 \).; All coefficients and functions are allowed to be negative but the sum (i.e. the PDF) is not, which is enforced at runtime.; Parameters. nameName of the PDF ; titleTitle (for plotting) ; inFuncListList of functions to sum ; inCoefListList of coefficients ; extendedInterpret as extended PDF (requires equal number of functions and coefficients) . Definition at line 129 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [4/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; func1, . RooAbsReal & ; func2, . RooAbsReal & ; coef1 . ). Construct p.d.f consisting of \( \mathrm{coef}_1 * \mathrm{func}_1 + (1-\mathrm{coef}_1) * \mathrm{func}_2 \). ; The input coefficients and functions are allowed to be negative but the resulting sum is not, which is enforced at runtime. ; Definition at line 91 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [5/5]. RooRealSumPdf::RooRealSumPdf ; (; const RooRealSumPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 186 of file RooRealSumPdf.cxx. Member Function Documentation. ◆ analyticalIntegralWN() [1/2]. double RooRealSumPdf::analyticalIntegralWN ; (; Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeN",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:86211,Modifiability,extend,extended,86211,"ile containing the class declaration ; Definition at line 138 of file RooRealSumPdf.h. ◆ doEval(). void RooRealSumPdf::doEval ; (; RooFit::EvalContext & ; ctx); const. overridevirtual . Base function for computing multiple values of a RooAbsReal. ; Parameters. ctxAn evaluation context object . Reimplemented from RooAbsReal.; Definition at line 252 of file RooRealSumPdf.cxx. ◆ evaluate() [1/2]. double RooRealSumPdf::evaluate ; (; ); const. overridevirtual . Calculate the current value. ; Implements RooAbsReal.; Definition at line 246 of file RooRealSumPdf.cxx. ◆ evaluate() [2/2]. double RooRealSumPdf::evaluate ; (; RooAbsReal const & ; caller, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . bool ; doFloor, . bool & ; hasWarnedBefore . ). staticprivate . Definition at line 205 of file RooRealSumPdf.cxx. ◆ expectedEvents(). double RooRealSumPdf::expectedEvents ; (; const RooArgSet * ; nset); const. overridevirtual . Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ; Reimplemented from RooAbsPdf.; Definition at line 549 of file RooRealSumPdf.cxx. ◆ extendMode(). RooAbsPdf::ExtendMode RooRealSumPdf::extendMode ; (; ); const. overridevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented from RooAbsPdf.; Definition at line 199 of file RooRealSumPdf.cxx. ◆ forceAnalyticalInt(). bool RooRealSumPdf::forceAnalyticalInt ; (; const RooAbsArg & ; arg); const. inlineoverridevirtual . Reimplemented from RooAbsReal.; Definition at line 40 of file RooRealSumPdf.h. ◆ funcList(). const RooArgList & RooRealSumPdf::funcList ; (; ); const. inline . Definition at line 44 of file RooRealSumPdf.h. ◆ getAnalyticalIntegralWN() [1/2]. Int_t RooRealSumPdf::getAnalyticalIntegralWN ; (; RooAbsReal const & ; caller, . RooObjCacheManager & ; normIntMgr, . RooArgList ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:86367,Modifiability,extend,extendMode,86367,"ntext & ; ctx); const. overridevirtual . Base function for computing multiple values of a RooAbsReal. ; Parameters. ctxAn evaluation context object . Reimplemented from RooAbsReal.; Definition at line 252 of file RooRealSumPdf.cxx. ◆ evaluate() [1/2]. double RooRealSumPdf::evaluate ; (; ); const. overridevirtual . Calculate the current value. ; Implements RooAbsReal.; Definition at line 246 of file RooRealSumPdf.cxx. ◆ evaluate() [2/2]. double RooRealSumPdf::evaluate ; (; RooAbsReal const & ; caller, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . bool ; doFloor, . bool & ; hasWarnedBefore . ). staticprivate . Definition at line 205 of file RooRealSumPdf.cxx. ◆ expectedEvents(). double RooRealSumPdf::expectedEvents ; (; const RooArgSet * ; nset); const. overridevirtual . Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ; Reimplemented from RooAbsPdf.; Definition at line 549 of file RooRealSumPdf.cxx. ◆ extendMode(). RooAbsPdf::ExtendMode RooRealSumPdf::extendMode ; (; ); const. overridevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented from RooAbsPdf.; Definition at line 199 of file RooRealSumPdf.cxx. ◆ forceAnalyticalInt(). bool RooRealSumPdf::forceAnalyticalInt ; (; const RooAbsArg & ; arg); const. inlineoverridevirtual . Reimplemented from RooAbsReal.; Definition at line 40 of file RooRealSumPdf.h. ◆ funcList(). const RooArgList & RooRealSumPdf::funcList ; (; ); const. inline . Definition at line 44 of file RooRealSumPdf.h. ◆ getAnalyticalIntegralWN() [1/2]. Int_t RooRealSumPdf::getAnalyticalIntegralWN ; (; RooAbsReal const & ; caller, . RooObjCacheManager & ; normIntMgr, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . RooArgSet & ; allVars, . RooArgSet & ; numVars, . const RooArgSet * ; normSet, . const cha",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:86418,Modifiability,extend,extendMode,86418,". Base function for computing multiple values of a RooAbsReal. ; Parameters. ctxAn evaluation context object . Reimplemented from RooAbsReal.; Definition at line 252 of file RooRealSumPdf.cxx. ◆ evaluate() [1/2]. double RooRealSumPdf::evaluate ; (; ); const. overridevirtual . Calculate the current value. ; Implements RooAbsReal.; Definition at line 246 of file RooRealSumPdf.cxx. ◆ evaluate() [2/2]. double RooRealSumPdf::evaluate ; (; RooAbsReal const & ; caller, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . bool ; doFloor, . bool & ; hasWarnedBefore . ). staticprivate . Definition at line 205 of file RooRealSumPdf.cxx. ◆ expectedEvents(). double RooRealSumPdf::expectedEvents ; (; const RooArgSet * ; nset); const. overridevirtual . Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ; Reimplemented from RooAbsPdf.; Definition at line 549 of file RooRealSumPdf.cxx. ◆ extendMode(). RooAbsPdf::ExtendMode RooRealSumPdf::extendMode ; (; ); const. overridevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented from RooAbsPdf.; Definition at line 199 of file RooRealSumPdf.cxx. ◆ forceAnalyticalInt(). bool RooRealSumPdf::forceAnalyticalInt ; (; const RooAbsArg & ; arg); const. inlineoverridevirtual . Reimplemented from RooAbsReal.; Definition at line 40 of file RooRealSumPdf.h. ◆ funcList(). const RooArgList & RooRealSumPdf::funcList ; (; ); const. inline . Definition at line 44 of file RooRealSumPdf.h. ◆ getAnalyticalIntegralWN() [1/2]. Int_t RooRealSumPdf::getAnalyticalIntegralWN ; (; RooAbsReal const & ; caller, . RooObjCacheManager & ; normIntMgr, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . RooArgSet & ; allVars, . RooArgSet & ; numVars, . const RooArgSet * ; normSet, . const char * ; rangeName . ). staticprivate . Def",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:86496,Modifiability,extend,extended,86496,"An evaluation context object . Reimplemented from RooAbsReal.; Definition at line 252 of file RooRealSumPdf.cxx. ◆ evaluate() [1/2]. double RooRealSumPdf::evaluate ; (; ); const. overridevirtual . Calculate the current value. ; Implements RooAbsReal.; Definition at line 246 of file RooRealSumPdf.cxx. ◆ evaluate() [2/2]. double RooRealSumPdf::evaluate ; (; RooAbsReal const & ; caller, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . bool ; doFloor, . bool & ; hasWarnedBefore . ). staticprivate . Definition at line 205 of file RooRealSumPdf.cxx. ◆ expectedEvents(). double RooRealSumPdf::expectedEvents ; (; const RooArgSet * ; nset); const. overridevirtual . Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ; Reimplemented from RooAbsPdf.; Definition at line 549 of file RooRealSumPdf.cxx. ◆ extendMode(). RooAbsPdf::ExtendMode RooRealSumPdf::extendMode ; (; ); const. overridevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented from RooAbsPdf.; Definition at line 199 of file RooRealSumPdf.cxx. ◆ forceAnalyticalInt(). bool RooRealSumPdf::forceAnalyticalInt ; (; const RooAbsArg & ; arg); const. inlineoverridevirtual . Reimplemented from RooAbsReal.; Definition at line 40 of file RooRealSumPdf.h. ◆ funcList(). const RooArgList & RooRealSumPdf::funcList ; (; ); const. inline . Definition at line 44 of file RooRealSumPdf.h. ◆ getAnalyticalIntegralWN() [1/2]. Int_t RooRealSumPdf::getAnalyticalIntegralWN ; (; RooAbsReal const & ; caller, . RooObjCacheManager & ; normIntMgr, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . RooArgSet & ; allVars, . RooArgSet & ; numVars, . const RooArgSet * ; normSet, . const char * ; rangeName . ). staticprivate . Definition at line 389 of file RooRealSumPdf.cxx. ◆ getAnalyticalIntegralWN() [2/2]",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:91266,Modifiability,extend,extended,91266,"flect the contents of the product operator construction. ; Reimplemented from RooAbsArg.; Definition at line 708 of file RooRealSumPdf.cxx. ◆ selfNormalized(). bool RooRealSumPdf::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented from RooAbsPdf.; Definition at line 53 of file RooRealSumPdf.h. ◆ setCacheAndTrackHints() [1/2]. void RooRealSumPdf::setCacheAndTrackHints ; (; RooArgList const & ; funcList, . RooArgSet & ; trackNodes . ). staticprivate . Definition at line 693 of file RooRealSumPdf.cxx. ◆ setCacheAndTrackHints() [2/2]. void RooRealSumPdf::setCacheAndTrackHints ; (; RooArgSet & ; trackNodes). overridevirtual . Label OK'ed components of a RooRealSumPdf with cache-and-track. ; Reimplemented from RooAbsArg.; Definition at line 687 of file RooRealSumPdf.cxx. ◆ setExtended(). void RooRealSumPdf::setExtended ; (; bool ; extended). inlineprivate . Definition at line 136 of file RooRealSumPdf.h. ◆ setFloor(). void RooRealSumPdf::setFloor ; (; bool ; flag). inline . Definition at line 62 of file RooRealSumPdf.h. ◆ setFloorGlobal(). static void RooRealSumPdf::setFloorGlobal ; (; bool ; flag). inlinestatic . Definition at line 64 of file RooRealSumPdf.h. ◆ Streamer(). void RooRealSumPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooRealSumPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 138 of file RooRealSumPdf.h. ◆ translate(). void RooRealSumPdf::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is late",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:93890,Modifiability,extend,extended,93890,"f.cxx. ◆ translateImpl(). std::string RooRealSumPdf::translateImpl ; (; RooFit::Detail::CodeSquashContext & ; ctx, . RooAbsArg const * ; klass, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . bool ; normalize = false . ). staticprivate . Definition at line 302 of file RooRealSumPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddition. friend class RooAddition. friend . Definition at line 99 of file RooRealSumPdf.h. ◆ RooAddPdf. friend class RooAddPdf. friend . Definition at line 98 of file RooRealSumPdf.h. ◆ RooRealSumFunc. friend class RooRealSumFunc. friend . Definition at line 100 of file RooRealSumPdf.h. Member Data Documentation. ◆ _coefList. RooListProxy RooRealSumPdf::_coefList. protected . List of coefficients. ; Definition at line 89 of file RooRealSumPdf.h. ◆ _doFloor. bool RooRealSumPdf::_doFloor = false. protected . Introduce floor at zero in pdf. ; Definition at line 92 of file RooRealSumPdf.h. ◆ _doFloorGlobal. bool RooRealSumPdf::_doFloorGlobal = false. staticprotected . Global flag for introducing floor at zero in pdf. ; Definition at line 94 of file RooRealSumPdf.h. ◆ _extended. bool RooRealSumPdf::_extended. protected . Allow use as extended p.d.f. ; Definition at line 90 of file RooRealSumPdf.h. ◆ _funcList. RooListProxy RooRealSumPdf::_funcList. protected . List of component FUNCs. ; Definition at line 88 of file RooRealSumPdf.h. ◆ _haveWarned. bool RooRealSumPdf::_haveWarned {false}. mutableprotected . ! ; Definition at line 93 of file RooRealSumPdf.h. ◆ _normIntMgr. RooObjCacheManager RooRealSumPdf::_normIntMgr. mutableprotected . ! The integration cache manager ; Definition at line 85 of file RooRealSumPdf.h. Libraries for RooRealSumPdf:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooRealSumPdf.h; roofit/roofitcore/src/RooRealSumPdf.cxx. RooRealSumPdf. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:10:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:5470,Performance,cache,cache-and-track,5470,"getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Advertise that all integrals can be handled internally. ;  ; bool getFloor () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Check if all components that depend on obs are binned. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealSumPdf to more intuitively reflect the contents of the product operator construction. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components of a RooRealSumPdf with cache-and-track. ;  ; void setFloor (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const c",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:30211,Performance,cache,cache,30211,"st RooAbsArg &other) const override;  Equality operator when comparing to another RooAbsArg. ;  ; bool operator== (double value) const;  Equality operator comparing to a double. ;  ; virtual RooPlot * plotSliceOn (RooPlot *frame, const RooArgSet &sliceSet, Option_t *drawOptions=""L"", double scaleFactor=1.0, ScaleType stype=Relative, const RooAbsData *projData=nullptr) const;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the special",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:47735,Performance,optimiz,optimizeCacheMode,47735,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:47795,Performance,cache,cache,47795,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:47806,Performance,optimiz,optimization,47806,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:47875,Performance,optimiz,optimizeCacheMode,47875," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:47987,Performance,cache,cache,47987," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:47998,Performance,optimiz,optimization,47998," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:48119,Performance,cache,cacheList,48119,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:48226,Performance,cache,cached,48226,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:48351,Performance,cache,cacheList,48351,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void s",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:48489,Performance,cache,cached,48489,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void s",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:48683,Performance,perform,perform,48683,"eChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCach",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:48705,Performance,optimiz,optimization,48705,"eChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCach",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:48904,Performance,cache,cache,48904,"nition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (R",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:48992,Performance,cache,cache,48992,"ache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TName",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:49127,Performance,cache,caches,49127,"vables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtua",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:49203,Performance,cache,cache,49203," and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:49679,Performance,cache,cacheUniqueSuffix,49679,"const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () cons",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:49859,Performance,cache,cache,49859,"const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () cons",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:62745,Performance,cache,cache,62745,;  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooListProxy _coefList;  List of coefficients. ;  ; bool _doFloor = false;  Introduce floor at zero in pdf. ;  ; bool _extended;  Allow use as extended p.d.f. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ! The integration cache manager ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plot,MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:65082,Performance,cache,cache,65082,"adBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _doFloorGlobal = false;  Global flag for introducing floor at zero in pdf. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::Prin",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:66310,Performance,cache,cache,66310," Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _doFloorGlobal = false;  Global flag for introducing floor at zero in pdf. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; void setExtended (bool extended);  . Static Private Member Functions; static double analyticalIntegralWN (RooAbsReal const &caller, RooObjCacheManager &normIntMgr, RooArgList const &funcList, RooArgList const &coefList, Int_t code, const RooArgSet *normSet, const char *rangeName, bool hasWarnedBefore);  ; static std::list< double > * binBoundaries (RooArgList const &funcList, RooAbsRealLValue &, double, double);  ; static bool checkObservables (RooAbsReal const &caller, RooArgSet const *nset, RooArgList const &funcList, RooArgList const &coefList);  ; static double evaluate (RooAbsReal const &caller, RooArgList const &funcList, RooArgList const &coefList, bool doFloor, bool &hasWarnedBefore);  ; static Int_t getAnalyticalIntegralWN (RooAbsReal const &caller, RooObjCacheManage",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:71375,Performance,cache,cache,71375,"*name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  The cache manager. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated w",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:71522,Performance,cache,cached,71522,"tion routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  The cache manager. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createInt",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:71932,Performance,cache,cached,71932,"ber points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  The cache manager. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:71973,Performance,cache,cache,71973,"ber points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  The cache manager. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:75069,Performance,perform,perform,75069,"onst RooArgProxy &c, const RooArgProxy &d) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:77116,Performance,optimiz,optimizeDirtyHook,77116,";  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoErr",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:77604,Performance,cache,cached,77604,"id graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; st",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:91105,Performance,cache,cache-and-track,91105,"oid RooRealSumPdf::printMetaArgs ; (; std::ostream & ; os); const. overridevirtual . Customized printing of arguments of a RooRealSumPdf to more intuitively reflect the contents of the product operator construction. ; Reimplemented from RooAbsArg.; Definition at line 708 of file RooRealSumPdf.cxx. ◆ selfNormalized(). bool RooRealSumPdf::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented from RooAbsPdf.; Definition at line 53 of file RooRealSumPdf.h. ◆ setCacheAndTrackHints() [1/2]. void RooRealSumPdf::setCacheAndTrackHints ; (; RooArgList const & ; funcList, . RooArgSet & ; trackNodes . ). staticprivate . Definition at line 693 of file RooRealSumPdf.cxx. ◆ setCacheAndTrackHints() [2/2]. void RooRealSumPdf::setCacheAndTrackHints ; (; RooArgSet & ; trackNodes). overridevirtual . Label OK'ed components of a RooRealSumPdf with cache-and-track. ; Reimplemented from RooAbsArg.; Definition at line 687 of file RooRealSumPdf.cxx. ◆ setExtended(). void RooRealSumPdf::setExtended ; (; bool ; extended). inlineprivate . Definition at line 136 of file RooRealSumPdf.h. ◆ setFloor(). void RooRealSumPdf::setFloor ; (; bool ; flag). inline . Definition at line 62 of file RooRealSumPdf.h. ◆ setFloorGlobal(). static void RooRealSumPdf::setFloorGlobal ; (; bool ; flag). inlinestatic . Definition at line 64 of file RooRealSumPdf.h. ◆ Streamer(). void RooRealSumPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooRealSumPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 138 of file RooRealSumPdf.h. ◆ translate(). void RooRealSumPdf::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsRe",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:94318,Performance,cache,cache,94318,"f.cxx. ◆ translateImpl(). std::string RooRealSumPdf::translateImpl ; (; RooFit::Detail::CodeSquashContext & ; ctx, . RooAbsArg const * ; klass, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . bool ; normalize = false . ). staticprivate . Definition at line 302 of file RooRealSumPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddition. friend class RooAddition. friend . Definition at line 99 of file RooRealSumPdf.h. ◆ RooAddPdf. friend class RooAddPdf. friend . Definition at line 98 of file RooRealSumPdf.h. ◆ RooRealSumFunc. friend class RooRealSumFunc. friend . Definition at line 100 of file RooRealSumPdf.h. Member Data Documentation. ◆ _coefList. RooListProxy RooRealSumPdf::_coefList. protected . List of coefficients. ; Definition at line 89 of file RooRealSumPdf.h. ◆ _doFloor. bool RooRealSumPdf::_doFloor = false. protected . Introduce floor at zero in pdf. ; Definition at line 92 of file RooRealSumPdf.h. ◆ _doFloorGlobal. bool RooRealSumPdf::_doFloorGlobal = false. staticprotected . Global flag for introducing floor at zero in pdf. ; Definition at line 94 of file RooRealSumPdf.h. ◆ _extended. bool RooRealSumPdf::_extended. protected . Allow use as extended p.d.f. ; Definition at line 90 of file RooRealSumPdf.h. ◆ _funcList. RooListProxy RooRealSumPdf::_funcList. protected . List of component FUNCs. ; Definition at line 88 of file RooRealSumPdf.h. ◆ _haveWarned. bool RooRealSumPdf::_haveWarned {false}. mutableprotected . ! ; Definition at line 93 of file RooRealSumPdf.h. ◆ _normIntMgr. RooObjCacheManager RooRealSumPdf::_normIntMgr. mutableprotected . ! The integration cache manager ; Definition at line 85 of file RooRealSumPdf.h. Libraries for RooRealSumPdf:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooRealSumPdf.h; roofit/roofitcore/src/RooRealSumPdf.cxx. RooRealSumPdf. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:10:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:13894,Safety,safe,safely,13894,"ooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (pr",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:75085,Safety,sanity check,sanity check,75085,"onst RooArgProxy &c, const RooArgProxy &d) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:75117,Safety,safe,safe,75117,"onst RooArgProxy &c, const RooArgProxy &d) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:50763,Security,hash,hash,50763,"tCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:7426,Testability,log,log,7426,"st char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can provide extended likelihood term. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooArgSet &nset=RooArgSet());  Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelih",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:8217,Testability,log,log,8217,"ntegral of the function over one or more observables listed in iset. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new d",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:8483,Testability,log,log,8483,"g(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool ra",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:12738,Testability,log,log,12738,"for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true, bool removeConstraintsFromPdf=false) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet &, bool, bool=false) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual void initGenerator (Int_t code);  I",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:12839,Testability,log,log,12839,"for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true, bool removeConstraintsFromPdf=false) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet &, bool, bool=false) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual void initGenerator (Int_t code);  I",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:28214,Testability,log,logEvalError,28214,"this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override; ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:38667,Testability,test,testArg,38667,"izTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:38791,Testability,test,testArg,38791,"izTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:38873,Testability,test,testArg,38873,"am. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:38997,Testability,test,testArg,38997,"am. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:39101,Testability,test,testArg,39101,") const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::ostream &os, const char *indent="""", const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; virtual void printCompactTreeHook (std::ostream &os",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:43498,Testability,test,testArg,43498,"TED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use valueClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter shapeClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use shapeClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter serverMIterator () const R__DEPRECATED(6;  ; RooFIter Use servers () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet &set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooAbsData *set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet *depList) const;  ; bool dependentOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  ; bool dependentOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  ; bool checkDependents (const RooArgSet *nset) const;  ; bool recursiveCheckDependents (const RooArgSet *nset) const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const Ro",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:43584,Testability,test,testArg,43584,"TED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use valueClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter shapeClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use shapeClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter serverMIterator () const R__DEPRECATED(6;  ; RooFIter Use servers () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet &set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooAbsData *set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet *depList) const;  ; bool dependentOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  ; bool dependentOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  ; bool checkDependents (const RooArgSet *nset) const;  ; bool recursiveCheckDependents (const RooArgSet *nset) const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const Ro",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:48253,Testability,test,test,48253,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:48516,Testability,test,test,48516,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void s",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:60174,Testability,log,logging,60174,"ited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbo",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:60235,Testability,log,logEvalError,60235,"torConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:60396,Testability,log,logging,60396,"torConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:60456,Testability,log,logging,60456,"torConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:60568,Testability,log,logged,60568,"t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:60731,Testability,log,logged,60731," ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get st",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:60862,Testability,log,logging,60862,"Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bo",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:5150,Usability,intuit,intuitively,5150,"for extended likelihood calculation, which is the sum of all coefficients. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; bool forceAnalyticalInt (const RooAbsArg &arg) const override;  ; const RooArgList & funcList () const;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Advertise that all integrals can be handled internally. ;  ; bool getFloor () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Check if all components that depend on obs are binned. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealSumPdf to more intuitively reflect the contents of the product operator construction. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components of a RooRealSumPdf with cache-and-track. ;  ; void setFloor (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, c",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:5847,Usability,simpl,simple,5847,"t &obs) const override;  Check if all components that depend on obs are binned. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealSumPdf to more intuitively reflect the contents of the product operator construction. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components of a RooRealSumPdf with cache-and-track. ;  ; void setFloor (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can provide extended likelihood term. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const Ro",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:41151,Usability,clear,clear,41151,"r *ind="""");  Hook function interface for object to insert additional information when printed in the context of a tree structure. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; RooWorkspace * workspace () const;  ; TIterator * cli",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:41834,Usability,clear,clear,41834,"bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; RooWorkspace * workspace () const;  ; TIterator * clientIterator () const R__DEPRECATED(6;  Retrieve a client iterator. ;  ; TIterator Use clients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * valueClientIterator () const R__DEPRECATED(6;  ; TIterator Use valueClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * shapeClientIterator () const R__DEPRECATED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:59802,Usability,clear,clearEvalErrorLog,59802,"n'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged ev",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:60608,Usability,clear,clearing,60608,"t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:76332,Usability,clear,clearShapeDirty,76332,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:76366,Usability,clear,clearValueAndShapeDirty,76366,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:76408,Usability,clear,clearValueDirty,76408,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:90234,Usability,intuit,intuitively,90234,"turning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented from RooAbsReal.; Definition at line 632 of file RooRealSumPdf.cxx. ◆ plotSamplingHint() [2/2]. std::list< double > * RooRealSumPdf::plotSamplingHint ; (; RooArgList const & ; funcList, . RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ). staticprivate . Definition at line 637 of file RooRealSumPdf.cxx. ◆ printMetaArgs() [1/2]. void RooRealSumPdf::printMetaArgs ; (; RooArgList const & ; funcList, . RooArgList const & ; coefList, . std::ostream & ; os . ). staticprivate . Definition at line 714 of file RooRealSumPdf.cxx. ◆ printMetaArgs() [2/2]. void RooRealSumPdf::printMetaArgs ; (; std::ostream & ; os); const. overridevirtual . Customized printing of arguments of a RooRealSumPdf to more intuitively reflect the contents of the product operator construction. ; Reimplemented from RooAbsArg.; Definition at line 708 of file RooRealSumPdf.cxx. ◆ selfNormalized(). bool RooRealSumPdf::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented from RooAbsPdf.; Definition at line 53 of file RooRealSumPdf.h. ◆ setCacheAndTrackHints() [1/2]. void RooRealSumPdf::setCacheAndTrackHints ; (; RooArgList const & ; funcList, . RooArgSet & ; trackNodes . ). staticprivate . Definition at line 693 of file RooRealSumPdf.cxx. ◆ setCacheAndTrackHints() [2/2]. void RooRealSumPdf::setCacheAndTrackHints ; (; RooArgSet & ; trackNodes). overridevirtual . Label OK'ed components of a RooRealSumPdf with cache-and-track. ; Reimplemented from RooAbsArg.; Definition at line 687 of file RooRealSumPdf.cxx. ◆ setExtended(). void RooRealSumPd",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:92146,Usability,simpl,simple,92146,"f with cache-and-track. ; Reimplemented from RooAbsArg.; Definition at line 687 of file RooRealSumPdf.cxx. ◆ setExtended(). void RooRealSumPdf::setExtended ; (; bool ; extended). inlineprivate . Definition at line 136 of file RooRealSumPdf.h. ◆ setFloor(). void RooRealSumPdf::setFloor ; (; bool ; flag). inline . Definition at line 62 of file RooRealSumPdf.h. ◆ setFloorGlobal(). static void RooRealSumPdf::setFloorGlobal ; (; bool ; flag). inlinestatic . Definition at line 64 of file RooRealSumPdf.h. ◆ Streamer(). void RooRealSumPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooRealSumPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 138 of file RooRealSumPdf.h. ◆ translate(). void RooRealSumPdf::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 333 of file RooRealSumPdf.cxx. ◆ translateImpl(). std::string RooRealSumPdf::translateImpl ; (; RooFit::Detail::CodeSquashContext & ; ctx, . RooAbsArg const * ; klass, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . bool ; normalize = false . ). staticprivate . Definition at line 302 of file RooRealSumPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddition. friend class RooAddition. friend . Defini",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html:1089,Availability,error,errors,1089,". ROOT: ROOT::Experimental::RLogChannel Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RLogChannel Class Reference. ; A log configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Construc",MatchSource.WIKI,doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html:1177,Availability,error,errors,1177,"t of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RLogChannel Class Reference. ; A log configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RLogChannel() [1/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ). default . Construct an anonymou",MatchSource.WIKI,doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html:1242,Availability,error,errors,1242," all members ; ROOT::Experimental::RLogChannel Class Reference. ; A log configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RLogChannel() [1/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ). default . Construct an anonymous channel. . ◆ RLogChannel() [2/3]. ROOT::Experimental::RLogChannel::RLogChan",MatchSource.WIKI,doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html:1313,Availability,error,error,1313," configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RLogChannel() [1/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ). default . Construct an anonymous channel. . ◆ RLogChannel() [2/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ELogLevel ; verbosity). inlineexplicit . Construct an anonymo",MatchSource.WIKI,doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html:1749,Availability,error,errors,1749,"annel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RLogChannel() [1/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ). default . Construct an anonymous channel. . ◆ RLogChannel() [2/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ELogLevel ; verbosity). inlineexplicit . Construct an anonymous channel with a default verbosity. ; Definition at line 113 of file RLogger.hxx. ◆ RLogChannel() [3/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; const std::string & ; name). inline . Construct a log channel given its name, which is part of the diagnostics. ; Definition at line 116 of file RLogger.hxx. Member Function Documentation. ◆ GetEffectiveVerbosity(). ELogLevel ROOT::Experimental::RLogChannel::GetEffectiveVerbos",MatchSource.WIKI,doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html:288,Deployability,configurat,configuration,288,". ROOT: ROOT::Experimental::RLogChannel Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RLogChannel Class Reference. ; A log configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Construc",MatchSource.WIKI,doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html:288,Modifiability,config,configuration,288,". ROOT: ROOT::Experimental::RLogChannel Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RLogChannel Class Reference. ; A log configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Construc",MatchSource.WIKI,doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html:975,Modifiability,inherit,inherited,975,". ROOT: ROOT::Experimental::RLogChannel Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RLogChannel Class Reference. ; A log configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Construc",MatchSource.WIKI,doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html:1571,Modifiability,inherit,inherited,1571,"l given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RLogChannel() [1/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ). default . Construct an anonymous channel. . ◆ RLogChannel() [2/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ELogLevel ; verbosity). inlineexplicit . Construct an anonymous channel with a default verbosity. ; Definition at line 113 of file RLogger.hxx. ◆ RLogChannel() [3/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; const std::string & ; name). inline . Construct a log channel given its name, which is part of the diagnostics. ; Definition at line 116 of file RLogger.hxx. ",MatchSource.WIKI,doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html:284,Testability,log,log,284,". ROOT: ROOT::Experimental::RLogChannel Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RLogChannel Class Reference. ; A log configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Construc",MatchSource.WIKI,doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html:362,Testability,log,log,362,". ROOT: ROOT::Experimental::RLogChannel Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RLogChannel Class Reference. ; A log configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Construc",MatchSource.WIKI,doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html:591,Testability,log,log,591,". ROOT: ROOT::Experimental::RLogChannel Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RLogChannel Class Reference. ; A log configuration for a channel, e.g. ; ""RHist"". Each ROOT module has its own log, with potentially distinct verbosity. ; Definition at line 101 of file RLogger.hxx. Public Member Functions;  RLogChannel ()=default;  Construct an anonymous channel. ;  ;  RLogChannel (const std::string &name);  Construct a log channel given its name, which is part of the diagnostics. ;  ;  RLogChannel (ELogLevel verbosity);  Construct an anonymous channel with a default verbosity. ;  ; ELogLevel GetEffectiveVerbosity (const RLogManager &mgr) const;  ; const std::string & GetName () const;  ; ELogLevel GetVerbosity () const;  ; ELogLevel SetVerbosity (ELogLevel verbosity);  ;  Public Member Functions inherited from ROOT::Experimental::RLogDiagCount; long long GetNumErrors () const;  Returns the current number of errors. ;  ; long long GetNumFatalErrors () const;  Returns the current number of fatal errors. ;  ; long long GetNumWarnings () const;  Number of fatal errors. ;  ; void Increment (ELogLevel severity);  Increase warning or error count. ;  . Private Attributes; std::string fName;  Name as shown in diagnostics. ;  ; ELogLevel fVerbosity = ELogLevel::kUnset;  Verbosity of this channel. By default, use the global verbosity. ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Construc",MatchSource.WIKI,doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html:2493,Testability,log,log,2493,". Additional Inherited Members;  Protected Attributes inherited from ROOT::Experimental::RLogDiagCount; std::atomic< long long > fNumErrors {0ll};  Number of warnings. ;  ; std::atomic< long long > fNumFatalErrors {0ll};  Number of errors. ;  ; std::atomic< long long > fNumWarnings {0ll};  . #include <ROOT/RLogger.hxx>. Inheritance diagram for ROOT::Experimental::RLogChannel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RLogChannel() [1/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ). default . Construct an anonymous channel. . ◆ RLogChannel() [2/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ELogLevel ; verbosity). inlineexplicit . Construct an anonymous channel with a default verbosity. ; Definition at line 113 of file RLogger.hxx. ◆ RLogChannel() [3/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; const std::string & ; name). inline . Construct a log channel given its name, which is part of the diagnostics. ; Definition at line 116 of file RLogger.hxx. Member Function Documentation. ◆ GetEffectiveVerbosity(). ELogLevel ROOT::Experimental::RLogChannel::GetEffectiveVerbosity ; (; const RLogManager & ; mgr); const. inline . Definition at line 313 of file RLogger.hxx. ◆ GetName(). const std::string & ROOT::Experimental::RLogChannel::GetName ; (; ); const. inline . Definition at line 126 of file RLogger.hxx. ◆ GetVerbosity(). ELogLevel ROOT::Experimental::RLogChannel::GetVerbosity ; (; ); const. inline . Definition at line 123 of file RLogger.hxx. ◆ SetVerbosity(). ELogLevel ROOT::Experimental::RLogChannel::SetVerbosity ; (; ELogLevel ; verbosity). inline . Definition at line 118 of file RLogger.hxx. Member Data Documentation. ◆ fName. std::string ROOT::Experimental::RLogChannel::fName. private . Name as shown in diagnostics. ; Definition at line 103 of file RLogger.hxx. ◆ fVerbosity. ELogLevel ROOT::Experimental::RLogChannel::fVerbosity = ELogLevel::kUnse",MatchSource.WIKI,doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Experimental_1_1RLogChannel.html
https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html:2370,Availability,avail,available,2370," argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. ROOT::Internal::TExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. The signature of the reduce function should be (const std::vector<T>) -> T; An integer can be passed as the fourth argument indicating the number of chunks we want to divide our work in. (Note: Please be aware that chunking is only available when the policy is kMultiThread, ignoring this argument in other cases) This may be useful to avoid the overhead introduced when running really short tasks. In this case, the reduction function should be independent of the size of the vector returned by Map due to optimization of the number of chunks.; Examples:; root[] ROOT::Internal::TExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int>; &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::Internal::TExecutor; pool(ROOT::EExecutionPolicy::kMultiProcess); auto hist = pool.MapReduce(CreateAndFillHists, 10,; PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::Internal::TExecutorThis class implements the interface to execute the same task multiple times, sequentially or in paral...Definition TExecutor.hxx:37; ROOT::Internal::TExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> InvokeResult_t< F >Execute a function nTimes (M",MatchSource.WIKI,doc/v632/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html:2159,Energy Efficiency,reduce,reduce,2159,"arameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. ROOT::Internal::TExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. The signature of the reduce function should be (const std::vector<T>) -> T; An integer can be passed as the fourth argument indicating the number of chunks we want to divide our work in. (Note: Please be aware that chunking is only available when the policy is kMultiThread, ignoring this argument in other cases) This may be useful to avoid the overhead introduced when running really short tasks. In this case, the reduction function should be independent of the size of the vector returned by Map due to optimization of the number of chunks.; Examples:; root[] ROOT::Internal::TExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int>; &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::Internal::TExecutor; pool(ROOT::EExecutionPolicy::kMultiProcess); auto hist = pool.MapReduce(CreateAndFillHists, 10,; PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::Internal::TExecutorThis class implements the interface to execute the same task multiple times, sequentially",MatchSource.WIKI,doc/v632/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html:352,Integrability,interface,interface,352,". ROOT: ROOT::Internal::TExecutor Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::TExecutor Class Reference. ; This class implements the interface to execute the same task multiple times, sequentially or in parallel depending on the execution policy passed as a first parameter on construction, and possibly with different arguments every time. . ROOT::Internal::TExecutor::Map; The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of n workers; where n tipically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included. ROOT::::Internal::TExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. ROOT::Internal::TExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third arg",MatchSource.WIKI,doc/v632/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html:431,Integrability,depend,depending,431,". ROOT: ROOT::Internal::TExecutor Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::TExecutor Class Reference. ; This class implements the interface to execute the same task multiple times, sequentially or in parallel depending on the execution policy passed as a first parameter on construction, and possibly with different arguments every time. . ROOT::Internal::TExecutor::Map; The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of n workers; where n tipically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included. ROOT::::Internal::TExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. ROOT::Internal::TExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third arg",MatchSource.WIKI,doc/v632/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html:1701,Integrability,wrap,wrapped,1701,"imes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of n workers; where n tipically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included. ROOT::::Internal::TExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. ROOT::Internal::TExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. The signature of the reduce function should be (const std::vector<T>) -> T; An integer can be passed as the fourth argument indicating the number of chunks we want to divide our work in. (Note: Please be aware that chunking is only available when the policy is kMultiThread, ignoring this argument in other cases) This may be useful to avoid the overhead introduced when running really short tasks. In this case, the reduction function should be independent of the size of the vector returned by Map due to optimization of the n",MatchSource.WIKI,doc/v632/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html:3168,Integrability,interface,interface,3168,"ould be (const std::vector<T>) -> T; An integer can be passed as the fourth argument indicating the number of chunks we want to divide our work in. (Note: Please be aware that chunking is only available when the policy is kMultiThread, ignoring this argument in other cases) This may be useful to avoid the overhead introduced when running really short tasks. In this case, the reduction function should be independent of the size of the vector returned by Map due to optimization of the number of chunks.; Examples:; root[] ROOT::Internal::TExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int>; &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::Internal::TExecutor; pool(ROOT::EExecutionPolicy::kMultiProcess); auto hist = pool.MapReduce(CreateAndFillHists, 10,; PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::Internal::TExecutorThis class implements the interface to execute the same task multiple times, sequentially or in paral...Definition TExecutor.hxx:37; ROOT::Internal::TExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> InvokeResult_t< F >Execute a function nTimes (Map) and accumulate the results into a single value (Reduce).Definition TExecutor.hxx:213; ROOT::EExecutionPolicy::kMultiProcess@ kMultiProcess; v@ vDefinition rootcling_impl.cxx:3687. Definition at line 37 of file TExecutor.hxx. Classes; struct  MapRetType;  Helper class to get the correct return type from the Map function, necessary to infer the ResolveExecutorAndMap function type. More...;  ; struct  MapRetType< F, unsigned >;  . Public Member Functions;  TExecutor (const TExecutor &)=delete;  ;  TExecutor (ROOT::EExecutionPolicy execPolicy, unsigned nWorkers=0);  Class constructor. ;  ;  TExecutor (unsigned nWorkers=0);  Class constructor. ;  ; unsigned GetPoolSize () const;  Return the number of pooled workers. ;  ; template<class F ,",MatchSource.WIKI,doc/v632/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html:14462,Integrability,wrap,wrapping,14462,"emplate<class F , class T , class Cond > . auto ROOT::Internal::TExecutor::MapImpl ; (; F ; func, . std::vector< T > & ; args . ); -> std::vector<InvokeResult_t<F, T>>. private . Execute a function over the elements of a vector. ; Implementation of the Map method.; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsVector of elements passed as an argument to func. . ReturnsA vector with the results of the function calls. ; Definition at line 184 of file TExecutor.hxx. ◆ MapImpl() [4/4]. template<class F , class Cond > . auto ROOT::Internal::TExecutor::MapImpl ; (; F ; func, . unsigned ; nTimes . ); -> std::vector<InvokeResult_t<F>>. private . Execute a function without arguments several times. ; Implementation of the Map method.; Parameters. funcFunction to be executed. ; nTimesNumber of times function should be called. . ReturnsA vector with the results of the function calls. Functions that take arguments can be executed (with fixed arguments) by wrapping them in a lambda or with std::bind. ; Definition at line 162 of file TExecutor.hxx. ◆ MapReduce() [1/5]. template<class F , class T , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . const std::vector< T > & ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, T>. Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed assecond argument as a parameter. ; argsImmutable vector, whose elements are passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same t",MatchSource.WIKI,doc/v632/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html:5856,Modifiability,inherit,inherited,5856,"t_t< F, T >;  Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce). ;  ; template<class F , class T , class R , class Cond = validMapReturnCond<F, T>> ; auto MapReduce (F func, std::vector< T > &args, R redfunc, unsigned nChunks) -> InvokeResult_t< F, T >;  Execute a function over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ;  ; template<class F , class R , class Cond = validMapReturnCond<F>> ; auto MapReduce (F func, unsigned nTimes, R redfunc, unsigned nChunks) -> InvokeResult_t< F >;  Execute a function nTimes (Map) and accumulate the results into a single value (Reduce). ;  ; TExecutor & operator= (const TExecutor &)=delete;  ; ROOT::EExecutionPolicy Policy () const;  Return the execution policy the executor is set to. ;  ;  Public Member Functions inherited from ROOT::TExecutorCRTP< TExecutor >;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes. ;  ; auto Map (F func, std::initializer_list< T > args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an initializer_list. ;  ; auto Map (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector. ;  ; auto Map (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times. ;  ; T * MapReduce (F func, const std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, const std::vector< T > &args, R redfunc",MatchSource.WIKI,doc/v632/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html:6814,Modifiability,inherit,inheriting,6814,"r is set to. ;  ;  Public Member Functions inherited from ROOT::TExecutorCRTP< TExecutor >;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes. ;  ; auto Map (F func, std::initializer_list< T > args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an initializer_list. ;  ; auto Map (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector. ;  ; auto Map (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times. ;  ; T * MapReduce (F func, const std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, const std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, ROOT::TSeq< INTEGER > args, R redfunc) -> InvokeResult_t< F, INTEGER >;  Execute a function over a sequence of indexes (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, std::initializer_list< T > args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce). ;  ; T * MapReduce (F func, std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of a vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, std::vector< T > &args, R redfunc) -",MatchSource.WIKI,doc/v632/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html:7661,Modifiability,inherit,inheriting,7661,"> >;  Execute a function without arguments several times. ;  ; T * MapReduce (F func, const std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, const std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, ROOT::TSeq< INTEGER > args, R redfunc) -> InvokeResult_t< F, INTEGER >;  Execute a function over a sequence of indexes (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, std::initializer_list< T > args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce). ;  ; T * MapReduce (F func, std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of a vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >;  Execute a function without arguments several times (Map) and accumulate the results into a single value (Reduce). ;  ; TExecutorCRTP & operator= (const TExecutorCRTP &)=delete;  ; T * Reduce (const std::vector< T * > &mergeObjs);  ""Reduce"" an std::vector into a single object by using the object's Merge method. ;  ; auto Reduce (const std::vector< T > &objs, R redfunc) -> decltype(redfunc(objs));  ""Reduce"" an std::vector into a single object by passing a function as the second argument defining the reduction operation. ;  . Private Types; using Unused_t = ROOT::TSequentialExecutor;  . Private Member Functions; templa",MatchSource.WIKI,doc/v632/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html:10119,Modifiability,inherit,inherited,10119,"ond = validMapReturnCond<F, T>> ; auto MapImpl (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector. ;  ; template<class F , class Cond = validMapReturnCond<F>> ; auto MapImpl (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times. ;  ; template<class F , class T > ; auto ResolveExecutorAndMap (F func, T &&args) -> std::vector< typename MapRetType< F, typename std::decay< T >::type >::type >;  Function called from Map to select and execute the correct Executor according to the set Execution Policy. ;  . Private Attributes; ROOT::EExecutionPolicy fExecPolicy;  ; std::unique_ptr< ROOT::TProcessExecutor > fProcessExecutor;  ; std::unique_ptr< ROOT::TSequentialExecutor > fSequentialExecutor;  ; std::unique_ptr< ROOT::TThreadExecutor > fThreadExecutor;  ; friend TExecutorCRTP;  . Additional Inherited Members;  Protected Types inherited from ROOT::TExecutorCRTP< TExecutor >; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  ; using validMapReturnCond = std::enable_if_t<!std::is_reference< InvokeResult_t< F, T... > >::value &&!std::is_void< InvokeResult_t< F, T... > >::value >;  type definition used in templated functions for not allowing mapping functions that return references or void. ;  . #include <ROOT/TExecutor.hxx>. Inheritance diagram for ROOT::Internal::TExecutor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Unused_t. using ROOT::Internal::TExecutor::Unused_t = ROOT::TSequentialExecutor. private . Definition at line 101 of file TExecutor.hxx. Constructor & Destructor Documentation. ◆ TExecutor() [1/3]. ROOT::Internal::TExecutor::TExecutor ; (; unsigned ; nWorkers = 0). inlineexplicit . Class constructor. ; Sets the default execution policy and initializes the corresponding executor. Defaults to multithreaded execution policy if ",MatchSource.WIKI,doc/v632/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html:2645,Performance,optimiz,optimization,2645,"ed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. ROOT::Internal::TExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. The signature of the reduce function should be (const std::vector<T>) -> T; An integer can be passed as the fourth argument indicating the number of chunks we want to divide our work in. (Note: Please be aware that chunking is only available when the policy is kMultiThread, ignoring this argument in other cases) This may be useful to avoid the overhead introduced when running really short tasks. In this case, the reduction function should be independent of the size of the vector returned by Map due to optimization of the number of chunks.; Examples:; root[] ROOT::Internal::TExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int>; &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::Internal::TExecutor; pool(ROOT::EExecutionPolicy::kMultiProcess); auto hist = pool.MapReduce(CreateAndFillHists, 10,; PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::Internal::TExecutorThis class implements the interface to execute the same task multiple times, sequentially or in paral...Definition TExecutor.hxx:37; ROOT::Internal::TExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> InvokeResult_t< F >Execute a function nTimes (Map) and accumulate the results into a single value (Reduce).Definition TExecutor.hxx:213; ROOT::EExecutionPolicy::kMultiProcess@ kMultiProcess; v@ vDefinition rootcling_impl.cxx:3",MatchSource.WIKI,doc/v632/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html:15068,Performance,perform,performs,15068,"pl ; (; F ; func, . unsigned ; nTimes . ); -> std::vector<InvokeResult_t<F>>. private . Execute a function without arguments several times. ; Implementation of the Map method.; Parameters. funcFunction to be executed. ; nTimesNumber of times function should be called. . ReturnsA vector with the results of the function calls. Functions that take arguments can be executed (with fixed arguments) by wrapping them in a lambda or with std::bind. ; Definition at line 162 of file TExecutor.hxx. ◆ MapReduce() [1/5]. template<class F , class T , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . const std::vector< T > & ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, T>. Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed assecond argument as a parameter. ; argsImmutable vector, whose elements are passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 305 of file TExecutor.hxx. ◆ MapReduce() [2/5]. template<class F , class INTEGER , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . ROOT::TSeq< INTEGER > ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, INTEGER>. Execute a function over a sequence of indexes (Map) and accumulate",MatchSource.WIKI,doc/v632/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html:16263,Performance,perform,performs,16263,"lements are passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 305 of file TExecutor.hxx. ◆ MapReduce() [2/5]. template<class F , class INTEGER , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . ROOT::TSeq< INTEGER > ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, INTEGER>. Execute a function over a sequence of indexes (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed assecond argument as a parameter. ; argsSequence of indexes to execute func on. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 236 of file TExecutor.hxx. ◆ MapReduce() [3/5]. template<class F , class T , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . std::initializer_list< T > ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, T>. Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single ",MatchSource.WIKI,doc/v632/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html:17431,Performance,perform,performs,17431,"gsSequence of indexes to execute func on. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 236 of file TExecutor.hxx. ◆ MapReduce() [3/5]. template<class F , class T , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . std::initializer_list< T > ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, T>. Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed as second argument as a parameter. ; argsinitializer_list for a vector to apply func on. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 259 of file TExecutor.hxx. ◆ MapReduce() [4/5]. template<class F , class T , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . std::vector< T > & ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, T>. Execute a function over the elements of a vector (Map) and accumulate the results into a single valu",MatchSource.WIKI,doc/v632/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html:18595,Performance,perform,performs,18595," ; argsinitializer_list for a vector to apply func on. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 259 of file TExecutor.hxx. ◆ MapReduce() [4/5]. template<class F , class T , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . std::vector< T > & ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, T>. Execute a function over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed assecond argument as a parameter. ; argsVector of elements passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 282 of file TExecutor.hxx. ◆ MapReduce() [5/5]. template<class F , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . unsigned ; nTimes, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F>. Execute a function nTimes (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reducti",MatchSource.WIKI,doc/v632/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html:19716,Performance,perform,performs,19716,"e passed assecond argument as a parameter. ; argsVector of elements passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 282 of file TExecutor.hxx. ◆ MapReduce() [5/5]. template<class F , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . unsigned ; nTimes, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F>. Execute a function nTimes (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed as second argument as a parameter. ; nTimesNumber of times function should be called. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 213 of file TExecutor.hxx. ◆ operator=(). TExecutor & ROOT::Internal::TExecutor::operator= ; (; const TExecutor & ; ). delete . ◆ Policy(). ROOT::EExecutionPolicy ROOT::Internal::TExecutor::Policy ; (; ); const. inline . Return the execution policy the executor is set to. ; Definition at line 57 of file TExecutor.hxx. ◆ ResolveExecutorAndMap(). template<c",MatchSource.WIKI,doc/v632/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html:2474,Safety,avoid,avoid,2474," argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. ROOT::Internal::TExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. The signature of the reduce function should be (const std::vector<T>) -> T; An integer can be passed as the fourth argument indicating the number of chunks we want to divide our work in. (Note: Please be aware that chunking is only available when the policy is kMultiThread, ignoring this argument in other cases) This may be useful to avoid the overhead introduced when running really short tasks. In this case, the reduction function should be independent of the size of the vector returned by Map due to optimization of the number of chunks.; Examples:; root[] ROOT::Internal::TExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int>; &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::Internal::TExecutor; pool(ROOT::EExecutionPolicy::kMultiProcess); auto hist = pool.MapReduce(CreateAndFillHists, 10,; PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::Internal::TExecutorThis class implements the interface to execute the same task multiple times, sequentially or in paral...Definition TExecutor.hxx:37; ROOT::Internal::TExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> InvokeResult_t< F >Execute a function nTimes (M",MatchSource.WIKI,doc/v632/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html:1209,Usability,simpl,simply,1209,"ns |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::TExecutor Class Reference. ; This class implements the interface to execute the same task multiple times, sequentially or in parallel depending on the execution policy passed as a first parameter on construction, and possibly with different arguments every time. . ROOT::Internal::TExecutor::Map; The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of n workers; where n tipically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included. ROOT::::Internal::TExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. ROOT::Internal::TExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. The signature of the reduce function should be (c",MatchSource.WIKI,doc/v632/classROOT_1_1Internal_1_1TExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html:4456,Deployability,patch,patches,4456,"Returns a pointer to the previous element of the linked list or NULL if called on first(). ;  ; Option * prevwrap ();  Returns a pointer to the previous element of the linked list with wrap-around from first() to last(). ;  ; int type () const;  Returns Descriptor::type of this Option's Descriptor, or 0 if this Option is invalid (unused). ;  . Public Attributes; const char * arg;  Pointer to this Option's argument (if any). ;  ; const Descriptor * desc;  Pointer to this Option's Descriptor. ;  ; const char * name;  The name of the option as used on the command line. ;  ; int namelen;  The length of the option name. ;  . Private Member Functions; void init (const Descriptor *desc_, const char *name_, const char *arg_);  . Static Private Member Functions; static bool isTagged (Option *ptr);  ; static Option * tag (Option *ptr);  ; static Option * untag (Option *ptr);  . Private Attributes; Option * next_;  ; Option * prev_;  . #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/core/dictgen/res/OptionParser.h>; Constructor & Destructor Documentation. ◆ Option() [1/3]. ROOT::option::Option::Option ; (; ). inline . Creates a new Option that is a one-element linked list and has NULL desc, name, arg and namelen. ; Definition at line 766 of file OptionParser.h. ◆ Option() [2/3]. ROOT::option::Option::Option ; (; const Descriptor * ; desc_, . const char * ; name_, . const char * ; arg_ . ). inline . Creates a new Option that is a one-element linked list and has the given values for desc, name and arg. ; If name_ points at a character other than '-' it will be assumed to refer to a short option and namelen will be set to 1. Otherwise the length will extend to the first '=' character or the string's 0-terminator. ; Definition at line 781 of file OptionParser.h. ◆ Option() [3/3]. ROOT::option::Option::Option ; (; const Option & ; orig). inline . Makes *this a copy of orig except for the linked list pointers. ; After this operation *this",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html:3059,Integrability,wrap,wrap-around,3059,"e and arg. ;  ;  Option (const Option &orig);  Makes *this a copy of orig except for the linked list pointers. ;  ; void append (Option *new_last);  Makes new_last the new last() by chaining it into the list after last(). ;  ; int count ();  Returns the number of times this Option (or others with the same Descriptor::index) occurs in the argument vector. ;  ; Option * first ();  Returns a pointer to the first element of the linked list. ;  ; int index () const;  Returns Descriptor::index of this Option's Descriptor, or -1 if this Option is invalid (unused). ;  ; bool isFirst () const;  Returns true iff this is the first element of the linked list. ;  ; bool isLast () const;  Returns true iff this is the last element of the linked list. ;  ; Option * last ();  Returns a pointer to the last element of the linked list. ;  ; Option * next ();  Returns a pointer to the next element of the linked list or NULL if called on last(). ;  ; Option * nextwrap ();  Returns a pointer to the next element of the linked list with wrap-around from last() to first(). ;  ;  operator const Option * () const;  Casts from Option to const Option* but only if this Option is valid. ;  ;  operator Option * ();  Casts from Option to Option* but only if this Option is valid. ;  ; Option & operator= (const Option &orig);  Makes *this a copy of orig except for the linked list pointers. ;  ; Option * prev ();  Returns a pointer to the previous element of the linked list or NULL if called on first(). ;  ; Option * prevwrap ();  Returns a pointer to the previous element of the linked list with wrap-around from first() to last(). ;  ; int type () const;  Returns Descriptor::type of this Option's Descriptor, or 0 if this Option is invalid (unused). ;  . Public Attributes; const char * arg;  Pointer to this Option's argument (if any). ;  ; const Descriptor * desc;  Pointer to this Option's Descriptor. ;  ; const char * name;  The name of the option as used on the command line. ;  ; int namelen;  The len",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html:3617,Integrability,wrap,wrap-around,3617,"nused). ;  ; bool isFirst () const;  Returns true iff this is the first element of the linked list. ;  ; bool isLast () const;  Returns true iff this is the last element of the linked list. ;  ; Option * last ();  Returns a pointer to the last element of the linked list. ;  ; Option * next ();  Returns a pointer to the next element of the linked list or NULL if called on last(). ;  ; Option * nextwrap ();  Returns a pointer to the next element of the linked list with wrap-around from last() to first(). ;  ;  operator const Option * () const;  Casts from Option to const Option* but only if this Option is valid. ;  ;  operator Option * ();  Casts from Option to Option* but only if this Option is valid. ;  ; Option & operator= (const Option &orig);  Makes *this a copy of orig except for the linked list pointers. ;  ; Option * prev ();  Returns a pointer to the previous element of the linked list or NULL if called on first(). ;  ; Option * prevwrap ();  Returns a pointer to the previous element of the linked list with wrap-around from first() to last(). ;  ; int type () const;  Returns Descriptor::type of this Option's Descriptor, or 0 if this Option is invalid (unused). ;  . Public Attributes; const char * arg;  Pointer to this Option's argument (if any). ;  ; const Descriptor * desc;  Pointer to this Option's Descriptor. ;  ; const char * name;  The name of the option as used on the command line. ;  ; int namelen;  The length of the option name. ;  . Private Member Functions; void init (const Descriptor *desc_, const char *name_, const char *arg_);  . Static Private Member Functions; static bool isTagged (Option *ptr);  ; static Option * tag (Option *ptr);  ; static Option * untag (Option *ptr);  . Private Attributes; Option * next_;  ; Option * prev_;  . #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/core/dictgen/res/OptionParser.h>; Constructor & Destructor Documentation. ◆ Option() [1/3]. ROOT::option::Option::Option ; ",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html:9537,Integrability,wrap,wrap-around,9537,"ce. This is the most common way of handling conflicting options.; NoteThis method may be called on an unused/invalid option and will return a pointer to the option itself.; Tip:If you have options with opposite meanings (e.g. --enable-foo and --disable-foo), you can assign them the same Descriptor::index to get them into the same list. Distinguish them by Descriptor::type and all you have to do is check last()->type() to get the state listed last on the command line. ; Definition at line 643 of file OptionParser.h. ◆ next(). Option * ROOT::option::Option::next ; (; ). inline . Returns a pointer to the next element of the linked list or NULL if called on last(). ; If called on last() this method returns NULL. Otherwise it will return the option with the same Descriptor::index that follows this option on the command line. ; Definition at line 682 of file OptionParser.h. ◆ nextwrap(). Option * ROOT::option::Option::nextwrap ; (; ). inline . Returns a pointer to the next element of the linked list with wrap-around from last() to first(). ; If called on last() this method returns first(). Otherwise it will return the option with the same Descriptor::index that follows this option on the command line. ; Definition at line 695 of file OptionParser.h. ◆ operator const Option *(). ROOT::option::Option::operator const Option * ; (; ); const. inline . Casts from Option to const Option* but only if this Option is valid. ; If this Option is valid (i.e. desc!=NULL), returns this. Otherwise returns NULL. This allows testing an Option directly in an if-clause to see if it is used: if (options[CREATE]); {; ...; }; It also allows you to write loops like this: for (Option* opt = options[FILE]; opt; opt = opt->next()); fname = opt->arg; ... . Definition at line 736 of file OptionParser.h. ◆ operator Option *(). ROOT::option::Option::operator Option * ; (; ). inline . Casts from Option to Option* but only if this Option is valid. ; If this Option is valid (i.e. desc!=NULL), returns this",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html:11609,Integrability,wrap,wrap-around,11609," if-clause to see if it is used: if (options[CREATE]); {; ...; }; It also allows you to write loops like this: for (Option* opt = options[FILE]; opt; opt = opt->next()); fname = opt->arg; ... . Definition at line 757 of file OptionParser.h. ◆ operator=(). Option & ROOT::option::Option::operator= ; (; const Option & ; orig). inline . Makes *this a copy of orig except for the linked list pointers. ; After this operation *this will be a one-element linked list. ; Definition at line 792 of file OptionParser.h. ◆ prev(). Option * ROOT::option::Option::prev ; (; ). inline . Returns a pointer to the previous element of the linked list or NULL if called on first(). ; If called on first() this method returns NULL. Otherwise it will return the option with the same Descriptor::index that precedes this option on the command line. ; Definition at line 656 of file OptionParser.h. ◆ prevwrap(). Option * ROOT::option::Option::prevwrap ; (; ). inline . Returns a pointer to the previous element of the linked list with wrap-around from first() to last(). ; If called on first() this method returns last(). Otherwise it will return the option with the same Descriptor::index that precedes this option on the command line. ; Definition at line 669 of file OptionParser.h. ◆ tag(). static Option * ROOT::option::Option::tag ; (; Option * ; ptr). inlinestaticprivate . Definition at line 834 of file OptionParser.h. ◆ type(). int ROOT::option::Option::type ; (; ); const. inline . Returns Descriptor::type of this Option's Descriptor, or 0 if this Option is invalid (unused). ; Because this method (and last(), too) can be used even on unused Options with desc==0, you can (provided you arrange your types properly) switch on type() without testing validity first. enum OptionType { UNUSED=0, DISABLED=0, ENABLED=1 };; enum OptionIndex { FOO };; const Descriptor usage[] = {; { FOO, ENABLED, """", ""enable-foo"", Arg::None, 0 },; { FOO, DISABLED, """", ""disable-foo"", Arg::None, 0 },; { 0, 0, 0, 0, 0, 0 } };; ..",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html:14039,Integrability,message,messages,14039," inlinestaticprivate . Definition at line 839 of file OptionParser.h. Member Data Documentation. ◆ arg. const char* ROOT::option::Option::arg. Pointer to this Option's argument (if any). ; NULL if this option has no argument. Do not confuse this with the empty string which is a valid argument. ; Definition at line 500 of file OptionParser.h. ◆ desc. const Descriptor* ROOT::option::Option::desc. Pointer to this Option's Descriptor. ; Remember that the first dummy descriptor (see Descriptor::longopt) is used for unknown options.; Attentiondesc==NULL signals that this Option is unused. This is the default state of elements in the result array. You don't need to test desc explicitly. You can simply write something like this: if (options[CREATE]); {; ...; }; This works because of operator const Option*() . ; Definition at line 476 of file OptionParser.h. ◆ name. const char* ROOT::option::Option::name. The name of the option as used on the command line. ; The main purpose of this string is to be presented to the user in messages.; In the case of a long option, this is the actual argv pointer, i.e. the first character is a '-'. In the case of a short option this points to the option character within the argv string.; Note that in the case of a short option group or an attached option argument, this string will contain additional characters following the actual name. Use namelen to filter out the actual option name only. ; Definition at line 492 of file OptionParser.h. ◆ namelen. int ROOT::option::Option::namelen. The length of the option name. ; Because name points into the actual argv string, the option name may be followed by more characters (e.g. other short options in the same short option group). This value is the number of bytes (not characters!) that are part of the actual name.; For a short option, this length is always 1. For a long option this length is always at least 2 if single minus long options are permitted and at least 3 if they are disabled.; NoteIn the p",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html:5142,Modifiability,extend,extend,5142," . Static Private Member Functions; static bool isTagged (Option *ptr);  ; static Option * tag (Option *ptr);  ; static Option * untag (Option *ptr);  . Private Attributes; Option * next_;  ; Option * prev_;  . #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/core/dictgen/res/OptionParser.h>; Constructor & Destructor Documentation. ◆ Option() [1/3]. ROOT::option::Option::Option ; (; ). inline . Creates a new Option that is a one-element linked list and has NULL desc, name, arg and namelen. ; Definition at line 766 of file OptionParser.h. ◆ Option() [2/3]. ROOT::option::Option::Option ; (; const Descriptor * ; desc_, . const char * ; name_, . const char * ; arg_ . ). inline . Creates a new Option that is a one-element linked list and has the given values for desc, name and arg. ; If name_ points at a character other than '-' it will be assumed to refer to a short option and namelen will be set to 1. Otherwise the length will extend to the first '=' character or the string's 0-terminator. ; Definition at line 781 of file OptionParser.h. ◆ Option() [3/3]. ROOT::option::Option::Option ; (; const Option & ; orig). inline . Makes *this a copy of orig except for the linked list pointers. ; After this operation *this will be a one-element linked list. ; Definition at line 803 of file OptionParser.h. Member Function Documentation. ◆ append(). void ROOT::option::Option::append ; (; Option * ; new_last). inline . Makes new_last the new last() by chaining it into the list after last(). ; It doesn't matter which element you call append() on. The new element will always be appended to last().; Attentionnew_last must not yet be part of a list, or that list will become corrupted, because this method does not unchain new_last from an existing list. ; Definition at line 710 of file OptionParser.h. ◆ count(). int ROOT::option::Option::count ; (; ). inline . Returns the number of times this Option (or others with the same Descriptor::index) o",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html:15191,Modifiability,extend,extend,15191,"ption as used on the command line. ; The main purpose of this string is to be presented to the user in messages.; In the case of a long option, this is the actual argv pointer, i.e. the first character is a '-'. In the case of a short option this points to the option character within the argv string.; Note that in the case of a short option group or an attached option argument, this string will contain additional characters following the actual name. Use namelen to filter out the actual option name only. ; Definition at line 492 of file OptionParser.h. ◆ namelen. int ROOT::option::Option::namelen. The length of the option name. ; Because name points into the actual argv string, the option name may be followed by more characters (e.g. other short options in the same short option group). This value is the number of bytes (not characters!) that are part of the actual name.; For a short option, this length is always 1. For a long option this length is always at least 2 if single minus long options are permitted and at least 3 if they are disabled.; NoteIn the pathological case of a minus within a short option group (e.g. -xf-z), this length is incorrect, because this case will be misinterpreted as a long option and the name will therefore extend to the string's 0-terminator or a following '="" character if there is one. This is irrelevant for most uses of name and namelen. If you really need to distinguish the case of a long and a short option, compare name to the argv pointers. A long option's name is always identical to one of them, whereas a short option's is never. ; Definition at line 521 of file OptionParser.h. ◆ next_. Option* ROOT::option::Option::next_. private . Definition at line 455 of file OptionParser.h. ◆ prev_. Option* ROOT::option::Option::prev_. private . Definition at line 456 of file OptionParser.h. core/dictgen/res/OptionParser.h. ROOToptionOption. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html:10050,Testability,test,testing,10050," ; (; ). inline . Returns a pointer to the next element of the linked list or NULL if called on last(). ; If called on last() this method returns NULL. Otherwise it will return the option with the same Descriptor::index that follows this option on the command line. ; Definition at line 682 of file OptionParser.h. ◆ nextwrap(). Option * ROOT::option::Option::nextwrap ; (; ). inline . Returns a pointer to the next element of the linked list with wrap-around from last() to first(). ; If called on last() this method returns first(). Otherwise it will return the option with the same Descriptor::index that follows this option on the command line. ; Definition at line 695 of file OptionParser.h. ◆ operator const Option *(). ROOT::option::Option::operator const Option * ; (; ); const. inline . Casts from Option to const Option* but only if this Option is valid. ; If this Option is valid (i.e. desc!=NULL), returns this. Otherwise returns NULL. This allows testing an Option directly in an if-clause to see if it is used: if (options[CREATE]); {; ...; }; It also allows you to write loops like this: for (Option* opt = options[FILE]; opt; opt = opt->next()); fname = opt->arg; ... . Definition at line 736 of file OptionParser.h. ◆ operator Option *(). ROOT::option::Option::operator Option * ; (; ). inline . Casts from Option to Option* but only if this Option is valid. ; If this Option is valid (i.e. desc!=NULL), returns this. Otherwise returns NULL. This allows testing an Option directly in an if-clause to see if it is used: if (options[CREATE]); {; ...; }; It also allows you to write loops like this: for (Option* opt = options[FILE]; opt; opt = opt->next()); fname = opt->arg; ... . Definition at line 757 of file OptionParser.h. ◆ operator=(). Option & ROOT::option::Option::operator= ; (; const Option & ; orig). inline . Makes *this a copy of orig except for the linked list pointers. ; After this operation *this will be a one-element linked list. ; Definition at line 792 of file ",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html:10561,Testability,test,testing,10561,"method returns first(). Otherwise it will return the option with the same Descriptor::index that follows this option on the command line. ; Definition at line 695 of file OptionParser.h. ◆ operator const Option *(). ROOT::option::Option::operator const Option * ; (; ); const. inline . Casts from Option to const Option* but only if this Option is valid. ; If this Option is valid (i.e. desc!=NULL), returns this. Otherwise returns NULL. This allows testing an Option directly in an if-clause to see if it is used: if (options[CREATE]); {; ...; }; It also allows you to write loops like this: for (Option* opt = options[FILE]; opt; opt = opt->next()); fname = opt->arg; ... . Definition at line 736 of file OptionParser.h. ◆ operator Option *(). ROOT::option::Option::operator Option * ; (; ). inline . Casts from Option to Option* but only if this Option is valid. ; If this Option is valid (i.e. desc!=NULL), returns this. Otherwise returns NULL. This allows testing an Option directly in an if-clause to see if it is used: if (options[CREATE]); {; ...; }; It also allows you to write loops like this: for (Option* opt = options[FILE]; opt; opt = opt->next()); fname = opt->arg; ... . Definition at line 757 of file OptionParser.h. ◆ operator=(). Option & ROOT::option::Option::operator= ; (; const Option & ; orig). inline . Makes *this a copy of orig except for the linked list pointers. ; After this operation *this will be a one-element linked list. ; Definition at line 792 of file OptionParser.h. ◆ prev(). Option * ROOT::option::Option::prev ; (; ). inline . Returns a pointer to the previous element of the linked list or NULL if called on first(). ; If called on first() this method returns NULL. Otherwise it will return the option with the same Descriptor::index that precedes this option on the command line. ; Definition at line 656 of file OptionParser.h. ◆ prevwrap(). Option * ROOT::option::Option::prevwrap ; (; ). inline . Returns a pointer to the previous element of the linked l",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html:12327,Testability,test,testing,12327,"(). ; If called on first() this method returns NULL. Otherwise it will return the option with the same Descriptor::index that precedes this option on the command line. ; Definition at line 656 of file OptionParser.h. ◆ prevwrap(). Option * ROOT::option::Option::prevwrap ; (; ). inline . Returns a pointer to the previous element of the linked list with wrap-around from first() to last(). ; If called on first() this method returns last(). Otherwise it will return the option with the same Descriptor::index that precedes this option on the command line. ; Definition at line 669 of file OptionParser.h. ◆ tag(). static Option * ROOT::option::Option::tag ; (; Option * ; ptr). inlinestaticprivate . Definition at line 834 of file OptionParser.h. ◆ type(). int ROOT::option::Option::type ; (; ); const. inline . Returns Descriptor::type of this Option's Descriptor, or 0 if this Option is invalid (unused). ; Because this method (and last(), too) can be used even on unused Options with desc==0, you can (provided you arrange your types properly) switch on type() without testing validity first. enum OptionType { UNUSED=0, DISABLED=0, ENABLED=1 };; enum OptionIndex { FOO };; const Descriptor usage[] = {; { FOO, ENABLED, """", ""enable-foo"", Arg::None, 0 },; { FOO, DISABLED, """", ""disable-foo"", Arg::None, 0 },; { 0, 0, 0, 0, 0, 0 } };; ...; switch(options[FOO].last()->type()) // no validity check required!; {; case ENABLED: ...; case DISABLED: ... // UNUSED==DISABLED !; }; ROOT::option::Arg::Nonestatic ArgStatus None(const Option &, bool)For options that don't take an argument: Returns ARG_NONE.Definition OptionParser.h:907. Definition at line 544 of file OptionParser.h. ◆ untag(). static Option * ROOT::option::Option::untag ; (; Option * ; ptr). inlinestaticprivate . Definition at line 839 of file OptionParser.h. Member Data Documentation. ◆ arg. const char* ROOT::option::Option::arg. Pointer to this Option's argument (if any). ; NULL if this option has no argument. Do not confuse this w",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html:13676,Testability,test,test,13676,"ED: ...; case DISABLED: ... // UNUSED==DISABLED !; }; ROOT::option::Arg::Nonestatic ArgStatus None(const Option &, bool)For options that don't take an argument: Returns ARG_NONE.Definition OptionParser.h:907. Definition at line 544 of file OptionParser.h. ◆ untag(). static Option * ROOT::option::Option::untag ; (; Option * ; ptr). inlinestaticprivate . Definition at line 839 of file OptionParser.h. Member Data Documentation. ◆ arg. const char* ROOT::option::Option::arg. Pointer to this Option's argument (if any). ; NULL if this option has no argument. Do not confuse this with the empty string which is a valid argument. ; Definition at line 500 of file OptionParser.h. ◆ desc. const Descriptor* ROOT::option::Option::desc. Pointer to this Option's Descriptor. ; Remember that the first dummy descriptor (see Descriptor::longopt) is used for unknown options.; Attentiondesc==NULL signals that this Option is unused. This is the default state of elements in the result array. You don't need to test desc explicitly. You can simply write something like this: if (options[CREATE]); {; ...; }; This works because of operator const Option*() . ; Definition at line 476 of file OptionParser.h. ◆ name. const char* ROOT::option::Option::name. The name of the option as used on the command line. ; The main purpose of this string is to be presented to the user in messages.; In the case of a long option, this is the actual argv pointer, i.e. the first character is a '-'. In the case of a short option this points to the option character within the argv string.; Note that in the case of a short option group or an attached option argument, this string will contain additional characters following the actual name. Use namelen to filter out the actual option name only. ; Definition at line 492 of file OptionParser.h. ◆ namelen. int ROOT::option::Option::namelen. The length of the option name. ; Because name points into the actual argv string, the option name may be followed by more characters (e.",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html:13706,Usability,simpl,simply,13706,"ROOT::option::Arg::Nonestatic ArgStatus None(const Option &, bool)For options that don't take an argument: Returns ARG_NONE.Definition OptionParser.h:907. Definition at line 544 of file OptionParser.h. ◆ untag(). static Option * ROOT::option::Option::untag ; (; Option * ; ptr). inlinestaticprivate . Definition at line 839 of file OptionParser.h. Member Data Documentation. ◆ arg. const char* ROOT::option::Option::arg. Pointer to this Option's argument (if any). ; NULL if this option has no argument. Do not confuse this with the empty string which is a valid argument. ; Definition at line 500 of file OptionParser.h. ◆ desc. const Descriptor* ROOT::option::Option::desc. Pointer to this Option's Descriptor. ; Remember that the first dummy descriptor (see Descriptor::longopt) is used for unknown options.; Attentiondesc==NULL signals that this Option is unused. This is the default state of elements in the result array. You don't need to test desc explicitly. You can simply write something like this: if (options[CREATE]); {; ...; }; This works because of operator const Option*() . ; Definition at line 476 of file OptionParser.h. ◆ name. const char* ROOT::option::Option::name. The name of the option as used on the command line. ; The main purpose of this string is to be presented to the user in messages.; In the case of a long option, this is the actual argv pointer, i.e. the first character is a '-'. In the case of a short option this points to the option character within the argv string.; Note that in the case of a short option group or an attached option argument, this string will contain additional characters following the actual name. Use namelen to filter out the actual option name only. ; Definition at line 492 of file OptionParser.h. ◆ namelen. int ROOT::option::Option::namelen. The length of the option name. ; Because name points into the actual argv string, the option name may be followed by more characters (e.g. other short options in the same short option group).",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html:723,Availability,error,error,723,". ROOT: ROOT::option::Parser Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::option::Parser Class Reference. ; Checks argument vectors for validity and parses them into data structures that are easier to work with. ; Example:int main(int argc, char* argv[]); {; argc-=(argc>0); argv+=(argc>0); // skip program name argv[0] if present; option::Stats stats(usage, argc, argv);; option::Option options[stats.options_max], buffer[stats.buffer_max];; option::Parser parse(usage, argc, argv, options, buffer);; ; if (parse.error()); return 1;; ; if (options[HELP]); ...; mainint main()Definition Prototype.cxx:12; ROOT::option::OptionA parsed option from the command line together with its argument if it has one.Definition OptionParser.h:454; ROOT::option::ParserChecks argument vectors for validity and parses them into data structures that are easier to work wit...Definition OptionParser.h:1062; ROOT::option::Parser::parsevoid parse(bool gnu, const Descriptor usage[], int argc, const char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1)Parses the given argument vector.Definition OptionParser.h:1500; ROOT::option::StatsDetermines the minimum lengths of the buffer and options arrays used for Parser.Definition OptionParser.h:932; ; Definition at line 1061 of file OptionParser.h. Classes; struct  Action;  ; class  StoreOptionAction;  . Public Member Functions;  Parser ();  Creates a new Parser. ;  ;  Parser (bool gnu, const Descriptor usage[], int argc, char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1);  Parser(...) with non-const argv. ;  ;  Parser (bool gnu, const Descriptor usage[], int argc, const char **argv, Option options[], Option buffer[], int min_a",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Parser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html:2569,Availability,error,error,2569," . Public Member Functions;  Parser ();  Creates a new Parser. ;  ;  Parser (bool gnu, const Descriptor usage[], int argc, char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1);  Parser(...) with non-const argv. ;  ;  Parser (bool gnu, const Descriptor usage[], int argc, const char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1);  Creates a new Parser and immediately parses the given argument vector. ;  ;  Parser (const Descriptor usage[], int argc, char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1);  POSIX Parser(...) (gnu==false) with non-const argv. ;  ;  Parser (const Descriptor usage[], int argc, const char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1);  POSIX Parser(...) (gnu==false). ;  ; bool error ();  Returns true if an unrecoverable error occurred while parsing options. ;  ; const char * nonOption (int i);  Returns nonOptions()[i] (without checking if i is in range!). ;  ; const char ** nonOptions ();  Returns a pointer to an array of non-option arguments (only valid if nonOptionsCount() >0 ). ;  ; int nonOptionsCount ();  Returns the number of non-option arguments that remained at the end of the most recent parse() that actually encountered non-option arguments. ;  ; int optionsCount ();  Returns the number of valid Option objects in buffer[]. ;  ; void parse (bool gnu, const Descriptor usage[], int argc, char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1);  parse() with non-const argv. ;  ; void parse (bool gnu, const Descriptor usage[], int argc, const char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1);  Parses the given argument vector. ;  ; void parse (const Descriptor usag",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Parser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html:2613,Availability,error,error,2613," . Public Member Functions;  Parser ();  Creates a new Parser. ;  ;  Parser (bool gnu, const Descriptor usage[], int argc, char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1);  Parser(...) with non-const argv. ;  ;  Parser (bool gnu, const Descriptor usage[], int argc, const char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1);  Creates a new Parser and immediately parses the given argument vector. ;  ;  Parser (const Descriptor usage[], int argc, char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1);  POSIX Parser(...) (gnu==false) with non-const argv. ;  ;  Parser (const Descriptor usage[], int argc, const char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1);  POSIX Parser(...) (gnu==false). ;  ; bool error ();  Returns true if an unrecoverable error occurred while parsing options. ;  ; const char * nonOption (int i);  Returns nonOptions()[i] (without checking if i is in range!). ;  ; const char ** nonOptions ();  Returns a pointer to an array of non-option arguments (only valid if nonOptionsCount() >0 ). ;  ; int nonOptionsCount ();  Returns the number of non-option arguments that remained at the end of the most recent parse() that actually encountered non-option arguments. ;  ; int optionsCount ();  Returns the number of valid Option objects in buffer[]. ;  ; void parse (bool gnu, const Descriptor usage[], int argc, char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1);  parse() with non-const argv. ;  ; void parse (bool gnu, const Descriptor usage[], int argc, const char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1);  Parses the given argument vector. ;  ; void parse (const Descriptor usag",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Parser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html:9845,Availability,error,error,9845," usage[], . int ; argc, . char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . Parser(...) with non-const argv. ; Definition at line 1089 of file OptionParser.h. ◆ Parser() [4/5]. ROOT::option::Parser::Parser ; (; const Descriptor ; usage[], . int ; argc, . const char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . POSIX Parser(...) (gnu==false). ; Definition at line 1097 of file OptionParser.h. ◆ Parser() [5/5]. ROOT::option::Parser::Parser ; (; const Descriptor ; usage[], . int ; argc, . char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . POSIX Parser(...) (gnu==false) with non-const argv. ; Definition at line 1105 of file OptionParser.h. Member Function Documentation. ◆ error(). bool ROOT::option::Parser::error ; (; ). inline . Returns true if an unrecoverable error occurred while parsing options. ; An illegal argument to an option (i.e. CheckArg returns ARG_ILLEGAL) is an unrecoverable error that aborts the parse. Unknown options are only an error if their CheckArg function returns ARG_ILLEGAL. Otherwise they are collected. In that case if you want to exit the program if either an illegal argument or an unknown option has been passed, use code like this; if (parser.error() || options[UNKNOWN]); exit(1);. Definition at line 1264 of file OptionParser.h. ◆ instr(). static bool ROOT::option::Parser::instr ; (; char ; ch, . const char * ; st . ). inlinestaticprivate . Definition at line 1346 of file OptionParser.h. ◆ nonOption(). const char * ROOT::option::Parser::nonOption ; (; int ; i). inline . Returns nonOptions()[i] (without checking if i is in range!). ; Definition at line 1244 of file OptionParser.h. ◆ nonOptions(). const char ** ROOT::option::Parser:",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Parser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html:9881,Availability,error,error,9881,"char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . Parser(...) with non-const argv. ; Definition at line 1089 of file OptionParser.h. ◆ Parser() [4/5]. ROOT::option::Parser::Parser ; (; const Descriptor ; usage[], . int ; argc, . const char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . POSIX Parser(...) (gnu==false). ; Definition at line 1097 of file OptionParser.h. ◆ Parser() [5/5]. ROOT::option::Parser::Parser ; (; const Descriptor ; usage[], . int ; argc, . char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . POSIX Parser(...) (gnu==false) with non-const argv. ; Definition at line 1105 of file OptionParser.h. Member Function Documentation. ◆ error(). bool ROOT::option::Parser::error ; (; ). inline . Returns true if an unrecoverable error occurred while parsing options. ; An illegal argument to an option (i.e. CheckArg returns ARG_ILLEGAL) is an unrecoverable error that aborts the parse. Unknown options are only an error if their CheckArg function returns ARG_ILLEGAL. Otherwise they are collected. In that case if you want to exit the program if either an illegal argument or an unknown option has been passed, use code like this; if (parser.error() || options[UNKNOWN]); exit(1);. Definition at line 1264 of file OptionParser.h. ◆ instr(). static bool ROOT::option::Parser::instr ; (; char ; ch, . const char * ; st . ). inlinestaticprivate . Definition at line 1346 of file OptionParser.h. ◆ nonOption(). const char * ROOT::option::Parser::nonOption ; (; int ; i). inline . Returns nonOptions()[i] (without checking if i is in range!). ; Definition at line 1244 of file OptionParser.h. ◆ nonOptions(). const char ** ROOT::option::Parser::nonOptions ; (; ). inline",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Parser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html:9937,Availability,error,error,9937,"; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . Parser(...) with non-const argv. ; Definition at line 1089 of file OptionParser.h. ◆ Parser() [4/5]. ROOT::option::Parser::Parser ; (; const Descriptor ; usage[], . int ; argc, . const char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . POSIX Parser(...) (gnu==false). ; Definition at line 1097 of file OptionParser.h. ◆ Parser() [5/5]. ROOT::option::Parser::Parser ; (; const Descriptor ; usage[], . int ; argc, . char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . POSIX Parser(...) (gnu==false) with non-const argv. ; Definition at line 1105 of file OptionParser.h. Member Function Documentation. ◆ error(). bool ROOT::option::Parser::error ; (; ). inline . Returns true if an unrecoverable error occurred while parsing options. ; An illegal argument to an option (i.e. CheckArg returns ARG_ILLEGAL) is an unrecoverable error that aborts the parse. Unknown options are only an error if their CheckArg function returns ARG_ILLEGAL. Otherwise they are collected. In that case if you want to exit the program if either an illegal argument or an unknown option has been passed, use code like this; if (parser.error() || options[UNKNOWN]); exit(1);. Definition at line 1264 of file OptionParser.h. ◆ instr(). static bool ROOT::option::Parser::instr ; (; char ; ch, . const char * ; st . ). inlinestaticprivate . Definition at line 1346 of file OptionParser.h. ◆ nonOption(). const char * ROOT::option::Parser::nonOption ; (; int ; i). inline . Returns nonOptions()[i] (without checking if i is in range!). ; Definition at line 1244 of file OptionParser.h. ◆ nonOptions(). const char ** ROOT::option::Parser::nonOptions ; (; ). inline . Returns a pointer to an array of non-option arguments (only va",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Parser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html:10066,Availability,error,error,10066,"nst argv. ; Definition at line 1089 of file OptionParser.h. ◆ Parser() [4/5]. ROOT::option::Parser::Parser ; (; const Descriptor ; usage[], . int ; argc, . const char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . POSIX Parser(...) (gnu==false). ; Definition at line 1097 of file OptionParser.h. ◆ Parser() [5/5]. ROOT::option::Parser::Parser ; (; const Descriptor ; usage[], . int ; argc, . char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . POSIX Parser(...) (gnu==false) with non-const argv. ; Definition at line 1105 of file OptionParser.h. Member Function Documentation. ◆ error(). bool ROOT::option::Parser::error ; (; ). inline . Returns true if an unrecoverable error occurred while parsing options. ; An illegal argument to an option (i.e. CheckArg returns ARG_ILLEGAL) is an unrecoverable error that aborts the parse. Unknown options are only an error if their CheckArg function returns ARG_ILLEGAL. Otherwise they are collected. In that case if you want to exit the program if either an illegal argument or an unknown option has been passed, use code like this; if (parser.error() || options[UNKNOWN]); exit(1);. Definition at line 1264 of file OptionParser.h. ◆ instr(). static bool ROOT::option::Parser::instr ; (; char ; ch, . const char * ; st . ). inlinestaticprivate . Definition at line 1346 of file OptionParser.h. ◆ nonOption(). const char * ROOT::option::Parser::nonOption ; (; int ; i). inline . Returns nonOptions()[i] (without checking if i is in range!). ; Definition at line 1244 of file OptionParser.h. ◆ nonOptions(). const char ** ROOT::option::Parser::nonOptions ; (; ). inline . Returns a pointer to an array of non-option arguments (only valid if nonOptionsCount() >0 ). ; Note; parse() does not copy arguments, so this pointer points into the actual argum",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Parser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html:10123,Availability,error,error,10123,"T::option::Parser::Parser ; (; const Descriptor ; usage[], . int ; argc, . const char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . POSIX Parser(...) (gnu==false). ; Definition at line 1097 of file OptionParser.h. ◆ Parser() [5/5]. ROOT::option::Parser::Parser ; (; const Descriptor ; usage[], . int ; argc, . char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . POSIX Parser(...) (gnu==false) with non-const argv. ; Definition at line 1105 of file OptionParser.h. Member Function Documentation. ◆ error(). bool ROOT::option::Parser::error ; (; ). inline . Returns true if an unrecoverable error occurred while parsing options. ; An illegal argument to an option (i.e. CheckArg returns ARG_ILLEGAL) is an unrecoverable error that aborts the parse. Unknown options are only an error if their CheckArg function returns ARG_ILLEGAL. Otherwise they are collected. In that case if you want to exit the program if either an illegal argument or an unknown option has been passed, use code like this; if (parser.error() || options[UNKNOWN]); exit(1);. Definition at line 1264 of file OptionParser.h. ◆ instr(). static bool ROOT::option::Parser::instr ; (; char ; ch, . const char * ; st . ). inlinestaticprivate . Definition at line 1346 of file OptionParser.h. ◆ nonOption(). const char * ROOT::option::Parser::nonOption ; (; int ; i). inline . Returns nonOptions()[i] (without checking if i is in range!). ; Definition at line 1244 of file OptionParser.h. ◆ nonOptions(). const char ** ROOT::option::Parser::nonOptions ; (; ). inline . Returns a pointer to an array of non-option arguments (only valid if nonOptionsCount() >0 ). ; Note; parse() does not copy arguments, so this pointer points into the actual argument vector as passed to parse(). ; As explained at nonOptionsCount() this pointe",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Parser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html:10351,Availability,error,error,10351,"e . POSIX Parser(...) (gnu==false). ; Definition at line 1097 of file OptionParser.h. ◆ Parser() [5/5]. ROOT::option::Parser::Parser ; (; const Descriptor ; usage[], . int ; argc, . char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . POSIX Parser(...) (gnu==false) with non-const argv. ; Definition at line 1105 of file OptionParser.h. Member Function Documentation. ◆ error(). bool ROOT::option::Parser::error ; (; ). inline . Returns true if an unrecoverable error occurred while parsing options. ; An illegal argument to an option (i.e. CheckArg returns ARG_ILLEGAL) is an unrecoverable error that aborts the parse. Unknown options are only an error if their CheckArg function returns ARG_ILLEGAL. Otherwise they are collected. In that case if you want to exit the program if either an illegal argument or an unknown option has been passed, use code like this; if (parser.error() || options[UNKNOWN]); exit(1);. Definition at line 1264 of file OptionParser.h. ◆ instr(). static bool ROOT::option::Parser::instr ; (; char ; ch, . const char * ; st . ). inlinestaticprivate . Definition at line 1346 of file OptionParser.h. ◆ nonOption(). const char * ROOT::option::Parser::nonOption ; (; int ; i). inline . Returns nonOptions()[i] (without checking if i is in range!). ; Definition at line 1244 of file OptionParser.h. ◆ nonOptions(). const char ** ROOT::option::Parser::nonOptions ; (; ). inline . Returns a pointer to an array of non-option arguments (only valid if nonOptionsCount() >0 ). ; Note; parse() does not copy arguments, so this pointer points into the actual argument vector as passed to parse(). ; As explained at nonOptionsCount() this pointer is only changed by parse() calls that actually encounter non-option arguments. A parse() call that encounters only options, will not change nonOptions(). . Definition at line 1236 of file OptionParser.h. ◆ nonOptionsCount(). int ROOT:",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Parser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html:4647,Deployability,patch,patches,4647," **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1);  POSIX parse() (gnu==false) with non-const argv. ;  ; void parse (const Descriptor usage[], int argc, const char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1);  POSIX parse() (gnu==false). ;  . Static Private Member Functions; static bool instr (char ch, const char *st);  ; static void shift (const char **args, int count);  ; static bool streq (const char *st1, const char *st2);  ; static bool streqabbr (const char *st1, const char *st2, long long min);  ; static bool workhorse (bool gnu, const Descriptor usage[], int numargs, const char **args, Action &action, bool single_minus_longopt, bool print_errors, int min_abbr_len);  . Private Attributes; bool err;  ; const char ** nonop_args;  ; int nonop_count;  ; int op_count;  . Friends; struct Stats;  . #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/core/dictgen/res/OptionParser.h>; Constructor & Destructor Documentation. ◆ Parser() [1/5]. ROOT::option::Parser::Parser ; (; ). inline . Creates a new Parser. ; Definition at line 1072 of file OptionParser.h. ◆ Parser() [2/5]. ROOT::option::Parser::Parser ; (; bool ; gnu, . const Descriptor ; usage[], . int ; argc, . const char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . Creates a new Parser and immediately parses the given argument vector. ; Parameters. gnuif true, parse() will not stop at the first non-option argument. Instead it will reorder arguments so that all non-options are at the end. This is the default behaviour of GNU getopt() but is not conforming to POSIX. ; Note, that once the argument vector has been reordered, the gnu flag will have no further effect on this argument vector. So it is enough to pass gnu==true when creating Stats. ",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Parser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html:10077,Safety,abort,aborts,10077,"nst argv. ; Definition at line 1089 of file OptionParser.h. ◆ Parser() [4/5]. ROOT::option::Parser::Parser ; (; const Descriptor ; usage[], . int ; argc, . const char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . POSIX Parser(...) (gnu==false). ; Definition at line 1097 of file OptionParser.h. ◆ Parser() [5/5]. ROOT::option::Parser::Parser ; (; const Descriptor ; usage[], . int ; argc, . char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . POSIX Parser(...) (gnu==false) with non-const argv. ; Definition at line 1105 of file OptionParser.h. Member Function Documentation. ◆ error(). bool ROOT::option::Parser::error ; (; ). inline . Returns true if an unrecoverable error occurred while parsing options. ; An illegal argument to an option (i.e. CheckArg returns ARG_ILLEGAL) is an unrecoverable error that aborts the parse. Unknown options are only an error if their CheckArg function returns ARG_ILLEGAL. Otherwise they are collected. In that case if you want to exit the program if either an illegal argument or an unknown option has been passed, use code like this; if (parser.error() || options[UNKNOWN]); exit(1);. Definition at line 1264 of file OptionParser.h. ◆ instr(). static bool ROOT::option::Parser::instr ; (; char ; ch, . const char * ; st . ). inlinestaticprivate . Definition at line 1346 of file OptionParser.h. ◆ nonOption(). const char * ROOT::option::Parser::nonOption ; (; int ; i). inline . Returns nonOptions()[i] (without checking if i is in range!). ; Definition at line 1244 of file OptionParser.h. ◆ nonOptions(). const char ** ROOT::option::Parser::nonOptions ; (; ). inline . Returns a pointer to an array of non-option arguments (only valid if nonOptionsCount() >0 ). ; Note; parse() does not copy arguments, so this pointer points into the actual argum",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Parser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html:8493,Security,access,access,8493,"ns take precedence over short options and short option groups. E.g. -file would be interpreted as --file and not as -f -i -l -e (assuming a long option named ""file"" exists). ; bufmaxThe greatest index in the buffer[] array that parse() will write to is bufmax-1. If there are more options, they will be processed (in particular their CheckArg will be called) but not stored. ; If you used Stats::buffer_max to dimension this array, you can pass -1 (or not pass bufmax at all) which tells parse() that the buffer is ""large enough"". . AttentionRemember that options and buffer store Option objects, not pointers. Therefore it is not possible for the same object to be in both arrays. For those options that are found in both buffer[] and options[] the respective objects are independent copies. And only the objects in options[] are properly linked via Option::next() and Option::prev(). You can iterate over buffer[] to process all options in the order they appear in the argument vector, but if you want access to the other Options with the same Descriptor::index, then you must access the linked list via options[]. You can get the linked list in options from a buffer object via something like options[buffer[i].index()]. ; Definition at line 1081 of file OptionParser.h. ◆ Parser() [3/5]. ROOT::option::Parser::Parser ; (; bool ; gnu, . const Descriptor ; usage[], . int ; argc, . char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . Parser(...) with non-const argv. ; Definition at line 1089 of file OptionParser.h. ◆ Parser() [4/5]. ROOT::option::Parser::Parser ; (; const Descriptor ; usage[], . int ; argc, . const char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . POSIX Parser(...) (gnu==false). ; Definition at line 1097 of file OptionParser.h. ◆ Parser() [5/5]. ROOT::option::Pa",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Parser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html:8568,Security,access,access,8568,"ns take precedence over short options and short option groups. E.g. -file would be interpreted as --file and not as -f -i -l -e (assuming a long option named ""file"" exists). ; bufmaxThe greatest index in the buffer[] array that parse() will write to is bufmax-1. If there are more options, they will be processed (in particular their CheckArg will be called) but not stored. ; If you used Stats::buffer_max to dimension this array, you can pass -1 (or not pass bufmax at all) which tells parse() that the buffer is ""large enough"". . AttentionRemember that options and buffer store Option objects, not pointers. Therefore it is not possible for the same object to be in both arrays. For those options that are found in both buffer[] and options[] the respective objects are independent copies. And only the objects in options[] are properly linked via Option::next() and Option::prev(). You can iterate over buffer[] to process all options in the order they appear in the argument vector, but if you want access to the other Options with the same Descriptor::index, then you must access the linked list via options[]. You can get the linked list in options from a buffer object via something like options[buffer[i].index()]. ; Definition at line 1081 of file OptionParser.h. ◆ Parser() [3/5]. ROOT::option::Parser::Parser ; (; bool ; gnu, . const Descriptor ; usage[], . int ; argc, . char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . Parser(...) with non-const argv. ; Definition at line 1089 of file OptionParser.h. ◆ Parser() [4/5]. ROOT::option::Parser::Parser ; (; const Descriptor ; usage[], . int ; argc, . const char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . POSIX Parser(...) (gnu==false). ; Definition at line 1097 of file OptionParser.h. ◆ Parser() [5/5]. ROOT::option::Pa",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Parser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html:16539,Security,access,access,16539,"ns take precedence over short options and short option groups. E.g. -file would be interpreted as --file and not as -f -i -l -e (assuming a long option named ""file"" exists). ; bufmaxThe greatest index in the buffer[] array that parse() will write to is bufmax-1. If there are more options, they will be processed (in particular their CheckArg will be called) but not stored. ; If you used Stats::buffer_max to dimension this array, you can pass -1 (or not pass bufmax at all) which tells parse() that the buffer is ""large enough"". . AttentionRemember that options and buffer store Option objects, not pointers. Therefore it is not possible for the same object to be in both arrays. For those options that are found in both buffer[] and options[] the respective objects are independent copies. And only the objects in options[] are properly linked via Option::next() and Option::prev(). You can iterate over buffer[] to process all options in the order they appear in the argument vector, but if you want access to the other Options with the same Descriptor::index, then you must access the linked list via options[]. You can get the linked list in options from a buffer object via something like options[buffer[i].index()]. ; Definition at line 1500 of file OptionParser.h. ◆ parse() [3/4]. void ROOT::option::Parser::parse ; (; const Descriptor ; usage[], . int ; argc, . char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . POSIX parse() (gnu==false) with non-const argv. ; Definition at line 1186 of file OptionParser.h. ◆ parse() [4/4]. void ROOT::option::Parser::parse ; (; const Descriptor ; usage[], . int ; argc, . const char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . POSIX parse() (gnu==false). ; Definition at line 1179 of file OptionParser.h. ◆ shift(). static void ROOT::op",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Parser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html
https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html:16614,Security,access,access,16614,"ns take precedence over short options and short option groups. E.g. -file would be interpreted as --file and not as -f -i -l -e (assuming a long option named ""file"" exists). ; bufmaxThe greatest index in the buffer[] array that parse() will write to is bufmax-1. If there are more options, they will be processed (in particular their CheckArg will be called) but not stored. ; If you used Stats::buffer_max to dimension this array, you can pass -1 (or not pass bufmax at all) which tells parse() that the buffer is ""large enough"". . AttentionRemember that options and buffer store Option objects, not pointers. Therefore it is not possible for the same object to be in both arrays. For those options that are found in both buffer[] and options[] the respective objects are independent copies. And only the objects in options[] are properly linked via Option::next() and Option::prev(). You can iterate over buffer[] to process all options in the order they appear in the argument vector, but if you want access to the other Options with the same Descriptor::index, then you must access the linked list via options[]. You can get the linked list in options from a buffer object via something like options[buffer[i].index()]. ; Definition at line 1500 of file OptionParser.h. ◆ parse() [3/4]. void ROOT::option::Parser::parse ; (; const Descriptor ; usage[], . int ; argc, . char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . POSIX parse() (gnu==false) with non-const argv. ; Definition at line 1186 of file OptionParser.h. ◆ parse() [4/4]. void ROOT::option::Parser::parse ; (; const Descriptor ; usage[], . int ; argc, . const char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . POSIX parse() (gnu==false). ; Definition at line 1179 of file OptionParser.h. ◆ shift(). static void ROOT::op",MatchSource.WIKI,doc/v632/classROOT_1_1option_1_1Parser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html
https://root.cern/doc/v632/classROOT_1_1RBrowser.html:2035,Deployability,update,update,2035,"eRCanvas () const;  ; std::string GetWindowUrl (bool remote);  Return URL parameter for the window showing ROOT Browser See ROOT::RWebWindow::GetUrl docu for more details. ;  ; void Hide ();  hide Browser ;  ; void SetCatchWindowShow (bool on=true);  Enable/disable catch of RWebWindow::Show calls to embed created widgets, default on. ;  ; void SetUseRCanvas (bool on=true);  ; void SetWorkingPath (const std::string &path);  Set working path in the browser. ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  show Browser in specified place ;  . Protected Member Functions; std::shared_ptr< RBrowserWidget > AddCatchedWidget (RWebWindow *win, const std::string &kind);  Add widget catched from external scripts. ;  ; void AddInitWidget (const std::string &kind);  Create new widget and send init message to the client. ;  ; std::shared_ptr< RBrowserWidget > AddWidget (const std::string &kind);  Creates new widget. ;  ; void CheckWidgtesModified ();  Check if any widget was modified and update if necessary. ;  ; void CloseTab (const std::string &name);  Close and delete specified widget. ;  ; std::shared_ptr< RBrowserWidget > FindWidget (const std::string &name, const std::string &kind="""") const;  Find widget by name or kind. ;  ; std::shared_ptr< RBrowserWidget > GetActiveWidget () const;  ; std::string GetCurrentWorkingDirectory ();  Return the current directory of ROOT. ;  ; std::vector< std::string > GetRootHistory ();  Get content of history file. ;  ; std::vector< std::string > GetRootLogs ();  Get content of log file. ;  ; std::string NewWidgetMsg (std::shared_ptr< RBrowserWidget > &widget);  Create message which send to client to create new widget. ;  ; std::string ProcessBrowserRequest (const std::string &msg);  Process browser request. ;  ; std::string ProcessDblClick (unsigned connid, std::vector< std::string > &args);  Process dbl click on browser item. ;  ; void ProcessMsg (unsigned connid, const std::string &arg);  Process rece",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html
https://root.cern/doc/v632/classROOT_1_1RBrowser.html:6258,Deployability,update,update,6258,"m"". ; Definition at line 949 of file RBrowser.cxx. ◆ AddCatchedWidget(). std::shared_ptr< RBrowserWidget > RBrowser::AddCatchedWidget ; (; RWebWindow * ; win, . const std::string & ; kind . ). protected . Add widget catched from external scripts. ; Definition at line 573 of file RBrowser.cxx. ◆ AddInitWidget(). void RBrowser::AddInitWidget ; (; const std::string & ; kind). protected . Create new widget and send init message to the client. ; Definition at line 592 of file RBrowser.cxx. ◆ AddRCanvas(). void ROOT::RBrowser::AddRCanvas ; (; ). inline . Definition at line 86 of file RBrowser.hxx. ◆ AddTCanvas(). void ROOT::RBrowser::AddTCanvas ; (; ). inline . Definition at line 85 of file RBrowser.hxx. ◆ AddWidget(). std::shared_ptr< RBrowserWidget > RBrowser::AddWidget ; (; const std::string & ; kind). protected . Creates new widget. ; Definition at line 541 of file RBrowser.cxx. ◆ CheckWidgtesModified(). void RBrowser::CheckWidgtesModified ; (; ). protected . Check if any widget was modified and update if necessary. ; Definition at line 752 of file RBrowser.cxx. ◆ ClearOnClose(). void RBrowser::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed. ; Definition at line 975 of file RBrowser.cxx. ◆ CloseTab(). void RBrowser::CloseTab ; (; const std::string & ; name). protected . Close and delete specified widget. ; Definition at line 618 of file RBrowser.cxx. ◆ FindWidget(). std::shared_ptr< RBrowserWidget > RBrowser::FindWidget ; (; const std::string & ; name, . const std::string & ; kind = """" . ); const. protected . Find widget by name or kind. ; Definition at line 602 of file RBrowser.cxx. ◆ GetActiveWidget(). std::shared_ptr< RBrowserWidget > ROOT::RBrowser::GetActiveWidget ; (; ); const. inlineprotected . Definition at line 54 of file RBrowser.hxx. ◆ GetCatchWindowShow(). bool ROOT::RBrowser::GetCatchWindowShow ; (; ); const. inline . Is RWebWindow::Show calls catched for embeding of created widgets.",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html
https://root.cern/doc/v632/classROOT_1_1RBrowser.html:10860,Deployability,update,update,10860,"t line 672 of file RBrowser.cxx. ◆ SendProgress(). void RBrowser::SendProgress ; (; unsigned ; connid, . float ; progr . ). protected . Send generic progress message to the web window Should show progress bar on client side. ; Definition at line 715 of file RBrowser.cxx. ◆ SetCatchWindowShow(). void ROOT::RBrowser::SetCatchWindowShow ; (; bool ; on = true). inline . Enable/disable catch of RWebWindow::Show calls to embed created widgets, default on. ; Definition at line 99 of file RBrowser.hxx. ◆ SetUseRCanvas(). void ROOT::RBrowser::SetUseRCanvas ; (; bool ; on = true). inline . Definition at line 83 of file RBrowser.hxx. ◆ SetWorkingPath(). void RBrowser::SetWorkingPath ; (; const std::string & ; path). Set working path in the browser. ; Definition at line 934 of file RBrowser.cxx. ◆ Show(). void RBrowser::Show ; (; const RWebDisplayArgs & ; args = """", . bool ; always_start_new_browser = false . ). show Browser in specified place ; Show or update RBrowser in web window If web window already started - just refresh it like ""reload"" button does If no web window exists or.; Parameters. always_start_new_browserconfigured, starts new window ; argsdisplay arguments . Definition at line 507 of file RBrowser.cxx. Friends And Related Symbol Documentation. ◆ RBrowserTimer. friend class RBrowserTimer. friend . Definition at line 29 of file RBrowser.hxx. Member Data Documentation. ◆ fActiveWidgetName. std::string ROOT::RBrowser::fActiveWidgetName. protected . ! name of active widget ; Definition at line 38 of file RBrowser.hxx. ◆ fBrowsable. RBrowserData ROOT::RBrowser::fBrowsable. protected . ! central browsing element ; Definition at line 47 of file RBrowser.hxx. ◆ fCatchWindowShow. bool ROOT::RBrowser::fCatchWindowShow {true}. protected . ! if arbitrary RWebWindow::Show calls should be catched by browser ; Definition at line 37 of file RBrowser.hxx. ◆ fConnId. unsigned ROOT::RBrowser::fConnId {0}. protected . ! default connection id ; Definition at line 34 of file RBrowser.",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html
https://root.cern/doc/v632/classROOT_1_1RBrowser.html:1842,Integrability,message,message,1842,"id > &handle);  Set handle which will be cleared when connection is closed. ;  ; bool GetCatchWindowShow () const;  Is RWebWindow::Show calls catched for embeding of created widgets. ;  ; bool GetUseRCanvas () const;  ; std::string GetWindowUrl (bool remote);  Return URL parameter for the window showing ROOT Browser See ROOT::RWebWindow::GetUrl docu for more details. ;  ; void Hide ();  hide Browser ;  ; void SetCatchWindowShow (bool on=true);  Enable/disable catch of RWebWindow::Show calls to embed created widgets, default on. ;  ; void SetUseRCanvas (bool on=true);  ; void SetWorkingPath (const std::string &path);  Set working path in the browser. ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  show Browser in specified place ;  . Protected Member Functions; std::shared_ptr< RBrowserWidget > AddCatchedWidget (RWebWindow *win, const std::string &kind);  Add widget catched from external scripts. ;  ; void AddInitWidget (const std::string &kind);  Create new widget and send init message to the client. ;  ; std::shared_ptr< RBrowserWidget > AddWidget (const std::string &kind);  Creates new widget. ;  ; void CheckWidgtesModified ();  Check if any widget was modified and update if necessary. ;  ; void CloseTab (const std::string &name);  Close and delete specified widget. ;  ; std::shared_ptr< RBrowserWidget > FindWidget (const std::string &name, const std::string &kind="""") const;  Find widget by name or kind. ;  ; std::shared_ptr< RBrowserWidget > GetActiveWidget () const;  ; std::string GetCurrentWorkingDirectory ();  Return the current directory of ROOT. ;  ; std::vector< std::string > GetRootHistory ();  Get content of history file. ;  ; std::vector< std::string > GetRootLogs ();  Get content of log file. ;  ; std::string NewWidgetMsg (std::shared_ptr< RBrowserWidget > &widget);  Create message which send to client to create new widget. ;  ; std::string ProcessBrowserRequest (const std::string &msg);  Process browser request. ; ",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html
https://root.cern/doc/v632/classROOT_1_1RBrowser.html:2667,Integrability,message,message,2667,"t > AddCatchedWidget (RWebWindow *win, const std::string &kind);  Add widget catched from external scripts. ;  ; void AddInitWidget (const std::string &kind);  Create new widget and send init message to the client. ;  ; std::shared_ptr< RBrowserWidget > AddWidget (const std::string &kind);  Creates new widget. ;  ; void CheckWidgtesModified ();  Check if any widget was modified and update if necessary. ;  ; void CloseTab (const std::string &name);  Close and delete specified widget. ;  ; std::shared_ptr< RBrowserWidget > FindWidget (const std::string &name, const std::string &kind="""") const;  Find widget by name or kind. ;  ; std::shared_ptr< RBrowserWidget > GetActiveWidget () const;  ; std::string GetCurrentWorkingDirectory ();  Return the current directory of ROOT. ;  ; std::vector< std::string > GetRootHistory ();  Get content of history file. ;  ; std::vector< std::string > GetRootLogs ();  Get content of log file. ;  ; std::string NewWidgetMsg (std::shared_ptr< RBrowserWidget > &widget);  Create message which send to client to create new widget. ;  ; std::string ProcessBrowserRequest (const std::string &msg);  Process browser request. ;  ; std::string ProcessDblClick (unsigned connid, std::vector< std::string > &args);  Process dbl click on browser item. ;  ; void ProcessMsg (unsigned connid, const std::string &arg);  Process received message from the client. ;  ; void ProcessPostponedRequests ();  Process postponed requests - decouple from websocket handling Only requests which can take longer time should be postponed. ;  ; void ProcessRunMacro (const std::string &file_path);  Process run macro command in the editor. ;  ; void ProcessSaveFile (const std::string &fname, const std::string &content);  Process file save command in the editor. ;  ; void SendInitMsg (unsigned connid);  Process client connect. ;  ; void SendProgress (unsigned connid, float progr);  Send generic progress message to the web window Should show progress bar on client side. ;  . Protecte",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html
https://root.cern/doc/v632/classROOT_1_1RBrowser.html:3013,Integrability,message,message,3013,"sModified ();  Check if any widget was modified and update if necessary. ;  ; void CloseTab (const std::string &name);  Close and delete specified widget. ;  ; std::shared_ptr< RBrowserWidget > FindWidget (const std::string &name, const std::string &kind="""") const;  Find widget by name or kind. ;  ; std::shared_ptr< RBrowserWidget > GetActiveWidget () const;  ; std::string GetCurrentWorkingDirectory ();  Return the current directory of ROOT. ;  ; std::vector< std::string > GetRootHistory ();  Get content of history file. ;  ; std::vector< std::string > GetRootLogs ();  Get content of log file. ;  ; std::string NewWidgetMsg (std::shared_ptr< RBrowserWidget > &widget);  Create message which send to client to create new widget. ;  ; std::string ProcessBrowserRequest (const std::string &msg);  Process browser request. ;  ; std::string ProcessDblClick (unsigned connid, std::vector< std::string > &args);  Process dbl click on browser item. ;  ; void ProcessMsg (unsigned connid, const std::string &arg);  Process received message from the client. ;  ; void ProcessPostponedRequests ();  Process postponed requests - decouple from websocket handling Only requests which can take longer time should be postponed. ;  ; void ProcessRunMacro (const std::string &file_path);  Process run macro command in the editor. ;  ; void ProcessSaveFile (const std::string &fname, const std::string &content);  Process file save command in the editor. ;  ; void SendInitMsg (unsigned connid);  Process client connect. ;  ; void SendProgress (unsigned connid, float progr);  Send generic progress message to the web window Should show progress bar on client side. ;  . Protected Attributes; std::string fActiveWidgetName;  ! name of active widget ;  ; RBrowserData fBrowsable;  ! central browsing element ;  ; bool fCatchWindowShow {true};  ! if arbitrary RWebWindow::Show calls should be catched by browser ;  ; unsigned fConnId {0};  ! default connection id ;  ; float fLastProgressSend {0};  ! last value of ",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html
https://root.cern/doc/v632/classROOT_1_1RBrowser.html:3570,Integrability,message,message,3570,"content of log file. ;  ; std::string NewWidgetMsg (std::shared_ptr< RBrowserWidget > &widget);  Create message which send to client to create new widget. ;  ; std::string ProcessBrowserRequest (const std::string &msg);  Process browser request. ;  ; std::string ProcessDblClick (unsigned connid, std::vector< std::string > &args);  Process dbl click on browser item. ;  ; void ProcessMsg (unsigned connid, const std::string &arg);  Process received message from the client. ;  ; void ProcessPostponedRequests ();  Process postponed requests - decouple from websocket handling Only requests which can take longer time should be postponed. ;  ; void ProcessRunMacro (const std::string &file_path);  Process run macro command in the editor. ;  ; void ProcessSaveFile (const std::string &fname, const std::string &content);  Process file save command in the editor. ;  ; void SendInitMsg (unsigned connid);  Process client connect. ;  ; void SendProgress (unsigned connid, float progr);  Send generic progress message to the web window Should show progress bar on client side. ;  . Protected Attributes; std::string fActiveWidgetName;  ! name of active widget ;  ; RBrowserData fBrowsable;  ! central browsing element ;  ; bool fCatchWindowShow {true};  ! if arbitrary RWebWindow::Show calls should be catched by browser ;  ; unsigned fConnId {0};  ! default connection id ;  ; float fLastProgressSend {0};  ! last value of send progress ;  ; long long fLastProgressSendTm {0};  ! time when last progress message was send ;  ; std::vector< std::vector< std::string > > fPostponed;  ! postponed messages, handled in timer ;  ; std::string fPromptFileOutput;  ! file name for prompt output ;  ; std::unique_ptr< RBrowserTimer > fTimer;  ! timer to handle postponed requests ;  ; std::string fTitle;  ! title ;  ; bool fUseRCanvas {false};  ! which canvas should be used ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to browser ;  ; int fWidgetCnt {0};  ! counter for created widgets ;  ; std",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html
https://root.cern/doc/v632/classROOT_1_1RBrowser.html:4065,Integrability,message,message,4065," requests which can take longer time should be postponed. ;  ; void ProcessRunMacro (const std::string &file_path);  Process run macro command in the editor. ;  ; void ProcessSaveFile (const std::string &fname, const std::string &content);  Process file save command in the editor. ;  ; void SendInitMsg (unsigned connid);  Process client connect. ;  ; void SendProgress (unsigned connid, float progr);  Send generic progress message to the web window Should show progress bar on client side. ;  . Protected Attributes; std::string fActiveWidgetName;  ! name of active widget ;  ; RBrowserData fBrowsable;  ! central browsing element ;  ; bool fCatchWindowShow {true};  ! if arbitrary RWebWindow::Show calls should be catched by browser ;  ; unsigned fConnId {0};  ! default connection id ;  ; float fLastProgressSend {0};  ! last value of send progress ;  ; long long fLastProgressSendTm {0};  ! time when last progress message was send ;  ; std::vector< std::vector< std::string > > fPostponed;  ! postponed messages, handled in timer ;  ; std::string fPromptFileOutput;  ! file name for prompt output ;  ; std::unique_ptr< RBrowserTimer > fTimer;  ! timer to handle postponed requests ;  ; std::string fTitle;  ! title ;  ; bool fUseRCanvas {false};  ! which canvas should be used ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to browser ;  ; int fWidgetCnt {0};  ! counter for created widgets ;  ; std::vector< std::shared_ptr< RBrowserWidget > > fWidgets;  ! all browser widgets ;  . Friends; class RBrowserTimer;  . #include <ROOT/RBrowser.hxx>; Constructor & Destructor Documentation. ◆ RBrowser(). RBrowser::RBrowser ; (; bool ; use_rcanvas = false). constructor ; Definition at line 273 of file RBrowser.cxx. ◆ ~RBrowser(). RBrowser::~RBrowser ; (; ). virtual . destructor ; Definition at line 340 of file RBrowser.cxx. Member Function Documentation. ◆ ActivateWidget(). bool RBrowser::ActivateWidget ; (; const std::string & ; title, . const std::string & ; kind = """" . ). Ac",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html
https://root.cern/doc/v632/classROOT_1_1RBrowser.html:4154,Integrability,message,messages,4154," requests which can take longer time should be postponed. ;  ; void ProcessRunMacro (const std::string &file_path);  Process run macro command in the editor. ;  ; void ProcessSaveFile (const std::string &fname, const std::string &content);  Process file save command in the editor. ;  ; void SendInitMsg (unsigned connid);  Process client connect. ;  ; void SendProgress (unsigned connid, float progr);  Send generic progress message to the web window Should show progress bar on client side. ;  . Protected Attributes; std::string fActiveWidgetName;  ! name of active widget ;  ; RBrowserData fBrowsable;  ! central browsing element ;  ; bool fCatchWindowShow {true};  ! if arbitrary RWebWindow::Show calls should be catched by browser ;  ; unsigned fConnId {0};  ! default connection id ;  ; float fLastProgressSend {0};  ! last value of send progress ;  ; long long fLastProgressSendTm {0};  ! time when last progress message was send ;  ; std::vector< std::vector< std::string > > fPostponed;  ! postponed messages, handled in timer ;  ; std::string fPromptFileOutput;  ! file name for prompt output ;  ; std::unique_ptr< RBrowserTimer > fTimer;  ! timer to handle postponed requests ;  ; std::string fTitle;  ! title ;  ; bool fUseRCanvas {false};  ! which canvas should be used ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to browser ;  ; int fWidgetCnt {0};  ! counter for created widgets ;  ; std::vector< std::shared_ptr< RBrowserWidget > > fWidgets;  ! all browser widgets ;  . Friends; class RBrowserTimer;  . #include <ROOT/RBrowser.hxx>; Constructor & Destructor Documentation. ◆ RBrowser(). RBrowser::RBrowser ; (; bool ; use_rcanvas = false). constructor ; Definition at line 273 of file RBrowser.cxx. ◆ ~RBrowser(). RBrowser::~RBrowser ; (; ). virtual . destructor ; Definition at line 340 of file RBrowser.cxx. Member Function Documentation. ◆ ActivateWidget(). bool RBrowser::ActivateWidget ; (; const std::string & ; title, . const std::string & ; kind = """" . ). Ac",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html
https://root.cern/doc/v632/classROOT_1_1RBrowser.html:5669,Integrability,message,message,5669,"RBrowserTimer;  . #include <ROOT/RBrowser.hxx>; Constructor & Destructor Documentation. ◆ RBrowser(). RBrowser::RBrowser ; (; bool ; use_rcanvas = false). constructor ; Definition at line 273 of file RBrowser.cxx. ◆ ~RBrowser(). RBrowser::~RBrowser ; (; ). virtual . destructor ; Definition at line 340 of file RBrowser.cxx. Member Function Documentation. ◆ ActivateWidget(). bool RBrowser::ActivateWidget ; (; const std::string & ; title, . const std::string & ; kind = """" . ). Activate widget in RBrowser One should specify title and (optionally) kind of widget like ""tcanvas"" or ""geom"". ; Definition at line 949 of file RBrowser.cxx. ◆ AddCatchedWidget(). std::shared_ptr< RBrowserWidget > RBrowser::AddCatchedWidget ; (; RWebWindow * ; win, . const std::string & ; kind . ). protected . Add widget catched from external scripts. ; Definition at line 573 of file RBrowser.cxx. ◆ AddInitWidget(). void RBrowser::AddInitWidget ; (; const std::string & ; kind). protected . Create new widget and send init message to the client. ; Definition at line 592 of file RBrowser.cxx. ◆ AddRCanvas(). void ROOT::RBrowser::AddRCanvas ; (; ). inline . Definition at line 86 of file RBrowser.hxx. ◆ AddTCanvas(). void ROOT::RBrowser::AddTCanvas ; (; ). inline . Definition at line 85 of file RBrowser.hxx. ◆ AddWidget(). std::shared_ptr< RBrowserWidget > RBrowser::AddWidget ; (; const std::string & ; kind). protected . Creates new widget. ; Definition at line 541 of file RBrowser.cxx. ◆ CheckWidgtesModified(). void RBrowser::CheckWidgtesModified ; (; ). protected . Check if any widget was modified and update if necessary. ; Definition at line 752 of file RBrowser.cxx. ◆ ClearOnClose(). void RBrowser::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed. ; Definition at line 975 of file RBrowser.cxx. ◆ CloseTab(). void RBrowser::CloseTab ; (; const std::string & ; name). protected . Close and delete specified widget. ; Definition at li",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html
https://root.cern/doc/v632/classROOT_1_1RBrowser.html:8404,Integrability,message,message,8404,"y of ROOT. ; Definition at line 734 of file RBrowser.cxx. ◆ GetRootHistory(). std::vector< std::string > RBrowser::GetRootHistory ; (; ). protected . Get content of history file. ; Definition at line 631 of file RBrowser.cxx. ◆ GetRootLogs(). std::vector< std::string > RBrowser::GetRootLogs ; (; ). protected . Get content of log file. ; Definition at line 654 of file RBrowser.cxx. ◆ GetUseRCanvas(). bool ROOT::RBrowser::GetUseRCanvas ; (; ); const. inline . Definition at line 82 of file RBrowser.hxx. ◆ GetWindowUrl(). std::string RBrowser::GetWindowUrl ; (; bool ; remote). Return URL parameter for the window showing ROOT Browser See ROOT::RWebWindow::GetUrl docu for more details. ; Definition at line 529 of file RBrowser.cxx. ◆ Hide(). void RBrowser::Hide ; (; ). hide Browser ; Hide ROOT Browser. ; Definition at line 519 of file RBrowser.cxx. ◆ NewWidgetMsg(). std::string RBrowser::NewWidgetMsg ; (; std::shared_ptr< RBrowserWidget > & ; widget). protected . Create message which send to client to create new widget. ; Definition at line 742 of file RBrowser.cxx. ◆ ProcessBrowserRequest(). std::string RBrowser::ProcessBrowserRequest ; (; const std::string & ; msg). protected . Process browser request. ; Definition at line 349 of file RBrowser.cxx. ◆ ProcessDblClick(). std::string RBrowser::ProcessDblClick ; (; unsigned ; connid, . std::vector< std::string > & ; args . ). protected . Process dbl click on browser item. ; Definition at line 398 of file RBrowser.cxx. ◆ ProcessMsg(). void RBrowser::ProcessMsg ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process received message from the client. ; Definition at line 789 of file RBrowser.cxx. ◆ ProcessPostponedRequests(). void RBrowser::ProcessPostponedRequests ; (; ). protected . Process postponed requests - decouple from websocket handling Only requests which can take longer time should be postponed. ; Definition at line 762 of file RBrowser.cxx. ◆ ProcessRunMacro(). void RBrowser::ProcessRunMacro ; ",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html
https://root.cern/doc/v632/classROOT_1_1RBrowser.html:9038,Integrability,message,message,9038,"showing ROOT Browser See ROOT::RWebWindow::GetUrl docu for more details. ; Definition at line 529 of file RBrowser.cxx. ◆ Hide(). void RBrowser::Hide ; (; ). hide Browser ; Hide ROOT Browser. ; Definition at line 519 of file RBrowser.cxx. ◆ NewWidgetMsg(). std::string RBrowser::NewWidgetMsg ; (; std::shared_ptr< RBrowserWidget > & ; widget). protected . Create message which send to client to create new widget. ; Definition at line 742 of file RBrowser.cxx. ◆ ProcessBrowserRequest(). std::string RBrowser::ProcessBrowserRequest ; (; const std::string & ; msg). protected . Process browser request. ; Definition at line 349 of file RBrowser.cxx. ◆ ProcessDblClick(). std::string RBrowser::ProcessDblClick ; (; unsigned ; connid, . std::vector< std::string > & ; args . ). protected . Process dbl click on browser item. ; Definition at line 398 of file RBrowser.cxx. ◆ ProcessMsg(). void RBrowser::ProcessMsg ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process received message from the client. ; Definition at line 789 of file RBrowser.cxx. ◆ ProcessPostponedRequests(). void RBrowser::ProcessPostponedRequests ; (; ). protected . Process postponed requests - decouple from websocket handling Only requests which can take longer time should be postponed. ; Definition at line 762 of file RBrowser.cxx. ◆ ProcessRunMacro(). void RBrowser::ProcessRunMacro ; (; const std::string & ; file_path). protected . Process run macro command in the editor. ; Definition at line 384 of file RBrowser.cxx. ◆ ProcessSaveFile(). void RBrowser::ProcessSaveFile ; (; const std::string & ; fname, . const std::string & ; content . ). protected . Process file save command in the editor. ; Definition at line 373 of file RBrowser.cxx. ◆ SendInitMsg(). void RBrowser::SendInitMsg ; (; unsigned ; connid). protected . Process client connect. ; Definition at line 672 of file RBrowser.cxx. ◆ SendProgress(). void RBrowser::SendProgress ; (; unsigned ; connid, . float ; progr . ). protected . S",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html
https://root.cern/doc/v632/classROOT_1_1RBrowser.html:10062,Integrability,message,message,10062," 789 of file RBrowser.cxx. ◆ ProcessPostponedRequests(). void RBrowser::ProcessPostponedRequests ; (; ). protected . Process postponed requests - decouple from websocket handling Only requests which can take longer time should be postponed. ; Definition at line 762 of file RBrowser.cxx. ◆ ProcessRunMacro(). void RBrowser::ProcessRunMacro ; (; const std::string & ; file_path). protected . Process run macro command in the editor. ; Definition at line 384 of file RBrowser.cxx. ◆ ProcessSaveFile(). void RBrowser::ProcessSaveFile ; (; const std::string & ; fname, . const std::string & ; content . ). protected . Process file save command in the editor. ; Definition at line 373 of file RBrowser.cxx. ◆ SendInitMsg(). void RBrowser::SendInitMsg ; (; unsigned ; connid). protected . Process client connect. ; Definition at line 672 of file RBrowser.cxx. ◆ SendProgress(). void RBrowser::SendProgress ; (; unsigned ; connid, . float ; progr . ). protected . Send generic progress message to the web window Should show progress bar on client side. ; Definition at line 715 of file RBrowser.cxx. ◆ SetCatchWindowShow(). void ROOT::RBrowser::SetCatchWindowShow ; (; bool ; on = true). inline . Enable/disable catch of RWebWindow::Show calls to embed created widgets, default on. ; Definition at line 99 of file RBrowser.hxx. ◆ SetUseRCanvas(). void ROOT::RBrowser::SetUseRCanvas ; (; bool ; on = true). inline . Definition at line 83 of file RBrowser.hxx. ◆ SetWorkingPath(). void RBrowser::SetWorkingPath ; (; const std::string & ; path). Set working path in the browser. ; Definition at line 934 of file RBrowser.cxx. ◆ Show(). void RBrowser::Show ; (; const RWebDisplayArgs & ; args = """", . bool ; always_start_new_browser = false . ). show Browser in specified place ; Show or update RBrowser in web window If web window already started - just refresh it like ""reload"" button does If no web window exists or.; Parameters. always_start_new_browserconfigured, starts new window ; argsdisplay arguments .",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html
https://root.cern/doc/v632/classROOT_1_1RBrowser.html:12175,Integrability,message,message,12175,"riend class RBrowserTimer. friend . Definition at line 29 of file RBrowser.hxx. Member Data Documentation. ◆ fActiveWidgetName. std::string ROOT::RBrowser::fActiveWidgetName. protected . ! name of active widget ; Definition at line 38 of file RBrowser.hxx. ◆ fBrowsable. RBrowserData ROOT::RBrowser::fBrowsable. protected . ! central browsing element ; Definition at line 47 of file RBrowser.hxx. ◆ fCatchWindowShow. bool ROOT::RBrowser::fCatchWindowShow {true}. protected . ! if arbitrary RWebWindow::Show calls should be catched by browser ; Definition at line 37 of file RBrowser.hxx. ◆ fConnId. unsigned ROOT::RBrowser::fConnId {0}. protected . ! default connection id ; Definition at line 34 of file RBrowser.hxx. ◆ fLastProgressSend. float ROOT::RBrowser::fLastProgressSend {0}. protected . ! last value of send progress ; Definition at line 42 of file RBrowser.hxx. ◆ fLastProgressSendTm. long long ROOT::RBrowser::fLastProgressSendTm {0}. protected . ! time when last progress message was send ; Definition at line 43 of file RBrowser.hxx. ◆ fPostponed. std::vector<std::vector<std::string> > ROOT::RBrowser::fPostponed. protected . ! postponed messages, handled in timer ; Definition at line 49 of file RBrowser.hxx. ◆ fPromptFileOutput. std::string ROOT::RBrowser::fPromptFileOutput. protected . ! file name for prompt output ; Definition at line 41 of file RBrowser.hxx. ◆ fTimer. std::unique_ptr<RBrowserTimer> ROOT::RBrowser::fTimer. protected . ! timer to handle postponed requests ; Definition at line 48 of file RBrowser.hxx. ◆ fTitle. std::string ROOT::RBrowser::fTitle. protected . ! title ; Definition at line 33 of file RBrowser.hxx. ◆ fUseRCanvas. bool ROOT::RBrowser::fUseRCanvas {false}. protected . ! which canvas should be used ; Definition at line 36 of file RBrowser.hxx. ◆ fWebWindow. std::shared_ptr<RWebWindow> ROOT::RBrowser::fWebWindow. protected . ! web window to browser ; Definition at line 45 of file RBrowser.hxx. ◆ fWidgetCnt. int ROOT::RBrowser::fWidgetCnt {0}. ",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html
https://root.cern/doc/v632/classROOT_1_1RBrowser.html:12343,Integrability,message,messages,12343,"cted . ! name of active widget ; Definition at line 38 of file RBrowser.hxx. ◆ fBrowsable. RBrowserData ROOT::RBrowser::fBrowsable. protected . ! central browsing element ; Definition at line 47 of file RBrowser.hxx. ◆ fCatchWindowShow. bool ROOT::RBrowser::fCatchWindowShow {true}. protected . ! if arbitrary RWebWindow::Show calls should be catched by browser ; Definition at line 37 of file RBrowser.hxx. ◆ fConnId. unsigned ROOT::RBrowser::fConnId {0}. protected . ! default connection id ; Definition at line 34 of file RBrowser.hxx. ◆ fLastProgressSend. float ROOT::RBrowser::fLastProgressSend {0}. protected . ! last value of send progress ; Definition at line 42 of file RBrowser.hxx. ◆ fLastProgressSendTm. long long ROOT::RBrowser::fLastProgressSendTm {0}. protected . ! time when last progress message was send ; Definition at line 43 of file RBrowser.hxx. ◆ fPostponed. std::vector<std::vector<std::string> > ROOT::RBrowser::fPostponed. protected . ! postponed messages, handled in timer ; Definition at line 49 of file RBrowser.hxx. ◆ fPromptFileOutput. std::string ROOT::RBrowser::fPromptFileOutput. protected . ! file name for prompt output ; Definition at line 41 of file RBrowser.hxx. ◆ fTimer. std::unique_ptr<RBrowserTimer> ROOT::RBrowser::fTimer. protected . ! timer to handle postponed requests ; Definition at line 48 of file RBrowser.hxx. ◆ fTitle. std::string ROOT::RBrowser::fTitle. protected . ! title ; Definition at line 33 of file RBrowser.hxx. ◆ fUseRCanvas. bool ROOT::RBrowser::fUseRCanvas {false}. protected . ! which canvas should be used ; Definition at line 36 of file RBrowser.hxx. ◆ fWebWindow. std::shared_ptr<RWebWindow> ROOT::RBrowser::fWebWindow. protected . ! web window to browser ; Definition at line 45 of file RBrowser.hxx. ◆ fWidgetCnt. int ROOT::RBrowser::fWidgetCnt {0}. protected . ! counter for created widgets ; Definition at line 40 of file RBrowser.hxx. ◆ fWidgets. std::vector<std::shared_ptr<RBrowserWidget> > ROOT::RBrowser::fWidgets. protecte",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html
https://root.cern/doc/v632/classROOT_1_1RBrowser.html:2574,Testability,log,log,2574,"false);  show Browser in specified place ;  . Protected Member Functions; std::shared_ptr< RBrowserWidget > AddCatchedWidget (RWebWindow *win, const std::string &kind);  Add widget catched from external scripts. ;  ; void AddInitWidget (const std::string &kind);  Create new widget and send init message to the client. ;  ; std::shared_ptr< RBrowserWidget > AddWidget (const std::string &kind);  Creates new widget. ;  ; void CheckWidgtesModified ();  Check if any widget was modified and update if necessary. ;  ; void CloseTab (const std::string &name);  Close and delete specified widget. ;  ; std::shared_ptr< RBrowserWidget > FindWidget (const std::string &name, const std::string &kind="""") const;  Find widget by name or kind. ;  ; std::shared_ptr< RBrowserWidget > GetActiveWidget () const;  ; std::string GetCurrentWorkingDirectory ();  Return the current directory of ROOT. ;  ; std::vector< std::string > GetRootHistory ();  Get content of history file. ;  ; std::vector< std::string > GetRootLogs ();  Get content of log file. ;  ; std::string NewWidgetMsg (std::shared_ptr< RBrowserWidget > &widget);  Create message which send to client to create new widget. ;  ; std::string ProcessBrowserRequest (const std::string &msg);  Process browser request. ;  ; std::string ProcessDblClick (unsigned connid, std::vector< std::string > &args);  Process dbl click on browser item. ;  ; void ProcessMsg (unsigned connid, const std::string &arg);  Process received message from the client. ;  ; void ProcessPostponedRequests ();  Process postponed requests - decouple from websocket handling Only requests which can take longer time should be postponed. ;  ; void ProcessRunMacro (const std::string &file_path);  Process run macro command in the editor. ;  ; void ProcessSaveFile (const std::string &fname, const std::string &content);  Process file save command in the editor. ;  ; void SendInitMsg (unsigned connid);  Process client connect. ;  ; void SendProgress (unsigned connid, float progr);",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html
https://root.cern/doc/v632/classROOT_1_1RBrowser.html:7752,Testability,log,log,7752,"ser::FindWidget ; (; const std::string & ; name, . const std::string & ; kind = """" . ); const. protected . Find widget by name or kind. ; Definition at line 602 of file RBrowser.cxx. ◆ GetActiveWidget(). std::shared_ptr< RBrowserWidget > ROOT::RBrowser::GetActiveWidget ; (; ); const. inlineprotected . Definition at line 54 of file RBrowser.hxx. ◆ GetCatchWindowShow(). bool ROOT::RBrowser::GetCatchWindowShow ; (; ); const. inline . Is RWebWindow::Show calls catched for embeding of created widgets. ; Definition at line 102 of file RBrowser.hxx. ◆ GetCurrentWorkingDirectory(). std::string RBrowser::GetCurrentWorkingDirectory ; (; ). protected . Return the current directory of ROOT. ; Definition at line 734 of file RBrowser.cxx. ◆ GetRootHistory(). std::vector< std::string > RBrowser::GetRootHistory ; (; ). protected . Get content of history file. ; Definition at line 631 of file RBrowser.cxx. ◆ GetRootLogs(). std::vector< std::string > RBrowser::GetRootLogs ; (; ). protected . Get content of log file. ; Definition at line 654 of file RBrowser.cxx. ◆ GetUseRCanvas(). bool ROOT::RBrowser::GetUseRCanvas ; (; ); const. inline . Definition at line 82 of file RBrowser.hxx. ◆ GetWindowUrl(). std::string RBrowser::GetWindowUrl ; (; bool ; remote). Return URL parameter for the window showing ROOT Browser See ROOT::RWebWindow::GetUrl docu for more details. ; Definition at line 529 of file RBrowser.cxx. ◆ Hide(). void RBrowser::Hide ; (; ). hide Browser ; Hide ROOT Browser. ; Definition at line 519 of file RBrowser.cxx. ◆ NewWidgetMsg(). std::string RBrowser::NewWidgetMsg ; (; std::shared_ptr< RBrowserWidget > & ; widget). protected . Create message which send to client to create new widget. ; Definition at line 742 of file RBrowser.cxx. ◆ ProcessBrowserRequest(). std::string RBrowser::ProcessBrowserRequest ; (; const std::string & ; msg). protected . Process browser request. ; Definition at line 349 of file RBrowser.cxx. ◆ ProcessDblClick(). std::string RBrowser::ProcessDblClick ",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html
https://root.cern/doc/v632/classROOT_1_1RBrowser.html:851,Usability,clear,cleared,851,". ROOT: ROOT::RBrowser Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; ROOT::RBrowser Class ReferenceWeb Widgets » Browsable object. ; Web-based ROOT files and objects browser. . Definition at line 27 of file RBrowser.hxx. Public Member Functions;  RBrowser (bool use_rcanvas=false);  constructor ;  ; virtual ~RBrowser ();  destructor ;  ; bool ActivateWidget (const std::string &title, const std::string &kind="""");  Activate widget in RBrowser One should specify title and (optionally) kind of widget like ""tcanvas"" or ""geom"". ;  ; void AddRCanvas ();  ; void AddTCanvas ();  ; void ClearOnClose (const std::shared_ptr< void > &handle);  Set handle which will be cleared when connection is closed. ;  ; bool GetCatchWindowShow () const;  Is RWebWindow::Show calls catched for embeding of created widgets. ;  ; bool GetUseRCanvas () const;  ; std::string GetWindowUrl (bool remote);  Return URL parameter for the window showing ROOT Browser See ROOT::RWebWindow::GetUrl docu for more details. ;  ; void Hide ();  hide Browser ;  ; void SetCatchWindowShow (bool on=true);  Enable/disable catch of RWebWindow::Show calls to embed created widgets, default on. ;  ; void SetUseRCanvas (bool on=true);  ; void SetWorkingPath (const std::string &path);  Set working path in the browser. ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  show Browser in specified place ;  . Protected Member Functions; std::shared_ptr< RBrowserWidget > AddCatchedWidget (RWebWindow *win, const std::string &kind);  Add widget catched from external scripts. ;  ; void AddInitWidget (const std::string &kind);  Create new widget and send init message to the client. ;  ; std::shared_ptr< RBrowserWidget > AddWidget (const std::string &kind);  Creates new widget. ;  ; void CheckWidgtesModified ();  Che",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html
https://root.cern/doc/v632/classROOT_1_1RBrowser.html:3608,Usability,progress bar,progress bar,3608,"content of log file. ;  ; std::string NewWidgetMsg (std::shared_ptr< RBrowserWidget > &widget);  Create message which send to client to create new widget. ;  ; std::string ProcessBrowserRequest (const std::string &msg);  Process browser request. ;  ; std::string ProcessDblClick (unsigned connid, std::vector< std::string > &args);  Process dbl click on browser item. ;  ; void ProcessMsg (unsigned connid, const std::string &arg);  Process received message from the client. ;  ; void ProcessPostponedRequests ();  Process postponed requests - decouple from websocket handling Only requests which can take longer time should be postponed. ;  ; void ProcessRunMacro (const std::string &file_path);  Process run macro command in the editor. ;  ; void ProcessSaveFile (const std::string &fname, const std::string &content);  Process file save command in the editor. ;  ; void SendInitMsg (unsigned connid);  Process client connect. ;  ; void SendProgress (unsigned connid, float progr);  Send generic progress message to the web window Should show progress bar on client side. ;  . Protected Attributes; std::string fActiveWidgetName;  ! name of active widget ;  ; RBrowserData fBrowsable;  ! central browsing element ;  ; bool fCatchWindowShow {true};  ! if arbitrary RWebWindow::Show calls should be catched by browser ;  ; unsigned fConnId {0};  ! default connection id ;  ; float fLastProgressSend {0};  ! last value of send progress ;  ; long long fLastProgressSendTm {0};  ! time when last progress message was send ;  ; std::vector< std::vector< std::string > > fPostponed;  ! postponed messages, handled in timer ;  ; std::string fPromptFileOutput;  ! file name for prompt output ;  ; std::unique_ptr< RBrowserTimer > fTimer;  ! timer to handle postponed requests ;  ; std::string fTitle;  ! title ;  ; bool fUseRCanvas {false};  ! which canvas should be used ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to browser ;  ; int fWidgetCnt {0};  ! counter for created widgets ;  ; std",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html
https://root.cern/doc/v632/classROOT_1_1RBrowser.html:6445,Usability,clear,cleared,6445,"ed . Add widget catched from external scripts. ; Definition at line 573 of file RBrowser.cxx. ◆ AddInitWidget(). void RBrowser::AddInitWidget ; (; const std::string & ; kind). protected . Create new widget and send init message to the client. ; Definition at line 592 of file RBrowser.cxx. ◆ AddRCanvas(). void ROOT::RBrowser::AddRCanvas ; (; ). inline . Definition at line 86 of file RBrowser.hxx. ◆ AddTCanvas(). void ROOT::RBrowser::AddTCanvas ; (; ). inline . Definition at line 85 of file RBrowser.hxx. ◆ AddWidget(). std::shared_ptr< RBrowserWidget > RBrowser::AddWidget ; (; const std::string & ; kind). protected . Creates new widget. ; Definition at line 541 of file RBrowser.cxx. ◆ CheckWidgtesModified(). void RBrowser::CheckWidgtesModified ; (; ). protected . Check if any widget was modified and update if necessary. ; Definition at line 752 of file RBrowser.cxx. ◆ ClearOnClose(). void RBrowser::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed. ; Definition at line 975 of file RBrowser.cxx. ◆ CloseTab(). void RBrowser::CloseTab ; (; const std::string & ; name). protected . Close and delete specified widget. ; Definition at line 618 of file RBrowser.cxx. ◆ FindWidget(). std::shared_ptr< RBrowserWidget > RBrowser::FindWidget ; (; const std::string & ; name, . const std::string & ; kind = """" . ); const. protected . Find widget by name or kind. ; Definition at line 602 of file RBrowser.cxx. ◆ GetActiveWidget(). std::shared_ptr< RBrowserWidget > ROOT::RBrowser::GetActiveWidget ; (; ); const. inlineprotected . Definition at line 54 of file RBrowser.hxx. ◆ GetCatchWindowShow(). bool ROOT::RBrowser::GetCatchWindowShow ; (; ); const. inline . Is RWebWindow::Show calls catched for embeding of created widgets. ; Definition at line 102 of file RBrowser.hxx. ◆ GetCurrentWorkingDirectory(). std::string RBrowser::GetCurrentWorkingDirectory ; (; ). protected . Return the current directory of ROOT. ; Definition ",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html
https://root.cern/doc/v632/classROOT_1_1RBrowser.html:10100,Usability,progress bar,progress bar,10100," 789 of file RBrowser.cxx. ◆ ProcessPostponedRequests(). void RBrowser::ProcessPostponedRequests ; (; ). protected . Process postponed requests - decouple from websocket handling Only requests which can take longer time should be postponed. ; Definition at line 762 of file RBrowser.cxx. ◆ ProcessRunMacro(). void RBrowser::ProcessRunMacro ; (; const std::string & ; file_path). protected . Process run macro command in the editor. ; Definition at line 384 of file RBrowser.cxx. ◆ ProcessSaveFile(). void RBrowser::ProcessSaveFile ; (; const std::string & ; fname, . const std::string & ; content . ). protected . Process file save command in the editor. ; Definition at line 373 of file RBrowser.cxx. ◆ SendInitMsg(). void RBrowser::SendInitMsg ; (; unsigned ; connid). protected . Process client connect. ; Definition at line 672 of file RBrowser.cxx. ◆ SendProgress(). void RBrowser::SendProgress ; (; unsigned ; connid, . float ; progr . ). protected . Send generic progress message to the web window Should show progress bar on client side. ; Definition at line 715 of file RBrowser.cxx. ◆ SetCatchWindowShow(). void ROOT::RBrowser::SetCatchWindowShow ; (; bool ; on = true). inline . Enable/disable catch of RWebWindow::Show calls to embed created widgets, default on. ; Definition at line 99 of file RBrowser.hxx. ◆ SetUseRCanvas(). void ROOT::RBrowser::SetUseRCanvas ; (; bool ; on = true). inline . Definition at line 83 of file RBrowser.hxx. ◆ SetWorkingPath(). void RBrowser::SetWorkingPath ; (; const std::string & ; path). Set working path in the browser. ; Definition at line 934 of file RBrowser.cxx. ◆ Show(). void RBrowser::Show ; (; const RWebDisplayArgs & ; args = """", . bool ; always_start_new_browser = false . ). show Browser in specified place ; Show or update RBrowser in web window If web window already started - just refresh it like ""reload"" button does If no web window exists or.; Parameters. always_start_new_browserconfigured, starts new window ; argsdisplay arguments .",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html
https://root.cern/doc/v632/classROOT_1_1RBrowserCatchedWidget.html:622,Modifiability,inherit,inherited,622,". ROOT: ROOT::RBrowserCatchedWidget Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RBrowserCatchedWidget Class Reference. . Definition at line 235 of file RBrowser.cxx. Public Member Functions;  RBrowserCatchedWidget (const std::string &name, RWebWindow *win, const std::string &kind);  ; std::string GetKind () const override;  ; std::string GetTitle () override;  ; std::string GetUrl () override;  ; void Show (const std::string &) override;  ;  Public Member Functions inherited from ROOT::RBrowserWidget;  RBrowserWidget (const std::string &name);  ; virtual ~RBrowserWidget ()=default;  ; virtual void CheckModified ();  ; virtual bool DrawElement (std::shared_ptr< Browsable::RElement > &, const std::string &="""");  ; RBrowser * GetBrowser () const;  ; const std::string & GetName () const;  ; const Browsable::RElementPath_t & GetPath () const;  ; virtual void ResetConn ();  ; virtual std::string SendWidgetContent ();  ; std::string SendWidgetTitle ();  Returns string which can be send to browser client to set/change title of the widget tab. ;  ; virtual void SetActive ();  ; void SetPath (const Browsable::RElementPath_t &path);  . Public Attributes; std::string fCatchedKind;  ; RWebWindow * fWindow {nullptr};  . Inheritance diagram for ROOT::RBrowserCatchedWidget:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RBrowserCatchedWidget(). ROOT::RBrowserCatchedWidget::RBrowserCatchedWidget ; (; const std::string & ; name, . RWebWindow * ; win, . const std::string & ; kind . ). inline . Definition at line 249 of file RBrowser.cxx. Member Function Documentation. ◆ GetKind(). std::string ROOT::RBrowserCatchedWidget::GetKind ; (; ); const. inlineoverridevirtual . Implements ROOT::RBrowserWidget.; Definition at line 243 of file RBrowser.cxx. ◆",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserCatchedWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserCatchedWidget.html
https://root.cern/doc/v632/classROOT_1_1RBrowserData.html:982,Availability,error,error,982,". ROOT: ROOT::RBrowserData Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RBrowserData Class ReferenceWeb Widgets » Browsable object. ; Way to browse (hopefully) everything in ROOT. ; Definition at line 37 of file RBrowserData.hxx. Public Member Functions;  RBrowserData ();  Default constructor. ;  ;  RBrowserData (std::shared_ptr< Browsable::RElement > elem);  ; virtual ~RBrowserData ();  Destructor. ;  ; void ClearCache ();  Clear internal objects cache. ;  ; void CreateDefaultElements ();  Create default elements shown in the RBrowser. ;  ; Browsable::RElementPath_t DecomposePath (const std::string &path, bool relative_to_work_element);  Decompose path to elements Returns array of names for each element in the path, first element either ""/"" or ""."" If returned array empty - it is error. ;  ; std::shared_ptr< Browsable::RElement > GetElement (const std::string &str);  Returns element with path, specified as string. ;  ; std::shared_ptr< Browsable::RElement > GetElementFromTop (const Browsable::RElementPath_t &path);  Returns element with path, specified as Browsable::RElementPath_t. ;  ; std::shared_ptr< Browsable::RElement > GetSubElement (const Browsable::RElementPath_t &path);  Returns sub-element starting from top, using cached data. ;  ; const Browsable::RElementPath_t & GetWorkingPath () const;  ; std::string ProcessRequest (const RBrowserRequest &request);  Process browser request, returns string with JSON of RBrowserReply data. ;  ; bool RemoveFromCache (const Browsable::RElementPath_t &path);  Remove path (and all sub-paths) from cache Returns true if any element was removed. ;  ; bool RemoveFromCache (void *obj);  Remove object from cache If nullptr specified - removes no-longer-valid elements Returns true if any element was removed. ;  ; void SetTopElement (std::shared_",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserData.html
https://root.cern/doc/v632/classROOT_1_1RBrowserData.html:4538,Availability,error,error,4538,"BrowserData ; (; ). Default constructor. ; Definition at line 68 of file RBrowserData.cxx. ◆ RBrowserData() [2/2]. ROOT::RBrowserData::RBrowserData ; (; std::shared_ptr< Browsable::RElement > ; elem). inline . Definition at line 63 of file RBrowserData.hxx. ◆ ~RBrowserData(). RBrowserData::~RBrowserData ; (; ). virtual . Destructor. ; Definition at line 78 of file RBrowserData.cxx. Member Function Documentation. ◆ ClearCache(). void RBrowserData::ClearCache ; (; ). Clear internal objects cache. ; Definition at line 370 of file RBrowserData.cxx. ◆ CreateDefaultElements(). void RBrowserData::CreateDefaultElements ; (; ). Create default elements shown in the RBrowser. ; Definition at line 108 of file RBrowserData.cxx. ◆ DecomposePath(). Browsable::RElementPath_t RBrowserData::DecomposePath ; (; const std::string & ; path, . bool ; relative_to_work_element . ). Decompose path to elements Returns array of names for each element in the path, first element either ""/"" or ""."" If returned array empty - it is error. ; Definition at line 155 of file RBrowserData.cxx. ◆ GetElement(). std::shared_ptr< Browsable::RElement > RBrowserData::GetElement ; (; const std::string & ; str). Returns element with path, specified as string. ; Definition at line 290 of file RBrowserData.cxx. ◆ GetElementFromTop(). std::shared_ptr< Browsable::RElement > RBrowserData::GetElementFromTop ; (; const Browsable::RElementPath_t & ; path). Returns element with path, specified as Browsable::RElementPath_t. ; Definition at line 300 of file RBrowserData.cxx. ◆ GetSubElement(). std::shared_ptr< Browsable::RElement > RBrowserData::GetSubElement ; (; const Browsable::RElementPath_t & ; path). Returns sub-element starting from top, using cached data. ; Definition at line 308 of file RBrowserData.cxx. ◆ GetWorkingPath(). const Browsable::RElementPath_t & ROOT::RBrowserData::GetWorkingPath ; (; ); const. inline . Definition at line 73 of file RBrowserData.hxx. ◆ ProcessBrowserRequest(). bool RBrowserData::Proces",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserData.html
https://root.cern/doc/v632/classROOT_1_1RBrowserData.html:643,Performance,cache,cache,643,". ROOT: ROOT::RBrowserData Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RBrowserData Class ReferenceWeb Widgets » Browsable object. ; Way to browse (hopefully) everything in ROOT. ; Definition at line 37 of file RBrowserData.hxx. Public Member Functions;  RBrowserData ();  Default constructor. ;  ;  RBrowserData (std::shared_ptr< Browsable::RElement > elem);  ; virtual ~RBrowserData ();  Destructor. ;  ; void ClearCache ();  Clear internal objects cache. ;  ; void CreateDefaultElements ();  Create default elements shown in the RBrowser. ;  ; Browsable::RElementPath_t DecomposePath (const std::string &path, bool relative_to_work_element);  Decompose path to elements Returns array of names for each element in the path, first element either ""/"" or ""."" If returned array empty - it is error. ;  ; std::shared_ptr< Browsable::RElement > GetElement (const std::string &str);  Returns element with path, specified as string. ;  ; std::shared_ptr< Browsable::RElement > GetElementFromTop (const Browsable::RElementPath_t &path);  Returns element with path, specified as Browsable::RElementPath_t. ;  ; std::shared_ptr< Browsable::RElement > GetSubElement (const Browsable::RElementPath_t &path);  Returns sub-element starting from top, using cached data. ;  ; const Browsable::RElementPath_t & GetWorkingPath () const;  ; std::string ProcessRequest (const RBrowserRequest &request);  Process browser request, returns string with JSON of RBrowserReply data. ;  ; bool RemoveFromCache (const Browsable::RElementPath_t &path);  Remove path (and all sub-paths) from cache Returns true if any element was removed. ;  ; bool RemoveFromCache (void *obj);  Remove object from cache If nullptr specified - removes no-longer-valid elements Returns true if any element was removed. ;  ; void SetTopElement (std::shared_",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserData.html
https://root.cern/doc/v632/classROOT_1_1RBrowserData.html:1435,Performance,cache,cached,1435,"T. ; Definition at line 37 of file RBrowserData.hxx. Public Member Functions;  RBrowserData ();  Default constructor. ;  ;  RBrowserData (std::shared_ptr< Browsable::RElement > elem);  ; virtual ~RBrowserData ();  Destructor. ;  ; void ClearCache ();  Clear internal objects cache. ;  ; void CreateDefaultElements ();  Create default elements shown in the RBrowser. ;  ; Browsable::RElementPath_t DecomposePath (const std::string &path, bool relative_to_work_element);  Decompose path to elements Returns array of names for each element in the path, first element either ""/"" or ""."" If returned array empty - it is error. ;  ; std::shared_ptr< Browsable::RElement > GetElement (const std::string &str);  Returns element with path, specified as string. ;  ; std::shared_ptr< Browsable::RElement > GetElementFromTop (const Browsable::RElementPath_t &path);  Returns element with path, specified as Browsable::RElementPath_t. ;  ; std::shared_ptr< Browsable::RElement > GetSubElement (const Browsable::RElementPath_t &path);  Returns sub-element starting from top, using cached data. ;  ; const Browsable::RElementPath_t & GetWorkingPath () const;  ; std::string ProcessRequest (const RBrowserRequest &request);  Process browser request, returns string with JSON of RBrowserReply data. ;  ; bool RemoveFromCache (const Browsable::RElementPath_t &path);  Remove path (and all sub-paths) from cache Returns true if any element was removed. ;  ; bool RemoveFromCache (void *obj);  Remove object from cache If nullptr specified - removes no-longer-valid elements Returns true if any element was removed. ;  ; void SetTopElement (std::shared_ptr< Browsable::RElement > elem);  set top element for browsing ;  ; void SetWorkingPath (const Browsable::RElementPath_t &path);  set working directory relative to top element ;  . Private Member Functions; bool ProcessBrowserRequest (const RBrowserRequest &request, RBrowserReply &reply);  Process browser request. ;  ; void ResetLastRequestData (bool with_element)",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserData.html
https://root.cern/doc/v632/classROOT_1_1RBrowserData.html:1755,Performance,cache,cache,1755,"Browser. ;  ; Browsable::RElementPath_t DecomposePath (const std::string &path, bool relative_to_work_element);  Decompose path to elements Returns array of names for each element in the path, first element either ""/"" or ""."" If returned array empty - it is error. ;  ; std::shared_ptr< Browsable::RElement > GetElement (const std::string &str);  Returns element with path, specified as string. ;  ; std::shared_ptr< Browsable::RElement > GetElementFromTop (const Browsable::RElementPath_t &path);  Returns element with path, specified as Browsable::RElementPath_t. ;  ; std::shared_ptr< Browsable::RElement > GetSubElement (const Browsable::RElementPath_t &path);  Returns sub-element starting from top, using cached data. ;  ; const Browsable::RElementPath_t & GetWorkingPath () const;  ; std::string ProcessRequest (const RBrowserRequest &request);  Process browser request, returns string with JSON of RBrowserReply data. ;  ; bool RemoveFromCache (const Browsable::RElementPath_t &path);  Remove path (and all sub-paths) from cache Returns true if any element was removed. ;  ; bool RemoveFromCache (void *obj);  Remove object from cache If nullptr specified - removes no-longer-valid elements Returns true if any element was removed. ;  ; void SetTopElement (std::shared_ptr< Browsable::RElement > elem);  set top element for browsing ;  ; void SetWorkingPath (const Browsable::RElementPath_t &path);  set working directory relative to top element ;  . Private Member Functions; bool ProcessBrowserRequest (const RBrowserRequest &request, RBrowserReply &reply);  Process browser request. ;  ; void ResetLastRequestData (bool with_element);  Reset all data correspondent to last request. ;  . Private Attributes; std::vector< std::pair< Browsable::RElementPath_t, std::shared_ptr< Browsable::RElement > > > fCache;  ! already requested elements ;  ; std::unique_ptr< TObject > fCleanupHandle;  ! cleanup handle for RecursiveRemove ;  ; bool fLastAllChilds {false};  ! if all chlds were extracted ",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserData.html
https://root.cern/doc/v632/classROOT_1_1RBrowserData.html:1861,Performance,cache,cache,1861,"names for each element in the path, first element either ""/"" or ""."" If returned array empty - it is error. ;  ; std::shared_ptr< Browsable::RElement > GetElement (const std::string &str);  Returns element with path, specified as string. ;  ; std::shared_ptr< Browsable::RElement > GetElementFromTop (const Browsable::RElementPath_t &path);  Returns element with path, specified as Browsable::RElementPath_t. ;  ; std::shared_ptr< Browsable::RElement > GetSubElement (const Browsable::RElementPath_t &path);  Returns sub-element starting from top, using cached data. ;  ; const Browsable::RElementPath_t & GetWorkingPath () const;  ; std::string ProcessRequest (const RBrowserRequest &request);  Process browser request, returns string with JSON of RBrowserReply data. ;  ; bool RemoveFromCache (const Browsable::RElementPath_t &path);  Remove path (and all sub-paths) from cache Returns true if any element was removed. ;  ; bool RemoveFromCache (void *obj);  Remove object from cache If nullptr specified - removes no-longer-valid elements Returns true if any element was removed. ;  ; void SetTopElement (std::shared_ptr< Browsable::RElement > elem);  set top element for browsing ;  ; void SetWorkingPath (const Browsable::RElementPath_t &path);  set working directory relative to top element ;  . Private Member Functions; bool ProcessBrowserRequest (const RBrowserRequest &request, RBrowserReply &reply);  Process browser request. ;  ; void ResetLastRequestData (bool with_element);  Reset all data correspondent to last request. ;  . Private Attributes; std::vector< std::pair< Browsable::RElementPath_t, std::shared_ptr< Browsable::RElement > > > fCache;  ! already requested elements ;  ; std::unique_ptr< TObject > fCleanupHandle;  ! cleanup handle for RecursiveRemove ;  ; bool fLastAllChilds {false};  ! if all chlds were extracted ;  ; std::shared_ptr< Browsable::RElement > fLastElement;  ! last element used in request ;  ; std::vector< std::unique_ptr< Browsable::RItem > > fLastItems;",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserData.html
https://root.cern/doc/v632/classROOT_1_1RBrowserData.html:4017,Performance,cache,cache,4017,"vector< const Browsable::RItem * > fLastSortedItems;  ! sorted child items, used in requests ;  ; std::string fLastSortMethod;  ! last sort method ;  ; bool fLastSortReverse {false};  ! last request reverse order ;  ; std::shared_ptr< Browsable::RElement > fTopElement;  ! top element ;  ; Browsable::RElementPath_t fWorkingPath;  ! path showed in Breadcrumb ;  . Friends; class RBrowserDataCleanup;  . #include <ROOT/RBrowserData.hxx>; Constructor & Destructor Documentation. ◆ RBrowserData() [1/2]. RBrowserData::RBrowserData ; (; ). Default constructor. ; Definition at line 68 of file RBrowserData.cxx. ◆ RBrowserData() [2/2]. ROOT::RBrowserData::RBrowserData ; (; std::shared_ptr< Browsable::RElement > ; elem). inline . Definition at line 63 of file RBrowserData.hxx. ◆ ~RBrowserData(). RBrowserData::~RBrowserData ; (; ). virtual . Destructor. ; Definition at line 78 of file RBrowserData.cxx. Member Function Documentation. ◆ ClearCache(). void RBrowserData::ClearCache ; (; ). Clear internal objects cache. ; Definition at line 370 of file RBrowserData.cxx. ◆ CreateDefaultElements(). void RBrowserData::CreateDefaultElements ; (; ). Create default elements shown in the RBrowser. ; Definition at line 108 of file RBrowserData.cxx. ◆ DecomposePath(). Browsable::RElementPath_t RBrowserData::DecomposePath ; (; const std::string & ; path, . bool ; relative_to_work_element . ). Decompose path to elements Returns array of names for each element in the path, first element either ""/"" or ""."" If returned array empty - it is error. ; Definition at line 155 of file RBrowserData.cxx. ◆ GetElement(). std::shared_ptr< Browsable::RElement > RBrowserData::GetElement ; (; const std::string & ; str). Returns element with path, specified as string. ; Definition at line 290 of file RBrowserData.cxx. ◆ GetElementFromTop(). std::shared_ptr< Browsable::RElement > RBrowserData::GetElementFromTop ; (; const Browsable::RElementPath_t & ; path). Returns element with path, specified as Browsable::RElemen",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserData.html
https://root.cern/doc/v632/classROOT_1_1RBrowserData.html:5247,Performance,cache,cached,5247," RBrowserData.cxx. ◆ DecomposePath(). Browsable::RElementPath_t RBrowserData::DecomposePath ; (; const std::string & ; path, . bool ; relative_to_work_element . ). Decompose path to elements Returns array of names for each element in the path, first element either ""/"" or ""."" If returned array empty - it is error. ; Definition at line 155 of file RBrowserData.cxx. ◆ GetElement(). std::shared_ptr< Browsable::RElement > RBrowserData::GetElement ; (; const std::string & ; str). Returns element with path, specified as string. ; Definition at line 290 of file RBrowserData.cxx. ◆ GetElementFromTop(). std::shared_ptr< Browsable::RElement > RBrowserData::GetElementFromTop ; (; const Browsable::RElementPath_t & ; path). Returns element with path, specified as Browsable::RElementPath_t. ; Definition at line 300 of file RBrowserData.cxx. ◆ GetSubElement(). std::shared_ptr< Browsable::RElement > RBrowserData::GetSubElement ; (; const Browsable::RElementPath_t & ; path). Returns sub-element starting from top, using cached data. ; Definition at line 308 of file RBrowserData.cxx. ◆ GetWorkingPath(). const Browsable::RElementPath_t & ROOT::RBrowserData::GetWorkingPath ; (; ); const. inline . Definition at line 73 of file RBrowserData.hxx. ◆ ProcessBrowserRequest(). bool RBrowserData::ProcessBrowserRequest ; (; const RBrowserRequest & ; request, . RBrowserReply & ; reply . ). private . Process browser request. ; Definition at line 171 of file RBrowserData.cxx. ◆ ProcessRequest(). std::string RBrowserData::ProcessRequest ; (; const RBrowserRequest & ; request). Process browser request, returns string with JSON of RBrowserReply data. ; Definition at line 269 of file RBrowserData.cxx. ◆ RemoveFromCache() [1/2]. bool RBrowserData::RemoveFromCache ; (; const Browsable::RElementPath_t & ; path). Remove path (and all sub-paths) from cache Returns true if any element was removed. ; Definition at line 406 of file RBrowserData.cxx. ◆ RemoveFromCache() [2/2]. bool RBrowserData::RemoveFromCache ",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserData.html
https://root.cern/doc/v632/classROOT_1_1RBrowserData.html:6070,Performance,cache,cache,6070,"ubElement(). std::shared_ptr< Browsable::RElement > RBrowserData::GetSubElement ; (; const Browsable::RElementPath_t & ; path). Returns sub-element starting from top, using cached data. ; Definition at line 308 of file RBrowserData.cxx. ◆ GetWorkingPath(). const Browsable::RElementPath_t & ROOT::RBrowserData::GetWorkingPath ; (; ); const. inline . Definition at line 73 of file RBrowserData.hxx. ◆ ProcessBrowserRequest(). bool RBrowserData::ProcessBrowserRequest ; (; const RBrowserRequest & ; request, . RBrowserReply & ; reply . ). private . Process browser request. ; Definition at line 171 of file RBrowserData.cxx. ◆ ProcessRequest(). std::string RBrowserData::ProcessRequest ; (; const RBrowserRequest & ; request). Process browser request, returns string with JSON of RBrowserReply data. ; Definition at line 269 of file RBrowserData.cxx. ◆ RemoveFromCache() [1/2]. bool RBrowserData::RemoveFromCache ; (; const Browsable::RElementPath_t & ; path). Remove path (and all sub-paths) from cache Returns true if any element was removed. ; Definition at line 406 of file RBrowserData.cxx. ◆ RemoveFromCache() [2/2]. bool RBrowserData::RemoveFromCache ; (; void * ; obj). Remove object from cache If nullptr specified - removes no-longer-valid elements Returns true if any element was removed. ; Definition at line 380 of file RBrowserData.cxx. ◆ ResetLastRequestData(). void RBrowserData::ResetLastRequestData ; (; bool ; with_element). private . Reset all data correspondent to last request. ; Definition at line 138 of file RBrowserData.cxx. ◆ SetTopElement(). void RBrowserData::SetTopElement ; (; std::shared_ptr< Browsable::RElement > ; elem). set top element for browsing ; Definition at line 88 of file RBrowserData.cxx. ◆ SetWorkingPath(). void RBrowserData::SetWorkingPath ; (; const Browsable::RElementPath_t & ; path). set working directory relative to top element ; Definition at line 98 of file RBrowserData.cxx. Friends And Related Symbol Documentation. ◆ RBrowserDataCleanup. frie",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserData.html
https://root.cern/doc/v632/classROOT_1_1RBrowserData.html:6269,Performance,cache,cache,6269," ◆ GetWorkingPath(). const Browsable::RElementPath_t & ROOT::RBrowserData::GetWorkingPath ; (; ); const. inline . Definition at line 73 of file RBrowserData.hxx. ◆ ProcessBrowserRequest(). bool RBrowserData::ProcessBrowserRequest ; (; const RBrowserRequest & ; request, . RBrowserReply & ; reply . ). private . Process browser request. ; Definition at line 171 of file RBrowserData.cxx. ◆ ProcessRequest(). std::string RBrowserData::ProcessRequest ; (; const RBrowserRequest & ; request). Process browser request, returns string with JSON of RBrowserReply data. ; Definition at line 269 of file RBrowserData.cxx. ◆ RemoveFromCache() [1/2]. bool RBrowserData::RemoveFromCache ; (; const Browsable::RElementPath_t & ; path). Remove path (and all sub-paths) from cache Returns true if any element was removed. ; Definition at line 406 of file RBrowserData.cxx. ◆ RemoveFromCache() [2/2]. bool RBrowserData::RemoveFromCache ; (; void * ; obj). Remove object from cache If nullptr specified - removes no-longer-valid elements Returns true if any element was removed. ; Definition at line 380 of file RBrowserData.cxx. ◆ ResetLastRequestData(). void RBrowserData::ResetLastRequestData ; (; bool ; with_element). private . Reset all data correspondent to last request. ; Definition at line 138 of file RBrowserData.cxx. ◆ SetTopElement(). void RBrowserData::SetTopElement ; (; std::shared_ptr< Browsable::RElement > ; elem). set top element for browsing ; Definition at line 88 of file RBrowserData.cxx. ◆ SetWorkingPath(). void RBrowserData::SetWorkingPath ; (; const Browsable::RElementPath_t & ; path). set working directory relative to top element ; Definition at line 98 of file RBrowserData.cxx. Friends And Related Symbol Documentation. ◆ RBrowserDataCleanup. friend class RBrowserDataCleanup. friend . Definition at line 39 of file RBrowserData.hxx. Member Data Documentation. ◆ fCache. std::vector<std::pair<Browsable::RElementPath_t, std::shared_ptr<Browsable::RElement> > > ROOT::RBrowserData::fC",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserData.html
https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html:2272,Availability,error,error,2272,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserDataCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html
https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html:2361,Availability,error,error,2361,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserDataCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html
https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html:2516,Availability,error,error,2516,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserDataCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html
https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html:2813,Availability,error,error,2813,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserDataCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html
https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html:7392,Availability,error,error,7392,"const;  This method must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; RBrowserData & fData;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 ));",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserDataCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html
https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html:2278,Integrability,message,message,2278,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserDataCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html
https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html:2819,Integrability,message,message,2819,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserDataCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html
https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html:4021,Integrability,message,message,4021,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const ch",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserDataCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html
https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html:7398,Integrability,message,message,7398,"const;  This method must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; RBrowserData & fData;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 ));",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserDataCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html
https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html:7771,Integrability,message,message,7771,"rimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; RBrowserData & fData;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). }; ",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserDataCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html
https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html:511,Modifiability,inherit,inherited,511,". ROOT: ROOT::RBrowserDataCleanup Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::RBrowserDataCleanup Class Reference. . Definition at line 43 of file RBrowserData.cxx. Public Member Functions;  RBrowserDataCleanup (RBrowserData &_data);  ; void RecursiveRemove (TObject *obj) override;  Recursively remove this object from a list. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone ",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserDataCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html
https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html:1908,Modifiability,inherit,inheritance,1908,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserDataCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html
https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html:4119,Modifiability,inherit,inherits,4119,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a b",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserDataCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html
https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html:4236,Modifiability,inherit,inherits,4236,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not pro",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserDataCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html
https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html:8142,Modifiability,inherit,inherited,8142,"m an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; RBrowserData & fData;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObject",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserDataCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html
https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html:8798,Modifiability,inherit,inherited,8798," directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; RBrowserData & fData;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Inheritance diagram for ROOT::RBrowserDataCleanup:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RBrowserDataCleanup(). ROOT::RBrowserDataCleanup::RBrowserDataCleanup ; (; RBrowserData & ; _data). inline . Definition at lin",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserDataCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html
https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html:9301,Modifiability,inherit,inherited,9301," 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Inheritance diagram for ROOT::RBrowserDataCleanup:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RBrowserDataCleanup(). ROOT::RBrowserDataCleanup::RBrowserDataCleanup ; (; RBrowserData & ; _data). inline . Definition at line 48 of file RBrowserData.cxx. Member Function Documentation. ◆ RecursiveRemove(). void ROOT::RBrowserDataCleanup::RecursiveRemove ; (; TObject * ; obj). inlineoverridevirtual . Recursively remove this object from a list. ; Typically implemented by classes that can contain multiple references to a same object. ; Reimplemented from TObject.; Definition at line 50 of file RBrowserData.cxx. Member Data Documentation. ◆ fData. RBrowserData& ROOT::RBrowserDataCleanup::fData. private . Definition at line 45 of file RB",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserDataCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html
https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html:9400,Modifiability,inherit,inherited,9400," 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Inheritance diagram for ROOT::RBrowserDataCleanup:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RBrowserDataCleanup(). ROOT::RBrowserDataCleanup::RBrowserDataCleanup ; (; RBrowserData & ; _data). inline . Definition at line 48 of file RBrowserData.cxx. Member Function Documentation. ◆ RecursiveRemove(). void ROOT::RBrowserDataCleanup::RecursiveRemove ; (; TObject * ; obj). inlineoverridevirtual . Recursively remove this object from a list. ; Typically implemented by classes that can contain multiple references to a same object. ; Reimplemented from TObject.; Definition at line 50 of file RBrowserData.cxx. Member Data Documentation. ◆ fData. RBrowserData& ROOT::RBrowserDataCleanup::fData. private . Definition at line 45 of file RB",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserDataCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html
https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html:3750,Security,hash,hash,3750," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other obje",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserDataCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html
https://root.cern/doc/v632/classROOT_1_1RBrowserEditorWidget.html:820,Modifiability,inherit,inherited,820,". ROOT: ROOT::RBrowserEditorWidget Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RBrowserEditorWidget Class Reference. . Definition at line 60 of file RBrowser.cxx. Public Member Functions;  RBrowserEditorWidget (const std::string &name, bool is_editor=true);  ; virtual ~RBrowserEditorWidget ()=default;  ; bool DrawElement (std::shared_ptr< Browsable::RElement > &elem, const std::string &="""") override;  ; std::string GetKind () const override;  ; std::string GetTitle () override;  ; std::string GetUrl () override;  ; void ResetConn () override;  ; std::string SendWidgetContent () override;  ; void Show (const std::string &) override;  ;  Public Member Functions inherited from ROOT::RBrowserWidget;  RBrowserWidget (const std::string &name);  ; virtual ~RBrowserWidget ()=default;  ; virtual void CheckModified ();  ; RBrowser * GetBrowser () const;  ; const std::string & GetName () const;  ; const Browsable::RElementPath_t & GetPath () const;  ; std::string SendWidgetTitle ();  Returns string which can be send to browser client to set/change title of the widget tab. ;  ; virtual void SetActive ();  ; void SetPath (const Browsable::RElementPath_t &path);  . Public Attributes; std::string fContent;  ; std::string fFileName;  ; bool fFirstSend {false};  ! if editor content was send at least once ;  ; bool fIsEditor {true};  ! either editor or image viewer ;  ; std::string fItemPath;  ! item path in the browser ;  ; std::string fTitle;  . Inheritance diagram for ROOT::RBrowserEditorWidget:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RBrowserEditorWidget(). ROOT::RBrowserEditorWidget::RBrowserEditorWidget ; (; const std::string & ; name, . bool ; is_editor = true . ). inline . Definition at line 70 of file RBrowser.cxx. ◆ ~RBrowserEdi",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserEditorWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserEditorWidget.html
https://root.cern/doc/v632/classROOT_1_1RBrowserInfoWidget.html:971,Modifiability,inherit,inherited,971,". ROOT: ROOT::RBrowserInfoWidget Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RBrowserInfoWidget Class Reference. . Definition at line 136 of file RBrowser.cxx. Public Types; enum  { kMaxContentLen = 10000000; };  . Public Member Functions;  RBrowserInfoWidget (const std::string &name);  ; virtual ~RBrowserInfoWidget ()=default;  ; bool DrawElement (std::shared_ptr< Browsable::RElement > &, const std::string &="""") override;  ; std::string GetKind () const override;  ; std::string GetTitle () override;  ; std::string GetUrl () override;  ; void Refresh ();  ; void RefreshFromLogs (const std::string &promt, const std::vector< std::string > &logs);  ; void ResetConn () override;  ; std::string SendWidgetContent () override;  ; void Show (const std::string &) override;  ;  Public Member Functions inherited from ROOT::RBrowserWidget;  RBrowserWidget (const std::string &name);  ; virtual ~RBrowserWidget ()=default;  ; virtual void CheckModified ();  ; RBrowser * GetBrowser () const;  ; const std::string & GetName () const;  ; const Browsable::RElementPath_t & GetPath () const;  ; std::string SendWidgetTitle ();  Returns string which can be send to browser client to set/change title of the widget tab. ;  ; virtual void SetActive ();  ; void SetPath (const Browsable::RElementPath_t &path);  . Public Attributes; std::string fContent;  ; bool fFirstSend {false};  ! if editor content was send at least once ;  ; std::string fTitle;  . Inheritance diagram for ROOT::RBrowserInfoWidget:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkMaxContentLen . Definition at line 139 of file RBrowser.cxx. Constructor & Destructor Documentation. ◆ RBrowserInfoWidget(). ROOT::RBrowserInfoWidget::RBrowserIn",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserInfoWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserInfoWidget.html
https://root.cern/doc/v632/classROOT_1_1RBrowserInfoWidget.html:814,Testability,log,logs,814,". ROOT: ROOT::RBrowserInfoWidget Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RBrowserInfoWidget Class Reference. . Definition at line 136 of file RBrowser.cxx. Public Types; enum  { kMaxContentLen = 10000000; };  . Public Member Functions;  RBrowserInfoWidget (const std::string &name);  ; virtual ~RBrowserInfoWidget ()=default;  ; bool DrawElement (std::shared_ptr< Browsable::RElement > &, const std::string &="""") override;  ; std::string GetKind () const override;  ; std::string GetTitle () override;  ; std::string GetUrl () override;  ; void Refresh ();  ; void RefreshFromLogs (const std::string &promt, const std::vector< std::string > &logs);  ; void ResetConn () override;  ; std::string SendWidgetContent () override;  ; void Show (const std::string &) override;  ;  Public Member Functions inherited from ROOT::RBrowserWidget;  RBrowserWidget (const std::string &name);  ; virtual ~RBrowserWidget ()=default;  ; virtual void CheckModified ();  ; RBrowser * GetBrowser () const;  ; const std::string & GetName () const;  ; const Browsable::RElementPath_t & GetPath () const;  ; std::string SendWidgetTitle ();  Returns string which can be send to browser client to set/change title of the widget tab. ;  ; virtual void SetActive ();  ; void SetPath (const Browsable::RElementPath_t &path);  . Public Attributes; std::string fContent;  ; bool fFirstSend {false};  ! if editor content was send at least once ;  ; std::string fTitle;  . Inheritance diagram for ROOT::RBrowserInfoWidget:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkMaxContentLen . Definition at line 139 of file RBrowser.cxx. Constructor & Destructor Documentation. ◆ RBrowserInfoWidget(). ROOT::RBrowserInfoWidget::RBrowserIn",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserInfoWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserInfoWidget.html
https://root.cern/doc/v632/classROOT_1_1RBrowserInfoWidget.html:3268,Testability,log,logs,3268,"ol ROOT::RBrowserInfoWidget::DrawElement ; (; std::shared_ptr< Browsable::RElement > & ; , . const std::string & ; = """" . ). inlineoverridevirtual . Reimplemented from ROOT::RBrowserWidget.; Definition at line 161 of file RBrowser.cxx. ◆ GetKind(). std::string ROOT::RBrowserInfoWidget::GetKind ; (; ); const. inlineoverridevirtual . Implements ROOT::RBrowserWidget.; Definition at line 155 of file RBrowser.cxx. ◆ GetTitle(). std::string ROOT::RBrowserInfoWidget::GetTitle ; (; ). inlineoverridevirtual . Reimplemented from ROOT::RBrowserWidget.; Definition at line 156 of file RBrowser.cxx. ◆ GetUrl(). std::string ROOT::RBrowserInfoWidget::GetUrl ; (; ). inlineoverridevirtual . Implements ROOT::RBrowserWidget.; Definition at line 157 of file RBrowser.cxx. ◆ Refresh(). void ROOT::RBrowserInfoWidget::Refresh ; (; ). inline . Definition at line 163 of file RBrowser.cxx. ◆ RefreshFromLogs(). void ROOT::RBrowserInfoWidget::RefreshFromLogs ; (; const std::string & ; promt, . const std::vector< std::string > & ; logs . ). inline . Definition at line 191 of file RBrowser.cxx. ◆ ResetConn(). void ROOT::RBrowserInfoWidget::ResetConn ; (; ). inlineoverridevirtual . Reimplemented from ROOT::RBrowserWidget.; Definition at line 153 of file RBrowser.cxx. ◆ SendWidgetContent(). std::string ROOT::RBrowserInfoWidget::SendWidgetContent ; (; ). inlineoverridevirtual . Reimplemented from ROOT::RBrowserWidget.; Definition at line 218 of file RBrowser.cxx. ◆ Show(). void ROOT::RBrowserInfoWidget::Show ; (; const std::string & ; ). inlineoverridevirtual . Implements ROOT::RBrowserWidget.; Definition at line 159 of file RBrowser.cxx. Member Data Documentation. ◆ fContent. std::string ROOT::RBrowserInfoWidget::fContent. Definition at line 142 of file RBrowser.cxx. ◆ fFirstSend. bool ROOT::RBrowserInfoWidget::fFirstSend {false}. ! if editor content was send at least once ; Definition at line 143 of file RBrowser.cxx. ◆ fTitle. std::string ROOT::RBrowserInfoWidget::fTitle. Definition at line 141 of",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserInfoWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserInfoWidget.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:4736,Availability,error,error,4736,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:4825,Availability,error,error,4825,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:4980,Availability,error,error,4980,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:5277,Availability,error,error,5277,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:9712,Availability,error,error,9712," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class s",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:4742,Integrability,message,message,4742,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:5283,Integrability,message,message,5283,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:6485,Integrability,message,message,6485,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:9718,Integrability,message,message,9718," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class s",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:10091,Integrability,message,message,10091," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, voi",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:562,Modifiability,inherit,inherited,562,". ROOT: ROOT::RBrowserTimer Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RBrowserTimer Class Reference. . Definition at line 47 of file RBrowser.cxx. Public Member Functions;  RBrowserTimer (Long_t milliSec, Bool_t mode, RBrowser &br);  !< browser processing postponed requests ;  ; void Timeout () override;  timeout handler used to process postponed requests in main ROOT thread ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void Set",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:2507,Modifiability,inherit,inherited,2507,"verride;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ; virtual void TurnOn ();  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consi",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:2975,Modifiability,inherit,inherited,2975,"kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ; virtual void TurnOn ();  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer ",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:4372,Modifiability,inherit,inheritance,4372,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:6583,Modifiability,inherit,inherits,6583,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:6700,Modifiability,inherit,inherits,6700,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:10398,Modifiability,inherit,inherited,10398," SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal of this object from slot of receiver. ;  ; virtual void Disconnected (const char *);  ; void Emit (const char *signal);  Activate signal without args. ;  ; template<typename T > ; void Emit (const char *signal, const T &arg);  Activate signal with single paramet",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:12428,Modifiability,inherit,inherited,12428,"t, const T &... params);  Emit a signal with a varying number of arguments. ;  ; TList * GetListOfClassSignals () const;  Returns pointer to list of signals of this class. ;  ; TList * GetListOfConnections () const;  ; TList * GetListOfSignals () const;  ; virtual Bool_t HasConnection (const char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Public Attributes; RBrowser & fBrowser;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TTimer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtH",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:13084,Modifiability,inherit,inherited,13084,"umber of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Public Attributes; RBrowser & fBrowser;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TTimer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bo",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:13468,Modifiability,inherit,inherited,13468,"WriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TTimer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Thi",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:13686,Modifiability,inherit,inherited,13686,"WriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TTimer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Thi",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:14204,Modifiability,inherit,inherited,14204,"ar * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullpt",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:15364,Modifiability,inherit,inherited,15364,"ass_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sende",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:15463,Modifiability,inherit,inherited,15463,"ass_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sende",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:15674,Modifiability,inherit,inherited,15674,", const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:15787,Modifiability,inherit,inherited,15787,", const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:16636,Modifiability,inherit,inherited,16636,"nst char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for ROOT::RBrowserTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RBrowserTimer(). ROOT::RBrowserTimer::RBrowserTimer ; (; Long_t ; milliSec, . Bool_t ; mode, . RBrowser & ; br . ). inline . !< browser processing postponed requests ; constructor ; Definition at line 52 of file RBrowser.cxx. Member Function Documentation. ◆ Timeout(). void ROOT::RBrowserTimer::Timeout ; (; ). inlineoverridevirtual . timeout handler used to process postponed requests in main ROOT thread ; Reimplemented from TTimer.; Definition at line 56 of file RBrowser.cxx. Member Data Documentation. ◆ fBrowser. RBrowser& ROOT::RB",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:16839,Modifiability,inherit,inherited,16839,"nst char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for ROOT::RBrowserTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RBrowserTimer(). ROOT::RBrowserTimer::RBrowserTimer ; (; Long_t ; milliSec, . Bool_t ; mode, . RBrowser & ; br . ). inline . !< browser processing postponed requests ; constructor ; Definition at line 52 of file RBrowser.cxx. Member Function Documentation. ◆ Timeout(). void ROOT::RBrowserTimer::Timeout ; (; ). inlineoverridevirtual . timeout handler used to process postponed requests in main ROOT thread ; Reimplemented from TTimer.; Definition at line 56 of file RBrowser.cxx. Member Data Documentation. ◆ fBrowser. RBrowser& ROOT::RB",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:17052,Modifiability,inherit,inherited,17052,"nst char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for ROOT::RBrowserTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RBrowserTimer(). ROOT::RBrowserTimer::RBrowserTimer ; (; Long_t ; milliSec, . Bool_t ; mode, . RBrowser & ; br . ). inline . !< browser processing postponed requests ; constructor ; Definition at line 52 of file RBrowser.cxx. Member Function Documentation. ◆ Timeout(). void ROOT::RBrowserTimer::Timeout ; (; ). inlineoverridevirtual . timeout handler used to process postponed requests in main ROOT thread ; Reimplemented from TTimer.; Definition at line 56 of file RBrowser.cxx. Member Data Documentation. ◆ fBrowser. RBrowser& ROOT::RB",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:461,Safety,timeout,timeout,461,". ROOT: ROOT::RBrowserTimer Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RBrowserTimer Class Reference. . Definition at line 47 of file RBrowser.cxx. Public Member Functions;  RBrowserTimer (Long_t milliSec, Bool_t mode, RBrowser &br);  !< browser processing postponed requests ;  ; void Timeout () override;  timeout handler used to process postponed requests in main ROOT thread ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void Set",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:2163,Safety,timeout,timeout,2163,"r * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ; virtual void TurnOn ();  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObje",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:17684,Safety,timeout,timeout,17684," full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for ROOT::RBrowserTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RBrowserTimer(). ROOT::RBrowserTimer::RBrowserTimer ; (; Long_t ; milliSec, . Bool_t ; mode, . RBrowser & ; br . ). inline . !< browser processing postponed requests ; constructor ; Definition at line 52 of file RBrowser.cxx. Member Function Documentation. ◆ Timeout(). void ROOT::RBrowserTimer::Timeout ; (; ). inlineoverridevirtual . timeout handler used to process postponed requests in main ROOT thread ; Reimplemented from TTimer.; Definition at line 56 of file RBrowser.cxx. Member Data Documentation. ◆ fBrowser. RBrowser& ROOT::RBrowserTimer::fBrowser. Definition at line 49 of file RBrowser.cxx. gui/browserv7/src/RBrowser.cxx. ROOTRBrowserTimer. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html:6214,Security,hash,hash,6214," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserTimer.html
https://root.cern/doc/v632/classROOT_1_1RBrowserWidget.html:1587,Deployability,patch,patches,1587,"; virtual ~RBrowserWidget ()=default;  ; virtual void CheckModified ();  ; virtual bool DrawElement (std::shared_ptr< Browsable::RElement > &, const std::string &="""");  ; RBrowser * GetBrowser () const;  ; virtual std::string GetKind () const =0;  ; const std::string & GetName () const;  ; const Browsable::RElementPath_t & GetPath () const;  ; virtual std::string GetTitle ();  ; virtual std::string GetUrl ()=0;  ; virtual void ResetConn ();  ; virtual std::string SendWidgetContent ();  ; std::string SendWidgetTitle ();  Returns string which can be send to browser client to set/change title of the widget tab. ;  ; virtual void SetActive ();  ; void SetPath (const Browsable::RElementPath_t &path);  ; virtual void Show (const std::string &)=0;  . Private Attributes; RBrowser * fBrowser {nullptr};  ; std::string fName;  ! widget name ;  ; Browsable::RElementPath_t fPath;  ! path of drawn element ;  . Friends; class RBrowser;  . #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/gui/browserv7/src/RBrowserWidget.hxx>. Inheritance diagram for ROOT::RBrowserWidget:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RBrowserWidget(). ROOT::RBrowserWidget::RBrowserWidget ; (; const std::string & ; name). inlineexplicit . Definition at line 44 of file RBrowserWidget.hxx. ◆ ~RBrowserWidget(). virtual ROOT::RBrowserWidget::~RBrowserWidget ; (; ). virtualdefault . Member Function Documentation. ◆ CheckModified(). virtual void ROOT::RBrowserWidget::CheckModified ; (; ). inlinevirtual . Reimplemented in RBrowserRCanvasWidget, and RBrowserTCanvasWidget.; Definition at line 67 of file RBrowserWidget.hxx. ◆ DrawElement(). virtual bool ROOT::RBrowserWidget::DrawElement ; (; std::shared_ptr< Browsable::RElement > & ; , . const std::string & ; = """" . ). inlinevirtual . Reimplemented in ROOT::RBrowserInfoWidget, ROOT::RBrowserEditorWidget, RBrowserGeomWidget, RB",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserWidget.html
https://root.cern/doc/v632/classROOT_1_1RBrowserWidgetProvider.html:1481,Deployability,patch,patches,1481,"RBrowserWidgetProvider (const std::string &kind);  Constructor. ;  ; virtual ~RBrowserWidgetProvider ();  Destructor. ;  . Static Public Member Functions; static std::shared_ptr< RBrowserWidget > CreateWidget (const std::string &kind, const std::string &name);  Create specified widget. ;  ; static std::shared_ptr< RBrowserWidget > CreateWidgetFor (const std::string &kind, const std::string &name, std::shared_ptr< Browsable::RElement > &element);  Create specified widget for existing object. ;  . Protected Types; using ProvidersMap_t = std::map< std::string, RBrowserWidgetProvider * >;  . Protected Member Functions; virtual std::shared_ptr< RBrowserWidget > Create (const std::string &)=0;  ; virtual std::shared_ptr< RBrowserWidget > CreateFor (const std::string &, std::shared_ptr< Browsable::RElement > &);  . Static Protected Member Functions; static ProvidersMap_t & GetMap ();  Returns static map of existing providers. ;  . #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/gui/browserv7/src/RBrowserWidget.hxx>. Inheritance diagram for ROOT::RBrowserWidgetProvider:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ProvidersMap_t. using ROOT::RBrowserWidgetProvider::ProvidersMap_t = std::map<std::string, RBrowserWidgetProvider*>. protected . Definition at line 72 of file RBrowserWidget.hxx. Constructor & Destructor Documentation. ◆ RBrowserWidgetProvider(). RBrowserWidgetProvider::RBrowserWidgetProvider ; (; const std::string & ; kind). explicit . Constructor. ; Definition at line 37 of file RBrowserWidget.cxx. ◆ ~RBrowserWidgetProvider(). RBrowserWidgetProvider::~RBrowserWidgetProvider ; (; ). virtual . Destructor. ; Definition at line 45 of file RBrowserWidget.cxx. Member Function Documentation. ◆ Create(). virtual std::shared_ptr< RBrowserWidget > ROOT::RBrowserWidgetProvider::Create ; (; const std::string & ; ). protectedpure virtual . Implement",MatchSource.WIKI,doc/v632/classROOT_1_1RBrowserWidgetProvider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserWidgetProvider.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:502,Availability,avail,available,502,". ROOT: ROOT::RDataFrame Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::RDataFrame Class ReferenceDataframe. ; ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. ; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines completely transparently.; Skip to the class reference or keep reading for the user guide.; In a nutshell: ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; myHisto->Draw(); // Event loop is run here, upon first access to a result; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and ret",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:9174,Availability,avail,available,9174,"ake an extra unsigned int slot as its first parameter. slot will take a different value, 0 to nThreads - 1, for each thread of execution. This is meant as a helper in writing thread-safe Foreach() actions when using RDataFrame after ROOT::EnableImplicitMT(). ForeachSlot() works just as well with single-thread execution: in that case slot will always be 0. . Snapshot() Write the processed dataset to disk, in a new TTree and TFile. Custom columns can be saved as well, filtered entries are not saved. Users can specify which columns to save (default is all). Snapshot, by default, overwrites the output file if it already exists. Snapshot() can be made lazy setting the appropriate flag in the snapshot options. . Queries; These operations do not modify the dataframe or book computations but simply return information on the RDataFrame object. Operation Description . Describe() Get useful information describing the dataframe, e.g. columns and their types. . GetColumnNames() Get the names of all the available columns of the dataset. . GetColumnType() Return the type of a given column as a string. . GetColumnTypeNamesList() Return the list of type names of columns in the dataset. . GetDefinedColumnNames() Get the names of all the defined columns. . GetFilterNames() Return the names of all filters in the computation graph. . GetNRuns() Return the number of event loops run by this RDataFrame instance so far. . GetNSlots() Return the number of processing slots that RDataFrame will use during the event loop (i.e. the concurrency level). . SaveGraph() Store the computation graph of an RDataFrame in DOT format (graphviz) for easy inspection. See the relevant section for details. . Introduction; Users define their analysis as a sequence of operations to be performed on the dataframe object; the framework takes care of the management of the loop over entries as well as low-level details such as I/O and parallelization. RDataFrame provides methods to perform most common operations requ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:12060,Availability,robust,robust,12060,"the first time. Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them.; The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the crash course to discover more idiomatic and flexible ways to express analyses with RDataFrame. . TTreeReader ROOT::RDataFrame . TTreeReader reader(""myTree"", file);; TTreeReaderValue<A_t> a(reader, ""A"");; TTreeReaderValue<B_t> b(reader, ""B"");; TTreeReaderValue<C_t> c(reader, ""C"");; while(reader.Next()) {; if(IsGoodEvent(*a, *b, *c)); DoStuff(*a, *b, *c);; }; b#define b(i)Definition RSha256.hxx:100; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:146; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:44; ROOT::RDataFrame d(""myTree"", file, {""A"", ""B"", ""C""});; d.Filter(IsGoodEvent).Foreach(DoStuff);; ROOT::RDF::RInterface::FilterRInterface< RDFDetail::RFilter< F, Proxied >, DS_t > Filter(F f, const ColumnNames_t &columns={}, std::string_view name="""")Append a filter to the call graph.Definition RInterface.hxx:216; . TTree::Draw ROOT::RDataFrame . auto *tree = file->Get<TTree>(""myTree"");; tree->Draw(""x"", ""y > 2"");; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; ROOT::RDataFrame df(""myTree"", file);; auto h = df.Filter(""y > 2"").Histo1D(""x"");; h->Draw(); h#define h(i)Definition RSha256.hxx:106; . tree->Draw(""jet_eta"", ""weight*(event == 1)"");; df.Filter(""event == 1"").Histo1D(""jet_eta"", ""weight"");; // or the fully compiled version:; df.Filter([] (ULong64_t e) { return e == 1; }, {""event""}).Histo1D<RVec<float>>(""jet_eta"", ""weight"");; e#define e(i)Definition RSha256.hxx:103; ULong64_tunsigned ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:22926,Availability,avail,available,22926,"using PyROOT.; Previously, when showing the different ways an RDataFrame can be created, we showed a constructor that takes a number of entries as a parameter. In the following example we show how to combine such an ""empty"" RDataFrame with Define() transformations to create a dataset on the fly. We then save the generated data on disk using the Snapshot() action. RDataFrame d(100); // an RDF that will generate 100 entries (currently empty); int x = -1;; auto d_with_columns = d.Define(""x"", [&x] { return ++x; }); .Define(""xx"", [&x] { return x*x; });; d_with_columns.Snapshot(""myNewTree"", ""newfile.root"");; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::DefineRInterface< RDFDetail::RLoopManager, DS_t > Define(std::string_view name, F expression, const ColumnNames_t &columns={})Define a new column.Definition RInterface.hxx:338; This example is slightly more advanced than what we have seen so far. First, it makes use of lambda captures (a simple way to make external variables available inside the body of C++ lambdas) to act on the same variable x from both Define() transformations. Second, we have stored the transformed dataframe in a variable. This is always possible, since at each point of the transformation chain users can store the status of the dataframe for further use (more on this below).; You can read more about defining new columns here. A graph composed of two branches, one starting with a filter and one with a define. The end point of a branch is always an action. Running on a range of entries; It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act exclusively on the entries passing the filter – it will not even count the other entries! The same goes for a Ra",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:24373,Availability,avail,available,24373,"e with a define. The end point of a branch is always an action. Running on a range of entries; It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act exclusively on the entries passing the filter – it will not even count the other entries! The same goes for a Range() hanging from another Range(). Here are some commented examples: RDataFrame d(""myTree"", ""file.root"");; // Here we store a dataframe that loops over only the first 30 entries in a variable; auto d30 = d.Range(30);; // This is how you pick all entries from 15 onwards; auto d15on = d.Range(15, 0);; // We can specify a stride too, in this case we pick an event every 3; auto d15each3 = d.Range(0, 15, 3);; Note that ranges are not available when multi-threading is enabled. More information on ranges is available here. Executing multiple actions in the same event loop; As a final example let us apply two different cuts on branch ""MET"" and fill two different histograms with the ""pt_v"" of the filtered events. By now, you should be able to easily understand what is happening: RDataFrame d(""treeName"", ""file.root"");; auto h1 = d.Filter(""MET > 10"").Histo1D(""pt_v"");; auto h2 = d.Histo1D(""pt_v"");; h1->Draw(); // event loop is run once here; h2->Draw(""SAME""); // no need to run the event loop again; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; h1TH1F * h1Definition legend1.C:5; RDataFrame executes all above actions by running the event-loop only once. The trick is that actions are not executed at the moment they are called, but they are lazy, i.e. delayed until the moment one of their results is accessed through the smart pointer. At that time, the event loop is ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:24446,Availability,avail,available,24446,"nning on a range of entries; It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act exclusively on the entries passing the filter – it will not even count the other entries! The same goes for a Range() hanging from another Range(). Here are some commented examples: RDataFrame d(""myTree"", ""file.root"");; // Here we store a dataframe that loops over only the first 30 entries in a variable; auto d30 = d.Range(30);; // This is how you pick all entries from 15 onwards; auto d15on = d.Range(15, 0);; // We can specify a stride too, in this case we pick an event every 3; auto d15each3 = d.Range(0, 15, 3);; Note that ranges are not available when multi-threading is enabled. More information on ranges is available here. Executing multiple actions in the same event loop; As a final example let us apply two different cuts on branch ""MET"" and fill two different histograms with the ""pt_v"" of the filtered events. By now, you should be able to easily understand what is happening: RDataFrame d(""treeName"", ""file.root"");; auto h1 = d.Filter(""MET > 10"").Histo1D(""pt_v"");; auto h2 = d.Histo1D(""pt_v"");; h1->Draw(); // event loop is run once here; h2->Draw(""SAME""); // no need to run the event loop again; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; h1TH1F * h1Definition legend1.C:5; RDataFrame executes all above actions by running the event-loop only once. The trick is that actions are not executed at the moment they are called, but they are lazy, i.e. delayed until the moment one of their results is accessed through the smart pointer. At that time, the event loop is triggered and all results are produced simultaneously.; It is the",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:29405,Availability,avail,available,29405,"y serves a cached result.; Named filters and cutflow reports; An optional string parameter name can be passed to the Filter() method to create a named filter. Named filters work as usual, but also keep track of how many entries they accept and reject.; Statistics are retrieved through a call to the Report() method:. when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all named filters declared up to that point; when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative all named filters in the section of the chain between the main RDataFrame and that node (included). Stats are stored in the same order as named filters have been added to the graph, and refer to the latest event-loop that has been run using the relevant RDataFrame. Ranges; When RDataFrame is not being used in a multi-thread environment (i.e. no call to EnableImplicitMT() was made), Range() transformations are available. These act very much like filters but instead of basing their decision on a filter expression, they rely on begin,end and stride parameters. begin: initial entry number considered for this range.; end: final entry number (excluded) considered for this range. 0 means that the range goes until the end of the dataset.; stride: process one entry of the [begin, end) range every stride entries. Must be strictly greater than 0. The actual number of entries processed downstream of a Range() node will be (end - begin)/stride (or less if less entries than that are available).; Note that ranges act ""locally"", not based on the global entry count: Range(10,50) means ""skip the first 10 entries; that reach this node*, let the next 40 entries pass, then stop processing"". If a range node hangs from a filter node, and the range has a begin parameter of 10, that means the range will skip the first 10 entries that pass the preceding filter.; Ranges allow ""early quit",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:29879,Availability,down,downstream,29879,"ne() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative all named filters in the section of the chain between the main RDataFrame and that node (included). Stats are stored in the same order as named filters have been added to the graph, and refer to the latest event-loop that has been run using the relevant RDataFrame. Ranges; When RDataFrame is not being used in a multi-thread environment (i.e. no call to EnableImplicitMT() was made), Range() transformations are available. These act very much like filters but instead of basing their decision on a filter expression, they rely on begin,end and stride parameters. begin: initial entry number considered for this range.; end: final entry number (excluded) considered for this range. 0 means that the range goes until the end of the dataset.; stride: process one entry of the [begin, end) range every stride entries. Must be strictly greater than 0. The actual number of entries processed downstream of a Range() node will be (end - begin)/stride (or less if less entries than that are available).; Note that ranges act ""locally"", not based on the global entry count: Range(10,50) means ""skip the first 10 entries; that reach this node*, let the next 40 entries pass, then stop processing"". If a range node hangs from a filter node, and the range has a begin parameter of 10, that means the range will skip the first 10 entries that pass the preceding filter.; Ranges allow ""early quitting"": if all branches of execution of a functional graph reached their end value of processed entries, the event-loop is immediately interrupted. This is useful for debugging and quick data explorations. Custom columns; Custom columns are created by invoking Define(name, f, columnList). As usual, f can be any callable object (function, lambda expression, functor class...); it takes the values of the columns listed in columnList (a list of strings) as parameters, in the same order as they are listed in columnList. f must return the ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:29976,Availability,avail,available,29976,"ne() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative all named filters in the section of the chain between the main RDataFrame and that node (included). Stats are stored in the same order as named filters have been added to the graph, and refer to the latest event-loop that has been run using the relevant RDataFrame. Ranges; When RDataFrame is not being used in a multi-thread environment (i.e. no call to EnableImplicitMT() was made), Range() transformations are available. These act very much like filters but instead of basing their decision on a filter expression, they rely on begin,end and stride parameters. begin: initial entry number considered for this range.; end: final entry number (excluded) considered for this range. 0 means that the range goes until the end of the dataset.; stride: process one entry of the [begin, end) range every stride entries. Must be strictly greater than 0. The actual number of entries processed downstream of a Range() node will be (end - begin)/stride (or less if less entries than that are available).; Note that ranges act ""locally"", not based on the global entry count: Range(10,50) means ""skip the first 10 entries; that reach this node*, let the next 40 entries pass, then stop processing"". If a range node hangs from a filter node, and the range has a begin parameter of 10, that means the range will skip the first 10 entries that pass the preceding filter.; Ranges allow ""early quitting"": if all branches of execution of a functional graph reached their end value of processed entries, the event-loop is immediately interrupted. This is useful for debugging and quick data explorations. Custom columns; Custom columns are created by invoking Define(name, f, columnList). As usual, f can be any callable object (function, lambda expression, functor class...); it takes the values of the columns listed in columnList (a list of strings) as parameters, in the same order as they are listed in columnList. f must return the ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:33962,Availability,avail,available,33962,"::RResultPtr<T>, where T is the type of the result of the action. The final result will be stored in the RResultPtr and can be retrieved by dereferencing it or via its GetValue method. Actions that return collections; If the type of the return value of an action is a collection, e.g. std::vector<int>, you can iterate its elements directly through the wrapping RResultPtr:; ROOT::RDataFrame df{5};; auto df1 = df.Define(""x"", []{ return 42; });; for (const auto &el: df1.Take<int>(""x"")){; std::cout << ""Element: "" << el << ""\n"";; }; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::TakeRResultPtr< COLL > Take(std::string_view column="""")Return a collection of values of a column (lazy action, returns a std::vector by default).Definition RInterface.hxx:1592; int; df = ROOT.RDataFrame(5).Define(""x"", ""42""); for el in df.Take[int](""x""):; print(f""Element: {el}""). Actions and readers; An action that needs values for its computations will request it from a reader, e.g. a column created via Define or available from the input dataset. The action will request values from each column of the list of input columns (either inferred or specified by the user), in order. For example:; ROOT::RDataFrame df{1};; auto df1 = df.Define(""x"", []{ return 11; });; auto df2 = df1.Define(""y"", []{ return 22; });; auto graph = df2.Graph<int, int>(""x"",""y"");; graphDefinition graph.py:1; The Graph action is going to request first the value from column ""x"", then that of column ""y"". Specifically, the order of execution of the operations of nodes in this branch of the computation graph is guaranteed to be top to bottom. Distributed execution; RDataFrame applications can be executed in parallel through distributed computing frameworks on a set of remote machines thanks to the Python package ROOT.RDF.Experimental.Distributed. This experimental, Python-only package allows to scale the optimized performance RDataFrame can achieve on a single machine to multiple nodes at the same time. It is designed so that differe",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:35845,Availability,avail,available,35845,"s designed so that different backends can be easily plugged in, currently supporting Apache Spark and Dask. To make use of distributed RDataFrame, you only need to switch ROOT.RDataFrame with the backend-specific RDataFrame of your choice, for example:; import ROOT; ; # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; ; # It still accepts the same constructor arguments as traditional RDataFrame; df = RDataFrame(""mytree"", ""myfile.root""); ; # Continue the application with the traditional RDataFrame API; sum = df.Filter(""x > 10"").Sum(""y""); h = df.Histo1D((""name"", ""title"", 10, 0, 10), ""x""); ; print(sum.GetValue()); h.Draw(); The main goal of this package is to support running any RDataFrame application distributedly. Nonetheless, not all parts of the RDataFrame API currently work with this package. The subset that is currently available is:; AsNumpy; Count; Define; DefinePerSample; Filter; Graph; Histo[1,2,3]D; HistoND; Max; Mean; Min; Profile[1,2,3]D; Redefine; Snapshot; Stats; StdDev; Sum; Systematic variations: Vary and VariationsFor.; Parallel submission of distributed graphs: RunGraphs.; Information about the dataframe: GetColumnNames. with support for more operations coming in the future. Data sources other than TTree and TChain (e.g. CSV, RNTuple) are currently not supported.; NoteThe distributed RDataFrame module requires at least Python version 3.8. Connecting to a Spark cluster; In order to distribute the RDataFrame workload, you can connect to a Spark cluster you have access to through the official Spark API, then hook the connection instance to the distributed RDataFrame object like so:; import pyspark; import ROOT; ; # Create a SparkContext object with the right configuration for your Spark cluster; conf = SparkConf().setAppName(appName).setMaster(master); sc = SparkContext(conf=conf); ; # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distr",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:38408,Availability,avail,available,38408,"ect to a Dask cluster by creating your own connection object which internally operates with one of the cluster schedulers supported by Dask (more information in the Dask distributed docs):; import ROOT; from dask.distributed import Client; ; # Point RDataFrame calls to the Dask specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; ; # In a Python script the Dask client needs to be initalized in a context; # Jupyter notebooks / Python session don't need this; if __name__ == ""__main__"":; # With an already setup cluster that exposes a Dask scheduler endpoint; client = Client(""dask_scheduler.domain.com:8786""); ; # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); If an instance of distributed.Client is not provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine using all cores available. Choosing the number of distributed tasks; A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but generically tries to infer how many cores are available in the cluster through the connection object. The number of tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to a batch system. The client object created at the beginning of the application does not automatically know how many cores will be available during distributed execution, since the jobs are submitted to the batch system after the creation of the connection. In such cases, the logic is ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:38747,Availability,avail,available,38747,"sk client needs to be initalized in a context; # Jupyter notebooks / Python session don't need this; if __name__ == ""__main__"":; # With an already setup cluster that exposes a Dask scheduler endpoint; client = Client(""dask_scheduler.domain.com:8786""); ; # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); If an instance of distributed.Client is not provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine using all cores available. Choosing the number of distributed tasks; A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but generically tries to infer how many cores are available in the cluster through the connection object. The number of tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to a batch system. The client object created at the beginning of the application does not automatically know how many cores will be available during distributed execution, since the jobs are submitted to the batch system after the creation of the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks.; The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional keyword argument npartitions when creating the RDataFrame object. This parameter is accepted irrespectively of the backend used:; import ROOT; ; # Define correct imports and access the distributed RDataFrame appropriate for ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:39185,Availability,avail,available,39185,"to1D((""name"", ""title"", 10, 0, 10), ""x""); If an instance of distributed.Client is not provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine using all cores available. Choosing the number of distributed tasks; A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but generically tries to infer how many cores are available in the cluster through the connection object. The number of tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to a batch system. The client object created at the beginning of the application does not automatically know how many cores will be available during distributed execution, since the jobs are submitted to the batch system after the creation of the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks.; The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional keyword argument npartitions when creating the RDataFrame object. This parameter is accepted irrespectively of the backend used:; import ROOT; ; # Define correct imports and access the distributed RDataFrame appropriate for the; # backend used in the analysis; RDataFrame = ROOT.RDF.Experimental.Distributed.[BACKEND].RDataFrame; ; if __name__ == ""__main__"":; # The `npartitions` optional argument tells the RDataFrame how many tasks are desired; df = RDataFrame(""mytree"",""myfile.root"", npartitions=NPARTITIONS); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); Note that when processing a TTree or TChain dataset, the npartitions value",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:42913,Availability,error,errors,42913,"s this feature and graphs belonging to different backends can be still triggered with a single call to RunGraphs (e.g. it is possible to send a Spark job and a Dask job at the same time). Histogram models in distributed mode; When calling a Histo*D operation in distributed mode, remember to pass to the function the model of the histogram to be computed, e.g. the axis range and the number of bins:; import ROOT; RDataFrame = ROOT.RDF.Experimental.Distributed.[BACKEND].RDataFrame; ; if __name__ == ""__main__"":; df = RDataFrame(""mytree"",""myfile.root"").Define(""x"",""someoperation""); # The model can be passed either as a tuple with the arguments in the correct order; df.Histo1D((""name"", ""title"", 10, 0, 10), ""x""); # Or by creating the specific struct; model = ROOT.RDF.TH1DModel(""name"", ""title"", 10, 0, 10); df.Histo1D(model, ""x""); ROOT::RDF::TH1DModelA struct which stores the parameters of a TH1D.Definition HistoModels.hxx:30; Without this, two partial histograms resulting from two distributed tasks would have incompatible binning, thus leading to errors when merging them. Failing to pass a histogram model will raise an error on the client side, before starting the distributed execution. Live visualization in distributed mode with dask; The live visualization feature allows real-time data representation of plots generated during the execution of a distributed RDataFrame application. It enables visualizing intermediate results as they are computed across multiple nodes of a Dask cluster by creating a canvas and continuously updating it as partial results become available.; The LiveVisualize() function can be imported from the Python package ROOT.RDF.Experimental.Distributed:; import ROOT; ; LiveVisualize = ROOT.RDF.Experimental.Distributed.LiveVisualize; The function takes drawable objects (e.g. histograms) and optional callback functions as argument, it accepts 4 different input formats:. Passing a list or tuple of drawables: You can pass a list or tuple containing the plots y",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:42987,Availability,error,error,42987," send a Spark job and a Dask job at the same time). Histogram models in distributed mode; When calling a Histo*D operation in distributed mode, remember to pass to the function the model of the histogram to be computed, e.g. the axis range and the number of bins:; import ROOT; RDataFrame = ROOT.RDF.Experimental.Distributed.[BACKEND].RDataFrame; ; if __name__ == ""__main__"":; df = RDataFrame(""mytree"",""myfile.root"").Define(""x"",""someoperation""); # The model can be passed either as a tuple with the arguments in the correct order; df.Histo1D((""name"", ""title"", 10, 0, 10), ""x""); # Or by creating the specific struct; model = ROOT.RDF.TH1DModel(""name"", ""title"", 10, 0, 10); df.Histo1D(model, ""x""); ROOT::RDF::TH1DModelA struct which stores the parameters of a TH1D.Definition HistoModels.hxx:30; Without this, two partial histograms resulting from two distributed tasks would have incompatible binning, thus leading to errors when merging them. Failing to pass a histogram model will raise an error on the client side, before starting the distributed execution. Live visualization in distributed mode with dask; The live visualization feature allows real-time data representation of plots generated during the execution of a distributed RDataFrame application. It enables visualizing intermediate results as they are computed across multiple nodes of a Dask cluster by creating a canvas and continuously updating it as partial results become available.; The LiveVisualize() function can be imported from the Python package ROOT.RDF.Experimental.Distributed:; import ROOT; ; LiveVisualize = ROOT.RDF.Experimental.Distributed.LiveVisualize; The function takes drawable objects (e.g. histograms) and optional callback functions as argument, it accepts 4 different input formats:. Passing a list or tuple of drawables: You can pass a list or tuple containing the plots you want to visualize. For example:. LiveVisualize([h_gaus, h_exp, h_random]). Passing a list or tuple of drawables with a global callback",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:43436,Availability,avail,available,43436,"name__ == ""__main__"":; df = RDataFrame(""mytree"",""myfile.root"").Define(""x"",""someoperation""); # The model can be passed either as a tuple with the arguments in the correct order; df.Histo1D((""name"", ""title"", 10, 0, 10), ""x""); # Or by creating the specific struct; model = ROOT.RDF.TH1DModel(""name"", ""title"", 10, 0, 10); df.Histo1D(model, ""x""); ROOT::RDF::TH1DModelA struct which stores the parameters of a TH1D.Definition HistoModels.hxx:30; Without this, two partial histograms resulting from two distributed tasks would have incompatible binning, thus leading to errors when merging them. Failing to pass a histogram model will raise an error on the client side, before starting the distributed execution. Live visualization in distributed mode with dask; The live visualization feature allows real-time data representation of plots generated during the execution of a distributed RDataFrame application. It enables visualizing intermediate results as they are computed across multiple nodes of a Dask cluster by creating a canvas and continuously updating it as partial results become available.; The LiveVisualize() function can be imported from the Python package ROOT.RDF.Experimental.Distributed:; import ROOT; ; LiveVisualize = ROOT.RDF.Experimental.Distributed.LiveVisualize; The function takes drawable objects (e.g. histograms) and optional callback functions as argument, it accepts 4 different input formats:. Passing a list or tuple of drawables: You can pass a list or tuple containing the plots you want to visualize. For example:. LiveVisualize([h_gaus, h_exp, h_random]). Passing a list or tuple of drawables with a global callback function: You can also include a global callback function that will be applied to all plots. For example:. def set_fill_color(hist):; hist.SetFillColor(ROOT.kBlue); ; LiveVisualize([h_gaus, h_exp, h_random], set_fill_color). Passing a Dictionary of drawables and callback functions: For more control, you can create a dictionary where keys are plots an",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:53522,Availability,down,down,53522,"rse"" for brevity. You don't need to read all these to start using RDataFrame, but they are useful to save typing time and runtime. Systematic variations; Starting from ROOT v6.26, RDataFrame provides a flexible syntax to define systematic variations. This is done in two steps: a) register variations for one or more existing columns using Vary() and b) extract variations of normal RDataFrame results using VariationsFor(). In between these steps, no other change to the analysis code is required: the presence of systematic variations for certain columns is automatically propagated through filters, defines and actions, and RDataFrame will take these dependencies into account when producing varied results. VariationsFor() is included in header ROOT/RDFHelpers.hxx. The compiled C++ programs must include this header explicitly, this is not required for ROOT macros.; An example usage of Vary() and VariationsFor() in C++:; auto nominal_hx =; df.Vary(""pt"", ""ROOT::RVecD{pt*0.9f, pt*1.1f}"", {""down"", ""up""}); .Filter(""pt > pt_cut""); .Define(""x"", someFunc, {""pt""}); .Histo1D<float>(""x"");; ; // request the generation of varied results from the nominal_hx; ROOT::RDF::Experimental::RResultMap<TH1D> hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; ; // the event loop runs here, upon first access to any of the results or varied results:; hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; ROOT::RDF::Experimental::RResultMapDefinition RResultMap.hxx:98; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of this RVec (2 in the example abo",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:53941,Availability,down,down,53941,"e results using VariationsFor(). In between these steps, no other change to the analysis code is required: the presence of systematic variations for certain columns is automatically propagated through filters, defines and actions, and RDataFrame will take these dependencies into account when producing varied results. VariationsFor() is included in header ROOT/RDFHelpers.hxx. The compiled C++ programs must include this header explicitly, this is not required for ROOT macros.; An example usage of Vary() and VariationsFor() in C++:; auto nominal_hx =; df.Vary(""pt"", ""ROOT::RVecD{pt*0.9f, pt*1.1f}"", {""down"", ""up""}); .Filter(""pt > pt_cut""); .Define(""x"", someFunc, {""pt""}); .Histo1D<float>(""x"");; ; // request the generation of varied results from the nominal_hx; ROOT::RDF::Experimental::RResultMap<TH1D> hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; ; // the event loop runs here, upon first access to any of the results or varied results:; hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; ROOT::RDF::Experimental::RResultMapDefinition RResultMap.hxx:98; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second to the tag ""up""). The full variation name will be composed of the varied column name and the variation tags (e.g. ""pt:down"", ""pt:up"" in this example). Python usage looks similar.; Note how we use the ""pt"" column as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill the resulting histogram. ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:54576,Availability,down,down,54576,"f}"", {""down"", ""up""}); .Filter(""pt > pt_cut""); .Define(""x"", someFunc, {""pt""}); .Histo1D<float>(""x"");; ; // request the generation of varied results from the nominal_hx; ROOT::RDF::Experimental::RResultMap<TH1D> hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; ; // the event loop runs here, upon first access to any of the results or varied results:; hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; ROOT::RDF::Experimental::RResultMapDefinition RResultMap.hxx:98; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second to the tag ""up""). The full variation name will be composed of the varied column name and the variation tags (e.g. ""pt:down"", ""pt:up"" in this example). Python usage looks similar.; Note how we use the ""pt"" column as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill the resulting histogram. To produce the varied results, RDataFrame will automatically execute the Filter and Define calls for each variation and fill the histogram with values and cuts that depend on the variation.; There is no limitation to the complexity of a Vary() expression. Just like for the Define() and Filter() calls, users are not limited to string expressions but they can also pass any valid C++ callable, including lambda functions and complex functors. The callable can be applied to zero or more existing columns and it will always receive their nominal value in input.; Varying multiple columns in lockstep",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:54712,Availability,down,down,54712,"hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; ; // the event loop runs here, upon first access to any of the results or varied results:; hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; ROOT::RDF::Experimental::RResultMapDefinition RResultMap.hxx:98; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second to the tag ""up""). The full variation name will be composed of the varied column name and the variation tags (e.g. ""pt:down"", ""pt:up"" in this example). Python usage looks similar.; Note how we use the ""pt"" column as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill the resulting histogram. To produce the varied results, RDataFrame will automatically execute the Filter and Define calls for each variation and fill the histogram with values and cuts that depend on the variation.; There is no limitation to the complexity of a Vary() expression. Just like for the Define() and Filter() calls, users are not limited to string expressions but they can also pass any valid C++ callable, including lambda functions and complex functors. The callable can be applied to zero or more existing columns and it will always receive their nominal value in input.; Varying multiple columns in lockstep; In the following Python snippet we use the Vary() signature that allows varying multiple columns simultaneously or ""in lockstep"":; df.Vary([""pt"", ""eta""],; ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",;",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:55743,Availability,down,down,55743," as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill the resulting histogram. To produce the varied results, RDataFrame will automatically execute the Filter and Define calls for each variation and fill the histogram with values and cuts that depend on the variation.; There is no limitation to the complexity of a Vary() expression. Just like for the Define() and Filter() calls, users are not limited to string expressions but they can also pass any valid C++ callable, including lambda functions and complex functors. The callable can be applied to zero or more existing columns and it will always receive their nominal value in input.; Varying multiple columns in lockstep; In the following Python snippet we use the Vary() signature that allows varying multiple columns simultaneously or ""in lockstep"":; df.Vary([""pt"", ""eta""],; ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",; variationTags=[""down"", ""up""],; variationName=""ptAndEta""); The expression returns an RVec of two RVecs: each inner vector contains the varied values for one column. The inner vectors follow the same ordering as the column names that are passed as the first argument. Besides the variation tags, in this case we also have to explicitly pass the variation name (here: ""ptAndEta"") as the default column name does not exist.; The above call will produce variations ""ptAndEta:down"" and ""ptAndEta:up"".; Combining multiple variations; Even if a result depends on multiple variations, only one variation is applied at a time, i.e. there will be no result produced by applying multiple systematic variations at the same time. For example, in the following example snippet, the RResultMap instance all_h will contain keys ""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; auto df = _df.Vary(""pt"",; ""ROOT::RVecD{pt*0.9, pt*1.1}"",; {""down"", ""up""}); .Vary(""eta"",; [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; {""eta""},; 2);; ; auto nom_h = df.Histo2D",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:56197,Availability,down,down,56197," for the Define() and Filter() calls, users are not limited to string expressions but they can also pass any valid C++ callable, including lambda functions and complex functors. The callable can be applied to zero or more existing columns and it will always receive their nominal value in input.; Varying multiple columns in lockstep; In the following Python snippet we use the Vary() signature that allows varying multiple columns simultaneously or ""in lockstep"":; df.Vary([""pt"", ""eta""],; ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",; variationTags=[""down"", ""up""],; variationName=""ptAndEta""); The expression returns an RVec of two RVecs: each inner vector contains the varied values for one column. The inner vectors follow the same ordering as the column names that are passed as the first argument. Besides the variation tags, in this case we also have to explicitly pass the variation name (here: ""ptAndEta"") as the default column name does not exist.; The above call will produce variations ""ptAndEta:down"" and ""ptAndEta:up"".; Combining multiple variations; Even if a result depends on multiple variations, only one variation is applied at a time, i.e. there will be no result produced by applying multiple systematic variations at the same time. For example, in the following example snippet, the RResultMap instance all_h will contain keys ""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; auto df = _df.Vary(""pt"",; ""ROOT::RVecD{pt*0.9, pt*1.1}"",; {""down"", ""up""}); .Vary(""eta"",; [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; {""eta""},; 2);; ; auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; auto all_hs = VariationsFor(nom_h);; all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::VaryRInterface< RDFDetail::RLoopManager, DS_t > Vary(std::string_view colName, F &&expression, const ColumnNames_t &inputColumns, const std::vector< std::string > &variationTags, std::",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:56553,Availability,down,down,56553,"on snippet we use the Vary() signature that allows varying multiple columns simultaneously or ""in lockstep"":; df.Vary([""pt"", ""eta""],; ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",; variationTags=[""down"", ""up""],; variationName=""ptAndEta""); The expression returns an RVec of two RVecs: each inner vector contains the varied values for one column. The inner vectors follow the same ordering as the column names that are passed as the first argument. Besides the variation tags, in this case we also have to explicitly pass the variation name (here: ""ptAndEta"") as the default column name does not exist.; The above call will produce variations ""ptAndEta:down"" and ""ptAndEta:up"".; Combining multiple variations; Even if a result depends on multiple variations, only one variation is applied at a time, i.e. there will be no result produced by applying multiple systematic variations at the same time. For example, in the following example snippet, the RResultMap instance all_h will contain keys ""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; auto df = _df.Vary(""pt"",; ""ROOT::RVecD{pt*0.9, pt*1.1}"",; {""down"", ""up""}); .Vary(""eta"",; [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; {""eta""},; 2);; ; auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; auto all_hs = VariationsFor(nom_h);; all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::VaryRInterface< RDFDetail::RLoopManager, DS_t > Vary(std::string_view colName, F &&expression, const ColumnNames_t &inputColumns, const std::vector< std::string > &variationTags, std::string_view variationName="""")Register systematic variations for a single existing column using custom variation tags.Definition RInterface.hxx:693; Note how we passed the integer 2 instead of a list of variation tags to the second Vary() invocation: this is a shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; NoteCurrently, Va",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:56682,Availability,down,down,56682,"{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",; variationTags=[""down"", ""up""],; variationName=""ptAndEta""); The expression returns an RVec of two RVecs: each inner vector contains the varied values for one column. The inner vectors follow the same ordering as the column names that are passed as the first argument. Besides the variation tags, in this case we also have to explicitly pass the variation name (here: ""ptAndEta"") as the default column name does not exist.; The above call will produce variations ""ptAndEta:down"" and ""ptAndEta:up"".; Combining multiple variations; Even if a result depends on multiple variations, only one variation is applied at a time, i.e. there will be no result produced by applying multiple systematic variations at the same time. For example, in the following example snippet, the RResultMap instance all_h will contain keys ""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; auto df = _df.Vary(""pt"",; ""ROOT::RVecD{pt*0.9, pt*1.1}"",; {""down"", ""up""}); .Vary(""eta"",; [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; {""eta""},; 2);; ; auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; auto all_hs = VariationsFor(nom_h);; all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::VaryRInterface< RDFDetail::RLoopManager, DS_t > Vary(std::string_view colName, F &&expression, const ColumnNames_t &inputColumns, const std::vector< std::string > &variationTags, std::string_view variationName="""")Register systematic variations for a single existing column using custom variation tags.Definition RInterface.hxx:693; Note how we passed the integer 2 instead of a list of variation tags to the second Vary() invocation: this is a shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; NoteCurrently, VariationsFor() and RResultMap are in the ROOT::RDF::Experimental namespace, to indicate that these interfaces might still evolve and improve based o",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:56915,Availability,down,down,56915,"e: ""ptAndEta"") as the default column name does not exist.; The above call will produce variations ""ptAndEta:down"" and ""ptAndEta:up"".; Combining multiple variations; Even if a result depends on multiple variations, only one variation is applied at a time, i.e. there will be no result produced by applying multiple systematic variations at the same time. For example, in the following example snippet, the RResultMap instance all_h will contain keys ""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; auto df = _df.Vary(""pt"",; ""ROOT::RVecD{pt*0.9, pt*1.1}"",; {""down"", ""up""}); .Vary(""eta"",; [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; {""eta""},; 2);; ; auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; auto all_hs = VariationsFor(nom_h);; all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::VaryRInterface< RDFDetail::RLoopManager, DS_t > Vary(std::string_view colName, F &&expression, const ColumnNames_t &inputColumns, const std::vector< std::string > &variationTags, std::string_view variationName="""")Register systematic variations for a single existing column using custom variation tags.Definition RInterface.hxx:693; Note how we passed the integer 2 instead of a list of variation tags to the second Vary() invocation: this is a shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; NoteCurrently, VariationsFor() and RResultMap are in the ROOT::RDF::Experimental namespace, to indicate that these interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related programming model will be streamlined in future versions. Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to call VariationsFor() on them. These limitations will be lifted in future releases.; See the Vary() method for more information and this tutorial for an example usage of Vary",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:58438,Availability,avail,available,58438,"invocation: this is a shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; NoteCurrently, VariationsFor() and RResultMap are in the ROOT::RDF::Experimental namespace, to indicate that these interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related programming model will be streamlined in future versions. Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to call VariationsFor() on them. These limitations will be lifted in future releases.; See the Vary() method for more information and this tutorial for an example usage of Vary and VariationsFor() in the analysis. RDataFrame objects as function arguments and return values; RDataFrame variables/nodes are relatively cheap to copy and it's possible to both pass them to (or move them into) functions and to return them from functions. However, in general each dataframe node will have a different C++ type, which includes all available compile-time information about what that node does. One way to cope with this complication is to use template functions and/or C++14 auto return types: template <typename RDF>; auto ApplySomeFilters(RDF df); {; return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; }; A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode: // a function that conditionally adds a Range to an RDataFrame node.; RNode MaybeAddRange(RNode df, bool mustAddRange); {; return mustAddRange ? df.Range(1) : df;; }; // use as :; ROOT::RDataFrame df(10);; auto maybeRangedDF = MaybeAddRange(df, true);; The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with t",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:64830,Availability,error,error,64830,"nt (e.g. Histo1D()), so we cannot deduce the type of the column at compile-time. In this case RDataFrame infers the type of the column from the TTree itself. This is why we never needed to specify the column types for all actions in the above snippets.; When the column type is not a common one such as int, double, char or float it is nonetheless good practice to specify it as a template parameter to the action itself, like this: df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing x = 0 rather than x == 0:; // this throws an error (note the typo); df.Define(""x"", ""0"").Filter(""x = 0"");. User-defined custom actions; RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; Implementing custom actions with Book(); Through the Book() method, users can implement a custom action and have access to the same features that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:; #include <ROOT/RDataFrame.hxx>; #include <memory>; ; class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; std::shared_ptr<int> fFinalResult = std::make_shared<int>(0);; std::vector<int> fPerThreadResults;; ; public:; // We use a public type alias to advertise the type of the result of this action;",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:67791,Availability,avail,available,67791,"<< ""Number of processed entries: "" << resultPtr.GetValue() << std::endl;; }; mainint main()Definition Prototype.cxx:12; RDataFrame.hxx; ROOT::Detail::RDF::RActionImplBase class for action helpers, see RInterface::Book() for more information.Definition RActionImpl.hxx:26; ROOT::RDF::RResultPtrSmart pointer for the return type of actions.Definition RResultPtr.hxx:119; ROOT::RDF::RResultPtr::GetValueconst T & GetValue()Get a const reference to the encapsulated object.Definition RResultPtr.hxx:228; CPyCppyy::ExecCPYCPPYY_EXTERN bool Exec(const std::string &cmd)Definition API.cxx:446; See the Book() method for more information and this tutorial for a more complete example.; Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and executes the callable on the values of those columns for each event that passes all upstream selections. It can be used to perform actions that are not already available in the interface. For example, the following snippet evaluates the root mean square of column ""x"": // Single-thread evaluation of RMS of column ""x"" using Foreach; double sumSq = 0.;; unsigned int n = 0;; df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; nconst Int_t nDefinition legend1.C:16; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach(): thread will execute the expression concurrently. The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of rms; but this is probably too much head-scratch for such a simple operation.; ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:73499,Availability,down,down,73499," to advance the readers to the desired data entry. Some predefined RDataSources are natively provided by ROOT such as the ROOT::RDF::RCsvDS which allows to read comma separated files: auto tdf = ROOT::RDF::FromCSV(""MuRun2010B.csv"");; auto filteredEvents =; tdf.Filter(""Q1 * Q2 == -1""); .Define(""m"", ""sqrt(pow(E1 + E2, 2) - (pow(px1 + px2, 2) + pow(py1 + py2, 2) + pow(pz1 + pz2, 2)))"");; auto h = filteredEvents.Histo1D(""m"");; h->Draw();; See also FromNumpy (Python-only), FromRNTuple(), FromArrow(), FromSqlite(). Computation graphs (storing and reusing sets of transformations); As we saw, transformed dataframes can be stored as variables and reused multiple times to create modified versions of the dataset. This implicitly defines a computation graph in which several paths of filtering/creation of columns are executed simultaneously, and finally aggregated results are produced.; RDataFrame detects when several actions use the same filter or the same defined column, and only evaluates each filter or defined column once per event, regardless of how many times that result is used down the computation graph. Objects read from each column are built once and never copied, for maximum efficiency. When ""upstream"" filters are not passed, subsequent filters, temporary column expressions and actions are not evaluated, so it might be advisable to put the strictest filters first in the graph. Visualizing the computation graph; It is possible to print the computation graph from any node to obtain a DOT (graphviz) representation either on the standard output or in a file.; Invoking the function ROOT::RDF::SaveGraph() on any node that is not the head node, the computation graph of the branch the node belongs to is printed. By using the head node, the entire computation graph is printed.; Following there is an example of usage: // First, a sample computational graph is built; ROOT::RDataFrame df(""tree"", ""f.root"");; ; auto df2 = df.Define(""x"", []() { return 1; }); .Filter(""col0 % 1 == col0",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:78038,Availability,avail,available,78038,"ry for each sample in the ""metadata"" key.; A simple example for the formatting of the specification in the JSON file is the following:; {; ""samples"": {; ""sampleA"": {; ""trees"": [""tree1"", ""tree2""],; ""files"": [""file1.root"", ""file2.root""],; ""metadata"": {; ""lumi"": 10000.0, ; ""xsec"": 1.0,; ""sample_category"" = ""data""; }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {; ""lumi"": 0.5, ; ""xsec"": 1.5,; ""sample_category"" = ""MC_background""; }; }; }; }; The metadata information from the specification file can be then accessed using the DefinePerSample function. For example, to access luminosity information (stored as a double):; df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); or sample_category information (stored as a string):; df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); or directly the filename:; df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also provides a corresponding exemplary JSON file for the dataset specification. Adding a progress bar; A progress bar showing the processed event statistics can be added to any RDataFrame program. The event statistics include elapsed time, currently processed file, currently processed events, the rate of event processing and an estimated remaining time (per file being processed). It is recorded and printed in the terminal every m events and every n seconds (by default m = 1000 and n = 1). The ProgressBar can be also added when the multithread (MT) mode is enabled.; ProgressBar is added after creating the dataframe object (df): ROOT::RDataFrame df(""tree"", ""file.root"");; ROOT::RDF::Experimental::AddProgressBar(df);; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; Alternatively, RDataFrame can be cast to an RNode first, ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:102520,Availability,avail,available,102520," Register systematic variations for a single existing column using auto-generated variation tags. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > Vary (std::string_view colName, std::string_view expression, const std::vector< std::string > &variationTags, std::string_view variationName="""");  Register systematic variations for a single existing column using custom variation tags. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > Vary (std::string_view colName, std::string_view expression, std::size_t nVariations, std::string_view variationName="""");  Register systematic variations for a single existing column using auto-generated variation tags. ;  ;  Public Member Functions inherited from ROOT::RDF::RInterfaceBase;  RInterfaceBase (RDFDetail::RLoopManager &lm, const RDFInternal::RColumnRegister &colRegister);  ;  RInterfaceBase (std::shared_ptr< RDFDetail::RLoopManager > lm);  ; RDFDescription Describe ();  Return information about the dataframe. ;  ; ColumnNames_t GetColumnNames ();  Returns the names of the available columns. ;  ; std::string GetColumnType (std::string_view column);  Return the type of a given column as a string. ;  ; ColumnNames_t GetDefinedColumnNames ();  Returns the names of the defined columns. ;  ; unsigned int GetNFiles ();  ; unsigned int GetNRuns () const;  Gets the number of event loops run. ;  ; unsigned int GetNSlots () const;  Gets the number of data processing slots. ;  ; RVariationsDescription GetVariations () const;  Return a descriptor for the systematic variations registered in this branch of the computation graph. ;  ; bool HasColumn (std::string_view columnName);  Checks if a column is present in the dataset. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::RDF::RInterface< RDFDetail::RLoopManager >;  RInterface (const std::shared_ptr< RDFDetail::RLoopManager > &proxied, RLoopManager &lm, const RDFInternal::RColumnRegister &colRegister);  ; const std::shared_ptr< RDFDetail::RLoopManager > & GetP",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:106992,Availability,avail,available,106992,".hxx>. Inheritance diagram for ROOT::RDataFrame:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ColumnNames_t. using ROOT::RDataFrame::ColumnNames_t = ROOT::RDF::ColumnNames_t. Definition at line 43 of file RDataFrame.hxx. Constructor & Destructor Documentation. ◆ RDataFrame() [1/10]. ROOT::RDataFrame::RDataFrame ; (; std::string_view ; treeName, . std::string_view ; fileNameGlob, . const ColumnNames_t & ; defaultColumns = {} . ). Build the dataframe. ; Parameters. [in]treeNameName of the tree contained in the directory ; [in]filenameglobTDirectory where the tree is stored, e.g. a TFile. ; [in]defaultColumnsCollection of default columns. The filename glob supports the same type of expressions as TChain::Add(), and it is passed as-is to TChain's constructor.; The default columns are looked at in case no column is specified in the booking of actions or transformations. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1591 of file RDataFrame.cxx. ◆ RDataFrame() [2/10]. ROOT::RDataFrame::RDataFrame ; (; std::string_view ; datasetName, . const std::vector< std::string > & ; fileNameGlobs, . const ColumnNames_t & ; defaultColumns = {} . ). Build the dataframe. ; Parameters. [in]treeNameName of the tree contained in the directory ; [in]fileglobsCollection of file names of filename globs ; [in]defaultColumnsCollection of default columns. The filename globs support the same type of expressions as TChain::Add(), and each glob is passed as-is to TChain's constructor.; The default columns are looked at in case no column is specified in the booking of actions or transformations. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1615 of file RDataFrame.cxx. ◆ RDataFrame() [3/10]. ROOT::RDataFrame::RDataFrame ; (; std::string_view ; treename, . std::initializer_list< std::string > ; filenames, . const C",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:107755,Availability,avail,available,107755," type of expressions as TChain::Add(), and it is passed as-is to TChain's constructor.; The default columns are looked at in case no column is specified in the booking of actions or transformations. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1591 of file RDataFrame.cxx. ◆ RDataFrame() [2/10]. ROOT::RDataFrame::RDataFrame ; (; std::string_view ; datasetName, . const std::vector< std::string > & ; fileNameGlobs, . const ColumnNames_t & ; defaultColumns = {} . ). Build the dataframe. ; Parameters. [in]treeNameName of the tree contained in the directory ; [in]fileglobsCollection of file names of filename globs ; [in]defaultColumnsCollection of default columns. The filename globs support the same type of expressions as TChain::Add(), and each glob is passed as-is to TChain's constructor.; The default columns are looked at in case no column is specified in the booking of actions or transformations. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1615 of file RDataFrame.cxx. ◆ RDataFrame() [3/10]. ROOT::RDataFrame::RDataFrame ; (; std::string_view ; treename, . std::initializer_list< std::string > ; filenames, . const ColumnNames_t & ; defaultColumns = {} . ). inline . Definition at line 47 of file RDataFrame.hxx. ◆ RDataFrame() [4/10]. ROOT::RDataFrame::RDataFrame ; (; std::string_view ; treeName, . ::TDirectory * ; dirPtr, . const ColumnNames_t & ; defaultColumns = {} . ). ◆ RDataFrame() [5/10]. ROOT::RDataFrame::RDataFrame ; (; TTree & ; tree, . const ColumnNames_t & ; defaultColumns = {} . ). Build the dataframe. ; Parameters. [in]treeThe tree or chain to be studied. ; [in]defaultColumnsCollection of default column names to fall back to when none is specified. The default columns are looked at in case no column is specified in the booking of actions or transformations. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at li",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:108697,Availability,avail,available,108697,"or transformations. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1615 of file RDataFrame.cxx. ◆ RDataFrame() [3/10]. ROOT::RDataFrame::RDataFrame ; (; std::string_view ; treename, . std::initializer_list< std::string > ; filenames, . const ColumnNames_t & ; defaultColumns = {} . ). inline . Definition at line 47 of file RDataFrame.hxx. ◆ RDataFrame() [4/10]. ROOT::RDataFrame::RDataFrame ; (; std::string_view ; treeName, . ::TDirectory * ; dirPtr, . const ColumnNames_t & ; defaultColumns = {} . ). ◆ RDataFrame() [5/10]. ROOT::RDataFrame::RDataFrame ; (; TTree & ; tree, . const ColumnNames_t & ; defaultColumns = {} . ). Build the dataframe. ; Parameters. [in]treeThe tree or chain to be studied. ; [in]defaultColumnsCollection of default column names to fall back to when none is specified. The default columns are looked at in case no column is specified in the booking of actions or transformations. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1630 of file RDataFrame.cxx. ◆ RDataFrame() [6/10]. ROOT::RDataFrame::RDataFrame ; (; ULong64_t ; numEntries). Build a dataframe that generates numEntries entries. ; Parameters. [in]numEntriesThe number of entries to generate. An empty-source dataframe constructed with a number of entries will generate those entries on the fly when some action is triggered, and it will do so for all the previously-defined columns. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1643 of file RDataFrame.cxx. ◆ RDataFrame() [7/10]. ROOT::RDataFrame::RDataFrame ; (; std::unique_ptr< ROOT::RDF::RDataSource > ; ds, . const ColumnNames_t & ; defaultColumns = {} . ). Build dataframe associated to data source. ; Parameters. [in]dsThe data source object. ; [in]defaultColumnsCollection of default column names to fall back to when none is specified. A dataframe associated to a data source will query it t",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:109214,Availability,avail,available,109214,"mnNames_t & ; defaultColumns = {} . ). ◆ RDataFrame() [5/10]. ROOT::RDataFrame::RDataFrame ; (; TTree & ; tree, . const ColumnNames_t & ; defaultColumns = {} . ). Build the dataframe. ; Parameters. [in]treeThe tree or chain to be studied. ; [in]defaultColumnsCollection of default column names to fall back to when none is specified. The default columns are looked at in case no column is specified in the booking of actions or transformations. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1630 of file RDataFrame.cxx. ◆ RDataFrame() [6/10]. ROOT::RDataFrame::RDataFrame ; (; ULong64_t ; numEntries). Build a dataframe that generates numEntries entries. ; Parameters. [in]numEntriesThe number of entries to generate. An empty-source dataframe constructed with a number of entries will generate those entries on the fly when some action is triggered, and it will do so for all the previously-defined columns. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1643 of file RDataFrame.cxx. ◆ RDataFrame() [7/10]. ROOT::RDataFrame::RDataFrame ; (; std::unique_ptr< ROOT::RDF::RDataSource > ; ds, . const ColumnNames_t & ; defaultColumns = {} . ). Build dataframe associated to data source. ; Parameters. [in]dsThe data source object. ; [in]defaultColumnsCollection of default column names to fall back to when none is specified. A dataframe associated to a data source will query it to access column values. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1656 of file RDataFrame.cxx. ◆ RDataFrame() [8/10]. ROOT::RDataFrame::RDataFrame ; (; ROOT::RDF::Experimental::RDatasetSpec ; spec). Build dataframe from an RDatasetSpec object. ; Parameters. [in]specThe dataset specification object. A dataset specification includes trees and file names, as well as an optional friend list and/or entry range. Example usage from Python:; spec = (; ROOT.RDF.Exp",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:109759,Availability,avail,available,109759,"630 of file RDataFrame.cxx. ◆ RDataFrame() [6/10]. ROOT::RDataFrame::RDataFrame ; (; ULong64_t ; numEntries). Build a dataframe that generates numEntries entries. ; Parameters. [in]numEntriesThe number of entries to generate. An empty-source dataframe constructed with a number of entries will generate those entries on the fly when some action is triggered, and it will do so for all the previously-defined columns. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1643 of file RDataFrame.cxx. ◆ RDataFrame() [7/10]. ROOT::RDataFrame::RDataFrame ; (; std::unique_ptr< ROOT::RDF::RDataSource > ; ds, . const ColumnNames_t & ; defaultColumns = {} . ). Build dataframe associated to data source. ; Parameters. [in]dsThe data source object. ; [in]defaultColumnsCollection of default column names to fall back to when none is specified. A dataframe associated to a data source will query it to access column values. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1656 of file RDataFrame.cxx. ◆ RDataFrame() [8/10]. ROOT::RDataFrame::RDataFrame ; (; ROOT::RDF::Experimental::RDatasetSpec ; spec). Build dataframe from an RDatasetSpec object. ; Parameters. [in]specThe dataset specification object. A dataset specification includes trees and file names, as well as an optional friend list and/or entry range. Example usage from Python:; spec = (; ROOT.RDF.Experimental.RDatasetSpec(); .AddSample((""data"", ""tree"", ""file.root"")); .WithGlobalFriends(""friendTree"", ""friend.root"", ""alias""); .WithGlobalRange((100, 200)); ); df = ROOT.RDataFrame(spec); ROOT::RDF::Experimental::RDatasetSpecThe dataset specification for RDataFrame.Definition RDatasetSpec.hxx:47; See also ROOT::RDataFrame::FromSpec(). ; Definition at line 1680 of file RDataFrame.cxx. ◆ RDataFrame() [9/10]. ROOT::RDataFrame::RDataFrame ; (; const RDataFrame & ; ). default . ◆ RDataFrame() [10/10]. ROOT::RDataFrame::RDataFrame ; (; RDataFram",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:3118,Deployability,update,updated,3118,"pecial helper columns: `rdfentry_` and `rdfslot_`; Just-in-time compilation: column type inference and explicit declaration of column types; User-defined custom actions; Dataset joins with friend trees; Reading data formats other than ROOT trees; Computation graphs (storing and reusing sets of transformations); Visualizing the computation graph; Activating RDataFrame execution logs; Creating an RDataFrame from a dataset specification file; Adding a progress bar. Efficient analysis in Python; Class reference. Cheat sheet; These are the operations which can be performed with RDataFrame. Transformations; Transformations are a way to manipulate the data. Transformation Description . Alias() Introduce an alias for a particular column name. . Define() Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the pts of ""good"" muons). . DefinePerSample() Define a new column that is updated when the input sample changes, e.g. when switching tree being processed in a chain. . DefineSlot() Same as Define(), but the user-defined function must take an extra unsigned int slot as its first parameter. slot will take a different value, 0 to nThreads - 1, for each thread of execution. This is meant as a helper in writing thread-safe Define() transformation when using RDataFrame after ROOT::EnableImplicitMT(). DefineSlot() works just as well with single-thread execution: in that case slot will always be 0. . DefineSlotEntry() Same as DefineSlot(), but the entry number is passed in addition to the slot number. This is meant as a helper in case the expression depends on the entry number. For details about entry numbers in multi-threaded runs, see here. . Filter() Filter rows based on user-defined conditions. . Range() Filter rows based on entry number (single-thread only). . Redefine() Overwrite the value and/or type of an existing column. See Define() for more information",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:36710,Deployability,configurat,configuration,36710," ""title"", 10, 0, 10), ""x""); ; print(sum.GetValue()); h.Draw(); The main goal of this package is to support running any RDataFrame application distributedly. Nonetheless, not all parts of the RDataFrame API currently work with this package. The subset that is currently available is:; AsNumpy; Count; Define; DefinePerSample; Filter; Graph; Histo[1,2,3]D; HistoND; Max; Mean; Min; Profile[1,2,3]D; Redefine; Snapshot; Stats; StdDev; Sum; Systematic variations: Vary and VariationsFor.; Parallel submission of distributed graphs: RunGraphs.; Information about the dataframe: GetColumnNames. with support for more operations coming in the future. Data sources other than TTree and TChain (e.g. CSV, RNTuple) are currently not supported.; NoteThe distributed RDataFrame module requires at least Python version 3.8. Connecting to a Spark cluster; In order to distribute the RDataFrame workload, you can connect to a Spark cluster you have access to through the official Spark API, then hook the connection instance to the distributed RDataFrame object like so:; import pyspark; import ROOT; ; # Create a SparkContext object with the right configuration for your Spark cluster; conf = SparkConf().setAppName(appName).setMaster(master); sc = SparkContext(conf=conf); ; # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; ; # The Spark RDataFrame constructor accepts an optional ""sparkcontext"" parameter; # and it will distribute the application to the connected cluster; df = RDataFrame(""mytree"", ""myfile.root"", sparkcontext = sc); If an instance of SparkContext is not provided, the default behaviour is to create one in the background for you. Connecting to a Dask cluster; Similarly, you can connect to a Dask cluster by creating your own connection object which internally operates with one of the cluster schedulers supported by Dask (more information in the Dask distributed docs):; import ROOT; from dask.distributed import Clien",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:43385,Deployability,continuous,continuously,43385,"name__ == ""__main__"":; df = RDataFrame(""mytree"",""myfile.root"").Define(""x"",""someoperation""); # The model can be passed either as a tuple with the arguments in the correct order; df.Histo1D((""name"", ""title"", 10, 0, 10), ""x""); # Or by creating the specific struct; model = ROOT.RDF.TH1DModel(""name"", ""title"", 10, 0, 10); df.Histo1D(model, ""x""); ROOT::RDF::TH1DModelA struct which stores the parameters of a TH1D.Definition HistoModels.hxx:30; Without this, two partial histograms resulting from two distributed tasks would have incompatible binning, thus leading to errors when merging them. Failing to pass a histogram model will raise an error on the client side, before starting the distributed execution. Live visualization in distributed mode with dask; The live visualization feature allows real-time data representation of plots generated during the execution of a distributed RDataFrame application. It enables visualizing intermediate results as they are computed across multiple nodes of a Dask cluster by creating a canvas and continuously updating it as partial results become available.; The LiveVisualize() function can be imported from the Python package ROOT.RDF.Experimental.Distributed:; import ROOT; ; LiveVisualize = ROOT.RDF.Experimental.Distributed.LiveVisualize; The function takes drawable objects (e.g. histograms) and optional callback functions as argument, it accepts 4 different input formats:. Passing a list or tuple of drawables: You can pass a list or tuple containing the plots you want to visualize. For example:. LiveVisualize([h_gaus, h_exp, h_random]). Passing a list or tuple of drawables with a global callback function: You can also include a global callback function that will be applied to all plots. For example:. def set_fill_color(hist):; hist.SetFillColor(ROOT.kBlue); ; LiveVisualize([h_gaus, h_exp, h_random], set_fill_color). Passing a Dictionary of drawables and callback functions: For more control, you can create a dictionary where keys are plots an",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:51551,Deployability,release,released,51551,"ich happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See Activating RDataFrame execution logs. Memory usage; There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create many RDataFrames one after the other. Possible mitigations include creating and running each RDataFrame event loop in a sub-process, or booking all operations for all different RDataFrame computation graphs before the first event loop is triggered, so that the interpreter is invoked only once for all computation graphs:; // assuming df1 and df2 are separate computation graphs, do:; auto h1 = df1.Histo1D(""x"");; auto h2 = df2.Histo1D(""y"");; h1->Draw(); // we just-in-time compile everything needed by df1 and df2 here; h2->Draw(""SAME"");; ; // do not:; auto h1 = df1.Histo1D(""x"");; h1->Draw(); // we just-in-time compile here; auto h2 = df2.Histo1D(""y"");; h2->Draw(""SAME""); // we just-in-time compile again here, as the second Histo1D call is new. More features; Here is a list of the mos",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:57989,Deployability,release,releases,57989,"< RDFDetail::RLoopManager >::VaryRInterface< RDFDetail::RLoopManager, DS_t > Vary(std::string_view colName, F &&expression, const ColumnNames_t &inputColumns, const std::vector< std::string > &variationTags, std::string_view variationName="""")Register systematic variations for a single existing column using custom variation tags.Definition RInterface.hxx:693; Note how we passed the integer 2 instead of a list of variation tags to the second Vary() invocation: this is a shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; NoteCurrently, VariationsFor() and RResultMap are in the ROOT::RDF::Experimental namespace, to indicate that these interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related programming model will be streamlined in future versions. Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to call VariationsFor() on them. These limitations will be lifted in future releases.; See the Vary() method for more information and this tutorial for an example usage of Vary and VariationsFor() in the analysis. RDataFrame objects as function arguments and return values; RDataFrame variables/nodes are relatively cheap to copy and it's possible to both pass them to (or move them into) functions and to return them from functions. However, in general each dataframe node will have a different C++ type, which includes all available compile-time information about what that node does. One way to cope with this complication is to use template functions and/or C++14 auto return types: template <typename RDF>; auto ApplySomeFilters(RDF df); {; return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; }; A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode: // a function that conditionally adds a Ra",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:82391,Deployability,install,installed,82391,"n can be found in the PyROOT manual.; Python code; ROOT also offers the option to compile Python functions with fundamental types and arrays thereof using Numba. Such compiled functions can then be used in a C++ expression provided to RDataFrame.; The function to be compiled should be decorated with ROOT.Numba.Declare, which allows to specify the parameter and return types. See the following snippet for a simple example or the full tutorial here.; @ROOT.Numba.Declare([""float""], ""bool""); def myFilter(x):; return x > 10; ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""Numba::myFilter(x)"").Sum(""y""); print(sum.GetValue()); It also works with collections: RVec objects of fundamental types can be transparently converted to/from numpy arrays:; @ROOT.Numba.Declare(['RVec<float>', 'int'], 'RVec<float>'); def pypowarray(numpyvec, pow):; return numpyvec**pow; ; df.Define('array', 'ROOT::RVecF{1.,2.,3.}')\; .Define('arraySquared', 'Numba::pypowarray(array, 2)'); Note that this functionality requires the Python packages numba and cffi to be installed. Interoperability with NumPy; Conversion to NumPy arrays; Eventually, you probably would like to inspect the content of the RDataFrame or process the data further with Python libraries. For this purpose, we provide the AsNumpy() function, which returns the columns of your RDataFrame as a dictionary of NumPy arrays. See a simple example below or a full tutorial here.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); cols = df.Filter(""x > 10"").AsNumpy([""x"", ""y""]) # retrieve columns ""x"" and ""y"" as NumPy arrays; print(cols[""x""], cols[""y""]) # the values of the cols dictionary are NumPy arrays; Processing data stored in NumPy arrays; In case you have data in NumPy arrays in Python and you want to process the data with ROOT, you can easily create an RDataFrame using ROOT.RDF.FromNumpy. The factory function accepts a dictionary where the keys are the column names and the values are NumPy arrays, and returns a new RDataFrame ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:88571,Deployability,update,updated,88571,"es_t &columns={});  Book execution of a custom action using a user-defined helper object. ;  ; RInterface< RLoopManager > Cache (const ColumnNames_t &columnList);  Save selected columns in memory. ;  ; RInterface< RLoopManager > Cache (const ColumnNames_t &columnList);  Save selected columns in memory. ;  ; RInterface< RLoopManager > Cache (std::initializer_list< std::string > columnList);  Save selected columns in memory. ;  ; RInterface< RLoopManager > Cache (std::string_view columnNameRegexp="""");  Save selected columns in memory. ;  ; RResultPtr< ULong64_t > Count ();  Return the number of entries processed (lazy action). ;  ; RInterface< RDFDetail::RLoopManager, DS_t > Define (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > Define (std::string_view name, std::string_view expression);  Define a new column. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > DefinePerSample (std::string_view name, F expression);  Define a new column that is updated when the input sample changes. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > DefinePerSample (std::string_view name, std::string_view expression);  Define a new column that is updated when the input sample changes. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > DefineSlot (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column with a value dependent on the processing slot. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > DefineSlotEntry (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column with a value dependent on the processing slot and the current entry. ;  ; RResultPtr< RDisplay > Display (const ColumnNames_t &columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (const ColumnNames_t &columnList, size_t nRows=5, size_t nMaxCollectionElements=10);",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:88758,Deployability,update,updated,88758,"olumns in memory. ;  ; RInterface< RLoopManager > Cache (const ColumnNames_t &columnList);  Save selected columns in memory. ;  ; RInterface< RLoopManager > Cache (std::initializer_list< std::string > columnList);  Save selected columns in memory. ;  ; RInterface< RLoopManager > Cache (std::string_view columnNameRegexp="""");  Save selected columns in memory. ;  ; RResultPtr< ULong64_t > Count ();  Return the number of entries processed (lazy action). ;  ; RInterface< RDFDetail::RLoopManager, DS_t > Define (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > Define (std::string_view name, std::string_view expression);  Define a new column. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > DefinePerSample (std::string_view name, F expression);  Define a new column that is updated when the input sample changes. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > DefinePerSample (std::string_view name, std::string_view expression);  Define a new column that is updated when the input sample changes. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > DefineSlot (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column with a value dependent on the processing slot. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > DefineSlotEntry (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column with a value dependent on the processing slot and the current entry. ;  ; RResultPtr< RDisplay > Display (const ColumnNames_t &columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (const ColumnNames_t &columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (std::initializer_list< std::string > columnList, size_t nRows=5, size_t nMaxCollecti",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:31174,Energy Efficiency,efficient,efficient,31174,"ange node hangs from a filter node, and the range has a begin parameter of 10, that means the range will skip the first 10 entries that pass the preceding filter.; Ranges allow ""early quitting"": if all branches of execution of a functional graph reached their end value of processed entries, the event-loop is immediately interrupted. This is useful for debugging and quick data explorations. Custom columns; Custom columns are created by invoking Define(name, f, columnList). As usual, f can be any callable object (function, lambda expression, functor class...); it takes the values of the columns listed in columnList (a list of strings) as parameters, in the same order as they are listed in columnList. f must return the value that will be assigned to the temporary column.; A new variable is created called name, accessible as if it was contained in the dataset from subsequent transformations/actions.; Use cases include:; caching the results of complex calculations for easy and efficient multiple access; extraction of quantities of interest from complex objects; branch aliasing, i.e. changing the name of a branch. An exception is thrown if the name of the new column/branch is already in use for another branch in the TTree.; It is also possible to specify the quantity to be stored in the new temporary column as a C++ expression with the method Define(name, expression). For example this invocation; df.Define(""pt"", ""sqrt(px*px + py*py)"");; will create a new column called ""pt"" the value of which is calculated starting from the columns px and py. The system builds a just-in-time compiled function starting from the expression after having deduced the list of necessary branches from the names of the variables specified by the user.; Custom columns as function of slot and entry number; It is possible to create custom columns also as a function of the processing slot and entry numbers. The methods that can be invoked are:; DefineSlot(name, f, columnList). In this case the callable",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:37451,Energy Efficiency,schedul,schedulers,37451,"n order to distribute the RDataFrame workload, you can connect to a Spark cluster you have access to through the official Spark API, then hook the connection instance to the distributed RDataFrame object like so:; import pyspark; import ROOT; ; # Create a SparkContext object with the right configuration for your Spark cluster; conf = SparkConf().setAppName(appName).setMaster(master); sc = SparkContext(conf=conf); ; # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; ; # The Spark RDataFrame constructor accepts an optional ""sparkcontext"" parameter; # and it will distribute the application to the connected cluster; df = RDataFrame(""mytree"", ""myfile.root"", sparkcontext = sc); If an instance of SparkContext is not provided, the default behaviour is to create one in the background for you. Connecting to a Dask cluster; Similarly, you can connect to a Dask cluster by creating your own connection object which internally operates with one of the cluster schedulers supported by Dask (more information in the Dask distributed docs):; import ROOT; from dask.distributed import Client; ; # Point RDataFrame calls to the Dask specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; ; # In a Python script the Dask client needs to be initalized in a context; # Jupyter notebooks / Python session don't need this; if __name__ == ""__main__"":; # With an already setup cluster that exposes a Dask scheduler endpoint; client = Client(""dask_scheduler.domain.com:8786""); ; # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); If an instance of distributed.Client is not provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine using all cores available. C",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:37914,Energy Efficiency,schedul,scheduler,37914,"conf); ; # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; ; # The Spark RDataFrame constructor accepts an optional ""sparkcontext"" parameter; # and it will distribute the application to the connected cluster; df = RDataFrame(""mytree"", ""myfile.root"", sparkcontext = sc); If an instance of SparkContext is not provided, the default behaviour is to create one in the background for you. Connecting to a Dask cluster; Similarly, you can connect to a Dask cluster by creating your own connection object which internally operates with one of the cluster schedulers supported by Dask (more information in the Dask distributed docs):; import ROOT; from dask.distributed import Client; ; # Point RDataFrame calls to the Dask specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; ; # In a Python script the Dask client needs to be initalized in a context; # Jupyter notebooks / Python session don't need this; if __name__ == ""__main__"":; # With an already setup cluster that exposes a Dask scheduler endpoint; client = Client(""dask_scheduler.domain.com:8786""); ; # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); If an instance of distributed.Client is not provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine using all cores available. Choosing the number of distributed tasks; A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but generically tries to infer how many cores are available in the cluster through the connection object. The number of tasks will b",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:46250,Energy Efficiency,allocate,allocated,46250,"ableImplicitMT() before constructing the RDataFrame object to indicate that it should take advantage of a pool of worker threads. Each worker thread processes a distinct subset of entries, and their partial results are merged before returning the final values to the user. There are no guarantees on the order in which threads will process the batches of entries. In particular, note that this means that, for multi-thread event loops, there is no guarantee on the order in which Snapshot() will write entries: they could be scrambled with respect to the input dataset. The values of the special rdfentry_ column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that th",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:50108,Energy Efficiency,reduce,reduce,50108,"rs.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible. For instance, Filter(""x > 0"") requires just-in-time compilation of the corresponding C++ logic, while the equivalent Filter([](float x) { return x > 0.; }, {""x""}) does not. Similarly, Histo1D(""x"") requires just-in-time compilation after the type of x is retrieved from the dataset, while Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See Efficient analysis in Python for possible ways to speed up hot paths in this case.; Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations for all RDataFrame computation graphs before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See Activating RDataFrame execution logs. Memory usage; There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produc",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:51132,Energy Efficiency,consumption,consumption,51132,"t loop. To reduce the runtime cost of this step, make sure to book all operations for all RDataFrame computation graphs before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See Activating RDataFrame execution logs. Memory usage; There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create many RDataFrames one after the other. Possible mitigations include creating and running each RDataFrame event loop in a sub-process, or booking all operations for all different RDataFrame computation graphs before the first event loop is triggered, so that the interpreter is invoked only once for all computation graphs:; // assuming df1 and df2 are separate computation graphs, do:; auto h1 = df1.Histo1D(""x"");; auto h2",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:51316,Energy Efficiency,reduce,reduce,51316,"nce for all code required to be generated up to that point, also across different computation graphs.; Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See Activating RDataFrame execution logs. Memory usage; There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create many RDataFrames one after the other. Possible mitigations include creating and running each RDataFrame event loop in a sub-process, or booking all operations for all different RDataFrame computation graphs before the first event loop is triggered, so that the interpreter is invoked only once for all computation graphs:; // assuming df1 and df2 are separate computation graphs, do:; auto h1 = df1.Histo1D(""x"");; auto h2 = df2.Histo1D(""y"");; h1->Draw(); // we just-in-time compile everything needed by df1 and df2 here; h2->Draw(""SAME"");; ; // do not:; auto h1 = df1.Histo1D(""x"");; h1->Draw(); // we just-in-time compile",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:51494,Energy Efficiency,allocate,allocate,51494,"ich happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See Activating RDataFrame execution logs. Memory usage; There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create many RDataFrames one after the other. Possible mitigations include creating and running each RDataFrame event loop in a sub-process, or booking all operations for all different RDataFrame computation graphs before the first event loop is triggered, so that the interpreter is invoked only once for all computation graphs:; // assuming df1 and df2 are separate computation graphs, do:; auto h1 = df1.Histo1D(""x"");; auto h2 = df2.Histo1D(""y"");; h1->Draw(); // we just-in-time compile everything needed by df1 and df2 here; h2->Draw(""SAME"");; ; // do not:; auto h1 = df1.Histo1D(""x"");; h1->Draw(); // we just-in-time compile here; auto h2 = df2.Histo1D(""y"");; h2->Draw(""SAME""); // we just-in-time compile again here, as the second Histo1D call is new. More features; Here is a list of the mos",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:59822,Energy Efficiency,schedul,schedule,59822," node can be converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode: // a function that conditionally adds a Range to an RDataFrame node.; RNode MaybeAddRange(RNode df, bool mustAddRange); {; return mustAddRange ? df.Range(1) : df;; }; // use as :; ROOT::RDataFrame df(10);; auto maybeRangedDF = MaybeAddRange(df, true);; The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function ROOT.RDF.AsRNode. Storing RDataFrame objects in collections; ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a std::vector<RNode> or a std::map<std::string, RNode>:; std::vector<ROOT::RDF::RNode> dfs;; dfs.emplace_back(ROOT::RDataFrame(10));; dfs.emplace_back(dfs[0].Define(""x"", ""42.f""));. Executing callbacks every N events; It's possible to schedule execution of arbitrary functions (callbacks) during the event loop. Callbacks can be used e.g. to inspect partial results of the analysis while the event loop is running, drawing a partially-filled histogram every time a certain number of new entries is processed, or displaying a progress bar while the event loop runs.; For example one can draw an up-to-date version of a result histogram every 100 entries like this: auto h = df.Histo1D(""x"");; TCanvas c(""c"",""x hist"");; h.OnPartialResult(100, [&c](TH1D &h_) { c.cd(); h_.Draw(); c.Update(); });; // event loop runs here, this final `Draw` is executed after the event loop is finished; h->Draw();; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:669; Callbacks are registered to a ROOT::RDF::RResultPtr and must be callables that takes a reference to the result type as argument and return nothing. RDataFrame will invoke registered callbacks passing partial action",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:96700,Energy Efficiency,reduce,reduce,96700,"tries based on range: [begin, end). ;  ; RInterface< RDFDetail::RRange< RDFDetail::RLoopManager >, DS_t > Range (unsigned int end);  Creates a node that filters entries based on range. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > Redefine (std::string_view name, F expression, const ColumnNames_t &columns={});  Overwrite the value and/or type of an existing column. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > Redefine (std::string_view name, std::string_view expression);  Overwrite the value and/or type of an existing column. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > RedefineSlot (std::string_view name, F expression, const ColumnNames_t &columns={});  Overwrite the value and/or type of an existing column. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > RedefineSlotEntry (std::string_view name, F expression, const ColumnNames_t &columns={});  Overwrite the value and/or type of an existing column. ;  ; RResultPtr< T > Reduce (F f, std::string_view columnName, const T &redIdentity);  Execute a user-defined reduce operation on the values of a column. ;  ; RResultPtr< T > Reduce (F f, std::string_view columnName="""");  Execute a user-defined reduce operation on the values of a column. ;  ; RResultPtr< RCutFlowReport > Report ();  Gather filtering statistics. ;  ; RResultPtr< RInterface< RLoopManager > > Snapshot (std::string_view treename, std::string_view filename, const ColumnNames_t &columnList, const RSnapshotOptions &options=RSnapshotOptions());  Save selected columns to disk, in a new TTree treename in file filename. ;  ; RResultPtr< RInterface< RLoopManager > > Snapshot (std::string_view treename, std::string_view filename, const ColumnNames_t &columnList, const RSnapshotOptions &options=RSnapshotOptions());  Save selected columns to disk, in a new TTree treename in file filename. ;  ; RResultPtr< RInterface< RLoopManager > > Snapshot (std::string_view treename, std::string_view filename, std::initializer_list< std::string > columnList, const RSnapsh",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:96835,Energy Efficiency,reduce,reduce,96835,"ode that filters entries based on range. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > Redefine (std::string_view name, F expression, const ColumnNames_t &columns={});  Overwrite the value and/or type of an existing column. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > Redefine (std::string_view name, std::string_view expression);  Overwrite the value and/or type of an existing column. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > RedefineSlot (std::string_view name, F expression, const ColumnNames_t &columns={});  Overwrite the value and/or type of an existing column. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > RedefineSlotEntry (std::string_view name, F expression, const ColumnNames_t &columns={});  Overwrite the value and/or type of an existing column. ;  ; RResultPtr< T > Reduce (F f, std::string_view columnName, const T &redIdentity);  Execute a user-defined reduce operation on the values of a column. ;  ; RResultPtr< T > Reduce (F f, std::string_view columnName="""");  Execute a user-defined reduce operation on the values of a column. ;  ; RResultPtr< RCutFlowReport > Report ();  Gather filtering statistics. ;  ; RResultPtr< RInterface< RLoopManager > > Snapshot (std::string_view treename, std::string_view filename, const ColumnNames_t &columnList, const RSnapshotOptions &options=RSnapshotOptions());  Save selected columns to disk, in a new TTree treename in file filename. ;  ; RResultPtr< RInterface< RLoopManager > > Snapshot (std::string_view treename, std::string_view filename, const ColumnNames_t &columnList, const RSnapshotOptions &options=RSnapshotOptions());  Save selected columns to disk, in a new TTree treename in file filename. ;  ; RResultPtr< RInterface< RLoopManager > > Snapshot (std::string_view treename, std::string_view filename, std::initializer_list< std::string > columnList, const RSnapshotOptions &options=RSnapshotOptions());  Save selected columns to disk, in a new TTree treename in file filename. ;  ; RResultPtr< RInterface< RL",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:301,Integrability,interface,interface,301,". ROOT: ROOT::RDataFrame Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::RDataFrame Class ReferenceDataframe. ; ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. ; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines completely transparently.; Skip to the class reference or keep reading for the user guide.; In a nutshell: ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; myHisto->Draw(); // Event loop is run here, upon first access to a result; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and ret",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:1045,Integrability,interface,interface,1045,"erence. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::RDataFrame Class ReferenceDataframe. ; ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. ; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines completely transparently.; Skip to the class reference or keep reading for the user guide.; In a nutshell: ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; myHisto->Draw(); // Event loop is run here, upon first access to a result; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and return values; Storing RDataFrame ob",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:3796,Integrability,depend,depends,3796,"ion Description . Alias() Introduce an alias for a particular column name. . Define() Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the pts of ""good"" muons). . DefinePerSample() Define a new column that is updated when the input sample changes, e.g. when switching tree being processed in a chain. . DefineSlot() Same as Define(), but the user-defined function must take an extra unsigned int slot as its first parameter. slot will take a different value, 0 to nThreads - 1, for each thread of execution. This is meant as a helper in writing thread-safe Define() transformation when using RDataFrame after ROOT::EnableImplicitMT(). DefineSlot() works just as well with single-thread execution: in that case slot will always be 0. . DefineSlotEntry() Same as DefineSlot(), but the entry number is passed in addition to the slot number. This is meant as a helper in case the expression depends on the entry number. For details about entry numbers in multi-threaded runs, see here. . Filter() Filter rows based on user-defined conditions. . Range() Filter rows based on entry number (single-thread only). . Redefine() Overwrite the value and/or type of an existing column. See Define() for more information. . RedefineSlot() Overwrite the value and/or type of an existing column. See DefineSlot() for more information. . RedefineSlotEntry() Overwrite the value and/or type of an existing column. See DefineSlotEntry() for more information. . Vary() Register systematic variations for an existing column. Varied results are then extracted via VariationsFor(). . Actions; Actions aggregate data into a result. Each one is described in more detail in the reference guide.; In the following, whenever we say an action ""returns"" something, we always mean it returns a smart pointer to it. Actions only act on events that pass all preceding filters.; Lazy actions only trigger the e",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:11942,Integrability,interface,interface,11942,"are lazy, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time. Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them.; The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the crash course to discover more idiomatic and flexible ways to express analyses with RDataFrame. . TTreeReader ROOT::RDataFrame . TTreeReader reader(""myTree"", file);; TTreeReaderValue<A_t> a(reader, ""A"");; TTreeReaderValue<B_t> b(reader, ""B"");; TTreeReaderValue<C_t> c(reader, ""C"");; while(reader.Next()) {; if(IsGoodEvent(*a, *b, *c)); DoStuff(*a, *b, *c);; }; b#define b(i)Definition RSha256.hxx:100; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:146; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:44; ROOT::RDataFrame d(""myTree"", file, {""A"", ""B"", ""C""});; d.Filter(IsGoodEvent).Foreach(DoStuff);; ROOT::RDF::RInterface::FilterRInterface< RDFDetail::RFilter< F, Proxied >, DS_t > Filter(F f, const ColumnNames_t &columns={}, std::string_view name="""")Append a filter to the call graph.Definition RInterface.hxx:216; . TTree::Draw ROOT::RDataFrame . auto *tree = file->Get<TTree>(""myTree"");; tree->Draw(""x"", ""y > 2"");; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; ROOT::RDataFrame df(""myTree"", file);; auto h = df.Filter(""y > 2"").Histo1D(""x"");; h->Draw(); h#define h(i)Definition RSha256.hxx:106; . tree->Draw(""jet_eta"", ""weight*(event == 1)"");; df.Filter(""event == 1"").Histo1D(""jet_eta"", ""weight"");; // or the fully compiled version:; df.Filter([] (ULong64_t e) { retu",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:12076,Integrability,interface,interface,12076,"the first time. Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them.; The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the crash course to discover more idiomatic and flexible ways to express analyses with RDataFrame. . TTreeReader ROOT::RDataFrame . TTreeReader reader(""myTree"", file);; TTreeReaderValue<A_t> a(reader, ""A"");; TTreeReaderValue<B_t> b(reader, ""B"");; TTreeReaderValue<C_t> c(reader, ""C"");; while(reader.Next()) {; if(IsGoodEvent(*a, *b, *c)); DoStuff(*a, *b, *c);; }; b#define b(i)Definition RSha256.hxx:100; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:146; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:44; ROOT::RDataFrame d(""myTree"", file, {""A"", ""B"", ""C""});; d.Filter(IsGoodEvent).Foreach(DoStuff);; ROOT::RDF::RInterface::FilterRInterface< RDFDetail::RFilter< F, Proxied >, DS_t > Filter(F f, const ColumnNames_t &columns={}, std::string_view name="""")Append a filter to the call graph.Definition RInterface.hxx:216; . TTree::Draw ROOT::RDataFrame . auto *tree = file->Get<TTree>(""myTree"");; tree->Draw(""x"", ""y > 2"");; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; ROOT::RDataFrame df(""myTree"", file);; auto h = df.Filter(""y > 2"").Histo1D(""x"");; h->Draw(); h#define h(i)Definition RSha256.hxx:106; . tree->Draw(""jet_eta"", ""weight*(event == 1)"");; df.Filter(""event == 1"").Histo1D(""jet_eta"", ""weight"");; // or the fully compiled version:; df.Filter([] (ULong64_t e) { return e == 1; }, {""event""}).Histo1D<RVec<float>>(""jet_eta"", ""weight"");; e#define e(i)Definition RSha256.hxx:103; ULong64_tunsigned ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:17301,Integrability,wrap,wrapped,17301,"::FromCSVRDataFrame FromCSV(std::string_view fileName, bool readHeaders=true, char delimiter=',', Long64_t linesChunkSize=-1LL, std::unordered_map< std::string, char > &&colTypes={})Factory method to create a CSV RDataFrame.Definition RCsvDS.cxx:558. Filling a histogram; Let's now tackle a very common task, filling a histogram: // Fill a TH1D with the ""MET"" branch; RDataFrame d(""myTree"", ""file.root"");; auto h = d.Histo1D(""MET"");; h->Draw();; The first line creates an RDataFrame associated to the TTree ""myTree"". This tree has a branch named ""MET"".; Histo1D() is an action; it returns a smart pointer (a ROOT::RDF::RResultPtr, to be precise) to a TH1D histogram filled with the MET of all events. If the quantity stored in the column is a collection (e.g. a vector or an array), the histogram is filled with all vector elements for each event.; You can use the objects returned by actions as if they were pointers to the desired results. There are many other possible actions, and all their results are wrapped in smart pointers; we'll see why in a minute. Applying a filter; Let's say we want to cut over the value of branch ""MET"" and count how many events pass this cut. This is one way to do it: RDataFrame d(""myTree"", ""file.root"");; auto c = d.Filter(""MET > 4."").Count(); // computations booked, not run; std::cout << *c << std::endl; // computations run here, upon first access to the result; The filter string (which must contain a valid C++ expression) is applied to the specified columns for each event; the name and types of the columns are inferred automatically. The string expression is required to return a bool which signals whether the event passes the filter (true) or not (false).; You can think of your data as ""flowing"" through the chain of calls, being transformed, filtered and finally used to perform actions. Multiple Filter() calls can be chained one after another.; Using string filters is nice for simple things, but they are limited to specifying the equivalent of a sin",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:26386,Integrability,interface,interface,26386,"d and all results are produced simultaneously.; It is therefore good practice to declare all your transformations and actions before accessing their results, allowing RDataFrame to run the loop once and produce all results in one go. Going parallel; Let's say we would like to run the previous examples in parallel on several cores, dividing events fairly between cores. The only modification required to the snippets would be the addition of this line before constructing the main dataframe object: ROOT::EnableImplicitMT();; Simple as that. More details are given below. Working with collections and object selections; RDataFrame reads collections as the special type ROOT::RVec: for example, a column containing an array of floating point numbers can be read as a ROOT::RVecF. C-style arrays (with variable or static size), STL vectors and most other collection types can be read this way.; RVec is a container similar to std::vector (and can be used just like a std::vector) but it also offers a rich interface to operate on the array elements in a vectorised fashion, similarly to Python's NumPy arrays.; For example, to fill a histogram with the ""pt"" of selected particles for each event, Define() can be used to create a column that contains the desired array elements as follows:; // h is filled with all the elements of `good_pts`, for each event; auto h = df.Define(""good_pts"", [](const ROOT::RVecF &pt) { return pt[pt > 0]; }); .Histo1D(""good_pts"");; ROOT::VecOps::RVec< float >; ptTPaveText * ptDefinition entrylist_figure1.C:7; And in Python:; h = df.Define(""good_pts"", ""pt[pt > 0]"").Histo1D(""good_pts""); Learn more at ROOT::VecOps::RVec. Transformations: manipulating data. Filters; A filter is created through a call to Filter(f, columnList) or Filter(filterString). In the first overload, f can be a function, a lambda expression, a functor class, or any other callable object. It must return a bool signalling whether the event has passed the selection (true) or not (false). It shou",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:28258,Integrability,depend,depend,28258,"hether the event has passed the selection (true) or not (false). It should perform ""read-only"" operations on the columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column names are used as variable names (e.g. Filter(""x[0] + x[1] > 0"")). This is a convenience feature that comes with a certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event loop. See the paragraph about ""Just-in-time compilation"" below for more information.; RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed in order and the first one returning false causes the event to be discarded and triggers the processing of the next entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for each entry: after the first access it simply serves a cached result.; Named filters and cutflow reports; An optional string parameter name can be passed to the Filter() method to create a named filter. Named filters work as usual, but also keep track of how many entries they accept and reject.; Statistics are retrieved through a call to the Report() method:. when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all named filters declared up to that point; when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative all named filters in the section of the chain between the main RDataFrame and that node (included). Stats are stored in the same order as named filters have been added to the graph, and refer to the latest event-loop that has been run using the relevant RDataFrame. Ranges; When RDataFrame is not being used in a mult",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:33315,Integrability,wrap,wrapping,33315,"hreadPoolSize() - 1.; DefineSlotEntry(name, f, columnList). In this case the callable f has this signature R(unsigned int, ULong64_t,; T1, T2, ...): the first parameter is the slot number while the second one the number of the entry being processed. Actions: getting results. Instant and lazy actions; Actions can be instant or lazy. Instant actions are executed as soon as they are called, while lazy actions are executed whenever the object they return is accessed for the first time. As a rule of thumb, actions with a return value are lazy, the others are instant. Return type of a lazy action; When a lazy action is called, it returns a ROOT::RDF::RResultPtr<T>, where T is the type of the result of the action. The final result will be stored in the RResultPtr and can be retrieved by dereferencing it or via its GetValue method. Actions that return collections; If the type of the return value of an action is a collection, e.g. std::vector<int>, you can iterate its elements directly through the wrapping RResultPtr:; ROOT::RDataFrame df{5};; auto df1 = df.Define(""x"", []{ return 42; });; for (const auto &el: df1.Take<int>(""x"")){; std::cout << ""Element: "" << el << ""\n"";; }; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::TakeRResultPtr< COLL > Take(std::string_view column="""")Return a collection of values of a column (lazy action, returns a std::vector by default).Definition RInterface.hxx:1592; int; df = ROOT.RDataFrame(5).Define(""x"", ""42""); for el in df.Take[int](""x""):; print(f""Element: {el}""). Actions and readers; An action that needs values for its computations will request it from a reader, e.g. a column created via Define or available from the input dataset. The action will request values from each column of the list of input columns (either inferred or specified by the user), in order. For example:; ROOT::RDataFrame df{1};; auto df1 = df.Define(""x"", []{ return 11; });; auto df2 = df1.Define(""y"", []{ return 22; });; auto graph = df2.Graph<int, int>(""x"",""y"");; graphDef",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:38686,Integrability,depend,dependent,38686,"sk client needs to be initalized in a context; # Jupyter notebooks / Python session don't need this; if __name__ == ""__main__"":; # With an already setup cluster that exposes a Dask scheduler endpoint; client = Client(""dask_scheduler.domain.com:8786""); ; # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); If an instance of distributed.Client is not provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine using all cores available. Choosing the number of distributed tasks; A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but generically tries to infer how many cores are available in the cluster through the connection object. The number of tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to a batch system. The client object created at the beginning of the application does not automatically know how many cores will be available during distributed execution, since the jobs are submitted to the batch system after the creation of the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks.; The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional keyword argument npartitions when creating the RDataFrame object. This parameter is accepted irrespectively of the backend used:; import ROOT; ; # Define correct imports and access the distributed RDataFrame appropriate for ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:46863,Integrability,depend,dependency,46863,"column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that different threads will employ different values of the slot parameter, where slot will be a number between 0 and GetNSlots() - 1. In other words, within a slot, computation runs sequentially and events are processed sequentially. Note that the same slot might be associated to different threads over the course of a single event loop, but two threads will never receive the same slot at the same time. This extra parameter might facilitate writi",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:50517,Integrability,depend,depend,50517," corresponding C++ logic, while the equivalent Filter([](float x) { return x > 0.; }, {""x""}) does not. Similarly, Histo1D(""x"") requires just-in-time compilation after the type of x is retrieved from the dataset, while Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See Efficient analysis in Python for possible ways to speed up hot paths in this case.; Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations for all RDataFrame computation graphs before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See Activating RDataFrame execution logs. Memory usage; There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:53180,Integrability,depend,dependencies,53180,"o h2 = df2.Histo1D(""y"");; h1->Draw(); // we just-in-time compile everything needed by df1 and df2 here; h2->Draw(""SAME"");; ; // do not:; auto h1 = df1.Histo1D(""x"");; h1->Draw(); // we just-in-time compile here; auto h2 = df2.Histo1D(""y"");; h2->Draw(""SAME""); // we just-in-time compile again here, as the second Histo1D call is new. More features; Here is a list of the most important features that have been omitted in the ""Crash course"" for brevity. You don't need to read all these to start using RDataFrame, but they are useful to save typing time and runtime. Systematic variations; Starting from ROOT v6.26, RDataFrame provides a flexible syntax to define systematic variations. This is done in two steps: a) register variations for one or more existing columns using Vary() and b) extract variations of normal RDataFrame results using VariationsFor(). In between these steps, no other change to the analysis code is required: the presence of systematic variations for certain columns is automatically propagated through filters, defines and actions, and RDataFrame will take these dependencies into account when producing varied results. VariationsFor() is included in header ROOT/RDFHelpers.hxx. The compiled C++ programs must include this header explicitly, this is not required for ROOT macros.; An example usage of Vary() and VariationsFor() in C++:; auto nominal_hx =; df.Vary(""pt"", ""ROOT::RVecD{pt*0.9f, pt*1.1f}"", {""down"", ""up""}); .Filter(""pt > pt_cut""); .Define(""x"", someFunc, {""pt""}); .Histo1D<float>(""x"");; ; // request the generation of varied results from the nominal_hx; ROOT::RDF::Experimental::RResultMap<TH1D> hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; ; // the event loop runs here, upon first access to any of the results or varied results:; hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; ROOT::RDF::Experimental::RResultMapDefinition RResultMap.hxx:98; ROOT::RDF::Experimental::VariationsFor",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:55083,Integrability,depend,depend,55083,"l::RResultMapDefinition RResultMap.hxx:98; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second to the tag ""up""). The full variation name will be composed of the varied column name and the variation tags (e.g. ""pt:down"", ""pt:up"" in this example). Python usage looks similar.; Note how we use the ""pt"" column as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill the resulting histogram. To produce the varied results, RDataFrame will automatically execute the Filter and Define calls for each variation and fill the histogram with values and cuts that depend on the variation.; There is no limitation to the complexity of a Vary() expression. Just like for the Define() and Filter() calls, users are not limited to string expressions but they can also pass any valid C++ callable, including lambda functions and complex functors. The callable can be applied to zero or more existing columns and it will always receive their nominal value in input.; Varying multiple columns in lockstep; In the following Python snippet we use the Vary() signature that allows varying multiple columns simultaneously or ""in lockstep"":; df.Vary([""pt"", ""eta""],; ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",; variationTags=[""down"", ""up""],; variationName=""ptAndEta""); The expression returns an RVec of two RVecs: each inner vector contains the varied values for one column. The inner vectors follow the same ordering as the column names that are passed as the first argument. Besides the variati",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:56271,Integrability,depend,depends,56271,"pass any valid C++ callable, including lambda functions and complex functors. The callable can be applied to zero or more existing columns and it will always receive their nominal value in input.; Varying multiple columns in lockstep; In the following Python snippet we use the Vary() signature that allows varying multiple columns simultaneously or ""in lockstep"":; df.Vary([""pt"", ""eta""],; ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",; variationTags=[""down"", ""up""],; variationName=""ptAndEta""); The expression returns an RVec of two RVecs: each inner vector contains the varied values for one column. The inner vectors follow the same ordering as the column names that are passed as the first argument. Besides the variation tags, in this case we also have to explicitly pass the variation name (here: ""ptAndEta"") as the default column name does not exist.; The above call will produce variations ""ptAndEta:down"" and ""ptAndEta:up"".; Combining multiple variations; Even if a result depends on multiple variations, only one variation is applied at a time, i.e. there will be no result produced by applying multiple systematic variations at the same time. For example, in the following example snippet, the RResultMap instance all_h will contain keys ""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; auto df = _df.Vary(""pt"",; ""ROOT::RVecD{pt*0.9, pt*1.1}"",; {""down"", ""up""}); .Vary(""eta"",; [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; {""eta""},; 2);; ; auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; auto all_hs = VariationsFor(nom_h);; all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::VaryRInterface< RDFDetail::RLoopManager, DS_t > Vary(std::string_view colName, F &&expression, const ColumnNames_t &inputColumns, const std::vector< std::string > &variationTags, std::string_view variationName="""")Register systematic variations for a single existing column using custo",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:57637,Integrability,interface,interfaces,57637," similar:; auto df = _df.Vary(""pt"",; ""ROOT::RVecD{pt*0.9, pt*1.1}"",; {""down"", ""up""}); .Vary(""eta"",; [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; {""eta""},; 2);; ; auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; auto all_hs = VariationsFor(nom_h);; all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::VaryRInterface< RDFDetail::RLoopManager, DS_t > Vary(std::string_view colName, F &&expression, const ColumnNames_t &inputColumns, const std::vector< std::string > &variationTags, std::string_view variationName="""")Register systematic variations for a single existing column using custom variation tags.Definition RInterface.hxx:693; Note how we passed the integer 2 instead of a list of variation tags to the second Vary() invocation: this is a shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; NoteCurrently, VariationsFor() and RResultMap are in the ROOT::RDF::Experimental namespace, to indicate that these interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related programming model will be streamlined in future versions. Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to call VariationsFor() on them. These limitations will be lifted in future releases.; See the Vary() method for more information and this tutorial for an example usage of Vary and VariationsFor() in the analysis. RDataFrame objects as function arguments and return values; RDataFrame variables/nodes are relatively cheap to copy and it's possible to both pass them to (or move them into) functions and to return them from functions. However, in general each dataframe node will have a different C++ type, which includes all available compile-time information about what that node does. One way to cope with this complication is to use template functions and/or C++14 auto return types: template <t",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:63496,Integrability,message,message,63496," reasons, the names tdfentry_ and tdfslot_ are also accepted. These columns are ignored by operations such as Cache or Snapshot.; WarningNote that in multi-thread event loops the values of rdfentry_ do not correspond to what would be the entry numbers of a TChain constructed over the same set of ROOT files, as the entries are processed in an unspecified order. Just-in-time compilation: column type inference and explicit declaration of column types; C++ is a statically typed language: all types must be known at compile-time. This includes the types of the TTree branches we want to work on. For filters, defined columns and some of the actions, column types are deduced from the signature of the relevant filter function/temporary column expression/action function: // here b1 is deduced to be `int` and b2 to be `double`; df.Filter([](int x, double y) { return x > 0 && y < 0.; }, {""b1"", ""b2""});; If we specify an incorrect type for one of the columns, an exception with an informative message will be thrown at runtime, when the column value is actually read from the dataset: RDataFrame detects type mismatches. The same would happen if we swapped the order of ""b1"" and ""b2"" in the column list passed to Filter().; Certain actions, on the other hand, do not take a function as argument (e.g. Histo1D()), so we cannot deduce the type of the column at compile-time. In this case RDataFrame infers the type of the column from the TTree itself. This is why we never needed to specify the column types for all actions in the above snippets.; When the column type is not a common one such as int, double, char or float it is nonetheless good practice to specify it as a template parameter to the action itself, like this: df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime overhead",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:65062,Integrability,inject,inject,65062,"mmon one such as int, double, char or float it is nonetheless good practice to specify it as a template parameter to the action itself, like this: df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing x = 0 rather than x == 0:; // this throws an error (note the typo); df.Define(""x"", ""0"").Filter(""x = 0"");. User-defined custom actions; RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; Implementing custom actions with Book(); Through the Book() method, users can implement a custom action and have access to the same features that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:; #include <ROOT/RDataFrame.hxx>; #include <memory>; ; class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; std::shared_ptr<int> fFinalResult = std::make_shared<int>(0);; std::vector<int> fPerThreadResults;; ; public:; // We use a public type alias to advertise the type of the result of this action; using Result_t = int;; ; MyCounter(unsigned int nSlots) : fPerThreadResults(nSlots) {}; ; // Called before the event loop to retrieve the address of the result that will be filled/generated.; std::shared_ptr<int> GetResultPtr() const { return fFinalResult; }; ; // Called at the beginn",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:67808,Integrability,interface,interface,67808,"<< ""Number of processed entries: "" << resultPtr.GetValue() << std::endl;; }; mainint main()Definition Prototype.cxx:12; RDataFrame.hxx; ROOT::Detail::RDF::RActionImplBase class for action helpers, see RInterface::Book() for more information.Definition RActionImpl.hxx:26; ROOT::RDF::RResultPtrSmart pointer for the return type of actions.Definition RResultPtr.hxx:119; ROOT::RDF::RResultPtr::GetValueconst T & GetValue()Get a const reference to the encapsulated object.Definition RResultPtr.hxx:228; CPyCppyy::ExecCPYCPPYY_EXTERN bool Exec(const std::string &cmd)Definition API.cxx:446; See the Book() method for more information and this tutorial for a more complete example.; Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and executes the callable on the values of those columns for each event that passes all upstream selections. It can be used to perform actions that are not already available in the interface. For example, the following snippet evaluates the root mean square of column ""x"": // Single-thread evaluation of RMS of column ""x"" using Foreach; double sumSq = 0.;; unsigned int n = 0;; df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; nconst Int_t nDefinition legend1.C:16; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach(): thread will execute the expression concurrently. The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of rms; but this is probably too much head-scratch for such a simple operation.; ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:72094,Integrability,interface,interfaced,72094,"ut from a multi-thread Snapshot() call will have their entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original one: rows will be mismatched.; Indexed friend trees provide a way to perform simple joins of multiple trees over a common column. When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the ""index"" columns have a value identical to the one in the main one. For example, in Python:; main_tree = ...; aux_tree = ...; ; # If a friend tree has an index on `commonColumn`, when the main tree loads; # a given row, it also loads the row of the friend tree that has the same; # value of `commonColumn`; aux_tree.BuildIndex(""commonColumn""); ; mainTree.AddFriend(aux_tree); ; df = ROOT.RDataFrame(mainTree); RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode. Reading data formats other than ROOT trees; RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; RDataFrame calls into concrete RDataSource implementations to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns and to advance the readers to the desired data entry. Some predefined RDataSources are natively provided by ROOT such as the ROOT::RDF::RCsvDS which allows to read comma separated files: auto tdf = ROOT::RDF::FromCSV(""MuRun2010B.csv"");; auto filteredEvents =; tdf.Filter(""Q1 * Q2 == -1""); .Define(""m"", ""sqrt(pow(E1 + E2, 2) - (pow(px1 + px2, 2) + pow(py1 + py2, 2) + pow(pz1 + pz2, 2)))"");; auto h = filteredEvents.Histo1D(""m"");; h->Draw();; See also FromNumpy (Python-only), FromRNTuple(), FromArrow(), FromSqlite(). Computation graphs (storing and reusing sets of transformations); As we saw, transformed dataframes can be stored as variables and reused multiple times",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:72151,Integrability,interface,interface,72151," original tree. Such trees cannot be used as friends of the original one: rows will be mismatched.; Indexed friend trees provide a way to perform simple joins of multiple trees over a common column. When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the ""index"" columns have a value identical to the one in the main one. For example, in Python:; main_tree = ...; aux_tree = ...; ; # If a friend tree has an index on `commonColumn`, when the main tree loads; # a given row, it also loads the row of the friend tree that has the same; # value of `commonColumn`; aux_tree.BuildIndex(""commonColumn""); ; mainTree.AddFriend(aux_tree); ; df = ROOT.RDataFrame(mainTree); RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode. Reading data formats other than ROOT trees; RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; RDataFrame calls into concrete RDataSource implementations to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns and to advance the readers to the desired data entry. Some predefined RDataSources are natively provided by ROOT such as the ROOT::RDF::RCsvDS which allows to read comma separated files: auto tdf = ROOT::RDF::FromCSV(""MuRun2010B.csv"");; auto filteredEvents =; tdf.Filter(""Q1 * Q2 == -1""); .Define(""m"", ""sqrt(pow(E1 + E2, 2) - (pow(px1 + px2, 2) + pow(py1 + py2, 2) + pow(pz1 + pz2, 2)))"");; auto h = filteredEvents.Histo1D(""m"");; h->Draw();; See also FromNumpy (Python-only), FromRNTuple(), FromArrow(), FromSqlite(). Computation graphs (storing and reusing sets of transformations); As we saw, transformed dataframes can be stored as variables and reused multiple times to create modified versions of the dataset. This implicitly defines a computation graph in which several",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:75893,Integrability,message,messages,75893,"0; The generated graph can be rendered using one of the graphviz filters, e.g. dot. For instance, the image below can be generated with the following command: $ dot -Tpng computation_graph.dot -ocomputation_graph.png. Activating RDataFrame execution logs; RDataFrame has experimental support for verbose logging of the event loop runtimes and other interesting related information. It is activated as follows: #include <ROOT/RLogger.hxx>; ; // this increases RDF's verbosity level as long as the `verbosity` variable is in scope; auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel::kInfo);; RLogger.hxx; ROOT::Experimental::RLogScopedVerbosityChange the verbosity level (global or specific to the RLogChannel passed to the constructor) for the ...Definition RLogger.hxx:243; ROOT::Detail::RDF::RDFLogChannelROOT::Experimental::RLogChannel & RDFLogChannel()Definition RDFUtils.cxx:37; ROOT::Experimental::ELogLevel::kInfo@ kInfoInformational messages; used for instance for tracing.; or in Python: import ROOT; ; verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kInfo); More information (e.g. start and end of each multi-thread task) is printed using ELogLevel.kDebug and even more (e.g. a full dump of the generated code that RDataFrame just-in-time-compiles) using ELogLevel.kDebug+10. Creating an RDataFrame from a dataset specification file; RDataFrame can be created using a dataset specification JSON file:; import ROOT; ; df = ROOT.RDF.Experimental.FromSpec(""spec.json""); ROOT::RDF::Experimental::FromSpecROOT::RDataFrame FromSpec(const std::string &jsonFile)Factory method to create an RDataFrame from a JSON specification file.Definition RDataFrame.cxx:1729; The input dataset specification JSON file needs to be provided by the user and it describes all necessary samples and their associated metadata information. The main required key is the ""samples"" (at ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:79795,Integrability,interface,interface,79795,"f);; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; Alternatively, RDataFrame can be cast to an RNode first, giving the user more flexibility For example, it can be called at any computational node, such as Filter or Define, not only the head node, with no change to the ProgressBar function itself (please see the Efficient analysis in Python section for appropriate usage in Python): ROOT::RDataFrame df(""tree"", ""file.root"");; auto df_1 = ROOT::RDF::RNode(df.Filter(""x>1""));; ROOT::RDF::Experimental::AddProgressBar(df_1);; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57; Examples of implemented progress bars can be seen by running Higgs to Four Lepton tutorial and Dimuon tutorial. Efficient analysis in Python; You can use RDataFrame in Python thanks to the dynamic Python/C++ translation of PyROOT. In general, the interface is the same as for C++, a simple example follows.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performa",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:80257,Integrability,interface,interface,80257,"e see the Efficient analysis in Python section for appropriate usage in Python): ROOT::RDataFrame df(""tree"", ""file.root"");; auto df_1 = ROOT::RDF::RNode(df.Filter(""x>1""));; ROOT::RDF::Experimental::AddProgressBar(df_1);; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57; Examples of implemented progress bars can be seen by running Higgs to Four Lepton tutorial and Dimuon tutorial. Efficient analysis in Python; You can use RDataFrame in Python thanks to the dynamic Python/C++ translation of PyROOT. In general, the interface is the same as for C++, a simple example follows.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performance even further, you can also pre-compile a C++ library with full code optimizations and load the function into the RDataFrame computation as follows.; ROOT.gSystem.Load(""path/to/myLibrary.so"") # Library with the myFilter function; ROOT.gInterpreter.Declare('#include ""myLibrary.h""') # Header with the declaration of the myFilter function; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""my",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:88963,Integrability,depend,dependent,88963,"ring > columnList);  Save selected columns in memory. ;  ; RInterface< RLoopManager > Cache (std::string_view columnNameRegexp="""");  Save selected columns in memory. ;  ; RResultPtr< ULong64_t > Count ();  Return the number of entries processed (lazy action). ;  ; RInterface< RDFDetail::RLoopManager, DS_t > Define (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > Define (std::string_view name, std::string_view expression);  Define a new column. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > DefinePerSample (std::string_view name, F expression);  Define a new column that is updated when the input sample changes. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > DefinePerSample (std::string_view name, std::string_view expression);  Define a new column that is updated when the input sample changes. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > DefineSlot (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column with a value dependent on the processing slot. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > DefineSlotEntry (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column with a value dependent on the processing slot and the current entry. ;  ; RResultPtr< RDisplay > Display (const ColumnNames_t &columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (const ColumnNames_t &columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (std::initializer_list< std::string > columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (std::string_view columnNameRegexp="""", size_t nRows=5, size_t nMaxCollectionElement",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:89168,Integrability,depend,dependent,89168,"the number of entries processed (lazy action). ;  ; RInterface< RDFDetail::RLoopManager, DS_t > Define (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > Define (std::string_view name, std::string_view expression);  Define a new column. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > DefinePerSample (std::string_view name, F expression);  Define a new column that is updated when the input sample changes. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > DefinePerSample (std::string_view name, std::string_view expression);  Define a new column that is updated when the input sample changes. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > DefineSlot (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column with a value dependent on the processing slot. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > DefineSlotEntry (std::string_view name, F expression, const ColumnNames_t &columns={});  Define a new column with a value dependent on the processing slot and the current entry. ;  ; RResultPtr< RDisplay > Display (const ColumnNames_t &columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (const ColumnNames_t &columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (std::initializer_list< std::string > columnList, size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< RDisplay > Display (std::string_view columnNameRegexp="""", size_t nRows=5, size_t nMaxCollectionElements=10);  Provides a representation of the columns in the dataset. ;  ; RResultPtr< std::decay_t< T > > Fill (T &&model, const ColumnNames_t &columnList);  Return an object of type T on which T::Fill will be called o",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:10336,Modifiability,flexible,flexible,10336," in the dataset. . GetDefinedColumnNames() Get the names of all the defined columns. . GetFilterNames() Return the names of all filters in the computation graph. . GetNRuns() Return the number of event loops run by this RDataFrame instance so far. . GetNSlots() Return the number of processing slots that RDataFrame will use during the event loop (i.e. the concurrency level). . SaveGraph() Store the computation graph of an RDataFrame in DOT format (graphviz) for easy inspection. See the relevant section for details. . Introduction; Users define their analysis as a sequence of operations to be performed on the dataframe object; the framework takes care of the management of the loop over entries as well as low-level details such as I/O and parallelization. RDataFrame provides methods to perform most common operations required by ROOT analyses; at the same time, users can just as easily specify custom code that will be executed in the event loop.; RDataFrame is built with a modular and flexible workflow in mind, summarised as follows:. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, CSV files, SQLite files, RNTuples, and it can be extended to custom data formats. From Python, NumPy arrays can be imported into RDataFrame as well.; Transform the dataframe by:; Applying filters. This selects only specific rows of the dataset.; Creating custom columns. Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset. Produce results. Actions are used to aggregate data into results. Most actions are lazy, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time. Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them.; The following ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:10535,Modifiability,extend,extended,10535," GetNRuns() Return the number of event loops run by this RDataFrame instance so far. . GetNSlots() Return the number of processing slots that RDataFrame will use during the event loop (i.e. the concurrency level). . SaveGraph() Store the computation graph of an RDataFrame in DOT format (graphviz) for easy inspection. See the relevant section for details. . Introduction; Users define their analysis as a sequence of operations to be performed on the dataframe object; the framework takes care of the management of the loop over entries as well as low-level details such as I/O and parallelization. RDataFrame provides methods to perform most common operations required by ROOT analyses; at the same time, users can just as easily specify custom code that will be executed in the event loop.; RDataFrame is built with a modular and flexible workflow in mind, summarised as follows:. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, CSV files, SQLite files, RNTuples, and it can be extended to custom data formats. From Python, NumPy arrays can be imported into RDataFrame as well.; Transform the dataframe by:; Applying filters. This selects only specific rows of the dataset.; Creating custom columns. Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset. Produce results. Actions are used to aggregate data into results. Most actions are lazy, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time. Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them.; The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the crash course to discover more idiomatic and flexible ways to ex",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:11485,Modifiability,flexible,flexible,11485,"in, CSV files, SQLite files, RNTuples, and it can be extended to custom data formats. From Python, NumPy arrays can be imported into RDataFrame as well.; Transform the dataframe by:; Applying filters. This selects only specific rows of the dataset.; Creating custom columns. Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset. Produce results. Actions are used to aggregate data into results. Most actions are lazy, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time. Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them.; The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the crash course to discover more idiomatic and flexible ways to express analyses with RDataFrame. . TTreeReader ROOT::RDataFrame . TTreeReader reader(""myTree"", file);; TTreeReaderValue<A_t> a(reader, ""A"");; TTreeReaderValue<B_t> b(reader, ""B"");; TTreeReaderValue<C_t> c(reader, ""C"");; while(reader.Next()) {; if(IsGoodEvent(*a, *b, *c)); DoStuff(*a, *b, *c);; }; b#define b(i)Definition RSha256.hxx:100; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:146; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:44; ROOT::RDataFrame d(""myTree"", file, {""A"", ""B"", ""C""});; d.Filter(IsGoodEvent).Foreach(DoStuff);; ROOT::RDF::RInterface::FilterRInterface< RDFDetail::RFilter< F, Proxied >, DS_t > Filter(F f, const ColumnNames_t &columns={}, std::string_view name="""")Append a filter to the call graph.Definition RInterface.hxx:",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:19956,Modifiability,variab,variables,19956,"l;; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::CountRResultPtr< ULong64_t > Count()Return the number of entries processed (lazy action).Definition RInterface.hxx:1560; xDouble_t x[n]Definition legend1.C:17; An example of a more complex filter expressed as a string containing C++ code is shown below; RDataFrame d(""myTree"", ""file.root"");; auto df = d.Define(""p"", ""std::array<double, 4> p{px, py, pz}; return p;""); .Filter(""double p2 = 0.0; for (auto&& x : p) p2 += x*x; return sqrt(p2) < 10.0;"");; The code snippet above defines a column p that is a fixed-size array using the component column names and then filters on its magnitude by looping over its elements. It must be noted that the usage of strings to define columns like the one above is currently the only possibility when using PyROOT. When writing expressions as such, only constants and data coming from other columns in the dataset can be involved in the code passed as a string. Local variables and functions cannot be used, since the interpreter will not know how to find them. When capturing local state is necessary, it must first be declared to the ROOT C++ interpreter.; More information on filters and how to use them to automatically generate cutflow reports can be found below. Defining custom columns; Let's now consider the case in which ""myTree"" contains two quantities ""x"" and ""y"", but our analysis relies on a derived quantity z = sqrt(x*x + y*y). Using the Define() transformation, we can create a new column in the dataset containing the variable ""z"": RDataFrame d(""myTree"", ""file.root"");; auto sqrtSum = [](double x, double y) { return sqrt(x*x + y*y); };; auto zMean = d.Define(""z"", sqrtSum, {""x"",""y""}).Mean(""z"");; std::cout << *zMean << std::endl;; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::MeanRResultPtr< double > Mean(std::string_view columnName="""")Return the mean of processed column values (lazy action).Definition RInterface.hxx:2530; yDouble_t y[n]Definition legend1.C:17; Define() creates the v",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:20524,Modifiability,variab,variable,20524,""");; The code snippet above defines a column p that is a fixed-size array using the component column names and then filters on its magnitude by looping over its elements. It must be noted that the usage of strings to define columns like the one above is currently the only possibility when using PyROOT. When writing expressions as such, only constants and data coming from other columns in the dataset can be involved in the code passed as a string. Local variables and functions cannot be used, since the interpreter will not know how to find them. When capturing local state is necessary, it must first be declared to the ROOT C++ interpreter.; More information on filters and how to use them to automatically generate cutflow reports can be found below. Defining custom columns; Let's now consider the case in which ""myTree"" contains two quantities ""x"" and ""y"", but our analysis relies on a derived quantity z = sqrt(x*x + y*y). Using the Define() transformation, we can create a new column in the dataset containing the variable ""z"": RDataFrame d(""myTree"", ""file.root"");; auto sqrtSum = [](double x, double y) { return sqrt(x*x + y*y); };; auto zMean = d.Define(""z"", sqrtSum, {""x"",""y""}).Mean(""z"");; std::cout << *zMean << std::endl;; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::MeanRResultPtr< double > Mean(std::string_view columnName="""")Return the mean of processed column values (lazy action).Definition RInterface.hxx:2530; yDouble_t y[n]Definition legend1.C:17; Define() creates the variable ""z"" by applying sqrtSum to ""x"" and ""y"". Later in the chain of calls we refer to variables created with Define() as if they were actual tree branches/columns, but they are evaluated on demand, at most once per event. As with filters, Define() calls can be chained with other transformations to create multiple custom columns. Define() and Filter() transformations can be concatenated and intermixed at will.; As with filters, it is possible to specify new columns as string expressions. This s",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:20998,Modifiability,variab,variable,20998,"terpreter will not know how to find them. When capturing local state is necessary, it must first be declared to the ROOT C++ interpreter.; More information on filters and how to use them to automatically generate cutflow reports can be found below. Defining custom columns; Let's now consider the case in which ""myTree"" contains two quantities ""x"" and ""y"", but our analysis relies on a derived quantity z = sqrt(x*x + y*y). Using the Define() transformation, we can create a new column in the dataset containing the variable ""z"": RDataFrame d(""myTree"", ""file.root"");; auto sqrtSum = [](double x, double y) { return sqrt(x*x + y*y); };; auto zMean = d.Define(""z"", sqrtSum, {""x"",""y""}).Mean(""z"");; std::cout << *zMean << std::endl;; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::MeanRResultPtr< double > Mean(std::string_view columnName="""")Return the mean of processed column values (lazy action).Definition RInterface.hxx:2530; yDouble_t y[n]Definition legend1.C:17; Define() creates the variable ""z"" by applying sqrtSum to ""x"" and ""y"". Later in the chain of calls we refer to variables created with Define() as if they were actual tree branches/columns, but they are evaluated on demand, at most once per event. As with filters, Define() calls can be chained with other transformations to create multiple custom columns. Define() and Filter() transformations can be concatenated and intermixed at will.; As with filters, it is possible to specify new columns as string expressions. This snippet is analogous to the one above: RDataFrame d(""myTree"", ""file.root"");; auto zMean = d.Define(""z"", ""sqrt(x*x + y*y)"").Mean(""z"");; std::cout << *zMean << std::endl;; Again the names of the columns used in the expression and their types are inferred automatically. The string must be valid C++ and it is just-in-time compiled. The process has a small runtime overhead and like with filters it is currently the only possible approach when using PyROOT.; Previously, when showing the different ways an RDataFra",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:21087,Modifiability,variab,variables,21087,"nterpreter.; More information on filters and how to use them to automatically generate cutflow reports can be found below. Defining custom columns; Let's now consider the case in which ""myTree"" contains two quantities ""x"" and ""y"", but our analysis relies on a derived quantity z = sqrt(x*x + y*y). Using the Define() transformation, we can create a new column in the dataset containing the variable ""z"": RDataFrame d(""myTree"", ""file.root"");; auto sqrtSum = [](double x, double y) { return sqrt(x*x + y*y); };; auto zMean = d.Define(""z"", sqrtSum, {""x"",""y""}).Mean(""z"");; std::cout << *zMean << std::endl;; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::MeanRResultPtr< double > Mean(std::string_view columnName="""")Return the mean of processed column values (lazy action).Definition RInterface.hxx:2530; yDouble_t y[n]Definition legend1.C:17; Define() creates the variable ""z"" by applying sqrtSum to ""x"" and ""y"". Later in the chain of calls we refer to variables created with Define() as if they were actual tree branches/columns, but they are evaluated on demand, at most once per event. As with filters, Define() calls can be chained with other transformations to create multiple custom columns. Define() and Filter() transformations can be concatenated and intermixed at will.; As with filters, it is possible to specify new columns as string expressions. This snippet is analogous to the one above: RDataFrame d(""myTree"", ""file.root"");; auto zMean = d.Define(""z"", ""sqrt(x*x + y*y)"").Mean(""z"");; std::cout << *zMean << std::endl;; Again the names of the columns used in the expression and their types are inferred automatically. The string must be valid C++ and it is just-in-time compiled. The process has a small runtime overhead and like with filters it is currently the only possible approach when using PyROOT.; Previously, when showing the different ways an RDataFrame can be created, we showed a constructor that takes a number of entries as a parameter. In the following example we show ho",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:22916,Modifiability,variab,variables,22916,"using PyROOT.; Previously, when showing the different ways an RDataFrame can be created, we showed a constructor that takes a number of entries as a parameter. In the following example we show how to combine such an ""empty"" RDataFrame with Define() transformations to create a dataset on the fly. We then save the generated data on disk using the Snapshot() action. RDataFrame d(100); // an RDF that will generate 100 entries (currently empty); int x = -1;; auto d_with_columns = d.Define(""x"", [&x] { return ++x; }); .Define(""xx"", [&x] { return x*x; });; d_with_columns.Snapshot(""myNewTree"", ""newfile.root"");; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::DefineRInterface< RDFDetail::RLoopManager, DS_t > Define(std::string_view name, F expression, const ColumnNames_t &columns={})Define a new column.Definition RInterface.hxx:338; This example is slightly more advanced than what we have seen so far. First, it makes use of lambda captures (a simple way to make external variables available inside the body of C++ lambdas) to act on the same variable x from both Define() transformations. Second, we have stored the transformed dataframe in a variable. This is always possible, since at each point of the transformation chain users can store the status of the dataframe for further use (more on this below).; You can read more about defining new columns here. A graph composed of two branches, one starting with a filter and one with a define. The end point of a branch is always an action. Running on a range of entries; It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act exclusively on the entries passing the filter – it will not even count the other entries! The same goes for a Ra",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:22987,Modifiability,variab,variable,22987,"using PyROOT.; Previously, when showing the different ways an RDataFrame can be created, we showed a constructor that takes a number of entries as a parameter. In the following example we show how to combine such an ""empty"" RDataFrame with Define() transformations to create a dataset on the fly. We then save the generated data on disk using the Snapshot() action. RDataFrame d(100); // an RDF that will generate 100 entries (currently empty); int x = -1;; auto d_with_columns = d.Define(""x"", [&x] { return ++x; }); .Define(""xx"", [&x] { return x*x; });; d_with_columns.Snapshot(""myNewTree"", ""newfile.root"");; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::DefineRInterface< RDFDetail::RLoopManager, DS_t > Define(std::string_view name, F expression, const ColumnNames_t &columns={})Define a new column.Definition RInterface.hxx:338; This example is slightly more advanced than what we have seen so far. First, it makes use of lambda captures (a simple way to make external variables available inside the body of C++ lambdas) to act on the same variable x from both Define() transformations. Second, we have stored the transformed dataframe in a variable. This is always possible, since at each point of the transformation chain users can store the status of the dataframe for further use (more on this below).; You can read more about defining new columns here. A graph composed of two branches, one starting with a filter and one with a define. The end point of a branch is always an action. Running on a range of entries; It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act exclusively on the entries passing the filter – it will not even count the other entries! The same goes for a Ra",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:23088,Modifiability,variab,variable,23088,"number of entries as a parameter. In the following example we show how to combine such an ""empty"" RDataFrame with Define() transformations to create a dataset on the fly. We then save the generated data on disk using the Snapshot() action. RDataFrame d(100); // an RDF that will generate 100 entries (currently empty); int x = -1;; auto d_with_columns = d.Define(""x"", [&x] { return ++x; }); .Define(""xx"", [&x] { return x*x; });; d_with_columns.Snapshot(""myNewTree"", ""newfile.root"");; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::DefineRInterface< RDFDetail::RLoopManager, DS_t > Define(std::string_view name, F expression, const ColumnNames_t &columns={})Define a new column.Definition RInterface.hxx:338; This example is slightly more advanced than what we have seen so far. First, it makes use of lambda captures (a simple way to make external variables available inside the body of C++ lambdas) to act on the same variable x from both Define() transformations. Second, we have stored the transformed dataframe in a variable. This is always possible, since at each point of the transformation chain users can store the status of the dataframe for further use (more on this below).; You can read more about defining new columns here. A graph composed of two branches, one starting with a filter and one with a define. The end point of a branch is always an action. Running on a range of entries; It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act exclusively on the entries passing the filter – it will not even count the other entries! The same goes for a Range() hanging from another Range(). Here are some commented examples: RDataFrame d(""myTree"", ""file.root"");; // Here we store a",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:24123,Modifiability,variab,variable,24123,"able. This is always possible, since at each point of the transformation chain users can store the status of the dataframe for further use (more on this below).; You can read more about defining new columns here. A graph composed of two branches, one starting with a filter and one with a define. The end point of a branch is always an action. Running on a range of entries; It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act exclusively on the entries passing the filter – it will not even count the other entries! The same goes for a Range() hanging from another Range(). Here are some commented examples: RDataFrame d(""myTree"", ""file.root"");; // Here we store a dataframe that loops over only the first 30 entries in a variable; auto d30 = d.Range(30);; // This is how you pick all entries from 15 onwards; auto d15on = d.Range(15, 0);; // We can specify a stride too, in this case we pick an event every 3; auto d15each3 = d.Range(0, 15, 3);; Note that ranges are not available when multi-threading is enabled. More information on ranges is available here. Executing multiple actions in the same event loop; As a final example let us apply two different cuts on branch ""MET"" and fill two different histograms with the ""pt_v"" of the filtered events. By now, you should be able to easily understand what is happening: RDataFrame d(""treeName"", ""file.root"");; auto h1 = d.Filter(""MET > 10"").Histo1D(""pt_v"");; auto h2 = d.Histo1D(""pt_v"");; h1->Draw(); // event loop is run once here; h2->Draw(""SAME""); // no need to run the event loop again; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; h1TH1F * h1Definition legend1.C:5; RDataFram",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:26182,Modifiability,variab,variable,26182,"hey are called, but they are lazy, i.e. delayed until the moment one of their results is accessed through the smart pointer. At that time, the event loop is triggered and all results are produced simultaneously.; It is therefore good practice to declare all your transformations and actions before accessing their results, allowing RDataFrame to run the loop once and produce all results in one go. Going parallel; Let's say we would like to run the previous examples in parallel on several cores, dividing events fairly between cores. The only modification required to the snippets would be the addition of this line before constructing the main dataframe object: ROOT::EnableImplicitMT();; Simple as that. More details are given below. Working with collections and object selections; RDataFrame reads collections as the special type ROOT::RVec: for example, a column containing an array of floating point numbers can be read as a ROOT::RVecF. C-style arrays (with variable or static size), STL vectors and most other collection types can be read this way.; RVec is a container similar to std::vector (and can be used just like a std::vector) but it also offers a rich interface to operate on the array elements in a vectorised fashion, similarly to Python's NumPy arrays.; For example, to fill a histogram with the ""pt"" of selected particles for each event, Define() can be used to create a column that contains the desired array elements as follows:; // h is filled with all the elements of `good_pts`, for each event; auto h = df.Define(""good_pts"", [](const ROOT::RVecF &pt) { return pt[pt > 0]; }); .Histo1D(""good_pts"");; ROOT::VecOps::RVec< float >; ptTPaveText * ptDefinition entrylist_figure1.C:7; And in Python:; h = df.Define(""good_pts"", ""pt[pt > 0]"").Histo1D(""good_pts""); Learn more at ROOT::VecOps::RVec. Transformations: manipulating data. Filters; A filter is created through a call to Filter(f, columnList) or Filter(filterString). In the first overload, f can be a function, a lambda e",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:27508,Modifiability,variab,variable,27508,"with the ""pt"" of selected particles for each event, Define() can be used to create a column that contains the desired array elements as follows:; // h is filled with all the elements of `good_pts`, for each event; auto h = df.Define(""good_pts"", [](const ROOT::RVecF &pt) { return pt[pt > 0]; }); .Histo1D(""good_pts"");; ROOT::VecOps::RVec< float >; ptTPaveText * ptDefinition entrylist_figure1.C:7; And in Python:; h = df.Define(""good_pts"", ""pt[pt > 0]"").Histo1D(""good_pts""); Learn more at ROOT::VecOps::RVec. Transformations: manipulating data. Filters; A filter is created through a call to Filter(f, columnList) or Filter(filterString). In the first overload, f can be a function, a lambda expression, a functor class, or any other callable object. It must return a bool signalling whether the event has passed the selection (true) or not (false). It should perform ""read-only"" operations on the columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column names are used as variable names (e.g. Filter(""x[0] + x[1] > 0"")). This is a convenience feature that comes with a certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event loop. See the paragraph about ""Just-in-time compilation"" below for more information.; RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed in order and the first one returning false causes the event to be discarded and triggers the processing of the next entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for each entry: after the first access it simply serves a cached result.; Named filters and cutflow reports; An optional string parameter name can be passed to the Filter() method to create a named",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:27678,Modifiability,variab,variable,27678,"red array elements as follows:; // h is filled with all the elements of `good_pts`, for each event; auto h = df.Define(""good_pts"", [](const ROOT::RVecF &pt) { return pt[pt > 0]; }); .Histo1D(""good_pts"");; ROOT::VecOps::RVec< float >; ptTPaveText * ptDefinition entrylist_figure1.C:7; And in Python:; h = df.Define(""good_pts"", ""pt[pt > 0]"").Histo1D(""good_pts""); Learn more at ROOT::VecOps::RVec. Transformations: manipulating data. Filters; A filter is created through a call to Filter(f, columnList) or Filter(filterString). In the first overload, f can be a function, a lambda expression, a functor class, or any other callable object. It must return a bool signalling whether the event has passed the selection (true) or not (false). It should perform ""read-only"" operations on the columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column names are used as variable names (e.g. Filter(""x[0] + x[1] > 0"")). This is a convenience feature that comes with a certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event loop. See the paragraph about ""Just-in-time compilation"" below for more information.; RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed in order and the first one returning false causes the event to be discarded and triggers the processing of the next entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for each entry: after the first access it simply serves a cached result.; Named filters and cutflow reports; An optional string parameter name can be passed to the Filter() method to create a named filter. Named filters work as usual, but also keep track of how many entries they accept and reject.; Statistics",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:30973,Modifiability,variab,variable,30973," on the global entry count: Range(10,50) means ""skip the first 10 entries; that reach this node*, let the next 40 entries pass, then stop processing"". If a range node hangs from a filter node, and the range has a begin parameter of 10, that means the range will skip the first 10 entries that pass the preceding filter.; Ranges allow ""early quitting"": if all branches of execution of a functional graph reached their end value of processed entries, the event-loop is immediately interrupted. This is useful for debugging and quick data explorations. Custom columns; Custom columns are created by invoking Define(name, f, columnList). As usual, f can be any callable object (function, lambda expression, functor class...); it takes the values of the columns listed in columnList (a list of strings) as parameters, in the same order as they are listed in columnList. f must return the value that will be assigned to the temporary column.; A new variable is created called name, accessible as if it was contained in the dataset from subsequent transformations/actions.; Use cases include:; caching the results of complex calculations for easy and efficient multiple access; extraction of quantities of interest from complex objects; branch aliasing, i.e. changing the name of a branch. An exception is thrown if the name of the new column/branch is already in use for another branch in the TTree.; It is also possible to specify the quantity to be stored in the new temporary column as a C++ expression with the method Define(name, expression). For example this invocation; df.Define(""pt"", ""sqrt(px*px + py*py)"");; will create a new column called ""pt"" the value of which is calculated starting from the columns px and py. The system builds a just-in-time compiled function starting from the expression after having deduced the list of necessary branches from the names of the variables specified by the user.; Custom columns as function of slot and entry number; It is possible to create custom columns ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:31903,Modifiability,variab,variables,31903,", in the same order as they are listed in columnList. f must return the value that will be assigned to the temporary column.; A new variable is created called name, accessible as if it was contained in the dataset from subsequent transformations/actions.; Use cases include:; caching the results of complex calculations for easy and efficient multiple access; extraction of quantities of interest from complex objects; branch aliasing, i.e. changing the name of a branch. An exception is thrown if the name of the new column/branch is already in use for another branch in the TTree.; It is also possible to specify the quantity to be stored in the new temporary column as a C++ expression with the method Define(name, expression). For example this invocation; df.Define(""pt"", ""sqrt(px*px + py*py)"");; will create a new column called ""pt"" the value of which is calculated starting from the columns px and py. The system builds a just-in-time compiled function starting from the expression after having deduced the list of necessary branches from the names of the variables specified by the user.; Custom columns as function of slot and entry number; It is possible to create custom columns also as a function of the processing slot and entry numbers. The methods that can be invoked are:; DefineSlot(name, f, columnList). In this case the callable f has this signature R(unsigned int, T1, T2, ...): the first parameter is the slot number which ranges from 0 to ROOT::GetThreadPoolSize() - 1.; DefineSlotEntry(name, f, columnList). In this case the callable f has this signature R(unsigned int, ULong64_t,; T1, T2, ...): the first parameter is the slot number while the second one the number of the entry being processed. Actions: getting results. Instant and lazy actions; Actions can be instant or lazy. Instant actions are executed as soon as they are called, while lazy actions are executed whenever the object they return is accessed for the first time. As a rule of thumb, actions with a return va",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:36710,Modifiability,config,configuration,36710," ""title"", 10, 0, 10), ""x""); ; print(sum.GetValue()); h.Draw(); The main goal of this package is to support running any RDataFrame application distributedly. Nonetheless, not all parts of the RDataFrame API currently work with this package. The subset that is currently available is:; AsNumpy; Count; Define; DefinePerSample; Filter; Graph; Histo[1,2,3]D; HistoND; Max; Mean; Min; Profile[1,2,3]D; Redefine; Snapshot; Stats; StdDev; Sum; Systematic variations: Vary and VariationsFor.; Parallel submission of distributed graphs: RunGraphs.; Information about the dataframe: GetColumnNames. with support for more operations coming in the future. Data sources other than TTree and TChain (e.g. CSV, RNTuple) are currently not supported.; NoteThe distributed RDataFrame module requires at least Python version 3.8. Connecting to a Spark cluster; In order to distribute the RDataFrame workload, you can connect to a Spark cluster you have access to through the official Spark API, then hook the connection instance to the distributed RDataFrame object like so:; import pyspark; import ROOT; ; # Create a SparkContext object with the right configuration for your Spark cluster; conf = SparkConf().setAppName(appName).setMaster(master); sc = SparkContext(conf=conf); ; # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; ; # The Spark RDataFrame constructor accepts an optional ""sparkcontext"" parameter; # and it will distribute the application to the connected cluster; df = RDataFrame(""mytree"", ""myfile.root"", sparkcontext = sc); If an instance of SparkContext is not provided, the default behaviour is to create one in the background for you. Connecting to a Dask cluster; Similarly, you can connect to a Dask cluster by creating your own connection object which internally operates with one of the cluster schedulers supported by Dask (more information in the Dask distributed docs):; import ROOT; from dask.distributed import Clien",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:52728,Modifiability,flexible,flexible,52728,"ude creating and running each RDataFrame event loop in a sub-process, or booking all operations for all different RDataFrame computation graphs before the first event loop is triggered, so that the interpreter is invoked only once for all computation graphs:; // assuming df1 and df2 are separate computation graphs, do:; auto h1 = df1.Histo1D(""x"");; auto h2 = df2.Histo1D(""y"");; h1->Draw(); // we just-in-time compile everything needed by df1 and df2 here; h2->Draw(""SAME"");; ; // do not:; auto h1 = df1.Histo1D(""x"");; h1->Draw(); // we just-in-time compile here; auto h2 = df2.Histo1D(""y"");; h2->Draw(""SAME""); // we just-in-time compile again here, as the second Histo1D call is new. More features; Here is a list of the most important features that have been omitted in the ""Crash course"" for brevity. You don't need to read all these to start using RDataFrame, but they are useful to save typing time and runtime. Systematic variations; Starting from ROOT v6.26, RDataFrame provides a flexible syntax to define systematic variations. This is done in two steps: a) register variations for one or more existing columns using Vary() and b) extract variations of normal RDataFrame results using VariationsFor(). In between these steps, no other change to the analysis code is required: the presence of systematic variations for certain columns is automatically propagated through filters, defines and actions, and RDataFrame will take these dependencies into account when producing varied results. VariationsFor() is included in header ROOT/RDFHelpers.hxx. The compiled C++ programs must include this header explicitly, this is not required for ROOT macros.; An example usage of Vary() and VariationsFor() in C++:; auto nominal_hx =; df.Vary(""pt"", ""ROOT::RVecD{pt*0.9f, pt*1.1f}"", {""down"", ""up""}); .Filter(""pt > pt_cut""); .Define(""x"", someFunc, {""pt""}); .Histo1D<float>(""x"");; ; // request the generation of varied results from the nominal_hx; ROOT::RDF::Experimental::RResultMap<TH1D> hx = ROOT::RDF",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:57660,Modifiability,evolve,evolve,57660," similar:; auto df = _df.Vary(""pt"",; ""ROOT::RVecD{pt*0.9, pt*1.1}"",; {""down"", ""up""}); .Vary(""eta"",; [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; {""eta""},; 2);; ; auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; auto all_hs = VariationsFor(nom_h);; all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::VaryRInterface< RDFDetail::RLoopManager, DS_t > Vary(std::string_view colName, F &&expression, const ColumnNames_t &inputColumns, const std::vector< std::string > &variationTags, std::string_view variationName="""")Register systematic variations for a single existing column using custom variation tags.Definition RInterface.hxx:693; Note how we passed the integer 2 instead of a list of variation tags to the second Vary() invocation: this is a shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; NoteCurrently, VariationsFor() and RResultMap are in the ROOT::RDF::Experimental namespace, to indicate that these interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related programming model will be streamlined in future versions. Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to call VariationsFor() on them. These limitations will be lifted in future releases.; See the Vary() method for more information and this tutorial for an example usage of Vary and VariationsFor() in the analysis. RDataFrame objects as function arguments and return values; RDataFrame variables/nodes are relatively cheap to copy and it's possible to both pass them to (or move them into) functions and to return them from functions. However, in general each dataframe node will have a different C++ type, which includes all available compile-time information about what that node does. One way to cope with this complication is to use template functions and/or C++14 auto return types: template <t",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:58198,Modifiability,variab,variables,58198,"iations for a single existing column using custom variation tags.Definition RInterface.hxx:693; Note how we passed the integer 2 instead of a list of variation tags to the second Vary() invocation: this is a shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; NoteCurrently, VariationsFor() and RResultMap are in the ROOT::RDF::Experimental namespace, to indicate that these interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related programming model will be streamlined in future versions. Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to call VariationsFor() on them. These limitations will be lifted in future releases.; See the Vary() method for more information and this tutorial for an example usage of Vary and VariationsFor() in the analysis. RDataFrame objects as function arguments and return values; RDataFrame variables/nodes are relatively cheap to copy and it's possible to both pass them to (or move them into) functions and to return them from functions. However, in general each dataframe node will have a different C++ type, which includes all available compile-time information about what that node does. One way to cope with this complication is to use template functions and/or C++14 auto return types: template <typename RDF>; auto ApplySomeFilters(RDF df); {; return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; }; A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode: // a function that conditionally adds a Range to an RDataFrame node.; RNode MaybeAddRange(RNode df, bool mustAddRange); {; return mustAddRange ? df.Range(1) : df;; }; // use as :; ROOT::RDataFrame df(10);; auto maybeRangedDF = MaybeAddRange(df, true);; The conversion to ROOT::RDF::RNode is cheap, but it w",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:69643,Modifiability,variab,variable,69643," takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user expression with different slot parameters for different concurrent executions (see Special helper columns: rdfentry_ and rdfslot_ for more information on the slot parameter). We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"": // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned int> ns(nSlots, 0);; ; df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; double sumSq = std::accumulate(sumSqs.begin(), sumSqs.end(), 0.); // sum all squares; unsigned int n = std::accumulate(ns.begin(), ns.end(), 0); // sum all counts; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; Notice how we created one double variable for each processing slot and later merged their results via std::accumulate. Dataset joins with friend trees; Vertically concatenating multiple trees that have the same columns (creating a logical dataset with the same columns and more rows) is trivial in RDataFrame: just pass the tree name and a list of file names to RDataFrame's constructor, or create a TChain out of the desired trees and pass that to RDataFrame.; Horizontal concatenations of trees or chains (creating a logical dataset with the same number of rows and the union of the columns of multiple trees) leverages TTree's ""friend"" mechanism.; Simple joins of trees that do not have the same number of rows are also possible with indexed friend trees (see below).; To use friend trees in RDataFrame, set up trees with the appropriate relationships and then instantiate an RDataFrame with the main tree:; TTree main([...]);; TTree friend([...]);; main.AddFriend(&friend, ""myFriend"");; ; RDataFrame df(main)",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:73042,Modifiability,variab,variables,73042,"ead mode. Reading data formats other than ROOT trees; RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; RDataFrame calls into concrete RDataSource implementations to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns and to advance the readers to the desired data entry. Some predefined RDataSources are natively provided by ROOT such as the ROOT::RDF::RCsvDS which allows to read comma separated files: auto tdf = ROOT::RDF::FromCSV(""MuRun2010B.csv"");; auto filteredEvents =; tdf.Filter(""Q1 * Q2 == -1""); .Define(""m"", ""sqrt(pow(E1 + E2, 2) - (pow(px1 + px2, 2) + pow(py1 + py2, 2) + pow(pz1 + pz2, 2)))"");; auto h = filteredEvents.Histo1D(""m"");; h->Draw();; See also FromNumpy (Python-only), FromRNTuple(), FromArrow(), FromSqlite(). Computation graphs (storing and reusing sets of transformations); As we saw, transformed dataframes can be stored as variables and reused multiple times to create modified versions of the dataset. This implicitly defines a computation graph in which several paths of filtering/creation of columns are executed simultaneously, and finally aggregated results are produced.; RDataFrame detects when several actions use the same filter or the same defined column, and only evaluates each filter or defined column once per event, regardless of how many times that result is used down the computation graph. Objects read from each column are built once and never copied, for maximum efficiency. When ""upstream"" filters are not passed, subsequent filters, temporary column expressions and actions are not evaluated, so it might be advisable to put the strictest filters first in the graph. Visualizing the computation graph; It is possible to print the computation graph from any node to obtain a DOT (graphviz) representation either on the standard output or in a file.; Invoking the function ROOT::RDF::",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:75388,Modifiability,variab,variable,75388,") { return b1 <2; }, {""cut1""}); .Define(""y"", []() { return 1; });; ; auto count = df2.Count();; ; // Prints the graph to the rd1.dot file in the current directory; ROOT::RDF::SaveGraph(df, ""./mydot.dot"");; // Prints the graph to standard output; ROOT::RDF::SaveGraph(df);; ROOT::RDF::SaveGraphstd::string SaveGraph(NodeType node)Create a graphviz representation of the dataframe computation graph, return it as a string.Definition RDFHelpers.hxx:120; The generated graph can be rendered using one of the graphviz filters, e.g. dot. For instance, the image below can be generated with the following command: $ dot -Tpng computation_graph.dot -ocomputation_graph.png. Activating RDataFrame execution logs; RDataFrame has experimental support for verbose logging of the event loop runtimes and other interesting related information. It is activated as follows: #include <ROOT/RLogger.hxx>; ; // this increases RDF's verbosity level as long as the `verbosity` variable is in scope; auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel::kInfo);; RLogger.hxx; ROOT::Experimental::RLogScopedVerbosityChange the verbosity level (global or specific to the RLogChannel passed to the constructor) for the ...Definition RLogger.hxx:243; ROOT::Detail::RDF::RDFLogChannelROOT::Experimental::RLogChannel & RDFLogChannel()Definition RDFUtils.cxx:37; ROOT::Experimental::ELogLevel::kInfo@ kInfoInformational messages; used for instance for tracing.; or in Python: import ROOT; ; verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kInfo); More information (e.g. start and end of each multi-thread task) is printed using ELogLevel.kDebug and even more (e.g. a full dump of the generated code that RDataFrame just-in-time-compiles) using ELogLevel.kDebug+10. Creating an RDataFrame from a dataset specification file; RDataFrame can be created using a dataset specification JSON file:; impor",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:86525,Modifiability,inherit,inherited,86525,"taFrame (std::string_view treeName, ::TDirectory *dirPtr, const ColumnNames_t &defaultColumns={});  ;  RDataFrame (std::string_view treename, const std::vector< std::string > &filenames, const ColumnNames_t &defaultColumns={});  Build the dataframe. ;  ;  RDataFrame (std::string_view treename, std::initializer_list< std::string > filenames, const ColumnNames_t &defaultColumns={});  ;  RDataFrame (std::string_view treeName, std::string_view filenameglob, const ColumnNames_t &defaultColumns={});  Build the dataframe. ;  ;  RDataFrame (std::unique_ptr< ROOT::RDF::RDataSource >, const ColumnNames_t &defaultColumns={});  Build dataframe associated to data source. ;  ;  RDataFrame (TTree &tree, const ColumnNames_t &defaultColumns={});  Build the dataframe. ;  ;  RDataFrame (ULong64_t numEntries);  Build a dataframe that generates numEntries entries. ;  ;  ~RDataFrame ();  ; RDataFrame & operator= (const RDataFrame &)=default;  ; RDataFrame & operator= (RDataFrame &&)=default;  ;  Public Member Functions inherited from ROOT::RDF::RInterface< RDFDetail::RLoopManager >;  RInterface (const RInterface &)=default;  Copy-ctor for RInterface. ;  ;  RInterface (const std::shared_ptr< RLoopManager > &proxied);  Build a RInterface from a RLoopManager. ;  ;  RInterface (RInterface &&)=default;  Move-ctor for RInterface. ;  ; RResultPtr< U > Aggregate (AccFun aggregator, MergeFun merger, std::string_view columnName, const U &aggIdentity);  Execute a user-defined accumulation operation on the processed column values in each processing slot. ;  ; RResultPtr< U > Aggregate (AccFun aggregator, MergeFun merger, std::string_view columnName="""");  Execute a user-defined accumulation operation on the processed column values in each processing slot. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > Alias (std::string_view alias, std::string_view columnName);  Allow to refer to a column with a different name. ;  ; RResultPtr< typename std::decay_t< Helper >::Result_t > Book (Helper &&helper, const",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:102178,Modifiability,inherit,inherited,102178,". ;  ; RInterface< RDFDetail::RLoopManager, DS_t > Vary (std::string_view colName, F &&expression, const ColumnNames_t &inputColumns, std::size_t nVariations, std::string_view variationName="""");  Register systematic variations for a single existing column using auto-generated variation tags. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > Vary (std::string_view colName, std::string_view expression, const std::vector< std::string > &variationTags, std::string_view variationName="""");  Register systematic variations for a single existing column using custom variation tags. ;  ; RInterface< RDFDetail::RLoopManager, DS_t > Vary (std::string_view colName, std::string_view expression, std::size_t nVariations, std::string_view variationName="""");  Register systematic variations for a single existing column using auto-generated variation tags. ;  ;  Public Member Functions inherited from ROOT::RDF::RInterfaceBase;  RInterfaceBase (RDFDetail::RLoopManager &lm, const RDFInternal::RColumnRegister &colRegister);  ;  RInterfaceBase (std::shared_ptr< RDFDetail::RLoopManager > lm);  ; RDFDescription Describe ();  Return information about the dataframe. ;  ; ColumnNames_t GetColumnNames ();  Returns the names of the available columns. ;  ; std::string GetColumnType (std::string_view column);  Return the type of a given column as a string. ;  ; ColumnNames_t GetDefinedColumnNames ();  Returns the names of the defined columns. ;  ; unsigned int GetNFiles ();  ; unsigned int GetNRuns () const;  Gets the number of event loops run. ;  ; unsigned int GetNSlots () const;  Gets the number of data processing slots. ;  ; RVariationsDescription GetVariations () const;  Return a descriptor for the systematic variations registered in this branch of the computation graph. ;  ; bool HasColumn (std::string_view columnName);  Checks if a column is present in the dataset. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::RDF::RInterface< RDFDetail::RLoopManager >;  R",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:103234,Modifiability,inherit,inherited,103234,"ribe ();  Return information about the dataframe. ;  ; ColumnNames_t GetColumnNames ();  Returns the names of the available columns. ;  ; std::string GetColumnType (std::string_view column);  Return the type of a given column as a string. ;  ; ColumnNames_t GetDefinedColumnNames ();  Returns the names of the defined columns. ;  ; unsigned int GetNFiles ();  ; unsigned int GetNRuns () const;  Gets the number of event loops run. ;  ; unsigned int GetNSlots () const;  Gets the number of data processing slots. ;  ; RVariationsDescription GetVariations () const;  Return a descriptor for the systematic variations registered in this branch of the computation graph. ;  ; bool HasColumn (std::string_view columnName);  Checks if a column is present in the dataset. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::RDF::RInterface< RDFDetail::RLoopManager >;  RInterface (const std::shared_ptr< RDFDetail::RLoopManager > &proxied, RLoopManager &lm, const RDFInternal::RColumnRegister &colRegister);  ; const std::shared_ptr< RDFDetail::RLoopManager > & GetProxiedPtr () const;  ;  Protected Member Functions inherited from ROOT::RDF::RInterfaceBase; void AddDefaultColumns ();  ; template<typename... ColumnTypes> ; void CheckAndFillDSColumns (ColumnNames_t validCols, TTraits::TypeList< ColumnTypes... > typeList);  ; void CheckIMTDisabled (std::string_view callerName);  ; template<typename ActionTag , typename... ColTypes, typename ActionResultType , typename RDFNode , typename HelperArgType = ActionResultType, std::enable_if_t< RDFInternal::RNeedJitting< ColTypes... >::value, int > = 0> ; RResultPtr< ActionResultType > CreateAction (const ColumnNames_t &columns, const std::shared_ptr< ActionResultType > &r, const std::shared_ptr< HelperArgType > &helperArg, const std::shared_ptr< RDFNode > &proxiedPtr, const int nColumns=-1);  Create RAction object, return RResultPtr for the action Overload for the case in which one or more column types were not specif",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:103548,Modifiability,inherit,inherited,103548,"ribe ();  Return information about the dataframe. ;  ; ColumnNames_t GetColumnNames ();  Returns the names of the available columns. ;  ; std::string GetColumnType (std::string_view column);  Return the type of a given column as a string. ;  ; ColumnNames_t GetDefinedColumnNames ();  Returns the names of the defined columns. ;  ; unsigned int GetNFiles ();  ; unsigned int GetNRuns () const;  Gets the number of event loops run. ;  ; unsigned int GetNSlots () const;  Gets the number of data processing slots. ;  ; RVariationsDescription GetVariations () const;  Return a descriptor for the systematic variations registered in this branch of the computation graph. ;  ; bool HasColumn (std::string_view columnName);  Checks if a column is present in the dataset. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::RDF::RInterface< RDFDetail::RLoopManager >;  RInterface (const std::shared_ptr< RDFDetail::RLoopManager > &proxied, RLoopManager &lm, const RDFInternal::RColumnRegister &colRegister);  ; const std::shared_ptr< RDFDetail::RLoopManager > & GetProxiedPtr () const;  ;  Protected Member Functions inherited from ROOT::RDF::RInterfaceBase; void AddDefaultColumns ();  ; template<typename... ColumnTypes> ; void CheckAndFillDSColumns (ColumnNames_t validCols, TTraits::TypeList< ColumnTypes... > typeList);  ; void CheckIMTDisabled (std::string_view callerName);  ; template<typename ActionTag , typename... ColTypes, typename ActionResultType , typename RDFNode , typename HelperArgType = ActionResultType, std::enable_if_t< RDFInternal::RNeedJitting< ColTypes... >::value, int > = 0> ; RResultPtr< ActionResultType > CreateAction (const ColumnNames_t &columns, const std::shared_ptr< ActionResultType > &r, const std::shared_ptr< HelperArgType > &helperArg, const std::shared_ptr< RDFNode > &proxiedPtr, const int nColumns=-1);  Create RAction object, return RResultPtr for the action Overload for the case in which one or more column types were not specif",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:105507,Modifiability,inherit,inherited,105507,"ction Overload for the case in which one or more column types were not specified (RTTI + jitting). ;  ; template<typename ActionTag , typename... ColTypes, typename ActionResultType , typename RDFNode , typename HelperArgType = ActionResultType, std::enable_if_t<!RDFInternal::RNeedJitting< ColTypes... >::value, int > = 0> ; RResultPtr< ActionResultType > CreateAction (const ColumnNames_t &columns, const std::shared_ptr< ActionResultType > &r, const std::shared_ptr< HelperArgType > &helperArg, const std::shared_ptr< RDFNode > &proxiedPtr, const int=-1);  Create RAction object, return RResultPtr for the action Overload for the case in which all column types were specified (no jitting). ;  ; std::string DescribeDataset () const;  ; ColumnNames_t GetColumnTypeNamesList (const ColumnNames_t &columnList);  ; RDFDetail::RLoopManager * GetLoopManager () const;  ; ColumnNames_t GetValidatedColumnNames (const unsigned int nColumns, const ColumnNames_t &columns);  ; template<typename RetType > ; void SanityChecksForVary (const std::vector< std::string > &colNames, const std::vector< std::string > &variationTags, std::string_view variationName);  ;  Protected Attributes inherited from ROOT::RDF::RInterfaceBase; RDFInternal::RColumnRegister fColRegister;  Contains the columns defined up to this node. ;  ; RDataSource * fDataSource = nullptr;  Non-owning pointer to a data-source object. Null if no data-source. RLoopManager has ownership of the object. ;  ; std::shared_ptr< ROOT::Detail::RDF::RLoopManager > fLoopManager;  < The RLoopManager at the root of this computation graph. Never null. ;  . #include <ROOT/RDataFrame.hxx>. Inheritance diagram for ROOT::RDataFrame:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ColumnNames_t. using ROOT::RDataFrame::ColumnNames_t = ROOT::RDF::ColumnNames_t. Definition at line 43 of file RDataFrame.hxx. Constructor & Destructor Documentation. ◆ RDataFrame() [1/10].",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:411,Performance,multi-thread,multi-threading,411,". ROOT: ROOT::RDataFrame Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::RDataFrame Class ReferenceDataframe. ; ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. ; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines completely transparently.; Skip to the class reference or keep reading for the user guide.; In a nutshell: ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; myHisto->Draw(); // Event loop is run here, upon first access to a result; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and ret",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:1213,Performance,multi-thread,multi-threading,1213,"rs ; ROOT::RDataFrame Class ReferenceDataframe. ; ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. ; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines completely transparently.; Skip to the class reference or keep reading for the user guide.; In a nutshell: ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; myHisto->Draw(); // Event loop is run here, upon first access to a result; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and return values; Storing RDataFrame objects in collections; Executing callbacks every N events; Default column lists; Special helper columns: `rdfentry_` and `rdfslot_`; Just-in-time compilation: column type i",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:1549,Performance,multi-thread,multi-thread,1549,"ines completely transparently.; Skip to the class reference or keep reading for the user guide.; In a nutshell: ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; myHisto->Draw(); // Event loop is run here, upon first access to a result; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and return values; Storing RDataFrame objects in collections; Executing callbacks every N events; Default column lists; Special helper columns: `rdfentry_` and `rdfslot_`; Just-in-time compilation: column type inference and explicit declaration of column types; User-defined custom actions; Dataset joins with friend trees; Reading data formats other than ROOT trees; Computation graphs (storing and reusing sets of transformations); Visualizing the computation graph; Activating RDataFrame execution logs; Creating an RDataFrame fr",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:2680,Performance,perform,performed,2680,"orials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and return values; Storing RDataFrame objects in collections; Executing callbacks every N events; Default column lists; Special helper columns: `rdfentry_` and `rdfslot_`; Just-in-time compilation: column type inference and explicit declaration of column types; User-defined custom actions; Dataset joins with friend trees; Reading data formats other than ROOT trees; Computation graphs (storing and reusing sets of transformations); Visualizing the computation graph; Activating RDataFrame execution logs; Creating an RDataFrame from a dataset specification file; Adding a progress bar. Efficient analysis in Python; Class reference. Cheat sheet; These are the operations which can be performed with RDataFrame. Transformations; Transformations are a way to manipulate the data. Transformation Description . Alias() Introduce an alias for a particular column name. . Define() Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the pts of ""good"" muons). . DefinePerSample() Define a new column that is updated when the input sample changes, e.g. when switching tree being processed in a chain. . DefineSlot() Same as Define(), but the user-defined function must take an extra unsigned int slot as its first parameter. slot will take a different value, 0 to nThreads - 1, for each thread of execution. This is meant as a helper in writing thread-safe Define() transformation when using RDataFrame after ROOT::EnableImplicitMT(). DefineSlot() works just as well with single-thread execution: in that case slot will always be 0. . DefineSlotEntry() Same ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:3860,Performance,multi-thread,multi-threaded,3860,"e. . Define() Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the pts of ""good"" muons). . DefinePerSample() Define a new column that is updated when the input sample changes, e.g. when switching tree being processed in a chain. . DefineSlot() Same as Define(), but the user-defined function must take an extra unsigned int slot as its first parameter. slot will take a different value, 0 to nThreads - 1, for each thread of execution. This is meant as a helper in writing thread-safe Define() transformation when using RDataFrame after ROOT::EnableImplicitMT(). DefineSlot() works just as well with single-thread execution: in that case slot will always be 0. . DefineSlotEntry() Same as DefineSlot(), but the entry number is passed in addition to the slot number. This is meant as a helper in case the expression depends on the entry number. For details about entry numbers in multi-threaded runs, see here. . Filter() Filter rows based on user-defined conditions. . Range() Filter rows based on entry number (single-thread only). . Redefine() Overwrite the value and/or type of an existing column. See Define() for more information. . RedefineSlot() Overwrite the value and/or type of an existing column. See DefineSlot() for more information. . RedefineSlotEntry() Overwrite the value and/or type of an existing column. See DefineSlotEntry() for more information. . Vary() Register systematic variations for an existing column. Varied results are then extracted via VariationsFor(). . Actions; Actions aggregate data into a result. Each one is described in more detail in the reference guide.; In the following, whenever we say an action ""returns"" something, we always mean it returns a smart pointer to it. Actions only act on events that pass all preceding filters.; Lazy actions only trigger the event loop when one of the results is accessed for the first time, making",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:5227,Performance,cache,cached,5227,"lotEntry() Overwrite the value and/or type of an existing column. See DefineSlotEntry() for more information. . Vary() Register systematic variations for an existing column. Varied results are then extracted via VariationsFor(). . Actions; Actions aggregate data into a result. Each one is described in more detail in the reference guide.; In the following, whenever we say an action ""returns"" something, we always mean it returns a smart pointer to it. Actions only act on events that pass all preceding filters.; Lazy actions only trigger the event loop when one of the results is accessed for the first time, making it easy to produce many different results in one event loop. Instant actions trigger the event loop instantly. Lazy action Description . Aggregate() Execute a user-defined accumulation operation on the processed column values. . Book() Book execution of a custom action using a user-defined helper object. . Cache() Cache column values in memory. Custom columns can be cached as well, filtered entries are not cached. Users can specify which columns to save (default is all). . Count() Return the number of events processed. Useful e.g. to get a quick count of the number of events passing a Filter. . Display() Provides a printable representation of the dataset contents. The method returns a ROOT::RDF::RDisplay() instance which can print a tabular representation of the data or return it as a string. . Fill() Fill a user-defined object with the values of the specified columns, as if by calling Obj.Fill(col1, col2, ...). . Graph() Fills a TGraph with the two columns provided. If multi-threading is enabled, the order of the points may not be the one expected, it is therefore suggested to sort if before drawing. . GraphAsymmErrors() Fills a TGraphAsymmErrors. If multi-threading is enabled, the order of the points may not be the one expected, it is therefore suggested to sort if before drawing. . Histo1D(), Histo2D(), Histo3D() Fill a one-, two-, three-dimensional histogr",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:5268,Performance,cache,cached,5268,"lotEntry() Overwrite the value and/or type of an existing column. See DefineSlotEntry() for more information. . Vary() Register systematic variations for an existing column. Varied results are then extracted via VariationsFor(). . Actions; Actions aggregate data into a result. Each one is described in more detail in the reference guide.; In the following, whenever we say an action ""returns"" something, we always mean it returns a smart pointer to it. Actions only act on events that pass all preceding filters.; Lazy actions only trigger the event loop when one of the results is accessed for the first time, making it easy to produce many different results in one event loop. Instant actions trigger the event loop instantly. Lazy action Description . Aggregate() Execute a user-defined accumulation operation on the processed column values. . Book() Book execution of a custom action using a user-defined helper object. . Cache() Cache column values in memory. Custom columns can be cached as well, filtered entries are not cached. Users can specify which columns to save (default is all). . Count() Return the number of events processed. Useful e.g. to get a quick count of the number of events passing a Filter. . Display() Provides a printable representation of the dataset contents. The method returns a ROOT::RDF::RDisplay() instance which can print a tabular representation of the data or return it as a string. . Fill() Fill a user-defined object with the values of the specified columns, as if by calling Obj.Fill(col1, col2, ...). . Graph() Fills a TGraph with the two columns provided. If multi-threading is enabled, the order of the points may not be the one expected, it is therefore suggested to sort if before drawing. . GraphAsymmErrors() Fills a TGraphAsymmErrors. If multi-threading is enabled, the order of the points may not be the one expected, it is therefore suggested to sort if before drawing. . Histo1D(), Histo2D(), Histo3D() Fill a one-, two-, three-dimensional histogr",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:5843,Performance,multi-thread,multi-threading,5843,"event loop. Instant actions trigger the event loop instantly. Lazy action Description . Aggregate() Execute a user-defined accumulation operation on the processed column values. . Book() Book execution of a custom action using a user-defined helper object. . Cache() Cache column values in memory. Custom columns can be cached as well, filtered entries are not cached. Users can specify which columns to save (default is all). . Count() Return the number of events processed. Useful e.g. to get a quick count of the number of events passing a Filter. . Display() Provides a printable representation of the dataset contents. The method returns a ROOT::RDF::RDisplay() instance which can print a tabular representation of the data or return it as a string. . Fill() Fill a user-defined object with the values of the specified columns, as if by calling Obj.Fill(col1, col2, ...). . Graph() Fills a TGraph with the two columns provided. If multi-threading is enabled, the order of the points may not be the one expected, it is therefore suggested to sort if before drawing. . GraphAsymmErrors() Fills a TGraphAsymmErrors. If multi-threading is enabled, the order of the points may not be the one expected, it is therefore suggested to sort if before drawing. . Histo1D(), Histo2D(), Histo3D() Fill a one-, two-, three-dimensional histogram with the processed column values. . HistoND() Fill an N-dimensional histogram with the processed column values. . Max() Return the maximum of processed column values. If the type of the column is inferred, the return type is double, the type of the column otherwise. . Mean() Return the mean of processed column values. . Min() Return the minimum of processed column values. If the type of the column is inferred, the return type is double, the type of the column otherwise. . Profile1D(), Profile2D() Fill a one- or two-dimensional profile with the column values that passed all filters. . Reduce() Reduce (e.g. sum, merge) entries using the function (lambda, func",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:6028,Performance,multi-thread,multi-threading,6028,") Book execution of a custom action using a user-defined helper object. . Cache() Cache column values in memory. Custom columns can be cached as well, filtered entries are not cached. Users can specify which columns to save (default is all). . Count() Return the number of events processed. Useful e.g. to get a quick count of the number of events passing a Filter. . Display() Provides a printable representation of the dataset contents. The method returns a ROOT::RDF::RDisplay() instance which can print a tabular representation of the data or return it as a string. . Fill() Fill a user-defined object with the values of the specified columns, as if by calling Obj.Fill(col1, col2, ...). . Graph() Fills a TGraph with the two columns provided. If multi-threading is enabled, the order of the points may not be the one expected, it is therefore suggested to sort if before drawing. . GraphAsymmErrors() Fills a TGraphAsymmErrors. If multi-threading is enabled, the order of the points may not be the one expected, it is therefore suggested to sort if before drawing. . Histo1D(), Histo2D(), Histo3D() Fill a one-, two-, three-dimensional histogram with the processed column values. . HistoND() Fill an N-dimensional histogram with the processed column values. . Max() Return the maximum of processed column values. If the type of the column is inferred, the return type is double, the type of the column otherwise. . Mean() Return the mean of processed column values. . Min() Return the minimum of processed column values. If the type of the column is inferred, the return type is double, the type of the column otherwise. . Profile1D(), Profile2D() Fill a one- or two-dimensional profile with the column values that passed all filters. . Reduce() Reduce (e.g. sum, merge) entries using the function (lambda, functor...) passed as argument. The function must have signature T(T,T) where T is the type of the column. Return the final result of the reduction operation. An optional parameter allows i",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:8073,Performance,multi-thread,multi-threading,8073,"he reduction operation. An optional parameter allows initialization of the result object to non-default values. . Report() Obtain statistics on how many entries have been accepted and rejected by the filters. See the section on named filters for a more detailed explanation. The method returns a ROOT::RDF::RCutFlowReport instance which can be queried programmatically to get information about the effects of the individual cuts. . Stats() Return a TStatistic object filled with the input columns. . StdDev() Return the unbiased standard deviation of the processed column values. . Sum() Return the sum of the values in the column. If the type of the column is inferred, the return type is double, the type of the column otherwise. . Take() Extract a column from the dataset as a collection of values, e.g. a std::vector<float> for a column of type float. . Instant action Description . Foreach() Execute a user-defined function on each entry. Users are responsible for the thread-safety of this callable when executing with implicit multi-threading enabled. . ForeachSlot() Same as Foreach(), but the user-defined function must take an extra unsigned int slot as its first parameter. slot will take a different value, 0 to nThreads - 1, for each thread of execution. This is meant as a helper in writing thread-safe Foreach() actions when using RDataFrame after ROOT::EnableImplicitMT(). ForeachSlot() works just as well with single-thread execution: in that case slot will always be 0. . Snapshot() Write the processed dataset to disk, in a new TTree and TFile. Custom columns can be saved as well, filtered entries are not saved. Users can specify which columns to save (default is all). Snapshot, by default, overwrites the output file if it already exists. Snapshot() can be made lazy setting the appropriate flag in the snapshot options. . Queries; These operations do not modify the dataframe or book computations but simply return information on the RDataFrame object. Operation Description . ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:9697,Performance,concurren,concurrency,9697,"to save (default is all). Snapshot, by default, overwrites the output file if it already exists. Snapshot() can be made lazy setting the appropriate flag in the snapshot options. . Queries; These operations do not modify the dataframe or book computations but simply return information on the RDataFrame object. Operation Description . Describe() Get useful information describing the dataframe, e.g. columns and their types. . GetColumnNames() Get the names of all the available columns of the dataset. . GetColumnType() Return the type of a given column as a string. . GetColumnTypeNamesList() Return the list of type names of columns in the dataset. . GetDefinedColumnNames() Get the names of all the defined columns. . GetFilterNames() Return the names of all filters in the computation graph. . GetNRuns() Return the number of event loops run by this RDataFrame instance so far. . GetNSlots() Return the number of processing slots that RDataFrame will use during the event loop (i.e. the concurrency level). . SaveGraph() Store the computation graph of an RDataFrame in DOT format (graphviz) for easy inspection. See the relevant section for details. . Introduction; Users define their analysis as a sequence of operations to be performed on the dataframe object; the framework takes care of the management of the loop over entries as well as low-level details such as I/O and parallelization. RDataFrame provides methods to perform most common operations required by ROOT analyses; at the same time, users can just as easily specify custom code that will be executed in the event loop.; RDataFrame is built with a modular and flexible workflow in mind, summarised as follows:. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, CSV files, SQLite files, RNTuples, and it can be extended to custom data formats. From Python, NumPy arrays can be imported into RDataFrame as well.; Transform the dataframe by:; Applying filters. This selects only spe",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:9938,Performance,perform,performed,9938,"ormation on the RDataFrame object. Operation Description . Describe() Get useful information describing the dataframe, e.g. columns and their types. . GetColumnNames() Get the names of all the available columns of the dataset. . GetColumnType() Return the type of a given column as a string. . GetColumnTypeNamesList() Return the list of type names of columns in the dataset. . GetDefinedColumnNames() Get the names of all the defined columns. . GetFilterNames() Return the names of all filters in the computation graph. . GetNRuns() Return the number of event loops run by this RDataFrame instance so far. . GetNSlots() Return the number of processing slots that RDataFrame will use during the event loop (i.e. the concurrency level). . SaveGraph() Store the computation graph of an RDataFrame in DOT format (graphviz) for easy inspection. See the relevant section for details. . Introduction; Users define their analysis as a sequence of operations to be performed on the dataframe object; the framework takes care of the management of the loop over entries as well as low-level details such as I/O and parallelization. RDataFrame provides methods to perform most common operations required by ROOT analyses; at the same time, users can just as easily specify custom code that will be executed in the event loop.; RDataFrame is built with a modular and flexible workflow in mind, summarised as follows:. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, CSV files, SQLite files, RNTuples, and it can be extended to custom data formats. From Python, NumPy arrays can be imported into RDataFrame as well.; Transform the dataframe by:; Applying filters. This selects only specific rows of the dataset.; Creating custom columns. Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset. Produce results. Actions are used to aggregate data into results. Most actions are lazy, i.e. they are",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:10134,Performance,perform,perform,10134," dataset. . GetColumnType() Return the type of a given column as a string. . GetColumnTypeNamesList() Return the list of type names of columns in the dataset. . GetDefinedColumnNames() Get the names of all the defined columns. . GetFilterNames() Return the names of all filters in the computation graph. . GetNRuns() Return the number of event loops run by this RDataFrame instance so far. . GetNSlots() Return the number of processing slots that RDataFrame will use during the event loop (i.e. the concurrency level). . SaveGraph() Store the computation graph of an RDataFrame in DOT format (graphviz) for easy inspection. See the relevant section for details. . Introduction; Users define their analysis as a sequence of operations to be performed on the dataframe object; the framework takes care of the management of the loop over entries as well as low-level details such as I/O and parallelization. RDataFrame provides methods to perform most common operations required by ROOT analyses; at the same time, users can just as easily specify custom code that will be executed in the event loop.; RDataFrame is built with a modular and flexible workflow in mind, summarised as follows:. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, CSV files, SQLite files, RNTuples, and it can be extended to custom data formats. From Python, NumPy arrays can be imported into RDataFrame as well.; Transform the dataframe by:; Applying filters. This selects only specific rows of the dataset.; Creating custom columns. Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset. Produce results. Actions are used to aggregate data into results. Most actions are lazy, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time. Make sure to book all transformations and actions before you access the contents of any of the ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:10840,Performance,perform,performed,10840,"ion. See the relevant section for details. . Introduction; Users define their analysis as a sequence of operations to be performed on the dataframe object; the framework takes care of the management of the loop over entries as well as low-level details such as I/O and parallelization. RDataFrame provides methods to perform most common operations required by ROOT analyses; at the same time, users can just as easily specify custom code that will be executed in the event loop.; RDataFrame is built with a modular and flexible workflow in mind, summarised as follows:. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, CSV files, SQLite files, RNTuples, and it can be extended to custom data formats. From Python, NumPy arrays can be imported into RDataFrame as well.; Transform the dataframe by:; Applying filters. This selects only specific rows of the dataset.; Creating custom columns. Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset. Produce results. Actions are used to aggregate data into results. Most actions are lazy, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time. Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them.; The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the crash course to discover more idiomatic and flexible ways to express analyses with RDataFrame. . TTreeReader ROOT::RDataFrame . TTreeReader reader(""myTree"", file);; TTreeReaderValue<A_t> a(reader, ""A"");; TTreeReaderValue<B_t> b(reader, ""B"");; TTreeReaderValue<C_t> c(reader, ""C"");; while(reader.Next()) {; if(IsGoodEvent(*a, *b, *c)); DoStuff(*a, *b, *c);; }; b#define b(i)Defi",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:18113,Performance,perform,perform,18113," or an array), the histogram is filled with all vector elements for each event.; You can use the objects returned by actions as if they were pointers to the desired results. There are many other possible actions, and all their results are wrapped in smart pointers; we'll see why in a minute. Applying a filter; Let's say we want to cut over the value of branch ""MET"" and count how many events pass this cut. This is one way to do it: RDataFrame d(""myTree"", ""file.root"");; auto c = d.Filter(""MET > 4."").Count(); // computations booked, not run; std::cout << *c << std::endl; // computations run here, upon first access to the result; The filter string (which must contain a valid C++ expression) is applied to the specified columns for each event; the name and types of the columns are inferred automatically. The string expression is required to return a bool which signals whether the event passes the filter (true) or not (false).; You can think of your data as ""flowing"" through the chain of calls, being transformed, filtered and finally used to perform actions. Multiple Filter() calls can be chained one after another.; Using string filters is nice for simple things, but they are limited to specifying the equivalent of a single return statement or the body of a lambda, so it's cumbersome to use strings with more complex filters. They also add a small runtime overhead, as ROOT needs to just-in-time compile the string into C++ code. When more freedom is required or runtime performance is very important, a C++ callable can be specified instead (a lambda in the following snippet, but it can be any kind of function or even a functor class), together with a list of column names. This snippet is analogous to the one above: RDataFrame d(""myTree"", ""file.root"");; auto metCut = [](double x) { return x > 4.; }; // a C++11 lambda function checking ""x > 4""; auto c = d.Filter(metCut, {""MET""}).Count();; std::cout << *c << std::endl;; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::CountRRes",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:18547,Performance,perform,performance,18547,"d::endl; // computations run here, upon first access to the result; The filter string (which must contain a valid C++ expression) is applied to the specified columns for each event; the name and types of the columns are inferred automatically. The string expression is required to return a bool which signals whether the event passes the filter (true) or not (false).; You can think of your data as ""flowing"" through the chain of calls, being transformed, filtered and finally used to perform actions. Multiple Filter() calls can be chained one after another.; Using string filters is nice for simple things, but they are limited to specifying the equivalent of a single return statement or the body of a lambda, so it's cumbersome to use strings with more complex filters. They also add a small runtime overhead, as ROOT needs to just-in-time compile the string into C++ code. When more freedom is required or runtime performance is very important, a C++ callable can be specified instead (a lambda in the following snippet, but it can be any kind of function or even a functor class), together with a list of column names. This snippet is analogous to the one above: RDataFrame d(""myTree"", ""file.root"");; auto metCut = [](double x) { return x > 4.; }; // a C++11 lambda function checking ""x > 4""; auto c = d.Filter(metCut, {""MET""}).Count();; std::cout << *c << std::endl;; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::CountRResultPtr< ULong64_t > Count()Return the number of entries processed (lazy action).Definition RInterface.hxx:1560; xDouble_t x[n]Definition legend1.C:17; An example of a more complex filter expressed as a string containing C++ code is shown below; RDataFrame d(""myTree"", ""file.root"");; auto df = d.Define(""p"", ""std::array<double, 4> p{px, py, pz}; return p;""); .Filter(""double p2 = 0.0; for (auto&& x : p) p2 += x*x; return sqrt(p2) < 10.0;"");; The code snippet above defines a column p that is a fixed-size array using the component column names and then filters on its",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:24388,Performance,multi-thread,multi-threading,24388,"e with a define. The end point of a branch is always an action. Running on a range of entries; It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act exclusively on the entries passing the filter – it will not even count the other entries! The same goes for a Range() hanging from another Range(). Here are some commented examples: RDataFrame d(""myTree"", ""file.root"");; // Here we store a dataframe that loops over only the first 30 entries in a variable; auto d30 = d.Range(30);; // This is how you pick all entries from 15 onwards; auto d15on = d.Range(15, 0);; // We can specify a stride too, in this case we pick an event every 3; auto d15each3 = d.Range(0, 15, 3);; Note that ranges are not available when multi-threading is enabled. More information on ranges is available here. Executing multiple actions in the same event loop; As a final example let us apply two different cuts on branch ""MET"" and fill two different histograms with the ""pt_v"" of the filtered events. By now, you should be able to easily understand what is happening: RDataFrame d(""treeName"", ""file.root"");; auto h1 = d.Filter(""MET > 10"").Histo1D(""pt_v"");; auto h2 = d.Histo1D(""pt_v"");; h1->Draw(); // event loop is run once here; h2->Draw(""SAME""); // no need to run the event loop again; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; h1TH1F * h1Definition legend1.C:5; RDataFrame executes all above actions by running the event-loop only once. The trick is that actions are not executed at the moment they are called, but they are lazy, i.e. delayed until the moment one of their results is accessed through the smart pointer. At that time, the event loop is ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:27384,Performance,perform,perform,27384,"elements in a vectorised fashion, similarly to Python's NumPy arrays.; For example, to fill a histogram with the ""pt"" of selected particles for each event, Define() can be used to create a column that contains the desired array elements as follows:; // h is filled with all the elements of `good_pts`, for each event; auto h = df.Define(""good_pts"", [](const ROOT::RVecF &pt) { return pt[pt > 0]; }); .Histo1D(""good_pts"");; ROOT::VecOps::RVec< float >; ptTPaveText * ptDefinition entrylist_figure1.C:7; And in Python:; h = df.Define(""good_pts"", ""pt[pt > 0]"").Histo1D(""good_pts""); Learn more at ROOT::VecOps::RVec. Transformations: manipulating data. Filters; A filter is created through a call to Filter(f, columnList) or Filter(filterString). In the first overload, f can be a function, a lambda expression, a functor class, or any other callable object. It must return a bool signalling whether the event has passed the selection (true) or not (false). It should perform ""read-only"" operations on the columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column names are used as variable names (e.g. Filter(""x[0] + x[1] > 0"")). This is a convenience feature that comes with a certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event loop. See the paragraph about ""Just-in-time compilation"" below for more information.; RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed in order and the first one returning false causes the event to be discarded and triggers the processing of the next entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for each entry: after the first access it simply serves a cached result.; Named filters and ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:27554,Performance,multi-thread,multi-threading,27554,"with the ""pt"" of selected particles for each event, Define() can be used to create a column that contains the desired array elements as follows:; // h is filled with all the elements of `good_pts`, for each event; auto h = df.Define(""good_pts"", [](const ROOT::RVecF &pt) { return pt[pt > 0]; }); .Histo1D(""good_pts"");; ROOT::VecOps::RVec< float >; ptTPaveText * ptDefinition entrylist_figure1.C:7; And in Python:; h = df.Define(""good_pts"", ""pt[pt > 0]"").Histo1D(""good_pts""); Learn more at ROOT::VecOps::RVec. Transformations: manipulating data. Filters; A filter is created through a call to Filter(f, columnList) or Filter(filterString). In the first overload, f can be a function, a lambda expression, a functor class, or any other callable object. It must return a bool signalling whether the event has passed the selection (true) or not (false). It should perform ""read-only"" operations on the columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column names are used as variable names (e.g. Filter(""x[0] + x[1] > 0"")). This is a convenience feature that comes with a certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event loop. See the paragraph about ""Just-in-time compilation"" below for more information.; RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed in order and the first one returning false causes the event to be discarded and triggers the processing of the next entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for each entry: after the first access it simply serves a cached result.; Named filters and cutflow reports; An optional string parameter name can be passed to the Filter() method to create a named",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:28386,Performance,cache,cached,28386,"hether the event has passed the selection (true) or not (false). It should perform ""read-only"" operations on the columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column names are used as variable names (e.g. Filter(""x[0] + x[1] > 0"")). This is a convenience feature that comes with a certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event loop. See the paragraph about ""Just-in-time compilation"" below for more information.; RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed in order and the first one returning false causes the event to be discarded and triggers the processing of the next entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for each entry: after the first access it simply serves a cached result.; Named filters and cutflow reports; An optional string parameter name can be passed to the Filter() method to create a named filter. Named filters work as usual, but also keep track of how many entries they accept and reject.; Statistics are retrieved through a call to the Report() method:. when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all named filters declared up to that point; when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative all named filters in the section of the chain between the main RDataFrame and that node (included). Stats are stored in the same order as named filters have been added to the graph, and refer to the latest event-loop that has been run using the relevant RDataFrame. Ranges; When RDataFrame is not being used in a mult",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:29305,Performance,multi-thread,multi-thread,29305,"r is not executed multiple times for each entry: after the first access it simply serves a cached result.; Named filters and cutflow reports; An optional string parameter name can be passed to the Filter() method to create a named filter. Named filters work as usual, but also keep track of how many entries they accept and reject.; Statistics are retrieved through a call to the Report() method:. when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all named filters declared up to that point; when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative all named filters in the section of the chain between the main RDataFrame and that node (included). Stats are stored in the same order as named filters have been added to the graph, and refer to the latest event-loop that has been run using the relevant RDataFrame. Ranges; When RDataFrame is not being used in a multi-thread environment (i.e. no call to EnableImplicitMT() was made), Range() transformations are available. These act very much like filters but instead of basing their decision on a filter expression, they rely on begin,end and stride parameters. begin: initial entry number considered for this range.; end: final entry number (excluded) considered for this range. 0 means that the range goes until the end of the dataset.; stride: process one entry of the [begin, end) range every stride entries. Must be strictly greater than 0. The actual number of entries processed downstream of a Range() node will be (end - begin)/stride (or less if less entries than that are available).; Note that ranges act ""locally"", not based on the global entry count: Range(10,50) means ""skip the first 10 entries; that reach this node*, let the next 40 entries pass, then stop processing"". If a range node hangs from a filter node, and the range has a begin parameter of 10, that means the range will ski",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:34832,Performance,optimiz,optimized,34832,"ion that needs values for its computations will request it from a reader, e.g. a column created via Define or available from the input dataset. The action will request values from each column of the list of input columns (either inferred or specified by the user), in order. For example:; ROOT::RDataFrame df{1};; auto df1 = df.Define(""x"", []{ return 11; });; auto df2 = df1.Define(""y"", []{ return 22; });; auto graph = df2.Graph<int, int>(""x"",""y"");; graphDefinition graph.py:1; The Graph action is going to request first the value from column ""x"", then that of column ""y"". Specifically, the order of execution of the operations of nodes in this branch of the computation graph is guaranteed to be top to bottom. Distributed execution; RDataFrame applications can be executed in parallel through distributed computing frameworks on a set of remote machines thanks to the Python package ROOT.RDF.Experimental.Distributed. This experimental, Python-only package allows to scale the optimized performance RDataFrame can achieve on a single machine to multiple nodes at the same time. It is designed so that different backends can be easily plugged in, currently supporting Apache Spark and Dask. To make use of distributed RDataFrame, you only need to switch ROOT.RDataFrame with the backend-specific RDataFrame of your choice, for example:; import ROOT; ; # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; ; # It still accepts the same constructor arguments as traditional RDataFrame; df = RDataFrame(""mytree"", ""myfile.root""); ; # Continue the application with the traditional RDataFrame API; sum = df.Filter(""x > 10"").Sum(""y""); h = df.Histo1D((""name"", ""title"", 10, 0, 10), ""x""); ; print(sum.GetValue()); h.Draw(); The main goal of this package is to support running any RDataFrame application distributedly. Nonetheless, not all parts of the RDataFrame API currently work with this package. The subset that is currently availab",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:34842,Performance,perform,performance,34842,"ion that needs values for its computations will request it from a reader, e.g. a column created via Define or available from the input dataset. The action will request values from each column of the list of input columns (either inferred or specified by the user), in order. For example:; ROOT::RDataFrame df{1};; auto df1 = df.Define(""x"", []{ return 11; });; auto df2 = df1.Define(""y"", []{ return 22; });; auto graph = df2.Graph<int, int>(""x"",""y"");; graphDefinition graph.py:1; The Graph action is going to request first the value from column ""x"", then that of column ""y"". Specifically, the order of execution of the operations of nodes in this branch of the computation graph is guaranteed to be top to bottom. Distributed execution; RDataFrame applications can be executed in parallel through distributed computing frameworks on a set of remote machines thanks to the Python package ROOT.RDF.Experimental.Distributed. This experimental, Python-only package allows to scale the optimized performance RDataFrame can achieve on a single machine to multiple nodes at the same time. It is designed so that different backends can be easily plugged in, currently supporting Apache Spark and Dask. To make use of distributed RDataFrame, you only need to switch ROOT.RDataFrame with the backend-specific RDataFrame of your choice, for example:; import ROOT; ; # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; ; # It still accepts the same constructor arguments as traditional RDataFrame; df = RDataFrame(""mytree"", ""myfile.root""); ; # Continue the application with the traditional RDataFrame API; sum = df.Filter(""x > 10"").Sum(""y""); h = df.Histo1D((""name"", ""title"", 10, 0, 10), ""x""); ; print(sum.GetValue()); h.Draw(); The main goal of this package is to support running any RDataFrame application distributedly. Nonetheless, not all parts of the RDataFrame API currently work with this package. The subset that is currently availab",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:41232,Performance,concurren,concurrently,41232,"Tree can be retrieved by typing rootls -lt myfile.root at a command line. Distributed Snapshot; The Snapshot operation behaves slightly differently when executed distributedly. First off, it requires the path supplied to the Snapshot call to be accessible from any worker of the cluster and from the client machine (in general it should be provided as an absolute path). Another important difference is that n separate files will be produced, where n is the number of dataset partitions. As with local RDataFrame, the result of a Snapshot on a distributed RDataFrame is another distributed RDataFrame on which we can define a new computation graph and run more distributed computations. Distributed RunGraphs; Submitting multiple distributed RDataFrame executions is supported through the RunGraphs function. Similarly to its local counterpart, the function expects an iterable of objects representing an RDataFrame action. Each action will be triggered concurrently to send multiple computation graphs to a distributed cluster at the same time:; import ROOT; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs; ; # Create 3 different dataframes and book an histogram on each one; histoproxies = [; RDataFrame(100); .Define(""x"", ""rdfentry_""); .Histo1D((""name"", ""title"", 10, 0, 100), ""x""); for _ in range(4); ]; ; # Execute the 3 computation graphs; RunGraphs(histoproxies); # Retrieve all the histograms in one go; histos = [histoproxy.GetValue() for histoproxy in histoproxies]; Every distributed backend supports this feature and graphs belonging to different backends can be still triggered with a single call to RunGraphs (e.g. it is possible to send a Spark job and a Dask job at the same time). Histogram models in distributed mode; When calling a Histo*D operation in distributed mode, remember to pass to the function the model of the histogram to be computed, e.g. the axis range and the number of bins:; import ROOT; RData",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:45088,Performance,perform,perform,45088,"pplied to all plots. For example:. def set_fill_color(hist):; hist.SetFillColor(ROOT.kBlue); ; LiveVisualize([h_gaus, h_exp, h_random], set_fill_color). Passing a Dictionary of drawables and callback functions: For more control, you can create a dictionary where keys are plots and values are corresponding (optional) callback functions. For example:. plot_callback_dict = {; graph: set_marker,; h_exp: fit_exp,; tprofile_2d: None; }; ; LiveVisualize(plot_callback_dict). Passing a Dictionary of drawables and callback functions with a global callback function: You can also combine a dictionary of plots and callbacks with a global callback function:. LiveVisualize(plot_callback_dict, write_to_tfile); NoteThe allowed operations to pass to LiveVisualize are:; Histo1D(), Histo2D(), Histo3D(); Graph(); Profile1D(), Profile2D(). WarningThe Live Visualization feature is only supported for the Dask backend. Performance tips and parallel execution; As pointed out before in this document, RDataFrame can transparently perform multi-threaded event loops to speed up the execution of its actions. Users have to call ROOT::EnableImplicitMT() before constructing the RDataFrame object to indicate that it should take advantage of a pool of worker threads. Each worker thread processes a distinct subset of entries, and their partial results are merged before returning the final values to the user. There are no guarantees on the order in which threads will process the batches of entries. In particular, note that this means that, for multi-thread event loops, there is no guarantee on the order in which Snapshot() will write entries: they could be scrambled with respect to the input dataset. The values of the special rdfentry_ column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared comp",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:45096,Performance,multi-thread,multi-threaded,45096,"pplied to all plots. For example:. def set_fill_color(hist):; hist.SetFillColor(ROOT.kBlue); ; LiveVisualize([h_gaus, h_exp, h_random], set_fill_color). Passing a Dictionary of drawables and callback functions: For more control, you can create a dictionary where keys are plots and values are corresponding (optional) callback functions. For example:. plot_callback_dict = {; graph: set_marker,; h_exp: fit_exp,; tprofile_2d: None; }; ; LiveVisualize(plot_callback_dict). Passing a Dictionary of drawables and callback functions with a global callback function: You can also combine a dictionary of plots and callbacks with a global callback function:. LiveVisualize(plot_callback_dict, write_to_tfile); NoteThe allowed operations to pass to LiveVisualize are:; Histo1D(), Histo2D(), Histo3D(); Graph(); Profile1D(), Profile2D(). WarningThe Live Visualization feature is only supported for the Dask backend. Performance tips and parallel execution; As pointed out before in this document, RDataFrame can transparently perform multi-threaded event loops to speed up the execution of its actions. Users have to call ROOT::EnableImplicitMT() before constructing the RDataFrame object to indicate that it should take advantage of a pool of worker threads. Each worker thread processes a distinct subset of entries, and their partial results are merged before returning the final values to the user. There are no guarantees on the order in which threads will process the batches of entries. In particular, note that this means that, for multi-thread event loops, there is no guarantee on the order in which Snapshot() will write entries: they could be scrambled with respect to the input dataset. The values of the special rdfentry_ column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared comp",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:45602,Performance,multi-thread,multi-thread,45602,"tionary of plots and callbacks with a global callback function:. LiveVisualize(plot_callback_dict, write_to_tfile); NoteThe allowed operations to pass to LiveVisualize are:; Histo1D(), Histo2D(), Histo3D(); Graph(); Profile1D(), Profile2D(). WarningThe Live Visualization feature is only supported for the Dask backend. Performance tips and parallel execution; As pointed out before in this document, RDataFrame can transparently perform multi-threaded event loops to speed up the execution of its actions. Users have to call ROOT::EnableImplicitMT() before constructing the RDataFrame object to indicate that it should take advantage of a pool of worker threads. Each worker thread processes a distinct subset of entries, and their partial results are merged before returning the final values to the user. There are no guarantees on the order in which threads will process the batches of entries. In particular, note that this means that, for multi-thread event loops, there is no guarantee on the order in which Snapshot() will write entries: they could be scrambled with respect to the input dataset. The values of the special rdfentry_ column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:45889,Performance,multi-thread,multi-thread,45889,"le2D(). WarningThe Live Visualization feature is only supported for the Dask backend. Performance tips and parallel execution; As pointed out before in this document, RDataFrame can transparently perform multi-threaded event loops to speed up the execution of its actions. Users have to call ROOT::EnableImplicitMT() before constructing the RDataFrame object to indicate that it should take advantage of a pool of worker threads. Each worker thread processes a distinct subset of entries, and their partial results are merged before returning the final values to the user. There are no guarantees on the order in which threads will process the batches of entries. In particular, note that this means that, for multi-thread event loops, there is no guarantee on the order in which Snapshot() will write entries: they could be scrambled with respect to the input dataset. The values of the special rdfentry_ column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state)",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:46407,Performance,multi-thread,multi-thread,46407," distinct subset of entries, and their partial results are merged before returning the final values to the user. There are no guarantees on the order in which threads will process the batches of entries. In particular, note that this means that, for multi-thread event loops, there is no guarantee on the order in which Snapshot() will write entries: they could be scrambled with respect to the input dataset. The values of the special rdfentry_ column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:46620,Performance,concurren,concurrently,46620," loops, there is no guarantee on the order in which Snapshot() will write entries: they could be scrambled with respect to the input dataset. The values of the special rdfentry_ column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that different threads will employ different values of the slot parameter, where slot will be a number between 0 and GetNSlots() - 1. In other words, within a slot, computation runs sequentially and events are processed sequentially. Note that the same slot might be asso",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:46924,Performance,race condition,race conditions,46924,"column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that different threads will employ different values of the slot parameter, where slot will be a number between 0 and GetNSlots() - 1. In other words, within a slot, computation runs sequentially and events are processed sequentially. Note that the same slot might be associated to different threads over the course of a single event loop, but two threads will never receive the same slot at the same time. This extra parameter might facilitate writi",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:47313,Performance,concurren,concurrently,47313,"teed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that different threads will employ different values of the slot parameter, where slot will be a number between 0 and GetNSlots() - 1. In other words, within a slot, computation runs sequentially and events are processed sequentially. Note that the same slot might be associated to different threads over the course of a single event loop, but two threads will never receive the same slot at the same time. This extra parameter might facilitate writing safe parallel code by having each thread write/modify a different processing slot, e.g. a different element of a list. See here for an example usage of ForeachSlot(). Parallel execution of multiple RDataFrame event loops; A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other. On many-core architectures it might be desirable to run different event loops concurrently t",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:48368,Performance,concurren,concurrently,48368," that different threads will employ different values of the slot parameter, where slot will be a number between 0 and GetNSlots() - 1. In other words, within a slot, computation runs sequentially and events are processed sequentially. Note that the same slot might be associated to different threads over the course of a single event loop, but two threads will never receive the same slot at the same time. This extra parameter might facilitate writing safe parallel code by having each thread write/modify a different processing slot, e.g. a different element of a list. See here for an example usage of ForeachSlot(). Parallel execution of multiple RDataFrame event loops; A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other. On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage. ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently: ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:48478,Performance,concurren,concurrently,48478,"1. In other words, within a slot, computation runs sequentially and events are processed sequentially. Note that the same slot might be associated to different threads over the course of a single event loop, but two threads will never receive the same slot at the same time. This extra parameter might facilitate writing safe parallel code by having each thread write/modify a different processing slot, e.g. a different element of a list. See here for an example usage of ForeachSlot(). Parallel execution of multiple RDataFrame event loops; A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other. On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage. ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently: ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible. For instance, Filter(""x > 0"") requir",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:48803,Performance,multi-thread,multi-thread,48803,"usage of ForeachSlot(). Parallel execution of multiple RDataFrame event loops; A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other. On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage. ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently: ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible. For instance, Filter(""x > 0"") requires just-in-time compilation of the corresponding C++ logic, while the equivalent Filter([](float x) { return x > 0.; }, {""x""}) does not. Similarly, Histo1D(""x"") requires just-in-time compilation after the type of x is retrieved from the dataset, while Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:48859,Performance,multi-thread,multi-thread,48859,"usage of ForeachSlot(). Parallel execution of multiple RDataFrame event loops; A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other. On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage. ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently: ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible. For instance, Filter(""x > 0"") requires just-in-time compilation of the corresponding C++ logic, while the equivalent Filter([](float x) { return x > 0.; }, {""x""}) does not. Similarly, Histo1D(""x"") requires just-in-time compilation after the type of x is retrieved from the dataset, while Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:48983,Performance,concurren,concurrently,48983,"usage of ForeachSlot(). Parallel execution of multiple RDataFrame event loops; A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other. On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage. ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently: ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible. For instance, Filter(""x > 0"") requires just-in-time compilation of the corresponding C++ logic, while the equivalent Filter([](float x) { return x > 0.; }, {""x""}) does not. Similarly, Histo1D(""x"") requires just-in-time compilation after the type of x is retrieved from the dataset, while Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:49219,Performance,concurren,concurrently,49219,"usage of ForeachSlot(). Parallel execution of multiple RDataFrame event loops; A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other. On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage. ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently: ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible. For instance, Filter(""x > 0"") requires just-in-time compilation of the corresponding C++ logic, while the equivalent Filter([](float x) { return x > 0.; }, {""x""}) does not. Similarly, Histo1D(""x"") requires just-in-time compilation after the type of x is retrieved from the dataset, while Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:49312,Performance,perform,performance,49312,"ent event loops concurrently to improve resource usage. ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently: ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible. For instance, Filter(""x > 0"") requires just-in-time compilation of the corresponding C++ logic, while the equivalent Filter([](float x) { return x > 0.; }, {""x""}) does not. Similarly, Histo1D(""x"") requires just-in-time compilation after the type of x is retrieved from the dataset, while Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See Efficient analysis in Python for possible ways to speed up hot paths in this case.; Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations for all RDataFrame computation graphs before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that po",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:49806,Performance,perform,performance-critical,49806,"eparate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible. For instance, Filter(""x > 0"") requires just-in-time compilation of the corresponding C++ logic, while the equivalent Filter([](float x) { return x > 0.; }, {""x""}) does not. Similarly, Histo1D(""x"") requires just-in-time compilation after the type of x is retrieved from the dataset, while Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See Efficient analysis in Python for possible ways to speed up hot paths in this case.; Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations for all RDataFrame computation graphs before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-i",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:59335,Performance,perform,performance,59335,"y cheap to copy and it's possible to both pass them to (or move them into) functions and to return them from functions. However, in general each dataframe node will have a different C++ type, which includes all available compile-time information about what that node does. One way to cope with this complication is to use template functions and/or C++14 auto return types: template <typename RDF>; auto ApplySomeFilters(RDF df); {; return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; }; A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode: // a function that conditionally adds a Range to an RDataFrame node.; RNode MaybeAddRange(RNode df, bool mustAddRange); {; return mustAddRange ? df.Range(1) : df;; }; // use as :; ROOT::RDataFrame df(10);; auto maybeRangedDF = MaybeAddRange(df, true);; The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function ROOT.RDF.AsRNode. Storing RDataFrame objects in collections; ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a std::vector<RNode> or a std::map<std::string, RNode>:; std::vector<ROOT::RDF::RNode> dfs;; dfs.emplace_back(ROOT::RDataFrame(10));; dfs.emplace_back(dfs[0].Define(""x"", ""42.f""));. Executing callbacks every N events; It's possible to schedule execution of arbitrary functions (callbacks) during the event loop. Callbacks can be used e.g. to inspect partial results of the analysis while the event loop is running, drawing a partially-filled histogram every time a certain number of new entries is processed, or displaying a progress bar while the event loop runs.; For example one can draw an up-to-date version of a result histogram every",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:59394,Performance,perform,perform,59394,"+ type, which includes all available compile-time information about what that node does. One way to cope with this complication is to use template functions and/or C++14 auto return types: template <typename RDF>; auto ApplySomeFilters(RDF df); {; return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; }; A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode: // a function that conditionally adds a Range to an RDataFrame node.; RNode MaybeAddRange(RNode df, bool mustAddRange); {; return mustAddRange ? df.Range(1) : df;; }; // use as :; ROOT::RDataFrame df(10);; auto maybeRangedDF = MaybeAddRange(df, true);; The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function ROOT.RDF.AsRNode. Storing RDataFrame objects in collections; ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a std::vector<RNode> or a std::map<std::string, RNode>:; std::vector<ROOT::RDF::RNode> dfs;; dfs.emplace_back(ROOT::RDataFrame(10));; dfs.emplace_back(dfs[0].Define(""x"", ""42.f""));. Executing callbacks every N events; It's possible to schedule execution of arbitrary functions (callbacks) during the event loop. Callbacks can be used e.g. to inspect partial results of the analysis while the event loop is running, drawing a partially-filled histogram every time a certain number of new entries is processed, or displaying a progress bar while the event loop runs.; For example one can draw an up-to-date version of a result histogram every 100 entries like this: auto h = df.Histo1D(""x"");; TCanvas c(""c"",""x hist"");; h.OnPartialResult(100, [&c](TH1D &h_) { c.cd(); h_.Draw(); c.Update(); });; // event loop runs here, this fi",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:62654,Performance,multi-thread,multi-thread,62654,"});; auto min = d2.Filter([](double b2) { return b2 > 0; }, {""b2""}) // we can still specify non-default column lists; .Min(); // returns the minimum value of ""b1"" for the filtered entries; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::MinRResultPtr< RDFDetail::MinReturnType_t< T > > Min(std::string_view columnName="""")Return the minimum of processed column values (lazy action).Definition RInterface.hxx:2471. Special helper columns: rdfentry_ and rdfslot_; Every instance of RDataFrame is created with two special columns called rdfentry_ and rdfslot_. The rdfentry_ column is of type ULong64_t and it holds the current entry number while rdfslot_ is an unsigned int holding the index of the current data processing slot. For backwards compatibility reasons, the names tdfentry_ and tdfslot_ are also accepted. These columns are ignored by operations such as Cache or Snapshot.; WarningNote that in multi-thread event loops the values of rdfentry_ do not correspond to what would be the entry numbers of a TChain constructed over the same set of ROOT files, as the entries are processed in an unspecified order. Just-in-time compilation: column type inference and explicit declaration of column types; C++ is a statically typed language: all types must be known at compile-time. This includes the types of the TTree branches we want to work on. For filters, defined columns and some of the actions, column types are deduced from the signature of the relevant filter function/temporary column expression/action function: // here b1 is deduced to be `int` and b2 to be `double`; df.Filter([](int x, double y) { return x > 0 && y < 0.; }, {""b1"", ""b2""});; If we specify an incorrect type for one of the columns, an exception with an informative message will be thrown at runtime, when the column value is actually read from the dataset: RDataFrame detects type mismatches. The same would happen if we swapped the order of ""b1"" and ""b2"" in the column list passed to Filter().; Certain actions, on th",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:64604,Performance,perform,performance,64604,", an exception with an informative message will be thrown at runtime, when the column value is actually read from the dataset: RDataFrame detects type mismatches. The same would happen if we swapped the order of ""b1"" and ""b2"" in the column list passed to Filter().; Certain actions, on the other hand, do not take a function as argument (e.g. Histo1D()), so we cannot deduce the type of the column at compile-time. In this case RDataFrame infers the type of the column from the TTree itself. This is why we never needed to specify the column types for all actions in the above snippets.; When the column type is not a common one such as int, double, char or float it is nonetheless good practice to specify it as a template parameter to the action itself, like this: df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing x = 0 rather than x == 0:; // this throws an error (note the typo); df.Define(""x"", ""0"").Filter(""x = 0"");. User-defined custom actions; RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; Implementing custom actions with Book(); Through the Book() method, users can implement a custom action and have access to the same features that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the event loop, or the possibility to return a lazy RResultPtr to an arbitrar",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:65000,Performance,perform,performed,65000," is why we never needed to specify the column types for all actions in the above snippets.; When the column type is not a common one such as int, double, char or float it is nonetheless good practice to specify it as a template parameter to the action itself, like this: df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing x = 0 rather than x == 0:; // this throws an error (note the typo); df.Define(""x"", ""0"").Filter(""x = 0"");. User-defined custom actions; RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; Implementing custom actions with Book(); Through the Book() method, users can implement a custom action and have access to the same features that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:; #include <ROOT/RDataFrame.hxx>; #include <memory>; ; class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; std::shared_ptr<int> fFinalResult = std::make_shared<int>(0);; std::vector<int> fPerThreadResults;; ; public:; // We use a public type alias to advertise the type of the result of this action; using Result_t = int;; ; MyCounter(unsigned int nSlots) : fPerThreadResults(nSlots) {}; ; // Called before the event loop to retrieve the address of the result t",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:65094,Performance,perform,perform,65094,"mmon one such as int, double, char or float it is nonetheless good practice to specify it as a template parameter to the action itself, like this: df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing x = 0 rather than x == 0:; // this throws an error (note the typo); df.Define(""x"", ""0"").Filter(""x = 0"");. User-defined custom actions; RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; Implementing custom actions with Book(); Through the Book() method, users can implement a custom action and have access to the same features that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:; #include <ROOT/RDataFrame.hxx>; #include <memory>; ; class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; std::shared_ptr<int> fFinalResult = std::make_shared<int>(0);; std::vector<int> fPerThreadResults;; ; public:; // We use a public type alias to advertise the type of the result of this action; using Result_t = int;; ; MyCounter(unsigned int nSlots) : fPerThreadResults(nSlots) {}; ; // Called before the event loop to retrieve the address of the result that will be filled/generated.; std::shared_ptr<int> GetResultPtr() const { return fFinalResult; }; ; // Called at the beginn",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:67754,Performance,perform,perform,67754,"<< ""Number of processed entries: "" << resultPtr.GetValue() << std::endl;; }; mainint main()Definition Prototype.cxx:12; RDataFrame.hxx; ROOT::Detail::RDF::RActionImplBase class for action helpers, see RInterface::Book() for more information.Definition RActionImpl.hxx:26; ROOT::RDF::RResultPtrSmart pointer for the return type of actions.Definition RResultPtr.hxx:119; ROOT::RDF::RResultPtr::GetValueconst T & GetValue()Get a const reference to the encapsulated object.Definition RResultPtr.hxx:228; CPyCppyy::ExecCPYCPPYY_EXTERN bool Exec(const std::string &cmd)Definition API.cxx:446; See the Book() method for more information and this tutorial for a more complete example.; Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and executes the callable on the values of those columns for each event that passes all upstream selections. It can be used to perform actions that are not already available in the interface. For example, the following snippet evaluates the root mean square of column ""x"": // Single-thread evaluation of RMS of column ""x"" using Foreach; double sumSq = 0.;; unsigned int n = 0;; df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; nconst Int_t nDefinition legend1.C:16; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach(): thread will execute the expression concurrently. The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of rms; but this is probably too much head-scratch for such a simple operation.; ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:68179,Performance,multi-thread,multi-thread,68179,"nition RResultPtr.hxx:228; CPyCppyy::ExecCPYCPPYY_EXTERN bool Exec(const std::string &cmd)Definition API.cxx:446; See the Book() method for more information and this tutorial for a more complete example.; Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and executes the callable on the values of those columns for each event that passes all upstream selections. It can be used to perform actions that are not already available in the interface. For example, the following snippet evaluates the root mean square of column ""x"": // Single-thread evaluation of RMS of column ""x"" using Foreach; double sumSq = 0.;; unsigned int n = 0;; df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; nconst Int_t nDefinition legend1.C:16; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach(): thread will execute the expression concurrently. The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of rms; but this is probably too much head-scratch for such a simple operation.; ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user expression with different slot parameters for different concurrent executions (see Special helper columns: rdfentry_ and rdfslot_ for more information on the slot parameter). We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"": // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned i",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:68316,Performance,concurren,concurrently,68316,"nition RResultPtr.hxx:228; CPyCppyy::ExecCPYCPPYY_EXTERN bool Exec(const std::string &cmd)Definition API.cxx:446; See the Book() method for more information and this tutorial for a more complete example.; Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and executes the callable on the values of those columns for each event that passes all upstream selections. It can be used to perform actions that are not already available in the interface. For example, the following snippet evaluates the root mean square of column ""x"": // Single-thread evaluation of RMS of column ""x"" using Foreach; double sumSq = 0.;; unsigned int n = 0;; df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; nconst Int_t nDefinition legend1.C:16; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach(): thread will execute the expression concurrently. The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of rms; but this is probably too much head-scratch for such a simple operation.; ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user expression with different slot parameters for different concurrent executions (see Special helper columns: rdfentry_ and rdfslot_ for more information on the slot parameter). We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"": // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned i",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:68415,Performance,concurren,concurrent,68415,"al for a more complete example.; Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and executes the callable on the values of those columns for each event that passes all upstream selections. It can be used to perform actions that are not already available in the interface. For example, the following snippet evaluates the root mean square of column ""x"": // Single-thread evaluation of RMS of column ""x"" using Foreach; double sumSq = 0.;; unsigned int n = 0;; df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; nconst Int_t nDefinition legend1.C:16; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach(): thread will execute the expression concurrently. The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of rms; but this is probably too much head-scratch for such a simple operation.; ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user expression with different slot parameters for different concurrent executions (see Special helper columns: rdfentry_ and rdfslot_ for more information on the slot parameter). We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"": // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned int> ns(nSlots, 0);; ; df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; double sumSq = std::accumulate(sumSqs.be",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:68833,Performance,concurren,concurrent,68833,"the following snippet evaluates the root mean square of column ""x"": // Single-thread evaluation of RMS of column ""x"" using Foreach; double sumSq = 0.;; unsigned int n = 0;; df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; nconst Int_t nDefinition legend1.C:16; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach(): thread will execute the expression concurrently. The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of rms; but this is probably too much head-scratch for such a simple operation.; ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user expression with different slot parameters for different concurrent executions (see Special helper columns: rdfentry_ and rdfslot_ for more information on the slot parameter). We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"": // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned int> ns(nSlots, 0);; ; df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; double sumSq = std::accumulate(sumSqs.begin(), sumSqs.end(), 0.); // sum all squares; unsigned int n = std::accumulate(ns.begin(), ns.end(), 0); // sum all counts; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; Notice how we created one double variable for each processing slot and later merged their results via std::accumulate. Dataset joins with friend trees; Vertically concatenating multiple trees that have the same columns (cre",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:71087,Performance,multi-thread,multi-thread,71087,"ees or chains (creating a logical dataset with the same number of rows and the union of the columns of multiple trees) leverages TTree's ""friend"" mechanism.; Simple joins of trees that do not have the same number of rows are also possible with indexed friend trees (see below).; To use friend trees in RDataFrame, set up trees with the appropriate relationships and then instantiate an RDataFrame with the main tree:; TTree main([...]);; TTree friend([...]);; main.AddFriend(&friend, ""myFriend"");; ; RDataFrame df(main);; auto df2 = df.Filter(""myFriend.MyCol == 42"");; The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above, or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of ""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; NoteA common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original one: rows will be mismatched.; Indexed friend trees provide a way to perform simple joins of multiple trees over a common column. When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the ""index"" columns have a value identical to the one in the main one. For example, in Python:; main_tree = ...; aux_tree = ...; ; # If a friend tree has an index on `commonColumn`, when the main tree loads; # a given row, it also loads the row of the friend tree that has the same; # value of `commonColumn`; aux_tree.BuildIndex(""commonColumn""); ; mainTree.AddFriend(aux_tree); ; df = ROOT.RDataFrame(mainTree); RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode. Reading data formats other than ROOT trees; RDataFrame can be interface",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:71319,Performance,perform,perform,71319,"lso possible with indexed friend trees (see below).; To use friend trees in RDataFrame, set up trees with the appropriate relationships and then instantiate an RDataFrame with the main tree:; TTree main([...]);; TTree friend([...]);; main.AddFriend(&friend, ""myFriend"");; ; RDataFrame df(main);; auto df2 = df.Filter(""myFriend.MyCol == 42"");; The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above, or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of ""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; NoteA common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original one: rows will be mismatched.; Indexed friend trees provide a way to perform simple joins of multiple trees over a common column. When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the ""index"" columns have a value identical to the one in the main one. For example, in Python:; main_tree = ...; aux_tree = ...; ; # If a friend tree has an index on `commonColumn`, when the main tree loads; # a given row, it also loads the row of the friend tree that has the same; # value of `commonColumn`; aux_tree.BuildIndex(""commonColumn""); ; mainTree.AddFriend(aux_tree); ; df = ROOT.RDataFrame(mainTree); RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode. Reading data formats other than ROOT trees; RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; RDataFrame calls into concrete RDataSource implementations to retrieve information abou",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:71432,Performance,load,loaded,71432,"instantiate an RDataFrame with the main tree:; TTree main([...]);; TTree friend([...]);; main.AddFriend(&friend, ""myFriend"");; ; RDataFrame df(main);; auto df2 = df.Filter(""myFriend.MyCol == 42"");; The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above, or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of ""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; NoteA common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original one: rows will be mismatched.; Indexed friend trees provide a way to perform simple joins of multiple trees over a common column. When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the ""index"" columns have a value identical to the one in the main one. For example, in Python:; main_tree = ...; aux_tree = ...; ; # If a friend tree has an index on `commonColumn`, when the main tree loads; # a given row, it also loads the row of the friend tree that has the same; # value of `commonColumn`; aux_tree.BuildIndex(""commonColumn""); ; mainTree.AddFriend(aux_tree); ; df = ROOT.RDataFrame(mainTree); RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode. Reading data formats other than ROOT trees; RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; RDataFrame calls into concrete RDataSource implementations to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns and to advance the readers to the desired data entry. Some predefin",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:71479,Performance,load,load,71479,"instantiate an RDataFrame with the main tree:; TTree main([...]);; TTree friend([...]);; main.AddFriend(&friend, ""myFriend"");; ; RDataFrame df(main);; auto df2 = df.Filter(""myFriend.MyCol == 42"");; The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above, or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of ""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; NoteA common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original one: rows will be mismatched.; Indexed friend trees provide a way to perform simple joins of multiple trees over a common column. When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the ""index"" columns have a value identical to the one in the main one. For example, in Python:; main_tree = ...; aux_tree = ...; ; # If a friend tree has an index on `commonColumn`, when the main tree loads; # a given row, it also loads the row of the friend tree that has the same; # value of `commonColumn`; aux_tree.BuildIndex(""commonColumn""); ; mainTree.AddFriend(aux_tree); ; df = ROOT.RDataFrame(mainTree); RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode. Reading data formats other than ROOT trees; RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; RDataFrame calls into concrete RDataSource implementations to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns and to advance the readers to the desired data entry. Some predefin",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:71700,Performance,load,loads,71700,"the friend trees can be referred to by their full name, like in the example above, or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of ""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; NoteA common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original one: rows will be mismatched.; Indexed friend trees provide a way to perform simple joins of multiple trees over a common column. When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the ""index"" columns have a value identical to the one in the main one. For example, in Python:; main_tree = ...; aux_tree = ...; ; # If a friend tree has an index on `commonColumn`, when the main tree loads; # a given row, it also loads the row of the friend tree that has the same; # value of `commonColumn`; aux_tree.BuildIndex(""commonColumn""); ; mainTree.AddFriend(aux_tree); ; df = ROOT.RDataFrame(mainTree); RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode. Reading data formats other than ROOT trees; RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; RDataFrame calls into concrete RDataSource implementations to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns and to advance the readers to the desired data entry. Some predefined RDataSources are natively provided by ROOT such as the ROOT::RDF::RCsvDS which allows to read comma separated files: auto tdf = ROOT::RDF::FromCSV(""MuRun2010B.csv"");; auto filteredEvents =; tdf.Filter(""Q1 * Q2 == -1""); .Define(""m"", ""sqrt(pow(E1 ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:71730,Performance,load,loads,71730,"the friend trees can be referred to by their full name, like in the example above, or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of ""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; NoteA common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original one: rows will be mismatched.; Indexed friend trees provide a way to perform simple joins of multiple trees over a common column. When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the ""index"" columns have a value identical to the one in the main one. For example, in Python:; main_tree = ...; aux_tree = ...; ; # If a friend tree has an index on `commonColumn`, when the main tree loads; # a given row, it also loads the row of the friend tree that has the same; # value of `commonColumn`; aux_tree.BuildIndex(""commonColumn""); ; mainTree.AddFriend(aux_tree); ; df = ROOT.RDataFrame(mainTree); RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode. Reading data formats other than ROOT trees; RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; RDataFrame calls into concrete RDataSource implementations to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns and to advance the readers to the desired data entry. Some predefined RDataSources are natively provided by ROOT such as the ROOT::RDF::RCsvDS which allows to read comma separated files: auto tdf = ROOT::RDF::FromCSV(""MuRun2010B.csv"");; auto filteredEvents =; tdf.Filter(""Q1 * Q2 == -1""); .Define(""m"", ""sqrt(pow(E1 ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:72013,Performance,multi-thread,multi-thread,72013," common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original one: rows will be mismatched.; Indexed friend trees provide a way to perform simple joins of multiple trees over a common column. When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the ""index"" columns have a value identical to the one in the main one. For example, in Python:; main_tree = ...; aux_tree = ...; ; # If a friend tree has an index on `commonColumn`, when the main tree loads; # a given row, it also loads the row of the friend tree that has the same; # value of `commonColumn`; aux_tree.BuildIndex(""commonColumn""); ; mainTree.AddFriend(aux_tree); ; df = ROOT.RDataFrame(mainTree); RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode. Reading data formats other than ROOT trees; RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; RDataFrame calls into concrete RDataSource implementations to retrieve information about the data, retrieve (thread-local) readers or ""cursors"" for selected columns and to advance the readers to the desired data entry. Some predefined RDataSources are natively provided by ROOT such as the ROOT::RDF::RCsvDS which allows to read comma separated files: auto tdf = ROOT::RDF::FromCSV(""MuRun2010B.csv"");; auto filteredEvents =; tdf.Filter(""Q1 * Q2 == -1""); .Define(""m"", ""sqrt(pow(E1 + E2, 2) - (pow(px1 + px2, 2) + pow(py1 + py2, 2) + pow(pz1 + pz2, 2)))"");; auto h = filteredEvents.Histo1D(""m"");; h->Draw();; See also FromNumpy (Python-only), FromRNTuple(), FromArrow(), FromSqlite(). Computation graphs (storing and reusing sets of transformations); As we saw, transformed data",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:76128,Performance,multi-thread,multi-thread,76128,"taFrame has experimental support for verbose logging of the event loop runtimes and other interesting related information. It is activated as follows: #include <ROOT/RLogger.hxx>; ; // this increases RDF's verbosity level as long as the `verbosity` variable is in scope; auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel::kInfo);; RLogger.hxx; ROOT::Experimental::RLogScopedVerbosityChange the verbosity level (global or specific to the RLogChannel passed to the constructor) for the ...Definition RLogger.hxx:243; ROOT::Detail::RDF::RDFLogChannelROOT::Experimental::RLogChannel & RDFLogChannel()Definition RDFUtils.cxx:37; ROOT::Experimental::ELogLevel::kInfo@ kInfoInformational messages; used for instance for tracing.; or in Python: import ROOT; ; verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kInfo); More information (e.g. start and end of each multi-thread task) is printed using ELogLevel.kDebug and even more (e.g. a full dump of the generated code that RDataFrame just-in-time-compiles) using ELogLevel.kDebug+10. Creating an RDataFrame from a dataset specification file; RDataFrame can be created using a dataset specification JSON file:; import ROOT; ; df = ROOT.RDF.Experimental.FromSpec(""spec.json""); ROOT::RDF::Experimental::FromSpecROOT::RDataFrame FromSpec(const std::string &jsonFile)Factory method to create an RDataFrame from a JSON specification file.Definition RDataFrame.cxx:1729; The input dataset specification JSON file needs to be provided by the user and it describes all necessary samples and their associated metadata information. The main required key is the ""samples"" (at least one sample is needed) and the required sub-keys for each sample are ""trees"" and ""files"". Additionally, one can specify a metadata dictionary for each sample in the ""metadata"" key.; A simple example for the formatting of the specification in the JSON fil",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:80281,Performance,perform,perform,80281,".Filter(""x>1""));; ROOT::RDF::Experimental::AddProgressBar(df_1);; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57; Examples of implemented progress bars can be seen by running Higgs to Four Lepton tutorial and Dimuon tutorial. Efficient analysis in Python; You can use RDataFrame in Python thanks to the dynamic Python/C++ translation of PyROOT. In general, the interface is the same as for C++, a simple example follows.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performance even further, you can also pre-compile a C++ library with full code optimizations and load the function into the RDataFrame computation as follows.; ROOT.gSystem.Load(""path/to/myLibrary.so"") # Library with the myFilter function; ROOT.gInterpreter.Declare('#include ""myLibrary.h""') # Header with the declaration of the myFilter function; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); A more thorough explanation of how to use C++ code from Python can be found in the PyROOT manual.; Python code",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:80808,Performance,perform,performance,80808,"ame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performance even further, you can also pre-compile a C++ library with full code optimizations and load the function into the RDataFrame computation as follows.; ROOT.gSystem.Load(""path/to/myLibrary.so"") # Library with the myFilter function; ROOT.gInterpreter.Declare('#include ""myLibrary.h""') # Header with the declaration of the myFilter function; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); A more thorough explanation of how to use C++ code from Python can be found in the PyROOT manual.; Python code; ROOT also offers the option to compile Python functions with fundamental types and arrays thereof using Numba. Such compiled functions can then be used in a C++ expression provided to RDataFrame.; The function to be compiled should be decorated with ROOT.Numba.Declare, which allows to specify the parameter and return types. See the following snippet for a simple example or the full tutorial here.; @ROOT.Numba.Declare([""float""], ""bool""); def myFilter(x):; return x > 10; ; df = ROOT.RDataFr",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:80888,Performance,optimiz,optimizations,80888,"ame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performance even further, you can also pre-compile a C++ library with full code optimizations and load the function into the RDataFrame computation as follows.; ROOT.gSystem.Load(""path/to/myLibrary.so"") # Library with the myFilter function; ROOT.gInterpreter.Declare('#include ""myLibrary.h""') # Header with the declaration of the myFilter function; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); A more thorough explanation of how to use C++ code from Python can be found in the PyROOT manual.; Python code; ROOT also offers the option to compile Python functions with fundamental types and arrays thereof using Numba. Such compiled functions can then be used in a C++ expression provided to RDataFrame.; The function to be compiled should be decorated with ROOT.Numba.Declare, which allows to specify the parameter and return types. See the following snippet for a simple example or the full tutorial here.; @ROOT.Numba.Declare([""float""], ""bool""); def myFilter(x):; return x > 10; ; df = ROOT.RDataFr",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:80906,Performance,load,load,80906,"ame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performance even further, you can also pre-compile a C++ library with full code optimizations and load the function into the RDataFrame computation as follows.; ROOT.gSystem.Load(""path/to/myLibrary.so"") # Library with the myFilter function; ROOT.gInterpreter.Declare('#include ""myLibrary.h""') # Header with the declaration of the myFilter function; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); A more thorough explanation of how to use C++ code from Python can be found in the PyROOT manual.; Python code; ROOT also offers the option to compile Python functions with fundamental types and arrays thereof using Numba. Such compiled functions can then be used in a C++ expression provided to RDataFrame.; The function to be compiled should be decorated with ROOT.Numba.Declare, which allows to specify the parameter and return types. See the following snippet for a simple example or the full tutorial here.; @ROOT.Numba.Declare([""float""], ""bool""); def myFilter(x):; return x > 10; ; df = ROOT.RDataFr",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:83536,Performance,perform,performed,83536,"ent of the RDataFrame or process the data further with Python libraries. For this purpose, we provide the AsNumpy() function, which returns the columns of your RDataFrame as a dictionary of NumPy arrays. See a simple example below or a full tutorial here.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); cols = df.Filter(""x > 10"").AsNumpy([""x"", ""y""]) # retrieve columns ""x"" and ""y"" as NumPy arrays; print(cols[""x""], cols[""y""]) # the values of the cols dictionary are NumPy arrays; Processing data stored in NumPy arrays; In case you have data in NumPy arrays in Python and you want to process the data with ROOT, you can easily create an RDataFrame using ROOT.RDF.FromNumpy. The factory function accepts a dictionary where the keys are the column names and the values are NumPy arrays, and returns a new RDataFrame with the provided columns.; Only arrays of fundamental types (integers and floating point values) are supported and the arrays must have the same length. Data is read directly from the arrays: no copies are performed.; # Read data from NumPy arrays; # The column names in the RDataFrame are taken from the dictionary keys; x, y = numpy.array([1, 2, 3]), numpy.array([4, 5, 6]); df = ROOT.RDF.FromNumpy({""x"": x, ""y"": y}); ; # Use RDataFrame as usual, e.g. write out a ROOT file; df.Define(""z"", ""x + y"").Snapshot(""tree"", ""file.root""). Construct histogram and profile models from a tuple; The Histo1D(), Histo2D(), Histo3D(), Profile1D() and Profile2D() methods return histograms and profiles, respectively, which can be constructed using a model argument.; In Python, we can specify the arguments for the constructor of such histogram or profile model with a Python tuple, as shown in the example below:; # First argument is a tuple with the arguments to construct a TH1D model; h = df.Histo1D((""histName"", ""histTitle"", 64, 0., 128.), ""myColumn""). AsRNode helper function; The ROOT::RDF::AsRNode function casts an RDataFrame node to the generic ROOT::RDF::RNode type. From Python, it can",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:1366,Safety,safe,safe,1366,"r Python. ; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines completely transparently.; Skip to the class reference or keep reading for the user guide.; In a nutshell: ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; myHisto->Draw(); // Event loop is run here, upon first access to a result; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and return values; Storing RDataFrame objects in collections; Executing callbacks every N events; Default column lists; Special helper columns: `rdfentry_` and `rdfslot_`; Just-in-time compilation: column type inference and explicit declaration of column types; User-defined custom actions; Dataset joins with friend trees; Reading data formats other than ROOT trees; Computation graphs (stor",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:3461,Safety,safe,safe,3461,"Frame execution logs; Creating an RDataFrame from a dataset specification file; Adding a progress bar. Efficient analysis in Python; Class reference. Cheat sheet; These are the operations which can be performed with RDataFrame. Transformations; Transformations are a way to manipulate the data. Transformation Description . Alias() Introduce an alias for a particular column name. . Define() Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the pts of ""good"" muons). . DefinePerSample() Define a new column that is updated when the input sample changes, e.g. when switching tree being processed in a chain. . DefineSlot() Same as Define(), but the user-defined function must take an extra unsigned int slot as its first parameter. slot will take a different value, 0 to nThreads - 1, for each thread of execution. This is meant as a helper in writing thread-safe Define() transformation when using RDataFrame after ROOT::EnableImplicitMT(). DefineSlot() works just as well with single-thread execution: in that case slot will always be 0. . DefineSlotEntry() Same as DefineSlot(), but the entry number is passed in addition to the slot number. This is meant as a helper in case the expression depends on the entry number. For details about entry numbers in multi-threaded runs, see here. . Filter() Filter rows based on user-defined conditions. . Range() Filter rows based on entry number (single-thread only). . Redefine() Overwrite the value and/or type of an existing column. See Define() for more information. . RedefineSlot() Overwrite the value and/or type of an existing column. See DefineSlot() for more information. . RedefineSlotEntry() Overwrite the value and/or type of an existing column. See DefineSlotEntry() for more information. . Vary() Register systematic variations for an existing column. Varied results are then extracted via VariationsFor(). . Actions; A",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:8020,Safety,safe,safety,8020,"he reduction operation. An optional parameter allows initialization of the result object to non-default values. . Report() Obtain statistics on how many entries have been accepted and rejected by the filters. See the section on named filters for a more detailed explanation. The method returns a ROOT::RDF::RCutFlowReport instance which can be queried programmatically to get information about the effects of the individual cuts. . Stats() Return a TStatistic object filled with the input columns. . StdDev() Return the unbiased standard deviation of the processed column values. . Sum() Return the sum of the values in the column. If the type of the column is inferred, the return type is double, the type of the column otherwise. . Take() Extract a column from the dataset as a collection of values, e.g. a std::vector<float> for a column of type float. . Instant action Description . Foreach() Execute a user-defined function on each entry. Users are responsible for the thread-safety of this callable when executing with implicit multi-threading enabled. . ForeachSlot() Same as Foreach(), but the user-defined function must take an extra unsigned int slot as its first parameter. slot will take a different value, 0 to nThreads - 1, for each thread of execution. This is meant as a helper in writing thread-safe Foreach() actions when using RDataFrame after ROOT::EnableImplicitMT(). ForeachSlot() works just as well with single-thread execution: in that case slot will always be 0. . Snapshot() Write the processed dataset to disk, in a new TTree and TFile. Custom columns can be saved as well, filtered entries are not saved. Users can specify which columns to save (default is all). Snapshot, by default, overwrites the output file if it already exists. Snapshot() can be made lazy setting the appropriate flag in the snapshot options. . Queries; These operations do not modify the dataframe or book computations but simply return information on the RDataFrame object. Operation Description . ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:8351,Safety,safe,safe,8351,"nce which can be queried programmatically to get information about the effects of the individual cuts. . Stats() Return a TStatistic object filled with the input columns. . StdDev() Return the unbiased standard deviation of the processed column values. . Sum() Return the sum of the values in the column. If the type of the column is inferred, the return type is double, the type of the column otherwise. . Take() Extract a column from the dataset as a collection of values, e.g. a std::vector<float> for a column of type float. . Instant action Description . Foreach() Execute a user-defined function on each entry. Users are responsible for the thread-safety of this callable when executing with implicit multi-threading enabled. . ForeachSlot() Same as Foreach(), but the user-defined function must take an extra unsigned int slot as its first parameter. slot will take a different value, 0 to nThreads - 1, for each thread of execution. This is meant as a helper in writing thread-safe Foreach() actions when using RDataFrame after ROOT::EnableImplicitMT(). ForeachSlot() works just as well with single-thread execution: in that case slot will always be 0. . Snapshot() Write the processed dataset to disk, in a new TTree and TFile. Custom columns can be saved as well, filtered entries are not saved. Users can specify which columns to save (default is all). Snapshot, by default, overwrites the output file if it already exists. Snapshot() can be made lazy setting the appropriate flag in the snapshot options. . Queries; These operations do not modify the dataframe or book computations but simply return information on the RDataFrame object. Operation Description . Describe() Get useful information describing the dataframe, e.g. columns and their types. . GetColumnNames() Get the names of all the available columns of the dataset. . GetColumnType() Return the type of a given column as a string. . GetColumnTypeNamesList() Return the list of type names of columns in the dataset. . GetDefin",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:46281,Safety,safe,safety,46281," distinct subset of entries, and their partial results are merged before returning the final values to the user. There are no guarantees on the order in which threads will process the batches of entries. In particular, note that this means that, for multi-thread event loops, there is no guarantee on the order in which Snapshot() will write entries: they could be scrambled with respect to the input dataset. The values of the special rdfentry_ column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:46574,Safety,safe,safe,46574,"ich threads will process the batches of entries. In particular, note that this means that, for multi-thread event loops, there is no guarantee on the order in which Snapshot() will write entries: they could be scrambled with respect to the input dataset. The values of the special rdfentry_ column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that different threads will employ different values of the slot parameter, where slot will be a number between 0 and GetNSlots() - 1. In other words, within a",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:46915,Safety,risk,risks,46915,"column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that different threads will employ different values of the slot parameter, where slot will be a number between 0 and GetNSlots() - 1. In other words, within a slot, computation runs sequentially and events are processed sequentially. Note that the same slot might be associated to different threads over the course of a single event loop, but two threads will never receive the same slot at the same time. This extra parameter might facilitate writi",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:46983,Safety,safe,safe,46983,". Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that different threads will employ different values of the slot parameter, where slot will be a number between 0 and GetNSlots() - 1. In other words, within a slot, computation runs sequentially and events are processed sequentially. Note that the same slot might be associated to different threads over the course of a single event loop, but two threads will never receive the same slot at the same time. This extra parameter might facilitate writing safe parallel code by having each thread write/modify a different processing slot, e.g. a different element of a list. See here for an example usage of ForeachSlot(). Parallel execution of multiple RDataFrame event loops; A complex analysis may require multiple separate RDataFrame computation graphs to produc",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:47801,Safety,safe,safe,47801,"nal programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that different threads will employ different values of the slot parameter, where slot will be a number between 0 and GetNSlots() - 1. In other words, within a slot, computation runs sequentially and events are processed sequentially. Note that the same slot might be associated to different threads over the course of a single event loop, but two threads will never receive the same slot at the same time. This extra parameter might facilitate writing safe parallel code by having each thread write/modify a different processing slot, e.g. a different element of a list. See here for an example usage of ForeachSlot(). Parallel execution of multiple RDataFrame event loops; A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other. On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage. ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently: ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread even",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:49356,Safety,avoid,avoid,49356,"ent event loops concurrently to improve resource usage. ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently: ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible. For instance, Filter(""x > 0"") requires just-in-time compilation of the corresponding C++ logic, while the equivalent Filter([](float x) { return x > 0.; }, {""x""}) does not. Similarly, Histo1D(""x"") requires just-in-time compilation after the type of x is retrieved from the dataset, while Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See Efficient analysis in Python for possible ways to speed up hot paths in this case.; Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations for all RDataFrame computation graphs before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that po",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:63599,Safety,detect,detects,63599," reasons, the names tdfentry_ and tdfslot_ are also accepted. These columns are ignored by operations such as Cache or Snapshot.; WarningNote that in multi-thread event loops the values of rdfentry_ do not correspond to what would be the entry numbers of a TChain constructed over the same set of ROOT files, as the entries are processed in an unspecified order. Just-in-time compilation: column type inference and explicit declaration of column types; C++ is a statically typed language: all types must be known at compile-time. This includes the types of the TTree branches we want to work on. For filters, defined columns and some of the actions, column types are deduced from the signature of the relevant filter function/temporary column expression/action function: // here b1 is deduced to be `int` and b2 to be `double`; df.Filter([](int x, double y) { return x > 0 && y < 0.; }, {""b1"", ""b2""});; If we specify an incorrect type for one of the columns, an exception with an informative message will be thrown at runtime, when the column value is actually read from the dataset: RDataFrame detects type mismatches. The same would happen if we swapped the order of ""b1"" and ""b2"" in the column list passed to Filter().; Certain actions, on the other hand, do not take a function as argument (e.g. Histo1D()), so we cannot deduce the type of the column at compile-time. In this case RDataFrame infers the type of the column from the TTree itself. This is why we never needed to specify the column types for all actions in the above snippets.; When the column type is not a common one such as int, double, char or float it is nonetheless good practice to specify it as a template parameter to the action itself, like this: df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime overhead",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:64740,Safety,avoid,avoids,64740,"nt (e.g. Histo1D()), so we cannot deduce the type of the column at compile-time. In this case RDataFrame infers the type of the column from the TTree itself. This is why we never needed to specify the column types for all actions in the above snippets.; When the column type is not a common one such as int, double, char or float it is nonetheless good practice to specify it as a template parameter to the action itself, like this: df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing x = 0 rather than x == 0:; // this throws an error (note the typo); df.Define(""x"", ""0"").Filter(""x = 0"");. User-defined custom actions; RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; Implementing custom actions with Book(); Through the Book() method, users can implement a custom action and have access to the same features that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:; #include <ROOT/RDataFrame.hxx>; #include <memory>; ; class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; std::shared_ptr<int> fFinalResult = std::make_shared<int>(0);; std::vector<int> fPerThreadResults;; ; public:; // We use a public type alias to advertise the type of the result of this action;",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:68235,Safety,safe,safety,68235,"nition RResultPtr.hxx:228; CPyCppyy::ExecCPYCPPYY_EXTERN bool Exec(const std::string &cmd)Definition API.cxx:446; See the Book() method for more information and this tutorial for a more complete example.; Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and executes the callable on the values of those columns for each event that passes all upstream selections. It can be used to perform actions that are not already available in the interface. For example, the following snippet evaluates the root mean square of column ""x"": // Single-thread evaluation of RMS of column ""x"" using Foreach; double sumSq = 0.;; unsigned int n = 0;; df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; nconst Int_t nDefinition legend1.C:16; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach(): thread will execute the expression concurrently. The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of rms; but this is probably too much head-scratch for such a simple operation.; ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user expression with different slot parameters for different concurrent executions (see Special helper columns: rdfentry_ and rdfslot_ for more information on the slot parameter). We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"": // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned i",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:69012,Safety,safe,safe,69012," {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; nconst Int_t nDefinition legend1.C:16; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach(): thread will execute the expression concurrently. The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of rms; but this is probably too much head-scratch for such a simple operation.; ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user expression with different slot parameters for different concurrent executions (see Special helper columns: rdfentry_ and rdfslot_ for more information on the slot parameter). We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"": // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned int> ns(nSlots, 0);; ; df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; double sumSq = std::accumulate(sumSqs.begin(), sumSqs.end(), 0.); // sum all squares; unsigned int n = std::accumulate(ns.begin(), ns.end(), 0); // sum all counts; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; Notice how we created one double variable for each processing slot and later merged their results via std::accumulate. Dataset joins with friend trees; Vertically concatenating multiple trees that have the same columns (creating a logical dataset with the same columns and more rows) is trivial in RDataFrame: just pass the tree name and a list of file names to RDataFrame's constructor, or create a TChain out of the desired trees and pass that to RDa",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:69059,Safety,safe,safe,69059," {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; nconst Int_t nDefinition legend1.C:16; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach(): thread will execute the expression concurrently. The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of rms; but this is probably too much head-scratch for such a simple operation.; ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user expression with different slot parameters for different concurrent executions (see Special helper columns: rdfentry_ and rdfslot_ for more information on the slot parameter). We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"": // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned int> ns(nSlots, 0);; ; df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; double sumSq = std::accumulate(sumSqs.begin(), sumSqs.end(), 0.); // sum all squares; unsigned int n = std::accumulate(ns.begin(), ns.end(), 0); // sum all counts; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; Notice how we created one double variable for each processing slot and later merged their results via std::accumulate. Dataset joins with friend trees; Vertically concatenating multiple trees that have the same columns (creating a logical dataset with the same columns and more rows) is trivial in RDataFrame: just pass the tree name and a list of file names to RDataFrame's constructor, or create a TChain out of the desired trees and pass that to RDa",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:73308,Safety,detect,detects,73308," to advance the readers to the desired data entry. Some predefined RDataSources are natively provided by ROOT such as the ROOT::RDF::RCsvDS which allows to read comma separated files: auto tdf = ROOT::RDF::FromCSV(""MuRun2010B.csv"");; auto filteredEvents =; tdf.Filter(""Q1 * Q2 == -1""); .Define(""m"", ""sqrt(pow(E1 + E2, 2) - (pow(px1 + px2, 2) + pow(py1 + py2, 2) + pow(pz1 + pz2, 2)))"");; auto h = filteredEvents.Histo1D(""m"");; h->Draw();; See also FromNumpy (Python-only), FromRNTuple(), FromArrow(), FromSqlite(). Computation graphs (storing and reusing sets of transformations); As we saw, transformed dataframes can be stored as variables and reused multiple times to create modified versions of the dataset. This implicitly defines a computation graph in which several paths of filtering/creation of columns are executed simultaneously, and finally aggregated results are produced.; RDataFrame detects when several actions use the same filter or the same defined column, and only evaluates each filter or defined column once per event, regardless of how many times that result is used down the computation graph. Objects read from each column are built once and never copied, for maximum efficiency. When ""upstream"" filters are not passed, subsequent filters, temporary column expressions and actions are not evaluated, so it might be advisable to put the strictest filters first in the graph. Visualizing the computation graph; It is possible to print the computation graph from any node to obtain a DOT (graphviz) representation either on the standard output or in a file.; Invoking the function ROOT::RDF::SaveGraph() on any node that is not the head node, the computation graph of the branch the node belongs to is printed. By using the head node, the entire computation graph is printed.; Following there is an example of usage: // First, a sample computational graph is built; ROOT::RDataFrame df(""tree"", ""f.root"");; ; auto df2 = df.Define(""x"", []() { return 1; }); .Filter(""col0 % 1 == col0",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:922,Security,access,access,922,". ROOT: ROOT::RDataFrame Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::RDataFrame Class ReferenceDataframe. ; ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. ; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines completely transparently.; Skip to the class reference or keep reading for the user guide.; In a nutshell: ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; myHisto->Draw(); // Event loop is run here, upon first access to a result; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and ret",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:4822,Security,access,accessed,4822,"s about entry numbers in multi-threaded runs, see here. . Filter() Filter rows based on user-defined conditions. . Range() Filter rows based on entry number (single-thread only). . Redefine() Overwrite the value and/or type of an existing column. See Define() for more information. . RedefineSlot() Overwrite the value and/or type of an existing column. See DefineSlot() for more information. . RedefineSlotEntry() Overwrite the value and/or type of an existing column. See DefineSlotEntry() for more information. . Vary() Register systematic variations for an existing column. Varied results are then extracted via VariationsFor(). . Actions; Actions aggregate data into a result. Each one is described in more detail in the reference guide.; In the following, whenever we say an action ""returns"" something, we always mean it returns a smart pointer to it. Actions only act on events that pass all preceding filters.; Lazy actions only trigger the event loop when one of the results is accessed for the first time, making it easy to produce many different results in one event loop. Instant actions trigger the event loop instantly. Lazy action Description . Aggregate() Execute a user-defined accumulation operation on the processed column values. . Book() Book execution of a custom action using a user-defined helper object. . Cache() Cache column values in memory. Custom columns can be cached as well, filtered entries are not cached. Users can specify which columns to save (default is all). . Count() Return the number of events processed. Useful e.g. to get a quick count of the number of events passing a Filter. . Display() Provides a printable representation of the dataset contents. The method returns a ROOT::RDF::RDisplay() instance which can print a tabular representation of the data or return it as a string. . Fill() Fill a user-defined object with the values of the specified columns, as if by calling Obj.Fill(col1, col2, ...). . Graph() Fills a TGraph with the two columns provi",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:11075,Security,access,accessed,11075,"es as well as low-level details such as I/O and parallelization. RDataFrame provides methods to perform most common operations required by ROOT analyses; at the same time, users can just as easily specify custom code that will be executed in the event loop.; RDataFrame is built with a modular and flexible workflow in mind, summarised as follows:. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, CSV files, SQLite files, RNTuples, and it can be extended to custom data formats. From Python, NumPy arrays can be imported into RDataFrame as well.; Transform the dataframe by:; Applying filters. This selects only specific rows of the dataset.; Creating custom columns. Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset. Produce results. Actions are used to aggregate data into results. Most actions are lazy, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time. Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them.; The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the crash course to discover more idiomatic and flexible ways to express analyses with RDataFrame. . TTreeReader ROOT::RDataFrame . TTreeReader reader(""myTree"", file);; TTreeReaderValue<A_t> a(reader, ""A"");; TTreeReaderValue<B_t> b(reader, ""B"");; TTreeReaderValue<C_t> c(reader, ""C"");; while(reader.Next()) {; if(IsGoodEvent(*a, *b, *c)); DoStuff(*a, *b, *c);; }; b#define b(i)Definition RSha256.hxx:100; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:146;",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:11165,Security,access,access,11165,"perations required by ROOT analyses; at the same time, users can just as easily specify custom code that will be executed in the event loop.; RDataFrame is built with a modular and flexible workflow in mind, summarised as follows:. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, CSV files, SQLite files, RNTuples, and it can be extended to custom data formats. From Python, NumPy arrays can be imported into RDataFrame as well.; Transform the dataframe by:; Applying filters. This selects only specific rows of the dataset.; Creating custom columns. Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset. Produce results. Actions are used to aggregate data into results. Most actions are lazy, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time. Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them.; The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the crash course to discover more idiomatic and flexible ways to express analyses with RDataFrame. . TTreeReader ROOT::RDataFrame . TTreeReader reader(""myTree"", file);; TTreeReaderValue<A_t> a(reader, ""A"");; TTreeReaderValue<B_t> b(reader, ""B"");; TTreeReaderValue<C_t> c(reader, ""C"");; while(reader.Next()) {; if(IsGoodEvent(*a, *b, *c)); DoStuff(*a, *b, *c);; }; b#define b(i)Definition RSha256.hxx:100; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:146; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definitio",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:11303,Security,access,access,11303,"e executed in the event loop.; RDataFrame is built with a modular and flexible workflow in mind, summarised as follows:. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, CSV files, SQLite files, RNTuples, and it can be extended to custom data formats. From Python, NumPy arrays can be imported into RDataFrame as well.; Transform the dataframe by:; Applying filters. This selects only specific rows of the dataset.; Creating custom columns. Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset. Produce results. Actions are used to aggregate data into results. Most actions are lazy, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time. Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them.; The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the crash course to discover more idiomatic and flexible ways to express analyses with RDataFrame. . TTreeReader ROOT::RDataFrame . TTreeReader reader(""myTree"", file);; TTreeReaderValue<A_t> a(reader, ""A"");; TTreeReaderValue<B_t> b(reader, ""B"");; TTreeReaderValue<C_t> c(reader, ""C"");; while(reader.Next()) {; if(IsGoodEvent(*a, *b, *c)); DoStuff(*a, *b, *c);; }; b#define b(i)Definition RSha256.hxx:100; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:146; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:44; ROOT::RDataFrame d(""myTree"", file, {""A"", ""B"", ""C""});; d.Filter(IsGoodEvent).Foreach(DoStuff",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:17674,Security,access,access,17674,"(""MET"");; h->Draw();; The first line creates an RDataFrame associated to the TTree ""myTree"". This tree has a branch named ""MET"".; Histo1D() is an action; it returns a smart pointer (a ROOT::RDF::RResultPtr, to be precise) to a TH1D histogram filled with the MET of all events. If the quantity stored in the column is a collection (e.g. a vector or an array), the histogram is filled with all vector elements for each event.; You can use the objects returned by actions as if they were pointers to the desired results. There are many other possible actions, and all their results are wrapped in smart pointers; we'll see why in a minute. Applying a filter; Let's say we want to cut over the value of branch ""MET"" and count how many events pass this cut. This is one way to do it: RDataFrame d(""myTree"", ""file.root"");; auto c = d.Filter(""MET > 4."").Count(); // computations booked, not run; std::cout << *c << std::endl; // computations run here, upon first access to the result; The filter string (which must contain a valid C++ expression) is applied to the specified columns for each event; the name and types of the columns are inferred automatically. The string expression is required to return a bool which signals whether the event passes the filter (true) or not (false).; You can think of your data as ""flowing"" through the chain of calls, being transformed, filtered and finally used to perform actions. Multiple Filter() calls can be chained one after another.; Using string filters is nice for simple things, but they are limited to specifying the equivalent of a single return statement or the body of a lambda, so it's cumbersome to use strings with more complex filters. They also add a small runtime overhead, as ROOT needs to just-in-time compile the string into C++ code. When more freedom is required or runtime performance is very important, a C++ callable can be specified instead (a lambda in the following snippet, but it can be any kind of function or even a functor class), tog",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:25305,Security,access,accessed,25305,"event every 3; auto d15each3 = d.Range(0, 15, 3);; Note that ranges are not available when multi-threading is enabled. More information on ranges is available here. Executing multiple actions in the same event loop; As a final example let us apply two different cuts on branch ""MET"" and fill two different histograms with the ""pt_v"" of the filtered events. By now, you should be able to easily understand what is happening: RDataFrame d(""treeName"", ""file.root"");; auto h1 = d.Filter(""MET > 10"").Histo1D(""pt_v"");; auto h2 = d.Histo1D(""pt_v"");; h1->Draw(); // event loop is run once here; h2->Draw(""SAME""); // no need to run the event loop again; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; h1TH1F * h1Definition legend1.C:5; RDataFrame executes all above actions by running the event-loop only once. The trick is that actions are not executed at the moment they are called, but they are lazy, i.e. delayed until the moment one of their results is accessed through the smart pointer. At that time, the event loop is triggered and all results are produced simultaneously.; It is therefore good practice to declare all your transformations and actions before accessing their results, allowing RDataFrame to run the loop once and produce all results in one go. Going parallel; Let's say we would like to run the previous examples in parallel on several cores, dividing events fairly between cores. The only modification required to the snippets would be the addition of this line before constructing the main dataframe object: ROOT::EnableImplicitMT();; Simple as that. More details are given below. Working with collections and object selections; RDataFrame reads collections as the special type ROOT::RVec: for example, a column containing an array of floating point numbers can be read as a ROOT::RVecF. C-style arrays (with variable or static size), STL vectors and most other collection types can be read this way.; RVec is a container sim",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:25514,Security,access,accessing,25514,"nal example let us apply two different cuts on branch ""MET"" and fill two different histograms with the ""pt_v"" of the filtered events. By now, you should be able to easily understand what is happening: RDataFrame d(""treeName"", ""file.root"");; auto h1 = d.Filter(""MET > 10"").Histo1D(""pt_v"");; auto h2 = d.Histo1D(""pt_v"");; h1->Draw(); // event loop is run once here; h2->Draw(""SAME""); // no need to run the event loop again; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; h1TH1F * h1Definition legend1.C:5; RDataFrame executes all above actions by running the event-loop only once. The trick is that actions are not executed at the moment they are called, but they are lazy, i.e. delayed until the moment one of their results is accessed through the smart pointer. At that time, the event loop is triggered and all results are produced simultaneously.; It is therefore good practice to declare all your transformations and actions before accessing their results, allowing RDataFrame to run the loop once and produce all results in one go. Going parallel; Let's say we would like to run the previous examples in parallel on several cores, dividing events fairly between cores. The only modification required to the snippets would be the addition of this line before constructing the main dataframe object: ROOT::EnableImplicitMT();; Simple as that. More details are given below. Working with collections and object selections; RDataFrame reads collections as the special type ROOT::RVec: for example, a column containing an array of floating point numbers can be read as a ROOT::RVecF. C-style arrays (with variable or static size), STL vectors and most other collection types can be read this way.; RVec is a container similar to std::vector (and can be used just like a std::vector) but it also offers a rich interface to operate on the array elements in a vectorised fashion, similarly to Python's NumPy arrays.; For example, to fill a histogr",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:28360,Security,access,access,28360,"hether the event has passed the selection (true) or not (false). It should perform ""read-only"" operations on the columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column names are used as variable names (e.g. Filter(""x[0] + x[1] > 0"")). This is a convenience feature that comes with a certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event loop. See the paragraph about ""Just-in-time compilation"" below for more information.; RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed in order and the first one returning false causes the event to be discarded and triggers the processing of the next entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for each entry: after the first access it simply serves a cached result.; Named filters and cutflow reports; An optional string parameter name can be passed to the Filter() method to create a named filter. Named filters work as usual, but also keep track of how many entries they accept and reject.; Statistics are retrieved through a call to the Report() method:. when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all named filters declared up to that point; when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative all named filters in the section of the chain between the main RDataFrame and that node (included). Stats are stored in the same order as named filters have been added to the graph, and refer to the latest event-loop that has been run using the relevant RDataFrame. Ranges; When RDataFrame is not being used in a mult",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:31006,Security,access,accessible,31006," on the global entry count: Range(10,50) means ""skip the first 10 entries; that reach this node*, let the next 40 entries pass, then stop processing"". If a range node hangs from a filter node, and the range has a begin parameter of 10, that means the range will skip the first 10 entries that pass the preceding filter.; Ranges allow ""early quitting"": if all branches of execution of a functional graph reached their end value of processed entries, the event-loop is immediately interrupted. This is useful for debugging and quick data explorations. Custom columns; Custom columns are created by invoking Define(name, f, columnList). As usual, f can be any callable object (function, lambda expression, functor class...); it takes the values of the columns listed in columnList (a list of strings) as parameters, in the same order as they are listed in columnList. f must return the value that will be assigned to the temporary column.; A new variable is created called name, accessible as if it was contained in the dataset from subsequent transformations/actions.; Use cases include:; caching the results of complex calculations for easy and efficient multiple access; extraction of quantities of interest from complex objects; branch aliasing, i.e. changing the name of a branch. An exception is thrown if the name of the new column/branch is already in use for another branch in the TTree.; It is also possible to specify the quantity to be stored in the new temporary column as a C++ expression with the method Define(name, expression). For example this invocation; df.Define(""pt"", ""sqrt(px*px + py*py)"");; will create a new column called ""pt"" the value of which is calculated starting from the columns px and py. The system builds a just-in-time compiled function starting from the expression after having deduced the list of necessary branches from the names of the variables specified by the user.; Custom columns as function of slot and entry number; It is possible to create custom columns ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:31193,Security,access,access,31193,"ange node hangs from a filter node, and the range has a begin parameter of 10, that means the range will skip the first 10 entries that pass the preceding filter.; Ranges allow ""early quitting"": if all branches of execution of a functional graph reached their end value of processed entries, the event-loop is immediately interrupted. This is useful for debugging and quick data explorations. Custom columns; Custom columns are created by invoking Define(name, f, columnList). As usual, f can be any callable object (function, lambda expression, functor class...); it takes the values of the columns listed in columnList (a list of strings) as parameters, in the same order as they are listed in columnList. f must return the value that will be assigned to the temporary column.; A new variable is created called name, accessible as if it was contained in the dataset from subsequent transformations/actions.; Use cases include:; caching the results of complex calculations for easy and efficient multiple access; extraction of quantities of interest from complex objects; branch aliasing, i.e. changing the name of a branch. An exception is thrown if the name of the new column/branch is already in use for another branch in the TTree.; It is also possible to specify the quantity to be stored in the new temporary column as a C++ expression with the method Define(name, expression). For example this invocation; df.Define(""pt"", ""sqrt(px*px + py*py)"");; will create a new column called ""pt"" the value of which is calculated starting from the columns px and py. The system builds a just-in-time compiled function starting from the expression after having deduced the list of necessary branches from the names of the variables specified by the user.; Custom columns as function of slot and entry number; It is possible to create custom columns also as a function of the processing slot and entry numbers. The methods that can be invoked are:; DefineSlot(name, f, columnList). In this case the callable",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:32769,Security,access,accessed,32769," from the columns px and py. The system builds a just-in-time compiled function starting from the expression after having deduced the list of necessary branches from the names of the variables specified by the user.; Custom columns as function of slot and entry number; It is possible to create custom columns also as a function of the processing slot and entry numbers. The methods that can be invoked are:; DefineSlot(name, f, columnList). In this case the callable f has this signature R(unsigned int, T1, T2, ...): the first parameter is the slot number which ranges from 0 to ROOT::GetThreadPoolSize() - 1.; DefineSlotEntry(name, f, columnList). In this case the callable f has this signature R(unsigned int, ULong64_t,; T1, T2, ...): the first parameter is the slot number while the second one the number of the entry being processed. Actions: getting results. Instant and lazy actions; Actions can be instant or lazy. Instant actions are executed as soon as they are called, while lazy actions are executed whenever the object they return is accessed for the first time. As a rule of thumb, actions with a return value are lazy, the others are instant. Return type of a lazy action; When a lazy action is called, it returns a ROOT::RDF::RResultPtr<T>, where T is the type of the result of the action. The final result will be stored in the RResultPtr and can be retrieved by dereferencing it or via its GetValue method. Actions that return collections; If the type of the return value of an action is a collection, e.g. std::vector<int>, you can iterate its elements directly through the wrapping RResultPtr:; ROOT::RDataFrame df{5};; auto df1 = df.Define(""x"", []{ return 42; });; for (const auto &el: df1.Take<int>(""x"")){; std::cout << ""Element: "" << el << ""\n"";; }; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::TakeRResultPtr< COLL > Take(std::string_view column="""")Return a collection of values of a column (lazy action, returns a std::vector by default).Definition RInterface.hxx:1592;",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:36510,Security,access,access,36510," ""title"", 10, 0, 10), ""x""); ; print(sum.GetValue()); h.Draw(); The main goal of this package is to support running any RDataFrame application distributedly. Nonetheless, not all parts of the RDataFrame API currently work with this package. The subset that is currently available is:; AsNumpy; Count; Define; DefinePerSample; Filter; Graph; Histo[1,2,3]D; HistoND; Max; Mean; Min; Profile[1,2,3]D; Redefine; Snapshot; Stats; StdDev; Sum; Systematic variations: Vary and VariationsFor.; Parallel submission of distributed graphs: RunGraphs.; Information about the dataframe: GetColumnNames. with support for more operations coming in the future. Data sources other than TTree and TChain (e.g. CSV, RNTuple) are currently not supported.; NoteThe distributed RDataFrame module requires at least Python version 3.8. Connecting to a Spark cluster; In order to distribute the RDataFrame workload, you can connect to a Spark cluster you have access to through the official Spark API, then hook the connection instance to the distributed RDataFrame object like so:; import pyspark; import ROOT; ; # Create a SparkContext object with the right configuration for your Spark cluster; conf = SparkConf().setAppName(appName).setMaster(master); sc = SparkContext(conf=conf); ; # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; ; # The Spark RDataFrame constructor accepts an optional ""sparkcontext"" parameter; # and it will distribute the application to the connected cluster; df = RDataFrame(""mytree"", ""myfile.root"", sparkcontext = sc); If an instance of SparkContext is not provided, the default behaviour is to create one in the background for you. Connecting to a Dask cluster; Similarly, you can connect to a Dask cluster by creating your own connection object which internally operates with one of the cluster schedulers supported by Dask (more information in the Dask distributed docs):; import ROOT; from dask.distributed import Clien",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:37899,Security,expose,exposes,37899,"conf); ; # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; ; # The Spark RDataFrame constructor accepts an optional ""sparkcontext"" parameter; # and it will distribute the application to the connected cluster; df = RDataFrame(""mytree"", ""myfile.root"", sparkcontext = sc); If an instance of SparkContext is not provided, the default behaviour is to create one in the background for you. Connecting to a Dask cluster; Similarly, you can connect to a Dask cluster by creating your own connection object which internally operates with one of the cluster schedulers supported by Dask (more information in the Dask distributed docs):; import ROOT; from dask.distributed import Client; ; # Point RDataFrame calls to the Dask specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; ; # In a Python script the Dask client needs to be initalized in a context; # Jupyter notebooks / Python session don't need this; if __name__ == ""__main__"":; # With an already setup cluster that exposes a Dask scheduler endpoint; client = Client(""dask_scheduler.domain.com:8786""); ; # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); If an instance of distributed.Client is not provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine using all cores available. Choosing the number of distributed tasks; A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but generically tries to infer how many cores are available in the cluster through the connection object. The number of tasks will b",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:39683,Security,access,access,39683,"kend-dependent, but generically tries to infer how many cores are available in the cluster through the connection object. The number of tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to a batch system. The client object created at the beginning of the application does not automatically know how many cores will be available during distributed execution, since the jobs are submitted to the batch system after the creation of the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks.; The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional keyword argument npartitions when creating the RDataFrame object. This parameter is accepted irrespectively of the backend used:; import ROOT; ; # Define correct imports and access the distributed RDataFrame appropriate for the; # backend used in the analysis; RDataFrame = ROOT.RDF.Experimental.Distributed.[BACKEND].RDataFrame; ; if __name__ == ""__main__"":; # The `npartitions` optional argument tells the RDataFrame how many tasks are desired; df = RDataFrame(""mytree"",""myfile.root"", npartitions=NPARTITIONS); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); Note that when processing a TTree or TChain dataset, the npartitions value should not exceed the number of clusters in the dataset. The number of clusters in a TTree can be retrieved by typing rootls -lt myfile.root at a command line. Distributed Snapshot; The Snapshot operation behaves slightly differently when executed distributedly. First off, it requires the path supplied to the Snapshot call to be accessible from any worker of the cluster and from the client machine (in general it should be provided as an absolute path). Another important difference is ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:40523,Security,access,accessible,40523," the RDataFrame object. This parameter is accepted irrespectively of the backend used:; import ROOT; ; # Define correct imports and access the distributed RDataFrame appropriate for the; # backend used in the analysis; RDataFrame = ROOT.RDF.Experimental.Distributed.[BACKEND].RDataFrame; ; if __name__ == ""__main__"":; # The `npartitions` optional argument tells the RDataFrame how many tasks are desired; df = RDataFrame(""mytree"",""myfile.root"", npartitions=NPARTITIONS); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); Note that when processing a TTree or TChain dataset, the npartitions value should not exceed the number of clusters in the dataset. The number of clusters in a TTree can be retrieved by typing rootls -lt myfile.root at a command line. Distributed Snapshot; The Snapshot operation behaves slightly differently when executed distributedly. First off, it requires the path supplied to the Snapshot call to be accessible from any worker of the cluster and from the client machine (in general it should be provided as an absolute path). Another important difference is that n separate files will be produced, where n is the number of dataset partitions. As with local RDataFrame, the result of a Snapshot on a distributed RDataFrame is another distributed RDataFrame on which we can define a new computation graph and run more distributed computations. Distributed RunGraphs; Submitting multiple distributed RDataFrame executions is supported through the RunGraphs function. Similarly to its local counterpart, the function expects an iterable of objects representing an RDataFrame action. Each action will be triggered concurrently to send multiple computation graphs to a distributed cluster at the same time:; import ROOT; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs; ; # Create 3 different dataframes and book an histogram on each one; histoproxies = [; RData",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:48681,Security,access,accessing,48681,"usage of ForeachSlot(). Parallel execution of multiple RDataFrame event loops; A complex analysis may require multiple separate RDataFrame computation graphs to produce all desired results. This poses the challenge that the event loops of each computation graph can be parallelized, but the different loops run sequentially, one after the other. On many-core architectures it might be desirable to run different event loops concurrently to improve resource usage. ROOT::RDF::RunGraphs() allows running multiple RDataFrame event loops concurrently: ROOT::EnableImplicitMT();; ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible. For instance, Filter(""x > 0"") requires just-in-time compilation of the corresponding C++ logic, while the equivalent Filter([](float x) { return x > 0.; }, {""x""}) does not. Similarly, Histo1D(""x"") requires just-in-time compilation after the type of x is retrieved from the dataset, while Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:53825,Security,access,access,53825,"ax to define systematic variations. This is done in two steps: a) register variations for one or more existing columns using Vary() and b) extract variations of normal RDataFrame results using VariationsFor(). In between these steps, no other change to the analysis code is required: the presence of systematic variations for certain columns is automatically propagated through filters, defines and actions, and RDataFrame will take these dependencies into account when producing varied results. VariationsFor() is included in header ROOT/RDFHelpers.hxx. The compiled C++ programs must include this header explicitly, this is not required for ROOT macros.; An example usage of Vary() and VariationsFor() in C++:; auto nominal_hx =; df.Vary(""pt"", ""ROOT::RVecD{pt*0.9f, pt*1.1f}"", {""down"", ""up""}); .Filter(""pt > pt_cut""); .Define(""x"", someFunc, {""pt""}); .Histo1D<float>(""x"");; ; // request the generation of varied results from the nominal_hx; ROOT::RDF::Experimental::RResultMap<TH1D> hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; ; // the event loop runs here, upon first access to any of the results or varied results:; hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; ROOT::RDF::Experimental::RResultMapDefinition RResultMap.hxx:98; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second to the tag ""up""). The full variation name will be composed of the varied column name and the variation tags (e.g. ""pt:down"", ""pt:up"" in this exampl",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:65062,Security,inject,inject,65062,"mmon one such as int, double, char or float it is nonetheless good practice to specify it as a template parameter to the action itself, like this: df.Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing x = 0 rather than x == 0:; // this throws an error (note the typo); df.Define(""x"", ""0"").Filter(""x = 0"");. User-defined custom actions; RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; Implementing custom actions with Book(); Through the Book() method, users can implement a custom action and have access to the same features that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:; #include <ROOT/RDataFrame.hxx>; #include <memory>; ; class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; std::shared_ptr<int> fFinalResult = std::make_shared<int>(0);; std::vector<int> fPerThreadResults;; ; public:; // We use a public type alias to advertise the type of the result of this action; using Result_t = int;; ; MyCounter(unsigned int nSlots) : fPerThreadResults(nSlots) {}; ; // Called before the event loop to retrieve the address of the result that will be filled/generated.; std::shared_ptr<int> GetResultPtr() const { return fFinalResult; }; ; // Called at the beginn",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:65253,Security,access,access,65253,".Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing x = 0 rather than x == 0:; // this throws an error (note the typo); df.Define(""x"", ""0"").Filter(""x = 0"");. User-defined custom actions; RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; Implementing custom actions with Book(); Through the Book() method, users can implement a custom action and have access to the same features that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:; #include <ROOT/RDataFrame.hxx>; #include <memory>; ; class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; std::shared_ptr<int> fFinalResult = std::make_shared<int>(0);; std::vector<int> fPerThreadResults;; ; public:; // We use a public type alias to advertise the type of the result of this action; using Result_t = int;; ; MyCounter(unsigned int nSlots) : fPerThreadResults(nSlots) {}; ; // Called before the event loop to retrieve the address of the result that will be filled/generated.; std::shared_ptr<int> GetResultPtr() const { return fFinalResult; }; ; // Called at the beginning of the event loop.; void Initialize() {}; ; // Called at the beginning of each processing task.; void InitTask(TTreeReader *, int) {}; ; /// Call",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:77587,Security,access,accessed,77587,"(const std::string &jsonFile)Factory method to create an RDataFrame from a JSON specification file.Definition RDataFrame.cxx:1729; The input dataset specification JSON file needs to be provided by the user and it describes all necessary samples and their associated metadata information. The main required key is the ""samples"" (at least one sample is needed) and the required sub-keys for each sample are ""trees"" and ""files"". Additionally, one can specify a metadata dictionary for each sample in the ""metadata"" key.; A simple example for the formatting of the specification in the JSON file is the following:; {; ""samples"": {; ""sampleA"": {; ""trees"": [""tree1"", ""tree2""],; ""files"": [""file1.root"", ""file2.root""],; ""metadata"": {; ""lumi"": 10000.0, ; ""xsec"": 1.0,; ""sample_category"" = ""data""; }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {; ""lumi"": 0.5, ; ""xsec"": 1.5,; ""sample_category"" = ""MC_background""; }; }; }; }; The metadata information from the specification file can be then accessed using the DefinePerSample function. For example, to access luminosity information (stored as a double):; df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); or sample_category information (stored as a string):; df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); or directly the filename:; df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also provides a corresponding exemplary JSON file for the dataset specification. Adding a progress bar; A progress bar showing the processed event statistics can be added to any RDataFrame program. The event statistics include elapsed time, currently processed file, currently processed events, the rate of event processing and an estimated remaining time (per file being processed). It is recorded and printed in the terminal every m events and every n ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:77648,Security,access,access,77648,"ame.cxx:1729; The input dataset specification JSON file needs to be provided by the user and it describes all necessary samples and their associated metadata information. The main required key is the ""samples"" (at least one sample is needed) and the required sub-keys for each sample are ""trees"" and ""files"". Additionally, one can specify a metadata dictionary for each sample in the ""metadata"" key.; A simple example for the formatting of the specification in the JSON file is the following:; {; ""samples"": {; ""sampleA"": {; ""trees"": [""tree1"", ""tree2""],; ""files"": [""file1.root"", ""file2.root""],; ""metadata"": {; ""lumi"": 10000.0, ; ""xsec"": 1.0,; ""sample_category"" = ""data""; }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {; ""lumi"": 0.5, ; ""xsec"": 1.5,; ""sample_category"" = ""MC_background""; }; }; }; }; The metadata information from the specification file can be then accessed using the DefinePerSample function. For example, to access luminosity information (stored as a double):; df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); or sample_category information (stored as a string):; df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); or directly the filename:; df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also provides a corresponding exemplary JSON file for the dataset specification. Adding a progress bar; A progress bar showing the processed event statistics can be added to any RDataFrame program. The event statistics include elapsed time, currently processed file, currently processed events, the rate of event processing and an estimated remaining time (per file being processed). It is recorded and printed in the terminal every m events and every n seconds (by default m = 1000 and n = 1). The ProgressBar can be also added when the multithread (MT) mode is enabled.;",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:109670,Security,access,access,109670,"nterface for the documentation of the methods available. ; Definition at line 1630 of file RDataFrame.cxx. ◆ RDataFrame() [6/10]. ROOT::RDataFrame::RDataFrame ; (; ULong64_t ; numEntries). Build a dataframe that generates numEntries entries. ; Parameters. [in]numEntriesThe number of entries to generate. An empty-source dataframe constructed with a number of entries will generate those entries on the fly when some action is triggered, and it will do so for all the previously-defined columns. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1643 of file RDataFrame.cxx. ◆ RDataFrame() [7/10]. ROOT::RDataFrame::RDataFrame ; (; std::unique_ptr< ROOT::RDF::RDataSource > ; ds, . const ColumnNames_t & ; defaultColumns = {} . ). Build dataframe associated to data source. ; Parameters. [in]dsThe data source object. ; [in]defaultColumnsCollection of default column names to fall back to when none is specified. A dataframe associated to a data source will query it to access column values. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1656 of file RDataFrame.cxx. ◆ RDataFrame() [8/10]. ROOT::RDataFrame::RDataFrame ; (; ROOT::RDF::Experimental::RDatasetSpec ; spec). Build dataframe from an RDatasetSpec object. ; Parameters. [in]specThe dataset specification object. A dataset specification includes trees and file names, as well as an optional friend list and/or entry range. Example usage from Python:; spec = (; ROOT.RDF.Experimental.RDatasetSpec(); .AddSample((""data"", ""tree"", ""file.root"")); .WithGlobalFriends(""friendTree"", ""friend.root"", ""alias""); .WithGlobalRange((100, 200)); ); df = ROOT.RDataFrame(spec); ROOT::RDF::Experimental::RDatasetSpecThe dataset specification for RDataFrame.Definition RDatasetSpec.hxx:47; See also ROOT::RDataFrame::FromSpec(). ; Definition at line 1680 of file RDataFrame.cxx. ◆ RDataFrame() [9/10]. ROOT::RDataFrame::RDataFrame ; (; const RDataFrame & ; ).",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:2495,Testability,log,logs,2495,"MTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and return values; Storing RDataFrame objects in collections; Executing callbacks every N events; Default column lists; Special helper columns: `rdfentry_` and `rdfslot_`; Just-in-time compilation: column type inference and explicit declaration of column types; User-defined custom actions; Dataset joins with friend trees; Reading data formats other than ROOT trees; Computation graphs (storing and reusing sets of transformations); Visualizing the computation graph; Activating RDataFrame execution logs; Creating an RDataFrame from a dataset specification file; Adding a progress bar. Efficient analysis in Python; Class reference. Cheat sheet; These are the operations which can be performed with RDataFrame. Transformations; Transformations are a way to manipulate the data. Transformation Description . Alias() Introduce an alias for a particular column name. . Define() Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the pts of ""good"" muons). . DefinePerSample() Define a new column that is updated when the input sampl",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:38499,Testability,log,logic,38499,"buted docs):; import ROOT; from dask.distributed import Client; ; # Point RDataFrame calls to the Dask specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; ; # In a Python script the Dask client needs to be initalized in a context; # Jupyter notebooks / Python session don't need this; if __name__ == ""__main__"":; # With an already setup cluster that exposes a Dask scheduler endpoint; client = Client(""dask_scheduler.domain.com:8786""); ; # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); If an instance of distributed.Client is not provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine using all cores available. Choosing the number of distributed tasks; A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but generically tries to infer how many cores are available in the cluster through the connection object. The number of tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to a batch system. The client object created at the beginning of the application does not automatically know how many cores will be available during distributed execution, since the jobs are submitted to the batch system after the creation of the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks.; The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional keyword",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:38669,Testability,log,logic,38669,"sk client needs to be initalized in a context; # Jupyter notebooks / Python session don't need this; if __name__ == ""__main__"":; # With an already setup cluster that exposes a Dask scheduler endpoint; client = Client(""dask_scheduler.domain.com:8786""); ; # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); If an instance of distributed.Client is not provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine using all cores available. Choosing the number of distributed tasks; A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but generically tries to infer how many cores are available in the cluster through the connection object. The number of tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to a batch system. The client object created at the beginning of the application does not automatically know how many cores will be available during distributed execution, since the jobs are submitted to the batch system after the creation of the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks.; The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional keyword argument npartitions when creating the RDataFrame object. This parameter is accepted irrespectively of the backend used:; import ROOT; ; # Define correct imports and access the distributed RDataFrame appropriate for ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:39331,Testability,log,logic,39331,"un the computations in the local machine using all cores available. Choosing the number of distributed tasks; A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but generically tries to infer how many cores are available in the cluster through the connection object. The number of tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to a batch system. The client object created at the beginning of the application does not automatically know how many cores will be available during distributed execution, since the jobs are submitted to the batch system after the creation of the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks.; The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional keyword argument npartitions when creating the RDataFrame object. This parameter is accepted irrespectively of the backend used:; import ROOT; ; # Define correct imports and access the distributed RDataFrame appropriate for the; # backend used in the analysis; RDataFrame = ROOT.RDF.Experimental.Distributed.[BACKEND].RDataFrame; ; if __name__ == ""__main__"":; # The `npartitions` optional argument tells the RDataFrame how many tasks are desired; df = RDataFrame(""mytree"",""myfile.root"", npartitions=NPARTITIONS); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); Note that when processing a TTree or TChain dataset, the npartitions value should not exceed the number of clusters in the dataset. The number of clusters in a TTree can be retrieved by typing rootls -lt myfile.root at a command line.",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:49533,Testability,log,logic,49533,"ROOT::RDataFrame df1(""tree1"", ""f1.root"");; ROOT::RDataFrame df2(""tree2"", ""f2.root"");; auto histo1 = df1.Histo1D(""x"");; auto histo2 = df2.Histo1D(""y"");; ; // just accessing result pointers, the event loops of separate RDataFrames run one after the other; histo1->Draw(); // runs first multi-thread event loop; histo2->Draw(); // runs second multi-thread event loop; ; // alternatively, with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently; ROOT::RDF::RunGraphs({histo1, histo2});; histo1->Draw(); // results can then be used as usual; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Performance considerations; To obtain the maximum performance out of RDataFrame, make sure to avoid just-in-time compiled versions of transformations and actions if at all possible. For instance, Filter(""x > 0"") requires just-in-time compilation of the corresponding C++ logic, while the equivalent Filter([](float x) { return x > 0.; }, {""x""}) does not. Similarly, Histo1D(""x"") requires just-in-time compilation after the type of x is retrieved from the dataset, while Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See Efficient analysis in Python for possible ways to speed up hot paths in this case.; Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations for all RDataFrame computation graphs before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not de",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:50662,Testability,log,logging,50662,"ile Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See Efficient analysis in Python for possible ways to speed up hot paths in this case.; Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations for all RDataFrame computation graphs before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See Activating RDataFrame execution logs. Memory usage; There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create many RDataFrames one after the other. Possible mitig",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:50863,Testability,log,logs,50863,"n applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See Efficient analysis in Python for possible ways to speed up hot paths in this case.; Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations for all RDataFrame computation graphs before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See Activating RDataFrame execution logs. Memory usage; There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create many RDataFrames one after the other. Possible mitigations include creating and running each RDataFrame event loop in a sub-process, or booking all operations for all diff",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:69841,Testability,log,logical,69841,"dfslot_ for more information on the slot parameter). We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"": // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned int> ns(nSlots, 0);; ; df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; double sumSq = std::accumulate(sumSqs.begin(), sumSqs.end(), 0.); // sum all squares; unsigned int n = std::accumulate(ns.begin(), ns.end(), 0); // sum all counts; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; Notice how we created one double variable for each processing slot and later merged their results via std::accumulate. Dataset joins with friend trees; Vertically concatenating multiple trees that have the same columns (creating a logical dataset with the same columns and more rows) is trivial in RDataFrame: just pass the tree name and a list of file names to RDataFrame's constructor, or create a TChain out of the desired trees and pass that to RDataFrame.; Horizontal concatenations of trees or chains (creating a logical dataset with the same number of rows and the union of the columns of multiple trees) leverages TTree's ""friend"" mechanism.; Simple joins of trees that do not have the same number of rows are also possible with indexed friend trees (see below).; To use friend trees in RDataFrame, set up trees with the appropriate relationships and then instantiate an RDataFrame with the main tree:; TTree main([...]);; TTree friend([...]);; main.AddFriend(&friend, ""myFriend"");; ; RDataFrame df(main);; auto df2 = df.Filter(""myFriend.MyCol == 42"");; The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above, or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:70129,Testability,log,logical,70129,"ots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned int> ns(nSlots, 0);; ; df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; double sumSq = std::accumulate(sumSqs.begin(), sumSqs.end(), 0.); // sum all squares; unsigned int n = std::accumulate(ns.begin(), ns.end(), 0); // sum all counts; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; Notice how we created one double variable for each processing slot and later merged their results via std::accumulate. Dataset joins with friend trees; Vertically concatenating multiple trees that have the same columns (creating a logical dataset with the same columns and more rows) is trivial in RDataFrame: just pass the tree name and a list of file names to RDataFrame's constructor, or create a TChain out of the desired trees and pass that to RDataFrame.; Horizontal concatenations of trees or chains (creating a logical dataset with the same number of rows and the union of the columns of multiple trees) leverages TTree's ""friend"" mechanism.; Simple joins of trees that do not have the same number of rows are also possible with indexed friend trees (see below).; To use friend trees in RDataFrame, set up trees with the appropriate relationships and then instantiate an RDataFrame with the main tree:; TTree main([...]);; TTree friend([...]);; main.AddFriend(&friend, ""myFriend"");; ; RDataFrame df(main);; auto df2 = df.Filter(""myFriend.MyCol == 42"");; The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above, or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of ""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; NoteA common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their entries (block-wise) shuffled wit",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:75130,Testability,log,logs,75130,"mputation graph is printed.; Following there is an example of usage: // First, a sample computational graph is built; ROOT::RDataFrame df(""tree"", ""f.root"");; ; auto df2 = df.Define(""x"", []() { return 1; }); .Filter(""col0 % 1 == col0""); .Filter([](int b1) { return b1 <2; }, {""cut1""}); .Define(""y"", []() { return 1; });; ; auto count = df2.Count();; ; // Prints the graph to the rd1.dot file in the current directory; ROOT::RDF::SaveGraph(df, ""./mydot.dot"");; // Prints the graph to standard output; ROOT::RDF::SaveGraph(df);; ROOT::RDF::SaveGraphstd::string SaveGraph(NodeType node)Create a graphviz representation of the dataframe computation graph, return it as a string.Definition RDFHelpers.hxx:120; The generated graph can be rendered using one of the graphviz filters, e.g. dot. For instance, the image below can be generated with the following command: $ dot -Tpng computation_graph.dot -ocomputation_graph.png. Activating RDataFrame execution logs; RDataFrame has experimental support for verbose logging of the event loop runtimes and other interesting related information. It is activated as follows: #include <ROOT/RLogger.hxx>; ; // this increases RDF's verbosity level as long as the `verbosity` variable is in scope; auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel::kInfo);; RLogger.hxx; ROOT::Experimental::RLogScopedVerbosityChange the verbosity level (global or specific to the RLogChannel passed to the constructor) for the ...Definition RLogger.hxx:243; ROOT::Detail::RDF::RDFLogChannelROOT::Experimental::RLogChannel & RDFLogChannel()Definition RDFUtils.cxx:37; ROOT::Experimental::ELogLevel::kInfo@ kInfoInformational messages; used for instance for tracing.; or in Python: import ROOT; ; verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kInfo); More information (e.g. start and end of each multi-thread task) is printed using ELogLevel.kDebu",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:75184,Testability,log,logging,75184,"mputation graph is printed.; Following there is an example of usage: // First, a sample computational graph is built; ROOT::RDataFrame df(""tree"", ""f.root"");; ; auto df2 = df.Define(""x"", []() { return 1; }); .Filter(""col0 % 1 == col0""); .Filter([](int b1) { return b1 <2; }, {""cut1""}); .Define(""y"", []() { return 1; });; ; auto count = df2.Count();; ; // Prints the graph to the rd1.dot file in the current directory; ROOT::RDF::SaveGraph(df, ""./mydot.dot"");; // Prints the graph to standard output; ROOT::RDF::SaveGraph(df);; ROOT::RDF::SaveGraphstd::string SaveGraph(NodeType node)Create a graphviz representation of the dataframe computation graph, return it as a string.Definition RDFHelpers.hxx:120; The generated graph can be rendered using one of the graphviz filters, e.g. dot. For instance, the image below can be generated with the following command: $ dot -Tpng computation_graph.dot -ocomputation_graph.png. Activating RDataFrame execution logs; RDataFrame has experimental support for verbose logging of the event loop runtimes and other interesting related information. It is activated as follows: #include <ROOT/RLogger.hxx>; ; // this increases RDF's verbosity level as long as the `verbosity` variable is in scope; auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel::kInfo);; RLogger.hxx; ROOT::Experimental::RLogScopedVerbosityChange the verbosity level (global or specific to the RLogChannel passed to the constructor) for the ...Definition RLogger.hxx:243; ROOT::Detail::RDF::RDFLogChannelROOT::Experimental::RLogChannel & RDFLogChannel()Definition RDFUtils.cxx:37; ROOT::Experimental::ELogLevel::kInfo@ kInfoInformational messages; used for instance for tracing.; or in Python: import ROOT; ; verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kInfo); More information (e.g. start and end of each multi-thread task) is printed using ELogLevel.kDebu",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:614,Usability,guid,guide,614,". ROOT: ROOT::RDataFrame Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::RDataFrame Class ReferenceDataframe. ; ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. ; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines completely transparently.; Skip to the class reference or keep reading for the user guide.; In a nutshell: ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; myHisto->Draw(); // Event loop is run here, upon first access to a result; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and ret",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:2568,Usability,progress bar,progress bar,2568,"MTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and return values; Storing RDataFrame objects in collections; Executing callbacks every N events; Default column lists; Special helper columns: `rdfentry_` and `rdfslot_`; Just-in-time compilation: column type inference and explicit declaration of column types; User-defined custom actions; Dataset joins with friend trees; Reading data formats other than ROOT trees; Computation graphs (storing and reusing sets of transformations); Visualizing the computation graph; Activating RDataFrame execution logs; Creating an RDataFrame from a dataset specification file; Adding a progress bar. Efficient analysis in Python; Class reference. Cheat sheet; These are the operations which can be performed with RDataFrame. Transformations; Transformations are a way to manipulate the data. Transformation Description . Alias() Introduce an alias for a particular column name. . Define() Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the pts of ""good"" muons). . DefinePerSample() Define a new column that is updated when the input sampl",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:4571,Usability,guid,guide,4571,"fineSlot() works just as well with single-thread execution: in that case slot will always be 0. . DefineSlotEntry() Same as DefineSlot(), but the entry number is passed in addition to the slot number. This is meant as a helper in case the expression depends on the entry number. For details about entry numbers in multi-threaded runs, see here. . Filter() Filter rows based on user-defined conditions. . Range() Filter rows based on entry number (single-thread only). . Redefine() Overwrite the value and/or type of an existing column. See Define() for more information. . RedefineSlot() Overwrite the value and/or type of an existing column. See DefineSlot() for more information. . RedefineSlotEntry() Overwrite the value and/or type of an existing column. See DefineSlotEntry() for more information. . Vary() Register systematic variations for an existing column. Varied results are then extracted via VariationsFor(). . Actions; Actions aggregate data into a result. Each one is described in more detail in the reference guide.; In the following, whenever we say an action ""returns"" something, we always mean it returns a smart pointer to it. Actions only act on events that pass all preceding filters.; Lazy actions only trigger the event loop when one of the results is accessed for the first time, making it easy to produce many different results in one event loop. Instant actions trigger the event loop instantly. Lazy action Description . Aggregate() Execute a user-defined accumulation operation on the processed column values. . Book() Book execution of a custom action using a user-defined helper object. . Cache() Cache column values in memory. Custom columns can be cached as well, filtered entries are not cached. Users can specify which columns to save (default is all). . Count() Return the number of events processed. Useful e.g. to get a quick count of the number of events passing a Filter. . Display() Provides a printable representation of the dataset contents. The method retur",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:8964,Usability,simpl,simply,8964,"r-defined function on each entry. Users are responsible for the thread-safety of this callable when executing with implicit multi-threading enabled. . ForeachSlot() Same as Foreach(), but the user-defined function must take an extra unsigned int slot as its first parameter. slot will take a different value, 0 to nThreads - 1, for each thread of execution. This is meant as a helper in writing thread-safe Foreach() actions when using RDataFrame after ROOT::EnableImplicitMT(). ForeachSlot() works just as well with single-thread execution: in that case slot will always be 0. . Snapshot() Write the processed dataset to disk, in a new TTree and TFile. Custom columns can be saved as well, filtered entries are not saved. Users can specify which columns to save (default is all). Snapshot, by default, overwrites the output file if it already exists. Snapshot() can be made lazy setting the appropriate flag in the snapshot options. . Queries; These operations do not modify the dataframe or book computations but simply return information on the RDataFrame object. Operation Description . Describe() Get useful information describing the dataframe, e.g. columns and their types. . GetColumnNames() Get the names of all the available columns of the dataset. . GetColumnType() Return the type of a given column as a string. . GetColumnTypeNamesList() Return the list of type names of columns in the dataset. . GetDefinedColumnNames() Get the names of all the defined columns. . GetFilterNames() Return the names of all filters in the computation graph. . GetNRuns() Return the number of event loops run by this RDataFrame instance so far. . GetNSlots() Return the number of processing slots that RDataFrame will use during the event loop (i.e. the concurrency level). . SaveGraph() Store the computation graph of an RDataFrame in DOT format (graphviz) for easy inspection. See the relevant section for details. . Introduction; Users define their analysis as a sequence of operations to be performed on",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:12052,Usability,simpl,simple,12052,"the first time. Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them.; The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the crash course to discover more idiomatic and flexible ways to express analyses with RDataFrame. . TTreeReader ROOT::RDataFrame . TTreeReader reader(""myTree"", file);; TTreeReaderValue<A_t> a(reader, ""A"");; TTreeReaderValue<B_t> b(reader, ""B"");; TTreeReaderValue<C_t> c(reader, ""C"");; while(reader.Next()) {; if(IsGoodEvent(*a, *b, *c)); DoStuff(*a, *b, *c);; }; b#define b(i)Definition RSha256.hxx:100; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:146; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:44; ROOT::RDataFrame d(""myTree"", file, {""A"", ""B"", ""C""});; d.Filter(IsGoodEvent).Foreach(DoStuff);; ROOT::RDF::RInterface::FilterRInterface< RDFDetail::RFilter< F, Proxied >, DS_t > Filter(F f, const ColumnNames_t &columns={}, std::string_view name="""")Append a filter to the call graph.Definition RInterface.hxx:216; . TTree::Draw ROOT::RDataFrame . auto *tree = file->Get<TTree>(""myTree"");; tree->Draw(""x"", ""y > 2"");; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; ROOT::RDataFrame df(""myTree"", file);; auto h = df.Filter(""y > 2"").Histo1D(""x"");; h->Draw(); h#define h(i)Definition RSha256.hxx:106; . tree->Draw(""jet_eta"", ""weight*(event == 1)"");; df.Filter(""event == 1"").Histo1D(""jet_eta"", ""weight"");; // or the fully compiled version:; df.Filter([] (ULong64_t e) { return e == 1; }, {""event""}).Histo1D<RVec<float>>(""jet_eta"", ""weight"");; e#define e(i)Definition RSha256.hxx:103; ULong64_tunsigned ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:15824,Usability,simpl,simple,15824,"Frame d5(""myTree"", files);; RDataFrame d6(""myTree"", ""file*.root""); // the glob is passed as-is to TChain's constructor; RDataFrame d7(chain);; f#define f(i)Definition RSha256.hxx:104; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; Additionally, users can construct an RDataFrame with no data source by passing an integer number. This is the number of rows that will be generated by this RDataFrame. RDataFrame d(10); // a RDF with 10 entries (and no columns/branches, for now); d.Foreach([] { static int i = 0; std::cout << i++ << std::endl; }); // silly example usage: count to ten; This is useful to generate simple datasets on the fly: the contents of each event can be specified with Define() (explained below). For example, we have used this method to generate Pythia events and write them to disk in parallel (with the Snapshot action).; For data sources other than TTrees and TChains, RDataFrame objects are constructed using ad-hoc factory functions (see e.g. FromCSV(), FromSqlite(), FromArrow()):; auto df = ROOT::RDF::FromCSV(""input.csv"");; // use df as usual; ROOT::RDF::FromCSVRDataFrame FromCSV(std::string_view fileName, bool readHeaders=true, char delimiter=',', Long64_t linesChunkSize=-1LL, std::unordered_map< std::string, char > &&colTypes={})Factory method to create a CSV RDataFrame.Definition RCsvDS.cxx:558. Filling a histogram; Let's now tackle a very common task, filling a histogram: // Fill a TH1D with the ""MET"" branch; RDataFrame d(""myTree"", ""file.root"");; auto h = d.Histo1D(""MET"");; h->Draw();; The first line creates an RDataFrame associated to the TTree ""myTree"". ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:18222,Usability,simpl,simple,18222,"ts are wrapped in smart pointers; we'll see why in a minute. Applying a filter; Let's say we want to cut over the value of branch ""MET"" and count how many events pass this cut. This is one way to do it: RDataFrame d(""myTree"", ""file.root"");; auto c = d.Filter(""MET > 4."").Count(); // computations booked, not run; std::cout << *c << std::endl; // computations run here, upon first access to the result; The filter string (which must contain a valid C++ expression) is applied to the specified columns for each event; the name and types of the columns are inferred automatically. The string expression is required to return a bool which signals whether the event passes the filter (true) or not (false).; You can think of your data as ""flowing"" through the chain of calls, being transformed, filtered and finally used to perform actions. Multiple Filter() calls can be chained one after another.; Using string filters is nice for simple things, but they are limited to specifying the equivalent of a single return statement or the body of a lambda, so it's cumbersome to use strings with more complex filters. They also add a small runtime overhead, as ROOT needs to just-in-time compile the string into C++ code. When more freedom is required or runtime performance is very important, a C++ callable can be specified instead (a lambda in the following snippet, but it can be any kind of function or even a functor class), together with a list of column names. This snippet is analogous to the one above: RDataFrame d(""myTree"", ""file.root"");; auto metCut = [](double x) { return x > 4.; }; // a C++11 lambda function checking ""x > 4""; auto c = d.Filter(metCut, {""MET""}).Count();; std::cout << *c << std::endl;; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::CountRResultPtr< ULong64_t > Count()Return the number of entries processed (lazy action).Definition RInterface.hxx:1560; xDouble_t x[n]Definition legend1.C:17; An example of a more complex filter expressed as a string containing C++ code is ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:22888,Usability,simpl,simple,22888,"using PyROOT.; Previously, when showing the different ways an RDataFrame can be created, we showed a constructor that takes a number of entries as a parameter. In the following example we show how to combine such an ""empty"" RDataFrame with Define() transformations to create a dataset on the fly. We then save the generated data on disk using the Snapshot() action. RDataFrame d(100); // an RDF that will generate 100 entries (currently empty); int x = -1;; auto d_with_columns = d.Define(""x"", [&x] { return ++x; }); .Define(""xx"", [&x] { return x*x; });; d_with_columns.Snapshot(""myNewTree"", ""newfile.root"");; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::DefineRInterface< RDFDetail::RLoopManager, DS_t > Define(std::string_view name, F expression, const ColumnNames_t &columns={})Define a new column.Definition RInterface.hxx:338; This example is slightly more advanced than what we have seen so far. First, it makes use of lambda captures (a simple way to make external variables available inside the body of C++ lambdas) to act on the same variable x from both Define() transformations. Second, we have stored the transformed dataframe in a variable. This is always possible, since at each point of the transformation chain users can store the status of the dataframe for further use (more on this below).; You can read more about defining new columns here. A graph composed of two branches, one starting with a filter and one with a define. The end point of a branch is always an action. Running on a range of entries; It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act exclusively on the entries passing the filter – it will not even count the other entries! The same goes for a Ra",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:28370,Usability,simpl,simply,28370,"hether the event has passed the selection (true) or not (false). It should perform ""read-only"" operations on the columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column names are used as variable names (e.g. Filter(""x[0] + x[1] > 0"")). This is a convenience feature that comes with a certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event loop. See the paragraph about ""Just-in-time compilation"" below for more information.; RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed in order and the first one returning false causes the event to be discarded and triggers the processing of the next entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for each entry: after the first access it simply serves a cached result.; Named filters and cutflow reports; An optional string parameter name can be passed to the Filter() method to create a named filter. Named filters work as usual, but also keep track of how many entries they accept and reject.; Statistics are retrieved through a call to the Report() method:. when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all named filters declared up to that point; when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative all named filters in the section of the chain between the main RDataFrame and that node (included). Stats are stored in the same order as named filters have been added to the graph, and refer to the latest event-loop that has been run using the relevant RDataFrame. Ranges; When RDataFrame is not being used in a mult",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:46668,Usability,simpl,simple,46668,"column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that different threads will employ different values of the slot parameter, where slot will be a number between 0 and GetNSlots() - 1. In other words, within a slot, computation runs sequentially and events are processed sequentially. Note that the same slot might be associated to different threads over the course of a single event loop, but two threads will never receive the same slot at the same time. This extra parameter might facilitate writi",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:50683,Usability,simpl,simplifies,50683,"ile Histo1D<float>(""x"") does not; the latter spelling should be preferred for performance-critical applications.; Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame. See Efficient analysis in Python for possible ways to speed up hot paths in this case.; Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations for all RDataFrame computation graphs before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See Activating RDataFrame execution logs. Memory usage; There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create many RDataFrames one after the other. Possible mitig",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:54857,Usability,simpl,simply,54857,"e results or varied results:; hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; ROOT::RDF::Experimental::RResultMapDefinition RResultMap.hxx:98; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second to the tag ""up""). The full variation name will be composed of the varied column name and the variation tags (e.g. ""pt:down"", ""pt:up"" in this example). Python usage looks similar.; Note how we use the ""pt"" column as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill the resulting histogram. To produce the varied results, RDataFrame will automatically execute the Filter and Define calls for each variation and fill the histogram with values and cuts that depend on the variation.; There is no limitation to the complexity of a Vary() expression. Just like for the Define() and Filter() calls, users are not limited to string expressions but they can also pass any valid C++ callable, including lambda functions and complex functors. The callable can be applied to zero or more existing columns and it will always receive their nominal value in input.; Varying multiple columns in lockstep; In the following Python snippet we use the Vary() signature that allows varying multiple columns simultaneously or ""in lockstep"":; df.Vary([""pt"", ""eta""],; ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",; variationTags=[""down"", ""up""],; variationName=""ptAndEta""); The expression returns an RVec of two RVecs: each inner vect",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:57693,Usability,feedback,feedback,57693," similar:; auto df = _df.Vary(""pt"",; ""ROOT::RVecD{pt*0.9, pt*1.1}"",; {""down"", ""up""}); .Vary(""eta"",; [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; {""eta""},; 2);; ; auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; auto all_hs = VariationsFor(nom_h);; all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::VaryRInterface< RDFDetail::RLoopManager, DS_t > Vary(std::string_view colName, F &&expression, const ColumnNames_t &inputColumns, const std::vector< std::string > &variationTags, std::string_view variationName="""")Register systematic variations for a single existing column using custom variation tags.Definition RInterface.hxx:693; Note how we passed the integer 2 instead of a list of variation tags to the second Vary() invocation: this is a shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; NoteCurrently, VariationsFor() and RResultMap are in the ROOT::RDF::Experimental namespace, to indicate that these interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related programming model will be streamlined in future versions. Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to call VariationsFor() on them. These limitations will be lifted in future releases.; See the Vary() method for more information and this tutorial for an example usage of Vary and VariationsFor() in the analysis. RDataFrame objects as function arguments and return values; RDataFrame variables/nodes are relatively cheap to copy and it's possible to both pass them to (or move them into) functions and to return them from functions. However, in general each dataframe node will have a different C++ type, which includes all available compile-time information about what that node does. One way to cope with this complication is to use template functions and/or C++14 auto return types: template <t",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:58744,Usability,simpl,simpler,58744,"), Report() or Display() call cannot be varied (i.e. it is not possible to call VariationsFor() on them. These limitations will be lifted in future releases.; See the Vary() method for more information and this tutorial for an example usage of Vary and VariationsFor() in the analysis. RDataFrame objects as function arguments and return values; RDataFrame variables/nodes are relatively cheap to copy and it's possible to both pass them to (or move them into) functions and to return them from functions. However, in general each dataframe node will have a different C++ type, which includes all available compile-time information about what that node does. One way to cope with this complication is to use template functions and/or C++14 auto return types: template <typename RDF>; auto ApplySomeFilters(RDF df); {; return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; }; A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode: // a function that conditionally adds a Range to an RDataFrame node.; RNode MaybeAddRange(RNode df, bool mustAddRange); {; return mustAddRange ? df.Range(1) : df;; }; // use as :; ROOT::RDataFrame df(10);; auto maybeRangedDF = MaybeAddRange(df, true);; The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function ROOT.RDF.AsRNode. Storing RDataFrame objects in collections; ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a std::vector<RNode> or a std::map<std::string, RNode>:; std::vector<ROOT::RDF::RNode> dfs;; dfs.emplace_back(ROOT::RDataFrame(10));; dfs.emplace_back(dfs[0].Define(""x"", ""42.f""));. Executing callbacks every N events; It's possible to schedule execution o",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:59534,Usability,simpl,simple,59534,"his complication is to use template functions and/or C++14 auto return types: template <typename RDF>; auto ApplySomeFilters(RDF df); {; return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; }; A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode: // a function that conditionally adds a Range to an RDataFrame node.; RNode MaybeAddRange(RNode df, bool mustAddRange); {; return mustAddRange ? df.Range(1) : df;; }; // use as :; ROOT::RDataFrame df(10);; auto maybeRangedDF = MaybeAddRange(df, true);; The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function ROOT.RDF.AsRNode. Storing RDataFrame objects in collections; ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a std::vector<RNode> or a std::map<std::string, RNode>:; std::vector<ROOT::RDF::RNode> dfs;; dfs.emplace_back(ROOT::RDataFrame(10));; dfs.emplace_back(dfs[0].Define(""x"", ""42.f""));. Executing callbacks every N events; It's possible to schedule execution of arbitrary functions (callbacks) during the event loop. Callbacks can be used e.g. to inspect partial results of the analysis while the event loop is running, drawing a partially-filled histogram every time a certain number of new entries is processed, or displaying a progress bar while the event loop runs.; For example one can draw an up-to-date version of a result histogram every 100 entries like this: auto h = df.Histo1D(""x"");; TCanvas c(""c"",""x hist"");; h.OnPartialResult(100, [&c](TH1D &h_) { c.cd(); h_.Draw(); c.Update(); });; // event loop runs here, this final `Draw` is executed after the event loop is finished; h->Draw();; TCanvasThe Canvas class.Definition TCanva",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:60112,Usability,progress bar,progress bar,60112,"tAddRange); {; return mustAddRange ? df.Range(1) : df;; }; // use as :; ROOT::RDataFrame df(10);; auto maybeRangedDF = MaybeAddRange(df, true);; The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function ROOT.RDF.AsRNode. Storing RDataFrame objects in collections; ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a std::vector<RNode> or a std::map<std::string, RNode>:; std::vector<ROOT::RDF::RNode> dfs;; dfs.emplace_back(ROOT::RDataFrame(10));; dfs.emplace_back(dfs[0].Define(""x"", ""42.f""));. Executing callbacks every N events; It's possible to schedule execution of arbitrary functions (callbacks) during the event loop. Callbacks can be used e.g. to inspect partial results of the analysis while the event loop is running, drawing a partially-filled histogram every time a certain number of new entries is processed, or displaying a progress bar while the event loop runs.; For example one can draw an up-to-date version of a result histogram every 100 entries like this: auto h = df.Histo1D(""x"");; TCanvas c(""c"",""x hist"");; h.OnPartialResult(100, [&c](TH1D &h_) { c.cd(); h_.Draw(); c.Update(); });; // event loop runs here, this final `Draw` is executed after the event loop is finished; h->Draw();; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:669; Callbacks are registered to a ROOT::RDF::RResultPtr and must be callables that takes a reference to the result type as argument and return nothing. RDataFrame will invoke registered callbacks passing partial action results as arguments to them (e.g. a histogram filled with a part of the selected events).; Read more on ROOT::RDF::RResultPtr::OnPartialResult() and ROOT::RDF::RResultPtr::OnPartialResultSlot(). Default ",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:68496,Usability,simpl,simple,68496,"al for a more complete example.; Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and executes the callable on the values of those columns for each event that passes all upstream selections. It can be used to perform actions that are not already available in the interface. For example, the following snippet evaluates the root mean square of column ""x"": // Single-thread evaluation of RMS of column ""x"" using Foreach; double sumSq = 0.;; unsigned int n = 0;; df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; nconst Int_t nDefinition legend1.C:16; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach(): thread will execute the expression concurrently. The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of rms; but this is probably too much head-scratch for such a simple operation.; ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user expression with different slot parameters for different concurrent executions (see Special helper columns: rdfentry_ and rdfslot_ for more information on the slot parameter). We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"": // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned int> ns(nSlots, 0);; ; df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; double sumSq = std::accumulate(sumSqs.be",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:71327,Usability,simpl,simple,71327,"lso possible with indexed friend trees (see below).; To use friend trees in RDataFrame, set up trees with the appropriate relationships and then instantiate an RDataFrame with the main tree:; TTree main([...]);; TTree friend([...]);; main.AddFriend(&friend, ""myFriend"");; ; RDataFrame df(main);; auto df2 = df.Filter(""myFriend.MyCol == 42"");; The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above, or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of ""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; NoteA common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original one: rows will be mismatched.; Indexed friend trees provide a way to perform simple joins of multiple trees over a common column. When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the ""index"" columns have a value identical to the one in the main one. For example, in Python:; main_tree = ...; aux_tree = ...; ; # If a friend tree has an index on `commonColumn`, when the main tree loads; # a given row, it also loads the row of the friend tree that has the same; # value of `commonColumn`; aux_tree.BuildIndex(""commonColumn""); ; mainTree.AddFriend(aux_tree); ; df = ROOT.RDataFrame(mainTree); RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode. Reading data formats other than ROOT trees; RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; RDataFrame calls into concrete RDataSource implementations to retrieve information abou",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:77070,Usability,simpl,simple,77070,"inted using ELogLevel.kDebug and even more (e.g. a full dump of the generated code that RDataFrame just-in-time-compiles) using ELogLevel.kDebug+10. Creating an RDataFrame from a dataset specification file; RDataFrame can be created using a dataset specification JSON file:; import ROOT; ; df = ROOT.RDF.Experimental.FromSpec(""spec.json""); ROOT::RDF::Experimental::FromSpecROOT::RDataFrame FromSpec(const std::string &jsonFile)Factory method to create an RDataFrame from a JSON specification file.Definition RDataFrame.cxx:1729; The input dataset specification JSON file needs to be provided by the user and it describes all necessary samples and their associated metadata information. The main required key is the ""samples"" (at least one sample is needed) and the required sub-keys for each sample are ""trees"" and ""files"". Additionally, one can specify a metadata dictionary for each sample in the ""metadata"" key.; A simple example for the formatting of the specification in the JSON file is the following:; {; ""samples"": {; ""sampleA"": {; ""trees"": [""tree1"", ""tree2""],; ""files"": [""file1.root"", ""file2.root""],; ""metadata"": {; ""lumi"": 10000.0, ; ""xsec"": 1.0,; ""sample_category"" = ""data""; }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {; ""lumi"": 0.5, ; ""xsec"": 1.5,; ""sample_category"" = ""MC_background""; }; }; }; }; The metadata information from the specification file can be then accessed using the DefinePerSample function. For example, to access luminosity information (stored as a double):; df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); or sample_category information (stored as a string):; df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); or directly the filename:; df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also provides a corresponding exemplary JSON file for the",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:78186,Usability,progress bar,progress bar,78186,"ile1.root"", ""file2.root""],; ""metadata"": {; ""lumi"": 10000.0, ; ""xsec"": 1.0,; ""sample_category"" = ""data""; }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {; ""lumi"": 0.5, ; ""xsec"": 1.5,; ""sample_category"" = ""MC_background""; }; }; }; }; The metadata information from the specification file can be then accessed using the DefinePerSample function. For example, to access luminosity information (stored as a double):; df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); or sample_category information (stored as a string):; df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); or directly the filename:; df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also provides a corresponding exemplary JSON file for the dataset specification. Adding a progress bar; A progress bar showing the processed event statistics can be added to any RDataFrame program. The event statistics include elapsed time, currently processed file, currently processed events, the rate of event processing and an estimated remaining time (per file being processed). It is recorded and printed in the terminal every m events and every n seconds (by default m = 1000 and n = 1). The ProgressBar can be also added when the multithread (MT) mode is enabled.; ProgressBar is added after creating the dataframe object (df): ROOT::RDataFrame df(""tree"", ""file.root"");; ROOT::RDF::Experimental::AddProgressBar(df);; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; Alternatively, RDataFrame can be cast to an RNode first, giving the user more flexibility For example, it can be called at any computational node, such as Filter or Define, not only the head node, with no change to the ProgressBar function itself (please see the Eff",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:78202,Usability,progress bar,progress bar,78202,"ile1.root"", ""file2.root""],; ""metadata"": {; ""lumi"": 10000.0, ; ""xsec"": 1.0,; ""sample_category"" = ""data""; }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {; ""lumi"": 0.5, ; ""xsec"": 1.5,; ""sample_category"" = ""MC_background""; }; }; }; }; The metadata information from the specification file can be then accessed using the DefinePerSample function. For example, to access luminosity information (stored as a double):; df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); or sample_category information (stored as a string):; df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); or directly the filename:; df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also provides a corresponding exemplary JSON file for the dataset specification. Adding a progress bar; A progress bar showing the processed event statistics can be added to any RDataFrame program. The event statistics include elapsed time, currently processed file, currently processed events, the rate of event processing and an estimated remaining time (per file being processed). It is recorded and printed in the terminal every m events and every n seconds (by default m = 1000 and n = 1). The ProgressBar can be also added when the multithread (MT) mode is enabled.; ProgressBar is added after creating the dataframe object (df): ROOT::RDataFrame df(""tree"", ""file.root"");; ROOT::RDF::Experimental::AddProgressBar(df);; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; Alternatively, RDataFrame can be cast to an RNode first, giving the user more flexibility For example, it can be called at any computational node, such as Filter or Define, not only the head node, with no change to the ProgressBar function itself (please see the Eff",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:79572,Usability,progress bar,progress bars,79572,"ressBar can be also added when the multithread (MT) mode is enabled.; ProgressBar is added after creating the dataframe object (df): ROOT::RDataFrame df(""tree"", ""file.root"");; ROOT::RDF::Experimental::AddProgressBar(df);; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; Alternatively, RDataFrame can be cast to an RNode first, giving the user more flexibility For example, it can be called at any computational node, such as Filter or Define, not only the head node, with no change to the ProgressBar function itself (please see the Efficient analysis in Python section for appropriate usage in Python): ROOT::RDataFrame df(""tree"", ""file.root"");; auto df_1 = ROOT::RDF::RNode(df.Filter(""x>1""));; ROOT::RDF::Experimental::AddProgressBar(df_1);; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57; Examples of implemented progress bars can be seen by running Higgs to Four Lepton tutorial and Dimuon tutorial. Efficient analysis in Python; You can use RDataFrame in Python thanks to the dynamic Python/C++ translation of PyROOT. In general, the interface is the same as for C++, a simple example follows.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilte",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:79831,Usability,simpl,simple,79831,"f);; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; Alternatively, RDataFrame can be cast to an RNode first, giving the user more flexibility For example, it can be called at any computational node, such as Filter or Define, not only the head node, with no change to the ProgressBar function itself (please see the Efficient analysis in Python section for appropriate usage in Python): ROOT::RDataFrame df(""tree"", ""file.root"");; auto df_1 = ROOT::RDF::RNode(df.Filter(""x>1""));; ROOT::RDF::Experimental::AddProgressBar(df_1);; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57; Examples of implemented progress bars can be seen by running Higgs to Four Lepton tutorial and Dimuon tutorial. Efficient analysis in Python; You can use RDataFrame in Python thanks to the dynamic Python/C++ translation of PyROOT. In general, the interface is the same as for C++, a simple example follows.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performa",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:80017,Usability,simpl,simple,80017,"ample, it can be called at any computational node, such as Filter or Define, not only the head node, with no change to the ProgressBar function itself (please see the Efficient analysis in Python section for appropriate usage in Python): ROOT::RDataFrame df(""tree"", ""file.root"");; auto df_1 = ROOT::RDF::RNode(df.Filter(""x>1""));; ROOT::RDF::Experimental::AddProgressBar(df_1);; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57; Examples of implemented progress bars can be seen by running Higgs to Four Lepton tutorial and Dimuon tutorial. Efficient analysis in Python; You can use RDataFrame in Python thanks to the dynamic Python/C++ translation of PyROOT. In general, the interface is the same as for C++, a simple example follows.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performance even further, you can also pre-compile a C++ library with full code optimizations and load the function into the RDataFrame computation as follows.; ROOT.gSystem.Load(""path/to/myLibrary.so"") # Library with the myFilter function; ROOT.gInterprete",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:80335,Usability,simpl,simple,80335,".Filter(""x>1""));; ROOT::RDF::Experimental::AddProgressBar(df_1);; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57; Examples of implemented progress bars can be seen by running Higgs to Four Lepton tutorial and Dimuon tutorial. Efficient analysis in Python; You can use RDataFrame in Python thanks to the dynamic Python/C++ translation of PyROOT. In general, the interface is the same as for C++, a simple example follows.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performance even further, you can also pre-compile a C++ library with full code optimizations and load the function into the RDataFrame computation as follows.; ROOT.gSystem.Load(""path/to/myLibrary.so"") # Library with the myFilter function; ROOT.gInterpreter.Declare('#include ""myLibrary.h""') # Header with the declaration of the myFilter function; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); A more thorough explanation of how to use C++ code from Python can be found in the PyROOT manual.; Python code",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:81738,Usability,simpl,simple,81738,"r(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performance even further, you can also pre-compile a C++ library with full code optimizations and load the function into the RDataFrame computation as follows.; ROOT.gSystem.Load(""path/to/myLibrary.so"") # Library with the myFilter function; ROOT.gInterpreter.Declare('#include ""myLibrary.h""') # Header with the declaration of the myFilter function; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); A more thorough explanation of how to use C++ code from Python can be found in the PyROOT manual.; Python code; ROOT also offers the option to compile Python functions with fundamental types and arrays thereof using Numba. Such compiled functions can then be used in a C++ expression provided to RDataFrame.; The function to be compiled should be decorated with ROOT.Numba.Declare, which allows to specify the parameter and return types. See the following snippet for a simple example or the full tutorial here.; @ROOT.Numba.Declare([""float""], ""bool""); def myFilter(x):; return x > 10; ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""Numba::myFilter(x)"").Sum(""y""); print(sum.GetValue()); It also works with collections: RVec objects of fundamental types can be transparently converted to/from numpy arrays:; @ROOT.Numba.Declare(['RVec<float>', 'int'], 'RVec<float>'); def pypowarray(numpyvec, pow):; return numpyvec**pow; ; df.Define('array', 'ROOT::RVecF{1.,2.,3.}')\; .Define('arraySquared', 'Numba::pypowarray(array, 2)'); Note that this functionality requires the Python packages numba and cffi to be installed. Interoperability with NumPy; Conversion to NumPy arrays; Eventually, you probably would like to inspect the content of the RDataFrame or process the data further with Python libraries. For this purpose, we provide the AsNumpy() function, which returns the columns of your RDataFrame as a dictionary of NumPy arrays. See a simple example bel",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:82724,Usability,simpl,simple,82724,"e example or the full tutorial here.; @ROOT.Numba.Declare([""float""], ""bool""); def myFilter(x):; return x > 10; ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""Numba::myFilter(x)"").Sum(""y""); print(sum.GetValue()); It also works with collections: RVec objects of fundamental types can be transparently converted to/from numpy arrays:; @ROOT.Numba.Declare(['RVec<float>', 'int'], 'RVec<float>'); def pypowarray(numpyvec, pow):; return numpyvec**pow; ; df.Define('array', 'ROOT::RVecF{1.,2.,3.}')\; .Define('arraySquared', 'Numba::pypowarray(array, 2)'); Note that this functionality requires the Python packages numba and cffi to be installed. Interoperability with NumPy; Conversion to NumPy arrays; Eventually, you probably would like to inspect the content of the RDataFrame or process the data further with Python libraries. For this purpose, we provide the AsNumpy() function, which returns the columns of your RDataFrame as a dictionary of NumPy arrays. See a simple example below or a full tutorial here.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); cols = df.Filter(""x > 10"").AsNumpy([""x"", ""y""]) # retrieve columns ""x"" and ""y"" as NumPy arrays; print(cols[""x""], cols[""y""]) # the values of the cols dictionary are NumPy arrays; Processing data stored in NumPy arrays; In case you have data in NumPy arrays in Python and you want to process the data with ROOT, you can easily create an RDataFrame using ROOT.RDF.FromNumpy. The factory function accepts a dictionary where the keys are the column names and the values are NumPy arrays, and returns a new RDataFrame with the provided columns.; Only arrays of fundamental types (integers and floating point values) are supported and the arrays must have the same length. Data is read directly from the arrays: no copies are performed.; # Read data from NumPy arrays; # The column names in the RDataFrame are taken from the dictionary keys; x, y = numpy.array([1, 2, 3]), numpy.array([4, 5, 6]); df = ROOT.RDF.FromNumpy({""x"": x, ""y""",MatchSource.WIKI,doc/v632/classROOT_1_1RDataFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html
https://root.cern/doc/v632/classROOT_1_1RFileDialog.html:2169,Deployability,update,update,2169,"xisting entry in NameFilters. ;  ; const EDialogTypes & GetType () const;  ; std::string GetWorkingPath () const;  Returns current working path. ;  ; void Hide ();  Hide ROOT Browser. ;  ; bool IsCompleted () const;  ; void SetCallback (RFileDialogCallback_t callback);  Assign callback. ;  ; void SetCanChangePath (bool on=true);  Configure if working path in dialog can be changed via gui elements. ;  ; void SetNameFilters (const std::vector< std::string > &arr);  Set array of name filters like ""Text files (*.txt)"", ""Any files (*)"", ""Image files (*png *.jpg)"" Should be specified before starting dialog. ;  ; void SetSelectedFilter (const std::string &name);  Configure selected filter Has to be one of the string from NameFilters entry. ;  ; void SetWorkingPath (const std::string &);  Change current working path of file dialog If dialog already shown, change will be immediately applied. ;  ; void Show (const RWebDisplayArgs &args="""");  Show or update RFileDialog in web window If web window already started - just refresh it like ""reload"" button does Reset result of file selection (if any) ;  . Static Public Member Functions; static std::shared_ptr< RFileDialog > Embed (const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args);  Create dialog instance to use as embedded dialog inside other widget Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embed() providing received string as second argument. ;  ; static bool IsMessageToStartDialog (const std::string &msg);  Check if this could be the message send by client to start new file dialog If returns true, one can call RFileDialog::Embedded() to really create file dialog instance inside existing widget. ;  ; static std::string NewFile (const std::string &title="""", const std::string &fname="""");  Start NewFile dialog. ;",MatchSource.WIKI,doc/v632/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html
https://root.cern/doc/v632/classROOT_1_1RFileDialog.html:11711,Deployability,update,update,11711," array of name filters like ""Text files (*.txt)"", ""Any files (*)"", ""Image files (*png *.jpg)"" Should be specified before starting dialog. ; Definition at line 92 of file RFileDialog.hxx. ◆ SetSelectedFilter(). void RFileDialog::SetSelectedFilter ; (; const std::string & ; name). Configure selected filter Has to be one of the string from NameFilters entry. ; Definition at line 151 of file RFileDialog.cxx. ◆ SetStartFunc(). void RFileDialog::SetStartFunc ; (; bool ; on). staticprotected . Set start dialog function for RWebWindow. ; Definition at line 490 of file RFileDialog.cxx. ◆ SetWorkingPath(). void RFileDialog::SetWorkingPath ; (; const std::string & ; path). Change current working path of file dialog If dialog already shown, change will be immediately applied. ; Definition at line 337 of file RFileDialog.cxx. ◆ Show(). void RFileDialog::Show ; (; const RWebDisplayArgs & ; args = """"). Show or update RFileDialog in web window If web window already started - just refresh it like ""reload"" button does Reset result of file selection (if any) ; Definition at line 113 of file RFileDialog.cxx. ◆ TypeAsString(). std::string RFileDialog::TypeAsString ; (; EDialogTypes ; kind). staticprotected . Returns dialog type as string String value used for configuring JS-side. ; Definition at line 136 of file RFileDialog.cxx. Friends And Related Symbol Documentation. ◆ Details::RWebWindowPlugin. friend class Details::RWebWindowPlugin. friend . Definition at line 42 of file RFileDialog.hxx. Member Data Documentation. ◆ fBrowsable. RBrowserData ROOT::RFileDialog::fBrowsable. protected . ! central browsing element ; Definition at line 55 of file RFileDialog.hxx. ◆ fCallback. RFileDialogCallback_t ROOT::RFileDialog::fCallback. protected . ! function receiving result, called once ; Definition at line 64 of file RFileDialog.hxx. ◆ fCanChangePath. bool ROOT::RFileDialog::fCanChangePath {true}. protected . ! if working path can be changed via gui elements ; Definition at line 56 of file RFile",MatchSource.WIKI,doc/v632/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html
https://root.cern/doc/v632/classROOT_1_1RFileDialog.html:469,Integrability,message,message,469,". ROOT: ROOT::RFileDialog Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; ROOT::RFileDialog Class ReferenceWeb Widgets » Browsable object. ; Web-based FileDialog. ; web-based FileDialog.; Initial message send to client to configure layout. ; Definition at line 41 of file RFileDialog.hxx. Public Types; enum  EDialogTypes { kOpenFile; , kSaveAs; , kNewFile; };  . Public Member Functions;  RFileDialog (EDialogTypes kind=kOpenFile, const std::string &title="""", const std::string &fname="""");  constructor When title not specified, default will be used ;  ; virtual ~RFileDialog ();  destructor ;  ; bool GetCanChangePath () const;  Returns true if working path can be change with gui elements. ;  ; const std::string & GetFileName () const;  ; const auto & GetNameFilters () const;  Returns array of name filters. ;  ; std::string GetSelectedFilter () const;  Returns selected filter Can differ from specified value - if it does not match to existing entry in NameFilters. ;  ; const EDialogTypes & GetType () const;  ; std::string GetWorkingPath () const;  Returns current working path. ;  ; void Hide ();  Hide ROOT Browser. ;  ; bool IsCompleted () const;  ; void SetCallback (RFileDialogCallback_t callback);  Assign callback. ;  ; void SetCanChangePath (bool on=true);  Configure if working path in dialog can be changed via gui elements. ;  ; void SetNameFilters (const std::vector< std::string > &arr);  Set array of name filters like ""Text files (*.txt)"", ""Any files (*)"", ""Image files (*png *.jpg)"" Should be specified before starting dialog. ;  ; void SetSelectedFilter (const std::string &name);  Configure selected filter Has to be one of the string from NameFilters entry. ;  ; void SetWorkingPath (const std::string",MatchSource.WIKI,doc/v632/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html
https://root.cern/doc/v632/classROOT_1_1RFileDialog.html:2678,Integrability,message,message,2678,""", ""Any files (*)"", ""Image files (*png *.jpg)"" Should be specified before starting dialog. ;  ; void SetSelectedFilter (const std::string &name);  Configure selected filter Has to be one of the string from NameFilters entry. ;  ; void SetWorkingPath (const std::string &);  Change current working path of file dialog If dialog already shown, change will be immediately applied. ;  ; void Show (const RWebDisplayArgs &args="""");  Show or update RFileDialog in web window If web window already started - just refresh it like ""reload"" button does Reset result of file selection (if any) ;  . Static Public Member Functions; static std::shared_ptr< RFileDialog > Embed (const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args);  Create dialog instance to use as embedded dialog inside other widget Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embed() providing received string as second argument. ;  ; static bool IsMessageToStartDialog (const std::string &msg);  Check if this could be the message send by client to start new file dialog If returns true, one can call RFileDialog::Embedded() to really create file dialog instance inside existing widget. ;  ; static std::string NewFile (const std::string &title="""", const std::string &fname="""");  Start NewFile dialog. ;  ; static std::string OpenFile (const std::string &title="""", const std::string &fname="""");  Start OpenFile dialog. ;  ; static std::string SaveAs (const std::string &title="""", const std::string &fname="""");  Start SaveAs dialog. ;  . Protected Member Functions; std::string GetRegexp (const std::string &name) const;  Returns regexp for selected filter String should have form ""Filter name (*.ext1 *.ext2 ...) ;  ; void InvokeCallBack ();  Invoke specified callback. ;  ; void ProcessMsg (unsigned connid, const std::s",MatchSource.WIKI,doc/v632/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html
https://root.cern/doc/v632/classROOT_1_1RFileDialog.html:2757,Integrability,message,message,2757,""", ""Any files (*)"", ""Image files (*png *.jpg)"" Should be specified before starting dialog. ;  ; void SetSelectedFilter (const std::string &name);  Configure selected filter Has to be one of the string from NameFilters entry. ;  ; void SetWorkingPath (const std::string &);  Change current working path of file dialog If dialog already shown, change will be immediately applied. ;  ; void Show (const RWebDisplayArgs &args="""");  Show or update RFileDialog in web window If web window already started - just refresh it like ""reload"" button does Reset result of file selection (if any) ;  . Static Public Member Functions; static std::shared_ptr< RFileDialog > Embed (const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args);  Create dialog instance to use as embedded dialog inside other widget Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embed() providing received string as second argument. ;  ; static bool IsMessageToStartDialog (const std::string &msg);  Check if this could be the message send by client to start new file dialog If returns true, one can call RFileDialog::Embedded() to really create file dialog instance inside existing widget. ;  ; static std::string NewFile (const std::string &title="""", const std::string &fname="""");  Start NewFile dialog. ;  ; static std::string OpenFile (const std::string &title="""", const std::string &fname="""");  Start OpenFile dialog. ;  ; static std::string SaveAs (const std::string &title="""", const std::string &fname="""");  Start SaveAs dialog. ;  . Protected Member Functions; std::string GetRegexp (const std::string &name) const;  Returns regexp for selected filter String should have form ""Filter name (*.ext1 *.ext2 ...) ;  ; void InvokeCallBack ();  Invoke specified callback. ;  ; void ProcessMsg (unsigned connid, const std::s",MatchSource.WIKI,doc/v632/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html
https://root.cern/doc/v632/classROOT_1_1RFileDialog.html:2935,Integrability,message,message,2935,"etWorkingPath (const std::string &);  Change current working path of file dialog If dialog already shown, change will be immediately applied. ;  ; void Show (const RWebDisplayArgs &args="""");  Show or update RFileDialog in web window If web window already started - just refresh it like ""reload"" button does Reset result of file selection (if any) ;  . Static Public Member Functions; static std::shared_ptr< RFileDialog > Embed (const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args);  Create dialog instance to use as embedded dialog inside other widget Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embed() providing received string as second argument. ;  ; static bool IsMessageToStartDialog (const std::string &msg);  Check if this could be the message send by client to start new file dialog If returns true, one can call RFileDialog::Embedded() to really create file dialog instance inside existing widget. ;  ; static std::string NewFile (const std::string &title="""", const std::string &fname="""");  Start NewFile dialog. ;  ; static std::string OpenFile (const std::string &title="""", const std::string &fname="""");  Start OpenFile dialog. ;  ; static std::string SaveAs (const std::string &title="""", const std::string &fname="""");  Start SaveAs dialog. ;  . Protected Member Functions; std::string GetRegexp (const std::string &name) const;  Returns regexp for selected filter String should have form ""Filter name (*.ext1 *.ext2 ...) ;  ; void InvokeCallBack ();  Invoke specified callback. ;  ; void ProcessMsg (unsigned connid, const std::string &arg);  Process received data from client. ;  ; void SendChPathMsg (unsigned connid);  Sends new data after change current directory. ;  ; void SendInitMsg (unsigned connid);  Sends initial message to the client. ;  . Static Prote",MatchSource.WIKI,doc/v632/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html
https://root.cern/doc/v632/classROOT_1_1RFileDialog.html:3929,Integrability,message,message,3929,"ck if this could be the message send by client to start new file dialog If returns true, one can call RFileDialog::Embedded() to really create file dialog instance inside existing widget. ;  ; static std::string NewFile (const std::string &title="""", const std::string &fname="""");  Start NewFile dialog. ;  ; static std::string OpenFile (const std::string &title="""", const std::string &fname="""");  Start OpenFile dialog. ;  ; static std::string SaveAs (const std::string &title="""", const std::string &fname="""");  Start SaveAs dialog. ;  . Protected Member Functions; std::string GetRegexp (const std::string &name) const;  Returns regexp for selected filter String should have form ""Filter name (*.ext1 *.ext2 ...) ;  ; void InvokeCallBack ();  Invoke specified callback. ;  ; void ProcessMsg (unsigned connid, const std::string &arg);  Process received data from client. ;  ; void SendChPathMsg (unsigned connid);  Sends new data after change current directory. ;  ; void SendInitMsg (unsigned connid);  Sends initial message to the client. ;  . Static Protected Member Functions; static std::string Dialog (EDialogTypes kind, const std::string &title, const std::string &fname);  Start specified dialog type. ;  ; static void SetStartFunc (bool on);  Set start dialog function for RWebWindow. ;  ; static std::string TypeAsString (EDialogTypes kind);  Returns dialog type as string String value used for configuring JS-side. ;  . Protected Attributes; RBrowserData fBrowsable;  ! central browsing element ;  ; RFileDialogCallback_t fCallback;  ! function receiving result, called once ;  ; bool fCanChangePath {true};  ! if working path can be changed via gui elements ;  ; bool fDidSelect {false};  ! true when dialog is selected or closed ;  ; EDialogTypes fKind {kOpenFile};  ! dialog kind OpenFile, SaveAs, NewFile ;  ; std::vector< std::string > fNameFilters;  ! name filters ;  ; std::string fSelect;  ! result of file selection ;  ; std::string fSelectedFilter;  ! name of selected filter ;  ;",MatchSource.WIKI,doc/v632/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html
https://root.cern/doc/v632/classROOT_1_1RFileDialog.html:6380,Integrability,message,message,6380,"File, . const std::string & ; title = """", . const std::string & ; fname = """" . ). constructor When title not specified, default will be used ; Definition at line 43 of file RFileDialog.cxx. ◆ ~RFileDialog(). RFileDialog::~RFileDialog ; (; ). virtual . destructor ; Definition at line 90 of file RFileDialog.cxx. Member Function Documentation. ◆ Dialog(). std::string RFileDialog::Dialog ; (; EDialogTypes ; kind, . const std::string & ; title, . const std::string & ; fname . ). staticprotected . Start specified dialog type. ; Definition at line 374 of file RFileDialog.cxx. ◆ Embed(). std::shared_ptr< RFileDialog > RFileDialog::Embed ; (; const std::shared_ptr< RWebWindow > & ; window, . unsigned ; connid, . const std::string & ; args . ). static . Create dialog instance to use as embedded dialog inside other widget Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embed() providing received string as second argument. ; Returned instance of shared_ptr<RFileDialog> may be used to assign callback when file is selected ; Definition at line 437 of file RFileDialog.cxx. ◆ GetCanChangePath(). bool ROOT::RFileDialog::GetCanChangePath ; (; ); const. inline . Returns true if working path can be change with gui elements. ; Definition at line 100 of file RFileDialog.hxx. ◆ GetFileName(). const std::string & ROOT::RFileDialog::GetFileName ; (; ); const. inline . Definition at line 112 of file RFileDialog.hxx. ◆ GetNameFilters(). const auto & ROOT::RFileDialog::GetNameFilters ; (; ); const. inline . Returns array of name filters. ; Definition at line 94 of file RFileDialog.hxx. ◆ GetRegexp(). std::string RFileDialog::GetRegexp ; (; const std::string & ; name); const. protected . Returns regexp for selected filter String should have form ""Filter name (*.ext1 *.ext2 ...) ; Definition at line 191 of file RFil",MatchSource.WIKI,doc/v632/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html
https://root.cern/doc/v632/classROOT_1_1RFileDialog.html:6459,Integrability,message,message,6459,"File, . const std::string & ; title = """", . const std::string & ; fname = """" . ). constructor When title not specified, default will be used ; Definition at line 43 of file RFileDialog.cxx. ◆ ~RFileDialog(). RFileDialog::~RFileDialog ; (; ). virtual . destructor ; Definition at line 90 of file RFileDialog.cxx. Member Function Documentation. ◆ Dialog(). std::string RFileDialog::Dialog ; (; EDialogTypes ; kind, . const std::string & ; title, . const std::string & ; fname . ). staticprotected . Start specified dialog type. ; Definition at line 374 of file RFileDialog.cxx. ◆ Embed(). std::shared_ptr< RFileDialog > RFileDialog::Embed ; (; const std::shared_ptr< RWebWindow > & ; window, . unsigned ; connid, . const std::string & ; args . ). static . Create dialog instance to use as embedded dialog inside other widget Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embed() providing received string as second argument. ; Returned instance of shared_ptr<RFileDialog> may be used to assign callback when file is selected ; Definition at line 437 of file RFileDialog.cxx. ◆ GetCanChangePath(). bool ROOT::RFileDialog::GetCanChangePath ; (; ); const. inline . Returns true if working path can be change with gui elements. ; Definition at line 100 of file RFileDialog.hxx. ◆ GetFileName(). const std::string & ROOT::RFileDialog::GetFileName ; (; ); const. inline . Definition at line 112 of file RFileDialog.hxx. ◆ GetNameFilters(). const auto & ROOT::RFileDialog::GetNameFilters ; (; ); const. inline . Returns array of name filters. ; Definition at line 94 of file RFileDialog.hxx. ◆ GetRegexp(). std::string RFileDialog::GetRegexp ; (; const std::string & ; name); const. protected . Returns regexp for selected filter String should have form ""Filter name (*.ext1 *.ext2 ...) ; Definition at line 191 of file RFil",MatchSource.WIKI,doc/v632/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html
https://root.cern/doc/v632/classROOT_1_1RFileDialog.html:8502,Integrability,message,message,8502,"specified value - if it does not match to existing entry in NameFilters. ; Definition at line 160 of file RFileDialog.cxx. ◆ GetType(). const EDialogTypes & ROOT::RFileDialog::GetType ; (; ); const. inline . Definition at line 86 of file RFileDialog.hxx. ◆ GetWorkingPath(). std::string RFileDialog::GetWorkingPath ; (; ); const. Returns current working path. ; Definition at line 351 of file RFileDialog.cxx. ◆ Hide(). void RFileDialog::Hide ; (; ). Hide ROOT Browser. ; Definition at line 127 of file RFileDialog.cxx. ◆ InvokeCallBack(). void RFileDialog::InvokeCallBack ; (; ). protected . Invoke specified callback. ; Definition at line 360 of file RFileDialog.cxx. ◆ IsCompleted(). bool ROOT::RFileDialog::IsCompleted ; (; ); const. inline . Definition at line 111 of file RFileDialog.hxx. ◆ IsMessageToStartDialog(). bool RFileDialog::IsMessageToStartDialog ; (; const std::string & ; msg). static . Check if this could be the message send by client to start new file dialog If returns true, one can call RFileDialog::Embedded() to really create file dialog instance inside existing widget. ; Definition at line 424 of file RFileDialog.cxx. ◆ NewFile(). std::string RFileDialog::NewFile ; (; const std::string & ; title = """", . const std::string & ; fname = """" . ). static . Start NewFile dialog. ; Blocks until file name is selected or Cancel button is pressed Returns selected file name (or empty string) ; Definition at line 414 of file RFileDialog.cxx. ◆ OpenFile(). std::string RFileDialog::OpenFile ; (; const std::string & ; title = """", . const std::string & ; fname = """" . ). static . Start OpenFile dialog. ; Blocks until file name is selected or Cancel button is pressed Returns selected file name (or empty string) ; Definition at line 394 of file RFileDialog.cxx. ◆ ProcessMsg(). void RFileDialog::ProcessMsg ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process received data from client. ; Definition at line 270 of file RFileDialog.cxx. ◆ SaveAs(). std::str",MatchSource.WIKI,doc/v632/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html
https://root.cern/doc/v632/classROOT_1_1RFileDialog.html:10146,Integrability,message,message,10146,"= """" . ). static . Start OpenFile dialog. ; Blocks until file name is selected or Cancel button is pressed Returns selected file name (or empty string) ; Definition at line 394 of file RFileDialog.cxx. ◆ ProcessMsg(). void RFileDialog::ProcessMsg ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process received data from client. ; Definition at line 270 of file RFileDialog.cxx. ◆ SaveAs(). std::string RFileDialog::SaveAs ; (; const std::string & ; title = """", . const std::string & ; fname = """" . ). static . Start SaveAs dialog. ; Blocks until file name is selected or Cancel button is pressed Returns selected file name (or empty string) ; Definition at line 404 of file RFileDialog.cxx. ◆ SendChPathMsg(). void RFileDialog::SendChPathMsg ; (; unsigned ; connid). protected . Sends new data after change current directory. ; Definition at line 255 of file RFileDialog.cxx. ◆ SendInitMsg(). void RFileDialog::SendInitMsg ; (; unsigned ; connid). protected . Sends initial message to the client. ; Definition at line 229 of file RFileDialog.cxx. ◆ SetCallback(). void RFileDialog::SetCallback ; (; RFileDialogCallback_t ; callback). Assign callback. ; Argument of callback is selected file name. If file was already selected, immediately call it ; Definition at line 101 of file RFileDialog.cxx. ◆ SetCanChangePath(). void ROOT::RFileDialog::SetCanChangePath ; (; bool ; on = true). inline . Configure if working path in dialog can be changed via gui elements. ; Definition at line 97 of file RFileDialog.hxx. ◆ SetNameFilters(). void ROOT::RFileDialog::SetNameFilters ; (; const std::vector< std::string > & ; arr). inline . Set array of name filters like ""Text files (*.txt)"", ""Any files (*)"", ""Image files (*png *.jpg)"" Should be specified before starting dialog. ; Definition at line 92 of file RFileDialog.hxx. ◆ SetSelectedFilter(). void RFileDialog::SetSelectedFilter ; (; const std::string & ; name). Configure selected filter Has to be one of the string from NameFilte",MatchSource.WIKI,doc/v632/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html
https://root.cern/doc/v632/classROOT_1_1RFileDialog.html:495,Modifiability,config,configure,495,". ROOT: ROOT::RFileDialog Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; ROOT::RFileDialog Class ReferenceWeb Widgets » Browsable object. ; Web-based FileDialog. ; web-based FileDialog.; Initial message send to client to configure layout. ; Definition at line 41 of file RFileDialog.hxx. Public Types; enum  EDialogTypes { kOpenFile; , kSaveAs; , kNewFile; };  . Public Member Functions;  RFileDialog (EDialogTypes kind=kOpenFile, const std::string &title="""", const std::string &fname="""");  constructor When title not specified, default will be used ;  ; virtual ~RFileDialog ();  destructor ;  ; bool GetCanChangePath () const;  Returns true if working path can be change with gui elements. ;  ; const std::string & GetFileName () const;  ; const auto & GetNameFilters () const;  Returns array of name filters. ;  ; std::string GetSelectedFilter () const;  Returns selected filter Can differ from specified value - if it does not match to existing entry in NameFilters. ;  ; const EDialogTypes & GetType () const;  ; std::string GetWorkingPath () const;  Returns current working path. ;  ; void Hide ();  Hide ROOT Browser. ;  ; bool IsCompleted () const;  ; void SetCallback (RFileDialogCallback_t callback);  Assign callback. ;  ; void SetCanChangePath (bool on=true);  Configure if working path in dialog can be changed via gui elements. ;  ; void SetNameFilters (const std::vector< std::string > &arr);  Set array of name filters like ""Text files (*.txt)"", ""Any files (*)"", ""Image files (*png *.jpg)"" Should be specified before starting dialog. ;  ; void SetSelectedFilter (const std::string &name);  Configure selected filter Has to be one of the string from NameFilters entry. ;  ; void SetWorkingPath (const std::string",MatchSource.WIKI,doc/v632/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html
https://root.cern/doc/v632/classROOT_1_1RFileDialog.html:4316,Modifiability,config,configuring,4316,"le="""", const std::string &fname="""");  Start OpenFile dialog. ;  ; static std::string SaveAs (const std::string &title="""", const std::string &fname="""");  Start SaveAs dialog. ;  . Protected Member Functions; std::string GetRegexp (const std::string &name) const;  Returns regexp for selected filter String should have form ""Filter name (*.ext1 *.ext2 ...) ;  ; void InvokeCallBack ();  Invoke specified callback. ;  ; void ProcessMsg (unsigned connid, const std::string &arg);  Process received data from client. ;  ; void SendChPathMsg (unsigned connid);  Sends new data after change current directory. ;  ; void SendInitMsg (unsigned connid);  Sends initial message to the client. ;  . Static Protected Member Functions; static std::string Dialog (EDialogTypes kind, const std::string &title, const std::string &fname);  Start specified dialog type. ;  ; static void SetStartFunc (bool on);  Set start dialog function for RWebWindow. ;  ; static std::string TypeAsString (EDialogTypes kind);  Returns dialog type as string String value used for configuring JS-side. ;  . Protected Attributes; RBrowserData fBrowsable;  ! central browsing element ;  ; RFileDialogCallback_t fCallback;  ! function receiving result, called once ;  ; bool fCanChangePath {true};  ! if working path can be changed via gui elements ;  ; bool fDidSelect {false};  ! true when dialog is selected or closed ;  ; EDialogTypes fKind {kOpenFile};  ! dialog kind OpenFile, SaveAs, NewFile ;  ; std::vector< std::string > fNameFilters;  ! name filters ;  ; std::string fSelect;  ! result of file selection ;  ; std::string fSelectedFilter;  ! name of selected filter ;  ; std::string fTitle;  ! title, when not specified default will be used ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window for file dialog ;  . Friends; class Details::RWebWindowPlugin;  . #include <ROOT/RFileDialog.hxx>; Member Enumeration Documentation. ◆ EDialogTypes. enum ROOT::RFileDialog::EDialogTypes. EnumeratorkOpenFile ; kSaveAs ; kNewFil",MatchSource.WIKI,doc/v632/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html
https://root.cern/doc/v632/classROOT_1_1RFileDialog.html:12061,Modifiability,config,configuring,12061,"ter ; (; const std::string & ; name). Configure selected filter Has to be one of the string from NameFilters entry. ; Definition at line 151 of file RFileDialog.cxx. ◆ SetStartFunc(). void RFileDialog::SetStartFunc ; (; bool ; on). staticprotected . Set start dialog function for RWebWindow. ; Definition at line 490 of file RFileDialog.cxx. ◆ SetWorkingPath(). void RFileDialog::SetWorkingPath ; (; const std::string & ; path). Change current working path of file dialog If dialog already shown, change will be immediately applied. ; Definition at line 337 of file RFileDialog.cxx. ◆ Show(). void RFileDialog::Show ; (; const RWebDisplayArgs & ; args = """"). Show or update RFileDialog in web window If web window already started - just refresh it like ""reload"" button does Reset result of file selection (if any) ; Definition at line 113 of file RFileDialog.cxx. ◆ TypeAsString(). std::string RFileDialog::TypeAsString ; (; EDialogTypes ; kind). staticprotected . Returns dialog type as string String value used for configuring JS-side. ; Definition at line 136 of file RFileDialog.cxx. Friends And Related Symbol Documentation. ◆ Details::RWebWindowPlugin. friend class Details::RWebWindowPlugin. friend . Definition at line 42 of file RFileDialog.hxx. Member Data Documentation. ◆ fBrowsable. RBrowserData ROOT::RFileDialog::fBrowsable. protected . ! central browsing element ; Definition at line 55 of file RFileDialog.hxx. ◆ fCallback. RFileDialogCallback_t ROOT::RFileDialog::fCallback. protected . ! function receiving result, called once ; Definition at line 64 of file RFileDialog.hxx. ◆ fCanChangePath. bool ROOT::RFileDialog::fCanChangePath {true}. protected . ! if working path can be changed via gui elements ; Definition at line 56 of file RFileDialog.hxx. ◆ fDidSelect. bool ROOT::RFileDialog::fDidSelect {false}. protected . ! true when dialog is selected or closed ; Definition at line 60 of file RFileDialog.hxx. ◆ fKind. EDialogTypes ROOT::RFileDialog::fKind {kOpenFile}. protected ",MatchSource.WIKI,doc/v632/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html
https://root.cern/doc/v632/classROOT_1_1RFileDialog.html:2745,Safety,detect,detect,2745,""", ""Any files (*)"", ""Image files (*png *.jpg)"" Should be specified before starting dialog. ;  ; void SetSelectedFilter (const std::string &name);  Configure selected filter Has to be one of the string from NameFilters entry. ;  ; void SetWorkingPath (const std::string &);  Change current working path of file dialog If dialog already shown, change will be immediately applied. ;  ; void Show (const RWebDisplayArgs &args="""");  Show or update RFileDialog in web window If web window already started - just refresh it like ""reload"" button does Reset result of file selection (if any) ;  . Static Public Member Functions; static std::shared_ptr< RFileDialog > Embed (const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args);  Create dialog instance to use as embedded dialog inside other widget Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embed() providing received string as second argument. ;  ; static bool IsMessageToStartDialog (const std::string &msg);  Check if this could be the message send by client to start new file dialog If returns true, one can call RFileDialog::Embedded() to really create file dialog instance inside existing widget. ;  ; static std::string NewFile (const std::string &title="""", const std::string &fname="""");  Start NewFile dialog. ;  ; static std::string OpenFile (const std::string &title="""", const std::string &fname="""");  Start OpenFile dialog. ;  ; static std::string SaveAs (const std::string &title="""", const std::string &fname="""");  Start SaveAs dialog. ;  . Protected Member Functions; std::string GetRegexp (const std::string &name) const;  Returns regexp for selected filter String should have form ""Filter name (*.ext1 *.ext2 ...) ;  ; void InvokeCallBack ();  Invoke specified callback. ;  ; void ProcessMsg (unsigned connid, const std::s",MatchSource.WIKI,doc/v632/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html
https://root.cern/doc/v632/classROOT_1_1RFileDialog.html:6447,Safety,detect,detect,6447,"File, . const std::string & ; title = """", . const std::string & ; fname = """" . ). constructor When title not specified, default will be used ; Definition at line 43 of file RFileDialog.cxx. ◆ ~RFileDialog(). RFileDialog::~RFileDialog ; (; ). virtual . destructor ; Definition at line 90 of file RFileDialog.cxx. Member Function Documentation. ◆ Dialog(). std::string RFileDialog::Dialog ; (; EDialogTypes ; kind, . const std::string & ; title, . const std::string & ; fname . ). staticprotected . Start specified dialog type. ; Definition at line 374 of file RFileDialog.cxx. ◆ Embed(). std::shared_ptr< RFileDialog > RFileDialog::Embed ; (; const std::shared_ptr< RWebWindow > & ; window, . unsigned ; connid, . const std::string & ; args . ). static . Create dialog instance to use as embedded dialog inside other widget Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embed() providing received string as second argument. ; Returned instance of shared_ptr<RFileDialog> may be used to assign callback when file is selected ; Definition at line 437 of file RFileDialog.cxx. ◆ GetCanChangePath(). bool ROOT::RFileDialog::GetCanChangePath ; (; ); const. inline . Returns true if working path can be change with gui elements. ; Definition at line 100 of file RFileDialog.hxx. ◆ GetFileName(). const std::string & ROOT::RFileDialog::GetFileName ; (; ); const. inline . Definition at line 112 of file RFileDialog.hxx. ◆ GetNameFilters(). const auto & ROOT::RFileDialog::GetNameFilters ; (; ); const. inline . Returns array of name filters. ; Definition at line 94 of file RFileDialog.hxx. ◆ GetRegexp(). std::string RFileDialog::GetRegexp ; (; const std::string & ; name); const. protected . Returns regexp for selected filter String should have form ""Filter name (*.ext1 *.ext2 ...) ; Definition at line 191 of file RFil",MatchSource.WIKI,doc/v632/classROOT_1_1RFileDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html
https://root.cern/doc/v632/classROOT_1_1RGeoItem.html:700,Modifiability,inherit,inherited,700,". ROOT: ROOT::RGeoItem Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; ROOT::RGeoItem Class ReferenceWeb Widgets » Browsable object. ; Representation of single item in the geometry browser. ; Definition at line 91 of file RGeomData.hxx. Public Member Functions;  RGeoItem ()=default;  Default constructor. ;  ;  RGeoItem (const std::string &_name, int _nchilds, int _nodeid, const std::string &_color, const std::string &_material="""", int _vis=0, int _pvis=0);  ;  ~RGeoItem () override=default;  ; void SetTop (bool on=true);  ;  Public Member Functions inherited from ROOT::Browsable::RItem;  RItem ()=default;  ;  RItem (const std::string &_name, int _nchilds=0, const std::string &_icon="""");  ; virtual ~RItem ()=default;  ; virtual bool Compare (const RItem *b, const std::string &) const;  ; const std::string & GetIcon () const;  ; const std::string & GetMTime () const;  ; const std::string & GetName () const;  ; const std::string & GetSize () const;  ; const std::string & GetTitle () const;  ; virtual bool IsFolder () const;  ; virtual bool IsHidden () const;  ; void SetChecked (bool on=true);  ; void SetExpanded (bool on=true);  ; void SetIcon (const std::string &_icon);  ; void SetMTime (const std::string &_mtime);  ; void SetName (const std::string &_name);  ; void SetSize (const std::string &_size);  ; void SetSize (Long64_t _size);  ; void SetTitle (const std::string &_title);  . Protected Attributes; std::string color;  color ;  ; int id {0};  node id ;  ; std::string material;  material ;  ; int pvis {0};  visibility of physical node ;  ; bool top {false};  indicates if node selected as top ;  ; int vis {0};  visibility of logical node ;  ;  Protected Attributes inherited from ROOT::Browsable::RItem; bool checked {false};  is checked, not yet used ;  ; bool expanded {false};  is expanded ;  ; std::string fsize;  item size",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoItem.html
https://root.cern/doc/v632/classROOT_1_1RGeoItem.html:1839,Modifiability,inherit,inherited,1839,"ual bool Compare (const RItem *b, const std::string &) const;  ; const std::string & GetIcon () const;  ; const std::string & GetMTime () const;  ; const std::string & GetName () const;  ; const std::string & GetSize () const;  ; const std::string & GetTitle () const;  ; virtual bool IsFolder () const;  ; virtual bool IsHidden () const;  ; void SetChecked (bool on=true);  ; void SetExpanded (bool on=true);  ; void SetIcon (const std::string &_icon);  ; void SetMTime (const std::string &_mtime);  ; void SetName (const std::string &_name);  ; void SetSize (const std::string &_size);  ; void SetSize (Long64_t _size);  ; void SetTitle (const std::string &_title);  . Protected Attributes; std::string color;  color ;  ; int id {0};  node id ;  ; std::string material;  material ;  ; int pvis {0};  visibility of physical node ;  ; bool top {false};  indicates if node selected as top ;  ; int vis {0};  visibility of logical node ;  ;  Protected Attributes inherited from ROOT::Browsable::RItem; bool checked {false};  is checked, not yet used ;  ; bool expanded {false};  is expanded ;  ; std::string fsize;  item size ;  ; std::string icon;  icon associated with item ;  ; std::string mtime;  modification time ;  ; std::string name;  item name ;  ; int nchilds {0};  number of childs ;  ; std::string title;  item title ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeoItem:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeoItem() [1/2]. ROOT::RGeoItem::RGeoItem ; (; ). default . Default constructor. . ◆ RGeoItem() [2/2]. ROOT::RGeoItem::RGeoItem ; (; const std::string & ; _name, . int ; _nchilds, . int ; _nodeid, . const std::string & ; _color, . const std::string & ; _material = """", . int ; _vis = 0, . int ; _pvis = 0 . ). inline . Definition at line 107 of file RGeomData.hxx. ◆ ~RGeoItem(). ROOT::RGeoItem::~RGeoItem ; (; ). overridedefault . Member Function Documentat",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoItem.html
https://root.cern/doc/v632/classROOT_1_1RGeoItem.html:1799,Testability,log,logical,1799,"ual bool Compare (const RItem *b, const std::string &) const;  ; const std::string & GetIcon () const;  ; const std::string & GetMTime () const;  ; const std::string & GetName () const;  ; const std::string & GetSize () const;  ; const std::string & GetTitle () const;  ; virtual bool IsFolder () const;  ; virtual bool IsHidden () const;  ; void SetChecked (bool on=true);  ; void SetExpanded (bool on=true);  ; void SetIcon (const std::string &_icon);  ; void SetMTime (const std::string &_mtime);  ; void SetName (const std::string &_name);  ; void SetSize (const std::string &_size);  ; void SetSize (Long64_t _size);  ; void SetTitle (const std::string &_title);  . Protected Attributes; std::string color;  color ;  ; int id {0};  node id ;  ; std::string material;  material ;  ; int pvis {0};  visibility of physical node ;  ; bool top {false};  indicates if node selected as top ;  ; int vis {0};  visibility of logical node ;  ;  Protected Attributes inherited from ROOT::Browsable::RItem; bool checked {false};  is checked, not yet used ;  ; bool expanded {false};  is expanded ;  ; std::string fsize;  item size ;  ; std::string icon;  icon associated with item ;  ; std::string mtime;  modification time ;  ; std::string name;  item name ;  ; int nchilds {0};  number of childs ;  ; std::string title;  item title ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeoItem:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeoItem() [1/2]. ROOT::RGeoItem::RGeoItem ; (; ). default . Default constructor. . ◆ RGeoItem() [2/2]. ROOT::RGeoItem::RGeoItem ; (; const std::string & ; _name, . int ; _nchilds, . int ; _nodeid, . const std::string & ; _color, . const std::string & ; _material = """", . int ; _vis = 0, . int ; _pvis = 0 . ). inline . Definition at line 107 of file RGeomData.hxx. ◆ ~RGeoItem(). ROOT::RGeoItem::~RGeoItem ; (; ). overridedefault . Member Function Documentat",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoItem.html
https://root.cern/doc/v632/classROOT_1_1RGeoItem.html:3680,Testability,log,logical,3680,"::string icon;  icon associated with item ;  ; std::string mtime;  modification time ;  ; std::string name;  item name ;  ; int nchilds {0};  number of childs ;  ; std::string title;  item title ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeoItem:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeoItem() [1/2]. ROOT::RGeoItem::RGeoItem ; (; ). default . Default constructor. . ◆ RGeoItem() [2/2]. ROOT::RGeoItem::RGeoItem ; (; const std::string & ; _name, . int ; _nchilds, . int ; _nodeid, . const std::string & ; _color, . const std::string & ; _material = """", . int ; _vis = 0, . int ; _pvis = 0 . ). inline . Definition at line 107 of file RGeomData.hxx. ◆ ~RGeoItem(). ROOT::RGeoItem::~RGeoItem ; (; ). overridedefault . Member Function Documentation. ◆ SetTop(). void ROOT::RGeoItem::SetTop ; (; bool ; on = true). inline . Definition at line 115 of file RGeomData.hxx. Member Data Documentation. ◆ color. std::string ROOT::RGeoItem::color. protected . color ; Definition at line 96 of file RGeomData.hxx. ◆ id. int ROOT::RGeoItem::id {0}. protected . node id ; Definition at line 95 of file RGeomData.hxx. ◆ material. std::string ROOT::RGeoItem::material. protected . material ; Definition at line 97 of file RGeomData.hxx. ◆ pvis. int ROOT::RGeoItem::pvis {0}. protected . visibility of physical node ; Definition at line 99 of file RGeomData.hxx. ◆ top. bool ROOT::RGeoItem::top {false}. protected . indicates if node selected as top ; Definition at line 100 of file RGeomData.hxx. ◆ vis. int ROOT::RGeoItem::vis {0}. protected . visibility of logical node ; Definition at line 98 of file RGeomData.hxx. Libraries for ROOT::RGeoItem:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeoItem. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoItem.html
https://root.cern/doc/v632/classROOT_1_1RGeomConfig.html:264,Modifiability,config,configured,264,". ROOT: ROOT::RGeomConfig Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; ROOT::RGeomConfig Class Reference. ; Configuration parameters which can be configured on the client Send as is to-from client. ; Definition at line 162 of file RGeomData.hxx. Public Attributes; int build_shapes {1};  when shapes build on server 0 - never, 1 - TGeoComposite, 2 - plus non-cylindrical, 3 - all ;  ; std::string drawopt;  draw options for TGeoPainter ;  ; int maxnumfaces {0};  maximal number of faces ;  ; int maxnumnodes {0};  maximal number of nodes ;  ; int nsegm {0};  number of segments for cylindrical shapes ;  ; bool showtop {false};  show geometry top volume, off by default ;  ; int vislevel {0};  visible level ;  . #include <ROOT/RGeomData.hxx>; Member Data Documentation. ◆ build_shapes. int ROOT::RGeomConfig::build_shapes {1}. when shapes build on server 0 - never, 1 - TGeoComposite, 2 - plus non-cylindrical, 3 - all ; Definition at line 168 of file RGeomData.hxx. ◆ drawopt. std::string ROOT::RGeomConfig::drawopt. draw options for TGeoPainter ; Definition at line 170 of file RGeomData.hxx. ◆ maxnumfaces. int ROOT::RGeomConfig::maxnumfaces {0}. maximal number of faces ; Definition at line 166 of file RGeomData.hxx. ◆ maxnumnodes. int ROOT::RGeomConfig::maxnumnodes {0}. maximal number of nodes ; Definition at line 165 of file RGeomData.hxx. ◆ nsegm. int ROOT::RGeomConfig::nsegm {0}. number of segments for cylindrical shapes ; Definition at line 169 of file RGeomData.hxx. ◆ showtop. bool ROOT::RGeomConfig::showtop {false}. show geometry top volume, off by default ; Definition at line 167 of file RGeomData.hxx. ◆ vislevel. int ROOT::RGeomConfig::vislevel {0}. visible level ; Definition at line 164 of file RGeomData.hxx. Libraries for ROOT::RGeomConfig:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomDa",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomConfig.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomConfig.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:1664,Availability,failure,failure,1664,"llect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ;  ; void Build (TGeoVolume *vol);  Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ;  ; bool ChangeConfiguration (const std::string &json);  Change configuration by client Returns true if any parameter was really changed. ;  ; bool ChangeNodeVisibility (const std::vector< std::string > &path, bool on);  Change visibility for specified element Returns true if changes was performed. ;  ; bool ClearAllPhysVisibility ();  Reset all custom visibility settings. ;  ; void ClearCache ();  Clear cached data, need to be clear when connection broken. ;  ; void ClearDrawData ();  Clear raw data. Will be rebuild when next connection will be established. ;  ; bool ClearPhysNodeVisibility (const std::vector< std::string > &path);  Reset custom visibility of physical node by path. ;  ; int FindNodeId (const std::vector< int > &stack);  Returns nodeid for given stack array, returns -1 in case of failure. ;  ; std::string GetActiveItem () const;  ; std::vector< int > GetClickedItem () const;  ; std::string GetDrawJson () const;  ; std::string GetDrawOptions () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; std::vector< int > GetHighlightedItem () const;  ; int GetJsonComp () const;  Returns JSON compression level for data transfer. ;  ; int GetMaxVisFaces () const;  Returns maximal visible number of faces, ignored when non-positive. ;  ; int GetMaxVisNodes () const;  Returns maximal visible number of nodes, ignored when non-positive. ;  ; TVirtualMutex * GetMutex () const;  Return currently used mutex. ;  ; int GetNSegments () const;  Return of segments for cylindrical shapes, if 0 - default value will be used. ;  ; int GetNumNodes () const;  Number of unique nodes in the geometry. ;  ; std::string GetSearch () const;  ; std::string GetSearchJson () const;  ; bool GetTopVisible () const;  Returns draw option",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:2766,Availability,avail,available,2766,"lickedItem () const;  ; std::string GetDrawJson () const;  ; std::string GetDrawOptions () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; std::vector< int > GetHighlightedItem () const;  ; int GetJsonComp () const;  Returns JSON compression level for data transfer. ;  ; int GetMaxVisFaces () const;  Returns maximal visible number of faces, ignored when non-positive. ;  ; int GetMaxVisNodes () const;  Returns maximal visible number of nodes, ignored when non-positive. ;  ; TVirtualMutex * GetMutex () const;  Return currently used mutex. ;  ; int GetNSegments () const;  Return of segments for cylindrical shapes, if 0 - default value will be used. ;  ; int GetNumNodes () const;  Number of unique nodes in the geometry. ;  ; std::string GetSearch () const;  ; std::string GetSearchJson () const;  ; bool GetTopVisible () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; int GetVisLevel () const;  Returns maximal visible level. ;  ; bool HasDrawData () const;  Check if there is draw data available. ;  ; bool IsBuild () const;  ; int IsBuildShapes () const;  Returns true if binary 3D model build already by C++ server (default) ;  ; bool IsPreferredOffline () const;  Is offline operations preferred. ;  ; bool IsPrincipalEndNode (int nodeid);  return true when node used in main geometry drawing and does not have childs for such nodes one could provide optimize toggling of visibility flags ;  ; void IssueSignal (const void *handler, const std::string &kind);  Issue signal, which distributed on all handlers - excluding source handler. ;  ; std::vector< int > MakeIdsByStack (const std::vector< int > &stack);  Produce list of node ids for given stack If found nodes preselected - use their ids. ;  ; std::unique_ptr< RGeomNodeInfo > MakeNodeInfo (const std::vector< int > &stack);  Change visibility for specified element Returns true if changes was performed. ;  ; std::vector< std::string > MakePathByStack (const std::vector< int > &stack);  Returns pat",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:14191,Availability,failure,failure,14191,"inition at line 1370 of file RGeomData.cxx. ◆ ClearPhysNodeVisibility(). bool RGeomDescription::ClearPhysNodeVisibility ; (; const std::vector< std::string > & ; path). Reset custom visibility of physical node by path. ; Definition at line 2065 of file RGeomData.cxx. ◆ CollectNodes(). void RGeomDescription::CollectNodes ; (; RGeomDrawing & ; drawing, . bool ; all_nodes = false . ). private . Collect nodes which are used in visibles. ; Definition at line 721 of file RGeomData.cxx. ◆ CopyMaterialProperties(). void RGeomDescription::CopyMaterialProperties ; (; TGeoVolume * ; vol, . RGeomNode & ; node . ). private . Copy material properties. ; Definition at line 1159 of file RGeomData.cxx. ◆ CountShapeFaces(). int RGeomDescription::CountShapeFaces ; (; TGeoShape * ; shape). private . Count number of faces for the shape. ; Definition at line 937 of file RGeomData.cxx. ◆ FindNodeId(). int RGeomDescription::FindNodeId ; (; const std::vector< int > & ; stack). Returns nodeid for given stack array, returns -1 in case of failure. ; Definition at line 1602 of file RGeomData.cxx. ◆ FindShapeDescr(). RGeomDescription::ShapeDescr & RGeomDescription::FindShapeDescr ; (; TGeoShape * ; shape). private . Find description object for requested shape If not exists - will be created. ; Definition at line 857 of file RGeomData.cxx. ◆ GetActiveItem(). std::string ROOT::RGeomDescription::GetActiveItem ; (; ); const. inline . Definition at line 441 of file RGeomData.hxx. ◆ GetClickedItem(). std::vector< int > ROOT::RGeomDescription::GetClickedItem ; (; ); const. inline . Definition at line 427 of file RGeomData.hxx. ◆ GetDrawJson(). std::string ROOT::RGeomDescription::GetDrawJson ; (; ); const. inline . Definition at line 382 of file RGeomData.hxx. ◆ GetDrawOptions(). std::string ROOT::RGeomDescription::GetDrawOptions ; (; ); const. inline . Returns draw options, used for JSROOT TGeoPainter. ; Definition at line 349 of file RGeomData.hxx. ◆ GetHighlightedItem(). std::vector< int > ROOT::RGeom",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:17533,Availability,avail,available,17533,". ◆ GetSearchJson(). std::string ROOT::RGeomDescription::GetSearchJson ; (; ); const. inline . Definition at line 384 of file RGeomData.hxx. ◆ GetTopVisible(). bool ROOT::RGeomDescription::GetTopVisible ; (; ); const. inline . Returns draw options, used for JSROOT TGeoPainter. ; Definition at line 334 of file RGeomData.hxx. ◆ GetUsedNSegments(). int RGeomDescription::GetUsedNSegments ; (; int ; min = 20). private . Returns really used number of cylindrical segments. ; Definition at line 922 of file RGeomData.cxx. ◆ GetVisLevel(). int ROOT::RGeomDescription::GetVisLevel ; (; ); const. inline . Returns maximal visible level. ; Definition at line 329 of file RGeomData.hxx. ◆ GetVolume(). TGeoVolume * RGeomDescription::GetVolume ; (; int ; nodeid). private . Get volume for specified nodeid If specific volume was configured, it will be returned for nodeid==0. ; Definition at line 583 of file RGeomData.cxx. ◆ HasDrawData(). bool RGeomDescription::HasDrawData ; (; ); const. Check if there is draw data available. ; Definition at line 1331 of file RGeomData.cxx. ◆ IsBuild(). bool ROOT::RGeomDescription::IsBuild ; (; ); const. inline . Definition at line 371 of file RGeomData.hxx. ◆ IsBuildShapes(). int ROOT::RGeomDescription::IsBuildShapes ; (; ); const. inline . Returns true if binary 3D model build already by C++ server (default) ; Definition at line 339 of file RGeomData.hxx. ◆ IsPhysNodeVisible(). int RGeomDescription::IsPhysNodeVisible ; (; const std::vector< int > & ; stack). private . Check if there special settings for specified physical node returns -1 if nothing is found. ; Definition at line 2043 of file RGeomData.cxx. ◆ IsPreferredOffline(). bool ROOT::RGeomDescription::IsPreferredOffline ; (; ); const. inline . Is offline operations preferred. ; After get full description, client can do most operations without extra requests ; Definition at line 361 of file RGeomData.hxx. ◆ IsPrincipalEndNode(). bool RGeomDescription::IsPrincipalEndNode ; (; int ; nodeid). return",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:920,Deployability,configurat,configuration,920,". ROOT: ROOT::RGeomDescription Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RGeomDescription Class Reference. . Definition at line 210 of file RGeomData.hxx. Classes; class  ShapeDescr;  . Public Member Functions;  RGeomDescription ()=default;  ; void AddSignalHandler (const void *handler, RGeomSignalFunc_t func);  Add signal handler. ;  ; void Build (TGeoManager *mgr, const std::string &volname="""");  Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ;  ; void Build (TGeoVolume *vol);  Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ;  ; bool ChangeConfiguration (const std::string &json);  Change configuration by client Returns true if any parameter was really changed. ;  ; bool ChangeNodeVisibility (const std::vector< std::string > &path, bool on);  Change visibility for specified element Returns true if changes was performed. ;  ; bool ClearAllPhysVisibility ();  Reset all custom visibility settings. ;  ; void ClearCache ();  Clear cached data, need to be clear when connection broken. ;  ; void ClearDrawData ();  Clear raw data. Will be rebuild when next connection will be established. ;  ; bool ClearPhysNodeVisibility (const std::vector< std::string > &path);  Reset custom visibility of physical node by path. ;  ; int FindNodeId (const std::vector< int > &stack);  Returns nodeid for given stack array, returns -1 in case of failure. ;  ; std::string GetActiveItem () const;  ; std::vector< int > GetClickedItem () const;  ; std::string GetDrawJson () const;  ; std::string GetDrawOptions () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; std::vector< int > GetHighlightedItem () const;  ; int GetJsonComp () const;  Returns JSON compression lev",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:5187,Deployability,configurat,configuration,5187,"d description object for requested shape If not exists - will be created. ;  ; void ProduceDrawData ();  Collect all information required to draw geometry on the client This includes list of each visible nodes, meshes and matrixes. ;  ; bool ProduceDrawingFor (int nodeid, std::string &json, bool check_volume=false);  Produce shape rendering data for given stack All nodes, which are referencing same shape will be transferred Returns true if new render information provided. ;  ; std::string ProduceJson (bool all_nodes=false);  Produce JSON string which can be directly used with build function from JSROOT to create three.js model of configured geometry. ;  ; std::string ProduceModifyReply (int nodeid);  Return string with only part of nodes description which were modified Checks also volume. ;  ; void ProduceSearchData ();  Produces search data if necessary. ;  ; void RemoveSignalHandler (const void *handler);  Remove signal handler. ;  ; void SavePrimitive (std::ostream &fs, const std::string &name);  Save geometry configuration as C++ macro. ;  ; int SearchVisibles (const std::string &find, std::string &hjson, std::string &json);  Search visible nodes for provided name If number of found elements less than 100, create description and shapes for them Returns number of match elements. ;  ; bool SelectTop (const std::vector< std::string > &path);  Select top node by path Used by the client to change active node Returns true if selected node was changed. ;  ; bool SetActiveItem (const std::string &itemname);  ; void SetBuildShapes (int lvl=1);  Instruct to build binary 3D model already on the server (true) or send TGeoShape as is to client, which can build model itself. ;  ; bool SetClickedItem (const std::vector< int > &stack);  ; void SetDrawOptions (const std::string &opt="""");  Set draw options as string for JSROOT TGeoPainter. ;  ; bool SetHighlightedItem (const std::vector< int > &stack);  ; void SetJsonComp (int comp=0);  Set JSON compression level for data transfe",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:9580,Deployability,configurat,configuration,9580,"der each node. ;  ; void ResetRndrInfos ();  Reset shape info, which used to pack binary data. ;  ; int ScanNodes (bool only_visible, int maxlvl, RGeomScanFunc_t func);  Iterate over all nodes and call function for visible. ;  . Private Attributes; std::string fActiveItemName;  ! name of item which should be activated in hierarchy ;  ; int fActualLevel {0};  ! level can be reduced when selecting nodes ;  ; RGeomConfig fCfg;  ! configuration parameter editable from GUI ;  ; std::vector< int > fClickedStack;  ! clicked element by stack ;  ; std::vector< RGeomNode > fDesc;  ! converted description, send to client ;  ; int fDrawIdCut {0};  ! sortid used for selection of most-significant nodes ;  ; std::string fDrawJson;  ! JSON with main nodes drawn by client ;  ; TGeoVolume * fDrawVolume {nullptr};  ! select volume independent from TGeoManager ;  ; std::vector< int > fHighlightedStack;  ! highlighted element by stack ;  ; int fJsonComp {0};  ! default JSON compression ;  ; TVirtualMutex * fMutex {nullptr};  ! external mutex used to protect all data ;  ; std::vector< TGeoNode * > fNodes;  ! flat list of all nodes ;  ; bool fPreferredOffline {false};  ! indicates that full description should be provided to client ;  ; std::string fSearch;  ! search string in hierarchy ;  ; std::string fSearchJson;  ! drawing json for search ;  ; std::vector< int > fSelectedStack;  ! selected branch of geometry by stack ;  ; std::vector< ShapeDescr > fShapes;  ! shapes with created descriptions ;  ; std::vector< std::pair< const void *, RGeomSignalFunc_t > > fSignals;  ! registered signals ;  ; std::vector< int > fSortMap;  ! nodes in order large -> smaller volume ;  ; std::vector< RGeomNodeVisibility > fVisibility;  ! custom visibility flags for physical nodes ;  . Friends; class RGeomBrowserIter;  . #include <ROOT/RGeomData.hxx>; Constructor & Destructor Documentation. ◆ RGeomDescription(). ROOT::RGeomDescription::RGeomDescription ; (; ). default . Member Function Documentation. ◆ AddSig",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:12143,Deployability,configurat,configuration,12143,"escription::AddSignalHandler ; (; const void * ; handler, . RGeomSignalFunc_t ; func . ). Add signal handler. ; Definition at line 312 of file RGeomData.cxx. ◆ Build() [1/2]. void RGeomDescription::Build ; (; TGeoManager * ; mgr, . const std::string & ; volname = """" . ). Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ; Definition at line 425 of file RGeomData.cxx. ◆ Build() [2/2]. void RGeomDescription::Build ; (; TGeoVolume * ; vol). Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ; Definition at line 460 of file RGeomData.cxx. ◆ BuildDescription(). void RGeomDescription::BuildDescription ; (; TGeoNode * ; topnode, . TGeoVolume * ; topvolume . ). private . Build geometry description. ; Definition at line 494 of file RGeomData.cxx. ◆ ChangeConfiguration(). bool RGeomDescription::ChangeConfiguration ; (; const std::string & ; json). Change configuration by client Returns true if any parameter was really changed. ; Definition at line 2105 of file RGeomData.cxx. ◆ ChangeNodeVisibility(). bool RGeomDescription::ChangeNodeVisibility ; (; const std::vector< std::string > & ; path, . bool ; on . ). Change visibility for specified element Returns true if changes was performed. ; Definition at line 1850 of file RGeomData.cxx. ◆ ClearAllPhysVisibility(). bool RGeomDescription::ClearAllPhysVisibility ; (; ). Reset all custom visibility settings. ; Definition at line 2089 of file RGeomData.cxx. ◆ ClearCache(). void RGeomDescription::ClearCache ; (; ). Clear cached data, need to be clear when connection broken. ; Definition at line 1381 of file RGeomData.cxx. ◆ ClearDescription(). void RGeomDescription::ClearDescription ; (; ). private . Clear geometry description. ; Definition at line 478 of file RGeomData.cxx. ◆ ClearDrawData(). void RGeomDescription::ClearDrawData ; (; ). Clear raw data. Will be rebuild when next connection will be established. ; Definition at l",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:24082,Deployability,configurat,configuration,24082,"ction to produce three.js model. Also see example in tutorials/webgui/geom/ folder ; Definition at line 1230 of file RGeomData.cxx. ◆ ProduceModifyReply(). std::string RGeomDescription::ProduceModifyReply ; (; int ; nodeid). Return string with only part of nodes description which were modified Checks also volume. ; Definition at line 1734 of file RGeomData.cxx. ◆ ProduceSearchData(). void RGeomDescription::ProduceSearchData ; (; ). Produces search data if necessary. ; Definition at line 1340 of file RGeomData.cxx. ◆ RemoveSignalHandler(). void RGeomDescription::RemoveSignalHandler ; (; const void * ; handler). Remove signal handler. ; Definition at line 321 of file RGeomData.cxx. ◆ ResetRndrInfos(). void RGeomDescription::ResetRndrInfos ; (; ). private . Reset shape info, which used to pack binary data. ; Definition at line 1201 of file RGeomData.cxx. ◆ SavePrimitive(). void RGeomDescription::SavePrimitive ; (; std::ostream & ; fs, . const std::string & ; name . ). Save geometry configuration as C++ macro. ; Definition at line 2143 of file RGeomData.cxx. ◆ ScanNodes(). int RGeomDescription::ScanNodes ; (; bool ; only_visible, . int ; maxlvl, . RGeomScanFunc_t ; func . ). private . Iterate over all nodes and call function for visible. ; Definition at line 653 of file RGeomData.cxx. ◆ SearchVisibles(). int RGeomDescription::SearchVisibles ; (; const std::string & ; find, . std::string & ; hjson, . std::string & ; json . ). Search visible nodes for provided name If number of found elements less than 100, create description and shapes for them Returns number of match elements. ; Definition at line 1411 of file RGeomData.cxx. ◆ SelectTop(). bool RGeomDescription::SelectTop ; (; const std::vector< std::string > & ; path). Select top node by path Used by the client to change active node Returns true if selected node was changed. ; Definition at line 1946 of file RGeomData.cxx. ◆ SetActiveItem(). bool ROOT::RGeomDescription::SetActiveItem ; (; const std::string & ; itemname",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:29012,Deployability,configurat,configuration,29012,"e RGeomData.cxx. ◆ SetTopVisible(). void ROOT::RGeomDescription::SetTopVisible ; (; bool ; on = true). inline . Set draw options as string for JSROOT TGeoPainter. ; Definition at line 332 of file RGeomData.hxx. ◆ SetVisLevel(). void ROOT::RGeomDescription::SetVisLevel ; (; int ; lvl = 3). inline . Set maximal visible level. ; Definition at line 327 of file RGeomData.hxx. Friends And Related Symbol Documentation. ◆ RGeomBrowserIter. friend class RGeomBrowserIter. friend . Definition at line 212 of file RGeomData.hxx. Member Data Documentation. ◆ fActiveItemName. std::string ROOT::RGeomDescription::fActiveItemName. private . ! name of item which should be activated in hierarchy ; Definition at line 262 of file RGeomData.hxx. ◆ fActualLevel. int ROOT::RGeomDescription::fActualLevel {0}. private . ! level can be reduced when selecting nodes ; Definition at line 259 of file RGeomData.hxx. ◆ fCfg. RGeomConfig ROOT::RGeomDescription::fCfg. private . ! configuration parameter editable from GUI ; Definition at line 264 of file RGeomData.hxx. ◆ fClickedStack. std::vector<int> ROOT::RGeomDescription::fClickedStack. private . ! clicked element by stack ; Definition at line 250 of file RGeomData.hxx. ◆ fDesc. std::vector<RGeomNode> ROOT::RGeomDescription::fDesc. private . ! converted description, send to client ; Definition at line 243 of file RGeomData.hxx. ◆ fDrawIdCut. int ROOT::RGeomDescription::fDrawIdCut {0}. private . ! sortid used for selection of most-significant nodes ; Definition at line 258 of file RGeomData.hxx. ◆ fDrawJson. std::string ROOT::RGeomDescription::fDrawJson. private . ! JSON with main nodes drawn by client ; Definition at line 257 of file RGeomData.hxx. ◆ fDrawVolume. TGeoVolume* ROOT::RGeomDescription::fDrawVolume {nullptr}. private . ! select volume independent from TGeoManager ; Definition at line 246 of file RGeomData.hxx. ◆ fHighlightedStack. std::vector<int> ROOT::RGeomDescription::fHighlightedStack. private . ! highlighted element by stack ; Defi",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:9525,Energy Efficiency,reduce,reduced,9525,"der each node. ;  ; void ResetRndrInfos ();  Reset shape info, which used to pack binary data. ;  ; int ScanNodes (bool only_visible, int maxlvl, RGeomScanFunc_t func);  Iterate over all nodes and call function for visible. ;  . Private Attributes; std::string fActiveItemName;  ! name of item which should be activated in hierarchy ;  ; int fActualLevel {0};  ! level can be reduced when selecting nodes ;  ; RGeomConfig fCfg;  ! configuration parameter editable from GUI ;  ; std::vector< int > fClickedStack;  ! clicked element by stack ;  ; std::vector< RGeomNode > fDesc;  ! converted description, send to client ;  ; int fDrawIdCut {0};  ! sortid used for selection of most-significant nodes ;  ; std::string fDrawJson;  ! JSON with main nodes drawn by client ;  ; TGeoVolume * fDrawVolume {nullptr};  ! select volume independent from TGeoManager ;  ; std::vector< int > fHighlightedStack;  ! highlighted element by stack ;  ; int fJsonComp {0};  ! default JSON compression ;  ; TVirtualMutex * fMutex {nullptr};  ! external mutex used to protect all data ;  ; std::vector< TGeoNode * > fNodes;  ! flat list of all nodes ;  ; bool fPreferredOffline {false};  ! indicates that full description should be provided to client ;  ; std::string fSearch;  ! search string in hierarchy ;  ; std::string fSearchJson;  ! drawing json for search ;  ; std::vector< int > fSelectedStack;  ! selected branch of geometry by stack ;  ; std::vector< ShapeDescr > fShapes;  ! shapes with created descriptions ;  ; std::vector< std::pair< const void *, RGeomSignalFunc_t > > fSignals;  ! registered signals ;  ; std::vector< int > fSortMap;  ! nodes in order large -> smaller volume ;  ; std::vector< RGeomNodeVisibility > fVisibility;  ! custom visibility flags for physical nodes ;  . Friends; class RGeomBrowserIter;  . #include <ROOT/RGeomData.hxx>; Constructor & Destructor Documentation. ◆ RGeomDescription(). ROOT::RGeomDescription::RGeomDescription ; (; ). default . Member Function Documentation. ◆ AddSig",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:28873,Energy Efficiency,reduce,reduced,28873,"tring & ; json . ). Change search query and belongs to it json string Returns true if any parameter was really changed. ; Definition at line 2130 of file RGeomData.cxx. ◆ SetTopVisible(). void ROOT::RGeomDescription::SetTopVisible ; (; bool ; on = true). inline . Set draw options as string for JSROOT TGeoPainter. ; Definition at line 332 of file RGeomData.hxx. ◆ SetVisLevel(). void ROOT::RGeomDescription::SetVisLevel ; (; int ; lvl = 3). inline . Set maximal visible level. ; Definition at line 327 of file RGeomData.hxx. Friends And Related Symbol Documentation. ◆ RGeomBrowserIter. friend class RGeomBrowserIter. friend . Definition at line 212 of file RGeomData.hxx. Member Data Documentation. ◆ fActiveItemName. std::string ROOT::RGeomDescription::fActiveItemName. private . ! name of item which should be activated in hierarchy ; Definition at line 262 of file RGeomData.hxx. ◆ fActualLevel. int ROOT::RGeomDescription::fActualLevel {0}. private . ! level can be reduced when selecting nodes ; Definition at line 259 of file RGeomData.hxx. ◆ fCfg. RGeomConfig ROOT::RGeomDescription::fCfg. private . ! configuration parameter editable from GUI ; Definition at line 264 of file RGeomData.hxx. ◆ fClickedStack. std::vector<int> ROOT::RGeomDescription::fClickedStack. private . ! clicked element by stack ; Definition at line 250 of file RGeomData.hxx. ◆ fDesc. std::vector<RGeomNode> ROOT::RGeomDescription::fDesc. private . ! converted description, send to client ; Definition at line 243 of file RGeomData.hxx. ◆ fDrawIdCut. int ROOT::RGeomDescription::fDrawIdCut {0}. private . ! sortid used for selection of most-significant nodes ; Definition at line 258 of file RGeomData.hxx. ◆ fDrawJson. std::string ROOT::RGeomDescription::fDrawJson. private . ! JSON with main nodes drawn by client ; Definition at line 257 of file RGeomData.hxx. ◆ fDrawVolume. TGeoVolume* ROOT::RGeomDescription::fDrawVolume {nullptr}. private . ! select volume independent from TGeoManager ; Definition at line 246",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:920,Modifiability,config,configuration,920,". ROOT: ROOT::RGeomDescription Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RGeomDescription Class Reference. . Definition at line 210 of file RGeomData.hxx. Classes; class  ShapeDescr;  . Public Member Functions;  RGeomDescription ()=default;  ; void AddSignalHandler (const void *handler, RGeomSignalFunc_t func);  Add signal handler. ;  ; void Build (TGeoManager *mgr, const std::string &volname="""");  Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ;  ; void Build (TGeoVolume *vol);  Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ;  ; bool ChangeConfiguration (const std::string &json);  Change configuration by client Returns true if any parameter was really changed. ;  ; bool ChangeNodeVisibility (const std::vector< std::string > &path, bool on);  Change visibility for specified element Returns true if changes was performed. ;  ; bool ClearAllPhysVisibility ();  Reset all custom visibility settings. ;  ; void ClearCache ();  Clear cached data, need to be clear when connection broken. ;  ; void ClearDrawData ();  Clear raw data. Will be rebuild when next connection will be established. ;  ; bool ClearPhysNodeVisibility (const std::vector< std::string > &path);  Reset custom visibility of physical node by path. ;  ; int FindNodeId (const std::vector< int > &stack);  Returns nodeid for given stack array, returns -1 in case of failure. ;  ; std::string GetActiveItem () const;  ; std::vector< int > GetClickedItem () const;  ; std::string GetDrawJson () const;  ; std::string GetDrawOptions () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; std::vector< int > GetHighlightedItem () const;  ; int GetJsonComp () const;  Returns JSON compression lev",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:4796,Modifiability,config,configured,4796,"ckByIds (const std::vector< int > &ids);  Creates stack for given array of ids, first element always should be 0. ;  ; std::vector< int > MakeStackByPath (const std::vector< std::string > &path);  Produce stack based on string path Used to highlight geo volumes by browser hover event. ;  ; std::string ProcessBrowserRequest (const std::string &req="""");  Find description object for requested shape If not exists - will be created. ;  ; void ProduceDrawData ();  Collect all information required to draw geometry on the client This includes list of each visible nodes, meshes and matrixes. ;  ; bool ProduceDrawingFor (int nodeid, std::string &json, bool check_volume=false);  Produce shape rendering data for given stack All nodes, which are referencing same shape will be transferred Returns true if new render information provided. ;  ; std::string ProduceJson (bool all_nodes=false);  Produce JSON string which can be directly used with build function from JSROOT to create three.js model of configured geometry. ;  ; std::string ProduceModifyReply (int nodeid);  Return string with only part of nodes description which were modified Checks also volume. ;  ; void ProduceSearchData ();  Produces search data if necessary. ;  ; void RemoveSignalHandler (const void *handler);  Remove signal handler. ;  ; void SavePrimitive (std::ostream &fs, const std::string &name);  Save geometry configuration as C++ macro. ;  ; int SearchVisibles (const std::string &find, std::string &hjson, std::string &json);  Search visible nodes for provided name If number of found elements less than 100, create description and shapes for them Returns number of match elements. ;  ; bool SelectTop (const std::vector< std::string > &path);  Select top node by path Used by the client to change active node Returns true if selected node was changed. ;  ; bool SetActiveItem (const std::string &itemname);  ; void SetBuildShapes (int lvl=1);  Instruct to build binary 3D model already on the server (true) or send TGeoS",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:5187,Modifiability,config,configuration,5187,"d description object for requested shape If not exists - will be created. ;  ; void ProduceDrawData ();  Collect all information required to draw geometry on the client This includes list of each visible nodes, meshes and matrixes. ;  ; bool ProduceDrawingFor (int nodeid, std::string &json, bool check_volume=false);  Produce shape rendering data for given stack All nodes, which are referencing same shape will be transferred Returns true if new render information provided. ;  ; std::string ProduceJson (bool all_nodes=false);  Produce JSON string which can be directly used with build function from JSROOT to create three.js model of configured geometry. ;  ; std::string ProduceModifyReply (int nodeid);  Return string with only part of nodes description which were modified Checks also volume. ;  ; void ProduceSearchData ();  Produces search data if necessary. ;  ; void RemoveSignalHandler (const void *handler);  Remove signal handler. ;  ; void SavePrimitive (std::ostream &fs, const std::string &name);  Save geometry configuration as C++ macro. ;  ; int SearchVisibles (const std::string &find, std::string &hjson, std::string &json);  Search visible nodes for provided name If number of found elements less than 100, create description and shapes for them Returns number of match elements. ;  ; bool SelectTop (const std::vector< std::string > &path);  Select top node by path Used by the client to change active node Returns true if selected node was changed. ;  ; bool SetActiveItem (const std::string &itemname);  ; void SetBuildShapes (int lvl=1);  Instruct to build binary 3D model already on the server (true) or send TGeoShape as is to client, which can build model itself. ;  ; bool SetClickedItem (const std::vector< int > &stack);  ; void SetDrawOptions (const std::string &opt="""");  Set draw options as string for JSROOT TGeoPainter. ;  ; bool SetHighlightedItem (const std::vector< int > &stack);  ; void SetJsonComp (int comp=0);  Set JSON compression level for data transfe",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:8152,Modifiability,config,configured,8152,"ngs to it json string Returns true if any parameter was really changed. ;  ; void SetTopVisible (bool on=true);  Set draw options as string for JSROOT TGeoPainter. ;  ; void SetVisLevel (int lvl=3);  Set maximal visible level. ;  . Private Member Functions; void BuildDescription (TGeoNode *topnode, TGeoVolume *topvolume);  Build geometry description. ;  ; void ClearDescription ();  Clear geometry description. ;  ; void CollectNodes (RGeomDrawing &drawing, bool all_nodes=false);  Collect nodes which are used in visibles. ;  ; void CopyMaterialProperties (TGeoVolume *vol, RGeomNode &node);  Copy material properties. ;  ; int CountShapeFaces (TGeoShape *shape);  Count number of faces for the shape. ;  ; ShapeDescr & FindShapeDescr (TGeoShape *shape);  Find description object for requested shape If not exists - will be created. ;  ; int GetUsedNSegments (int min=20);  Returns really used number of cylindrical segments. ;  ; TGeoVolume * GetVolume (int nodeid);  Get volume for specified nodeid If specific volume was configured, it will be returned for nodeid==0. ;  ; int IsPhysNodeVisible (const std::vector< int > &stack);  Check if there special settings for specified physical node returns -1 if nothing is found. ;  ; std::string MakeDrawingJson (RGeomDrawing &drawing, bool has_shapes=false);  Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in this case one can exclude several classes which are not interesting, but appears very often. ;  ; ShapeDescr & MakeShapeDescr (TGeoShape *shape);  Find description object and create render information. ;  ; int MarkVisible (bool on_screen=false);  Set visibility flag for each nodes. ;  ; void PackMatrix (std::vector< float > &arr, TGeoMatrix *matr);  Pack matrix into vector, which can be send to client Following sizes can be used for vector: 0 - Identity matrix 3 - Translation 4 - Scale (last element always 1) 9 - Rotation 16 - Full size. ;  ; void ProduceIdShifts ();  Count total numb",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:9580,Modifiability,config,configuration,9580,"der each node. ;  ; void ResetRndrInfos ();  Reset shape info, which used to pack binary data. ;  ; int ScanNodes (bool only_visible, int maxlvl, RGeomScanFunc_t func);  Iterate over all nodes and call function for visible. ;  . Private Attributes; std::string fActiveItemName;  ! name of item which should be activated in hierarchy ;  ; int fActualLevel {0};  ! level can be reduced when selecting nodes ;  ; RGeomConfig fCfg;  ! configuration parameter editable from GUI ;  ; std::vector< int > fClickedStack;  ! clicked element by stack ;  ; std::vector< RGeomNode > fDesc;  ! converted description, send to client ;  ; int fDrawIdCut {0};  ! sortid used for selection of most-significant nodes ;  ; std::string fDrawJson;  ! JSON with main nodes drawn by client ;  ; TGeoVolume * fDrawVolume {nullptr};  ! select volume independent from TGeoManager ;  ; std::vector< int > fHighlightedStack;  ! highlighted element by stack ;  ; int fJsonComp {0};  ! default JSON compression ;  ; TVirtualMutex * fMutex {nullptr};  ! external mutex used to protect all data ;  ; std::vector< TGeoNode * > fNodes;  ! flat list of all nodes ;  ; bool fPreferredOffline {false};  ! indicates that full description should be provided to client ;  ; std::string fSearch;  ! search string in hierarchy ;  ; std::string fSearchJson;  ! drawing json for search ;  ; std::vector< int > fSelectedStack;  ! selected branch of geometry by stack ;  ; std::vector< ShapeDescr > fShapes;  ! shapes with created descriptions ;  ; std::vector< std::pair< const void *, RGeomSignalFunc_t > > fSignals;  ! registered signals ;  ; std::vector< int > fSortMap;  ! nodes in order large -> smaller volume ;  ; std::vector< RGeomNodeVisibility > fVisibility;  ! custom visibility flags for physical nodes ;  . Friends; class RGeomBrowserIter;  . #include <ROOT/RGeomData.hxx>; Constructor & Destructor Documentation. ◆ RGeomDescription(). ROOT::RGeomDescription::RGeomDescription ; (; ). default . Member Function Documentation. ◆ AddSig",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:12143,Modifiability,config,configuration,12143,"escription::AddSignalHandler ; (; const void * ; handler, . RGeomSignalFunc_t ; func . ). Add signal handler. ; Definition at line 312 of file RGeomData.cxx. ◆ Build() [1/2]. void RGeomDescription::Build ; (; TGeoManager * ; mgr, . const std::string & ; volname = """" . ). Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ; Definition at line 425 of file RGeomData.cxx. ◆ Build() [2/2]. void RGeomDescription::Build ; (; TGeoVolume * ; vol). Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ; Definition at line 460 of file RGeomData.cxx. ◆ BuildDescription(). void RGeomDescription::BuildDescription ; (; TGeoNode * ; topnode, . TGeoVolume * ; topvolume . ). private . Build geometry description. ; Definition at line 494 of file RGeomData.cxx. ◆ ChangeConfiguration(). bool RGeomDescription::ChangeConfiguration ; (; const std::string & ; json). Change configuration by client Returns true if any parameter was really changed. ; Definition at line 2105 of file RGeomData.cxx. ◆ ChangeNodeVisibility(). bool RGeomDescription::ChangeNodeVisibility ; (; const std::vector< std::string > & ; path, . bool ; on . ). Change visibility for specified element Returns true if changes was performed. ; Definition at line 1850 of file RGeomData.cxx. ◆ ClearAllPhysVisibility(). bool RGeomDescription::ClearAllPhysVisibility ; (; ). Reset all custom visibility settings. ; Definition at line 2089 of file RGeomData.cxx. ◆ ClearCache(). void RGeomDescription::ClearCache ; (; ). Clear cached data, need to be clear when connection broken. ; Definition at line 1381 of file RGeomData.cxx. ◆ ClearDescription(). void RGeomDescription::ClearDescription ; (; ). private . Clear geometry description. ; Definition at line 478 of file RGeomData.cxx. ◆ ClearDrawData(). void RGeomDescription::ClearDrawData ; (; ). Clear raw data. Will be rebuild when next connection will be established. ; Definition at l",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:17343,Modifiability,config,configured,17343,"ometry. ; Definition at line 369 of file RGeomData.hxx. ◆ GetSearch(). std::string ROOT::RGeomDescription::GetSearch ; (; ); const. inline . Definition at line 383 of file RGeomData.hxx. ◆ GetSearchJson(). std::string ROOT::RGeomDescription::GetSearchJson ; (; ); const. inline . Definition at line 384 of file RGeomData.hxx. ◆ GetTopVisible(). bool ROOT::RGeomDescription::GetTopVisible ; (; ); const. inline . Returns draw options, used for JSROOT TGeoPainter. ; Definition at line 334 of file RGeomData.hxx. ◆ GetUsedNSegments(). int RGeomDescription::GetUsedNSegments ; (; int ; min = 20). private . Returns really used number of cylindrical segments. ; Definition at line 922 of file RGeomData.cxx. ◆ GetVisLevel(). int ROOT::RGeomDescription::GetVisLevel ; (; ); const. inline . Returns maximal visible level. ; Definition at line 329 of file RGeomData.hxx. ◆ GetVolume(). TGeoVolume * RGeomDescription::GetVolume ; (; int ; nodeid). private . Get volume for specified nodeid If specific volume was configured, it will be returned for nodeid==0. ; Definition at line 583 of file RGeomData.cxx. ◆ HasDrawData(). bool RGeomDescription::HasDrawData ; (; ); const. Check if there is draw data available. ; Definition at line 1331 of file RGeomData.cxx. ◆ IsBuild(). bool ROOT::RGeomDescription::IsBuild ; (; ); const. inline . Definition at line 371 of file RGeomData.hxx. ◆ IsBuildShapes(). int ROOT::RGeomDescription::IsBuildShapes ; (; ); const. inline . Returns true if binary 3D model build already by C++ server (default) ; Definition at line 339 of file RGeomData.hxx. ◆ IsPhysNodeVisible(). int RGeomDescription::IsPhysNodeVisible ; (; const std::vector< int > & ; stack). private . Check if there special settings for specified physical node returns -1 if nothing is found. ; Definition at line 2043 of file RGeomData.cxx. ◆ IsPreferredOffline(). bool ROOT::RGeomDescription::IsPreferredOffline ; (; ); const. inline . Is offline operations preferred. ; After get full description, client ",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:22519,Modifiability,config,configured,22519,"7 of file RGeomData.cxx. ◆ ProduceDrawData(). void RGeomDescription::ProduceDrawData ; (; ). Collect all information required to draw geometry on the client This includes list of each visible nodes, meshes and matrixes. ; Definition at line 1358 of file RGeomData.cxx. ◆ ProduceDrawingFor(). bool RGeomDescription::ProduceDrawingFor ; (; int ; nodeid, . std::string & ; json, . bool ; check_volume = false . ). Produce shape rendering data for given stack All nodes, which are referencing same shape will be transferred Returns true if new render information provided. ; Definition at line 1757 of file RGeomData.cxx. ◆ ProduceIdShifts(). void RGeomDescription::ProduceIdShifts ; (; ). private . Count total number of visible childs under each node. ; Definition at line 629 of file RGeomData.cxx. ◆ ProduceJson(). std::string RGeomDescription::ProduceJson ; (; bool ; all_nodes = false). Produce JSON string which can be directly used with build function from JSROOT to create three.js model of configured geometry. ; Collect all information required to draw geometry on the client This includes list of each visible nodes, meshes and matrixes IfParameters. all_nodesis true, all existing nodes will be provided, which allows to create complete nodes hierarchy on client side. Example of usage:; void geom() { auto f = TFile::Open(""file_name.root""); auto vol = f->Get<TGeoVolume>(""object_name""); ROOT::RGeomDescription desc; desc.Build(vol); std::ofstream fout(""geom.json""); fout << desc.ProduceJson(); }; In JSROOT one loads data from JSON file and call build function to produce three.js model. Also see example in tutorials/webgui/geom/ folder ; Definition at line 1230 of file RGeomData.cxx. ◆ ProduceModifyReply(). std::string RGeomDescription::ProduceModifyReply ; (; int ; nodeid). Return string with only part of nodes description which were modified Checks also volume. ; Definition at line 1734 of file RGeomData.cxx. ◆ ProduceSearchData(). void RGeomDescription::ProduceSearchData ; (; ).",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:24082,Modifiability,config,configuration,24082,"ction to produce three.js model. Also see example in tutorials/webgui/geom/ folder ; Definition at line 1230 of file RGeomData.cxx. ◆ ProduceModifyReply(). std::string RGeomDescription::ProduceModifyReply ; (; int ; nodeid). Return string with only part of nodes description which were modified Checks also volume. ; Definition at line 1734 of file RGeomData.cxx. ◆ ProduceSearchData(). void RGeomDescription::ProduceSearchData ; (; ). Produces search data if necessary. ; Definition at line 1340 of file RGeomData.cxx. ◆ RemoveSignalHandler(). void RGeomDescription::RemoveSignalHandler ; (; const void * ; handler). Remove signal handler. ; Definition at line 321 of file RGeomData.cxx. ◆ ResetRndrInfos(). void RGeomDescription::ResetRndrInfos ; (; ). private . Reset shape info, which used to pack binary data. ; Definition at line 1201 of file RGeomData.cxx. ◆ SavePrimitive(). void RGeomDescription::SavePrimitive ; (; std::ostream & ; fs, . const std::string & ; name . ). Save geometry configuration as C++ macro. ; Definition at line 2143 of file RGeomData.cxx. ◆ ScanNodes(). int RGeomDescription::ScanNodes ; (; bool ; only_visible, . int ; maxlvl, . RGeomScanFunc_t ; func . ). private . Iterate over all nodes and call function for visible. ; Definition at line 653 of file RGeomData.cxx. ◆ SearchVisibles(). int RGeomDescription::SearchVisibles ; (; const std::string & ; find, . std::string & ; hjson, . std::string & ; json . ). Search visible nodes for provided name If number of found elements less than 100, create description and shapes for them Returns number of match elements. ; Definition at line 1411 of file RGeomData.cxx. ◆ SelectTop(). bool RGeomDescription::SelectTop ; (; const std::vector< std::string > & ; path). Select top node by path Used by the client to change active node Returns true if selected node was changed. ; Definition at line 1946 of file RGeomData.cxx. ◆ SetActiveItem(). bool ROOT::RGeomDescription::SetActiveItem ; (; const std::string & ; itemname",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:29012,Modifiability,config,configuration,29012,"e RGeomData.cxx. ◆ SetTopVisible(). void ROOT::RGeomDescription::SetTopVisible ; (; bool ; on = true). inline . Set draw options as string for JSROOT TGeoPainter. ; Definition at line 332 of file RGeomData.hxx. ◆ SetVisLevel(). void ROOT::RGeomDescription::SetVisLevel ; (; int ; lvl = 3). inline . Set maximal visible level. ; Definition at line 327 of file RGeomData.hxx. Friends And Related Symbol Documentation. ◆ RGeomBrowserIter. friend class RGeomBrowserIter. friend . Definition at line 212 of file RGeomData.hxx. Member Data Documentation. ◆ fActiveItemName. std::string ROOT::RGeomDescription::fActiveItemName. private . ! name of item which should be activated in hierarchy ; Definition at line 262 of file RGeomData.hxx. ◆ fActualLevel. int ROOT::RGeomDescription::fActualLevel {0}. private . ! level can be reduced when selecting nodes ; Definition at line 259 of file RGeomData.hxx. ◆ fCfg. RGeomConfig ROOT::RGeomDescription::fCfg. private . ! configuration parameter editable from GUI ; Definition at line 264 of file RGeomData.hxx. ◆ fClickedStack. std::vector<int> ROOT::RGeomDescription::fClickedStack. private . ! clicked element by stack ; Definition at line 250 of file RGeomData.hxx. ◆ fDesc. std::vector<RGeomNode> ROOT::RGeomDescription::fDesc. private . ! converted description, send to client ; Definition at line 243 of file RGeomData.hxx. ◆ fDrawIdCut. int ROOT::RGeomDescription::fDrawIdCut {0}. private . ! sortid used for selection of most-significant nodes ; Definition at line 258 of file RGeomData.hxx. ◆ fDrawJson. std::string ROOT::RGeomDescription::fDrawJson. private . ! JSON with main nodes drawn by client ; Definition at line 257 of file RGeomData.hxx. ◆ fDrawVolume. TGeoVolume* ROOT::RGeomDescription::fDrawVolume {nullptr}. private . ! select volume independent from TGeoManager ; Definition at line 246 of file RGeomData.hxx. ◆ fHighlightedStack. std::vector<int> ROOT::RGeomDescription::fHighlightedStack. private . ! highlighted element by stack ; Defi",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:1145,Performance,perform,performed,1145,"ce Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RGeomDescription Class Reference. . Definition at line 210 of file RGeomData.hxx. Classes; class  ShapeDescr;  . Public Member Functions;  RGeomDescription ()=default;  ; void AddSignalHandler (const void *handler, RGeomSignalFunc_t func);  Add signal handler. ;  ; void Build (TGeoManager *mgr, const std::string &volname="""");  Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ;  ; void Build (TGeoVolume *vol);  Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ;  ; bool ChangeConfiguration (const std::string &json);  Change configuration by client Returns true if any parameter was really changed. ;  ; bool ChangeNodeVisibility (const std::vector< std::string > &path, bool on);  Change visibility for specified element Returns true if changes was performed. ;  ; bool ClearAllPhysVisibility ();  Reset all custom visibility settings. ;  ; void ClearCache ();  Clear cached data, need to be clear when connection broken. ;  ; void ClearDrawData ();  Clear raw data. Will be rebuild when next connection will be established. ;  ; bool ClearPhysNodeVisibility (const std::vector< std::string > &path);  Reset custom visibility of physical node by path. ;  ; int FindNodeId (const std::vector< int > &stack);  Returns nodeid for given stack array, returns -1 in case of failure. ;  ; std::string GetActiveItem () const;  ; std::vector< int > GetClickedItem () const;  ; std::string GetDrawJson () const;  ; std::string GetDrawOptions () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; std::vector< int > GetHighlightedItem () const;  ; int GetJsonComp () const;  Returns JSON compression level for data transfer. ;  ; int GetMaxVisFaces () const;  Returns maximal ",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:1264,Performance,cache,cached,1264,"OT::RGeomDescription Class Reference. . Definition at line 210 of file RGeomData.hxx. Classes; class  ShapeDescr;  . Public Member Functions;  RGeomDescription ()=default;  ; void AddSignalHandler (const void *handler, RGeomSignalFunc_t func);  Add signal handler. ;  ; void Build (TGeoManager *mgr, const std::string &volname="""");  Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ;  ; void Build (TGeoVolume *vol);  Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ;  ; bool ChangeConfiguration (const std::string &json);  Change configuration by client Returns true if any parameter was really changed. ;  ; bool ChangeNodeVisibility (const std::vector< std::string > &path, bool on);  Change visibility for specified element Returns true if changes was performed. ;  ; bool ClearAllPhysVisibility ();  Reset all custom visibility settings. ;  ; void ClearCache ();  Clear cached data, need to be clear when connection broken. ;  ; void ClearDrawData ();  Clear raw data. Will be rebuild when next connection will be established. ;  ; bool ClearPhysNodeVisibility (const std::vector< std::string > &path);  Reset custom visibility of physical node by path. ;  ; int FindNodeId (const std::vector< int > &stack);  Returns nodeid for given stack array, returns -1 in case of failure. ;  ; std::string GetActiveItem () const;  ; std::vector< int > GetClickedItem () const;  ; std::string GetDrawJson () const;  ; std::string GetDrawOptions () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; std::vector< int > GetHighlightedItem () const;  ; int GetJsonComp () const;  Returns JSON compression level for data transfer. ;  ; int GetMaxVisFaces () const;  Returns maximal visible number of faces, ignored when non-positive. ;  ; int GetMaxVisNodes () const;  Returns maximal visible number of nodes, ignored when non-positive. ;  ; TVirtualMutex * GetMutex () const;  Retu",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:3134,Performance,optimiz,optimize,3134,"s () const;  Returns maximal visible number of nodes, ignored when non-positive. ;  ; TVirtualMutex * GetMutex () const;  Return currently used mutex. ;  ; int GetNSegments () const;  Return of segments for cylindrical shapes, if 0 - default value will be used. ;  ; int GetNumNodes () const;  Number of unique nodes in the geometry. ;  ; std::string GetSearch () const;  ; std::string GetSearchJson () const;  ; bool GetTopVisible () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; int GetVisLevel () const;  Returns maximal visible level. ;  ; bool HasDrawData () const;  Check if there is draw data available. ;  ; bool IsBuild () const;  ; int IsBuildShapes () const;  Returns true if binary 3D model build already by C++ server (default) ;  ; bool IsPreferredOffline () const;  Is offline operations preferred. ;  ; bool IsPrincipalEndNode (int nodeid);  return true when node used in main geometry drawing and does not have childs for such nodes one could provide optimize toggling of visibility flags ;  ; void IssueSignal (const void *handler, const std::string &kind);  Issue signal, which distributed on all handlers - excluding source handler. ;  ; std::vector< int > MakeIdsByStack (const std::vector< int > &stack);  Produce list of node ids for given stack If found nodes preselected - use their ids. ;  ; std::unique_ptr< RGeomNodeInfo > MakeNodeInfo (const std::vector< int > &stack);  Change visibility for specified element Returns true if changes was performed. ;  ; std::vector< std::string > MakePathByStack (const std::vector< int > &stack);  Returns path string for provided stack. ;  ; std::vector< int > MakeStackByIds (const std::vector< int > &ids);  Creates stack for given array of ids, first element always should be 0. ;  ; std::vector< int > MakeStackByPath (const std::vector< std::string > &path);  Produce stack based on string path Used to highlight geo volumes by browser hover event. ;  ; std::string ProcessBrowserRequest (const std::string &req=",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:3634,Performance,perform,performed,3634,"bool GetTopVisible () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; int GetVisLevel () const;  Returns maximal visible level. ;  ; bool HasDrawData () const;  Check if there is draw data available. ;  ; bool IsBuild () const;  ; int IsBuildShapes () const;  Returns true if binary 3D model build already by C++ server (default) ;  ; bool IsPreferredOffline () const;  Is offline operations preferred. ;  ; bool IsPrincipalEndNode (int nodeid);  return true when node used in main geometry drawing and does not have childs for such nodes one could provide optimize toggling of visibility flags ;  ; void IssueSignal (const void *handler, const std::string &kind);  Issue signal, which distributed on all handlers - excluding source handler. ;  ; std::vector< int > MakeIdsByStack (const std::vector< int > &stack);  Produce list of node ids for given stack If found nodes preselected - use their ids. ;  ; std::unique_ptr< RGeomNodeInfo > MakeNodeInfo (const std::vector< int > &stack);  Change visibility for specified element Returns true if changes was performed. ;  ; std::vector< std::string > MakePathByStack (const std::vector< int > &stack);  Returns path string for provided stack. ;  ; std::vector< int > MakeStackByIds (const std::vector< int > &ids);  Creates stack for given array of ids, first element always should be 0. ;  ; std::vector< int > MakeStackByPath (const std::vector< std::string > &path);  Produce stack based on string path Used to highlight geo volumes by browser hover event. ;  ; std::string ProcessBrowserRequest (const std::string &req="""");  Find description object for requested shape If not exists - will be created. ;  ; void ProduceDrawData ();  Collect all information required to draw geometry on the client This includes list of each visible nodes, meshes and matrixes. ;  ; bool ProduceDrawingFor (int nodeid, std::string &json, bool check_volume=false);  Produce shape rendering data for given stack All nodes, which are referencing same s",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:12469,Performance,perform,performed,12469,""""" . ). Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ; Definition at line 425 of file RGeomData.cxx. ◆ Build() [2/2]. void RGeomDescription::Build ; (; TGeoVolume * ; vol). Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ; Definition at line 460 of file RGeomData.cxx. ◆ BuildDescription(). void RGeomDescription::BuildDescription ; (; TGeoNode * ; topnode, . TGeoVolume * ; topvolume . ). private . Build geometry description. ; Definition at line 494 of file RGeomData.cxx. ◆ ChangeConfiguration(). bool RGeomDescription::ChangeConfiguration ; (; const std::string & ; json). Change configuration by client Returns true if any parameter was really changed. ; Definition at line 2105 of file RGeomData.cxx. ◆ ChangeNodeVisibility(). bool RGeomDescription::ChangeNodeVisibility ; (; const std::vector< std::string > & ; path, . bool ; on . ). Change visibility for specified element Returns true if changes was performed. ; Definition at line 1850 of file RGeomData.cxx. ◆ ClearAllPhysVisibility(). bool RGeomDescription::ClearAllPhysVisibility ; (; ). Reset all custom visibility settings. ; Definition at line 2089 of file RGeomData.cxx. ◆ ClearCache(). void RGeomDescription::ClearCache ; (; ). Clear cached data, need to be clear when connection broken. ; Definition at line 1381 of file RGeomData.cxx. ◆ ClearDescription(). void RGeomDescription::ClearDescription ; (; ). private . Clear geometry description. ; Definition at line 478 of file RGeomData.cxx. ◆ ClearDrawData(). void RGeomDescription::ClearDrawData ; (; ). Clear raw data. Will be rebuild when next connection will be established. ; Definition at line 1370 of file RGeomData.cxx. ◆ ClearPhysNodeVisibility(). bool RGeomDescription::ClearPhysNodeVisibility ; (; const std::vector< std::string > & ; path). Reset custom visibility of physical node by path. ; Definition at line 2065 of file RGeomData.cxx. ◆ Collec",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:12762,Performance,cache,cached,12762,"nition at line 460 of file RGeomData.cxx. ◆ BuildDescription(). void RGeomDescription::BuildDescription ; (; TGeoNode * ; topnode, . TGeoVolume * ; topvolume . ). private . Build geometry description. ; Definition at line 494 of file RGeomData.cxx. ◆ ChangeConfiguration(). bool RGeomDescription::ChangeConfiguration ; (; const std::string & ; json). Change configuration by client Returns true if any parameter was really changed. ; Definition at line 2105 of file RGeomData.cxx. ◆ ChangeNodeVisibility(). bool RGeomDescription::ChangeNodeVisibility ; (; const std::vector< std::string > & ; path, . bool ; on . ). Change visibility for specified element Returns true if changes was performed. ; Definition at line 1850 of file RGeomData.cxx. ◆ ClearAllPhysVisibility(). bool RGeomDescription::ClearAllPhysVisibility ; (; ). Reset all custom visibility settings. ; Definition at line 2089 of file RGeomData.cxx. ◆ ClearCache(). void RGeomDescription::ClearCache ; (; ). Clear cached data, need to be clear when connection broken. ; Definition at line 1381 of file RGeomData.cxx. ◆ ClearDescription(). void RGeomDescription::ClearDescription ; (; ). private . Clear geometry description. ; Definition at line 478 of file RGeomData.cxx. ◆ ClearDrawData(). void RGeomDescription::ClearDrawData ; (; ). Clear raw data. Will be rebuild when next connection will be established. ; Definition at line 1370 of file RGeomData.cxx. ◆ ClearPhysNodeVisibility(). bool RGeomDescription::ClearPhysNodeVisibility ; (; const std::vector< std::string > & ; path). Reset custom visibility of physical node by path. ; Definition at line 2065 of file RGeomData.cxx. ◆ CollectNodes(). void RGeomDescription::CollectNodes ; (; RGeomDrawing & ; drawing, . bool ; all_nodes = false . ). private . Collect nodes which are used in visibles. ; Definition at line 721 of file RGeomData.cxx. ◆ CopyMaterialProperties(). void RGeomDescription::CopyMaterialProperties ; (; TGeoVolume * ; vol, . RGeomNode & ; node . ). private . C",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:18628,Performance,optimiz,optimize,18628,"OT::RGeomDescription::IsBuild ; (; ); const. inline . Definition at line 371 of file RGeomData.hxx. ◆ IsBuildShapes(). int ROOT::RGeomDescription::IsBuildShapes ; (; ); const. inline . Returns true if binary 3D model build already by C++ server (default) ; Definition at line 339 of file RGeomData.hxx. ◆ IsPhysNodeVisible(). int RGeomDescription::IsPhysNodeVisible ; (; const std::vector< int > & ; stack). private . Check if there special settings for specified physical node returns -1 if nothing is found. ; Definition at line 2043 of file RGeomData.cxx. ◆ IsPreferredOffline(). bool ROOT::RGeomDescription::IsPreferredOffline ; (; ); const. inline . Is offline operations preferred. ; After get full description, client can do most operations without extra requests ; Definition at line 361 of file RGeomData.hxx. ◆ IsPrincipalEndNode(). bool RGeomDescription::IsPrincipalEndNode ; (; int ; nodeid). return true when node used in main geometry drawing and does not have childs for such nodes one could provide optimize toggling of visibility flags ; Definition at line 1394 of file RGeomData.cxx. ◆ IssueSignal(). void RGeomDescription::IssueSignal ; (; const void * ; handler, . const std::string & ; kind . ). Issue signal, which distributed on all handlers - excluding source handler. ; Definition at line 293 of file RGeomData.cxx. ◆ MakeDrawingJson(). std::string RGeomDescription::MakeDrawingJson ; (; RGeomDrawing & ; drawing, . bool ; has_shapes = false . ). private . Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in this case one can exclude several classes which are not interesting, but appears very often. ; Definition at line 1826 of file RGeomData.cxx. ◆ MakeIdsByStack(). std::vector< int > RGeomDescription::MakeIdsByStack ; (; const std::vector< int > & ; stack). Produce list of node ids for given stack If found nodes preselected - use their ids. ; Definition at line 1683 of file RGeomData.cxx. ◆ MakeNodeInfo(). std::unique_p",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:19775,Performance,perform,performed,19775,"cription::IssueSignal ; (; const void * ; handler, . const std::string & ; kind . ). Issue signal, which distributed on all handlers - excluding source handler. ; Definition at line 293 of file RGeomData.cxx. ◆ MakeDrawingJson(). std::string RGeomDescription::MakeDrawingJson ; (; RGeomDrawing & ; drawing, . bool ; has_shapes = false . ). private . Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in this case one can exclude several classes which are not interesting, but appears very often. ; Definition at line 1826 of file RGeomData.cxx. ◆ MakeIdsByStack(). std::vector< int > RGeomDescription::MakeIdsByStack ; (; const std::vector< int > & ; stack). Produce list of node ids for given stack If found nodes preselected - use their ids. ; Definition at line 1683 of file RGeomData.cxx. ◆ MakeNodeInfo(). std::unique_ptr< RGeomNodeInfo > RGeomDescription::MakeNodeInfo ; (; const std::vector< int > & ; stack). Change visibility for specified element Returns true if changes was performed. ; Definition at line 1899 of file RGeomData.cxx. ◆ MakePathByStack(). std::vector< std::string > RGeomDescription::MakePathByStack ; (; const std::vector< int > & ; stack). Returns path string for provided stack. ; Definition at line 1716 of file RGeomData.cxx. ◆ MakeShapeDescr(). RGeomDescription::ShapeDescr & RGeomDescription::MakeShapeDescr ; (; TGeoShape * ; shape). private . Find description object and create render information. ; Definition at line 1070 of file RGeomData.cxx. ◆ MakeStackByIds(). std::vector< int > RGeomDescription::MakeStackByIds ; (; const std::vector< int > & ; ids). Creates stack for given array of ids, first element always should be 0. ; Definition at line 1621 of file RGeomData.cxx. ◆ MakeStackByPath(). std::vector< int > RGeomDescription::MakeStackByPath ; (; const std::vector< std::string > & ; path). Produce stack based on string path Used to highlight geo volumes by browser hover event. ; Definition at line 1665 of",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:23044,Performance,load,loads,23044,"w render information provided. ; Definition at line 1757 of file RGeomData.cxx. ◆ ProduceIdShifts(). void RGeomDescription::ProduceIdShifts ; (; ). private . Count total number of visible childs under each node. ; Definition at line 629 of file RGeomData.cxx. ◆ ProduceJson(). std::string RGeomDescription::ProduceJson ; (; bool ; all_nodes = false). Produce JSON string which can be directly used with build function from JSROOT to create three.js model of configured geometry. ; Collect all information required to draw geometry on the client This includes list of each visible nodes, meshes and matrixes IfParameters. all_nodesis true, all existing nodes will be provided, which allows to create complete nodes hierarchy on client side. Example of usage:; void geom() { auto f = TFile::Open(""file_name.root""); auto vol = f->Get<TGeoVolume>(""object_name""); ROOT::RGeomDescription desc; desc.Build(vol); std::ofstream fout(""geom.json""); fout << desc.ProduceJson(); }; In JSROOT one loads data from JSON file and call build function to produce three.js model. Also see example in tutorials/webgui/geom/ folder ; Definition at line 1230 of file RGeomData.cxx. ◆ ProduceModifyReply(). std::string RGeomDescription::ProduceModifyReply ; (; int ; nodeid). Return string with only part of nodes description which were modified Checks also volume. ; Definition at line 1734 of file RGeomData.cxx. ◆ ProduceSearchData(). void RGeomDescription::ProduceSearchData ; (; ). Produces search data if necessary. ; Definition at line 1340 of file RGeomData.cxx. ◆ RemoveSignalHandler(). void RGeomDescription::RemoveSignalHandler ; (; const void * ; handler). Remove signal handler. ; Definition at line 321 of file RGeomData.cxx. ◆ ResetRndrInfos(). void RGeomDescription::ResetRndrInfos ; (; ). private . Reset shape info, which used to pack binary data. ; Definition at line 1201 of file RGeomData.cxx. ◆ SavePrimitive(). void RGeomDescription::SavePrimitive ; (; std::ostream & ; fs, . const std::string & ; name",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:27737,Safety,avoid,avoid,27737,"(). void ROOT::RGeomDescription::SetNSegments ; (; int ; n = 0). inline . Set number of segments for cylindrical shapes, if 0 - default value will be used. ; Definition at line 342 of file RGeomData.hxx. ◆ SetPhysNodeVisibility() [1/2]. bool RGeomDescription::SetPhysNodeVisibility ; (; const std::string & ; path, . bool ; on = true . ). Set visibility of physical node by itemname itemname in string with path like ""/TOP_1/SUB_2/NODE_3"". ; Definition at line 2016 of file RGeomData.cxx. ◆ SetPhysNodeVisibility() [2/2]. bool RGeomDescription::SetPhysNodeVisibility ; (; const std::vector< std::string > & ; path, . bool ; on = true . ). Set visibility of physical node by path It overrules TGeo visibility flags - but only for specific physical node. ; Definition at line 1970 of file RGeomData.cxx. ◆ SetPreferredOffline(). void ROOT::RGeomDescription::SetPreferredOffline ; (; bool ; on). inline . Set preference of offline operations. ; Server provides more info to client from the begin on to avoid communication ; Definition at line 358 of file RGeomData.hxx. ◆ SetSearch(). bool RGeomDescription::SetSearch ; (; const std::string & ; query, . const std::string & ; json . ). Change search query and belongs to it json string Returns true if any parameter was really changed. ; Definition at line 2130 of file RGeomData.cxx. ◆ SetTopVisible(). void ROOT::RGeomDescription::SetTopVisible ; (; bool ; on = true). inline . Set draw options as string for JSROOT TGeoPainter. ; Definition at line 332 of file RGeomData.hxx. ◆ SetVisLevel(). void ROOT::RGeomDescription::SetVisLevel ; (; int ; lvl = 3). inline . Set maximal visible level. ; Definition at line 327 of file RGeomData.hxx. Friends And Related Symbol Documentation. ◆ RGeomBrowserIter. friend class RGeomBrowserIter. friend . Definition at line 212 of file RGeomData.hxx. Member Data Documentation. ◆ fActiveItemName. std::string ROOT::RGeomDescription::fActiveItemName. private . ! name of item which should be activated in hierarchy ;",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:1288,Usability,clear,clear,1288,"OT::RGeomDescription Class Reference. . Definition at line 210 of file RGeomData.hxx. Classes; class  ShapeDescr;  . Public Member Functions;  RGeomDescription ()=default;  ; void AddSignalHandler (const void *handler, RGeomSignalFunc_t func);  Add signal handler. ;  ; void Build (TGeoManager *mgr, const std::string &volname="""");  Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ;  ; void Build (TGeoVolume *vol);  Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ;  ; bool ChangeConfiguration (const std::string &json);  Change configuration by client Returns true if any parameter was really changed. ;  ; bool ChangeNodeVisibility (const std::vector< std::string > &path, bool on);  Change visibility for specified element Returns true if changes was performed. ;  ; bool ClearAllPhysVisibility ();  Reset all custom visibility settings. ;  ; void ClearCache ();  Clear cached data, need to be clear when connection broken. ;  ; void ClearDrawData ();  Clear raw data. Will be rebuild when next connection will be established. ;  ; bool ClearPhysNodeVisibility (const std::vector< std::string > &path);  Reset custom visibility of physical node by path. ;  ; int FindNodeId (const std::vector< int > &stack);  Returns nodeid for given stack array, returns -1 in case of failure. ;  ; std::string GetActiveItem () const;  ; std::vector< int > GetClickedItem () const;  ; std::string GetDrawJson () const;  ; std::string GetDrawOptions () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; std::vector< int > GetHighlightedItem () const;  ; int GetJsonComp () const;  Returns JSON compression level for data transfer. ;  ; int GetMaxVisFaces () const;  Returns maximal visible number of faces, ignored when non-positive. ;  ; int GetMaxVisNodes () const;  Returns maximal visible number of nodes, ignored when non-positive. ;  ; TVirtualMutex * GetMutex () const;  Retu",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:12786,Usability,clear,clear,12786,"nition at line 460 of file RGeomData.cxx. ◆ BuildDescription(). void RGeomDescription::BuildDescription ; (; TGeoNode * ; topnode, . TGeoVolume * ; topvolume . ). private . Build geometry description. ; Definition at line 494 of file RGeomData.cxx. ◆ ChangeConfiguration(). bool RGeomDescription::ChangeConfiguration ; (; const std::string & ; json). Change configuration by client Returns true if any parameter was really changed. ; Definition at line 2105 of file RGeomData.cxx. ◆ ChangeNodeVisibility(). bool RGeomDescription::ChangeNodeVisibility ; (; const std::vector< std::string > & ; path, . bool ; on . ). Change visibility for specified element Returns true if changes was performed. ; Definition at line 1850 of file RGeomData.cxx. ◆ ClearAllPhysVisibility(). bool RGeomDescription::ClearAllPhysVisibility ; (; ). Reset all custom visibility settings. ; Definition at line 2089 of file RGeomData.cxx. ◆ ClearCache(). void RGeomDescription::ClearCache ; (; ). Clear cached data, need to be clear when connection broken. ; Definition at line 1381 of file RGeomData.cxx. ◆ ClearDescription(). void RGeomDescription::ClearDescription ; (; ). private . Clear geometry description. ; Definition at line 478 of file RGeomData.cxx. ◆ ClearDrawData(). void RGeomDescription::ClearDrawData ; (; ). Clear raw data. Will be rebuild when next connection will be established. ; Definition at line 1370 of file RGeomData.cxx. ◆ ClearPhysNodeVisibility(). bool RGeomDescription::ClearPhysNodeVisibility ; (; const std::vector< std::string > & ; path). Reset custom visibility of physical node by path. ; Definition at line 2065 of file RGeomData.cxx. ◆ CollectNodes(). void RGeomDescription::CollectNodes ; (; RGeomDrawing & ; drawing, . bool ; all_nodes = false . ). private . Collect nodes which are used in visibles. ; Definition at line 721 of file RGeomData.cxx. ◆ CopyMaterialProperties(). void RGeomDescription::CopyMaterialProperties ; (; TGeoVolume * ; vol, . RGeomNode & ; node . ). private . C",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html
https://root.cern/doc/v632/classROOT_1_1RGeomDrawing.html:459,Deployability,configurat,configurations,459,. ROOT: ROOT::RGeomDrawing Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; ROOT::RGeomDrawing Class Reference. ; Object with full description for drawing geometry It includes list of visible items and list of nodes required to build them. ; Definition at line 177 of file RGeomData.hxx. Public Attributes; RGeomConfig * cfg {nullptr};  current configurations ;  ; std::vector< RGeomNode * > nodes;  all used nodes to display visible items and not known for client ;  ; int numnodes {0};  total number of nodes in description ;  ; std::vector< RGeomVisible > visibles;  all visible items ;  . #include <ROOT/RGeomData.hxx>; Member Data Documentation. ◆ cfg. RGeomConfig* ROOT::RGeomDrawing::cfg {nullptr}. current configurations ; Definition at line 179 of file RGeomData.hxx. ◆ nodes. std::vector<RGeomNode*> ROOT::RGeomDrawing::nodes. all used nodes to display visible items and not known for client ; Definition at line 181 of file RGeomData.hxx. ◆ numnodes. int ROOT::RGeomDrawing::numnodes {0}. total number of nodes in description ; Definition at line 180 of file RGeomData.hxx. ◆ visibles. std::vector<RGeomVisible> ROOT::RGeomDrawing::visibles. all visible items ; Definition at line 182 of file RGeomData.hxx. Libraries for ROOT::RGeomDrawing:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomDrawing. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDrawing.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDrawing.html
https://root.cern/doc/v632/classROOT_1_1RGeomDrawing.html:828,Deployability,configurat,configurations,828,. ROOT: ROOT::RGeomDrawing Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; ROOT::RGeomDrawing Class Reference. ; Object with full description for drawing geometry It includes list of visible items and list of nodes required to build them. ; Definition at line 177 of file RGeomData.hxx. Public Attributes; RGeomConfig * cfg {nullptr};  current configurations ;  ; std::vector< RGeomNode * > nodes;  all used nodes to display visible items and not known for client ;  ; int numnodes {0};  total number of nodes in description ;  ; std::vector< RGeomVisible > visibles;  all visible items ;  . #include <ROOT/RGeomData.hxx>; Member Data Documentation. ◆ cfg. RGeomConfig* ROOT::RGeomDrawing::cfg {nullptr}. current configurations ; Definition at line 179 of file RGeomData.hxx. ◆ nodes. std::vector<RGeomNode*> ROOT::RGeomDrawing::nodes. all used nodes to display visible items and not known for client ; Definition at line 181 of file RGeomData.hxx. ◆ numnodes. int ROOT::RGeomDrawing::numnodes {0}. total number of nodes in description ; Definition at line 180 of file RGeomData.hxx. ◆ visibles. std::vector<RGeomVisible> ROOT::RGeomDrawing::visibles. all visible items ; Definition at line 182 of file RGeomData.hxx. Libraries for ROOT::RGeomDrawing:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomDrawing. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDrawing.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDrawing.html
https://root.cern/doc/v632/classROOT_1_1RGeomDrawing.html:459,Modifiability,config,configurations,459,. ROOT: ROOT::RGeomDrawing Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; ROOT::RGeomDrawing Class Reference. ; Object with full description for drawing geometry It includes list of visible items and list of nodes required to build them. ; Definition at line 177 of file RGeomData.hxx. Public Attributes; RGeomConfig * cfg {nullptr};  current configurations ;  ; std::vector< RGeomNode * > nodes;  all used nodes to display visible items and not known for client ;  ; int numnodes {0};  total number of nodes in description ;  ; std::vector< RGeomVisible > visibles;  all visible items ;  . #include <ROOT/RGeomData.hxx>; Member Data Documentation. ◆ cfg. RGeomConfig* ROOT::RGeomDrawing::cfg {nullptr}. current configurations ; Definition at line 179 of file RGeomData.hxx. ◆ nodes. std::vector<RGeomNode*> ROOT::RGeomDrawing::nodes. all used nodes to display visible items and not known for client ; Definition at line 181 of file RGeomData.hxx. ◆ numnodes. int ROOT::RGeomDrawing::numnodes {0}. total number of nodes in description ; Definition at line 180 of file RGeomData.hxx. ◆ visibles. std::vector<RGeomVisible> ROOT::RGeomDrawing::visibles. all visible items ; Definition at line 182 of file RGeomData.hxx. Libraries for ROOT::RGeomDrawing:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomDrawing. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDrawing.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDrawing.html
https://root.cern/doc/v632/classROOT_1_1RGeomDrawing.html:828,Modifiability,config,configurations,828,. ROOT: ROOT::RGeomDrawing Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; ROOT::RGeomDrawing Class Reference. ; Object with full description for drawing geometry It includes list of visible items and list of nodes required to build them. ; Definition at line 177 of file RGeomData.hxx. Public Attributes; RGeomConfig * cfg {nullptr};  current configurations ;  ; std::vector< RGeomNode * > nodes;  all used nodes to display visible items and not known for client ;  ; int numnodes {0};  total number of nodes in description ;  ; std::vector< RGeomVisible > visibles;  all visible items ;  . #include <ROOT/RGeomData.hxx>; Member Data Documentation. ◆ cfg. RGeomConfig* ROOT::RGeomDrawing::cfg {nullptr}. current configurations ; Definition at line 179 of file RGeomData.hxx. ◆ nodes. std::vector<RGeomNode*> ROOT::RGeomDrawing::nodes. all used nodes to display visible items and not known for client ; Definition at line 181 of file RGeomData.hxx. ◆ numnodes. int ROOT::RGeomDrawing::numnodes {0}. total number of nodes in description ; Definition at line 180 of file RGeomData.hxx. ◆ visibles. std::vector<RGeomVisible> ROOT::RGeomDrawing::visibles. all visible items ; Definition at line 182 of file RGeomData.hxx. Libraries for ROOT::RGeomDrawing:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomDrawing. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/v632/classROOT_1_1RGeomDrawing.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDrawing.html
https://root.cern/doc/v632/classROOT_1_1RGeomHierarchy.html:673,Usability,clear,cleared,673,". ROOT: ROOT::RGeomHierarchy Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::RGeomHierarchy Class Reference. . Definition at line 26 of file RGeomHierarchy.hxx. Public Member Functions;  RGeomHierarchy (RGeomDescription &desc, bool use_server_threads=false);  constructor ;  ; virtual ~RGeomHierarchy ();  destructor ;  ; void BrowseTo (const std::string &itemname);  Let browse to specified location. ;  ; void ClearOnClose (const std::shared_ptr< void > &handle);  Set handle which will be cleared when connection is closed Must be called after window is shown. ;  ; RGeomDescription & Description ();  ; void Show (const RWebDisplayArgs &args="""");  Show hierarchy in web window. ;  ; void Update ();  Update client - reload hierarchy. ;  . Protected Member Functions; void ProcessSignal (const std::string &kind);  Process signals from geometry description object. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  Process data from client. ;  . Protected Attributes; RGeomDescription & fDesc;  ! geometry description, shared with external ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomHierarchy.hxx>; Constructor & Destructor Documentation. ◆ RGeomHierarchy(). RGeomHierarchy::RGeomHierarchy ; (; RGeomDescription & ; desc, . bool ; use_server_threads = false . ). constructor ; Definition at line 24 of file RGeomHierarchy.cxx. ◆ ~RGeomHierarchy(). RGeomHierarchy::~RGeomHierarchy ; (; ). virtual . destructor ; Definition at line 41 of file RGeomHierarchy.cxx. Member Function Documentation. ◆ BrowseTo(). void RGeomHierarchy::BrowseTo ; (; const std::string & ; itemname). Let browse to specified location. ; Definition at line 149 of file RGeomHierarchy.cxx. ◆ ClearOnClose(). void RGeomHierarchy::ClearOnClose ; (; const std::shared",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomHierarchy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomHierarchy.html
https://root.cern/doc/v632/classROOT_1_1RGeomHierarchy.html:2052,Usability,clear,cleared,2052,"ck (unsigned connid, const std::string &arg);  Process data from client. ;  . Protected Attributes; RGeomDescription & fDesc;  ! geometry description, shared with external ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomHierarchy.hxx>; Constructor & Destructor Documentation. ◆ RGeomHierarchy(). RGeomHierarchy::RGeomHierarchy ; (; RGeomDescription & ; desc, . bool ; use_server_threads = false . ). constructor ; Definition at line 24 of file RGeomHierarchy.cxx. ◆ ~RGeomHierarchy(). RGeomHierarchy::~RGeomHierarchy ; (; ). virtual . destructor ; Definition at line 41 of file RGeomHierarchy.cxx. Member Function Documentation. ◆ BrowseTo(). void RGeomHierarchy::BrowseTo ; (; const std::string & ; itemname). Let browse to specified location. ; Definition at line 149 of file RGeomHierarchy.cxx. ◆ ClearOnClose(). void RGeomHierarchy::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed Must be called after window is shown. ; Definition at line 180 of file RGeomHierarchy.cxx. ◆ Description(). RGeomDescription & ROOT::RGeomHierarchy::Description ; (; ). inline . Definition at line 48 of file RGeomHierarchy.hxx. ◆ ProcessSignal(). void RGeomHierarchy::ProcessSignal ; (; const std::string & ; kind). protected . Process signals from geometry description object. ; Definition at line 158 of file RGeomHierarchy.cxx. ◆ Show(). void RGeomHierarchy::Show ; (; const RWebDisplayArgs & ; args = """"). Show hierarchy in web window. ; Definition at line 128 of file RGeomHierarchy.cxx. ◆ Update(). void RGeomHierarchy::Update ; (; ). Update client - reload hierarchy. ; Definition at line 140 of file RGeomHierarchy.cxx. ◆ WebWindowCallback(). void RGeomHierarchy::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process data from client. ; Definition at line 49 of file RGeomHierarchy.cxx. Member Data Documentation. ◆ fDesc. RGeomDescription",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomHierarchy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomHierarchy.html
https://root.cern/doc/v632/classROOT_1_1RGeomNode.html:830,Energy Efficiency,reduce,reduced,830,". ROOT: ROOT::RGeomNode Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RGeomNode Class Reference. ; Full node description including matrices and other attributes. ; Definition at line 71 of file RGeomData.hxx. Public Member Functions;  RGeomNode (int _id=0);  ; bool CanDisplay () const;  True when there is shape and it can be displayed. ;  ;  Public Member Functions inherited from ROOT::RGeomNodeBase;  RGeomNodeBase (int _id=0);  ; const char * GetArg (int kind);  Returns argument for regexp. ;  ; bool IsVisible () const;  . Public Attributes; int idshift {-1};  ! used to jump over then scan all geom hierarchy ;  ; std::vector< float > matr;  matrix for the node, can have reduced number of elements ;  ; int nfaces {0};  ! number of shape faces ;  ; float opacity {1.};  ! opacity of the color ;  ; bool useflag {false};  ! extra flag, used for selection ;  ; double vol {0};  ! volume estimation ;  ;  Public Attributes inherited from ROOT::RGeomNodeBase; std::vector< int > chlds;  list of childs id ;  ; std::string color;  rgb code in hex format ;  ; int id {0};  node id, index in array ;  ; std::string material;  name of the material ;  ; std::string name;  node name ;  ; bool nochlds {false};  how far in hierarchy depth should be scanned ;  ; int sortid {0};  ! place in sorted array, to check cuts, or id of original node when used search structures ;  ; int vis {0};  visibility flag, 0 - off, 1 - only when level==0, 99 - always ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomNode:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeomNode(). ROOT::RGeomNode::RGeomNode ; (; int ; _id = 0). inline . Definition at line 80 of file RGeomData.hxx. Member Function Documentation. ◆ CanDisplay(). bool ROOT::RGeomNode::C",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomNode.html
https://root.cern/doc/v632/classROOT_1_1RGeomNode.html:2381,Energy Efficiency,reduce,reduced,2381," hex format ;  ; int id {0};  node id, index in array ;  ; std::string material;  name of the material ;  ; std::string name;  node name ;  ; bool nochlds {false};  how far in hierarchy depth should be scanned ;  ; int sortid {0};  ! place in sorted array, to check cuts, or id of original node when used search structures ;  ; int vis {0};  visibility flag, 0 - off, 1 - only when level==0, 99 - always ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomNode:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeomNode(). ROOT::RGeomNode::RGeomNode ; (; int ; _id = 0). inline . Definition at line 80 of file RGeomData.hxx. Member Function Documentation. ◆ CanDisplay(). bool ROOT::RGeomNode::CanDisplay ; (; ); const. inline . True when there is shape and it can be displayed. ; Definition at line 83 of file RGeomData.hxx. Member Data Documentation. ◆ idshift. int ROOT::RGeomNode::idshift {-1}. ! used to jump over then scan all geom hierarchy ; Definition at line 76 of file RGeomData.hxx. ◆ matr. std::vector<float> ROOT::RGeomNode::matr. matrix for the node, can have reduced number of elements ; Definition at line 73 of file RGeomData.hxx. ◆ nfaces. int ROOT::RGeomNode::nfaces {0}. ! number of shape faces ; Definition at line 75 of file RGeomData.hxx. ◆ opacity. float ROOT::RGeomNode::opacity {1.}. ! opacity of the color ; Definition at line 78 of file RGeomData.hxx. ◆ useflag. bool ROOT::RGeomNode::useflag {false}. ! extra flag, used for selection ; Definition at line 77 of file RGeomData.hxx. ◆ vol. double ROOT::RGeomNode::vol {0}. ! volume estimation ; Definition at line 74 of file RGeomData.hxx. Libraries for ROOT::RGeomNode:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomNode. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomNode.html
https://root.cern/doc/v632/classROOT_1_1RGeomNode.html:518,Modifiability,inherit,inherited,518,". ROOT: ROOT::RGeomNode Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RGeomNode Class Reference. ; Full node description including matrices and other attributes. ; Definition at line 71 of file RGeomData.hxx. Public Member Functions;  RGeomNode (int _id=0);  ; bool CanDisplay () const;  True when there is shape and it can be displayed. ;  ;  Public Member Functions inherited from ROOT::RGeomNodeBase;  RGeomNodeBase (int _id=0);  ; const char * GetArg (int kind);  Returns argument for regexp. ;  ; bool IsVisible () const;  . Public Attributes; int idshift {-1};  ! used to jump over then scan all geom hierarchy ;  ; std::vector< float > matr;  matrix for the node, can have reduced number of elements ;  ; int nfaces {0};  ! number of shape faces ;  ; float opacity {1.};  ! opacity of the color ;  ; bool useflag {false};  ! extra flag, used for selection ;  ; double vol {0};  ! volume estimation ;  ;  Public Attributes inherited from ROOT::RGeomNodeBase; std::vector< int > chlds;  list of childs id ;  ; std::string color;  rgb code in hex format ;  ; int id {0};  node id, index in array ;  ; std::string material;  name of the material ;  ; std::string name;  node name ;  ; bool nochlds {false};  how far in hierarchy depth should be scanned ;  ; int sortid {0};  ! place in sorted array, to check cuts, or id of original node when used search structures ;  ; int vis {0};  visibility flag, 0 - off, 1 - only when level==0, 99 - always ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomNode:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeomNode(). ROOT::RGeomNode::RGeomNode ; (; int ; _id = 0). inline . Definition at line 80 of file RGeomData.hxx. Member Function Documentation. ◆ CanDisplay(). bool ROOT::RGeomNode::C",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomNode.html
https://root.cern/doc/v632/classROOT_1_1RGeomNode.html:1079,Modifiability,inherit,inherited,1079,"iption including matrices and other attributes. ; Definition at line 71 of file RGeomData.hxx. Public Member Functions;  RGeomNode (int _id=0);  ; bool CanDisplay () const;  True when there is shape and it can be displayed. ;  ;  Public Member Functions inherited from ROOT::RGeomNodeBase;  RGeomNodeBase (int _id=0);  ; const char * GetArg (int kind);  Returns argument for regexp. ;  ; bool IsVisible () const;  . Public Attributes; int idshift {-1};  ! used to jump over then scan all geom hierarchy ;  ; std::vector< float > matr;  matrix for the node, can have reduced number of elements ;  ; int nfaces {0};  ! number of shape faces ;  ; float opacity {1.};  ! opacity of the color ;  ; bool useflag {false};  ! extra flag, used for selection ;  ; double vol {0};  ! volume estimation ;  ;  Public Attributes inherited from ROOT::RGeomNodeBase; std::vector< int > chlds;  list of childs id ;  ; std::string color;  rgb code in hex format ;  ; int id {0};  node id, index in array ;  ; std::string material;  name of the material ;  ; std::string name;  node name ;  ; bool nochlds {false};  how far in hierarchy depth should be scanned ;  ; int sortid {0};  ! place in sorted array, to check cuts, or id of original node when used search structures ;  ; int vis {0};  visibility flag, 0 - off, 1 - only when level==0, 99 - always ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomNode:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeomNode(). ROOT::RGeomNode::RGeomNode ; (; int ; _id = 0). inline . Definition at line 80 of file RGeomData.hxx. Member Function Documentation. ◆ CanDisplay(). bool ROOT::RGeomNode::CanDisplay ; (; ); const. inline . True when there is shape and it can be displayed. ; Definition at line 83 of file RGeomData.hxx. Member Data Documentation. ◆ idshift. int ROOT::RGeomNode::idshift {-1}. ! used to jump over then scan all geom hierarchy ; Definitio",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomNode.html
https://root.cern/doc/v632/classROOT_1_1RGeomRawRenderInfo.html:437,Modifiability,inherit,inherited,437,". ROOT: ROOT::RGeomRawRenderInfo Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RGeomRawRenderInfo Class Reference. ; Render info with raw data. ; Definition at line 127 of file RGeomData.hxx. Public Member Functions;  ~RGeomRawRenderInfo () override=default;  ;  Public Member Functions inherited from ROOT::RGeomRenderInfo; virtual ~RGeomRenderInfo ()=default;  virtual destructor required for the I/O ;  . Public Attributes; std::vector< int > idx;  vertex indexes, always triangles ;  ; std::vector< unsigned char > raw;  float vertices as raw data, JSON_base64 ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomRawRenderInfo:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~RGeomRawRenderInfo(). ROOT::RGeomRawRenderInfo::~RGeomRawRenderInfo ; (; ). overridedefault . Member Data Documentation. ◆ idx. std::vector<int> ROOT::RGeomRawRenderInfo::idx. vertex indexes, always triangles ; Definition at line 130 of file RGeomData.hxx. ◆ raw. std::vector<unsigned char> ROOT::RGeomRawRenderInfo::raw. float vertices as raw data, JSON_base64 ; Definition at line 129 of file RGeomData.hxx. Libraries for ROOT::RGeomRawRenderInfo:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomRawRenderInfo. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomRawRenderInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomRawRenderInfo.html
https://root.cern/doc/v632/classROOT_1_1RGeomShapeRenderInfo.html:481,Modifiability,inherit,inherited,481,". ROOT: ROOT::RGeomShapeRenderInfo Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RGeomShapeRenderInfo Class Reference. ; Render info with shape itself - client can produce shape better. ; Definition at line 135 of file RGeomData.hxx. Public Member Functions;  ~RGeomShapeRenderInfo () override=default;  ;  Public Member Functions inherited from ROOT::RGeomRenderInfo; virtual ~RGeomRenderInfo ()=default;  virtual destructor required for the I/O ;  . Public Attributes; TGeoShape * shape {nullptr};  original shape - can be much less than binary data ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomShapeRenderInfo:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~RGeomShapeRenderInfo(). ROOT::RGeomShapeRenderInfo::~RGeomShapeRenderInfo ; (; ). overridedefault . Member Data Documentation. ◆ shape. TGeoShape* ROOT::RGeomShapeRenderInfo::shape {nullptr}. original shape - can be much less than binary data ; Definition at line 137 of file RGeomData.hxx. Libraries for ROOT::RGeomShapeRenderInfo:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomShapeRenderInfo. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomShapeRenderInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomShapeRenderInfo.html
https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html:1161,Deployability,configurat,configuration,1161,"rs |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::RGeomViewer Class Reference. . Definition at line 27 of file RGeomViewer.hxx. Public Member Functions;  RGeomViewer (TGeoManager *mgr=nullptr, const std::string &volname="""");  constructor ;  ; virtual ~RGeomViewer ();  destructor ;  ; void ClearOnClose (const std::shared_ptr< void > &handle);  Set handle which will be cleared when connection is closed Must be called after window is shown. ;  ; RGeomDescription & Description ();  ; bool GetShowColumns () const;  ; bool GetShowHierarchy () const;  Returns default hierarchy browser visibility. ;  ; const std::string & GetTitle () const;  ; std::string GetWindowAddr () const;  Return web window address (name) used for geometry viewer. ;  ; std::string GetWindowUrl (bool remote);  Return web window URL which can be used for connection See ROOT::RWebWindow::GetUrl docu for more details. ;  ; void SaveAsMacro (const std::string &fname);  Save viewer configuration as macro. ;  ; void SaveImage (const std::string &fname=""geometry.png"", int width=0, int height=0);  Produce PNG image of the geometry If web-browser is shown and drawing completed, image is requested from the browser. ;  ; void SelectVolume (const std::string &volname);  Select visible top volume, all other volumes will be disabled. ;  ; void SetDrawOptions (const std::string &opt);  Configures draw option for geometry Normally has effect before first drawing of the geometry When geometry displayed, only ""axis"" and ""rotate"" options are updated. ;  ; void SetGeometry (TGeoManager *mgr, const std::string &volname="""");  assign new geometry to the viewer ;  ; void SetLimits (int nnodes=5000, int nfaces=100000);  Configures maximal number of visible nodes and faces. ;  ; void SetOnlyVolume (TGeoVolume *vol);  Draw only specified volume, special case when volume stored without valid geomanager. ;  ; void SetShowColumns (bool on=true);  ; void SetShowHierarc",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html
https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html:1718,Deployability,update,updated,1718,"alled after window is shown. ;  ; RGeomDescription & Description ();  ; bool GetShowColumns () const;  ; bool GetShowHierarchy () const;  Returns default hierarchy browser visibility. ;  ; const std::string & GetTitle () const;  ; std::string GetWindowAddr () const;  Return web window address (name) used for geometry viewer. ;  ; std::string GetWindowUrl (bool remote);  Return web window URL which can be used for connection See ROOT::RWebWindow::GetUrl docu for more details. ;  ; void SaveAsMacro (const std::string &fname);  Save viewer configuration as macro. ;  ; void SaveImage (const std::string &fname=""geometry.png"", int width=0, int height=0);  Produce PNG image of the geometry If web-browser is shown and drawing completed, image is requested from the browser. ;  ; void SelectVolume (const std::string &volname);  Select visible top volume, all other volumes will be disabled. ;  ; void SetDrawOptions (const std::string &opt);  Configures draw option for geometry Normally has effect before first drawing of the geometry When geometry displayed, only ""axis"" and ""rotate"" options are updated. ;  ; void SetGeometry (TGeoManager *mgr, const std::string &volname="""");  assign new geometry to the viewer ;  ; void SetLimits (int nnodes=5000, int nfaces=100000);  Configures maximal number of visible nodes and faces. ;  ; void SetOnlyVolume (TGeoVolume *vol);  Draw only specified volume, special case when volume stored without valid geomanager. ;  ; void SetShowColumns (bool on=true);  ; void SetShowHierarchy (bool on=true);  Configures default hierarchy browser visibility, only has effect before showing web window. ;  ; void SetTitle (const std::string &title);  ; void SetTopVisible (bool on=true);  ; void SetVisLevel (int lvl=3);  Configures maximal visible level. ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  Show or update geometry in web window If web browser already started - just refresh drawing like ""reload"" button does If no w",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html
https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html:2501,Deployability,update,update,2501,"SetDrawOptions (const std::string &opt);  Configures draw option for geometry Normally has effect before first drawing of the geometry When geometry displayed, only ""axis"" and ""rotate"" options are updated. ;  ; void SetGeometry (TGeoManager *mgr, const std::string &volname="""");  assign new geometry to the viewer ;  ; void SetLimits (int nnodes=5000, int nfaces=100000);  Configures maximal number of visible nodes and faces. ;  ; void SetOnlyVolume (TGeoVolume *vol);  Draw only specified volume, special case when volume stored without valid geomanager. ;  ; void SetShowColumns (bool on=true);  ; void SetShowHierarchy (bool on=true);  Configures default hierarchy browser visibility, only has effect before showing web window. ;  ; void SetTitle (const std::string &title);  ; void SetTopVisible (bool on=true);  ; void SetVisLevel (int lvl=3);  Configures maximal visible level. ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  Show or update geometry in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ;  ; void Update ();  Update geometry drawings in all web displays. ;  . Protected Member Functions; std::vector< int > GetStackFromJson (const std::string &json, bool node_ids=false);  convert JSON into stack array ;  ; void ProcessSignal (const std::string &);  Process signal from geom description when it changed by any means. ;  ; void SendGeometry (unsigned connid=0, bool first_time=false);  Send data for principal geometry draw Should be used when essential settings were changed in geometry description. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  Process data from client. ;  ; void WebWindowDisconnect (unsigned connid);  Process disconnect event Clear cache data and dependent connections. ;  . Protected Attributes; RGeomDescription fDesc;  ! geometry description, send to the client as first message ;  ; TGeoManager * fGeoManager {nullptr}",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html
https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html:6230,Deployability,configurat,configuration,6230,"ring & ; json, . bool ; node_ids = false . ). protected . convert JSON into stack array ; Definition at line 164 of file RGeomViewer.cxx. ◆ GetTitle(). const std::string & ROOT::RGeomViewer::GetTitle ; (; ); const. inline . Definition at line 59 of file RGeomViewer.hxx. ◆ GetWindowAddr(). std::string RGeomViewer::GetWindowAddr ; (; ); const. Return web window address (name) used for geometry viewer. ; Definition at line 133 of file RGeomViewer.cxx. ◆ GetWindowUrl(). std::string RGeomViewer::GetWindowUrl ; (; bool ; remote). Return web window URL which can be used for connection See ROOT::RWebWindow::GetUrl docu for more details. ; Definition at line 142 of file RGeomViewer.cxx. ◆ ProcessSignal(). void RGeomViewer::ProcessSignal ; (; const std::string & ; kind). protected . Process signal from geom description when it changed by any means. ; Definition at line 365 of file RGeomViewer.cxx. ◆ SaveAsMacro(). void RGeomViewer::SaveAsMacro ; (; const std::string & ; fname). Save viewer configuration as macro. ; Definition at line 397 of file RGeomViewer.cxx. ◆ SaveImage(). void RGeomViewer::SaveImage ; (; const std::string & ; fname = ""geometry.png"", . int ; width = 0, . int ; height = 0 . ). Produce PNG image of the geometry If web-browser is shown and drawing completed, image is requested from the browser. ; In this case method executed asynchronously - it returns immediately and image will stored shortly afterwards when received from the client Height and width parameters are ignored in that case and derived from actual drawing size in the browser. Another possibility is to invoke headless browser, providing positive width and height parameter explicitely ; Definition at line 231 of file RGeomViewer.cxx. ◆ SelectVolume(). void RGeomViewer::SelectVolume ; (; const std::string & ; volname). Select visible top volume, all other volumes will be disabled. ; Definition at line 84 of file RGeomViewer.cxx. ◆ SendGeometry(). void RGeomViewer::SendGeometry ; (; unsigned ; connid",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html
https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html:7692,Deployability,update,updated,7692,"immediately and image will stored shortly afterwards when received from the client Height and width parameters are ignored in that case and derived from actual drawing size in the browser. Another possibility is to invoke headless browser, providing positive width and height parameter explicitely ; Definition at line 231 of file RGeomViewer.cxx. ◆ SelectVolume(). void RGeomViewer::SelectVolume ; (; const std::string & ; volname). Select visible top volume, all other volumes will be disabled. ; Definition at line 84 of file RGeomViewer.cxx. ◆ SendGeometry(). void RGeomViewer::SendGeometry ; (; unsigned ; connid = 0, . bool ; first_time = false . ). protected . Send data for principal geometry draw Should be used when essential settings were changed in geometry description. ; Definition at line 185 of file RGeomViewer.cxx. ◆ SetDrawOptions(). void RGeomViewer::SetDrawOptions ; (; const std::string & ; opt). Configures draw option for geometry Normally has effect before first drawing of the geometry When geometry displayed, only ""axis"" and ""rotate"" options are updated. ; Definition at line 213 of file RGeomViewer.cxx. ◆ SetGeometry(). void RGeomViewer::SetGeometry ; (; TGeoManager * ; mgr, . const std::string & ; volname = """" . ). assign new geometry to the viewer ; Definition at line 71 of file RGeomViewer.cxx. ◆ SetLimits(). void ROOT::RGeomViewer::SetLimits ; (; int ; nnodes = 5000, . int ; nfaces = 100000 . ). inline . Configures maximal number of visible nodes and faces. ; Definition at line 72 of file RGeomViewer.hxx. ◆ SetOnlyVolume(). void RGeomViewer::SetOnlyVolume ; (; TGeoVolume * ; vol). Draw only specified volume, special case when volume stored without valid geomanager. ; Definition at line 93 of file RGeomViewer.cxx. ◆ SetShowColumns(). void ROOT::RGeomViewer::SetShowColumns ; (; bool ; on = true). inline . Definition at line 95 of file RGeomViewer.hxx. ◆ SetShowHierarchy(). void ROOT::RGeomViewer::SetShowHierarchy ; (; bool ; on = true). inline . Config",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html
https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html:9324,Deployability,update,update,9324,"lumns(). void ROOT::RGeomViewer::SetShowColumns ; (; bool ; on = true). inline . Definition at line 95 of file RGeomViewer.hxx. ◆ SetShowHierarchy(). void ROOT::RGeomViewer::SetShowHierarchy ; (; bool ; on = true). inline . Configures default hierarchy browser visibility, only has effect before showing web window. ; Definition at line 90 of file RGeomViewer.hxx. ◆ SetTitle(). void ROOT::RGeomViewer::SetTitle ; (; const std::string & ; title). inline . Definition at line 58 of file RGeomViewer.hxx. ◆ SetTopVisible(). void ROOT::RGeomViewer::SetTopVisible ; (; bool ; on = true). inline . Definition at line 84 of file RGeomViewer.hxx. ◆ SetVisLevel(). void ROOT::RGeomViewer::SetVisLevel ; (; int ; lvl = 3). inline . Configures maximal visible level. ; Definition at line 79 of file RGeomViewer.hxx. ◆ Show(). void RGeomViewer::Show ; (; const RWebDisplayArgs & ; args = """", . bool ; always_start_new_browser = false . ). Show or update geometry in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ; Parameters. always_start_new_browserconfigured, starts new window ; argsarguments to display . Definition at line 109 of file RGeomViewer.cxx. ◆ Update(). void RGeomViewer::Update ; (; ). Update geometry drawings in all web displays. ; Definition at line 150 of file RGeomViewer.cxx. ◆ WebWindowCallback(). void RGeomViewer::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process data from client. ; Definition at line 260 of file RGeomViewer.cxx. ◆ WebWindowDisconnect(). void RGeomViewer::WebWindowDisconnect ; (; unsigned ; connid). protected . Process disconnect event Clear cache data and dependent connections. ; Definition at line 353 of file RGeomViewer.cxx. Member Data Documentation. ◆ fDesc. RGeomDescription ROOT::RGeomViewer::fDesc. protected . ! geometry description, send to the client as first message ; Definition at line 33 of file RGeomViewer.hxx. ◆ fGeoManager. TG",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html
https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html:3347,Integrability,depend,dependent,3347,"etTopVisible (bool on=true);  ; void SetVisLevel (int lvl=3);  Configures maximal visible level. ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  Show or update geometry in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ;  ; void Update ();  Update geometry drawings in all web displays. ;  . Protected Member Functions; std::vector< int > GetStackFromJson (const std::string &json, bool node_ids=false);  convert JSON into stack array ;  ; void ProcessSignal (const std::string &);  Process signal from geom description when it changed by any means. ;  ; void SendGeometry (unsigned connid=0, bool first_time=false);  Send data for principal geometry draw Should be used when essential settings were changed in geometry description. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  Process data from client. ;  ; void WebWindowDisconnect (unsigned connid);  Process disconnect event Clear cache data and dependent connections. ;  . Protected Attributes; RGeomDescription fDesc;  ! geometry description, send to the client as first message ;  ; TGeoManager * fGeoManager {nullptr};  ! geometry to show ;  ; bool fInfoActive {false};  ! true when info page active and node info need to be provided ;  ; std::string fSelectedVolume;  ! name of selected volume ;  ; bool fShowColumns {true};  ! show columns in hierarchy ;  ; bool fShowHierarchy {true};  ! if hierarchy visible by default ;  ; std::string fTitle;  ! title of geometry viewer ;  ; std::shared_ptr< RGeomHierarchy > fWebHierarchy;  ! web handle for hierarchy part ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomViewer.hxx>; Constructor & Destructor Documentation. ◆ RGeomViewer(). RGeomViewer::RGeomViewer ; (; TGeoManager * ; mgr = nullptr, . const std::string & ; volname = """" . ). constructor ; Definition at line 35 of file RGeomViewer.cxx. ◆ ~RG",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html
https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html:3474,Integrability,message,message,3474,"Protected Member Functions; std::vector< int > GetStackFromJson (const std::string &json, bool node_ids=false);  convert JSON into stack array ;  ; void ProcessSignal (const std::string &);  Process signal from geom description when it changed by any means. ;  ; void SendGeometry (unsigned connid=0, bool first_time=false);  Send data for principal geometry draw Should be used when essential settings were changed in geometry description. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  Process data from client. ;  ; void WebWindowDisconnect (unsigned connid);  Process disconnect event Clear cache data and dependent connections. ;  . Protected Attributes; RGeomDescription fDesc;  ! geometry description, send to the client as first message ;  ; TGeoManager * fGeoManager {nullptr};  ! geometry to show ;  ; bool fInfoActive {false};  ! true when info page active and node info need to be provided ;  ; std::string fSelectedVolume;  ! name of selected volume ;  ; bool fShowColumns {true};  ! show columns in hierarchy ;  ; bool fShowHierarchy {true};  ! if hierarchy visible by default ;  ; std::string fTitle;  ! title of geometry viewer ;  ; std::shared_ptr< RGeomHierarchy > fWebHierarchy;  ! web handle for hierarchy part ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomViewer.hxx>; Constructor & Destructor Documentation. ◆ RGeomViewer(). RGeomViewer::RGeomViewer ; (; TGeoManager * ; mgr = nullptr, . const std::string & ; volname = """" . ). constructor ; Definition at line 35 of file RGeomViewer.cxx. ◆ ~RGeomViewer(). RGeomViewer::~RGeomViewer ; (; ). virtual . destructor ; Definition at line 63 of file RGeomViewer.cxx. Member Function Documentation. ◆ ClearOnClose(). void RGeomViewer::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed Must be called after window is shown. ; Definition at line 444 of file RGeomViewer.cxx. ◆ Descript",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html
https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html:10098,Integrability,depend,dependent,10098," int ; lvl = 3). inline . Configures maximal visible level. ; Definition at line 79 of file RGeomViewer.hxx. ◆ Show(). void RGeomViewer::Show ; (; const RWebDisplayArgs & ; args = """", . bool ; always_start_new_browser = false . ). Show or update geometry in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ; Parameters. always_start_new_browserconfigured, starts new window ; argsarguments to display . Definition at line 109 of file RGeomViewer.cxx. ◆ Update(). void RGeomViewer::Update ; (; ). Update geometry drawings in all web displays. ; Definition at line 150 of file RGeomViewer.cxx. ◆ WebWindowCallback(). void RGeomViewer::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process data from client. ; Definition at line 260 of file RGeomViewer.cxx. ◆ WebWindowDisconnect(). void RGeomViewer::WebWindowDisconnect ; (; unsigned ; connid). protected . Process disconnect event Clear cache data and dependent connections. ; Definition at line 353 of file RGeomViewer.cxx. Member Data Documentation. ◆ fDesc. RGeomDescription ROOT::RGeomViewer::fDesc. protected . ! geometry description, send to the client as first message ; Definition at line 33 of file RGeomViewer.hxx. ◆ fGeoManager. TGeoManager* ROOT::RGeomViewer::fGeoManager {nullptr}. protected . ! geometry to show ; Definition at line 31 of file RGeomViewer.hxx. ◆ fInfoActive. bool ROOT::RGeomViewer::fInfoActive {false}. protected . ! true when info page active and node info need to be provided ; Definition at line 37 of file RGeomViewer.hxx. ◆ fSelectedVolume. std::string ROOT::RGeomViewer::fSelectedVolume. protected . ! name of selected volume ; Definition at line 32 of file RGeomViewer.hxx. ◆ fShowColumns. bool ROOT::RGeomViewer::fShowColumns {true}. protected . ! show columns in hierarchy ; Definition at line 35 of file RGeomViewer.hxx. ◆ fShowHierarchy. bool ROOT::RGeomViewer::fShowHierarchy {true}. protected . ",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html
https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html:10314,Integrability,message,message,10314,"). Show or update geometry in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ; Parameters. always_start_new_browserconfigured, starts new window ; argsarguments to display . Definition at line 109 of file RGeomViewer.cxx. ◆ Update(). void RGeomViewer::Update ; (; ). Update geometry drawings in all web displays. ; Definition at line 150 of file RGeomViewer.cxx. ◆ WebWindowCallback(). void RGeomViewer::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process data from client. ; Definition at line 260 of file RGeomViewer.cxx. ◆ WebWindowDisconnect(). void RGeomViewer::WebWindowDisconnect ; (; unsigned ; connid). protected . Process disconnect event Clear cache data and dependent connections. ; Definition at line 353 of file RGeomViewer.cxx. Member Data Documentation. ◆ fDesc. RGeomDescription ROOT::RGeomViewer::fDesc. protected . ! geometry description, send to the client as first message ; Definition at line 33 of file RGeomViewer.hxx. ◆ fGeoManager. TGeoManager* ROOT::RGeomViewer::fGeoManager {nullptr}. protected . ! geometry to show ; Definition at line 31 of file RGeomViewer.hxx. ◆ fInfoActive. bool ROOT::RGeomViewer::fInfoActive {false}. protected . ! true when info page active and node info need to be provided ; Definition at line 37 of file RGeomViewer.hxx. ◆ fSelectedVolume. std::string ROOT::RGeomViewer::fSelectedVolume. protected . ! name of selected volume ; Definition at line 32 of file RGeomViewer.hxx. ◆ fShowColumns. bool ROOT::RGeomViewer::fShowColumns {true}. protected . ! show columns in hierarchy ; Definition at line 35 of file RGeomViewer.hxx. ◆ fShowHierarchy. bool ROOT::RGeomViewer::fShowHierarchy {true}. protected . ! if hierarchy visible by default ; Definition at line 34 of file RGeomViewer.hxx. ◆ fTitle. std::string ROOT::RGeomViewer::fTitle. protected . ! title of geometry viewer ; Definition at line 36 of file RGeomViewer.hxx. ◆ fWebHi",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html
https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html:1161,Modifiability,config,configuration,1161,"rs |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::RGeomViewer Class Reference. . Definition at line 27 of file RGeomViewer.hxx. Public Member Functions;  RGeomViewer (TGeoManager *mgr=nullptr, const std::string &volname="""");  constructor ;  ; virtual ~RGeomViewer ();  destructor ;  ; void ClearOnClose (const std::shared_ptr< void > &handle);  Set handle which will be cleared when connection is closed Must be called after window is shown. ;  ; RGeomDescription & Description ();  ; bool GetShowColumns () const;  ; bool GetShowHierarchy () const;  Returns default hierarchy browser visibility. ;  ; const std::string & GetTitle () const;  ; std::string GetWindowAddr () const;  Return web window address (name) used for geometry viewer. ;  ; std::string GetWindowUrl (bool remote);  Return web window URL which can be used for connection See ROOT::RWebWindow::GetUrl docu for more details. ;  ; void SaveAsMacro (const std::string &fname);  Save viewer configuration as macro. ;  ; void SaveImage (const std::string &fname=""geometry.png"", int width=0, int height=0);  Produce PNG image of the geometry If web-browser is shown and drawing completed, image is requested from the browser. ;  ; void SelectVolume (const std::string &volname);  Select visible top volume, all other volumes will be disabled. ;  ; void SetDrawOptions (const std::string &opt);  Configures draw option for geometry Normally has effect before first drawing of the geometry When geometry displayed, only ""axis"" and ""rotate"" options are updated. ;  ; void SetGeometry (TGeoManager *mgr, const std::string &volname="""");  assign new geometry to the viewer ;  ; void SetLimits (int nnodes=5000, int nfaces=100000);  Configures maximal number of visible nodes and faces. ;  ; void SetOnlyVolume (TGeoVolume *vol);  Draw only specified volume, special case when volume stored without valid geomanager. ;  ; void SetShowColumns (bool on=true);  ; void SetShowHierarc",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html
https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html:6230,Modifiability,config,configuration,6230,"ring & ; json, . bool ; node_ids = false . ). protected . convert JSON into stack array ; Definition at line 164 of file RGeomViewer.cxx. ◆ GetTitle(). const std::string & ROOT::RGeomViewer::GetTitle ; (; ); const. inline . Definition at line 59 of file RGeomViewer.hxx. ◆ GetWindowAddr(). std::string RGeomViewer::GetWindowAddr ; (; ); const. Return web window address (name) used for geometry viewer. ; Definition at line 133 of file RGeomViewer.cxx. ◆ GetWindowUrl(). std::string RGeomViewer::GetWindowUrl ; (; bool ; remote). Return web window URL which can be used for connection See ROOT::RWebWindow::GetUrl docu for more details. ; Definition at line 142 of file RGeomViewer.cxx. ◆ ProcessSignal(). void RGeomViewer::ProcessSignal ; (; const std::string & ; kind). protected . Process signal from geom description when it changed by any means. ; Definition at line 365 of file RGeomViewer.cxx. ◆ SaveAsMacro(). void RGeomViewer::SaveAsMacro ; (; const std::string & ; fname). Save viewer configuration as macro. ; Definition at line 397 of file RGeomViewer.cxx. ◆ SaveImage(). void RGeomViewer::SaveImage ; (; const std::string & ; fname = ""geometry.png"", . int ; width = 0, . int ; height = 0 . ). Produce PNG image of the geometry If web-browser is shown and drawing completed, image is requested from the browser. ; In this case method executed asynchronously - it returns immediately and image will stored shortly afterwards when received from the client Height and width parameters are ignored in that case and derived from actual drawing size in the browser. Another possibility is to invoke headless browser, providing positive width and height parameter explicitely ; Definition at line 231 of file RGeomViewer.cxx. ◆ SelectVolume(). void RGeomViewer::SelectVolume ; (; const std::string & ; volname). Select visible top volume, all other volumes will be disabled. ; Definition at line 84 of file RGeomViewer.cxx. ◆ SendGeometry(). void RGeomViewer::SendGeometry ; (; unsigned ; connid",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html
https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html:3332,Performance,cache,cache,3332,"etTopVisible (bool on=true);  ; void SetVisLevel (int lvl=3);  Configures maximal visible level. ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  Show or update geometry in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ;  ; void Update ();  Update geometry drawings in all web displays. ;  . Protected Member Functions; std::vector< int > GetStackFromJson (const std::string &json, bool node_ids=false);  convert JSON into stack array ;  ; void ProcessSignal (const std::string &);  Process signal from geom description when it changed by any means. ;  ; void SendGeometry (unsigned connid=0, bool first_time=false);  Send data for principal geometry draw Should be used when essential settings were changed in geometry description. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  Process data from client. ;  ; void WebWindowDisconnect (unsigned connid);  Process disconnect event Clear cache data and dependent connections. ;  . Protected Attributes; RGeomDescription fDesc;  ! geometry description, send to the client as first message ;  ; TGeoManager * fGeoManager {nullptr};  ! geometry to show ;  ; bool fInfoActive {false};  ! true when info page active and node info need to be provided ;  ; std::string fSelectedVolume;  ! name of selected volume ;  ; bool fShowColumns {true};  ! show columns in hierarchy ;  ; bool fShowHierarchy {true};  ! if hierarchy visible by default ;  ; std::string fTitle;  ! title of geometry viewer ;  ; std::shared_ptr< RGeomHierarchy > fWebHierarchy;  ! web handle for hierarchy part ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomViewer.hxx>; Constructor & Destructor Documentation. ◆ RGeomViewer(). RGeomViewer::RGeomViewer ; (; TGeoManager * ; mgr = nullptr, . const std::string & ; volname = """" . ). constructor ; Definition at line 35 of file RGeomViewer.cxx. ◆ ~RG",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html
https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html:10083,Performance,cache,cache,10083," int ; lvl = 3). inline . Configures maximal visible level. ; Definition at line 79 of file RGeomViewer.hxx. ◆ Show(). void RGeomViewer::Show ; (; const RWebDisplayArgs & ; args = """", . bool ; always_start_new_browser = false . ). Show or update geometry in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ; Parameters. always_start_new_browserconfigured, starts new window ; argsarguments to display . Definition at line 109 of file RGeomViewer.cxx. ◆ Update(). void RGeomViewer::Update ; (; ). Update geometry drawings in all web displays. ; Definition at line 150 of file RGeomViewer.cxx. ◆ WebWindowCallback(). void RGeomViewer::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process data from client. ; Definition at line 260 of file RGeomViewer.cxx. ◆ WebWindowDisconnect(). void RGeomViewer::WebWindowDisconnect ; (; unsigned ; connid). protected . Process disconnect event Clear cache data and dependent connections. ; Definition at line 353 of file RGeomViewer.cxx. Member Data Documentation. ◆ fDesc. RGeomDescription ROOT::RGeomViewer::fDesc. protected . ! geometry description, send to the client as first message ; Definition at line 33 of file RGeomViewer.hxx. ◆ fGeoManager. TGeoManager* ROOT::RGeomViewer::fGeoManager {nullptr}. protected . ! geometry to show ; Definition at line 31 of file RGeomViewer.hxx. ◆ fInfoActive. bool ROOT::RGeomViewer::fInfoActive {false}. protected . ! true when info page active and node info need to be provided ; Definition at line 37 of file RGeomViewer.hxx. ◆ fSelectedVolume. std::string ROOT::RGeomViewer::fSelectedVolume. protected . ! name of selected volume ; Definition at line 32 of file RGeomViewer.hxx. ◆ fShowColumns. bool ROOT::RGeomViewer::fShowColumns {true}. protected . ! show columns in hierarchy ; Definition at line 35 of file RGeomViewer.hxx. ◆ fShowHierarchy. bool ROOT::RGeomViewer::fShowHierarchy {true}. protected . ",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html
https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html:575,Usability,clear,cleared,575,". ROOT: ROOT::RGeomViewer Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::RGeomViewer Class Reference. . Definition at line 27 of file RGeomViewer.hxx. Public Member Functions;  RGeomViewer (TGeoManager *mgr=nullptr, const std::string &volname="""");  constructor ;  ; virtual ~RGeomViewer ();  destructor ;  ; void ClearOnClose (const std::shared_ptr< void > &handle);  Set handle which will be cleared when connection is closed Must be called after window is shown. ;  ; RGeomDescription & Description ();  ; bool GetShowColumns () const;  ; bool GetShowHierarchy () const;  Returns default hierarchy browser visibility. ;  ; const std::string & GetTitle () const;  ; std::string GetWindowAddr () const;  Return web window address (name) used for geometry viewer. ;  ; std::string GetWindowUrl (bool remote);  Return web window URL which can be used for connection See ROOT::RWebWindow::GetUrl docu for more details. ;  ; void SaveAsMacro (const std::string &fname);  Save viewer configuration as macro. ;  ; void SaveImage (const std::string &fname=""geometry.png"", int width=0, int height=0);  Produce PNG image of the geometry If web-browser is shown and drawing completed, image is requested from the browser. ;  ; void SelectVolume (const std::string &volname);  Select visible top volume, all other volumes will be disabled. ;  ; void SetDrawOptions (const std::string &opt);  Configures draw option for geometry Normally has effect before first drawing of the geometry When geometry displayed, only ""axis"" and ""rotate"" options are updated. ;  ; void SetGeometry (TGeoManager *mgr, const std::string &volname="""");  assign new geometry to the viewer ;  ; void SetLimits (int nnodes=5000, int nfaces=100000);  Configures maximal number of visible nodes and faces. ;  ; void SetOnlyVolume (TGeoVolume *vol);  Draw only",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html
https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html:4580,Usability,clear,cleared,4580,"ve and node info need to be provided ;  ; std::string fSelectedVolume;  ! name of selected volume ;  ; bool fShowColumns {true};  ! show columns in hierarchy ;  ; bool fShowHierarchy {true};  ! if hierarchy visible by default ;  ; std::string fTitle;  ! title of geometry viewer ;  ; std::shared_ptr< RGeomHierarchy > fWebHierarchy;  ! web handle for hierarchy part ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomViewer.hxx>; Constructor & Destructor Documentation. ◆ RGeomViewer(). RGeomViewer::RGeomViewer ; (; TGeoManager * ; mgr = nullptr, . const std::string & ; volname = """" . ). constructor ; Definition at line 35 of file RGeomViewer.cxx. ◆ ~RGeomViewer(). RGeomViewer::~RGeomViewer ; (; ). virtual . destructor ; Definition at line 63 of file RGeomViewer.cxx. Member Function Documentation. ◆ ClearOnClose(). void RGeomViewer::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed Must be called after window is shown. ; Definition at line 444 of file RGeomViewer.cxx. ◆ Description(). RGeomDescription & ROOT::RGeomViewer::Description ; (; ). inline . Definition at line 107 of file RGeomViewer.hxx. ◆ GetShowColumns(). bool ROOT::RGeomViewer::GetShowColumns ; (; ); const. inline . Definition at line 97 of file RGeomViewer.hxx. ◆ GetShowHierarchy(). bool ROOT::RGeomViewer::GetShowHierarchy ; (; ); const. inline . Returns default hierarchy browser visibility. ; Definition at line 93 of file RGeomViewer.hxx. ◆ GetStackFromJson(). std::vector< int > RGeomViewer::GetStackFromJson ; (; const std::string & ; json, . bool ; node_ids = false . ). protected . convert JSON into stack array ; Definition at line 164 of file RGeomViewer.cxx. ◆ GetTitle(). const std::string & ROOT::RGeomViewer::GetTitle ; (; ); const. inline . Definition at line 59 of file RGeomViewer.hxx. ◆ GetWindowAddr(). std::string RGeomViewer::GetWindowAddr ; (; ); const. Return web window addres",MatchSource.WIKI,doc/v632/classROOT_1_1RGeomViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:7253,Availability,error,error,7253,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:7342,Availability,error,error,7342,"longs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:7497,Availability,error,error,7497,"y. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:7794,Availability,error,error,7794,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:12245,Availability,error,error,12245," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TGeoManager * fGeoManager {nullptr};  ; Int_t fTopVisible {-1};  ! is s ;  ; std::shared_ptr< RGeomViewer > fViewer;  . Additional Inherited Members;  Public Types inherited from TVirtualGeoPainter; enum  EGeoBombOption { kGeoNoBomb = 0; , kGeoBombXYZ = 1; , kGeoBombCyl = 2; , kGeoBombSph = 3; };  ; enum  EGeoVisL",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:7259,Integrability,message,message,7259,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:7800,Integrability,message,message,7800,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:9002,Integrability,message,message,9002,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:12251,Integrability,message,message,12251," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TGeoManager * fGeoManager {nullptr};  ; Int_t fTopVisible {-1};  ! is s ;  ; std::shared_ptr< RGeomViewer > fViewer;  . Additional Inherited Members;  Public Types inherited from TVirtualGeoPainter; enum  EGeoBombOption { kGeoNoBomb = 0; , kGeoBombXYZ = 1; , kGeoBombCyl = 2; , kGeoBombSph = 3; };  ; enum  EGeoVisL",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:12624,Integrability,message,message,12624," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TGeoManager * fGeoManager {nullptr};  ; Int_t fTopVisible {-1};  ! is s ;  ; std::shared_ptr< RGeomViewer > fViewer;  . Additional Inherited Members;  Public Types inherited from TVirtualGeoPainter; enum  EGeoBombOption { kGeoNoBomb = 0; , kGeoBombXYZ = 1; , kGeoBombCyl = 2; , kGeoBombSph = 3; };  ; enum  EGeoVisLevel { kGeoVisLevel = 0; };  ; enum  EGeoVisOption { ;   kGeoVisDefault = 0; , kGeoVisLeaves = 1; , kGeoVisOnly = 2; , kGeoVisBranch = 3; , ;   kGeoVisChanged = 4. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingl",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:5174,Modifiability,inherit,inherited,5174,"me (TGeoVolume *, Option_t *="""", TGeoMatrix *=nullptr) override;  ; void PrintOverlaps () const override;  ; void RandomPoints (const TGeoVolume *, Int_t, Option_t *="""") override;  ; void RandomRays (Int_t, Double_t, Double_t, Double_t, const char *, Bool_t) override;  ; void Raytrace (Option_t *="""") override;  ; TGeoNode * SamplePoints (Int_t, Double_t &, Double_t, const char *) override;  ; void SetBombFactors (Double_t=1.3, Double_t=1.3, Double_t=1.3, Double_t=1.3) override;  ; void SetCheckedNode (TGeoNode *) override;  ; void SetClippingShape (TGeoShape *) override;  ; void SetExplodedView (Int_t=0) override;  ; void SetGeoManager (TGeoManager *) override;  ; void SetIteratorPlugin (TGeoIteratorPlugin *) override;  ; void SetNmeshPoints (Int_t) override;  ; void SetNsegments (Int_t=20) override;  ; void SetRaytracing (Bool_t=kTRUE) override;  ; void SetTopVisible (Bool_t on=kTRUE) override;  ; void SetTopVolume (TGeoVolume *) override;  ; void SetVisLevel (Int_t=3) override;  ; void SetVisOption (Int_t=0) override;  ; Int_t ShapeDistancetoPrimitive (const TGeoShape *, Int_t, Int_t, Int_t) const override;  ; void Test (Int_t, Option_t *) override;  ; void TestOverlaps (const char *) override;  ; Bool_t TestVoxels (TGeoVolume *) override;  ; void UnbombTranslation (const Double_t *, Double_t *) override;  ; Double_t Weight (Double_t, Option_t *=""v"") override;  ;  Public Member Functions inherited from TVirtualGeoPainter;  TVirtualGeoPainter (TGeoManager *manager);  Geometry painter default constructor. ;  ;  ~TVirtualGeoPainter () override;  Geometry painter default destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMe",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:5576,Modifiability,inherit,inherited,5576,"t=20) override;  ; void SetRaytracing (Bool_t=kTRUE) override;  ; void SetTopVisible (Bool_t on=kTRUE) override;  ; void SetTopVolume (TGeoVolume *) override;  ; void SetVisLevel (Int_t=3) override;  ; void SetVisOption (Int_t=0) override;  ; Int_t ShapeDistancetoPrimitive (const TGeoShape *, Int_t, Int_t, Int_t) const override;  ; void Test (Int_t, Option_t *) override;  ; void TestOverlaps (const char *) override;  ; Bool_t TestVoxels (TGeoVolume *) override;  ; void UnbombTranslation (const Double_t *, Double_t *) override;  ; Double_t Weight (Double_t, Option_t *=""v"") override;  ;  Public Member Functions inherited from TVirtualGeoPainter;  TVirtualGeoPainter (TGeoManager *manager);  Geometry painter default constructor. ;  ;  ~TVirtualGeoPainter () override;  Geometry painter default destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:6889,Modifiability,inherit,inheritance,6889," ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:9100,Modifiability,inherit,inherits,9100,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:9217,Modifiability,inherit,inherits,9217,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:13090,Modifiability,inherit,inherited,13090,"const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TGeoManager * fGeoManager {nullptr};  ; Int_t fTopVisible {-1};  ! is s ;  ; std::shared_ptr< RGeomViewer > fViewer;  . Additional Inherited Members;  Public Types inherited from TVirtualGeoPainter; enum  EGeoBombOption { kGeoNoBomb = 0; , kGeoBombXYZ = 1; , kGeoBombCyl = 2; , kGeoBombSph = 3; };  ; enum  EGeoVisLevel { kGeoVisLevel = 0; };  ; enum  EGeoVisOption { ;   kGeoVisDefault = 0; , kGeoVisLeaves = 1; , kGeoVisOnly = 2; , kGeoVisBranch = 3; , ;   kGeoVisChanged = 4. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TVirtualGeoPainter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:13425,Modifiability,inherit,inherited,13425,"::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TGeoManager * fGeoManager {nullptr};  ; Int_t fTopVisible {-1};  ! is s ;  ; std::shared_ptr< RGeomViewer > fViewer;  . Additional Inherited Members;  Public Types inherited from TVirtualGeoPainter; enum  EGeoBombOption { kGeoNoBomb = 0; , kGeoBombXYZ = 1; , kGeoBombCyl = 2; , kGeoBombSph = 3; };  ; enum  EGeoVisLevel { kGeoVisLevel = 0; };  ; enum  EGeoVisOption { ;   kGeoVisDefault = 0; , kGeoVisLeaves = 1; , kGeoVisOnly = 2; , kGeoVisBranch = 3; , ;   kGeoVisChanged = 4. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TVirtualGeoPainter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualGeoPainter * GeoPainter ();  Static function returning a pointer to the geometry painter. ;  ; static void SetPainter (const TVirtualGeoPainter *painter);  Static function to set an alternative histogram painter. ;",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:14081,Modifiability,inherit,inherited,14081,"BombSph = 3; };  ; enum  EGeoVisLevel { kGeoVisLevel = 0; };  ; enum  EGeoVisOption { ;   kGeoVisDefault = 0; , kGeoVisLeaves = 1; , kGeoVisOnly = 2; , kGeoVisBranch = 3; , ;   kGeoVisChanged = 4. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TVirtualGeoPainter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualGeoPainter * GeoPainter ();  Static function returning a pointer to the geometry painter. ;  ; static void SetPainter (const TVirtualGeoPainter *painter);  Static function to set an alternative histogram painter. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *lo",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:14536,Modifiability,inherit,inherited,14536,"); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TVirtualGeoPainter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualGeoPainter * GeoPainter ();  Static function returning a pointer to the geometry painter. ;  ; static void SetPainter (const TVirtualGeoPainter *painter);  Static function to set an alternative histogram painter. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Attributes inherited from TVirtualGeoPainter; static TVirtualGeoPainter * fgGeoPainter = nullptr;  . #include <ROOT/RGeoPainter.hxx>. Inheritance diagram for ROOT::RGeoPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor ",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:15039,Modifiability,inherit,inherited,15039,"nst char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualGeoPainter * GeoPainter ();  Static function returning a pointer to the geometry painter. ;  ; static void SetPainter (const TVirtualGeoPainter *painter);  Static function to set an alternative histogram painter. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Attributes inherited from TVirtualGeoPainter; static TVirtualGeoPainter * fgGeoPainter = nullptr;  . #include <ROOT/RGeoPainter.hxx>. Inheritance diagram for ROOT::RGeoPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeoPainter(). RGeoPainter::RGeoPainter ; (; TGeoManager * ; manager). Definition at line 19 of file RGeoPainter.cxx. ◆ ~RGeoPainter(). RGeoPainter::~RGeoPainter ; (; ). override . Definition at line 25 of file RGeoPainter.cxx. Member Function Documentation. ◆ AddSize3D(). void ROOT::RGeoPainter::AddSize3D ; (; Int_t ; , . Int_t ; , . Int_t ;  . ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 31 of file RGeoPainter.hxx. ◆ AddTrack(). TVirtualGeoTrack * ROOT::RGeoPa",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:15138,Modifiability,inherit,inherited,15138,"nst char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualGeoPainter * GeoPainter ();  Static function returning a pointer to the geometry painter. ;  ; static void SetPainter (const TVirtualGeoPainter *painter);  Static function to set an alternative histogram painter. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Attributes inherited from TVirtualGeoPainter; static TVirtualGeoPainter * fgGeoPainter = nullptr;  . #include <ROOT/RGeoPainter.hxx>. Inheritance diagram for ROOT::RGeoPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeoPainter(). RGeoPainter::RGeoPainter ; (; TGeoManager * ; manager). Definition at line 19 of file RGeoPainter.cxx. ◆ ~RGeoPainter(). RGeoPainter::~RGeoPainter ; (; ). override . Definition at line 25 of file RGeoPainter.cxx. Member Function Documentation. ◆ AddSize3D(). void ROOT::RGeoPainter::AddSize3D ; (; Int_t ; , . Int_t ; , . Int_t ;  . ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 31 of file RGeoPainter.hxx. ◆ AddTrack(). TVirtualGeoTrack * ROOT::RGeoPa",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:15350,Modifiability,inherit,inherited,15350,"y painter. ;  ; static void SetPainter (const TVirtualGeoPainter *painter);  Static function to set an alternative histogram painter. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Attributes inherited from TVirtualGeoPainter; static TVirtualGeoPainter * fgGeoPainter = nullptr;  . #include <ROOT/RGeoPainter.hxx>. Inheritance diagram for ROOT::RGeoPainter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeoPainter(). RGeoPainter::RGeoPainter ; (; TGeoManager * ; manager). Definition at line 19 of file RGeoPainter.cxx. ◆ ~RGeoPainter(). RGeoPainter::~RGeoPainter ; (; ). override . Definition at line 25 of file RGeoPainter.cxx. Member Function Documentation. ◆ AddSize3D(). void ROOT::RGeoPainter::AddSize3D ; (; Int_t ; , . Int_t ; , . Int_t ;  . ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 31 of file RGeoPainter.hxx. ◆ AddTrack(). TVirtualGeoTrack * ROOT::RGeoPainter::AddTrack ; (; Int_t ; , . Int_t ; , . TObject * ;  . ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 32 of file RGeoPainter.hxx. ◆ AddTrackPoint(). void ROOT::RGeoPainter::Add",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:8731,Security,hash,hash,8731," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/v632/classROOT_1_1RGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html
https://root.cern/doc/v632/classROOT_1_1ROpaqueTaskArena.html:306,Deployability,patch,patches,306,". ROOT: ROOT::ROpaqueTaskArena Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::ROpaqueTaskArena Class Reference. . Definition at line 4 of file ROpaqueTaskArena.hxx. #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/core/imt/src/ROpaqueTaskArena.hxx>. Inheritance diagram for ROOT::ROpaqueTaskArena:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]. core/imt/src/ROpaqueTaskArena.hxx. ROOTROpaqueTaskArena. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classROOT_1_1ROpaqueTaskArena.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1ROpaqueTaskArena.html
https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html:2450,Deployability,release,release,2450,"c std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RQt5WebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RQt5WebDisplayHandle(). ROOT::RQt5WebDisplayHandle::RQt5WebDisplayHandle ; (; const std::string & ; url). inline . Definition at line 252 of file rootqt5.cpp. ◆ ~RQt5WebDisplayHandle(). ROOT::RQt5WebDispl",MatchSource.WIKI,doc/v632/classROOT_1_1RQt5WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html:4053,Deployability,release,release,4053,"ng functionality in headless browser - Google Chrome or Mozilla Firefox. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RQt5WebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RQt5WebDisplayHandle(). ROOT::RQt5WebDisplayHandle::RQt5WebDisplayHandle ; (; const std::string & ; url). inline . Definition at line 252 of file rootqt5.cpp. ◆ ~RQt5WebDisplayHandle(). ROOT::RQt5WebDisplayHandle::~RQt5WebDisplayHandle ; (; ). inlineoverride . Definition at line 254 of file rootqt5.cpp. Member Function Documentation. ◆ AddCreator(). static void ROOT::RQt5WebDisplayHandle::AddCreator ; (; ). inlinestatic . Definition at line 275 of file rootqt5.cpp. ◆ Resize(). bool ROOT::RQt5WebDisplayHandle::Resize ; (; int ; , . int ;  . ). inlineoverridevirtual . resize web window - if possible ; Reimplemented from ROOT::RWebDisplayHandle.; Definition at line 267 of file rootqt5.cpp. Member Data Documentation. ◆ fView. RootWebView* ROOT::RQt5WebDisplayHandle::fView {nullptr}. protected . pointer on widget, need to release when handle is destroyed ; Definition at line 95 of file rootqt5.cpp. gui/qt5webdisplay/rootqt5.cpp. ROOTRQt5WebDisplayHandle. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classROOT_1_1RQt5WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html:646,Modifiability,inherit,inherited,646,". ROOT: ROOT::RQt5WebDisplayHandle Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; ROOT::RQt5WebDisplayHandle Class ReferenceWeb Display » QT5 Web Display. . Definition at line 92 of file rootqt5.cpp. Classes; class  Qt5Creator;  . Public Member Functions;  RQt5WebDisplayHandle (const std::string &url);  ;  ~RQt5WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome ",MatchSource.WIKI,doc/v632/classROOT_1_1RQt5WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html:1143,Modifiability,inherit,inherited,1143,"cted Attributes |; List of all members ; ROOT::RQt5WebDisplayHandle Class ReferenceWeb Display » QT5 Web Display. . Definition at line 92 of file rootqt5.cpp. Classes; class  Qt5Creator;  . Public Member Functions;  RQt5WebDisplayHandle (const std::string &url);  ;  ~RQt5WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce i",MatchSource.WIKI,doc/v632/classROOT_1_1RQt5WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html:1360,Modifiability,config,configured,1360,"cted Attributes |; List of all members ; ROOT::RQt5WebDisplayHandle Class ReferenceWeb Display » QT5 Web Display. . Definition at line 92 of file rootqt5.cpp. Classes; class  Qt5Creator;  . Public Member Functions;  RQt5WebDisplayHandle (const std::string &url);  ;  ~RQt5WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce i",MatchSource.WIKI,doc/v632/classROOT_1_1RQt5WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html:1605,Modifiability,config,configured,1605,"rride;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWe",MatchSource.WIKI,doc/v632/classROOT_1_1RQt5WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html:2553,Modifiability,inherit,inherited,2553,"in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RQt5WebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RQt5WebDisplayHandle(). ROOT::RQt5WebDisplayHandle::RQt5WebDisplayHandle ; (; const std::string & ; url). inline . Definition at line 252 of file rootqt5.cpp. ◆ ~RQt5WebDisplayHandle(). ROOT::RQt5WebDisplayHandle::~RQt5WebDisplayHandle ; (; ). inlineoverride . Definition at line 254 of file rootqt5.cpp. Member Function Documentation. ◆ AddCreator(). static void ROOT::RQt5WebD",MatchSource.WIKI,doc/v632/classROOT_1_1RQt5WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html:2665,Modifiability,config,configured,2665,"in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RQt5WebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RQt5WebDisplayHandle(). ROOT::RQt5WebDisplayHandle::RQt5WebDisplayHandle ; (; const std::string & ; url). inline . Definition at line 252 of file rootqt5.cpp. ◆ ~RQt5WebDisplayHandle(). ROOT::RQt5WebDisplayHandle::~RQt5WebDisplayHandle ; (; ). inlineoverride . Definition at line 254 of file rootqt5.cpp. Member Function Documentation. ◆ AddCreator(). static void ROOT::RQt5WebD",MatchSource.WIKI,doc/v632/classROOT_1_1RQt5WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html:1389,Testability,test,test,1389,"cted Attributes |; List of all members ; ROOT::RQt5WebDisplayHandle Class ReferenceWeb Display » QT5 Web Display. . Definition at line 92 of file rootqt5.cpp. Classes; class  Qt5Creator;  . Public Member Functions;  RQt5WebDisplayHandle (const std::string &url);  ;  ~RQt5WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce i",MatchSource.WIKI,doc/v632/classROOT_1_1RQt5WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt5WebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html:2450,Deployability,release,release,2450,"c std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RQt6WebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RQt6WebDisplayHandle(). ROOT::RQt6WebDisplayHandle::RQt6WebDisplayHandle ; (; const std::string & ; url). inline . Definition at line 215 of file rootqt6.cpp. ◆ ~RQt6WebDisplayHandle(). ROOT::RQt6WebDispl",MatchSource.WIKI,doc/v632/classROOT_1_1RQt6WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html:4053,Deployability,release,release,4053,"ng functionality in headless browser - Google Chrome or Mozilla Firefox. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RQt6WebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RQt6WebDisplayHandle(). ROOT::RQt6WebDisplayHandle::RQt6WebDisplayHandle ; (; const std::string & ; url). inline . Definition at line 215 of file rootqt6.cpp. ◆ ~RQt6WebDisplayHandle(). ROOT::RQt6WebDisplayHandle::~RQt6WebDisplayHandle ; (; ). inlineoverride . Definition at line 217 of file rootqt6.cpp. Member Function Documentation. ◆ AddCreator(). static void ROOT::RQt6WebDisplayHandle::AddCreator ; (; ). inlinestatic . Definition at line 234 of file rootqt6.cpp. ◆ Resize(). bool ROOT::RQt6WebDisplayHandle::Resize ; (; int ; , . int ;  . ). inlineoverridevirtual . resize web window - if possible ; Reimplemented from ROOT::RWebDisplayHandle.; Definition at line 226 of file rootqt6.cpp. Member Data Documentation. ◆ fView. RootWebView* ROOT::RQt6WebDisplayHandle::fView {nullptr}. protected . pointer on widget, need to release when handle is destroyed ; Definition at line 71 of file rootqt6.cpp. gui/qt6webdisplay/rootqt6.cpp. ROOTRQt6WebDisplayHandle. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classROOT_1_1RQt6WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html:646,Modifiability,inherit,inherited,646,". ROOT: ROOT::RQt6WebDisplayHandle Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; ROOT::RQt6WebDisplayHandle Class ReferenceWeb Display » QT6 Web Display. . Definition at line 68 of file rootqt6.cpp. Classes; class  Qt6Creator;  . Public Member Functions;  RQt6WebDisplayHandle (const std::string &url);  ;  ~RQt6WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome ",MatchSource.WIKI,doc/v632/classROOT_1_1RQt6WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html:1143,Modifiability,inherit,inherited,1143,"cted Attributes |; List of all members ; ROOT::RQt6WebDisplayHandle Class ReferenceWeb Display » QT6 Web Display. . Definition at line 68 of file rootqt6.cpp. Classes; class  Qt6Creator;  . Public Member Functions;  RQt6WebDisplayHandle (const std::string &url);  ;  ~RQt6WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce i",MatchSource.WIKI,doc/v632/classROOT_1_1RQt6WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html:1360,Modifiability,config,configured,1360,"cted Attributes |; List of all members ; ROOT::RQt6WebDisplayHandle Class ReferenceWeb Display » QT6 Web Display. . Definition at line 68 of file rootqt6.cpp. Classes; class  Qt6Creator;  . Public Member Functions;  RQt6WebDisplayHandle (const std::string &url);  ;  ~RQt6WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce i",MatchSource.WIKI,doc/v632/classROOT_1_1RQt6WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html:1605,Modifiability,config,configured,1605,"rride;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWe",MatchSource.WIKI,doc/v632/classROOT_1_1RQt6WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html:2553,Modifiability,inherit,inherited,2553,"in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RQt6WebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RQt6WebDisplayHandle(). ROOT::RQt6WebDisplayHandle::RQt6WebDisplayHandle ; (; const std::string & ; url). inline . Definition at line 215 of file rootqt6.cpp. ◆ ~RQt6WebDisplayHandle(). ROOT::RQt6WebDisplayHandle::~RQt6WebDisplayHandle ; (; ). inlineoverride . Definition at line 217 of file rootqt6.cpp. Member Function Documentation. ◆ AddCreator(). static void ROOT::RQt6WebD",MatchSource.WIKI,doc/v632/classROOT_1_1RQt6WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html:2665,Modifiability,config,configured,2665,"in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RQt6WebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RQt6WebDisplayHandle(). ROOT::RQt6WebDisplayHandle::RQt6WebDisplayHandle ; (; const std::string & ; url). inline . Definition at line 215 of file rootqt6.cpp. ◆ ~RQt6WebDisplayHandle(). ROOT::RQt6WebDisplayHandle::~RQt6WebDisplayHandle ; (; ). inlineoverride . Definition at line 217 of file rootqt6.cpp. Member Function Documentation. ◆ AddCreator(). static void ROOT::RQt6WebD",MatchSource.WIKI,doc/v632/classROOT_1_1RQt6WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html:1389,Testability,test,test,1389,"cted Attributes |; List of all members ; ROOT::RQt6WebDisplayHandle Class ReferenceWeb Display » QT6 Web Display. . Definition at line 68 of file rootqt6.cpp. Classes; class  Qt6Creator;  . Public Member Functions;  RQt6WebDisplayHandle (const std::string &url);  ;  ~RQt6WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce i",MatchSource.WIKI,doc/v632/classROOT_1_1RQt6WebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RRangeCast.html:768,Safety,avoid,avoid,768,". ROOT: ROOT::RRangeCast< T, isDynamic, Range_t > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::RRangeCast< T, isDynamic, Range_t > Class Template Reference. ; template<typename T, bool isDynamic, typename Range_t>; class ROOT::RRangeCast< T, isDynamic, Range_t >Wraps any collection that can be used in range-based loops and applies static_cast<T> or dynamic_cast<T> to each element. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. ; Range_tThe type of the input range, which should be usually a reference type to avoid copying. . Definition at line 135 of file RRangeCast.hxx. Public Types; using const_iterator = Internal::TypedIter< T, decltype(std::cbegin(std::declval< Range_t >())), isDynamic >;  ; using iterator = Internal::TypedIter< T, decltype(std::begin(std::declval< Range_t >())), isDynamic >;  . Public Member Functions;  RRangeCast (Range_t &&inputRange);  ; iterator begin ();  ; const_iterator begin () const;  ; iterator end ();  ; const_iterator end () const;  . Private Attributes; Range_t fInputRange;  . #include <ROOT/RRangeCast.hxx>. Inheritance diagram for ROOT::RRangeCast< T, isDynamic, Range_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ const_iterator. template<typename T , bool isDynamic, typename Range_t > . using ROOT::RRangeCast< T, isDynamic, Range_t >::const_iterator = Internal::TypedIter<T, decltype(std::cbegin(std::declval<Range_t>())), isDynamic>. Definition at line 144 of file RRangeCast.hxx. ◆ iterator. template<typename T , bool isDynamic, typename Range_t > . using ROOT::RRangeCast< T, isDynamic, Range_t >::iterator = Internal::TypedIter<T, decltype(std::begin(std::declval<Range_t>())), isDynamic>. Definiti",MatchSource.WIKI,doc/v632/classROOT_1_1RRangeCast.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RRangeCast.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:4736,Availability,error,error,4736,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:4825,Availability,error,error,4825,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:4980,Availability,error,error,4980,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:5277,Availability,error,error,5277,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:9712,Availability,error,error,9712," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class s",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:4742,Integrability,message,message,4742,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:5283,Integrability,message,message,5283,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:6485,Integrability,message,message,6485,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:9718,Integrability,message,message,9718," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class s",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:10091,Integrability,message,message,10091," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, voi",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:562,Modifiability,inherit,inherited,562,". ROOT: ROOT::RTreeDrawInvokeTimer Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RTreeDrawInvokeTimer Class Reference. . Definition at line 86 of file RTreeViewer.cxx. Public Member Functions;  RTreeDrawInvokeTimer (Long_t milliSec, bool mode, RTreeViewer &viewer);  constructor ;  ; void Timeout () override;  timeout handler used to process postponed requests in main ROOT thread ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void Set",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:2507,Modifiability,inherit,inherited,2507,"verride;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ; virtual void TurnOn ();  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consi",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:2975,Modifiability,inherit,inherited,2975,"kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ; virtual void TurnOn ();  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer ",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:4372,Modifiability,inherit,inheritance,4372,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:6583,Modifiability,inherit,inherits,6583,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:6700,Modifiability,inherit,inherits,6700,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:10398,Modifiability,inherit,inherited,10398," SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal of this object from slot of receiver. ;  ; virtual void Disconnected (const char *);  ; void Emit (const char *signal);  Activate signal without args. ;  ; template<typename T > ; void Emit (const char *signal, const T &arg);  Activate signal with single paramet",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:12430,Modifiability,inherit,inherited,12430," const T &... params);  Emit a signal with a varying number of arguments. ;  ; TList * GetListOfClassSignals () const;  Returns pointer to list of signals of this class. ;  ; TList * GetListOfConnections () const;  ; TList * GetListOfSignals () const;  ; virtual Bool_t HasConnection (const char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Public Attributes; RTreeViewer & fViewer;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TTimer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtH",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:13086,Modifiability,inherit,inherited,13086,"ber of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Public Attributes; RTreeViewer & fViewer;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TTimer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bo",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:13470,Modifiability,inherit,inherited,13470,"WriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TTimer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Thi",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:13688,Modifiability,inherit,inherited,13688,"WriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TTimer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Thi",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:14206,Modifiability,inherit,inherited,14206,"ar * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullpt",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:15366,Modifiability,inherit,inherited,15366,"ass_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sende",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:15465,Modifiability,inherit,inherited,15465,"ass_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sende",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:15676,Modifiability,inherit,inherited,15676,", const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:15789,Modifiability,inherit,inherited,15789,", const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:16638,Modifiability,inherit,inherited,16638,"nst char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for ROOT::RTreeDrawInvokeTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RTreeDrawInvokeTimer(). ROOT::RTreeDrawInvokeTimer::RTreeDrawInvokeTimer ; (; Long_t ; milliSec, . bool ; mode, . RTreeViewer & ; viewer . ). inline . constructor ; Definition at line 91 of file RTreeViewer.cxx. Member Function Documentation. ◆ Timeout(). void ROOT::RTreeDrawInvokeTimer::Timeout ; (; ). inlineoverridevirtual . timeout handler used to process postponed requests in main ROOT thread ; Reimplemented from TTimer.; Definition at line 95 of file RTreeViewer.cxx. Member Data Documentation. ◆ fViewer. RTreeViewer& ROO",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:16841,Modifiability,inherit,inherited,16841,"nst char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for ROOT::RTreeDrawInvokeTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RTreeDrawInvokeTimer(). ROOT::RTreeDrawInvokeTimer::RTreeDrawInvokeTimer ; (; Long_t ; milliSec, . bool ; mode, . RTreeViewer & ; viewer . ). inline . constructor ; Definition at line 91 of file RTreeViewer.cxx. Member Function Documentation. ◆ Timeout(). void ROOT::RTreeDrawInvokeTimer::Timeout ; (; ). inlineoverridevirtual . timeout handler used to process postponed requests in main ROOT thread ; Reimplemented from TTimer.; Definition at line 95 of file RTreeViewer.cxx. Member Data Documentation. ◆ fViewer. RTreeViewer& ROO",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:17054,Modifiability,inherit,inherited,17054,"nst char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for ROOT::RTreeDrawInvokeTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RTreeDrawInvokeTimer(). ROOT::RTreeDrawInvokeTimer::RTreeDrawInvokeTimer ; (; Long_t ; milliSec, . bool ; mode, . RTreeViewer & ; viewer . ). inline . constructor ; Definition at line 91 of file RTreeViewer.cxx. Member Function Documentation. ◆ Timeout(). void ROOT::RTreeDrawInvokeTimer::Timeout ; (; ). inlineoverridevirtual . timeout handler used to process postponed requests in main ROOT thread ; Reimplemented from TTimer.; Definition at line 95 of file RTreeViewer.cxx. Member Data Documentation. ◆ fViewer. RTreeViewer& ROO",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:461,Safety,timeout,timeout,461,". ROOT: ROOT::RTreeDrawInvokeTimer Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RTreeDrawInvokeTimer Class Reference. . Definition at line 86 of file RTreeViewer.cxx. Public Member Functions;  RTreeDrawInvokeTimer (Long_t milliSec, bool mode, RTreeViewer &viewer);  constructor ;  ; void Timeout () override;  timeout handler used to process postponed requests in main ROOT thread ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void Set",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:2163,Safety,timeout,timeout,2163,"r * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ; virtual void TurnOn ();  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObje",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:17686,Safety,timeout,timeout,17686,"thod name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for ROOT::RTreeDrawInvokeTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RTreeDrawInvokeTimer(). ROOT::RTreeDrawInvokeTimer::RTreeDrawInvokeTimer ; (; Long_t ; milliSec, . bool ; mode, . RTreeViewer & ; viewer . ). inline . constructor ; Definition at line 91 of file RTreeViewer.cxx. Member Function Documentation. ◆ Timeout(). void ROOT::RTreeDrawInvokeTimer::Timeout ; (; ). inlineoverridevirtual . timeout handler used to process postponed requests in main ROOT thread ; Reimplemented from TTimer.; Definition at line 95 of file RTreeViewer.cxx. Member Data Documentation. ◆ fViewer. RTreeViewer& ROOT::RTreeDrawInvokeTimer::fViewer. Definition at line 88 of file RTreeViewer.cxx. tree/webviewer/src/RTreeViewer.cxx. ROOTRTreeDrawInvokeTimer. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:6214,Security,hash,hash,6214," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:4656,Availability,error,error,4656,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:4745,Availability,error,error,4745,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:4900,Availability,error,error,4900,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:5197,Availability,error,error,5197,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:9281,Availability,error,error,9281,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Member Functions;  RTreeDrawMonitoring (const RTreeDrawMonitoring &)=delete;  ; RTreeDrawMonitoring & operator= (const RTreeDrawMonitoring &)=delete;  . Private Attributes; long long fLastProgressSendTm {0};  ; Int_t fPeriod {100};  ; RTreeViewer & fViewer;  . Additional Inherited Members;  Public Types inherited from TObject",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:4662,Integrability,message,message,4662,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:5203,Integrability,message,message,5203,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:6193,Integrability,message,message,6193,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:9287,Integrability,message,message,9287,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Member Functions;  RTreeDrawMonitoring (const RTreeDrawMonitoring &)=delete;  ; RTreeDrawMonitoring & operator= (const RTreeDrawMonitoring &)=delete;  . Private Attributes; long long fLastProgressSendTm {0};  ; Int_t fPeriod {100};  ; RTreeViewer & fViewer;  . Additional Inherited Members;  Public Types inherited from TObject",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:9660,Integrability,message,message,9660," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Member Functions;  RTreeDrawMonitoring (const RTreeDrawMonitoring &)=delete;  ; RTreeDrawMonitoring & operator= (const RTreeDrawMonitoring &)=delete;  . Private Attributes; long long fLastProgressSendTm {0};  ; Int_t fPeriod {100};  ; RTreeViewer & fViewer;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:1175,Modifiability,inherit,inherited,1175,". ROOT: ROOT::RTreeDrawMonitoring Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::RTreeDrawMonitoring Class Reference. . Definition at line 31 of file RTreeViewer.cxx. Public Member Functions;  RTreeDrawMonitoring (Int_t period, RTreeViewer &viewer);  ; bool SendFileCloseEvent (TFile *) override;  ; bool SendFileOpenProgress (TFile *, TList *, const char *, bool=false) override;  ; bool SendFileReadProgress (TFile *) override;  ; bool SendFileWriteProgress (TFile *) override;  ; bool SendInfoDescription (const char *) override;  ; bool SendInfoStatus (const char *) override;  ; bool SendInfoTime () override;  ; bool SendInfoUser (const char *=nullptr) override;  ; bool SendParameters (TList *, const char *=nullptr) override;  ; bool SendProcessingProgress (Double_t nevent, Double_t, bool=false) override;  ; bool SendProcessingStatus (const char *, bool=false) override;  ; void SetLogLevel (const char *=""WARNING"") override;  ; void Verbose (bool) override;  ;  Public Member Functions inherited from TVirtualMonitoringWriter;  TVirtualMonitoringWriter ();  ;  TVirtualMonitoringWriter (const char *name, Double_t value);  ; virtual ~TVirtualMonitoringWriter ();  destructor ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the S",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:1571,Modifiability,inherit,inherited,1571,"ile *) override;  ; bool SendFileWriteProgress (TFile *) override;  ; bool SendInfoDescription (const char *) override;  ; bool SendInfoStatus (const char *) override;  ; bool SendInfoTime () override;  ; bool SendInfoUser (const char *=nullptr) override;  ; bool SendParameters (TList *, const char *=nullptr) override;  ; bool SendProcessingProgress (Double_t nevent, Double_t, bool=false) override;  ; bool SendProcessingStatus (const char *, bool=false) override;  ; void SetLogLevel (const char *=""WARNING"") override;  ; void Verbose (bool) override;  ;  Public Member Functions inherited from TVirtualMonitoringWriter;  TVirtualMonitoringWriter ();  ;  TVirtualMonitoringWriter (const char *name, Double_t value);  ; virtual ~TVirtualMonitoringWriter ();  destructor ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; ",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:3199,Modifiability,inherit,inherited,3199,"ual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:4292,Modifiability,inherit,inheritance,4292,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:6291,Modifiability,inherit,inherits,6291,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:6408,Modifiability,inherit,inherits,6408,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:10255,Modifiability,inherit,inherited,10255," Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Member Functions;  RTreeDrawMonitoring (const RTreeDrawMonitoring &)=delete;  ; RTreeDrawMonitoring & operator= (const RTreeDrawMonitoring &)=delete;  . Private Attributes; long long fLastProgressSendTm {0};  ; Int_t fPeriod {100};  ; RTreeViewer & fViewer;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TVirtualMonitoringWriter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  ",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:10911,Modifiability,inherit,inherited,10911," Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TVirtualMonitoringWriter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualMonitoringWriter; TList * fTmpOpenPhases;  ;  Protec",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:11139,Modifiability,inherit,inherited,11139," Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TVirtualMonitoringWriter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualMonitoringWriter; TList * fTmpOpenPhases;  ;  Protec",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:11349,Modifiability,inherit,inherited,11349," Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TVirtualMonitoringWriter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualMonitoringWriter; TList * fTmpOpenPhases;  ;  Protec",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:11852,Modifiability,inherit,inherited,11852," Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualMonitoringWriter; TList * fTmpOpenPhases;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Inheritance diagram for ROOT::RTreeDrawMonitoring:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RTreeDrawMonitoring() [1/2]. ROOT::RTreeDrawMonitoring::RTreeDrawMonitoring ; (; const RTreeDrawMonitoring & ; ). privatedelete . ◆ RTreeDrawMonitoring() [2/2]. ROOT::RTreeDrawMonitoring::RTreeDrawMonitoring ; (; Int_t ; period, . RTreeViewer & ; viewer . ). inline . Definition at line 43 of file RTreeViewer.cxx. Member Function Documentation. ◆ operator=(). RTreeDrawMonitoring & ROOT::RTreeDrawMonitoring::operator= ; (; const RTreeDrawMonitoring & ; ). privatedelete",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:11951,Modifiability,inherit,inherited,11951," Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualMonitoringWriter; TList * fTmpOpenPhases;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Inheritance diagram for ROOT::RTreeDrawMonitoring:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RTreeDrawMonitoring() [1/2]. ROOT::RTreeDrawMonitoring::RTreeDrawMonitoring ; (; const RTreeDrawMonitoring & ; ). privatedelete . ◆ RTreeDrawMonitoring() [2/2]. ROOT::RTreeDrawMonitoring::RTreeDrawMonitoring ; (; Int_t ; period, . RTreeViewer & ; viewer . ). inline . Definition at line 43 of file RTreeViewer.cxx. Member Function Documentation. ◆ operator=(). RTreeDrawMonitoring & ROOT::RTreeDrawMonitoring::operator= ; (; const RTreeDrawMonitoring & ; ). privatedelete",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:12156,Modifiability,inherit,inherited,12156,"har * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualMonitoringWriter; TList * fTmpOpenPhases;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Inheritance diagram for ROOT::RTreeDrawMonitoring:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RTreeDrawMonitoring() [1/2]. ROOT::RTreeDrawMonitoring::RTreeDrawMonitoring ; (; const RTreeDrawMonitoring & ; ). privatedelete . ◆ RTreeDrawMonitoring() [2/2]. ROOT::RTreeDrawMonitoring::RTreeDrawMonitoring ; (; Int_t ; period, . RTreeViewer & ; viewer . ). inline . Definition at line 43 of file RTreeViewer.cxx. Member Function Documentation. ◆ operator=(). RTreeDrawMonitoring & ROOT::RTreeDrawMonitoring::operator= ; (; const RTreeDrawMonitoring & ; ). privatedelete . ◆ SendFileCloseEvent(). bool ROOT::RTreeDrawMonitoring::SendFileCloseEvent ; (; TFile * ; ). inlineoverridevirtual . Reimplemented from TVirtualMonitoringWriter.; Definition at line 49 of file RTreeViewer.cxx. ◆ SendFileOpenProgress().",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:12246,Modifiability,inherit,inherited,12246,"har * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualMonitoringWriter; TList * fTmpOpenPhases;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Inheritance diagram for ROOT::RTreeDrawMonitoring:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RTreeDrawMonitoring() [1/2]. ROOT::RTreeDrawMonitoring::RTreeDrawMonitoring ; (; const RTreeDrawMonitoring & ; ). privatedelete . ◆ RTreeDrawMonitoring() [2/2]. ROOT::RTreeDrawMonitoring::RTreeDrawMonitoring ; (; Int_t ; period, . RTreeViewer & ; viewer . ). inline . Definition at line 43 of file RTreeViewer.cxx. Member Function Documentation. ◆ operator=(). RTreeDrawMonitoring & ROOT::RTreeDrawMonitoring::operator= ; (; const RTreeDrawMonitoring & ; ). privatedelete . ◆ SendFileCloseEvent(). bool ROOT::RTreeDrawMonitoring::SendFileCloseEvent ; (; TFile * ; ). inlineoverridevirtual . Reimplemented from TVirtualMonitoringWriter.; Definition at line 49 of file RTreeViewer.cxx. ◆ SendFileOpenProgress().",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:2439,Security,hash,hash,2439," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html
https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html:1414,Deployability,update,update,1414," file RTreeViewer.hxx. Classes; struct  RBranchInfo;  ; struct  RConfig;  . Public Types; using PerformDrawCallback_t = std::function< void(const std::string &)>;  . Public Member Functions;  RTreeViewer (TTree *tree=nullptr);  constructor ;  ; virtual ~RTreeViewer ();  destructor ;  ; bool GetShowHierarchy () const;  Returns default hierarchy browser visibility. ;  ; const std::string & GetTitle () const;  ; std::string GetWindowAddr () const;  Return address of web window used for tree viewer. ;  ; std::string GetWindowUrl (bool remote);  Return URL of web window used for tree viewer See ROOT::RWebWindow::GetUrl docu for more details. ;  ; void SetCallback (PerformDrawCallback_t func);  ; void SetShowHierarchy (bool on=true);  Configures default hierarchy browser visibility, only has effect before showing web window. ;  ; void SetTitle (const std::string &title);  ; void SetTree (TTree *tree);  assign new TTree to the viewer ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  Show or update viewer in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ;  ; bool SuggestBranch (const TBranch *branch);  Suggest to use branch in the gui Normally just assign as last edited expression. ;  ; bool SuggestExpression (const std::string &expr);  Suggest to use expression in the gui Normally just assign as last edited expression. ;  ; bool SuggestLeaf (const TLeaf *leaf);  Suggest to use leaf in the gui Normally just assign as last edited expression. ;  ; void Update ();  Update tree viewer in all web displays. ;  . Static Public Member Functions; static RTreeViewer * NewViewer (TTree *);  Create new viewer Method used for plugin. ;  . Private Member Functions; void AddBranches (TObjArray *branches);  Add branches to config. ;  ; std::string FormatItemName (const std::string &name);  Format item name used in draw expression. ;  ; void InvokeTreeDraw ();  Invoke tree drawing. ;",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html
https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html:2866,Deployability,configurat,configuration,2866," Public Member Functions; static RTreeViewer * NewViewer (TTree *);  Create new viewer Method used for plugin. ;  . Private Member Functions; void AddBranches (TObjArray *branches);  Add branches to config. ;  ; std::string FormatItemName (const std::string &name);  Format item name used in draw expression. ;  ; void InvokeTreeDraw ();  Invoke tree drawing. ;  ; void SendCfg (unsigned connid);  Send data for initialize viewer. ;  ; void SendProgress (Double_t nevent=0.);  Send progress to the client. ;  ; void UpdateConfig ();  Update RConfig data. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  receive data from client ;  ; void WebWindowConnect (unsigned connid);  react on new connection ;  . Private Attributes; PerformDrawCallback_t fCallback;  ! callback invoked when tree draw performed ;  ; RConfig fCfg;  ! configuration, exchanged between client and server ;  ; std::string fLastSendProgress;  ! last send progress to client ;  ; bool fShowHierarchy {false};  ! show TTree hierarchy ;  ; std::unique_ptr< RTreeDrawInvokeTimer > fTimer;  ! timer to invoke tree draw ;  ; std::string fTitle;  ! title of tree viewer ;  ; TTree * fTree {nullptr};  ! TTree to show ;  ; std::shared_ptr< ROOT::RWebWindow > fWebWindow;  ! web window ;  . Friends; class RTreeDrawInvokeTimer;  ; class RTreeDrawMonitoring;  . #include <ROOT/RTreeViewer.hxx>; Member Typedef Documentation. ◆ PerformDrawCallback_t. using ROOT::RTreeViewer::PerformDrawCallback_t = std::function<void(const std::string &)>. Definition at line 41 of file RTreeViewer.hxx. Constructor & Destructor Documentation. ◆ RTreeViewer(). RTreeViewer::RTreeViewer ; (; TTree * ; tree = nullptr). constructor ; Definition at line 108 of file RTreeViewer.cxx. ◆ ~RTreeViewer(). RTreeViewer::~RTreeViewer ; (; ). virtual . destructor ; Definition at line 128 of file RTreeViewer.cxx. Member Function Documentation. ◆ AddBranches(). void RTreeViewer::AddBranches ; (; TObjArray * ; branches). private . Add branches ",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html
https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html:6421,Deployability,update,update,6421,"RTreeViewer::SendProgress ; (; Double_t ; nevent = 0.). private . Send progress to the client. ; Definition at line 463 of file RTreeViewer.cxx. ◆ SetCallback(). void ROOT::RTreeViewer::SetCallback ; (; PerformDrawCallback_t ; func). inline . Definition at line 73 of file RTreeViewer.hxx. ◆ SetShowHierarchy(). void ROOT::RTreeViewer::SetShowHierarchy ; (; bool ; on = true). inline . Configures default hierarchy browser visibility, only has effect before showing web window. ; Definition at line 76 of file RTreeViewer.hxx. ◆ SetTitle(). void ROOT::RTreeViewer::SetTitle ; (; const std::string & ; title). inline . Definition at line 58 of file RTreeViewer.hxx. ◆ SetTree(). void RTreeViewer::SetTree ; (; TTree * ; tree). assign new TTree to the viewer ; Definition at line 136 of file RTreeViewer.cxx. ◆ Show(). void RTreeViewer::Show ; (; const RWebDisplayArgs & ; args = """", . bool ; always_start_new_browser = false . ). Show or update viewer in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ; Parameters. always_start_new_browserconfigured, starts new window ; argsarguments to display . Definition at line 214 of file RTreeViewer.cxx. ◆ SuggestBranch(). bool RTreeViewer::SuggestBranch ; (; const TBranch * ; branch). Suggest to use branch in the gui Normally just assign as last edited expression. ; Definition at line 181 of file RTreeViewer.cxx. ◆ SuggestExpression(). bool RTreeViewer::SuggestExpression ; (; const std::string & ; expr). Suggest to use expression in the gui Normally just assign as last edited expression. ; Definition at line 197 of file RTreeViewer.cxx. ◆ SuggestLeaf(). bool RTreeViewer::SuggestLeaf ; (; const TLeaf * ; leaf). Suggest to use leaf in the gui Normally just assign as last edited expression. ; Definition at line 157 of file RTreeViewer.cxx. ◆ Update(). void RTreeViewer::Update ; (; ). Update tree viewer in all web displays. ; Definition at line 249 of file RTreeViewer.cxx. ◆",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html
https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html:8506,Deployability,configurat,configuration,8506,"date RConfig data. ; Definition at line 372 of file RTreeViewer.cxx. ◆ WebWindowCallback(). void RTreeViewer::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). private . receive data from client ; Definition at line 276 of file RTreeViewer.cxx. ◆ WebWindowConnect(). void RTreeViewer::WebWindowConnect ; (; unsigned ; connid). private . react on new connection ; Definition at line 268 of file RTreeViewer.cxx. Friends And Related Symbol Documentation. ◆ RTreeDrawInvokeTimer. friend class RTreeDrawInvokeTimer. friend . Definition at line 37 of file RTreeViewer.hxx. ◆ RTreeDrawMonitoring. friend class RTreeDrawMonitoring. friend . Definition at line 36 of file RTreeViewer.hxx. Member Data Documentation. ◆ fCallback. PerformDrawCallback_t ROOT::RTreeViewer::fCallback. private . ! callback invoked when tree draw performed ; Definition at line 94 of file RTreeViewer.hxx. ◆ fCfg. RConfig ROOT::RTreeViewer::fCfg. private . ! configuration, exchanged between client and server ; Definition at line 93 of file RTreeViewer.hxx. ◆ fLastSendProgress. std::string ROOT::RTreeViewer::fLastSendProgress. private . ! last send progress to client ; Definition at line 95 of file RTreeViewer.hxx. ◆ fShowHierarchy. bool ROOT::RTreeViewer::fShowHierarchy {false}. private . ! show TTree hierarchy ; Definition at line 92 of file RTreeViewer.hxx. ◆ fTimer. std::unique_ptr<RTreeDrawInvokeTimer> ROOT::RTreeViewer::fTimer. private . ! timer to invoke tree draw ; Definition at line 96 of file RTreeViewer.hxx. ◆ fTitle. std::string ROOT::RTreeViewer::fTitle. private . ! title of tree viewer ; Definition at line 90 of file RTreeViewer.hxx. ◆ fTree. TTree* ROOT::RTreeViewer::fTree {nullptr}. private . ! TTree to show ; Definition at line 89 of file RTreeViewer.hxx. ◆ fWebWindow. std::shared_ptr<ROOT::RWebWindow> ROOT::RTreeViewer::fWebWindow. private . ! web window ; Definition at line 91 of file RTreeViewer.hxx. Libraries for ROOT::RTreeViewer:. [legend]; The documentation for ",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html
https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html:2121,Modifiability,plugin,plugin,2121,"unc);  ; void SetShowHierarchy (bool on=true);  Configures default hierarchy browser visibility, only has effect before showing web window. ;  ; void SetTitle (const std::string &title);  ; void SetTree (TTree *tree);  assign new TTree to the viewer ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  Show or update viewer in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ;  ; bool SuggestBranch (const TBranch *branch);  Suggest to use branch in the gui Normally just assign as last edited expression. ;  ; bool SuggestExpression (const std::string &expr);  Suggest to use expression in the gui Normally just assign as last edited expression. ;  ; bool SuggestLeaf (const TLeaf *leaf);  Suggest to use leaf in the gui Normally just assign as last edited expression. ;  ; void Update ();  Update tree viewer in all web displays. ;  . Static Public Member Functions; static RTreeViewer * NewViewer (TTree *);  Create new viewer Method used for plugin. ;  . Private Member Functions; void AddBranches (TObjArray *branches);  Add branches to config. ;  ; std::string FormatItemName (const std::string &name);  Format item name used in draw expression. ;  ; void InvokeTreeDraw ();  Invoke tree drawing. ;  ; void SendCfg (unsigned connid);  Send data for initialize viewer. ;  ; void SendProgress (Double_t nevent=0.);  Send progress to the client. ;  ; void UpdateConfig ();  Update RConfig data. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  receive data from client ;  ; void WebWindowConnect (unsigned connid);  react on new connection ;  . Private Attributes; PerformDrawCallback_t fCallback;  ! callback invoked when tree draw performed ;  ; RConfig fCfg;  ! configuration, exchanged between client and server ;  ; std::string fLastSendProgress;  ! last send progress to client ;  ; bool fShowHierarchy {false};  ! show TTree hierarchy ;  ; std::unique_ptr< RTree",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html
https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html:2217,Modifiability,config,config,2217,"ect before showing web window. ;  ; void SetTitle (const std::string &title);  ; void SetTree (TTree *tree);  assign new TTree to the viewer ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  Show or update viewer in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ;  ; bool SuggestBranch (const TBranch *branch);  Suggest to use branch in the gui Normally just assign as last edited expression. ;  ; bool SuggestExpression (const std::string &expr);  Suggest to use expression in the gui Normally just assign as last edited expression. ;  ; bool SuggestLeaf (const TLeaf *leaf);  Suggest to use leaf in the gui Normally just assign as last edited expression. ;  ; void Update ();  Update tree viewer in all web displays. ;  . Static Public Member Functions; static RTreeViewer * NewViewer (TTree *);  Create new viewer Method used for plugin. ;  . Private Member Functions; void AddBranches (TObjArray *branches);  Add branches to config. ;  ; std::string FormatItemName (const std::string &name);  Format item name used in draw expression. ;  ; void InvokeTreeDraw ();  Invoke tree drawing. ;  ; void SendCfg (unsigned connid);  Send data for initialize viewer. ;  ; void SendProgress (Double_t nevent=0.);  Send progress to the client. ;  ; void UpdateConfig ();  Update RConfig data. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  receive data from client ;  ; void WebWindowConnect (unsigned connid);  react on new connection ;  . Private Attributes; PerformDrawCallback_t fCallback;  ! callback invoked when tree draw performed ;  ; RConfig fCfg;  ! configuration, exchanged between client and server ;  ; std::string fLastSendProgress;  ! last send progress to client ;  ; bool fShowHierarchy {false};  ! show TTree hierarchy ;  ; std::unique_ptr< RTreeDrawInvokeTimer > fTimer;  ! timer to invoke tree draw ;  ; std::string fTitle;  ! title of tree viewer ;  ; ",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html
https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html:2866,Modifiability,config,configuration,2866," Public Member Functions; static RTreeViewer * NewViewer (TTree *);  Create new viewer Method used for plugin. ;  . Private Member Functions; void AddBranches (TObjArray *branches);  Add branches to config. ;  ; std::string FormatItemName (const std::string &name);  Format item name used in draw expression. ;  ; void InvokeTreeDraw ();  Invoke tree drawing. ;  ; void SendCfg (unsigned connid);  Send data for initialize viewer. ;  ; void SendProgress (Double_t nevent=0.);  Send progress to the client. ;  ; void UpdateConfig ();  Update RConfig data. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  receive data from client ;  ; void WebWindowConnect (unsigned connid);  react on new connection ;  . Private Attributes; PerformDrawCallback_t fCallback;  ! callback invoked when tree draw performed ;  ; RConfig fCfg;  ! configuration, exchanged between client and server ;  ; std::string fLastSendProgress;  ! last send progress to client ;  ; bool fShowHierarchy {false};  ! show TTree hierarchy ;  ; std::unique_ptr< RTreeDrawInvokeTimer > fTimer;  ! timer to invoke tree draw ;  ; std::string fTitle;  ! title of tree viewer ;  ; TTree * fTree {nullptr};  ! TTree to show ;  ; std::shared_ptr< ROOT::RWebWindow > fWebWindow;  ! web window ;  . Friends; class RTreeDrawInvokeTimer;  ; class RTreeDrawMonitoring;  . #include <ROOT/RTreeViewer.hxx>; Member Typedef Documentation. ◆ PerformDrawCallback_t. using ROOT::RTreeViewer::PerformDrawCallback_t = std::function<void(const std::string &)>. Definition at line 41 of file RTreeViewer.hxx. Constructor & Destructor Documentation. ◆ RTreeViewer(). RTreeViewer::RTreeViewer ; (; TTree * ; tree = nullptr). constructor ; Definition at line 108 of file RTreeViewer.cxx. ◆ ~RTreeViewer(). RTreeViewer::~RTreeViewer ; (; ). virtual . destructor ; Definition at line 128 of file RTreeViewer.cxx. Member Function Documentation. ◆ AddBranches(). void RTreeViewer::AddBranches ; (; TObjArray * ; branches). private . Add branches ",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html
https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html:4022,Modifiability,config,config,4022,;  ! show TTree hierarchy ;  ; std::unique_ptr< RTreeDrawInvokeTimer > fTimer;  ! timer to invoke tree draw ;  ; std::string fTitle;  ! title of tree viewer ;  ; TTree * fTree {nullptr};  ! TTree to show ;  ; std::shared_ptr< ROOT::RWebWindow > fWebWindow;  ! web window ;  . Friends; class RTreeDrawInvokeTimer;  ; class RTreeDrawMonitoring;  . #include <ROOT/RTreeViewer.hxx>; Member Typedef Documentation. ◆ PerformDrawCallback_t. using ROOT::RTreeViewer::PerformDrawCallback_t = std::function<void(const std::string &)>. Definition at line 41 of file RTreeViewer.hxx. Constructor & Destructor Documentation. ◆ RTreeViewer(). RTreeViewer::RTreeViewer ; (; TTree * ; tree = nullptr). constructor ; Definition at line 108 of file RTreeViewer.cxx. ◆ ~RTreeViewer(). RTreeViewer::~RTreeViewer ; (; ). virtual . destructor ; Definition at line 128 of file RTreeViewer.cxx. Member Function Documentation. ◆ AddBranches(). void RTreeViewer::AddBranches ; (; TObjArray * ; branches). private . Add branches to config. ; Definition at line 321 of file RTreeViewer.cxx. ◆ FormatItemName(). std::string RTreeViewer::FormatItemName ; (; const std::string & ; name). private . Format item name used in draw expression. ; Definition at line 302 of file RTreeViewer.cxx. ◆ GetShowHierarchy(). bool ROOT::RTreeViewer::GetShowHierarchy ; (; ); const. inline . Returns default hierarchy browser visibility. ; Definition at line 79 of file RTreeViewer.hxx. ◆ GetTitle(). const std::string & ROOT::RTreeViewer::GetTitle ; (; ); const. inline . Definition at line 59 of file RTreeViewer.hxx. ◆ GetWindowAddr(). std::string RTreeViewer::GetWindowAddr ; (; ); const. Return address of web window used for tree viewer. ; Definition at line 232 of file RTreeViewer.cxx. ◆ GetWindowUrl(). std::string RTreeViewer::GetWindowUrl ; (; bool ; remote). Return URL of web window used for tree viewer See ROOT::RWebWindow::GetUrl docu for more details. ; Definition at line 241 of file RTreeViewer.cxx. ◆ InvokeTreeDraw(). void RT,MatchSource.WIKI,doc/v632/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html
https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html:5246,Modifiability,plugin,plugin,5246,"nition at line 302 of file RTreeViewer.cxx. ◆ GetShowHierarchy(). bool ROOT::RTreeViewer::GetShowHierarchy ; (; ); const. inline . Returns default hierarchy browser visibility. ; Definition at line 79 of file RTreeViewer.hxx. ◆ GetTitle(). const std::string & ROOT::RTreeViewer::GetTitle ; (; ); const. inline . Definition at line 59 of file RTreeViewer.hxx. ◆ GetWindowAddr(). std::string RTreeViewer::GetWindowAddr ; (; ); const. Return address of web window used for tree viewer. ; Definition at line 232 of file RTreeViewer.cxx. ◆ GetWindowUrl(). std::string RTreeViewer::GetWindowUrl ; (; bool ; remote). Return URL of web window used for tree viewer See ROOT::RWebWindow::GetUrl docu for more details. ; Definition at line 241 of file RTreeViewer.cxx. ◆ InvokeTreeDraw(). void RTreeViewer::InvokeTreeDraw ; (; ). private . Invoke tree drawing. ; Definition at line 393 of file RTreeViewer.cxx. ◆ NewViewer(). RTreeViewer * RTreeViewer::NewViewer ; (; TTree * ; t). static . Create new viewer Method used for plugin. ; Definition at line 495 of file RTreeViewer.cxx. ◆ SendCfg(). void RTreeViewer::SendCfg ; (; unsigned ; connid). private . Send data for initialize viewer. ; Definition at line 257 of file RTreeViewer.cxx. ◆ SendProgress(). void RTreeViewer::SendProgress ; (; Double_t ; nevent = 0.). private . Send progress to the client. ; Definition at line 463 of file RTreeViewer.cxx. ◆ SetCallback(). void ROOT::RTreeViewer::SetCallback ; (; PerformDrawCallback_t ; func). inline . Definition at line 73 of file RTreeViewer.hxx. ◆ SetShowHierarchy(). void ROOT::RTreeViewer::SetShowHierarchy ; (; bool ; on = true). inline . Configures default hierarchy browser visibility, only has effect before showing web window. ; Definition at line 76 of file RTreeViewer.hxx. ◆ SetTitle(). void ROOT::RTreeViewer::SetTitle ; (; const std::string & ; title). inline . Definition at line 58 of file RTreeViewer.hxx. ◆ SetTree(). void RTreeViewer::SetTree ; (; TTree * ; tree). assign new TTree to th",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html
https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html:8506,Modifiability,config,configuration,8506,"date RConfig data. ; Definition at line 372 of file RTreeViewer.cxx. ◆ WebWindowCallback(). void RTreeViewer::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). private . receive data from client ; Definition at line 276 of file RTreeViewer.cxx. ◆ WebWindowConnect(). void RTreeViewer::WebWindowConnect ; (; unsigned ; connid). private . react on new connection ; Definition at line 268 of file RTreeViewer.cxx. Friends And Related Symbol Documentation. ◆ RTreeDrawInvokeTimer. friend class RTreeDrawInvokeTimer. friend . Definition at line 37 of file RTreeViewer.hxx. ◆ RTreeDrawMonitoring. friend class RTreeDrawMonitoring. friend . Definition at line 36 of file RTreeViewer.hxx. Member Data Documentation. ◆ fCallback. PerformDrawCallback_t ROOT::RTreeViewer::fCallback. private . ! callback invoked when tree draw performed ; Definition at line 94 of file RTreeViewer.hxx. ◆ fCfg. RConfig ROOT::RTreeViewer::fCfg. private . ! configuration, exchanged between client and server ; Definition at line 93 of file RTreeViewer.hxx. ◆ fLastSendProgress. std::string ROOT::RTreeViewer::fLastSendProgress. private . ! last send progress to client ; Definition at line 95 of file RTreeViewer.hxx. ◆ fShowHierarchy. bool ROOT::RTreeViewer::fShowHierarchy {false}. private . ! show TTree hierarchy ; Definition at line 92 of file RTreeViewer.hxx. ◆ fTimer. std::unique_ptr<RTreeDrawInvokeTimer> ROOT::RTreeViewer::fTimer. private . ! timer to invoke tree draw ; Definition at line 96 of file RTreeViewer.hxx. ◆ fTitle. std::string ROOT::RTreeViewer::fTitle. private . ! title of tree viewer ; Definition at line 90 of file RTreeViewer.hxx. ◆ fTree. TTree* ROOT::RTreeViewer::fTree {nullptr}. private . ! TTree to show ; Definition at line 89 of file RTreeViewer.hxx. ◆ fWebWindow. std::shared_ptr<ROOT::RWebWindow> ROOT::RTreeViewer::fWebWindow. private . ! web window ; Definition at line 91 of file RTreeViewer.hxx. Libraries for ROOT::RTreeViewer:. [legend]; The documentation for ",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html
https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html:2834,Performance,perform,performed,2834," Public Member Functions; static RTreeViewer * NewViewer (TTree *);  Create new viewer Method used for plugin. ;  . Private Member Functions; void AddBranches (TObjArray *branches);  Add branches to config. ;  ; std::string FormatItemName (const std::string &name);  Format item name used in draw expression. ;  ; void InvokeTreeDraw ();  Invoke tree drawing. ;  ; void SendCfg (unsigned connid);  Send data for initialize viewer. ;  ; void SendProgress (Double_t nevent=0.);  Send progress to the client. ;  ; void UpdateConfig ();  Update RConfig data. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  receive data from client ;  ; void WebWindowConnect (unsigned connid);  react on new connection ;  . Private Attributes; PerformDrawCallback_t fCallback;  ! callback invoked when tree draw performed ;  ; RConfig fCfg;  ! configuration, exchanged between client and server ;  ; std::string fLastSendProgress;  ! last send progress to client ;  ; bool fShowHierarchy {false};  ! show TTree hierarchy ;  ; std::unique_ptr< RTreeDrawInvokeTimer > fTimer;  ! timer to invoke tree draw ;  ; std::string fTitle;  ! title of tree viewer ;  ; TTree * fTree {nullptr};  ! TTree to show ;  ; std::shared_ptr< ROOT::RWebWindow > fWebWindow;  ! web window ;  . Friends; class RTreeDrawInvokeTimer;  ; class RTreeDrawMonitoring;  . #include <ROOT/RTreeViewer.hxx>; Member Typedef Documentation. ◆ PerformDrawCallback_t. using ROOT::RTreeViewer::PerformDrawCallback_t = std::function<void(const std::string &)>. Definition at line 41 of file RTreeViewer.hxx. Constructor & Destructor Documentation. ◆ RTreeViewer(). RTreeViewer::RTreeViewer ; (; TTree * ; tree = nullptr). constructor ; Definition at line 108 of file RTreeViewer.cxx. ◆ ~RTreeViewer(). RTreeViewer::~RTreeViewer ; (; ). virtual . destructor ; Definition at line 128 of file RTreeViewer.cxx. Member Function Documentation. ◆ AddBranches(). void RTreeViewer::AddBranches ; (; TObjArray * ; branches). private . Add branches ",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html
https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html:8394,Performance,perform,performed,8394,"e viewer in all web displays. ; Definition at line 249 of file RTreeViewer.cxx. ◆ UpdateConfig(). void RTreeViewer::UpdateConfig ; (; ). private . Update RConfig data. ; Definition at line 372 of file RTreeViewer.cxx. ◆ WebWindowCallback(). void RTreeViewer::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). private . receive data from client ; Definition at line 276 of file RTreeViewer.cxx. ◆ WebWindowConnect(). void RTreeViewer::WebWindowConnect ; (; unsigned ; connid). private . react on new connection ; Definition at line 268 of file RTreeViewer.cxx. Friends And Related Symbol Documentation. ◆ RTreeDrawInvokeTimer. friend class RTreeDrawInvokeTimer. friend . Definition at line 37 of file RTreeViewer.hxx. ◆ RTreeDrawMonitoring. friend class RTreeDrawMonitoring. friend . Definition at line 36 of file RTreeViewer.hxx. Member Data Documentation. ◆ fCallback. PerformDrawCallback_t ROOT::RTreeViewer::fCallback. private . ! callback invoked when tree draw performed ; Definition at line 94 of file RTreeViewer.hxx. ◆ fCfg. RConfig ROOT::RTreeViewer::fCfg. private . ! configuration, exchanged between client and server ; Definition at line 93 of file RTreeViewer.hxx. ◆ fLastSendProgress. std::string ROOT::RTreeViewer::fLastSendProgress. private . ! last send progress to client ; Definition at line 95 of file RTreeViewer.hxx. ◆ fShowHierarchy. bool ROOT::RTreeViewer::fShowHierarchy {false}. private . ! show TTree hierarchy ; Definition at line 92 of file RTreeViewer.hxx. ◆ fTimer. std::unique_ptr<RTreeDrawInvokeTimer> ROOT::RTreeViewer::fTimer. private . ! timer to invoke tree draw ; Definition at line 96 of file RTreeViewer.hxx. ◆ fTitle. std::string ROOT::RTreeViewer::fTitle. private . ! title of tree viewer ; Definition at line 90 of file RTreeViewer.hxx. ◆ fTree. TTree* ROOT::RTreeViewer::fTree {nullptr}. private . ! TTree to show ; Definition at line 89 of file RTreeViewer.hxx. ◆ fWebWindow. std::shared_ptr<ROOT::RWebWindow> ROOT::RTreeViewer::fW",MatchSource.WIKI,doc/v632/classROOT_1_1RTreeViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html
https://root.cern/doc/v632/classROOT_1_1RWebBrowserHandle.html:816,Modifiability,inherit,inherited,816,". ROOT: ROOT::RWebBrowserHandle Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Attributes |; List of all members ; ROOT::RWebBrowserHandle Class Reference. ; Specialized handle to hold information about running browser process Used to correctly cleanup all processes and temporary directories. ; Definition at line 103 of file RWebDisplayHandle.cxx. Public Member Functions;  RWebBrowserHandle (const std::string &url, const std::string &tmpdir, const std::string &tmpfile, browser_process_id pid);  ;  RWebBrowserHandle (const std::string &url, const std::string &tmpdir, const std::string &tmpfile, const std::string &dump);  ;  ~RWebBrowserHandle () override;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Private Types; typedef pid_t browser_process_id;  . Private Attributes; bool fHasPid {false};  ; browser_process_id fPid;  ; std::string fTmpDir;  temporary directory to delete at the end ;  ; std::string fTmpFile;  temporary file to remove ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool Disp",MatchSource.WIKI,doc/v632/classROOT_1_1RWebBrowserHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebBrowserHandle.html
https://root.cern/doc/v632/classROOT_1_1RWebBrowserHandle.html:1597,Modifiability,inherit,inherited,1597,"t std::string &tmpfile, const std::string &dump);  ;  ~RWebBrowserHandle () override;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Private Types; typedef pid_t browser_process_id;  . Private Attributes; bool fHasPid {false};  ; browser_process_id fPid;  ; std::string fTmpDir;  temporary directory to delete at the end ;  ; std::string fTmpFile;  temporary file to remove ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) usi",MatchSource.WIKI,doc/v632/classROOT_1_1RWebBrowserHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebBrowserHandle.html
https://root.cern/doc/v632/classROOT_1_1RWebBrowserHandle.html:1814,Modifiability,config,configured,1814,"t std::string &tmpfile, const std::string &dump);  ;  ~RWebBrowserHandle () override;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Private Types; typedef pid_t browser_process_id;  . Private Attributes; bool fHasPid {false};  ; browser_process_id fPid;  ; std::string fTmpDir;  temporary directory to delete at the end ;  ; std::string fTmpFile;  temporary file to remove ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) usi",MatchSource.WIKI,doc/v632/classROOT_1_1RWebBrowserHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebBrowserHandle.html
https://root.cern/doc/v632/classROOT_1_1RWebBrowserHandle.html:2059,Modifiability,config,configured,2059,"td::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Private Types; typedef pid_t browser_process_id;  . Private Attributes; bool fHasPid {false};  ; browser_process_id fPid;  ; std::string fTmpDir;  temporary directory to delete at the end ;  ; std::string fTmpFile;  temporary file to remove ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; sta",MatchSource.WIKI,doc/v632/classROOT_1_1RWebBrowserHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebBrowserHandle.html
https://root.cern/doc/v632/classROOT_1_1RWebBrowserHandle.html:2858,Modifiability,inherit,inherited,2858," Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RWebBrowserHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ browser_process_id. typedef pid_t ROOT::RWebBrowserHandle::browser_process_id. private . Definition at line 108 of file RWebDisplayHandle.cxx. Constructor & Destructor Documentation. ◆ RWebBrowserHandle() [1/2]. ROOT::RWebBrowserHandle::RWebBrowserHandle ; (; const std::string & ; url, . const std::string & ; tmpdir, . const std::string & ; tmpfile, . const std::string & ; dump . ). inline . Definitio",MatchSource.WIKI,doc/v632/classROOT_1_1RWebBrowserHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebBrowserHandle.html
https://root.cern/doc/v632/classROOT_1_1RWebBrowserHandle.html:2970,Modifiability,config,configured,2970," Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RWebBrowserHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ browser_process_id. typedef pid_t ROOT::RWebBrowserHandle::browser_process_id. private . Definition at line 108 of file RWebDisplayHandle.cxx. Constructor & Destructor Documentation. ◆ RWebBrowserHandle() [1/2]. ROOT::RWebBrowserHandle::RWebBrowserHandle ; (; const std::string & ; url, . const std::string & ; tmpdir, . const std::string & ; tmpfile, . const std::string & ; dump . ). inline . Definitio",MatchSource.WIKI,doc/v632/classROOT_1_1RWebBrowserHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebBrowserHandle.html
https://root.cern/doc/v632/classROOT_1_1RWebBrowserHandle.html:1843,Testability,test,test,1843,"t std::string &tmpfile, const std::string &dump);  ;  ~RWebBrowserHandle () override;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Private Types; typedef pid_t browser_process_id;  . Private Attributes; bool fHasPid {false};  ; browser_process_id fPid;  ; std::string fTmpDir;  temporary directory to delete at the end ;  ; std::string fTmpFile;  temporary file to remove ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) usi",MatchSource.WIKI,doc/v632/classROOT_1_1RWebBrowserHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebBrowserHandle.html
https://root.cern/doc/v632/classROOT_1_1RWebBrowserImp.html:1099,Modifiability,inherit,inherited,1099,"atic Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::RWebBrowserImp Class Reference. . Definition at line 22 of file RWebBrowserImp.hxx. Public Member Functions;  RWebBrowserImp (TBrowser *b, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with x,y, width and height parameters. ;  ;  RWebBrowserImp (TBrowser *b, const char *title, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with width and height parameters. ;  ;  RWebBrowserImp (TBrowser *b=nullptr);  Default constructor. ;  ; virtual ~RWebBrowserImp ();  Constructor with width and height parameters. ;  ; void BrowseObj (TObject *) final;  Browse specified object. ;  ; void Iconify () final;  Iconify browser. ;  ; void Refresh (Bool_t=kFALSE) final;  Refresh browser. ;  ; void Show () final;  Show browser. ;  ;  Public Member Functions inherited from TBrowserImp;  TBrowserImp (TBrowser *b, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with browser x, y, width and height. ;  ;  TBrowserImp (TBrowser *b, const char *title, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with browser width and height. ;  ;  TBrowserImp (TBrowser *b=nullptr);  Default constructor. ;  ; virtual ~TBrowserImp ()=default;  ; virtual void Add (TObject *, const char *, Int_t);  ; virtual void AddCheckBox (TObject *, Bool_t=kFALSE);  ; TBrowser * Browser () const;  ; virtual void CheckObjectItem (TObject *, Bool_t=kFALSE);  ; virtual void CloseTabs ();  ; virtual Longptr_t ExecPlugin (const char *, const char *, const char *, Int_t, Int_t);  ; virtual void ExecuteDefaultAction (TObject *);  ; virtual TBrowser * GetBrowser () const;  ; virtual Option_t * GetDrawOption () const;  ; virtual TGMainFrame * GetMainFrame () const;  ; virtual TClass * IsA () const;  ; virtual void RecursiveRemove (TObject *);  ; virtual void RemoveCheckBox (TObject *);  ; virtual vo",MatchSource.WIKI,doc/v632/classROOT_1_1RWebBrowserImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebBrowserImp.html
https://root.cern/doc/v632/classROOT_1_1RWebBrowserImp.html:2714,Modifiability,plugin,plugin,2714,"x (TObject *, Bool_t=kFALSE);  ; TBrowser * Browser () const;  ; virtual void CheckObjectItem (TObject *, Bool_t=kFALSE);  ; virtual void CloseTabs ();  ; virtual Longptr_t ExecPlugin (const char *, const char *, const char *, Int_t, Int_t);  ; virtual void ExecuteDefaultAction (TObject *);  ; virtual TBrowser * GetBrowser () const;  ; virtual Option_t * GetDrawOption () const;  ; virtual TGMainFrame * GetMainFrame () const;  ; virtual TClass * IsA () const;  ; virtual void RecursiveRemove (TObject *);  ; virtual void RemoveCheckBox (TObject *);  ; virtual void SetBrowser (TBrowser *b);  ; virtual void SetDrawOption (Option_t *="""");  ; virtual void SetStatusText (const char *, Int_t);  ; virtual void StartEmbedding (Int_t, Int_t);  ; virtual void StopEmbedding (const char *);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TBrowserImp * NewBrowser (TBrowser *b, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Factory method to create RWebBrowserImp via plugin. ;  ; static TBrowserImp * NewBrowser (TBrowser *b=nullptr, const char *title=""ROOT Browser"", UInt_t width=800, UInt_t height=500, Option_t *opt="""");  Factory method to create RWebBrowserImp via plugin. ;  ;  Static Public Member Functions inherited from TBrowserImp; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; void ShowWarning ();  Show warning that RBrowser will be shown. ;  . Private Attributes; Int_t fHeight {0};  window coordinates ;  ; std::shared_ptr< RBrowser > fWebBrowser;  actual browser used ;  ; Int_t fWidth {0};  ; Int_t fX {-1};  ; Int_t fY {-1};  . Additional Inherited Members;  Protected Member Functions inherited from TBrowserImp;  TBrowserImp (const TBrowserImp &)=delete;  ; TBrowserImp & operator= (const TBrowserImp &br)=delete",MatchSource.WIKI,doc/v632/classROOT_1_1RWebBrowserImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebBrowserImp.html
https://root.cern/doc/v632/classROOT_1_1RWebBrowserImp.html:2916,Modifiability,plugin,plugin,2916," *, const char *, Int_t, Int_t);  ; virtual void ExecuteDefaultAction (TObject *);  ; virtual TBrowser * GetBrowser () const;  ; virtual Option_t * GetDrawOption () const;  ; virtual TGMainFrame * GetMainFrame () const;  ; virtual TClass * IsA () const;  ; virtual void RecursiveRemove (TObject *);  ; virtual void RemoveCheckBox (TObject *);  ; virtual void SetBrowser (TBrowser *b);  ; virtual void SetDrawOption (Option_t *="""");  ; virtual void SetStatusText (const char *, Int_t);  ; virtual void StartEmbedding (Int_t, Int_t);  ; virtual void StopEmbedding (const char *);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TBrowserImp * NewBrowser (TBrowser *b, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Factory method to create RWebBrowserImp via plugin. ;  ; static TBrowserImp * NewBrowser (TBrowser *b=nullptr, const char *title=""ROOT Browser"", UInt_t width=800, UInt_t height=500, Option_t *opt="""");  Factory method to create RWebBrowserImp via plugin. ;  ;  Static Public Member Functions inherited from TBrowserImp; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; void ShowWarning ();  Show warning that RBrowser will be shown. ;  . Private Attributes; Int_t fHeight {0};  window coordinates ;  ; std::shared_ptr< RBrowser > fWebBrowser;  actual browser used ;  ; Int_t fWidth {0};  ; Int_t fX {-1};  ; Int_t fY {-1};  . Additional Inherited Members;  Protected Member Functions inherited from TBrowserImp;  TBrowserImp (const TBrowserImp &)=delete;  ; TBrowserImp & operator= (const TBrowserImp &br)=delete;  ;  Protected Attributes inherited from TBrowserImp; TBrowser * fBrowser {nullptr};  TBrowser associated with this implementation. ;  ; Bool_t fShowCycles {kFALSE};  Show object cycle numbers in browser. ;  ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebBrowserImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebBrowserImp.html
https://root.cern/doc/v632/classROOT_1_1RWebBrowserImp.html:2961,Modifiability,inherit,inherited,2961,") const;  ; virtual TClass * IsA () const;  ; virtual void RecursiveRemove (TObject *);  ; virtual void RemoveCheckBox (TObject *);  ; virtual void SetBrowser (TBrowser *b);  ; virtual void SetDrawOption (Option_t *="""");  ; virtual void SetStatusText (const char *, Int_t);  ; virtual void StartEmbedding (Int_t, Int_t);  ; virtual void StopEmbedding (const char *);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TBrowserImp * NewBrowser (TBrowser *b, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Factory method to create RWebBrowserImp via plugin. ;  ; static TBrowserImp * NewBrowser (TBrowser *b=nullptr, const char *title=""ROOT Browser"", UInt_t width=800, UInt_t height=500, Option_t *opt="""");  Factory method to create RWebBrowserImp via plugin. ;  ;  Static Public Member Functions inherited from TBrowserImp; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; void ShowWarning ();  Show warning that RBrowser will be shown. ;  . Private Attributes; Int_t fHeight {0};  window coordinates ;  ; std::shared_ptr< RBrowser > fWebBrowser;  actual browser used ;  ; Int_t fWidth {0};  ; Int_t fX {-1};  ; Int_t fY {-1};  . Additional Inherited Members;  Protected Member Functions inherited from TBrowserImp;  TBrowserImp (const TBrowserImp &)=delete;  ; TBrowserImp & operator= (const TBrowserImp &br)=delete;  ;  Protected Attributes inherited from TBrowserImp; TBrowser * fBrowser {nullptr};  TBrowser associated with this implementation. ;  ; Bool_t fShowCycles {kFALSE};  Show object cycle numbers in browser. ;  . #include <ROOT/RWebBrowserImp.hxx>. Inheritance diagram for ROOT::RWebBrowserImp:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Docum",MatchSource.WIKI,doc/v632/classROOT_1_1RWebBrowserImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebBrowserImp.html
https://root.cern/doc/v632/classROOT_1_1RWebBrowserImp.html:3485,Modifiability,inherit,inherited,3485,"onst char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Factory method to create RWebBrowserImp via plugin. ;  ; static TBrowserImp * NewBrowser (TBrowser *b=nullptr, const char *title=""ROOT Browser"", UInt_t width=800, UInt_t height=500, Option_t *opt="""");  Factory method to create RWebBrowserImp via plugin. ;  ;  Static Public Member Functions inherited from TBrowserImp; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; void ShowWarning ();  Show warning that RBrowser will be shown. ;  . Private Attributes; Int_t fHeight {0};  window coordinates ;  ; std::shared_ptr< RBrowser > fWebBrowser;  actual browser used ;  ; Int_t fWidth {0};  ; Int_t fX {-1};  ; Int_t fY {-1};  . Additional Inherited Members;  Protected Member Functions inherited from TBrowserImp;  TBrowserImp (const TBrowserImp &)=delete;  ; TBrowserImp & operator= (const TBrowserImp &br)=delete;  ;  Protected Attributes inherited from TBrowserImp; TBrowser * fBrowser {nullptr};  TBrowser associated with this implementation. ;  ; Bool_t fShowCycles {kFALSE};  Show object cycle numbers in browser. ;  . #include <ROOT/RWebBrowserImp.hxx>. Inheritance diagram for ROOT::RWebBrowserImp:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RWebBrowserImp() [1/3]. RWebBrowserImp::RWebBrowserImp ; (; TBrowser * ; b = nullptr). Default constructor. ; Definition at line 25 of file RWebBrowserImp.cxx. ◆ RWebBrowserImp() [2/3]. RWebBrowserImp::RWebBrowserImp ; (; TBrowser * ; b, . const char * ; title, . UInt_t ; width, . UInt_t ; height, . Option_t * ; opt = """" . ). Constructor with width and height parameters. ; Definition at line 36 of file RWebBrowserImp.cxx. ◆ RWebBrowserImp() [3/3]. RWebBrowserImp::RWebBrowserImp ; (; TBrowser * ; b, . const char * ; title, . Int_t ; x, ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebBrowserImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebBrowserImp.html
https://root.cern/doc/v632/classROOT_1_1RWebBrowserImp.html:3640,Modifiability,inherit,inherited,3640,"onst char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Factory method to create RWebBrowserImp via plugin. ;  ; static TBrowserImp * NewBrowser (TBrowser *b=nullptr, const char *title=""ROOT Browser"", UInt_t width=800, UInt_t height=500, Option_t *opt="""");  Factory method to create RWebBrowserImp via plugin. ;  ;  Static Public Member Functions inherited from TBrowserImp; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; void ShowWarning ();  Show warning that RBrowser will be shown. ;  . Private Attributes; Int_t fHeight {0};  window coordinates ;  ; std::shared_ptr< RBrowser > fWebBrowser;  actual browser used ;  ; Int_t fWidth {0};  ; Int_t fX {-1};  ; Int_t fY {-1};  . Additional Inherited Members;  Protected Member Functions inherited from TBrowserImp;  TBrowserImp (const TBrowserImp &)=delete;  ; TBrowserImp & operator= (const TBrowserImp &br)=delete;  ;  Protected Attributes inherited from TBrowserImp; TBrowser * fBrowser {nullptr};  TBrowser associated with this implementation. ;  ; Bool_t fShowCycles {kFALSE};  Show object cycle numbers in browser. ;  . #include <ROOT/RWebBrowserImp.hxx>. Inheritance diagram for ROOT::RWebBrowserImp:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RWebBrowserImp() [1/3]. RWebBrowserImp::RWebBrowserImp ; (; TBrowser * ; b = nullptr). Default constructor. ; Definition at line 25 of file RWebBrowserImp.cxx. ◆ RWebBrowserImp() [2/3]. RWebBrowserImp::RWebBrowserImp ; (; TBrowser * ; b, . const char * ; title, . UInt_t ; width, . UInt_t ; height, . Option_t * ; opt = """" . ). Constructor with width and height parameters. ; Definition at line 36 of file RWebBrowserImp.cxx. ◆ RWebBrowserImp() [3/3]. RWebBrowserImp::RWebBrowserImp ; (; TBrowser * ; b, . const char * ; title, . Int_t ; x, ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebBrowserImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebBrowserImp.html
https://root.cern/doc/v632/classROOT_1_1RWebBrowserImp.html:5583,Modifiability,plugin,plugin,5583,"; title, . Int_t ; x, . Int_t ; y, . UInt_t ; width, . UInt_t ; height, . Option_t * ; opt = """" . ). Constructor with x,y, width and height parameters. ; Definition at line 49 of file RWebBrowserImp.cxx. ◆ ~RWebBrowserImp(). RWebBrowserImp::~RWebBrowserImp ; (; ). virtual . Constructor with width and height parameters. ; Definition at line 64 of file RWebBrowserImp.cxx. Member Function Documentation. ◆ BrowseObj(). void RWebBrowserImp::BrowseObj ; (; TObject * ; obj). finalvirtual . Browse specified object. ; Reimplemented from TBrowserImp.; Definition at line 110 of file RWebBrowserImp.cxx. ◆ Iconify(). void RWebBrowserImp::Iconify ; (; ). finalvirtual . Iconify browser. ; Reimplemented from TBrowserImp.; Definition at line 87 of file RWebBrowserImp.cxx. ◆ NewBrowser() [1/2]. TBrowserImp * RWebBrowserImp::NewBrowser ; (; TBrowser * ; b, . const char * ; title, . Int_t ; x, . Int_t ; y, . UInt_t ; width, . UInt_t ; height, . Option_t * ; opt = """" . ). static . Factory method to create RWebBrowserImp via plugin. ; Definition at line 129 of file RWebBrowserImp.cxx. ◆ NewBrowser() [2/2]. TBrowserImp * RWebBrowserImp::NewBrowser ; (; TBrowser * ; b = nullptr, . const char * ; title = ""ROOT Browser"", . UInt_t ; width = 800, . UInt_t ; height = 500, . Option_t * ; opt = """" . ). static . Factory method to create RWebBrowserImp via plugin. ; Definition at line 121 of file RWebBrowserImp.cxx. ◆ Refresh(). void RWebBrowserImp::Refresh ; (; Bool_t ; = kFALSE). finalvirtual . Refresh browser. ; Reimplemented from TBrowserImp.; Definition at line 94 of file RWebBrowserImp.cxx. ◆ Show(). void RWebBrowserImp::Show ; (; ). finalvirtual . Show browser. ; Reimplemented from TBrowserImp.; Definition at line 101 of file RWebBrowserImp.cxx. ◆ ShowWarning(). void RWebBrowserImp::ShowWarning ; (; ). private . Show warning that RBrowser will be shown. ; Definition at line 71 of file RWebBrowserImp.cxx. Member Data Documentation. ◆ fHeight. Int_t ROOT::RWebBrowserImp::fHeight {0}. private .",MatchSource.WIKI,doc/v632/classROOT_1_1RWebBrowserImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebBrowserImp.html
https://root.cern/doc/v632/classROOT_1_1RWebBrowserImp.html:5910,Modifiability,plugin,plugin,5910,"nition at line 64 of file RWebBrowserImp.cxx. Member Function Documentation. ◆ BrowseObj(). void RWebBrowserImp::BrowseObj ; (; TObject * ; obj). finalvirtual . Browse specified object. ; Reimplemented from TBrowserImp.; Definition at line 110 of file RWebBrowserImp.cxx. ◆ Iconify(). void RWebBrowserImp::Iconify ; (; ). finalvirtual . Iconify browser. ; Reimplemented from TBrowserImp.; Definition at line 87 of file RWebBrowserImp.cxx. ◆ NewBrowser() [1/2]. TBrowserImp * RWebBrowserImp::NewBrowser ; (; TBrowser * ; b, . const char * ; title, . Int_t ; x, . Int_t ; y, . UInt_t ; width, . UInt_t ; height, . Option_t * ; opt = """" . ). static . Factory method to create RWebBrowserImp via plugin. ; Definition at line 129 of file RWebBrowserImp.cxx. ◆ NewBrowser() [2/2]. TBrowserImp * RWebBrowserImp::NewBrowser ; (; TBrowser * ; b = nullptr, . const char * ; title = ""ROOT Browser"", . UInt_t ; width = 800, . UInt_t ; height = 500, . Option_t * ; opt = """" . ). static . Factory method to create RWebBrowserImp via plugin. ; Definition at line 121 of file RWebBrowserImp.cxx. ◆ Refresh(). void RWebBrowserImp::Refresh ; (; Bool_t ; = kFALSE). finalvirtual . Refresh browser. ; Reimplemented from TBrowserImp.; Definition at line 94 of file RWebBrowserImp.cxx. ◆ Show(). void RWebBrowserImp::Show ; (; ). finalvirtual . Show browser. ; Reimplemented from TBrowserImp.; Definition at line 101 of file RWebBrowserImp.cxx. ◆ ShowWarning(). void RWebBrowserImp::ShowWarning ; (; ). private . Show warning that RBrowser will be shown. ; Definition at line 71 of file RWebBrowserImp.cxx. Member Data Documentation. ◆ fHeight. Int_t ROOT::RWebBrowserImp::fHeight {0}. private . window coordinates ; Definition at line 25 of file RWebBrowserImp.hxx. ◆ fWebBrowser. std::shared_ptr<RBrowser> ROOT::RWebBrowserImp::fWebBrowser. private . actual browser used ; Definition at line 24 of file RWebBrowserImp.hxx. ◆ fWidth. Int_t ROOT::RWebBrowserImp::fWidth {0}. private . Definition at line 25 of file RWebBro",MatchSource.WIKI,doc/v632/classROOT_1_1RWebBrowserImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebBrowserImp.html
https://root.cern/doc/v632/classROOT_1_1RWebDisplayArgs.html:1327,Modifiability,config,configured,1327,"OOT::RWebDisplayArgs Class ReferenceWeb Display. ; Holds different arguments for starting browser with RWebDisplayHandle::Display() method. ; Definition at line 33 of file RWebDisplayArgs.hxx. Public Types; enum  EBrowserKind { ;   kChrome; , kEdge; , kFirefox; , kNative; , ;   kCEF; , kQt5; , kQt6; , kLocal; , ;   kDefault; , kServer; , kEmbedded; , kOff; , ;   kOn; , kCustom. };  . Public Member Functions;  RWebDisplayArgs ();  Default constructor. ;  ;  RWebDisplayArgs (const char *browser);  Constructor. ;  ;  RWebDisplayArgs (const std::string &browser);  Constructor. ;  ;  RWebDisplayArgs (int width, int height, int x=-1, int y=-1, const std::string &browser="""");  Constructor. ;  ;  RWebDisplayArgs (std::shared_ptr< RWebWindow > master, unsigned conndid=0, int channel=-1);  Constructor. ;  ; virtual ~RWebDisplayArgs ();  Destructor. ;  ; void AppendUrlOpt (const std::string &opt);  append extra url options, add ""&"" as separator if required ;  ; EBrowserKind GetBrowserKind () const;  returns configured browser kind, see EBrowserKind for supported values ;  ; std::string GetBrowserName () const;  Returns configured browser name. ;  ; std::string GetCustomExec () const;  returns custom executable to start web browser ;  ; void * GetDriverData () const;  [internal] returns web-driver data, used to start window ;  ; const std::string & GetExtraArgs () const;  get extra command line arguments for starting web browser command ;  ; std::string GetFullUrl () const;  returns window url with append options ;  ; int GetHeight () const;  returns preferable web window height ;  ; THttpServer * GetHttpServer () const;  returns http server instance, used for window display ;  ; const std::string & GetPageContent () const;  returns window url ;  ; const std::string & GetRedirectOutput () const;  get file name to which web browser output should be redirected ;  ; const std::string & GetUrl () const;  returns window url ;  ; const std::string & GetUrlOpt () const;  returns windo",MatchSource.WIKI,doc/v632/classROOT_1_1RWebDisplayArgs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebDisplayArgs.html
https://root.cern/doc/v632/classROOT_1_1RWebDisplayArgs.html:1441,Modifiability,config,configured,1441,"OOT::RWebDisplayArgs Class ReferenceWeb Display. ; Holds different arguments for starting browser with RWebDisplayHandle::Display() method. ; Definition at line 33 of file RWebDisplayArgs.hxx. Public Types; enum  EBrowserKind { ;   kChrome; , kEdge; , kFirefox; , kNative; , ;   kCEF; , kQt5; , kQt6; , kLocal; , ;   kDefault; , kServer; , kEmbedded; , kOff; , ;   kOn; , kCustom. };  . Public Member Functions;  RWebDisplayArgs ();  Default constructor. ;  ;  RWebDisplayArgs (const char *browser);  Constructor. ;  ;  RWebDisplayArgs (const std::string &browser);  Constructor. ;  ;  RWebDisplayArgs (int width, int height, int x=-1, int y=-1, const std::string &browser="""");  Constructor. ;  ;  RWebDisplayArgs (std::shared_ptr< RWebWindow > master, unsigned conndid=0, int channel=-1);  Constructor. ;  ; virtual ~RWebDisplayArgs ();  Destructor. ;  ; void AppendUrlOpt (const std::string &opt);  append extra url options, add ""&"" as separator if required ;  ; EBrowserKind GetBrowserKind () const;  returns configured browser kind, see EBrowserKind for supported values ;  ; std::string GetBrowserName () const;  Returns configured browser name. ;  ; std::string GetCustomExec () const;  returns custom executable to start web browser ;  ; void * GetDriverData () const;  [internal] returns web-driver data, used to start window ;  ; const std::string & GetExtraArgs () const;  get extra command line arguments for starting web browser command ;  ; std::string GetFullUrl () const;  returns window url with append options ;  ; int GetHeight () const;  returns preferable web window height ;  ; THttpServer * GetHttpServer () const;  returns http server instance, used for window display ;  ; const std::string & GetPageContent () const;  returns window url ;  ; const std::string & GetRedirectOutput () const;  get file name to which web browser output should be redirected ;  ; const std::string & GetUrl () const;  returns window url ;  ; const std::string & GetUrlOpt () const;  returns windo",MatchSource.WIKI,doc/v632/classROOT_1_1RWebDisplayArgs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebDisplayArgs.html
https://root.cern/doc/v632/classROOT_1_1RWebDisplayArgs.html:8544,Modifiability,config,configured,8544,"ded Framework - local display with CEF libs. . kQt5 Qt5 QWebEngine libraries - Chromium code packed in qt5. . kQt6 Qt6 QWebEngine libraries - Chromium code packed in qt6. . kLocal either CEF or Qt5 - both runs on local display without real http server . kDefault default system web browser, can not be used in batch mode . kServer indicates that ROOT runs as server and just printouts window URL, browser should be started by the user . kEmbedded window will be embedded into other, no extra browser need to be started . kOff disable web display, do not start any browser . kOn web display enable, first try use embed displays like Qt or CEF, then native browsers and at the end default system browser . kCustom custom web browser, execution string should be provided . Definition at line 38 of file RWebDisplayArgs.hxx. Constructor & Destructor Documentation. ◆ RWebDisplayArgs() [1/5]. RWebDisplayArgs::RWebDisplayArgs ; (; ). Default constructor. ; Browser kind configured from gROOT->GetWebDisplay() ; Definition at line 42 of file RWebDisplayArgs.cxx. ◆ RWebDisplayArgs() [2/5]. RWebDisplayArgs::RWebDisplayArgs ; (; const std::string & ; browser). Constructor. ; Browser kind specified as std::string. See SetBrowserKind method for description of allowed parameters ; Definition at line 52 of file RWebDisplayArgs.cxx. ◆ RWebDisplayArgs() [3/5]. RWebDisplayArgs::RWebDisplayArgs ; (; const char * ; browser). Constructor. ; Browser kind specified as const char *. See SetBrowserKind method for description of allowed parameters ; Definition at line 62 of file RWebDisplayArgs.cxx. ◆ RWebDisplayArgs() [4/5]. RWebDisplayArgs::RWebDisplayArgs ; (; int ; width, . int ; height, . int ; x = -1, . int ; y = -1, . const std::string & ; browser = """" . ). Constructor. ; Let specify window width and height ; Definition at line 71 of file RWebDisplayArgs.cxx. ◆ RWebDisplayArgs() [5/5]. RWebDisplayArgs::RWebDisplayArgs ; (; std::shared_ptr< RWebWindow > ; master, . unsigned ; conndid = 0, . int ; cha",MatchSource.WIKI,doc/v632/classROOT_1_1RWebDisplayArgs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebDisplayArgs.html
https://root.cern/doc/v632/classROOT_1_1RWebDisplayArgs.html:10308,Modifiability,config,configured,10308,"y window width and height ; Definition at line 71 of file RWebDisplayArgs.cxx. ◆ RWebDisplayArgs() [5/5]. RWebDisplayArgs::RWebDisplayArgs ; (; std::shared_ptr< RWebWindow > ; master, . unsigned ; conndid = 0, . int ; channel = -1 . ). Constructor. ; Let specify master window and channel (if reserved already) ; Definition at line 82 of file RWebDisplayArgs.cxx. ◆ ~RWebDisplayArgs(). RWebDisplayArgs::~RWebDisplayArgs ; (; ). virtualdefault . Destructor. ; Must be defined in source code to correctly call RWebWindow destructor . Member Function Documentation. ◆ AppendUrlOpt(). void RWebDisplayArgs::AppendUrlOpt ; (; const std::string & ; opt). append extra url options, add ""&"" as separator if required ; Append string to url options.; Add ""&"" as separator if any options already exists ; Definition at line 287 of file RWebDisplayArgs.cxx. ◆ GetBrowserKind(). EBrowserKind ROOT::RWebDisplayArgs::GetBrowserKind ; (; ); const. inline . returns configured browser kind, see EBrowserKind for supported values ; Definition at line 98 of file RWebDisplayArgs.hxx. ◆ GetBrowserName(). std::string RWebDisplayArgs::GetBrowserName ; (; ); const. Returns configured browser name. ; Definition at line 248 of file RWebDisplayArgs.cxx. ◆ GetCustomExec(). std::string RWebDisplayArgs::GetCustomExec ; (; ); const. returns custom executable to start web browser ; Returns custom executable to start web browser. ; Definition at line 332 of file RWebDisplayArgs.cxx. ◆ GetDriverData(). void * ROOT::RWebDisplayArgs::GetDriverData ; (; ); const. inline . [internal] returns web-driver data, used to start window ; Definition at line 214 of file RWebDisplayArgs.hxx. ◆ GetExtraArgs(). const std::string & ROOT::RWebDisplayArgs::GetExtraArgs ; (; ); const. inline . get extra command line arguments for starting web browser command ; Definition at line 194 of file RWebDisplayArgs.hxx. ◆ GetFullUrl(). std::string RWebDisplayArgs::GetFullUrl ; (; ); const. returns window url with append options ; Returns full ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebDisplayArgs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebDisplayArgs.html
https://root.cern/doc/v632/classROOT_1_1RWebDisplayArgs.html:10511,Modifiability,config,configured,10511,"< RWebWindow > ; master, . unsigned ; conndid = 0, . int ; channel = -1 . ). Constructor. ; Let specify master window and channel (if reserved already) ; Definition at line 82 of file RWebDisplayArgs.cxx. ◆ ~RWebDisplayArgs(). RWebDisplayArgs::~RWebDisplayArgs ; (; ). virtualdefault . Destructor. ; Must be defined in source code to correctly call RWebWindow destructor . Member Function Documentation. ◆ AppendUrlOpt(). void RWebDisplayArgs::AppendUrlOpt ; (; const std::string & ; opt). append extra url options, add ""&"" as separator if required ; Append string to url options.; Add ""&"" as separator if any options already exists ; Definition at line 287 of file RWebDisplayArgs.cxx. ◆ GetBrowserKind(). EBrowserKind ROOT::RWebDisplayArgs::GetBrowserKind ; (; ); const. inline . returns configured browser kind, see EBrowserKind for supported values ; Definition at line 98 of file RWebDisplayArgs.hxx. ◆ GetBrowserName(). std::string RWebDisplayArgs::GetBrowserName ; (; ); const. Returns configured browser name. ; Definition at line 248 of file RWebDisplayArgs.cxx. ◆ GetCustomExec(). std::string RWebDisplayArgs::GetCustomExec ; (; ); const. returns custom executable to start web browser ; Returns custom executable to start web browser. ; Definition at line 332 of file RWebDisplayArgs.cxx. ◆ GetDriverData(). void * ROOT::RWebDisplayArgs::GetDriverData ; (; ); const. inline . [internal] returns web-driver data, used to start window ; Definition at line 214 of file RWebDisplayArgs.hxx. ◆ GetExtraArgs(). const std::string & ROOT::RWebDisplayArgs::GetExtraArgs ; (; ); const. inline . get extra command line arguments for starting web browser command ; Definition at line 194 of file RWebDisplayArgs.hxx. ◆ GetFullUrl(). std::string RWebDisplayArgs::GetFullUrl ; (; ); const. returns window url with append options ; Returns full url, which is combined from URL and extra URL options.; Takes into account ""#"" symbol in url - options are inserted before that symbol ; Definition at line 301 ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebDisplayArgs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebDisplayArgs.html
https://root.cern/doc/v632/classROOT_1_1RWebDisplayHandle.html:1401,Modifiability,config,configured,1401,"ndle Class ReferenceWeb Display. ; Handle of created web-based display Depending from type of web display, holds handle of started browser process or other display-specific information to correctly stop and cleanup display. ; Definition at line 25 of file RWebDisplayHandle.hxx. Classes; class  BrowserCreator;  ; class  ChromeCreator;  ; class  Creator;  !< page content More...;  ; class  FirefoxCreator;  . Public Member Functions;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSRO",MatchSource.WIKI,doc/v632/classROOT_1_1RWebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RWebDisplayHandle.html:1646,Modifiability,config,configured,1646,"  BrowserCreator;  ; class  ChromeCreator;  ; class  Creator;  !< page content More...;  ; class  FirefoxCreator;  . Public Member Functions;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  . Static Protected Member Functions; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCre",MatchSource.WIKI,doc/v632/classROOT_1_1RWebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RWebDisplayHandle.html:2517,Modifiability,config,configured,2517,"ebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  . Static Protected Member Functions; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Private Attributes; std::string fContent;  !< URL used to launch display ;  ; std::string fUrl;  . #include <ROOT/RWebDisplayHandle.hxx>. Inheritance diagram for ROOT::RWebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RWebDisplayHandle(). ROOT::RWebDisplayHandle::RWebDisplayHandle ; (; const std::string & ; url). inline . constructor ; Definition at line 91 of file RWebDisplayHandle.hxx. ◆ ~RWebDisplayHandle(). virtual ROOT::RWebDisplayHandle::~RWebDisplayHandle ; (; ). virtualdefault . requ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RWebDisplayHandle.html:3805,Modifiability,config,configured,3805,"string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Private Attributes; std::string fContent;  !< URL used to launch display ;  ; std::string fUrl;  . #include <ROOT/RWebDisplayHandle.hxx>. Inheritance diagram for ROOT::RWebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RWebDisplayHandle(). ROOT::RWebDisplayHandle::RWebDisplayHandle ; (; const std::string & ; url). inline . constructor ; Definition at line 91 of file RWebDisplayHandle.hxx. ◆ ~RWebDisplayHandle(). virtual ROOT::RWebDisplayHandle::~RWebDisplayHandle ; (; ). virtualdefault . required virtual destructor for correct cleanup at the end . Member Function Documentation. ◆ CanProduceImages(). bool RWebDisplayHandle::CanProduceImages ; (; const std::string & ; browser = """"). static . Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ; Definition at line 894 of file RWebDisplayHandle.cxx. ◆ CheckIfCanProduceImages(). bool RWebDisplayHandle::CheckIfCanProduceImages ; (; RWebDisplayArgs & ; args). staticprotected . Checks if configured browser can be used for image production. ; Definition at line 837 of file RWebDisplayHandle.cxx. ◆ Display(). std::unique_ptr< RWebDisplayHandle > RWebDisplayHandle::Display ; (; const RWebDisplayArgs & ; args). static . Create web display. ; Parameters. args- defines where and how to display web window Returns RWebDisplayHandle, which holds information of running browser application Can be used fully independent from RWebWindow classes just to show any web page . Definition at line 724 of file RWebDisplayHandle.cxx. ◆ DisplayUrl(). bool RWebDisplayHandle::DisplayUrl ; (; const std::string & ; url). static . Display provided url in configured web browser. ; Parameters. url- specified URL address like",MatchSource.WIKI,doc/v632/classROOT_1_1RWebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RWebDisplayHandle.html:4055,Modifiability,config,configured,4055,"is browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RWebDisplayHandle(). ROOT::RWebDisplayHandle::RWebDisplayHandle ; (; const std::string & ; url). inline . constructor ; Definition at line 91 of file RWebDisplayHandle.hxx. ◆ ~RWebDisplayHandle(). virtual ROOT::RWebDisplayHandle::~RWebDisplayHandle ; (; ). virtualdefault . required virtual destructor for correct cleanup at the end . Member Function Documentation. ◆ CanProduceImages(). bool RWebDisplayHandle::CanProduceImages ; (; const std::string & ; browser = """"). static . Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ; Definition at line 894 of file RWebDisplayHandle.cxx. ◆ CheckIfCanProduceImages(). bool RWebDisplayHandle::CheckIfCanProduceImages ; (; RWebDisplayArgs & ; args). staticprotected . Checks if configured browser can be used for image production. ; Definition at line 837 of file RWebDisplayHandle.cxx. ◆ Display(). std::unique_ptr< RWebDisplayHandle > RWebDisplayHandle::Display ; (; const RWebDisplayArgs & ; args). static . Create web display. ; Parameters. args- defines where and how to display web window Returns RWebDisplayHandle, which holds information of running browser application Can be used fully independent from RWebWindow classes just to show any web page . Definition at line 724 of file RWebDisplayHandle.cxx. ◆ DisplayUrl(). bool RWebDisplayHandle::DisplayUrl ; (; const std::string & ; url). static . Display provided url in configured web browser. ; Parameters. url- specified URL address like https://root.cern Browser can specified when starting root --web=firefox Returns true when browser started It is convenience method, equivalent to: RWebDisplayArgs args;; args.SetUrl(url);; args.SetStandalone(false);; auto handle = RWebDisplayHandle::Display(args);; ROOT::RWebDisplayArgsHolds diffe",MatchSource.WIKI,doc/v632/classROOT_1_1RWebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RWebDisplayHandle.html:4707,Modifiability,config,configured,4707," image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ; Definition at line 894 of file RWebDisplayHandle.cxx. ◆ CheckIfCanProduceImages(). bool RWebDisplayHandle::CheckIfCanProduceImages ; (; RWebDisplayArgs & ; args). staticprotected . Checks if configured browser can be used for image production. ; Definition at line 837 of file RWebDisplayHandle.cxx. ◆ Display(). std::unique_ptr< RWebDisplayHandle > RWebDisplayHandle::Display ; (; const RWebDisplayArgs & ; args). static . Create web display. ; Parameters. args- defines where and how to display web window Returns RWebDisplayHandle, which holds information of running browser application Can be used fully independent from RWebWindow classes just to show any web page . Definition at line 724 of file RWebDisplayHandle.cxx. ◆ DisplayUrl(). bool RWebDisplayHandle::DisplayUrl ; (; const std::string & ; url). static . Display provided url in configured web browser. ; Parameters. url- specified URL address like https://root.cern Browser can specified when starting root --web=firefox Returns true when browser started It is convenience method, equivalent to: RWebDisplayArgs args;; args.SetUrl(url);; args.SetStandalone(false);; auto handle = RWebDisplayHandle::Display(args);; ROOT::RWebDisplayArgsHolds different arguments for starting browser with RWebDisplayHandle::Display() method.Definition RWebDisplayArgs.hxx:33; ROOT::RWebDisplayArgs::SetStandalonevoid SetStandalone(bool on=true)Set standalone mode for running browser, default on When disabled, normal browser window (or just tab...Definition RWebDisplayArgs.hxx:143; ROOT::RWebDisplayArgs::SetUrlRWebDisplayArgs & SetUrl(const std::string &url)set window urlDefinition RWebDisplayArgs.hxx:127; ROOT::RWebDisplayHandle::Displaystatic std::unique_ptr< RWebDisplayHandle > Display(const RWebDisplayArgs &args)Create web display.Definition RWebDisplayHandle.cxx:724; . Definition a",MatchSource.WIKI,doc/v632/classROOT_1_1RWebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RWebDisplayHandle.html:1430,Testability,test,test,1430,"ndle Class ReferenceWeb Display. ; Handle of created web-based display Depending from type of web display, holds handle of started browser process or other display-specific information to correctly stop and cleanup display. ; Definition at line 25 of file RWebDisplayHandle.hxx. Classes; class  BrowserCreator;  ; class  ChromeCreator;  ; class  Creator;  !< page content More...;  ; class  FirefoxCreator;  . Public Member Functions;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSRO",MatchSource.WIKI,doc/v632/classROOT_1_1RWebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RWebDisplayHandle.html:3834,Testability,test,test,3834,"string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Private Attributes; std::string fContent;  !< URL used to launch display ;  ; std::string fUrl;  . #include <ROOT/RWebDisplayHandle.hxx>. Inheritance diagram for ROOT::RWebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RWebDisplayHandle(). ROOT::RWebDisplayHandle::RWebDisplayHandle ; (; const std::string & ; url). inline . constructor ; Definition at line 91 of file RWebDisplayHandle.hxx. ◆ ~RWebDisplayHandle(). virtual ROOT::RWebDisplayHandle::~RWebDisplayHandle ; (; ). virtualdefault . required virtual destructor for correct cleanup at the end . Member Function Documentation. ◆ CanProduceImages(). bool RWebDisplayHandle::CanProduceImages ; (; const std::string & ; browser = """"). static . Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ; Definition at line 894 of file RWebDisplayHandle.cxx. ◆ CheckIfCanProduceImages(). bool RWebDisplayHandle::CheckIfCanProduceImages ; (; RWebDisplayArgs & ; args). staticprotected . Checks if configured browser can be used for image production. ; Definition at line 837 of file RWebDisplayHandle.cxx. ◆ Display(). std::unique_ptr< RWebDisplayHandle > RWebDisplayHandle::Display ; (; const RWebDisplayArgs & ; args). static . Create web display. ; Parameters. args- defines where and how to display web window Returns RWebDisplayHandle, which holds information of running browser application Can be used fully independent from RWebWindow classes just to show any web page . Definition at line 724 of file RWebDisplayHandle.cxx. ◆ DisplayUrl(). bool RWebDisplayHandle::DisplayUrl ; (; const std::string & ; url). static . Display provided url in configured web browser. ; Parameters. url- specified URL address like",MatchSource.WIKI,doc/v632/classROOT_1_1RWebDisplayHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebDisplayHandle.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:5864,Integrability,protocol,protocol,5864,"gured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth () const;  returns configured window width (0 - default) actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool HasConnection (unsigned connid=0, bool only_active=true) const;  returns true if specified connection id exists ;  ; bool IsNativeOnlyConn () const;  returns true if only native (own-created) connections are allowed ;  ; bool IsRequireAuthKey () const;  returns true if authentication string is required ;  ; bool IsShown () const;  Returns true when window was shown at least once. ;  ; bool IsUseCurrentDir () const;  returns true if window can access local files via currentdir/ path of http server ;  ; int NumConnections (bool with_pending=false) const;  Returns current number of active clients connections. ;  ; void RecordData (const std::string &fname=""protocol.json"", const std::string &fprefix="""");  Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ;  ; void Run (double tm=0.);  Run window functionality for specified time If no action can be performed - just sleep specified time. ;  ; void Send (unsigned connid, const std::string &data);  Sends data to specified connection. ;  ; void SendBinary (unsigned connid, const void *data, std::size_t len);  Send binary data to specified connection. ;  ; void SendBinary (unsigned connid, std::string &&data);  Send binary data to specified connection. ;  ; void SetCallBacks (WebWindowConnectCallback_t conn, WebWindowDataCallback_t data, WebWindowConnectCallback_t disconn=nullptr);  Set call-backs function for connect, data and disconnect events. ;  ; void SetClearOnClose (const std::shared_ptr< void > &handle=nu",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:5959,Integrability,protocol,protocol,5959," actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool HasConnection (unsigned connid=0, bool only_active=true) const;  returns true if specified connection id exists ;  ; bool IsNativeOnlyConn () const;  returns true if only native (own-created) connections are allowed ;  ; bool IsRequireAuthKey () const;  returns true if authentication string is required ;  ; bool IsShown () const;  Returns true when window was shown at least once. ;  ; bool IsUseCurrentDir () const;  returns true if window can access local files via currentdir/ path of http server ;  ; int NumConnections (bool with_pending=false) const;  Returns current number of active clients connections. ;  ; void RecordData (const std::string &fname=""protocol.json"", const std::string &fprefix="""");  Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ;  ; void Run (double tm=0.);  Run window functionality for specified time If no action can be performed - just sleep specified time. ;  ; void Send (unsigned connid, const std::string &data);  Sends data to specified connection. ;  ; void SendBinary (unsigned connid, const void *data, std::size_t len);  Send binary data to specified connection. ;  ; void SendBinary (unsigned connid, std::string &&data);  Send binary data to specified connection. ;  ; void SetCallBacks (WebWindowConnectCallback_t conn, WebWindowDataCallback_t data, WebWindowConnectCallback_t disconn=nullptr);  Set call-backs function for connect, data and disconnect events. ;  ; void SetClearOnClose (const std::shared_ptr< void > &handle=nullptr);  Set handle which is cleared when last active connection is closed Typically can be used to destroy web-based widget at such moment. ;  ; void SetCl",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:9622,Integrability,inject,injected,9622,"h can be held by window ;  ; void SetNativeOnlyConn (bool on=true);  configures that only native (own-created) connections are allowed ;  ; void SetOperationTmout (float tm=50.);  Set timeout for synchronous WebWindow operations. ;  ; void SetPanelName (const std::string &name);  Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ;  ; void SetPosition (unsigned x, unsigned y);  Set window position. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetRequireAuthKey (bool on);  Configure if authentication key in connection string is required. ;  ; void SetUseCurrentDir (bool on=true);  Configure if window can access local files via currentdir/ path of http server. ;  ; void SetUserArgs (const std::string &args);  Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ;  ; unsigned Show (const RWebDisplayArgs &args="""");  Show window in specified location. ;  ; void StartThread ();  Start special thread which will be used by the window to handle all callbacks One has to be sure, that access to global ROOT structures are minimized and protected with ROOT::EnableThreadSafety(); call. ;  ; void StopThread ();  Stop special thread. ;  ; void Sync ();  Special method to process all internal activity when window runs in separate thread. ;  ; void TerminateROOT ();  Terminate ROOT session Tries to correctly close THttpServer, associated with RWebWindowsManager After that exit from process. ;  ; void UseServerThreads ();  Let use THttpServer threads to process requests WARNING!!! only for expert use Should be only used when application provides proper locking and does not block. ;  ; int WaitFor (WebWindowWaitFunc_t check);  Waits until provided check function or lambdas retur",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:11821,Integrability,message,message,11821,"n or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ;  ; int WaitForTimed (WebWindowWaitFunc_t check, double duration);  Waits until provided check function or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ;  . Static Public Member Functions; static std::shared_ptr< RWebWindow > Create ();  Create new RWebWindow Using default RWebWindowsManager. ;  ; static bool EmbedFileDialog (const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args);  Create dialog instance to use as embedded dialog inside provided widget Loads libROOTBrowserv7 and tries to call RFileDialog::Embedded() method Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embedded() providing received string as second argument. ;  ; static bool IsFileDialogMessage (const std::string &msg);  Check if this could be the message send by client to start new file dialog If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog instance inside existing widget. ;  ; static unsigned ShowWindow (std::shared_ptr< RWebWindow > window, const RWebDisplayArgs &args="""");  Static method to show web window Has to be used instead of RWebWindow::Show() when window potentially can be embed into other windows Soon RWebWindow::Show() method will be done protected. ;  . Private Types; using ConnectionsList_t = std::vector< std::shared_ptr< WebConn > >;  ; enum  EQueueEntryKind { kind_None; , kind_Connect; , kind_Data; , kind_Disconnect; };  ; using timestamp_t = std::chrono::time_point< std::chrono::system_clock >;  . Private Member Functions; bool _CanTrustIn (std::shared_ptr< WebConn > &conn, ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:11900,Integrability,message,message,11900,"n or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ;  ; int WaitForTimed (WebWindowWaitFunc_t check, double duration);  Waits until provided check function or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ;  . Static Public Member Functions; static std::shared_ptr< RWebWindow > Create ();  Create new RWebWindow Using default RWebWindowsManager. ;  ; static bool EmbedFileDialog (const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args);  Create dialog instance to use as embedded dialog inside provided widget Loads libROOTBrowserv7 and tries to call RFileDialog::Embedded() method Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embedded() providing received string as second argument. ;  ; static bool IsFileDialogMessage (const std::string &msg);  Check if this could be the message send by client to start new file dialog If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog instance inside existing widget. ;  ; static unsigned ShowWindow (std::shared_ptr< RWebWindow > window, const RWebDisplayArgs &args="""");  Static method to show web window Has to be used instead of RWebWindow::Show() when window potentially can be embed into other windows Soon RWebWindow::Show() method will be done protected. ;  . Private Types; using ConnectionsList_t = std::vector< std::shared_ptr< WebConn > >;  ; enum  EQueueEntryKind { kind_None; , kind_Connect; , kind_Data; , kind_Disconnect; };  ; using timestamp_t = std::chrono::time_point< std::chrono::system_clock >;  . Private Member Functions; bool _CanTrustIn (std::shared_ptr< WebConn > &conn, ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:12078,Integrability,message,message,12078,"vided check function or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ;  . Static Public Member Functions; static std::shared_ptr< RWebWindow > Create ();  Create new RWebWindow Using default RWebWindowsManager. ;  ; static bool EmbedFileDialog (const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args);  Create dialog instance to use as embedded dialog inside provided widget Loads libROOTBrowserv7 and tries to call RFileDialog::Embedded() method Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embedded() providing received string as second argument. ;  ; static bool IsFileDialogMessage (const std::string &msg);  Check if this could be the message send by client to start new file dialog If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog instance inside existing widget. ;  ; static unsigned ShowWindow (std::shared_ptr< RWebWindow > window, const RWebDisplayArgs &args="""");  Static method to show web window Has to be used instead of RWebWindow::Show() when window potentially can be embed into other windows Soon RWebWindow::Show() method will be done protected. ;  . Private Types; using ConnectionsList_t = std::vector< std::shared_ptr< WebConn > >;  ; enum  EQueueEntryKind { kind_None; , kind_Connect; , kind_Data; , kind_Disconnect; };  ; using timestamp_t = std::chrono::time_point< std::chrono::system_clock >;  . Private Member Functions; bool _CanTrustIn (std::shared_ptr< WebConn > &conn, const std::string &key, const std::string &ntry, bool remote, bool test_first_time);  Check if provided hash, ntry parameters from the connection request could be accepted. ;  ; std::string _MakeSendHeader (std::shared_ptr< WebConn > &conn",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:17660,Integrability,message,message,17660,"allArg &arg);  Processing of websockets call-backs, invoked from RWebWindowWSHandler Method invoked from http server thread, therefore appropriate mutex must be used on all relevant data. ;  ; void ProvideQueueEntry (unsigned connid, EQueueEntryKind kind, std::string &&arg);  Provide data to user callback User callback must be executed in the window thread. ;  ; std::shared_ptr< WebConn > RemoveConnection (unsigned wsid);  Remove connection with given websocket id. ;  ; void RemoveEmbedWindow (unsigned connid, int channel);  Remove RWebWindow associated with the channelfEmbed. ;  ; void RemoveKey (const std::string &key);  Removes all connections with the key. ;  ; void RemoveMasterConnection (unsigned connid=0);  Remove master connection - if any. ;  ; void SubmitData (unsigned connid, bool txt, std::string &&data, int chid=1);  Internal method to send data. ;  . Static Private Member Functions; static std::string HMAC (const std::string &key, const std::string &sessionKey, const char *msg, int msglen);  Calculate HMAC checksum for provided key and message Key combained from connection key and session key. ;  ; static void SetStartDialogFunc (std::function< bool(const std::shared_ptr< RWebWindow > &, unsigned, const std::string &)>);  Configure func which has to be used for starting dialog. ;  . Private Attributes; std::thread::id fCallbacksThrdId;  ! thread id where callbacks should be invoked ;  ; bool fCallbacksThrdIdSet {false};  ! flag indicating that thread id is assigned ;  ; std::shared_ptr< void > fClearOnClose;  ! entry which is cleared when last connection is closed ;  ; std::string fClientVersion;  ! configured client version, used as prefix in scripts URL ;  ; ConnectionsList_t fConn;  ! list of all accepted connections ;  ; WebWindowConnectCallback_t fConnCallback;  ! callback for connect event ;  ; unsigned fConnCnt {0};  ! counter of new connections to assign ids ;  ; unsigned fConnLimit {1};  ! number of allowed active connections ;  ; std::mutex f",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:20183,Integrability,protocol,protocol,20183,"::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchronous operation, default 50s ;  ; std::string fPanelName;  ! panel name which should be shown in the window ;  ; ConnectionsList_t fPendingConn;  ! list of pending connection with pre-assigned keys ;  ; bool fProcessMT {false};  ! if window event processing performed in dedicated thread ;  ; std::string fProtocol;  ! protocol ;  ; int fProtocolCnt {-1};  ! counter for protocol recording ;  ; unsigned fProtocolConnId {0};  ! connection id, which is used for writing protocol ;  ; std::string fProtocolFileName;  ! local file where communication protocol will be written ;  ; std::string fProtocolPrefix;  ! prefix for created files names ;  ; bool fRequireAuthKey {true};  ! defines if authentication key always required when connect to the widget ;  ; bool fSendMT {false};  ! true is special threads should be used for sending data ;  ; bool fUseCurrentDir {false};  ! if window can access local files via currentdir/ path of http server ;  ; bool fUseProcessEvents {false};  ! all window functionality will run through process events ;  ; std::string fUserArgs;  ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ;  ; bool fUseServerThreads {false};  ! indicates that server thread is using, no special window thread ;  ; unsigned fWidth {0};  ; std::thread fWindowThrd;  ! special thread for that window ;  ; std::shared_ptr< RWebWindowWSHandler > fWSHandler;  ! specialize websocket handler for all incoming connections ;  ; int fX {-1};  ; int fY {-1};  ! initial window position, -1 ignored ;  . Static Priv",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:20235,Integrability,protocol,protocol,20235,"::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchronous operation, default 50s ;  ; std::string fPanelName;  ! panel name which should be shown in the window ;  ; ConnectionsList_t fPendingConn;  ! list of pending connection with pre-assigned keys ;  ; bool fProcessMT {false};  ! if window event processing performed in dedicated thread ;  ; std::string fProtocol;  ! protocol ;  ; int fProtocolCnt {-1};  ! counter for protocol recording ;  ; unsigned fProtocolConnId {0};  ! connection id, which is used for writing protocol ;  ; std::string fProtocolFileName;  ! local file where communication protocol will be written ;  ; std::string fProtocolPrefix;  ! prefix for created files names ;  ; bool fRequireAuthKey {true};  ! defines if authentication key always required when connect to the widget ;  ; bool fSendMT {false};  ! true is special threads should be used for sending data ;  ; bool fUseCurrentDir {false};  ! if window can access local files via currentdir/ path of http server ;  ; bool fUseProcessEvents {false};  ! all window functionality will run through process events ;  ; std::string fUserArgs;  ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ;  ; bool fUseServerThreads {false};  ! indicates that server thread is using, no special window thread ;  ; unsigned fWidth {0};  ; std::thread fWindowThrd;  ! special thread for that window ;  ; std::shared_ptr< RWebWindowWSHandler > fWSHandler;  ! specialize websocket handler for all incoming connections ;  ; int fX {-1};  ; int fY {-1};  ! initial window position, -1 ignored ;  . Static Priv",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:20333,Integrability,protocol,protocol,20333,"::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchronous operation, default 50s ;  ; std::string fPanelName;  ! panel name which should be shown in the window ;  ; ConnectionsList_t fPendingConn;  ! list of pending connection with pre-assigned keys ;  ; bool fProcessMT {false};  ! if window event processing performed in dedicated thread ;  ; std::string fProtocol;  ! protocol ;  ; int fProtocolCnt {-1};  ! counter for protocol recording ;  ; unsigned fProtocolConnId {0};  ! connection id, which is used for writing protocol ;  ; std::string fProtocolFileName;  ! local file where communication protocol will be written ;  ; std::string fProtocolPrefix;  ! prefix for created files names ;  ; bool fRequireAuthKey {true};  ! defines if authentication key always required when connect to the widget ;  ; bool fSendMT {false};  ! true is special threads should be used for sending data ;  ; bool fUseCurrentDir {false};  ! if window can access local files via currentdir/ path of http server ;  ; bool fUseProcessEvents {false};  ! all window functionality will run through process events ;  ; std::string fUserArgs;  ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ;  ; bool fUseServerThreads {false};  ! indicates that server thread is using, no special window thread ;  ; unsigned fWidth {0};  ; std::thread fWindowThrd;  ! special thread for that window ;  ; std::shared_ptr< RWebWindowWSHandler > fWSHandler;  ! specialize websocket handler for all incoming connections ;  ; int fX {-1};  ; int fY {-1};  ! initial window position, -1 ignored ;  . Static Priv",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:20412,Integrability,protocol,protocol,20412,"::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchronous operation, default 50s ;  ; std::string fPanelName;  ! panel name which should be shown in the window ;  ; ConnectionsList_t fPendingConn;  ! list of pending connection with pre-assigned keys ;  ; bool fProcessMT {false};  ! if window event processing performed in dedicated thread ;  ; std::string fProtocol;  ! protocol ;  ; int fProtocolCnt {-1};  ! counter for protocol recording ;  ; unsigned fProtocolConnId {0};  ! connection id, which is used for writing protocol ;  ; std::string fProtocolFileName;  ! local file where communication protocol will be written ;  ; std::string fProtocolPrefix;  ! prefix for created files names ;  ; bool fRequireAuthKey {true};  ! defines if authentication key always required when connect to the widget ;  ; bool fSendMT {false};  ! true is special threads should be used for sending data ;  ; bool fUseCurrentDir {false};  ! if window can access local files via currentdir/ path of http server ;  ; bool fUseProcessEvents {false};  ! all window functionality will run through process events ;  ; std::string fUserArgs;  ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ;  ; bool fUseServerThreads {false};  ! indicates that server thread is using, no special window thread ;  ; unsigned fWidth {0};  ; std::thread fWindowThrd;  ! special thread for that window ;  ; std::shared_ptr< RWebWindowWSHandler > fWSHandler;  ! specialize websocket handler for all incoming connections ;  ; int fX {-1};  ; int fY {-1};  ! initial window position, -1 ignored ;  . Static Priv",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:28501,Integrability,message,message,28501,"d_ptr< RWebWindow > RWebWindow::Create ; (; ). static . Create new RWebWindow Using default RWebWindowsManager. ; Definition at line 1883 of file RWebWindow.cxx. ◆ CreateWSHandler(). std::shared_ptr< RWebWindowWSHandler > RWebWindow::CreateWSHandler ; (; std::shared_ptr< RWebWindowsManager > ; mgr, . unsigned ; id, . double ; tmout . ). private . Assigns manager reference, window id and creates websocket handler, used for communication with the clients. ; Definition at line 152 of file RWebWindow.cxx. ◆ EmbedFileDialog(). bool RWebWindow::EmbedFileDialog ; (; const std::shared_ptr< RWebWindow > & ; window, . unsigned ; connid, . const std::string & ; args . ). static . Create dialog instance to use as embedded dialog inside provided widget Loads libROOTBrowserv7 and tries to call RFileDialog::Embedded() method Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embedded() providing received string as second argument. ; Returned instance of shared_ptr<RFileDialog> may be used to assign callback when file is selected ; Definition at line 1977 of file RWebWindow.cxx. ◆ FindConnection(). std::shared_ptr< RWebWindow::WebConn > RWebWindow::FindConnection ; (; unsigned ; wsid). private . Find connection with specified websocket id. ; Find connection with given websocket id. ; Definition at line 264 of file RWebWindow.cxx. ◆ FindHeadlessConnection(). unsigned RWebWindow::FindHeadlessConnection ; (; ). private . Returns connection id of window running in headless mode This can be special connection which may run picture production jobs in background Connection to that job may not be initialized yet If connection does not exists, returns 0. ; Definition at line 221 of file RWebWindow.cxx. ◆ GenerateKey(). std::string RWebWindow::GenerateKey ; (; ); const. private . Generate new unique key for the wind",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:28580,Integrability,message,message,28580,"d_ptr< RWebWindow > RWebWindow::Create ; (; ). static . Create new RWebWindow Using default RWebWindowsManager. ; Definition at line 1883 of file RWebWindow.cxx. ◆ CreateWSHandler(). std::shared_ptr< RWebWindowWSHandler > RWebWindow::CreateWSHandler ; (; std::shared_ptr< RWebWindowsManager > ; mgr, . unsigned ; id, . double ; tmout . ). private . Assigns manager reference, window id and creates websocket handler, used for communication with the clients. ; Definition at line 152 of file RWebWindow.cxx. ◆ EmbedFileDialog(). bool RWebWindow::EmbedFileDialog ; (; const std::shared_ptr< RWebWindow > & ; window, . unsigned ; connid, . const std::string & ; args . ). static . Create dialog instance to use as embedded dialog inside provided widget Loads libROOTBrowserv7 and tries to call RFileDialog::Embedded() method Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embedded() providing received string as second argument. ; Returned instance of shared_ptr<RFileDialog> may be used to assign callback when file is selected ; Definition at line 1977 of file RWebWindow.cxx. ◆ FindConnection(). std::shared_ptr< RWebWindow::WebConn > RWebWindow::FindConnection ; (; unsigned ; wsid). private . Find connection with specified websocket id. ; Find connection with given websocket id. ; Definition at line 264 of file RWebWindow.cxx. ◆ FindHeadlessConnection(). unsigned RWebWindow::FindHeadlessConnection ; (; ). private . Returns connection id of window running in headless mode This can be special connection which may run picture production jobs in background Connection to that job may not be initialized yet If connection does not exists, returns 0. ; Definition at line 221 of file RWebWindow.cxx. ◆ GenerateKey(). std::string RWebWindow::GenerateKey ; (; ); const. private . Generate new unique key for the wind",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:36460,Integrability,message,message,36460,"1 - default) ; Definition at line 290 of file RWebWindow.hxx. ◆ HasConnection(). bool RWebWindow::HasConnection ; (; unsigned ; connid = 0, . bool ; only_active = true . ); const. returns true if specified connection id exists ; Parameters. connidconnection id (0 - any) ; only_activewhen true only active connection will be checked, otherwise also pending (not yet established) connections are checked . Definition at line 1413 of file RWebWindow.cxx. ◆ HasKey(). bool RWebWindow::HasKey ; (; const std::string & ; key, . bool ; also_newkey = false . ); const. private . Returns true if provided key value already exists (in processes map or in existing connections) In special cases one also can check if key value exists as newkey. ; Definition at line 558 of file RWebWindow.cxx. ◆ HMAC(). std::string RWebWindow::HMAC ; (; const std::string & ; key, . const std::string & ; sessionKey, . const char * ; msg, . int ; msglen . ). staticprivate . Calculate HMAC checksum for provided key and message Key combained from connection key and session key. ; Definition at line 1992 of file RWebWindow.cxx. ◆ InvokeCallbacks(). void RWebWindow::InvokeCallbacks ; (; bool ; force = false). private . Invoke callbacks with existing data Must be called from appropriate thread. ; Definition at line 438 of file RWebWindow.cxx. ◆ IsFileDialogMessage(). bool RWebWindow::IsFileDialogMessage ; (; const std::string & ; msg). static . Check if this could be the message send by client to start new file dialog If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog instance inside existing widget. ; Definition at line 1963 of file RWebWindow.cxx. ◆ IsNativeOnlyConn(). bool ROOT::RWebWindow::IsNativeOnlyConn ; (; ); const. inline . returns true if only native (own-created) connections are allowed ; Definition at line 312 of file RWebWindow.hxx. ◆ IsRequireAuthKey(). bool ROOT::RWebWindow::IsRequireAuthKey ; (; ); const. inline . returns true if authentication string is r",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:36917,Integrability,message,message,36917,". bool ; also_newkey = false . ); const. private . Returns true if provided key value already exists (in processes map or in existing connections) In special cases one also can check if key value exists as newkey. ; Definition at line 558 of file RWebWindow.cxx. ◆ HMAC(). std::string RWebWindow::HMAC ; (; const std::string & ; key, . const std::string & ; sessionKey, . const char * ; msg, . int ; msglen . ). staticprivate . Calculate HMAC checksum for provided key and message Key combained from connection key and session key. ; Definition at line 1992 of file RWebWindow.cxx. ◆ InvokeCallbacks(). void RWebWindow::InvokeCallbacks ; (; bool ; force = false). private . Invoke callbacks with existing data Must be called from appropriate thread. ; Definition at line 438 of file RWebWindow.cxx. ◆ IsFileDialogMessage(). bool RWebWindow::IsFileDialogMessage ; (; const std::string & ; msg). static . Check if this could be the message send by client to start new file dialog If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog instance inside existing widget. ; Definition at line 1963 of file RWebWindow.cxx. ◆ IsNativeOnlyConn(). bool ROOT::RWebWindow::IsNativeOnlyConn ; (; ); const. inline . returns true if only native (own-created) connections are allowed ; Definition at line 312 of file RWebWindow.hxx. ◆ IsRequireAuthKey(). bool ROOT::RWebWindow::IsRequireAuthKey ; (; ); const. inline . returns true if authentication string is required ; Definition at line 320 of file RWebWindow.hxx. ◆ IsShown(). bool ROOT::RWebWindow::IsShown ; (; ); const. inline . Returns true when window was shown at least once. ; Definition at line 369 of file RWebWindow.hxx. ◆ IsUseCurrentDir(). bool ROOT::RWebWindow::IsUseCurrentDir ; (; ); const. inline . returns true if window can access local files via currentdir/ path of http server ; Definition at line 328 of file RWebWindow.hxx. ◆ MakeHeadless(). unsigned RWebWindow::MakeHeadless ; (; bool ; create_new = false)",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:39597,Integrability,protocol,protocol,39597,"(). bool RWebWindow::ProcessBatchHolder ; (; std::shared_ptr< THttpCallArg > & ; arg). private . Process special http request, used to hold headless browser running Such requests should not be replied for the long time Be aware that function called directly from THttpServer thread, which is not same thread as window. ; Definition at line 374 of file RWebWindow.cxx. ◆ ProcessWS(). bool RWebWindow::ProcessWS ; (; THttpCallArg & ; arg). private . Processing of websockets call-backs, invoked from RWebWindowWSHandler Method invoked from http server thread, therefore appropriate mutex must be used on all relevant data. ; Definition at line 736 of file RWebWindow.cxx. ◆ ProvideQueueEntry(). void RWebWindow::ProvideQueueEntry ; (; unsigned ; connid, . EQueueEntryKind ; kind, . std::string && ; arg . ). private . Provide data to user callback User callback must be executed in the window thread. ; Definition at line 421 of file RWebWindow.cxx. ◆ RecordData(). void RWebWindow::RecordData ; (; const std::string & ; fname = ""protocol.json"", . const std::string & ; fprefix = """" . ). Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ; JSON file will look like: [""send"", ""msg0.txt"", ""send"", ""msg1.txt"", ""msg2.txt""]; If empty file name is provided, data recording will be disabled Recorded data can be used in JSROOT directly to test client code without running C++ server ; Definition at line 1355 of file RWebWindow.cxx. ◆ RemoveConnection(). std::shared_ptr< RWebWindow::WebConn > RWebWindow::RemoveConnection ; (; unsigned ; wsid). private . Remove connection with given websocket id. ; Definition at line 279 of file RWebWindow.cxx. ◆ RemoveEmbedWindow(). void RWebWindow::RemoveEmbedWindow ; (; unsigned ; connid, . int ; channel . ). private . Remove RWebWindow associated with the channelfEmbed. ; Definition at line 1867 of f",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:39701,Integrability,protocol,protocol,39701," replied for the long time Be aware that function called directly from THttpServer thread, which is not same thread as window. ; Definition at line 374 of file RWebWindow.cxx. ◆ ProcessWS(). bool RWebWindow::ProcessWS ; (; THttpCallArg & ; arg). private . Processing of websockets call-backs, invoked from RWebWindowWSHandler Method invoked from http server thread, therefore appropriate mutex must be used on all relevant data. ; Definition at line 736 of file RWebWindow.cxx. ◆ ProvideQueueEntry(). void RWebWindow::ProvideQueueEntry ; (; unsigned ; connid, . EQueueEntryKind ; kind, . std::string && ; arg . ). private . Provide data to user callback User callback must be executed in the window thread. ; Definition at line 421 of file RWebWindow.cxx. ◆ RecordData(). void RWebWindow::RecordData ; (; const std::string & ; fname = ""protocol.json"", . const std::string & ; fprefix = """" . ). Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ; JSON file will look like: [""send"", ""msg0.txt"", ""send"", ""msg1.txt"", ""msg2.txt""]; If empty file name is provided, data recording will be disabled Recorded data can be used in JSROOT directly to test client code without running C++ server ; Definition at line 1355 of file RWebWindow.cxx. ◆ RemoveConnection(). std::shared_ptr< RWebWindow::WebConn > RWebWindow::RemoveConnection ; (; unsigned ; wsid). private . Remove connection with given websocket id. ; Definition at line 279 of file RWebWindow.cxx. ◆ RemoveEmbedWindow(). void RWebWindow::RemoveEmbedWindow ; (; unsigned ; connid, . int ; channel . ). private . Remove RWebWindow associated with the channelfEmbed. ; Definition at line 1867 of file RWebWindow.cxx. ◆ RemoveKey(). void RWebWindow::RemoveKey ; (; const std::string & ; key). private . Removes all connections with the key. ; Definition at line 583 of file RWebWindow.cxx. ◆",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:48424,Integrability,inject,injected,48424," CEF or Chromium) ; Definition at line 269 of file RWebWindow.hxx. ◆ SetRequireAuthKey(). void ROOT::RWebWindow::SetRequireAuthKey ; (; bool ; on). inline . Configure if authentication key in connection string is required. ; Definition at line 316 of file RWebWindow.hxx. ◆ SetStartDialogFunc(). void RWebWindow::SetStartDialogFunc ; (; std::function< bool(const std::shared_ptr< RWebWindow > &, unsigned, const std::string &)> ; func). staticprivate . Configure func which has to be used for starting dialog. ; Definition at line 1953 of file RWebWindow.cxx. ◆ SetUseCurrentDir(). void ROOT::RWebWindow::SetUseCurrentDir ; (; bool ; on = true). inline . Configure if window can access local files via currentdir/ path of http server. ; Definition at line 324 of file RWebWindow.hxx. ◆ SetUserArgs(). void RWebWindow::SetUserArgs ; (; const std::string & ; args). Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ; Parameters. args- arbitrary JSON data which can be provided to client side . Definition at line 1310 of file RWebWindow.cxx. ◆ Show(). unsigned RWebWindow::Show ; (; const RWebDisplayArgs & ; args = """"). Show window in specified location. ; See alsoROOT::RWebWindowsManager::Show for more info ; Returns(future) connection id (or 0 when fails) ; Definition at line 191 of file RWebWindow.cxx. ◆ ShowWindow(). unsigned RWebWindow::ShowWindow ; (; std::shared_ptr< RWebWindow > ; window, . const RWebDisplayArgs & ; args = """" . ). static . Static method to show web window Has to be used instead of RWebWindow::Show() when window potentially can be embed into other windows Soon RWebWindow::Show() method will be done protected. ; Definition at line 1915 of file RWebWindow.cxx. ◆ StartThread(). void RWebWindow::StartThread ; (; ). Start special thread which will be used by the window to handle all callbacks One ha",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:50011,Integrability,message,message,50011,"s & ; args = """" . ). static . Static method to show web window Has to be used instead of RWebWindow::Show() when window potentially can be embed into other windows Soon RWebWindow::Show() method will be done protected. ; Definition at line 1915 of file RWebWindow.cxx. ◆ StartThread(). void RWebWindow::StartThread ; (; ). Start special thread which will be used by the window to handle all callbacks One has to be sure, that access to global ROOT structures are minimized and protected with ROOT::EnableThreadSafety(); call. ; Definition at line 1680 of file RWebWindow.cxx. ◆ StopThread(). void RWebWindow::StopThread ; (; ). Stop special thread. ; Definition at line 1702 of file RWebWindow.cxx. ◆ SubmitData(). void RWebWindow::SubmitData ; (; unsigned ; connid, . bool ; txt, . std::string && ; data, . int ; chid = 1 . ). private . Internal method to send data. ; Parameters. connidconnection id, when 0 - data will be send to all connections ; txtis text message that should be sent ; datadata to be std-moved to SubmitData function ; chidchannel id, 1 - normal communication, 0 - internal with highest priority . Definition at line 1529 of file RWebWindow.cxx. ◆ Sync(). void RWebWindow::Sync ; (; ). Special method to process all internal activity when window runs in separate thread. ; Definition at line 1236 of file RWebWindow.cxx. ◆ TerminateROOT(). void RWebWindow::TerminateROOT ; (; ). Terminate ROOT session Tries to correctly close THttpServer, associated with RWebWindowsManager After that exit from process. ; Definition at line 1893 of file RWebWindow.cxx. ◆ UseServerThreads(). void RWebWindow::UseServerThreads ; (; ). Let use THttpServer threads to process requests WARNING!!! only for expert use Should be only used when application provides proper locking and does not block. ; Such mode provides minimal possible latency Must be called before callbacks are assigned ; Definition at line 1667 of file RWebWindow.cxx. ◆ WaitFor(). int RWebWindow::WaitFor ; (; WebWindowWaitFun",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:57877,Integrability,protocol,protocol,57877,"Window.hxx. ◆ fNativeOnlyConn. bool ROOT::RWebWindow::fNativeOnlyConn {false}. private . ! only native connection are allowed, created by Show() method ; Definition at line 154 of file RWebWindow.hxx. ◆ fOperationTmout. float ROOT::RWebWindow::fOperationTmout {50.}. private . ! timeout in seconds to perform synchronous operation, default 50s ; Definition at line 168 of file RWebWindow.hxx. ◆ fPanelName. std::string ROOT::RWebWindow::fPanelName. private . ! panel name which should be shown in the window ; Definition at line 140 of file RWebWindow.hxx. ◆ fPendingConn. ConnectionsList_t ROOT::RWebWindow::fPendingConn. private . ! list of pending connection with pre-assigned keys ; Definition at line 149 of file RWebWindow.hxx. ◆ fProcessMT. bool ROOT::RWebWindow::fProcessMT {false}. private . ! if window event processing performed in dedicated thread ; Definition at line 144 of file RWebWindow.hxx. ◆ fProtocol. std::string ROOT::RWebWindow::fProtocol. private . ! protocol ; Definition at line 174 of file RWebWindow.hxx. ◆ fProtocolCnt. int ROOT::RWebWindow::fProtocolCnt {-1}. private . ! counter for protocol recording ; Definition at line 171 of file RWebWindow.hxx. ◆ fProtocolConnId. unsigned ROOT::RWebWindow::fProtocolConnId {0}. private . ! connection id, which is used for writing protocol ; Definition at line 172 of file RWebWindow.hxx. ◆ fProtocolFileName. std::string ROOT::RWebWindow::fProtocolFileName. private . ! local file where communication protocol will be written ; Definition at line 170 of file RWebWindow.hxx. ◆ fProtocolPrefix. std::string ROOT::RWebWindow::fProtocolPrefix. private . ! prefix for created files names ; Definition at line 173 of file RWebWindow.hxx. ◆ fRequireAuthKey. bool ROOT::RWebWindow::fRequireAuthKey {true}. private . ! defines if authentication key always required when connect to the widget ; Definition at line 146 of file RWebWindow.hxx. ◆ fSendMT. bool ROOT::RWebWindow::fSendMT {false}. private . ! true is special threads should b",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:58016,Integrability,protocol,protocol,58016,"Show() method ; Definition at line 154 of file RWebWindow.hxx. ◆ fOperationTmout. float ROOT::RWebWindow::fOperationTmout {50.}. private . ! timeout in seconds to perform synchronous operation, default 50s ; Definition at line 168 of file RWebWindow.hxx. ◆ fPanelName. std::string ROOT::RWebWindow::fPanelName. private . ! panel name which should be shown in the window ; Definition at line 140 of file RWebWindow.hxx. ◆ fPendingConn. ConnectionsList_t ROOT::RWebWindow::fPendingConn. private . ! list of pending connection with pre-assigned keys ; Definition at line 149 of file RWebWindow.hxx. ◆ fProcessMT. bool ROOT::RWebWindow::fProcessMT {false}. private . ! if window event processing performed in dedicated thread ; Definition at line 144 of file RWebWindow.hxx. ◆ fProtocol. std::string ROOT::RWebWindow::fProtocol. private . ! protocol ; Definition at line 174 of file RWebWindow.hxx. ◆ fProtocolCnt. int ROOT::RWebWindow::fProtocolCnt {-1}. private . ! counter for protocol recording ; Definition at line 171 of file RWebWindow.hxx. ◆ fProtocolConnId. unsigned ROOT::RWebWindow::fProtocolConnId {0}. private . ! connection id, which is used for writing protocol ; Definition at line 172 of file RWebWindow.hxx. ◆ fProtocolFileName. std::string ROOT::RWebWindow::fProtocolFileName. private . ! local file where communication protocol will be written ; Definition at line 170 of file RWebWindow.hxx. ◆ fProtocolPrefix. std::string ROOT::RWebWindow::fProtocolPrefix. private . ! prefix for created files names ; Definition at line 173 of file RWebWindow.hxx. ◆ fRequireAuthKey. bool ROOT::RWebWindow::fRequireAuthKey {true}. private . ! defines if authentication key always required when connect to the widget ; Definition at line 146 of file RWebWindow.hxx. ◆ fSendMT. bool ROOT::RWebWindow::fSendMT {false}. private . ! true is special threads should be used for sending data ; Definition at line 145 of file RWebWindow.hxx. ◆ fUseCurrentDir. bool ROOT::RWebWindow::fUseCurrentDir {false}. ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:58204,Integrability,protocol,protocol,58204,"rm synchronous operation, default 50s ; Definition at line 168 of file RWebWindow.hxx. ◆ fPanelName. std::string ROOT::RWebWindow::fPanelName. private . ! panel name which should be shown in the window ; Definition at line 140 of file RWebWindow.hxx. ◆ fPendingConn. ConnectionsList_t ROOT::RWebWindow::fPendingConn. private . ! list of pending connection with pre-assigned keys ; Definition at line 149 of file RWebWindow.hxx. ◆ fProcessMT. bool ROOT::RWebWindow::fProcessMT {false}. private . ! if window event processing performed in dedicated thread ; Definition at line 144 of file RWebWindow.hxx. ◆ fProtocol. std::string ROOT::RWebWindow::fProtocol. private . ! protocol ; Definition at line 174 of file RWebWindow.hxx. ◆ fProtocolCnt. int ROOT::RWebWindow::fProtocolCnt {-1}. private . ! counter for protocol recording ; Definition at line 171 of file RWebWindow.hxx. ◆ fProtocolConnId. unsigned ROOT::RWebWindow::fProtocolConnId {0}. private . ! connection id, which is used for writing protocol ; Definition at line 172 of file RWebWindow.hxx. ◆ fProtocolFileName. std::string ROOT::RWebWindow::fProtocolFileName. private . ! local file where communication protocol will be written ; Definition at line 170 of file RWebWindow.hxx. ◆ fProtocolPrefix. std::string ROOT::RWebWindow::fProtocolPrefix. private . ! prefix for created files names ; Definition at line 173 of file RWebWindow.hxx. ◆ fRequireAuthKey. bool ROOT::RWebWindow::fRequireAuthKey {true}. private . ! defines if authentication key always required when connect to the widget ; Definition at line 146 of file RWebWindow.hxx. ◆ fSendMT. bool ROOT::RWebWindow::fSendMT {false}. private . ! true is special threads should be used for sending data ; Definition at line 145 of file RWebWindow.hxx. ◆ fUseCurrentDir. bool ROOT::RWebWindow::fUseCurrentDir {false}. private . ! if window can access local files via currentdir/ path of http server ; Definition at line 155 of file RWebWindow.hxx. ◆ fUseProcessEvents. bool ROOT::RWebWin",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:58375,Integrability,protocol,protocol,58375,"own in the window ; Definition at line 140 of file RWebWindow.hxx. ◆ fPendingConn. ConnectionsList_t ROOT::RWebWindow::fPendingConn. private . ! list of pending connection with pre-assigned keys ; Definition at line 149 of file RWebWindow.hxx. ◆ fProcessMT. bool ROOT::RWebWindow::fProcessMT {false}. private . ! if window event processing performed in dedicated thread ; Definition at line 144 of file RWebWindow.hxx. ◆ fProtocol. std::string ROOT::RWebWindow::fProtocol. private . ! protocol ; Definition at line 174 of file RWebWindow.hxx. ◆ fProtocolCnt. int ROOT::RWebWindow::fProtocolCnt {-1}. private . ! counter for protocol recording ; Definition at line 171 of file RWebWindow.hxx. ◆ fProtocolConnId. unsigned ROOT::RWebWindow::fProtocolConnId {0}. private . ! connection id, which is used for writing protocol ; Definition at line 172 of file RWebWindow.hxx. ◆ fProtocolFileName. std::string ROOT::RWebWindow::fProtocolFileName. private . ! local file where communication protocol will be written ; Definition at line 170 of file RWebWindow.hxx. ◆ fProtocolPrefix. std::string ROOT::RWebWindow::fProtocolPrefix. private . ! prefix for created files names ; Definition at line 173 of file RWebWindow.hxx. ◆ fRequireAuthKey. bool ROOT::RWebWindow::fRequireAuthKey {true}. private . ! defines if authentication key always required when connect to the widget ; Definition at line 146 of file RWebWindow.hxx. ◆ fSendMT. bool ROOT::RWebWindow::fSendMT {false}. private . ! true is special threads should be used for sending data ; Definition at line 145 of file RWebWindow.hxx. ◆ fUseCurrentDir. bool ROOT::RWebWindow::fUseCurrentDir {false}. private . ! if window can access local files via currentdir/ path of http server ; Definition at line 155 of file RWebWindow.hxx. ◆ fUseProcessEvents. bool ROOT::RWebWindow::fUseProcessEvents {false}. private . ! all window functionality will run through process events ; Definition at line 143 of file RWebWindow.hxx. ◆ fUserArgs. std::string ROOT::RWe",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:537,Modifiability,config,configured,537,". ROOT: ROOT::RWebWindow Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; ROOT::RWebWindow Class ReferenceWeb Display. ; Represents web window, which can be shown in web browser or any other supported environment. ; Window can be configured to run either in the normal or in the batch (headless) mode. In second case no any graphical elements will be created. For the normal window one can configure geometry (width and height), which are applied when window shown.; Each window can be shown several times (if allowed) in different places - either as the CEF (chromium embedded) window or in the standard web browser. When started, window will open and show HTML page, configured with RWebWindow::SetDefaultPage() method.; Typically (but not necessarily) clients open web socket connection to the window and one can exchange data, using RWebWindow::Send() method and call-back function assigned via RWebWindow::SetDataCallBack(). ; Definition at line 52 of file RWebWindow.hxx. Classes; struct  MasterConn;  ; struct  QueueEntry;  ; struct  QueueItem;  ; struct  WebConn;  . Public Member Functions;  RWebWindow ();  RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ;  ;  ~RWebWindow ();  RWebWindow destructor Closes all connections and remove window from manager. ;  ; void AssignThreadId ();  Assign thread id which has to be used for callbacks WARNING!!! only for expert use Automatically done at the moment when any callback function is invoked Can be invoked once again if window Run method will be invoked from other thread Normally should be invoked before Show() method is called. ;  ; bool CanSend (unsigned connid, bool direct=true) const",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:697,Modifiability,config,configure,697,". ROOT: ROOT::RWebWindow Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; ROOT::RWebWindow Class ReferenceWeb Display. ; Represents web window, which can be shown in web browser or any other supported environment. ; Window can be configured to run either in the normal or in the batch (headless) mode. In second case no any graphical elements will be created. For the normal window one can configure geometry (width and height), which are applied when window shown.; Each window can be shown several times (if allowed) in different places - either as the CEF (chromium embedded) window or in the standard web browser. When started, window will open and show HTML page, configured with RWebWindow::SetDefaultPage() method.; Typically (but not necessarily) clients open web socket connection to the window and one can exchange data, using RWebWindow::Send() method and call-back function assigned via RWebWindow::SetDataCallBack(). ; Definition at line 52 of file RWebWindow.hxx. Classes; struct  MasterConn;  ; struct  QueueEntry;  ; struct  QueueItem;  ; struct  WebConn;  . Public Member Functions;  RWebWindow ();  RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ;  ;  ~RWebWindow ();  RWebWindow destructor Closes all connections and remove window from manager. ;  ; void AssignThreadId ();  Assign thread id which has to be used for callbacks WARNING!!! only for expert use Automatically done at the moment when any callback function is invoked Can be invoked once again if window Run method will be invoked from other thread Normally should be invoked before Show() method is called. ;  ; bool CanSend (unsigned connid, bool direct=true) const",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:976,Modifiability,config,configured,976,". ROOT: ROOT::RWebWindow Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; ROOT::RWebWindow Class ReferenceWeb Display. ; Represents web window, which can be shown in web browser or any other supported environment. ; Window can be configured to run either in the normal or in the batch (headless) mode. In second case no any graphical elements will be created. For the normal window one can configure geometry (width and height), which are applied when window shown.; Each window can be shown several times (if allowed) in different places - either as the CEF (chromium embedded) window or in the standard web browser. When started, window will open and show HTML page, configured with RWebWindow::SetDefaultPage() method.; Typically (but not necessarily) clients open web socket connection to the window and one can exchange data, using RWebWindow::Send() method and call-back function assigned via RWebWindow::SetDataCallBack(). ; Definition at line 52 of file RWebWindow.hxx. Classes; struct  MasterConn;  ; struct  QueueEntry;  ; struct  QueueItem;  ; struct  WebConn;  . Public Member Functions;  RWebWindow ();  RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ;  ;  ~RWebWindow ();  RWebWindow destructor Closes all connections and remove window from manager. ;  ; void AssignThreadId ();  Assign thread id which has to be used for callbacks WARNING!!! only for expert use Automatically done at the moment when any callback function is invoked Can be invoked once again if window Run method will be invoked from other thread Normally should be invoked before Show() method is called. ;  ; bool CanSend (unsigned connid, bool direct=true) const",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:3060,Modifiability,config,configured,3060," be performed. ;  ; void CloseConnection (unsigned connid);  Close specified connection. ;  ; void CloseConnections ();  Closes all connection to clients Normally leads to closing of all correspondent browser windows Some browsers (like firefox) do not allow by default to close window. ;  ; std::string GetAddr () const;  Returns window address which is used in URL. ;  ; std::string GetClientVersion () const;  Returns current client version. ;  ; unsigned GetConnectionId (int num=0) const;  Returns connection id for specified connection sequence number Only active connections are returned - where clients confirms connection Total number of connections can be retrieved with NumConnections() method. ;  ; std::vector< unsigned > GetConnections (unsigned excludeid=0) const;  returns vector with all existing connections ids One also can exclude specified connection from return result, which can be useful to be able reply too all but this connections ;  ; unsigned GetConnLimit () const;  returns configured connections limit (0 - default) ;  ; unsigned GetDisplayConnection () const;  Returns first connection id where window is displayed It could be that connection(s) not yet fully established - but also not timed out Batch jobs will be ignored here Returns 0 if connection not exists. ;  ; unsigned GetHeight () const;  returns configured window height (0 - default) ;  ; unsigned GetId () const;  Returns ID for the window - unique inside window manager. ;  ; std::shared_ptr< RWebWindowsManager > GetManager () const;  Returns window manager. ;  ; unsigned GetMaxQueueLength () const;  Return maximal queue length of data which can be held by window. ;  ; float GetOperationTmout () const;  Returns timeout for synchronous WebWindow operations. ;  ; std::string GetRelativeAddr (const RWebWindow &win) const;  Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting pa",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:3396,Modifiability,config,configured,3396,"ing GetClientVersion () const;  Returns current client version. ;  ; unsigned GetConnectionId (int num=0) const;  Returns connection id for specified connection sequence number Only active connections are returned - where clients confirms connection Total number of connections can be retrieved with NumConnections() method. ;  ; std::vector< unsigned > GetConnections (unsigned excludeid=0) const;  returns vector with all existing connections ids One also can exclude specified connection from return result, which can be useful to be able reply too all but this connections ;  ; unsigned GetConnLimit () const;  returns configured connections limit (0 - default) ;  ; unsigned GetDisplayConnection () const;  Returns first connection id where window is displayed It could be that connection(s) not yet fully established - but also not timed out Batch jobs will be ignored here Returns 0 if connection not exists. ;  ; unsigned GetHeight () const;  returns configured window height (0 - default) ;  ; unsigned GetId () const;  Returns ID for the window - unique inside window manager. ;  ; std::shared_ptr< RWebWindowsManager > GetManager () const;  Returns window manager. ;  ; unsigned GetMaxQueueLength () const;  Return maximal queue length of data which can be held by window. ;  ; float GetOperationTmout () const;  Returns timeout for synchronous WebWindow operations. ;  ; std::string GetRelativeAddr (const RWebWindow &win) const;  Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ;  ; std::string GetRelativeAddr (const std::shared_ptr< RWebWindow > &win) const;  Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for sp",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:4839,Modifiability,config,configured,4839,"RWebWindow &win) const;  Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ;  ; std::string GetRelativeAddr (const std::shared_ptr< RWebWindow > &win) const;  Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ;  ; std::string GetUserArgs () const;  Returns configured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth () const;  returns configured window width (0 - default) actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool HasConnection (unsigned connid=0, bool only_active=true) const;  returns true if specified connection id exists ;  ; bool IsNativeOnlyConn () const;  returns true if only native (own-created) connections are allowed ;  ; bool IsRequireAuthKey () const;  returns true if authentication string is required ;  ; bool IsShown () const;  Returns true when window was shown at least once. ;  ; bool IsUseCurrentDir () const;  returns true if window can access local files via currentdir/ path of http server ;  ; int NumConnections (bool with_pending=false) const;  Returns current number of active clients connections. ;  ; void RecordData (const std::string",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:4963,Modifiability,config,configured,4963,"access data from one window into another window Used for instance when inserting panel into canvas. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ;  ; std::string GetUserArgs () const;  Returns configured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth () const;  returns configured window width (0 - default) actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool HasConnection (unsigned connid=0, bool only_active=true) const;  returns true if specified connection id exists ;  ; bool IsNativeOnlyConn () const;  returns true if only native (own-created) connections are allowed ;  ; bool IsRequireAuthKey () const;  returns true if authentication string is required ;  ; bool IsShown () const;  Returns true when window was shown at least once. ;  ; bool IsUseCurrentDir () const;  returns true if window can access local files via currentdir/ path of http server ;  ; int NumConnections (bool with_pending=false) const;  Returns current number of active clients connections. ;  ; void RecordData (const std::string &fname=""protocol.json"", const std::string &fprefix="""");  Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ;  ; void Run (double tm=0.);  Run window functionality for specified time If no action can be performed - just sleep specif",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:5071,Modifiability,config,configured,5071,"access data from one window into another window Used for instance when inserting panel into canvas. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ;  ; std::string GetUserArgs () const;  Returns configured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth () const;  returns configured window width (0 - default) actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool HasConnection (unsigned connid=0, bool only_active=true) const;  returns true if specified connection id exists ;  ; bool IsNativeOnlyConn () const;  returns true if only native (own-created) connections are allowed ;  ; bool IsRequireAuthKey () const;  returns true if authentication string is required ;  ; bool IsShown () const;  Returns true when window was shown at least once. ;  ; bool IsUseCurrentDir () const;  returns true if window can access local files via currentdir/ path of http server ;  ; int NumConnections (bool with_pending=false) const;  Returns current number of active clients connections. ;  ; void RecordData (const std::string &fname=""protocol.json"", const std::string &fprefix="""");  Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ;  ; void Run (double tm=0.);  Run window functionality for specified time If no action can be performed - just sleep specif",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:5148,Modifiability,config,configured,5148,"access data from one window into another window Used for instance when inserting panel into canvas. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ;  ; std::string GetUserArgs () const;  Returns configured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth () const;  returns configured window width (0 - default) actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool HasConnection (unsigned connid=0, bool only_active=true) const;  returns true if specified connection id exists ;  ; bool IsNativeOnlyConn () const;  returns true if only native (own-created) connections are allowed ;  ; bool IsRequireAuthKey () const;  returns true if authentication string is required ;  ; bool IsShown () const;  Returns true when window was shown at least once. ;  ; bool IsUseCurrentDir () const;  returns true if window can access local files via currentdir/ path of http server ;  ; int NumConnections (bool with_pending=false) const;  Returns current number of active clients connections. ;  ; void RecordData (const std::string &fname=""protocol.json"", const std::string &fprefix="""");  Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ;  ; void Run (double tm=0.);  Run window functionality for specified time If no action can be performed - just sleep specif",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:8610,Modifiability,config,configures,8610,"ring &token="""");  Configures connection token (default none) When specified, in URL of webpage such token should be provided as &token=value parameter, otherwise web window will refuse connection. ;  ; void SetDataCallBack (WebWindowDataCallback_t func);  Set call-back function for data, received from the clients via websocket. ;  ; void SetDefaultPage (const std::string &page);  Set content of default window HTML page This page returns when URL address of the window will be requested Either HTML code or file name in the form ""file:/home/user/data/file.htm"" One also can using default locations like ""file:rootui5sys/canv/canvas.html"". ;  ; void SetDisconnectCallBack (WebWindowConnectCallback_t func);  Set call-back function for disconnecting. ;  ; void SetGeometry (unsigned width, unsigned height);  Set window geometry. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetMaxQueueLength (unsigned len=10);  configures maximal queue length of data which can be held by window ;  ; void SetNativeOnlyConn (bool on=true);  configures that only native (own-created) connections are allowed ;  ; void SetOperationTmout (float tm=50.);  Set timeout for synchronous WebWindow operations. ;  ; void SetPanelName (const std::string &name);  Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ;  ; void SetPosition (unsigned x, unsigned y);  Set window position. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetRequireAuthKey (bool on);  Configure if authentication key in connection string is required. ;  ; void SetUseCurrentDir (bool on=true);  Configure if window can access local files via currentdir/ path of http server. ;  ; void SetUserArgs (const std::string &args);  Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:8723,Modifiability,config,configures,8723,"ring &token="""");  Configures connection token (default none) When specified, in URL of webpage such token should be provided as &token=value parameter, otherwise web window will refuse connection. ;  ; void SetDataCallBack (WebWindowDataCallback_t func);  Set call-back function for data, received from the clients via websocket. ;  ; void SetDefaultPage (const std::string &page);  Set content of default window HTML page This page returns when URL address of the window will be requested Either HTML code or file name in the form ""file:/home/user/data/file.htm"" One also can using default locations like ""file:rootui5sys/canv/canvas.html"". ;  ; void SetDisconnectCallBack (WebWindowConnectCallback_t func);  Set call-back function for disconnecting. ;  ; void SetGeometry (unsigned width, unsigned height);  Set window geometry. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetMaxQueueLength (unsigned len=10);  configures maximal queue length of data which can be held by window ;  ; void SetNativeOnlyConn (bool on=true);  configures that only native (own-created) connections are allowed ;  ; void SetOperationTmout (float tm=50.);  Set timeout for synchronous WebWindow operations. ;  ; void SetPanelName (const std::string &name);  Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ;  ; void SetPosition (unsigned x, unsigned y);  Set window position. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetRequireAuthKey (bool on);  Configure if authentication key in connection string is required. ;  ; void SetUseCurrentDir (bool on=true);  Configure if window can access local files via currentdir/ path of http server. ;  ; void SetUserArgs (const std::string &args);  Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:15361,Modifiability,config,configured,15361," 30 sec is there. ;  ; void CheckPendingConnections ();  Check if started process(es) establish connection. ;  ; void CompleteWSSend (unsigned wsid);  Complete websocket send operation Clear ""doing send"" flag and check if next operation has to be started. ;  ; std::shared_ptr< RWebWindowWSHandler > CreateWSHandler (std::shared_ptr< RWebWindowsManager > mgr, unsigned id, double tmout);  Assigns manager reference, window id and creates websocket handler, used for communication with the clients. ;  ; std::shared_ptr< WebConn > FindConnection (unsigned wsid);  Find connection with specified websocket id. ;  ; unsigned FindHeadlessConnection ();  Returns connection id of window running in headless mode This can be special connection which may run picture production jobs in background Connection to that job may not be initialized yet If connection does not exists, returns 0. ;  ; std::string GenerateKey () const;  Generate new unique key for the window. ;  ; std::string GetConnToken () const;  Returns configured connection token. ;  ; std::vector< MasterConn > GetMasterConnections (unsigned connid=0) const;  Get list of master connections. ;  ; ConnectionsList_t GetWindowConnections (unsigned connid=0, bool only_active=false) const;  returns connection list (or all active connections) ;  ; bool HasKey (const std::string &key, bool also_newkey=false) const;  Returns true if provided key value already exists (in processes map or in existing connections) In special cases one also can check if key value exists as newkey. ;  ; void InvokeCallbacks (bool force=false);  Invoke callbacks with existing data Must be called from appropriate thread. ;  ; unsigned MakeHeadless (bool create_new=false);  Start headless browser for specified window Normally only single instance is used, but many can be created See ROOT::RWebWindowsManager::Show() docu for more info returns (future) connection id (or 0 when fails) ;  ; bool ProcessBatchHolder (std::shared_ptr< THttpCallArg > &arg);  Proce",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:18235,Modifiability,config,configured,18235,"hich has to be used for starting dialog. ;  . Private Attributes; std::thread::id fCallbacksThrdId;  ! thread id where callbacks should be invoked ;  ; bool fCallbacksThrdIdSet {false};  ! flag indicating that thread id is assigned ;  ; std::shared_ptr< void > fClearOnClose;  ! entry which is cleared when last connection is closed ;  ; std::string fClientVersion;  ! configured client version, used as prefix in scripts URL ;  ; ConnectionsList_t fConn;  ! list of all accepted connections ;  ; WebWindowConnectCallback_t fConnCallback;  ! callback for connect event ;  ; unsigned fConnCnt {0};  ! counter of new connections to assign ids ;  ; unsigned fConnLimit {1};  ! number of allowed active connections ;  ; std::mutex fConnMutex;  ! mutex used to protect connection list ;  ; std::string fConnToken;  ! value of ""token"" URL parameter which should be provided for connecting window ;  ; WebWindowDataCallback_t fDataCallback;  ! main callback when data over channel 1 is arrived ;  ; std::string fDefaultPage;  ! HTML page (or file name) returned when window URL is opened ;  ; WebWindowConnectCallback_t fDisconnCallback;  ! callback for disconnect event ;  ; bool fHasWindowThrd {false};  ! indicate if special window thread was started ;  ; unsigned fHeight {0};  ! initial window width and height when displayed, zeros are ignored ;  ; unsigned fId {0};  ! unique identifier ;  ; std::queue< QueueEntry > fInputQueue;  ! input queue for all callbacks ;  ; std::mutex fInputQueueMutex;  ! mutex to protect input queue ;  ; std::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchrono",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:30729,Modifiability,config,configured,30729,"GetClientVersion(). std::string RWebWindow::GetClientVersion ; (; ); const. Returns current client version. ; Definition at line 1298 of file RWebWindow.cxx. ◆ GetConnectionId(). unsigned RWebWindow::GetConnectionId ; (; int ; num = 0); const. Returns connection id for specified connection sequence number Only active connections are returned - where clients confirms connection Total number of connections can be retrieved with NumConnections() method. ; Parameters. numconnection sequence number . Definition at line 1370 of file RWebWindow.cxx. ◆ GetConnections(). std::vector< unsigned > RWebWindow::GetConnections ; (; unsigned ; excludeid = 0); const. returns vector with all existing connections ids One also can exclude specified connection from return result, which can be useful to be able reply too all but this connections ; Definition at line 1387 of file RWebWindow.cxx. ◆ GetConnLimit(). unsigned RWebWindow::GetConnLimit ; (; ); const. returns configured connections limit (0 - default) ; Definition at line 703 of file RWebWindow.cxx. ◆ GetConnToken(). std::string RWebWindow::GetConnToken ; (; ); const. private . Returns configured connection token. ; Definition at line 725 of file RWebWindow.cxx. ◆ GetDisplayConnection(). unsigned RWebWindow::GetDisplayConnection ; (; ); const. Returns first connection id where window is displayed It could be that connection(s) not yet fully established - but also not timed out Batch jobs will be ignored here Returns 0 if connection not exists. ; Definition at line 244 of file RWebWindow.cxx. ◆ GetHeight(). unsigned ROOT::RWebWindow::GetHeight ; (; ); const. inline . returns configured window height (0 - default) ; Definition at line 282 of file RWebWindow.hxx. ◆ GetId(). unsigned ROOT::RWebWindow::GetId ; (; ); const. inline . Returns ID for the window - unique inside window manager. ; Definition at line 248 of file RWebWindow.hxx. ◆ GetManager(). std::shared_ptr< RWebWindowsManager > ROOT::RWebWindow::GetManager ; (; ); const. ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:30909,Modifiability,config,configured,30909,"ow.cxx. ◆ GetConnectionId(). unsigned RWebWindow::GetConnectionId ; (; int ; num = 0); const. Returns connection id for specified connection sequence number Only active connections are returned - where clients confirms connection Total number of connections can be retrieved with NumConnections() method. ; Parameters. numconnection sequence number . Definition at line 1370 of file RWebWindow.cxx. ◆ GetConnections(). std::vector< unsigned > RWebWindow::GetConnections ; (; unsigned ; excludeid = 0); const. returns vector with all existing connections ids One also can exclude specified connection from return result, which can be useful to be able reply too all but this connections ; Definition at line 1387 of file RWebWindow.cxx. ◆ GetConnLimit(). unsigned RWebWindow::GetConnLimit ; (; ); const. returns configured connections limit (0 - default) ; Definition at line 703 of file RWebWindow.cxx. ◆ GetConnToken(). std::string RWebWindow::GetConnToken ; (; ); const. private . Returns configured connection token. ; Definition at line 725 of file RWebWindow.cxx. ◆ GetDisplayConnection(). unsigned RWebWindow::GetDisplayConnection ; (; ); const. Returns first connection id where window is displayed It could be that connection(s) not yet fully established - but also not timed out Batch jobs will be ignored here Returns 0 if connection not exists. ; Definition at line 244 of file RWebWindow.cxx. ◆ GetHeight(). unsigned ROOT::RWebWindow::GetHeight ; (; ); const. inline . returns configured window height (0 - default) ; Definition at line 282 of file RWebWindow.hxx. ◆ GetId(). unsigned ROOT::RWebWindow::GetId ; (; ); const. inline . Returns ID for the window - unique inside window manager. ; Definition at line 248 of file RWebWindow.hxx. ◆ GetManager(). std::shared_ptr< RWebWindowsManager > ROOT::RWebWindow::GetManager ; (; ); const. inline . Returns window manager. ; Definition at line 251 of file RWebWindow.hxx. ◆ GetMasterConnections(). std::vector< RWebWindow::MasterConn > RWebW",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:31407,Modifiability,config,configured,31407,"th all existing connections ids One also can exclude specified connection from return result, which can be useful to be able reply too all but this connections ; Definition at line 1387 of file RWebWindow.cxx. ◆ GetConnLimit(). unsigned RWebWindow::GetConnLimit ; (; ); const. returns configured connections limit (0 - default) ; Definition at line 703 of file RWebWindow.cxx. ◆ GetConnToken(). std::string RWebWindow::GetConnToken ; (; ); const. private . Returns configured connection token. ; Definition at line 725 of file RWebWindow.cxx. ◆ GetDisplayConnection(). unsigned RWebWindow::GetDisplayConnection ; (; ); const. Returns first connection id where window is displayed It could be that connection(s) not yet fully established - but also not timed out Batch jobs will be ignored here Returns 0 if connection not exists. ; Definition at line 244 of file RWebWindow.cxx. ◆ GetHeight(). unsigned ROOT::RWebWindow::GetHeight ; (; ); const. inline . returns configured window height (0 - default) ; Definition at line 282 of file RWebWindow.hxx. ◆ GetId(). unsigned ROOT::RWebWindow::GetId ; (; ); const. inline . Returns ID for the window - unique inside window manager. ; Definition at line 248 of file RWebWindow.hxx. ◆ GetManager(). std::shared_ptr< RWebWindowsManager > ROOT::RWebWindow::GetManager ; (; ); const. inline . Returns window manager. ; Definition at line 251 of file RWebWindow.hxx. ◆ GetMasterConnections(). std::vector< RWebWindow::MasterConn > RWebWindow::GetMasterConnections ; (; unsigned ; connid = 0); const. private . Get list of master connections. ; Definition at line 325 of file RWebWindow.cxx. ◆ GetMaxQueueLength(). unsigned ROOT::RWebWindow::GetMaxQueueLength ; (; ); const. inline . Return maximal queue length of data which can be held by window. ; Definition at line 304 of file RWebWindow.hxx. ◆ GetOperationTmout(). float ROOT::RWebWindow::GetOperationTmout ; (; ); const. inline . Returns timeout for synchronous WebWindow operations. ; Definition at line ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:34431,Modifiability,config,configured,34431," Definition at line 1509 of file RWebWindow.cxx. ◆ GetServer(). THttpServer * RWebWindow::GetServer ; (; ). Return THttpServer instance serving requests to the window. ; Definition at line 181 of file RWebWindow.cxx. ◆ GetUrl(). std::string RWebWindow::GetUrl ; (; bool ; remote = true). Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ; Parameters. remoteis true, real HTTP server will be started automatically and widget can be connected from the web browser. If; remoteis false, HTTP server will not be started and window can be connected only from ROOT application itself. !!! WARNING - do not invoke this method without real need, each URL consumes resources in widget and in http server . Definition at line 173 of file RWebWindow.cxx. ◆ GetUserArgs(). std::string RWebWindow::GetUserArgs ; (; ); const. Returns configured user arguments for web window See SetUserArgs method for more details. ; Definition at line 1320 of file RWebWindow.cxx. ◆ GetWidth(). unsigned ROOT::RWebWindow::GetWidth ; (; ); const. inline . returns configured window width (0 - default) actual window width can be different ; Definition at line 278 of file RWebWindow.hxx. ◆ GetWindowConnections(). RWebWindow::ConnectionsList_t RWebWindow::GetWindowConnections ; (; unsigned ; connid = 0, . bool ; only_active = false . ); const. private . returns connection list (or all active connections) ; Parameters. connidconnection id, when 0 - all existing connections are returned ; only_activewhen true, only active (already established) connections are returned . Definition at line 1458 of file RWebWindow.cxx. ◆ GetX(). int ROOT::RWebWindow::GetX ; (; ); const. inline . returns configured window X position (-1 - default) ; Definition at line 286 of file RWebWindow.hxx. ◆ GetY(). int ROOT::RWebWindow::GetY ; (; ); const. inline . returns configured window Y position (-1",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:34645,Modifiability,config,configured,34645,":string RWebWindow::GetUrl ; (; bool ; remote = true). Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ; Parameters. remoteis true, real HTTP server will be started automatically and widget can be connected from the web browser. If; remoteis false, HTTP server will not be started and window can be connected only from ROOT application itself. !!! WARNING - do not invoke this method without real need, each URL consumes resources in widget and in http server . Definition at line 173 of file RWebWindow.cxx. ◆ GetUserArgs(). std::string RWebWindow::GetUserArgs ; (; ); const. Returns configured user arguments for web window See SetUserArgs method for more details. ; Definition at line 1320 of file RWebWindow.cxx. ◆ GetWidth(). unsigned ROOT::RWebWindow::GetWidth ; (; ); const. inline . returns configured window width (0 - default) actual window width can be different ; Definition at line 278 of file RWebWindow.hxx. ◆ GetWindowConnections(). RWebWindow::ConnectionsList_t RWebWindow::GetWindowConnections ; (; unsigned ; connid = 0, . bool ; only_active = false . ); const. private . returns connection list (or all active connections) ; Parameters. connidconnection id, when 0 - all existing connections are returned ; only_activewhen true, only active (already established) connections are returned . Definition at line 1458 of file RWebWindow.cxx. ◆ GetX(). int ROOT::RWebWindow::GetX ; (; ); const. inline . returns configured window X position (-1 - default) ; Definition at line 286 of file RWebWindow.hxx. ◆ GetY(). int ROOT::RWebWindow::GetY ; (; ); const. inline . returns configured window Y position (-1 - default) ; Definition at line 290 of file RWebWindow.hxx. ◆ HasConnection(). bool RWebWindow::HasConnection ; (; unsigned ; connid = 0, . bool ; only_active = true . ); const. returns true if specified connection id exists ; Param",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:35273,Modifiability,config,configured,35273,"nition at line 173 of file RWebWindow.cxx. ◆ GetUserArgs(). std::string RWebWindow::GetUserArgs ; (; ); const. Returns configured user arguments for web window See SetUserArgs method for more details. ; Definition at line 1320 of file RWebWindow.cxx. ◆ GetWidth(). unsigned ROOT::RWebWindow::GetWidth ; (; ); const. inline . returns configured window width (0 - default) actual window width can be different ; Definition at line 278 of file RWebWindow.hxx. ◆ GetWindowConnections(). RWebWindow::ConnectionsList_t RWebWindow::GetWindowConnections ; (; unsigned ; connid = 0, . bool ; only_active = false . ); const. private . returns connection list (or all active connections) ; Parameters. connidconnection id, when 0 - all existing connections are returned ; only_activewhen true, only active (already established) connections are returned . Definition at line 1458 of file RWebWindow.cxx. ◆ GetX(). int ROOT::RWebWindow::GetX ; (; ); const. inline . returns configured window X position (-1 - default) ; Definition at line 286 of file RWebWindow.hxx. ◆ GetY(). int ROOT::RWebWindow::GetY ; (; ); const. inline . returns configured window Y position (-1 - default) ; Definition at line 290 of file RWebWindow.hxx. ◆ HasConnection(). bool RWebWindow::HasConnection ; (; unsigned ; connid = 0, . bool ; only_active = true . ); const. returns true if specified connection id exists ; Parameters. connidconnection id (0 - any) ; only_activewhen true only active connection will be checked, otherwise also pending (not yet established) connections are checked . Definition at line 1413 of file RWebWindow.cxx. ◆ HasKey(). bool RWebWindow::HasKey ; (; const std::string & ; key, . bool ; also_newkey = false . ); const. private . Returns true if provided key value already exists (in processes map or in existing connections) In special cases one also can check if key value exists as newkey. ; Definition at line 558 of file RWebWindow.cxx. ◆ HMAC(). std::string RWebWindow::HMAC ; (; const std::string &",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:35435,Modifiability,config,configured,35435,"e SetUserArgs method for more details. ; Definition at line 1320 of file RWebWindow.cxx. ◆ GetWidth(). unsigned ROOT::RWebWindow::GetWidth ; (; ); const. inline . returns configured window width (0 - default) actual window width can be different ; Definition at line 278 of file RWebWindow.hxx. ◆ GetWindowConnections(). RWebWindow::ConnectionsList_t RWebWindow::GetWindowConnections ; (; unsigned ; connid = 0, . bool ; only_active = false . ); const. private . returns connection list (or all active connections) ; Parameters. connidconnection id, when 0 - all existing connections are returned ; only_activewhen true, only active (already established) connections are returned . Definition at line 1458 of file RWebWindow.cxx. ◆ GetX(). int ROOT::RWebWindow::GetX ; (; ); const. inline . returns configured window X position (-1 - default) ; Definition at line 286 of file RWebWindow.hxx. ◆ GetY(). int ROOT::RWebWindow::GetY ; (; ); const. inline . returns configured window Y position (-1 - default) ; Definition at line 290 of file RWebWindow.hxx. ◆ HasConnection(). bool RWebWindow::HasConnection ; (; unsigned ; connid = 0, . bool ; only_active = true . ); const. returns true if specified connection id exists ; Parameters. connidconnection id (0 - any) ; only_activewhen true only active connection will be checked, otherwise also pending (not yet established) connections are checked . Definition at line 1413 of file RWebWindow.cxx. ◆ HasKey(). bool RWebWindow::HasKey ; (; const std::string & ; key, . bool ; also_newkey = false . ); const. private . Returns true if provided key value already exists (in processes map or in existing connections) In special cases one also can check if key value exists as newkey. ; Definition at line 558 of file RWebWindow.cxx. ◆ HMAC(). std::string RWebWindow::HMAC ; (; const std::string & ; key, . const std::string & ; sessionKey, . const char * ; msg, . int ; msglen . ). staticprivate . Calculate HMAC checksum for provided key and message Key com",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:46464,Modifiability,config,configures,46464,"ge(). void ROOT::RWebWindow::SetDefaultPage ; (; const std::string & ; page). inline . Set content of default window HTML page This page returns when URL address of the window will be requested Either HTML code or file name in the form ""file:/home/user/data/file.htm"" One also can using default locations like ""file:rootui5sys/canv/canvas.html"". ; Definition at line 257 of file RWebWindow.hxx. ◆ SetDisconnectCallBack(). void RWebWindow::SetDisconnectCallBack ; (; WebWindowConnectCallback_t ; func). Set call-back function for disconnecting. ; Definition at line 1753 of file RWebWindow.cxx. ◆ SetGeometry(). void ROOT::RWebWindow::SetGeometry ; (; unsigned ; width, . unsigned ; height . ). inline . Set window geometry. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 262 of file RWebWindow.hxx. ◆ SetMaxQueueLength(). void ROOT::RWebWindow::SetMaxQueueLength ; (; unsigned ; len = 10). inline . configures maximal queue length of data which can be held by window ; Definition at line 300 of file RWebWindow.hxx. ◆ SetNativeOnlyConn(). void ROOT::RWebWindow::SetNativeOnlyConn ; (; bool ; on = true). inline . configures that only native (own-created) connections are allowed ; Definition at line 308 of file RWebWindow.hxx. ◆ SetOperationTmout(). void ROOT::RWebWindow::SetOperationTmout ; (; float ; tm = 50.). inline . Set timeout for synchronous WebWindow operations. ; Definition at line 354 of file RWebWindow.hxx. ◆ SetPanelName(). void RWebWindow::SetPanelName ; (; const std::string & ; name). Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ; Definition at line 132 of file RWebWindow.cxx. ◆ SetPosition(). void ROOT::RWebWindow::SetPosition ; (; unsigned ; x, . unsigned ; y . ). inline . Set window position. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 269 of file RWebWindow.hx",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:46678,Modifiability,config,configures,46678," file name in the form ""file:/home/user/data/file.htm"" One also can using default locations like ""file:rootui5sys/canv/canvas.html"". ; Definition at line 257 of file RWebWindow.hxx. ◆ SetDisconnectCallBack(). void RWebWindow::SetDisconnectCallBack ; (; WebWindowConnectCallback_t ; func). Set call-back function for disconnecting. ; Definition at line 1753 of file RWebWindow.cxx. ◆ SetGeometry(). void ROOT::RWebWindow::SetGeometry ; (; unsigned ; width, . unsigned ; height . ). inline . Set window geometry. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 262 of file RWebWindow.hxx. ◆ SetMaxQueueLength(). void ROOT::RWebWindow::SetMaxQueueLength ; (; unsigned ; len = 10). inline . configures maximal queue length of data which can be held by window ; Definition at line 300 of file RWebWindow.hxx. ◆ SetNativeOnlyConn(). void ROOT::RWebWindow::SetNativeOnlyConn ; (; bool ; on = true). inline . configures that only native (own-created) connections are allowed ; Definition at line 308 of file RWebWindow.hxx. ◆ SetOperationTmout(). void ROOT::RWebWindow::SetOperationTmout ; (; float ; tm = 50.). inline . Set timeout for synchronous WebWindow operations. ; Definition at line 354 of file RWebWindow.hxx. ◆ SetPanelName(). void RWebWindow::SetPanelName ; (; const std::string & ; name). Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ; Definition at line 132 of file RWebWindow.cxx. ◆ SetPosition(). void ROOT::RWebWindow::SetPosition ; (; unsigned ; x, . unsigned ; y . ). inline . Set window position. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 269 of file RWebWindow.hxx. ◆ SetRequireAuthKey(). void ROOT::RWebWindow::SetRequireAuthKey ; (; bool ; on). inline . Configure if authentication key in connection string is required. ; Definition at line 316 of file RWebWindow.hxx. ◆ Set",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:53873,Modifiability,config,configured,53873,"nd class RWebDisplayHandle. friend . Definition at line 56 of file RWebWindow.hxx. ◆ RWebWindowsManager. friend class RWebWindowsManager. friend . Definition at line 54 of file RWebWindow.hxx. ◆ RWebWindowWSHandler. friend class RWebWindowWSHandler. friend . Definition at line 55 of file RWebWindow.hxx. Member Data Documentation. ◆ fCallbacksThrdId. std::thread::id ROOT::RWebWindow::fCallbacksThrdId. private . ! thread id where callbacks should be invoked ; Definition at line 160 of file RWebWindow.hxx. ◆ fCallbacksThrdIdSet. bool ROOT::RWebWindow::fCallbacksThrdIdSet {false}. private . ! flag indicating that thread id is assigned ; Definition at line 161 of file RWebWindow.hxx. ◆ fClearOnClose. std::shared_ptr<void> ROOT::RWebWindow::fClearOnClose. private . ! entry which is cleared when last connection is closed ; Definition at line 176 of file RWebWindow.hxx. ◆ fClientVersion. std::string ROOT::RWebWindow::fClientVersion. private . ! configured client version, used as prefix in scripts URL ; Definition at line 169 of file RWebWindow.hxx. ◆ fConn. ConnectionsList_t ROOT::RWebWindow::fConn. private . ! list of all accepted connections ; Definition at line 150 of file RWebWindow.hxx. ◆ fConnCallback. WebWindowConnectCallback_t ROOT::RWebWindow::fConnCallback. private . ! callback for connect event ; Definition at line 157 of file RWebWindow.hxx. ◆ fConnCnt. unsigned ROOT::RWebWindow::fConnCnt {0}. private . ! counter of new connections to assign ids ; Definition at line 148 of file RWebWindow.hxx. ◆ fConnLimit. unsigned ROOT::RWebWindow::fConnLimit {1}. private . ! number of allowed active connections ; Definition at line 152 of file RWebWindow.hxx. ◆ fConnMutex. std::mutex ROOT::RWebWindow::fConnMutex. mutableprivate . ! mutex used to protect connection list ; Definition at line 151 of file RWebWindow.hxx. ◆ fConnToken. std::string ROOT::RWebWindow::fConnToken. private . ! value of ""token"" URL parameter which should be provided for connecting window ; Definition at",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:2060,Performance,perform,performed,2060,"etDefaultPage() method.; Typically (but not necessarily) clients open web socket connection to the window and one can exchange data, using RWebWindow::Send() method and call-back function assigned via RWebWindow::SetDataCallBack(). ; Definition at line 52 of file RWebWindow.hxx. Classes; struct  MasterConn;  ; struct  QueueEntry;  ; struct  QueueItem;  ; struct  WebConn;  . Public Member Functions;  RWebWindow ();  RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ;  ;  ~RWebWindow ();  RWebWindow destructor Closes all connections and remove window from manager. ;  ; void AssignThreadId ();  Assign thread id which has to be used for callbacks WARNING!!! only for expert use Automatically done at the moment when any callback function is invoked Can be invoked once again if window Run method will be invoked from other thread Normally should be invoked before Show() method is called. ;  ; bool CanSend (unsigned connid, bool direct=true) const;  Returns true if sending via specified connection can be performed. ;  ; void CloseConnection (unsigned connid);  Close specified connection. ;  ; void CloseConnections ();  Closes all connection to clients Normally leads to closing of all correspondent browser windows Some browsers (like firefox) do not allow by default to close window. ;  ; std::string GetAddr () const;  Returns window address which is used in URL. ;  ; std::string GetClientVersion () const;  Returns current client version. ;  ; unsigned GetConnectionId (int num=0) const;  Returns connection id for specified connection sequence number Only active connections are returned - where clients confirms connection Total number of connections can be retrieved with NumConnections() method. ;  ; std::vector< unsigned > GetConnections (unsigned excludeid=0) const;  returns vector with all existing connections ids One also can exclude specified connection from return result, which can be useful to be able reply too all but this conn",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:3671,Performance,queue,queue,3671," confirms connection Total number of connections can be retrieved with NumConnections() method. ;  ; std::vector< unsigned > GetConnections (unsigned excludeid=0) const;  returns vector with all existing connections ids One also can exclude specified connection from return result, which can be useful to be able reply too all but this connections ;  ; unsigned GetConnLimit () const;  returns configured connections limit (0 - default) ;  ; unsigned GetDisplayConnection () const;  Returns first connection id where window is displayed It could be that connection(s) not yet fully established - but also not timed out Batch jobs will be ignored here Returns 0 if connection not exists. ;  ; unsigned GetHeight () const;  returns configured window height (0 - default) ;  ; unsigned GetId () const;  Returns ID for the window - unique inside window manager. ;  ; std::shared_ptr< RWebWindowsManager > GetManager () const;  Returns window manager. ;  ; unsigned GetMaxQueueLength () const;  Return maximal queue length of data which can be held by window. ;  ; float GetOperationTmout () const;  Returns timeout for synchronous WebWindow operations. ;  ; std::string GetRelativeAddr (const RWebWindow &win) const;  Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ;  ; std::string GetRelativeAddr (const std::shared_ptr< RWebWindow > &win) const;  Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:4419,Performance,queue,queue,4419,"ed window height (0 - default) ;  ; unsigned GetId () const;  Returns ID for the window - unique inside window manager. ;  ; std::shared_ptr< RWebWindowsManager > GetManager () const;  Returns window manager. ;  ; unsigned GetMaxQueueLength () const;  Return maximal queue length of data which can be held by window. ;  ; float GetOperationTmout () const;  Returns timeout for synchronous WebWindow operations. ;  ; std::string GetRelativeAddr (const RWebWindow &win) const;  Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ;  ; std::string GetRelativeAddr (const std::shared_ptr< RWebWindow > &win) const;  Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ;  ; std::string GetUserArgs () const;  Returns configured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth () const;  returns configured window width (0 - default) actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool HasConnection (unsigned connid=0, bool only_active=true) const;  returns true if specified connection id exists ;  ; bool IsNativeOnlyConn () const;  returns true if only native (own-created) connection",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:6223,Performance,perform,performed,6223,"nection (unsigned connid=0, bool only_active=true) const;  returns true if specified connection id exists ;  ; bool IsNativeOnlyConn () const;  returns true if only native (own-created) connections are allowed ;  ; bool IsRequireAuthKey () const;  returns true if authentication string is required ;  ; bool IsShown () const;  Returns true when window was shown at least once. ;  ; bool IsUseCurrentDir () const;  returns true if window can access local files via currentdir/ path of http server ;  ; int NumConnections (bool with_pending=false) const;  Returns current number of active clients connections. ;  ; void RecordData (const std::string &fname=""protocol.json"", const std::string &fprefix="""");  Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ;  ; void Run (double tm=0.);  Run window functionality for specified time If no action can be performed - just sleep specified time. ;  ; void Send (unsigned connid, const std::string &data);  Sends data to specified connection. ;  ; void SendBinary (unsigned connid, const void *data, std::size_t len);  Send binary data to specified connection. ;  ; void SendBinary (unsigned connid, std::string &&data);  Send binary data to specified connection. ;  ; void SetCallBacks (WebWindowConnectCallback_t conn, WebWindowDataCallback_t data, WebWindowConnectCallback_t disconn=nullptr);  Set call-backs function for connect, data and disconnect events. ;  ; void SetClearOnClose (const std::shared_ptr< void > &handle=nullptr);  Set handle which is cleared when last active connection is closed Typically can be used to destroy web-based widget at such moment. ;  ; void SetClientVersion (const std::string &vers);  Set client version, used as prefix in scripts URL When changed, web browser will reload all related JS files while full URL will be different Default is empty value - n",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:8629,Performance,queue,queue,8629,"ring &token="""");  Configures connection token (default none) When specified, in URL of webpage such token should be provided as &token=value parameter, otherwise web window will refuse connection. ;  ; void SetDataCallBack (WebWindowDataCallback_t func);  Set call-back function for data, received from the clients via websocket. ;  ; void SetDefaultPage (const std::string &page);  Set content of default window HTML page This page returns when URL address of the window will be requested Either HTML code or file name in the form ""file:/home/user/data/file.htm"" One also can using default locations like ""file:rootui5sys/canv/canvas.html"". ;  ; void SetDisconnectCallBack (WebWindowConnectCallback_t func);  Set call-back function for disconnecting. ;  ; void SetGeometry (unsigned width, unsigned height);  Set window geometry. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetMaxQueueLength (unsigned len=10);  configures maximal queue length of data which can be held by window ;  ; void SetNativeOnlyConn (bool on=true);  configures that only native (own-created) connections are allowed ;  ; void SetOperationTmout (float tm=50.);  Set timeout for synchronous WebWindow operations. ;  ; void SetPanelName (const std::string &name);  Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ;  ; void SetPosition (unsigned x, unsigned y);  Set window position. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetRequireAuthKey (bool on);  Configure if authentication key in connection string is required. ;  ; void SetUseCurrentDir (bool on=true);  Configure if window can access local files via currentdir/ path of http server. ;  ; void SetUserArgs (const std::string &args);  Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:14172,Performance,perform,performed,14172,"tr< WebConn > &conn, bool txt, const std::string &data, int chid);  Internal method to prepare text part of send data Should be called under locked connection mutex. ;  ; unsigned AddDisplayHandle (bool headless_mode, const std::string &key, std::unique_ptr< RWebDisplayHandle > &handle);  Add display handle and associated key Key is large random string generated when starting new window When client is connected, key should be supplied to correctly identify it. ;  ; unsigned AddEmbedWindow (std::shared_ptr< RWebWindow > window, unsigned connid, int channel);  Add embed window. ;  ; void AddMasterConnection (std::shared_ptr< RWebWindow > window, unsigned connid, int channel);  Add new master connection If there are many connections - only same master is allowed. ;  ; void CheckDataToSend (bool only_once=false);  Checks if new data can be send (internal use only) If necessary, provide credits to the client. ;  ; bool CheckDataToSend (std::shared_ptr< WebConn > &conn);  Checks if one should send data for specified connection Returns true when send operation was performed. ;  ; void CheckInactiveConnections ();  Check if there are connection which are inactive for longer time For instance, batch browser will be stopped if no activity for 30 sec is there. ;  ; void CheckPendingConnections ();  Check if started process(es) establish connection. ;  ; void CompleteWSSend (unsigned wsid);  Complete websocket send operation Clear ""doing send"" flag and check if next operation has to be started. ;  ; std::shared_ptr< RWebWindowWSHandler > CreateWSHandler (std::shared_ptr< RWebWindowsManager > mgr, unsigned id, double tmout);  Assigns manager reference, window id and creates websocket handler, used for communication with the clients. ;  ; std::shared_ptr< WebConn > FindConnection (unsigned wsid);  Find connection with specified websocket id. ;  ; unsigned FindHeadlessConnection ();  Returns connection id of window running in headless mode This can be special connection which may r",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:19263,Performance,queue,queue,19263,"hich has to be used for starting dialog. ;  . Private Attributes; std::thread::id fCallbacksThrdId;  ! thread id where callbacks should be invoked ;  ; bool fCallbacksThrdIdSet {false};  ! flag indicating that thread id is assigned ;  ; std::shared_ptr< void > fClearOnClose;  ! entry which is cleared when last connection is closed ;  ; std::string fClientVersion;  ! configured client version, used as prefix in scripts URL ;  ; ConnectionsList_t fConn;  ! list of all accepted connections ;  ; WebWindowConnectCallback_t fConnCallback;  ! callback for connect event ;  ; unsigned fConnCnt {0};  ! counter of new connections to assign ids ;  ; unsigned fConnLimit {1};  ! number of allowed active connections ;  ; std::mutex fConnMutex;  ! mutex used to protect connection list ;  ; std::string fConnToken;  ! value of ""token"" URL parameter which should be provided for connecting window ;  ; WebWindowDataCallback_t fDataCallback;  ! main callback when data over channel 1 is arrived ;  ; std::string fDefaultPage;  ! HTML page (or file name) returned when window URL is opened ;  ; WebWindowConnectCallback_t fDisconnCallback;  ! callback for disconnect event ;  ; bool fHasWindowThrd {false};  ! indicate if special window thread was started ;  ; unsigned fHeight {0};  ! initial window width and height when displayed, zeros are ignored ;  ; unsigned fId {0};  ! unique identifier ;  ; std::queue< QueueEntry > fInputQueue;  ! input queue for all callbacks ;  ; std::mutex fInputQueueMutex;  ! mutex to protect input queue ;  ; std::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchrono",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:19305,Performance,queue,queue,19305,"hich has to be used for starting dialog. ;  . Private Attributes; std::thread::id fCallbacksThrdId;  ! thread id where callbacks should be invoked ;  ; bool fCallbacksThrdIdSet {false};  ! flag indicating that thread id is assigned ;  ; std::shared_ptr< void > fClearOnClose;  ! entry which is cleared when last connection is closed ;  ; std::string fClientVersion;  ! configured client version, used as prefix in scripts URL ;  ; ConnectionsList_t fConn;  ! list of all accepted connections ;  ; WebWindowConnectCallback_t fConnCallback;  ! callback for connect event ;  ; unsigned fConnCnt {0};  ! counter of new connections to assign ids ;  ; unsigned fConnLimit {1};  ! number of allowed active connections ;  ; std::mutex fConnMutex;  ! mutex used to protect connection list ;  ; std::string fConnToken;  ! value of ""token"" URL parameter which should be provided for connecting window ;  ; WebWindowDataCallback_t fDataCallback;  ! main callback when data over channel 1 is arrived ;  ; std::string fDefaultPage;  ! HTML page (or file name) returned when window URL is opened ;  ; WebWindowConnectCallback_t fDisconnCallback;  ! callback for disconnect event ;  ; bool fHasWindowThrd {false};  ! indicate if special window thread was started ;  ; unsigned fHeight {0};  ! initial window width and height when displayed, zeros are ignored ;  ; unsigned fId {0};  ! unique identifier ;  ; std::queue< QueueEntry > fInputQueue;  ! input queue for all callbacks ;  ; std::mutex fInputQueueMutex;  ! mutex to protect input queue ;  ; std::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchrono",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:19389,Performance,queue,queue,19389,"hich has to be used for starting dialog. ;  . Private Attributes; std::thread::id fCallbacksThrdId;  ! thread id where callbacks should be invoked ;  ; bool fCallbacksThrdIdSet {false};  ! flag indicating that thread id is assigned ;  ; std::shared_ptr< void > fClearOnClose;  ! entry which is cleared when last connection is closed ;  ; std::string fClientVersion;  ! configured client version, used as prefix in scripts URL ;  ; ConnectionsList_t fConn;  ! list of all accepted connections ;  ; WebWindowConnectCallback_t fConnCallback;  ! callback for connect event ;  ; unsigned fConnCnt {0};  ! counter of new connections to assign ids ;  ; unsigned fConnLimit {1};  ! number of allowed active connections ;  ; std::mutex fConnMutex;  ! mutex used to protect connection list ;  ; std::string fConnToken;  ! value of ""token"" URL parameter which should be provided for connecting window ;  ; WebWindowDataCallback_t fDataCallback;  ! main callback when data over channel 1 is arrived ;  ; std::string fDefaultPage;  ! HTML page (or file name) returned when window URL is opened ;  ; WebWindowConnectCallback_t fDisconnCallback;  ! callback for disconnect event ;  ; bool fHasWindowThrd {false};  ! indicate if special window thread was started ;  ; unsigned fHeight {0};  ! initial window width and height when displayed, zeros are ignored ;  ; unsigned fId {0};  ! unique identifier ;  ; std::queue< QueueEntry > fInputQueue;  ! input queue for all callbacks ;  ; std::mutex fInputQueueMutex;  ! mutex to protect input queue ;  ; std::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchrono",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:19610,Performance,queue,queue,19610,"hich has to be used for starting dialog. ;  . Private Attributes; std::thread::id fCallbacksThrdId;  ! thread id where callbacks should be invoked ;  ; bool fCallbacksThrdIdSet {false};  ! flag indicating that thread id is assigned ;  ; std::shared_ptr< void > fClearOnClose;  ! entry which is cleared when last connection is closed ;  ; std::string fClientVersion;  ! configured client version, used as prefix in scripts URL ;  ; ConnectionsList_t fConn;  ! list of all accepted connections ;  ; WebWindowConnectCallback_t fConnCallback;  ! callback for connect event ;  ; unsigned fConnCnt {0};  ! counter of new connections to assign ids ;  ; unsigned fConnLimit {1};  ! number of allowed active connections ;  ; std::mutex fConnMutex;  ! mutex used to protect connection list ;  ; std::string fConnToken;  ! value of ""token"" URL parameter which should be provided for connecting window ;  ; WebWindowDataCallback_t fDataCallback;  ! main callback when data over channel 1 is arrived ;  ; std::string fDefaultPage;  ! HTML page (or file name) returned when window URL is opened ;  ; WebWindowConnectCallback_t fDisconnCallback;  ! callback for disconnect event ;  ; bool fHasWindowThrd {false};  ! indicate if special window thread was started ;  ; unsigned fHeight {0};  ! initial window width and height when displayed, zeros are ignored ;  ; unsigned fId {0};  ! unique identifier ;  ; std::queue< QueueEntry > fInputQueue;  ! input queue for all callbacks ;  ; std::mutex fInputQueueMutex;  ! mutex to protect input queue ;  ; std::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchrono",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:19850,Performance,perform,perform,19850,"::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchronous operation, default 50s ;  ; std::string fPanelName;  ! panel name which should be shown in the window ;  ; ConnectionsList_t fPendingConn;  ! list of pending connection with pre-assigned keys ;  ; bool fProcessMT {false};  ! if window event processing performed in dedicated thread ;  ; std::string fProtocol;  ! protocol ;  ; int fProtocolCnt {-1};  ! counter for protocol recording ;  ; unsigned fProtocolConnId {0};  ! connection id, which is used for writing protocol ;  ; std::string fProtocolFileName;  ! local file where communication protocol will be written ;  ; std::string fProtocolPrefix;  ! prefix for created files names ;  ; bool fRequireAuthKey {true};  ! defines if authentication key always required when connect to the widget ;  ; bool fSendMT {false};  ! true is special threads should be used for sending data ;  ; bool fUseCurrentDir {false};  ! if window can access local files via currentdir/ path of http server ;  ; bool fUseProcessEvents {false};  ! all window functionality will run through process events ;  ; std::string fUserArgs;  ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ;  ; bool fUseServerThreads {false};  ! indicates that server thread is using, no special window thread ;  ; unsigned fWidth {0};  ; std::thread fWindowThrd;  ! special thread for that window ;  ; std::shared_ptr< RWebWindowWSHandler > fWSHandler;  ! specialize websocket handler for all incoming connections ;  ; int fX {-1};  ; int fY {-1};  ! initial window position, -1 ignored ;  . Static Priv",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:20122,Performance,perform,performed,20122,"::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchronous operation, default 50s ;  ; std::string fPanelName;  ! panel name which should be shown in the window ;  ; ConnectionsList_t fPendingConn;  ! list of pending connection with pre-assigned keys ;  ; bool fProcessMT {false};  ! if window event processing performed in dedicated thread ;  ; std::string fProtocol;  ! protocol ;  ; int fProtocolCnt {-1};  ! counter for protocol recording ;  ; unsigned fProtocolConnId {0};  ! connection id, which is used for writing protocol ;  ; std::string fProtocolFileName;  ! local file where communication protocol will be written ;  ; std::string fProtocolPrefix;  ! prefix for created files names ;  ; bool fRequireAuthKey {true};  ! defines if authentication key always required when connect to the widget ;  ; bool fSendMT {false};  ! true is special threads should be used for sending data ;  ; bool fUseCurrentDir {false};  ! if window can access local files via currentdir/ path of http server ;  ; bool fUseProcessEvents {false};  ! all window functionality will run through process events ;  ; std::string fUserArgs;  ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ;  ; bool fUseServerThreads {false};  ! indicates that server thread is using, no special window thread ;  ; unsigned fWidth {0};  ; std::thread fWindowThrd;  ! special thread for that window ;  ; std::shared_ptr< RWebWindowWSHandler > fWSHandler;  ! specialize websocket handler for all incoming connections ;  ; int fX {-1};  ; int fY {-1};  ! initial window position, -1 ignored ;  . Static Priv",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:25338,Performance,perform,performed,25338,"Window ; (; std::shared_ptr< RWebWindow > ; window, . unsigned ; connid, . int ; channel . ). private . Add embed window. ; Definition at line 1846 of file RWebWindow.cxx. ◆ AddMasterConnection(). void RWebWindow::AddMasterConnection ; (; std::shared_ptr< RWebWindow > ; window, . unsigned ; connid, . int ; channel . ). private . Add new master connection If there are many connections - only same master is allowed. ; Definition at line 310 of file RWebWindow.cxx. ◆ AssignThreadId(). void RWebWindow::AssignThreadId ; (; ). Assign thread id which has to be used for callbacks WARNING!!! only for expert use Automatically done at the moment when any callback function is invoked Can be invoked once again if window Run method will be invoked from other thread Normally should be invoked before Show() method is called. ; Definition at line 1645 of file RWebWindow.cxx. ◆ CanSend(). bool RWebWindow::CanSend ; (; unsigned ; connid, . bool ; direct = true . ); const. Returns true if sending via specified connection can be performed. ; Parameters. connidconnection id, when 0 - all existing connections are checked ; directwhen true, checks if direct sending (without queuing) is possible . Definition at line 1484 of file RWebWindow.cxx. ◆ CheckDataToSend() [1/2]. void RWebWindow::CheckDataToSend ; (; bool ; only_once = false). private . Checks if new data can be send (internal use only) If necessary, provide credits to the client. ; Parameters. only_onceif true, data sending performed once or until there is no data to send . Definition at line 1216 of file RWebWindow.cxx. ◆ CheckDataToSend() [2/2]. bool RWebWindow::CheckDataToSend ; (; std::shared_ptr< WebConn > & ; conn). private . Checks if one should send data for specified connection Returns true when send operation was performed. ; Definition at line 1158 of file RWebWindow.cxx. ◆ CheckInactiveConnections(). void RWebWindow::CheckInactiveConnections ; (; ). private . Check if there are connection which are inactive for longer ti",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:25797,Performance,perform,performed,25797,"RWebWindow::AssignThreadId ; (; ). Assign thread id which has to be used for callbacks WARNING!!! only for expert use Automatically done at the moment when any callback function is invoked Can be invoked once again if window Run method will be invoked from other thread Normally should be invoked before Show() method is called. ; Definition at line 1645 of file RWebWindow.cxx. ◆ CanSend(). bool RWebWindow::CanSend ; (; unsigned ; connid, . bool ; direct = true . ); const. Returns true if sending via specified connection can be performed. ; Parameters. connidconnection id, when 0 - all existing connections are checked ; directwhen true, checks if direct sending (without queuing) is possible . Definition at line 1484 of file RWebWindow.cxx. ◆ CheckDataToSend() [1/2]. void RWebWindow::CheckDataToSend ; (; bool ; only_once = false). private . Checks if new data can be send (internal use only) If necessary, provide credits to the client. ; Parameters. only_onceif true, data sending performed once or until there is no data to send . Definition at line 1216 of file RWebWindow.cxx. ◆ CheckDataToSend() [2/2]. bool RWebWindow::CheckDataToSend ; (; std::shared_ptr< WebConn > & ; conn). private . Checks if one should send data for specified connection Returns true when send operation was performed. ; Definition at line 1158 of file RWebWindow.cxx. ◆ CheckInactiveConnections(). void RWebWindow::CheckInactiveConnections ; (; ). private . Check if there are connection which are inactive for longer time For instance, batch browser will be stopped if no activity for 30 sec is there. ; Definition at line 658 of file RWebWindow.cxx. ◆ CheckPendingConnections(). void RWebWindow::CheckPendingConnections ; (; ). private . Check if started process(es) establish connection. ; After timeout such processed will be killed Method invoked from http server thread, therefore appropriate mutex must be used on all relevant data ; Definition at line 624 of file RWebWindow.cxx. ◆ CloseConnection(). vo",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:26102,Performance,perform,performed,26102,"om other thread Normally should be invoked before Show() method is called. ; Definition at line 1645 of file RWebWindow.cxx. ◆ CanSend(). bool RWebWindow::CanSend ; (; unsigned ; connid, . bool ; direct = true . ); const. Returns true if sending via specified connection can be performed. ; Parameters. connidconnection id, when 0 - all existing connections are checked ; directwhen true, checks if direct sending (without queuing) is possible . Definition at line 1484 of file RWebWindow.cxx. ◆ CheckDataToSend() [1/2]. void RWebWindow::CheckDataToSend ; (; bool ; only_once = false). private . Checks if new data can be send (internal use only) If necessary, provide credits to the client. ; Parameters. only_onceif true, data sending performed once or until there is no data to send . Definition at line 1216 of file RWebWindow.cxx. ◆ CheckDataToSend() [2/2]. bool RWebWindow::CheckDataToSend ; (; std::shared_ptr< WebConn > & ; conn). private . Checks if one should send data for specified connection Returns true when send operation was performed. ; Definition at line 1158 of file RWebWindow.cxx. ◆ CheckInactiveConnections(). void RWebWindow::CheckInactiveConnections ; (; ). private . Check if there are connection which are inactive for longer time For instance, batch browser will be stopped if no activity for 30 sec is there. ; Definition at line 658 of file RWebWindow.cxx. ◆ CheckPendingConnections(). void RWebWindow::CheckPendingConnections ; (; ). private . Check if started process(es) establish connection. ; After timeout such processed will be killed Method invoked from http server thread, therefore appropriate mutex must be used on all relevant data ; Definition at line 624 of file RWebWindow.cxx. ◆ CloseConnection(). void RWebWindow::CloseConnection ; (; unsigned ; connid). Close specified connection. ; Parameters. connidconnection id, when 0 - all connections will be closed . Definition at line 1447 of file RWebWindow.cxx. ◆ CloseConnections(). void RWebWindow::CloseC",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:32181,Performance,queue,queue,32181,imed out Batch jobs will be ignored here Returns 0 if connection not exists. ; Definition at line 244 of file RWebWindow.cxx. ◆ GetHeight(). unsigned ROOT::RWebWindow::GetHeight ; (; ); const. inline . returns configured window height (0 - default) ; Definition at line 282 of file RWebWindow.hxx. ◆ GetId(). unsigned ROOT::RWebWindow::GetId ; (; ); const. inline . Returns ID for the window - unique inside window manager. ; Definition at line 248 of file RWebWindow.hxx. ◆ GetManager(). std::shared_ptr< RWebWindowsManager > ROOT::RWebWindow::GetManager ; (; ); const. inline . Returns window manager. ; Definition at line 251 of file RWebWindow.hxx. ◆ GetMasterConnections(). std::vector< RWebWindow::MasterConn > RWebWindow::GetMasterConnections ; (; unsigned ; connid = 0); const. private . Get list of master connections. ; Definition at line 325 of file RWebWindow.cxx. ◆ GetMaxQueueLength(). unsigned ROOT::RWebWindow::GetMaxQueueLength ; (; ); const. inline . Return maximal queue length of data which can be held by window. ; Definition at line 304 of file RWebWindow.hxx. ◆ GetOperationTmout(). float ROOT::RWebWindow::GetOperationTmout ; (; ); const. inline . Returns timeout for synchronous WebWindow operations. ; Definition at line 351 of file RWebWindow.hxx. ◆ GetRelativeAddr() [1/2]. std::string RWebWindow::GetRelativeAddr ; (; const RWebWindow & ; win); const. Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ; Definition at line 1270 of file RWebWindow.cxx. ◆ GetRelativeAddr() [2/2]. std::string RWebWindow::GetRelativeAddr ; (; const std::shared_ptr< RWebWindow > & ; win); const. Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ; Definition at line 1260 of file RWebWindow.cxx. ◆ GetSe,MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:33295,Performance,queue,queue,33295,"t ROOT::RWebWindow::GetOperationTmout ; (; ); const. inline . Returns timeout for synchronous WebWindow operations. ; Definition at line 351 of file RWebWindow.hxx. ◆ GetRelativeAddr() [1/2]. std::string RWebWindow::GetRelativeAddr ; (; const RWebWindow & ; win); const. Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ; Definition at line 1270 of file RWebWindow.cxx. ◆ GetRelativeAddr() [2/2]. std::string RWebWindow::GetRelativeAddr ; (; const std::shared_ptr< RWebWindow > & ; win); const. Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ; Definition at line 1260 of file RWebWindow.cxx. ◆ GetSendQueueLength(). int RWebWindow::GetSendQueueLength ; (; unsigned ; connid); const. Returns send queue length for specified connection. ; Parameters. connidconnection id, 0 - maximal value for all connections is returned If wrong connection id specified, -1 is return . Definition at line 1509 of file RWebWindow.cxx. ◆ GetServer(). THttpServer * RWebWindow::GetServer ; (; ). Return THttpServer instance serving requests to the window. ; Definition at line 181 of file RWebWindow.cxx. ◆ GetUrl(). std::string RWebWindow::GetUrl ; (; bool ; remote = true). Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ; Parameters. remoteis true, real HTTP server will be started automatically and widget can be connected from the web browser. If; remoteis false, HTTP server will not be started and window can be connected only from ROOT application itself. !!! WARNING - do not invoke this method without real need, each URL consumes resources in widget and in http server .",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:41070,Performance,perform,performed,41070,"ctly to test client code without running C++ server ; Definition at line 1355 of file RWebWindow.cxx. ◆ RemoveConnection(). std::shared_ptr< RWebWindow::WebConn > RWebWindow::RemoveConnection ; (; unsigned ; wsid). private . Remove connection with given websocket id. ; Definition at line 279 of file RWebWindow.cxx. ◆ RemoveEmbedWindow(). void RWebWindow::RemoveEmbedWindow ; (; unsigned ; connid, . int ; channel . ). private . Remove RWebWindow associated with the channelfEmbed. ; Definition at line 1867 of file RWebWindow.cxx. ◆ RemoveKey(). void RWebWindow::RemoveKey ; (; const std::string & ; key). private . Removes all connections with the key. ; Definition at line 583 of file RWebWindow.cxx. ◆ RemoveMasterConnection(). void RWebWindow::RemoveMasterConnection ; (; unsigned ; connid = 0). private . Remove master connection - if any. ; Definition at line 343 of file RWebWindow.cxx. ◆ Run(). void RWebWindow::Run ; (; double ; tm = 0.). Run window functionality for specified time If no action can be performed - just sleep specified time. ; Definition at line 1827 of file RWebWindow.cxx. ◆ Send(). void RWebWindow::Send ; (; unsigned ; connid, . const std::string & ; data . ). Sends data to specified connection. ; Parameters. connidconnection id, when 0 - data will be send to all connections ; datadata to be copied to SubmitData function . Definition at line 1609 of file RWebWindow.cxx. ◆ SendBinary() [1/2]. void RWebWindow::SendBinary ; (; unsigned ; connid, . const void * ; data, . std::size_t ; len . ). Send binary data to specified connection. ; Parameters. connidconnection id, when 0 - data will be send to all connections ; datapointer to binary data ; lennumber of bytes in data . Definition at line 1630 of file RWebWindow.cxx. ◆ SendBinary() [2/2]. void RWebWindow::SendBinary ; (; unsigned ; connid, . std::string && ; data . ). Send binary data to specified connection. ; Parameters. connidconnection id, when 0 - data will be send to all connections ; datadata to b",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:46483,Performance,queue,queue,46483,"ge(). void ROOT::RWebWindow::SetDefaultPage ; (; const std::string & ; page). inline . Set content of default window HTML page This page returns when URL address of the window will be requested Either HTML code or file name in the form ""file:/home/user/data/file.htm"" One also can using default locations like ""file:rootui5sys/canv/canvas.html"". ; Definition at line 257 of file RWebWindow.hxx. ◆ SetDisconnectCallBack(). void RWebWindow::SetDisconnectCallBack ; (; WebWindowConnectCallback_t ; func). Set call-back function for disconnecting. ; Definition at line 1753 of file RWebWindow.cxx. ◆ SetGeometry(). void ROOT::RWebWindow::SetGeometry ; (; unsigned ; width, . unsigned ; height . ). inline . Set window geometry. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 262 of file RWebWindow.hxx. ◆ SetMaxQueueLength(). void ROOT::RWebWindow::SetMaxQueueLength ; (; unsigned ; len = 10). inline . configures maximal queue length of data which can be held by window ; Definition at line 300 of file RWebWindow.hxx. ◆ SetNativeOnlyConn(). void ROOT::RWebWindow::SetNativeOnlyConn ; (; bool ; on = true). inline . configures that only native (own-created) connections are allowed ; Definition at line 308 of file RWebWindow.hxx. ◆ SetOperationTmout(). void ROOT::RWebWindow::SetOperationTmout ; (; float ; tm = 50.). inline . Set timeout for synchronous WebWindow operations. ; Definition at line 354 of file RWebWindow.hxx. ◆ SetPanelName(). void RWebWindow::SetPanelName ; (; const std::string & ; name). Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ; Definition at line 132 of file RWebWindow.cxx. ◆ SetPosition(). void ROOT::RWebWindow::SetPosition ; (; unsigned ; x, . unsigned ; y . ). inline . Set window position. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 269 of file RWebWindow.hx",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:50889,Performance,latency,latency,50889," Parameters. connidconnection id, when 0 - data will be send to all connections ; txtis text message that should be sent ; datadata to be std-moved to SubmitData function ; chidchannel id, 1 - normal communication, 0 - internal with highest priority . Definition at line 1529 of file RWebWindow.cxx. ◆ Sync(). void RWebWindow::Sync ; (; ). Special method to process all internal activity when window runs in separate thread. ; Definition at line 1236 of file RWebWindow.cxx. ◆ TerminateROOT(). void RWebWindow::TerminateROOT ; (; ). Terminate ROOT session Tries to correctly close THttpServer, associated with RWebWindowsManager After that exit from process. ; Definition at line 1893 of file RWebWindow.cxx. ◆ UseServerThreads(). void RWebWindow::UseServerThreads ; (; ). Let use THttpServer threads to process requests WARNING!!! only for expert use Should be only used when application provides proper locking and does not block. ; Such mode provides minimal possible latency Must be called before callbacks are assigned ; Definition at line 1667 of file RWebWindow.cxx. ◆ WaitFor(). int RWebWindow::WaitFor ; (; WebWindowWaitFunc_t ; check). Waits until provided check function or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ; Parameter spent_tm is time in seconds, which already spent inside the function First non-zero value breaks loop and result is returned. Runs application mainloop and short sleeps in-between ; Definition at line 1789 of file RWebWindow.cxx. ◆ WaitForTimed() [1/2]. int RWebWindow::WaitForTimed ; (; WebWindowWaitFunc_t ; check). Waits until provided check function or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ; Parameter spent_tm in lambda is time in seconds, which already spent inside the function First non-zero value breaks waiting loop and result is r",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:55988,Performance,queue,queue,55988,"ndow::fDataCallback. private . ! main callback when data over channel 1 is arrived ; Definition at line 158 of file RWebWindow.hxx. ◆ fDefaultPage. std::string ROOT::RWebWindow::fDefaultPage. private . ! HTML page (or file name) returned when window URL is opened ; Definition at line 139 of file RWebWindow.hxx. ◆ fDisconnCallback. WebWindowConnectCallback_t ROOT::RWebWindow::fDisconnCallback. private . ! callback for disconnect event ; Definition at line 159 of file RWebWindow.hxx. ◆ fHasWindowThrd. bool ROOT::RWebWindow::fHasWindowThrd {false}. private . ! indicate if special window thread was started ; Definition at line 162 of file RWebWindow.hxx. ◆ fHeight. unsigned ROOT::RWebWindow::fHeight {0}. private . ! initial window width and height when displayed, zeros are ignored ; Definition at line 166 of file RWebWindow.hxx. ◆ fId. unsigned ROOT::RWebWindow::fId {0}. private . ! unique identifier ; Definition at line 141 of file RWebWindow.hxx. ◆ fInputQueue. std::queue<QueueEntry> ROOT::RWebWindow::fInputQueue. private . ! input queue for all callbacks ; Definition at line 164 of file RWebWindow.hxx. ◆ fInputQueueMutex. std::mutex ROOT::RWebWindow::fInputQueueMutex. private . ! mutex to protect input queue ; Definition at line 165 of file RWebWindow.hxx. ◆ fMaster. std::shared_ptr<RWebWindow> ROOT::RWebWindow::fMaster. private . ! master window where this window is embedded ; Definition at line 137 of file RWebWindow.hxx. ◆ fMasterConns. std::vector<MasterConn> ROOT::RWebWindow::fMasterConns. private . ! master connections ; Definition at line 138 of file RWebWindow.hxx. ◆ fMaxQueueLength. unsigned ROOT::RWebWindow::fMaxQueueLength {10}. private . ! maximal number of queue entries ; Definition at line 156 of file RWebWindow.hxx. ◆ fMgr. std::shared_ptr<RWebWindowsManager> ROOT::RWebWindow::fMgr. private . ! display manager ; Definition at line 136 of file RWebWindow.hxx. ◆ fNativeOnlyConn. bool ROOT::RWebWindow::fNativeOnlyConn {false}. private . ! only native conn",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:56055,Performance,queue,queue,56055,"arrived ; Definition at line 158 of file RWebWindow.hxx. ◆ fDefaultPage. std::string ROOT::RWebWindow::fDefaultPage. private . ! HTML page (or file name) returned when window URL is opened ; Definition at line 139 of file RWebWindow.hxx. ◆ fDisconnCallback. WebWindowConnectCallback_t ROOT::RWebWindow::fDisconnCallback. private . ! callback for disconnect event ; Definition at line 159 of file RWebWindow.hxx. ◆ fHasWindowThrd. bool ROOT::RWebWindow::fHasWindowThrd {false}. private . ! indicate if special window thread was started ; Definition at line 162 of file RWebWindow.hxx. ◆ fHeight. unsigned ROOT::RWebWindow::fHeight {0}. private . ! initial window width and height when displayed, zeros are ignored ; Definition at line 166 of file RWebWindow.hxx. ◆ fId. unsigned ROOT::RWebWindow::fId {0}. private . ! unique identifier ; Definition at line 141 of file RWebWindow.hxx. ◆ fInputQueue. std::queue<QueueEntry> ROOT::RWebWindow::fInputQueue. private . ! input queue for all callbacks ; Definition at line 164 of file RWebWindow.hxx. ◆ fInputQueueMutex. std::mutex ROOT::RWebWindow::fInputQueueMutex. private . ! mutex to protect input queue ; Definition at line 165 of file RWebWindow.hxx. ◆ fMaster. std::shared_ptr<RWebWindow> ROOT::RWebWindow::fMaster. private . ! master window where this window is embedded ; Definition at line 137 of file RWebWindow.hxx. ◆ fMasterConns. std::vector<MasterConn> ROOT::RWebWindow::fMasterConns. private . ! master connections ; Definition at line 138 of file RWebWindow.hxx. ◆ fMaxQueueLength. unsigned ROOT::RWebWindow::fMaxQueueLength {10}. private . ! maximal number of queue entries ; Definition at line 156 of file RWebWindow.hxx. ◆ fMgr. std::shared_ptr<RWebWindowsManager> ROOT::RWebWindow::fMgr. private . ! display manager ; Definition at line 136 of file RWebWindow.hxx. ◆ fNativeOnlyConn. bool ROOT::RWebWindow::fNativeOnlyConn {false}. private . ! only native connection are allowed, created by Show() method ; Definition at line 154 of fil",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:56230,Performance,queue,queue,56230,"rned when window URL is opened ; Definition at line 139 of file RWebWindow.hxx. ◆ fDisconnCallback. WebWindowConnectCallback_t ROOT::RWebWindow::fDisconnCallback. private . ! callback for disconnect event ; Definition at line 159 of file RWebWindow.hxx. ◆ fHasWindowThrd. bool ROOT::RWebWindow::fHasWindowThrd {false}. private . ! indicate if special window thread was started ; Definition at line 162 of file RWebWindow.hxx. ◆ fHeight. unsigned ROOT::RWebWindow::fHeight {0}. private . ! initial window width and height when displayed, zeros are ignored ; Definition at line 166 of file RWebWindow.hxx. ◆ fId. unsigned ROOT::RWebWindow::fId {0}. private . ! unique identifier ; Definition at line 141 of file RWebWindow.hxx. ◆ fInputQueue. std::queue<QueueEntry> ROOT::RWebWindow::fInputQueue. private . ! input queue for all callbacks ; Definition at line 164 of file RWebWindow.hxx. ◆ fInputQueueMutex. std::mutex ROOT::RWebWindow::fInputQueueMutex. private . ! mutex to protect input queue ; Definition at line 165 of file RWebWindow.hxx. ◆ fMaster. std::shared_ptr<RWebWindow> ROOT::RWebWindow::fMaster. private . ! master window where this window is embedded ; Definition at line 137 of file RWebWindow.hxx. ◆ fMasterConns. std::vector<MasterConn> ROOT::RWebWindow::fMasterConns. private . ! master connections ; Definition at line 138 of file RWebWindow.hxx. ◆ fMaxQueueLength. unsigned ROOT::RWebWindow::fMaxQueueLength {10}. private . ! maximal number of queue entries ; Definition at line 156 of file RWebWindow.hxx. ◆ fMgr. std::shared_ptr<RWebWindowsManager> ROOT::RWebWindow::fMgr. private . ! display manager ; Definition at line 136 of file RWebWindow.hxx. ◆ fNativeOnlyConn. bool ROOT::RWebWindow::fNativeOnlyConn {false}. private . ! only native connection are allowed, created by Show() method ; Definition at line 154 of file RWebWindow.hxx. ◆ fOperationTmout. float ROOT::RWebWindow::fOperationTmout {50.}. private . ! timeout in seconds to perform synchronous operation, default ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:56706,Performance,queue,queue,56706,"te . ! initial window width and height when displayed, zeros are ignored ; Definition at line 166 of file RWebWindow.hxx. ◆ fId. unsigned ROOT::RWebWindow::fId {0}. private . ! unique identifier ; Definition at line 141 of file RWebWindow.hxx. ◆ fInputQueue. std::queue<QueueEntry> ROOT::RWebWindow::fInputQueue. private . ! input queue for all callbacks ; Definition at line 164 of file RWebWindow.hxx. ◆ fInputQueueMutex. std::mutex ROOT::RWebWindow::fInputQueueMutex. private . ! mutex to protect input queue ; Definition at line 165 of file RWebWindow.hxx. ◆ fMaster. std::shared_ptr<RWebWindow> ROOT::RWebWindow::fMaster. private . ! master window where this window is embedded ; Definition at line 137 of file RWebWindow.hxx. ◆ fMasterConns. std::vector<MasterConn> ROOT::RWebWindow::fMasterConns. private . ! master connections ; Definition at line 138 of file RWebWindow.hxx. ◆ fMaxQueueLength. unsigned ROOT::RWebWindow::fMaxQueueLength {10}. private . ! maximal number of queue entries ; Definition at line 156 of file RWebWindow.hxx. ◆ fMgr. std::shared_ptr<RWebWindowsManager> ROOT::RWebWindow::fMgr. private . ! display manager ; Definition at line 136 of file RWebWindow.hxx. ◆ fNativeOnlyConn. bool ROOT::RWebWindow::fNativeOnlyConn {false}. private . ! only native connection are allowed, created by Show() method ; Definition at line 154 of file RWebWindow.hxx. ◆ fOperationTmout. float ROOT::RWebWindow::fOperationTmout {50.}. private . ! timeout in seconds to perform synchronous operation, default 50s ; Definition at line 168 of file RWebWindow.hxx. ◆ fPanelName. std::string ROOT::RWebWindow::fPanelName. private . ! panel name which should be shown in the window ; Definition at line 140 of file RWebWindow.hxx. ◆ fPendingConn. ConnectionsList_t ROOT::RWebWindow::fPendingConn. private . ! list of pending connection with pre-assigned keys ; Definition at line 149 of file RWebWindow.hxx. ◆ fProcessMT. bool ROOT::RWebWindow::fProcessMT {false}. private . ! if window event proc",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:57203,Performance,perform,perform,57203,"e ; Definition at line 165 of file RWebWindow.hxx. ◆ fMaster. std::shared_ptr<RWebWindow> ROOT::RWebWindow::fMaster. private . ! master window where this window is embedded ; Definition at line 137 of file RWebWindow.hxx. ◆ fMasterConns. std::vector<MasterConn> ROOT::RWebWindow::fMasterConns. private . ! master connections ; Definition at line 138 of file RWebWindow.hxx. ◆ fMaxQueueLength. unsigned ROOT::RWebWindow::fMaxQueueLength {10}. private . ! maximal number of queue entries ; Definition at line 156 of file RWebWindow.hxx. ◆ fMgr. std::shared_ptr<RWebWindowsManager> ROOT::RWebWindow::fMgr. private . ! display manager ; Definition at line 136 of file RWebWindow.hxx. ◆ fNativeOnlyConn. bool ROOT::RWebWindow::fNativeOnlyConn {false}. private . ! only native connection are allowed, created by Show() method ; Definition at line 154 of file RWebWindow.hxx. ◆ fOperationTmout. float ROOT::RWebWindow::fOperationTmout {50.}. private . ! timeout in seconds to perform synchronous operation, default 50s ; Definition at line 168 of file RWebWindow.hxx. ◆ fPanelName. std::string ROOT::RWebWindow::fPanelName. private . ! panel name which should be shown in the window ; Definition at line 140 of file RWebWindow.hxx. ◆ fPendingConn. ConnectionsList_t ROOT::RWebWindow::fPendingConn. private . ! list of pending connection with pre-assigned keys ; Definition at line 149 of file RWebWindow.hxx. ◆ fProcessMT. bool ROOT::RWebWindow::fProcessMT {false}. private . ! if window event processing performed in dedicated thread ; Definition at line 144 of file RWebWindow.hxx. ◆ fProtocol. std::string ROOT::RWebWindow::fProtocol. private . ! protocol ; Definition at line 174 of file RWebWindow.hxx. ◆ fProtocolCnt. int ROOT::RWebWindow::fProtocolCnt {-1}. private . ! counter for protocol recording ; Definition at line 171 of file RWebWindow.hxx. ◆ fProtocolConnId. unsigned ROOT::RWebWindow::fProtocolConnId {0}. private . ! connection id, which is used for writing protocol ; Definition at line ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:57732,Performance,perform,performed,57732,"WebWindow.hxx. ◆ fMgr. std::shared_ptr<RWebWindowsManager> ROOT::RWebWindow::fMgr. private . ! display manager ; Definition at line 136 of file RWebWindow.hxx. ◆ fNativeOnlyConn. bool ROOT::RWebWindow::fNativeOnlyConn {false}. private . ! only native connection are allowed, created by Show() method ; Definition at line 154 of file RWebWindow.hxx. ◆ fOperationTmout. float ROOT::RWebWindow::fOperationTmout {50.}. private . ! timeout in seconds to perform synchronous operation, default 50s ; Definition at line 168 of file RWebWindow.hxx. ◆ fPanelName. std::string ROOT::RWebWindow::fPanelName. private . ! panel name which should be shown in the window ; Definition at line 140 of file RWebWindow.hxx. ◆ fPendingConn. ConnectionsList_t ROOT::RWebWindow::fPendingConn. private . ! list of pending connection with pre-assigned keys ; Definition at line 149 of file RWebWindow.hxx. ◆ fProcessMT. bool ROOT::RWebWindow::fProcessMT {false}. private . ! if window event processing performed in dedicated thread ; Definition at line 144 of file RWebWindow.hxx. ◆ fProtocol. std::string ROOT::RWebWindow::fProtocol. private . ! protocol ; Definition at line 174 of file RWebWindow.hxx. ◆ fProtocolCnt. int ROOT::RWebWindow::fProtocolCnt {-1}. private . ! counter for protocol recording ; Definition at line 171 of file RWebWindow.hxx. ◆ fProtocolConnId. unsigned ROOT::RWebWindow::fProtocolConnId {0}. private . ! connection id, which is used for writing protocol ; Definition at line 172 of file RWebWindow.hxx. ◆ fProtocolFileName. std::string ROOT::RWebWindow::fProtocolFileName. private . ! local file where communication protocol will be written ; Definition at line 170 of file RWebWindow.hxx. ◆ fProtocolPrefix. std::string ROOT::RWebWindow::fProtocolPrefix. private . ! prefix for created files names ; Definition at line 173 of file RWebWindow.hxx. ◆ fRequireAuthKey. bool ROOT::RWebWindow::fRequireAuthKey {true}. private . ! defines if authentication key always required when connect to the wid",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:3769,Safety,timeout,timeout,3769,"std::vector< unsigned > GetConnections (unsigned excludeid=0) const;  returns vector with all existing connections ids One also can exclude specified connection from return result, which can be useful to be able reply too all but this connections ;  ; unsigned GetConnLimit () const;  returns configured connections limit (0 - default) ;  ; unsigned GetDisplayConnection () const;  Returns first connection id where window is displayed It could be that connection(s) not yet fully established - but also not timed out Batch jobs will be ignored here Returns 0 if connection not exists. ;  ; unsigned GetHeight () const;  returns configured window height (0 - default) ;  ; unsigned GetId () const;  Returns ID for the window - unique inside window manager. ;  ; std::shared_ptr< RWebWindowsManager > GetManager () const;  Returns window manager. ;  ; unsigned GetMaxQueueLength () const;  Return maximal queue length of data which can be held by window. ;  ; float GetOperationTmout () const;  Returns timeout for synchronous WebWindow operations. ;  ; std::string GetRelativeAddr (const RWebWindow &win) const;  Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ;  ; std::string GetRelativeAddr (const std::shared_ptr< RWebWindow > &win) const;  Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_k",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:8838,Safety,timeout,timeout,8838,";  ; void SetDataCallBack (WebWindowDataCallback_t func);  Set call-back function for data, received from the clients via websocket. ;  ; void SetDefaultPage (const std::string &page);  Set content of default window HTML page This page returns when URL address of the window will be requested Either HTML code or file name in the form ""file:/home/user/data/file.htm"" One also can using default locations like ""file:rootui5sys/canv/canvas.html"". ;  ; void SetDisconnectCallBack (WebWindowConnectCallback_t func);  Set call-back function for disconnecting. ;  ; void SetGeometry (unsigned width, unsigned height);  Set window geometry. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetMaxQueueLength (unsigned len=10);  configures maximal queue length of data which can be held by window ;  ; void SetNativeOnlyConn (bool on=true);  configures that only native (own-created) connections are allowed ;  ; void SetOperationTmout (float tm=50.);  Set timeout for synchronous WebWindow operations. ;  ; void SetPanelName (const std::string &name);  Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ;  ; void SetPosition (unsigned x, unsigned y);  Set window position. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetRequireAuthKey (bool on);  Configure if authentication key in connection string is required. ;  ; void SetUseCurrentDir (bool on=true);  Configure if window can access local files via currentdir/ path of http server. ;  ; void SetUserArgs (const std::string &args);  Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ;  ; unsigned Show (const RWebDisplayArgs &args="""");  Show window in specified location. ;  ; void StartThread ();  Star",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:11888,Safety,detect,detect,11888,"n or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ;  ; int WaitForTimed (WebWindowWaitFunc_t check, double duration);  Waits until provided check function or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ;  . Static Public Member Functions; static std::shared_ptr< RWebWindow > Create ();  Create new RWebWindow Using default RWebWindowsManager. ;  ; static bool EmbedFileDialog (const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args);  Create dialog instance to use as embedded dialog inside provided widget Loads libROOTBrowserv7 and tries to call RFileDialog::Embedded() method Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embedded() providing received string as second argument. ;  ; static bool IsFileDialogMessage (const std::string &msg);  Check if this could be the message send by client to start new file dialog If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog instance inside existing widget. ;  ; static unsigned ShowWindow (std::shared_ptr< RWebWindow > window, const RWebDisplayArgs &args="""");  Static method to show web window Has to be used instead of RWebWindow::Show() when window potentially can be embed into other windows Soon RWebWindow::Show() method will be done protected. ;  . Private Types; using ConnectionsList_t = std::vector< std::shared_ptr< WebConn > >;  ; enum  EQueueEntryKind { kind_None; , kind_Connect; , kind_Data; , kind_Disconnect; };  ; using timestamp_t = std::chrono::time_point< std::chrono::system_clock >;  . Private Member Functions; bool _CanTrustIn (std::shared_ptr< WebConn > &conn, ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:19828,Safety,timeout,timeout,19828,"::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchronous operation, default 50s ;  ; std::string fPanelName;  ! panel name which should be shown in the window ;  ; ConnectionsList_t fPendingConn;  ! list of pending connection with pre-assigned keys ;  ; bool fProcessMT {false};  ! if window event processing performed in dedicated thread ;  ; std::string fProtocol;  ! protocol ;  ; int fProtocolCnt {-1};  ! counter for protocol recording ;  ; unsigned fProtocolConnId {0};  ! connection id, which is used for writing protocol ;  ; std::string fProtocolFileName;  ! local file where communication protocol will be written ;  ; std::string fProtocolPrefix;  ! prefix for created files names ;  ; bool fRequireAuthKey {true};  ! defines if authentication key always required when connect to the widget ;  ; bool fSendMT {false};  ! true is special threads should be used for sending data ;  ; bool fUseCurrentDir {false};  ! if window can access local files via currentdir/ path of http server ;  ; bool fUseProcessEvents {false};  ! all window functionality will run through process events ;  ; std::string fUserArgs;  ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ;  ; bool fUseServerThreads {false};  ! indicates that server thread is using, no special window thread ;  ; unsigned fWidth {0};  ; std::thread fWindowThrd;  ! special thread for that window ;  ; std::shared_ptr< RWebWindowWSHandler > fWSHandler;  ! specialize websocket handler for all incoming connections ;  ; int fX {-1};  ; int fY {-1};  ! initial window position, -1 ignored ;  . Static Priv",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:26594,Safety,timeout,timeout,26594," send (internal use only) If necessary, provide credits to the client. ; Parameters. only_onceif true, data sending performed once or until there is no data to send . Definition at line 1216 of file RWebWindow.cxx. ◆ CheckDataToSend() [2/2]. bool RWebWindow::CheckDataToSend ; (; std::shared_ptr< WebConn > & ; conn). private . Checks if one should send data for specified connection Returns true when send operation was performed. ; Definition at line 1158 of file RWebWindow.cxx. ◆ CheckInactiveConnections(). void RWebWindow::CheckInactiveConnections ; (; ). private . Check if there are connection which are inactive for longer time For instance, batch browser will be stopped if no activity for 30 sec is there. ; Definition at line 658 of file RWebWindow.cxx. ◆ CheckPendingConnections(). void RWebWindow::CheckPendingConnections ; (; ). private . Check if started process(es) establish connection. ; After timeout such processed will be killed Method invoked from http server thread, therefore appropriate mutex must be used on all relevant data ; Definition at line 624 of file RWebWindow.cxx. ◆ CloseConnection(). void RWebWindow::CloseConnection ; (; unsigned ; connid). Close specified connection. ; Parameters. connidconnection id, when 0 - all connections will be closed . Definition at line 1447 of file RWebWindow.cxx. ◆ CloseConnections(). void RWebWindow::CloseConnections ; (; ). Closes all connection to clients Normally leads to closing of all correspondent browser windows Some browsers (like firefox) do not allow by default to close window. ; Definition at line 1438 of file RWebWindow.cxx. ◆ CompleteWSSend(). void RWebWindow::CompleteWSSend ; (; unsigned ; wsid). private . Complete websocket send operation Clear ""doing send"" flag and check if next operation has to be started. ; Definition at line 1088 of file RWebWindow.cxx. ◆ Create(). std::shared_ptr< RWebWindow > RWebWindow::Create ; (; ). static . Create new RWebWindow Using default RWebWindowsManager. ; Definition ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:28568,Safety,detect,detect,28568,"d_ptr< RWebWindow > RWebWindow::Create ; (; ). static . Create new RWebWindow Using default RWebWindowsManager. ; Definition at line 1883 of file RWebWindow.cxx. ◆ CreateWSHandler(). std::shared_ptr< RWebWindowWSHandler > RWebWindow::CreateWSHandler ; (; std::shared_ptr< RWebWindowsManager > ; mgr, . unsigned ; id, . double ; tmout . ). private . Assigns manager reference, window id and creates websocket handler, used for communication with the clients. ; Definition at line 152 of file RWebWindow.cxx. ◆ EmbedFileDialog(). bool RWebWindow::EmbedFileDialog ; (; const std::shared_ptr< RWebWindow > & ; window, . unsigned ; connid, . const std::string & ; args . ). static . Create dialog instance to use as embedded dialog inside provided widget Loads libROOTBrowserv7 and tries to call RFileDialog::Embedded() method Embedded dialog started on the client side where FileDialogController.SaveAs() method called Such method immediately send message with ""FILEDIALOG:"" prefix On the server side widget should detect such message and call RFileDialog::Embedded() providing received string as second argument. ; Returned instance of shared_ptr<RFileDialog> may be used to assign callback when file is selected ; Definition at line 1977 of file RWebWindow.cxx. ◆ FindConnection(). std::shared_ptr< RWebWindow::WebConn > RWebWindow::FindConnection ; (; unsigned ; wsid). private . Find connection with specified websocket id. ; Find connection with given websocket id. ; Definition at line 264 of file RWebWindow.cxx. ◆ FindHeadlessConnection(). unsigned RWebWindow::FindHeadlessConnection ; (; ). private . Returns connection id of window running in headless mode This can be special connection which may run picture production jobs in background Connection to that job may not be initialized yet If connection does not exists, returns 0. ; Definition at line 221 of file RWebWindow.cxx. ◆ GenerateKey(). std::string RWebWindow::GenerateKey ; (; ); const. private . Generate new unique key for the wind",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:32377,Safety,timeout,timeout,32377,"e . returns configured window height (0 - default) ; Definition at line 282 of file RWebWindow.hxx. ◆ GetId(). unsigned ROOT::RWebWindow::GetId ; (; ); const. inline . Returns ID for the window - unique inside window manager. ; Definition at line 248 of file RWebWindow.hxx. ◆ GetManager(). std::shared_ptr< RWebWindowsManager > ROOT::RWebWindow::GetManager ; (; ); const. inline . Returns window manager. ; Definition at line 251 of file RWebWindow.hxx. ◆ GetMasterConnections(). std::vector< RWebWindow::MasterConn > RWebWindow::GetMasterConnections ; (; unsigned ; connid = 0); const. private . Get list of master connections. ; Definition at line 325 of file RWebWindow.cxx. ◆ GetMaxQueueLength(). unsigned ROOT::RWebWindow::GetMaxQueueLength ; (; ); const. inline . Return maximal queue length of data which can be held by window. ; Definition at line 304 of file RWebWindow.hxx. ◆ GetOperationTmout(). float ROOT::RWebWindow::GetOperationTmout ; (; ); const. inline . Returns timeout for synchronous WebWindow operations. ; Definition at line 351 of file RWebWindow.hxx. ◆ GetRelativeAddr() [1/2]. std::string RWebWindow::GetRelativeAddr ; (; const RWebWindow & ; win); const. Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ; Definition at line 1270 of file RWebWindow.cxx. ◆ GetRelativeAddr() [2/2]. std::string RWebWindow::GetRelativeAddr ; (; const std::shared_ptr< RWebWindow > & ; win); const. Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ; Definition at line 1260 of file RWebWindow.cxx. ◆ GetSendQueueLength(). int RWebWindow::GetSendQueueLength ; (; unsigned ; connid); const. Returns send queue length for specified connection. ; Parameters. connidconnection id, 0 - maximal value for all ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:44355,Safety,detect,detected,44355,"lback_t ; func). Set call-back function for new connection. ; Definition at line 1743 of file RWebWindow.cxx. ◆ SetConnLimit(). void RWebWindow::SetConnLimit ; (; unsigned ; lmt = 0). Configure maximal number of allowed connections - 0 is unlimited Will not affect already existing connections Default is 1 - the only client is allowed. ; Definition at line 693 of file RWebWindow.cxx. ◆ SetConnToken(). void RWebWindow::SetConnToken ; (; const std::string & ; token = """"). Configures connection token (default none) When specified, in URL of webpage such token should be provided as &token=value parameter, otherwise web window will refuse connection. ; Definition at line 715 of file RWebWindow.cxx. ◆ SetDataCallBack(). void RWebWindow::SetDataCallBack ; (; WebWindowDataCallback_t ; func). Set call-back function for data, received from the clients via websocket. ; Function should have signature like void func(unsigned connid, const std::string &data) First argument identifies connection (unique for each window), second argument is received data; At the moment when callback is assigned, RWebWindow working thread is detected. If called not from main application thread, RWebWindow::Run() function must be regularly called from that thread.; Most simple way to assign call-back - use of c++11 lambdas like: auto win = RWebWindow::Create();; win->SetDefaultPage(""file:./page.htm"");; win->SetDataCallBack(; [](unsigned connid, const std::string &data) {; printf(""Conn:%u data:%s\n"", connid, data.c_str());; }; );; win->Show();; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; winOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectang",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:46894,Safety,timeout,timeout,46894,"◆ SetDisconnectCallBack(). void RWebWindow::SetDisconnectCallBack ; (; WebWindowConnectCallback_t ; func). Set call-back function for disconnecting. ; Definition at line 1753 of file RWebWindow.cxx. ◆ SetGeometry(). void ROOT::RWebWindow::SetGeometry ; (; unsigned ; width, . unsigned ; height . ). inline . Set window geometry. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 262 of file RWebWindow.hxx. ◆ SetMaxQueueLength(). void ROOT::RWebWindow::SetMaxQueueLength ; (; unsigned ; len = 10). inline . configures maximal queue length of data which can be held by window ; Definition at line 300 of file RWebWindow.hxx. ◆ SetNativeOnlyConn(). void ROOT::RWebWindow::SetNativeOnlyConn ; (; bool ; on = true). inline . configures that only native (own-created) connections are allowed ; Definition at line 308 of file RWebWindow.hxx. ◆ SetOperationTmout(). void ROOT::RWebWindow::SetOperationTmout ; (; float ; tm = 50.). inline . Set timeout for synchronous WebWindow operations. ; Definition at line 354 of file RWebWindow.hxx. ◆ SetPanelName(). void RWebWindow::SetPanelName ; (; const std::string & ; name). Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ; Definition at line 132 of file RWebWindow.cxx. ◆ SetPosition(). void ROOT::RWebWindow::SetPosition ; (; unsigned ; x, . unsigned ; y . ). inline . Set window position. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 269 of file RWebWindow.hxx. ◆ SetRequireAuthKey(). void ROOT::RWebWindow::SetRequireAuthKey ; (; bool ; on). inline . Configure if authentication key in connection string is required. ; Definition at line 316 of file RWebWindow.hxx. ◆ SetStartDialogFunc(). void RWebWindow::SetStartDialogFunc ; (; std::function< bool(const std::shared_ptr< RWebWindow > &, unsigned, const std::string &)> ; func). staticprivate . Confi",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:57181,Safety,timeout,timeout,57181,"e ; Definition at line 165 of file RWebWindow.hxx. ◆ fMaster. std::shared_ptr<RWebWindow> ROOT::RWebWindow::fMaster. private . ! master window where this window is embedded ; Definition at line 137 of file RWebWindow.hxx. ◆ fMasterConns. std::vector<MasterConn> ROOT::RWebWindow::fMasterConns. private . ! master connections ; Definition at line 138 of file RWebWindow.hxx. ◆ fMaxQueueLength. unsigned ROOT::RWebWindow::fMaxQueueLength {10}. private . ! maximal number of queue entries ; Definition at line 156 of file RWebWindow.hxx. ◆ fMgr. std::shared_ptr<RWebWindowsManager> ROOT::RWebWindow::fMgr. private . ! display manager ; Definition at line 136 of file RWebWindow.hxx. ◆ fNativeOnlyConn. bool ROOT::RWebWindow::fNativeOnlyConn {false}. private . ! only native connection are allowed, created by Show() method ; Definition at line 154 of file RWebWindow.hxx. ◆ fOperationTmout. float ROOT::RWebWindow::fOperationTmout {50.}. private . ! timeout in seconds to perform synchronous operation, default 50s ; Definition at line 168 of file RWebWindow.hxx. ◆ fPanelName. std::string ROOT::RWebWindow::fPanelName. private . ! panel name which should be shown in the window ; Definition at line 140 of file RWebWindow.hxx. ◆ fPendingConn. ConnectionsList_t ROOT::RWebWindow::fPendingConn. private . ! list of pending connection with pre-assigned keys ; Definition at line 149 of file RWebWindow.hxx. ◆ fProcessMT. bool ROOT::RWebWindow::fProcessMT {false}. private . ! if window event processing performed in dedicated thread ; Definition at line 144 of file RWebWindow.hxx. ◆ fProtocol. std::string ROOT::RWebWindow::fProtocol. private . ! protocol ; Definition at line 174 of file RWebWindow.hxx. ◆ fProtocolCnt. int ROOT::RWebWindow::fProtocolCnt {-1}. private . ! counter for protocol recording ; Definition at line 171 of file RWebWindow.hxx. ◆ fProtocolConnId. unsigned ROOT::RWebWindow::fProtocolConnId {0}. private . ! connection id, which is used for writing protocol ; Definition at line ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:3974,Security,access,access,3974,"ult, which can be useful to be able reply too all but this connections ;  ; unsigned GetConnLimit () const;  returns configured connections limit (0 - default) ;  ; unsigned GetDisplayConnection () const;  Returns first connection id where window is displayed It could be that connection(s) not yet fully established - but also not timed out Batch jobs will be ignored here Returns 0 if connection not exists. ;  ; unsigned GetHeight () const;  returns configured window height (0 - default) ;  ; unsigned GetId () const;  Returns ID for the window - unique inside window manager. ;  ; std::shared_ptr< RWebWindowsManager > GetManager () const;  Returns window manager. ;  ; unsigned GetMaxQueueLength () const;  Return maximal queue length of data which can be held by window. ;  ; float GetOperationTmout () const;  Returns timeout for synchronous WebWindow operations. ;  ; std::string GetRelativeAddr (const RWebWindow &win) const;  Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ;  ; std::string GetRelativeAddr (const std::shared_ptr< RWebWindow > &win) const;  Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ;  ; std::string GetUserArgs () const;  Returns configured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:4252,Security,access,access,4252,be that connection(s) not yet fully established - but also not timed out Batch jobs will be ignored here Returns 0 if connection not exists. ;  ; unsigned GetHeight () const;  returns configured window height (0 - default) ;  ; unsigned GetId () const;  Returns ID for the window - unique inside window manager. ;  ; std::shared_ptr< RWebWindowsManager > GetManager () const;  Returns window manager. ;  ; unsigned GetMaxQueueLength () const;  Return maximal queue length of data which can be held by window. ;  ; float GetOperationTmout () const;  Returns timeout for synchronous WebWindow operations. ;  ; std::string GetRelativeAddr (const RWebWindow &win) const;  Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ;  ; std::string GetRelativeAddr (const std::shared_ptr< RWebWindow > &win) const;  Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ;  ; std::string GetUserArgs () const;  Returns configured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth () const;  returns configured window width (0 - default) actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool HasConnect,MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:5472,Security,authenticat,authentication,5472,"access data from one window into another window Used for instance when inserting panel into canvas. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ;  ; std::string GetUserArgs () const;  Returns configured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth () const;  returns configured window width (0 - default) actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool HasConnection (unsigned connid=0, bool only_active=true) const;  returns true if specified connection id exists ;  ; bool IsNativeOnlyConn () const;  returns true if only native (own-created) connections are allowed ;  ; bool IsRequireAuthKey () const;  returns true if authentication string is required ;  ; bool IsShown () const;  Returns true when window was shown at least once. ;  ; bool IsUseCurrentDir () const;  returns true if window can access local files via currentdir/ path of http server ;  ; int NumConnections (bool with_pending=false) const;  Returns current number of active clients connections. ;  ; void RecordData (const std::string &fname=""protocol.json"", const std::string &fprefix="""");  Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ;  ; void Run (double tm=0.);  Run window functionality for specified time If no action can be performed - just sleep specif",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:5649,Security,access,access,5649,"n with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ;  ; std::string GetUserArgs () const;  Returns configured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth () const;  returns configured window width (0 - default) actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool HasConnection (unsigned connid=0, bool only_active=true) const;  returns true if specified connection id exists ;  ; bool IsNativeOnlyConn () const;  returns true if only native (own-created) connections are allowed ;  ; bool IsRequireAuthKey () const;  returns true if authentication string is required ;  ; bool IsShown () const;  Returns true when window was shown at least once. ;  ; bool IsUseCurrentDir () const;  returns true if window can access local files via currentdir/ path of http server ;  ; int NumConnections (bool with_pending=false) const;  Returns current number of active clients connections. ;  ; void RecordData (const std::string &fname=""protocol.json"", const std::string &fprefix="""");  Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ;  ; void Run (double tm=0.);  Run window functionality for specified time If no action can be performed - just sleep specified time. ;  ; void Send (unsigned connid, const std::string &data);  Sends data to specified connection. ;  ; void SendBinary (unsigned connid, const void *data, std::size_t len);  Send binary data to specified connection. ;  ; void SendBinary (unsigned connid, std::string &&data);  Send binary data to specified connection. ;  ; void SetCallBacks (WebWindowConnectCallback_t conn, WebWindowDataCallback_t data, WebWindowConnectCallback_t disconn",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:9291,Security,authenticat,authentication,9291,"tions like ""file:rootui5sys/canv/canvas.html"". ;  ; void SetDisconnectCallBack (WebWindowConnectCallback_t func);  Set call-back function for disconnecting. ;  ; void SetGeometry (unsigned width, unsigned height);  Set window geometry. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetMaxQueueLength (unsigned len=10);  configures maximal queue length of data which can be held by window ;  ; void SetNativeOnlyConn (bool on=true);  configures that only native (own-created) connections are allowed ;  ; void SetOperationTmout (float tm=50.);  Set timeout for synchronous WebWindow operations. ;  ; void SetPanelName (const std::string &name);  Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ;  ; void SetPosition (unsigned x, unsigned y);  Set window position. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetRequireAuthKey (bool on);  Configure if authentication key in connection string is required. ;  ; void SetUseCurrentDir (bool on=true);  Configure if window can access local files via currentdir/ path of http server. ;  ; void SetUserArgs (const std::string &args);  Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ;  ; unsigned Show (const RWebDisplayArgs &args="""");  Show window in specified location. ;  ; void StartThread ();  Start special thread which will be used by the window to handle all callbacks One has to be sure, that access to global ROOT structures are minimized and protected with ROOT::EnableThreadSafety(); call. ;  ; void StopThread ();  Stop special thread. ;  ; void Sync ();  Special method to process all internal activity when window runs in separate thread. ;  ; void TerminateROOT ();  Terminate ROOT se",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:9412,Security,access,access,9412,"ting. ;  ; void SetGeometry (unsigned width, unsigned height);  Set window geometry. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetMaxQueueLength (unsigned len=10);  configures maximal queue length of data which can be held by window ;  ; void SetNativeOnlyConn (bool on=true);  configures that only native (own-created) connections are allowed ;  ; void SetOperationTmout (float tm=50.);  Set timeout for synchronous WebWindow operations. ;  ; void SetPanelName (const std::string &name);  Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ;  ; void SetPosition (unsigned x, unsigned y);  Set window position. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetRequireAuthKey (bool on);  Configure if authentication key in connection string is required. ;  ; void SetUseCurrentDir (bool on=true);  Configure if window can access local files via currentdir/ path of http server. ;  ; void SetUserArgs (const std::string &args);  Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ;  ; unsigned Show (const RWebDisplayArgs &args="""");  Show window in specified location. ;  ; void StartThread ();  Start special thread which will be used by the window to handle all callbacks One has to be sure, that access to global ROOT structures are minimized and protected with ROOT::EnableThreadSafety(); call. ;  ; void StopThread ();  Stop special thread. ;  ; void Sync ();  Special method to process all internal activity when window runs in separate thread. ;  ; void TerminateROOT ();  Terminate ROOT session Tries to correctly close THttpServer, associated with RWebWindowsManager After that exit from process. ;  ; void UseServerThreads ();  Let use TH",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:9552,Security,access,accessible,9552,"by used web display (like CEF or Chromium) ;  ; void SetMaxQueueLength (unsigned len=10);  configures maximal queue length of data which can be held by window ;  ; void SetNativeOnlyConn (bool on=true);  configures that only native (own-created) connections are allowed ;  ; void SetOperationTmout (float tm=50.);  Set timeout for synchronous WebWindow operations. ;  ; void SetPanelName (const std::string &name);  Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ;  ; void SetPosition (unsigned x, unsigned y);  Set window position. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetRequireAuthKey (bool on);  Configure if authentication key in connection string is required. ;  ; void SetUseCurrentDir (bool on=true);  Configure if window can access local files via currentdir/ path of http server. ;  ; void SetUserArgs (const std::string &args);  Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ;  ; unsigned Show (const RWebDisplayArgs &args="""");  Show window in specified location. ;  ; void StartThread ();  Start special thread which will be used by the window to handle all callbacks One has to be sure, that access to global ROOT structures are minimized and protected with ROOT::EnableThreadSafety(); call. ;  ; void StopThread ();  Stop special thread. ;  ; void Sync ();  Special method to process all internal activity when window runs in separate thread. ;  ; void TerminateROOT ();  Terminate ROOT session Tries to correctly close THttpServer, associated with RWebWindowsManager After that exit from process. ;  ; void UseServerThreads ();  Let use THttpServer threads to process requests WARNING!!! only for expert use Should be only used when application provides ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:9622,Security,inject,injected,9622,"h can be held by window ;  ; void SetNativeOnlyConn (bool on=true);  configures that only native (own-created) connections are allowed ;  ; void SetOperationTmout (float tm=50.);  Set timeout for synchronous WebWindow operations. ;  ; void SetPanelName (const std::string &name);  Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ;  ; void SetPosition (unsigned x, unsigned y);  Set window position. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetRequireAuthKey (bool on);  Configure if authentication key in connection string is required. ;  ; void SetUseCurrentDir (bool on=true);  Configure if window can access local files via currentdir/ path of http server. ;  ; void SetUserArgs (const std::string &args);  Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ;  ; unsigned Show (const RWebDisplayArgs &args="""");  Show window in specified location. ;  ; void StartThread ();  Start special thread which will be used by the window to handle all callbacks One has to be sure, that access to global ROOT structures are minimized and protected with ROOT::EnableThreadSafety(); call. ;  ; void StopThread ();  Stop special thread. ;  ; void Sync ();  Special method to process all internal activity when window runs in separate thread. ;  ; void TerminateROOT ();  Terminate ROOT session Tries to correctly close THttpServer, associated with RWebWindowsManager After that exit from process. ;  ; void UseServerThreads ();  Let use THttpServer threads to process requests WARNING!!! only for expert use Should be only used when application provides proper locking and does not block. ;  ; int WaitFor (WebWindowWaitFunc_t check);  Waits until provided check function or lambdas retur",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:9956,Security,access,access,9956,"gure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ;  ; void SetPosition (unsigned x, unsigned y);  Set window position. Will be applied if supported by used web display (like CEF or Chromium) ;  ; void SetRequireAuthKey (bool on);  Configure if authentication key in connection string is required. ;  ; void SetUseCurrentDir (bool on=true);  Configure if window can access local files via currentdir/ path of http server. ;  ; void SetUserArgs (const std::string &args);  Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ;  ; unsigned Show (const RWebDisplayArgs &args="""");  Show window in specified location. ;  ; void StartThread ();  Start special thread which will be used by the window to handle all callbacks One has to be sure, that access to global ROOT structures are minimized and protected with ROOT::EnableThreadSafety(); call. ;  ; void StopThread ();  Stop special thread. ;  ; void Sync ();  Special method to process all internal activity when window runs in separate thread. ;  ; void TerminateROOT ();  Terminate ROOT session Tries to correctly close THttpServer, associated with RWebWindowsManager After that exit from process. ;  ; void UseServerThreads ();  Let use THttpServer threads to process requests WARNING!!! only for expert use Should be only used when application provides proper locking and does not block. ;  ; int WaitFor (WebWindowWaitFunc_t check);  Waits until provided check function or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ;  ; int WaitForTimed (WebWindowWaitFunc_t check);  Waits until provided check function or lambdas returns non-zero value Check function has followin",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:12982,Security,hash,hash,12982,"alog::Embedded() providing received string as second argument. ;  ; static bool IsFileDialogMessage (const std::string &msg);  Check if this could be the message send by client to start new file dialog If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog instance inside existing widget. ;  ; static unsigned ShowWindow (std::shared_ptr< RWebWindow > window, const RWebDisplayArgs &args="""");  Static method to show web window Has to be used instead of RWebWindow::Show() when window potentially can be embed into other windows Soon RWebWindow::Show() method will be done protected. ;  . Private Types; using ConnectionsList_t = std::vector< std::shared_ptr< WebConn > >;  ; enum  EQueueEntryKind { kind_None; , kind_Connect; , kind_Data; , kind_Disconnect; };  ; using timestamp_t = std::chrono::time_point< std::chrono::system_clock >;  . Private Member Functions; bool _CanTrustIn (std::shared_ptr< WebConn > &conn, const std::string &key, const std::string &ntry, bool remote, bool test_first_time);  Check if provided hash, ntry parameters from the connection request could be accepted. ;  ; std::string _MakeSendHeader (std::shared_ptr< WebConn > &conn, bool txt, const std::string &data, int chid);  Internal method to prepare text part of send data Should be called under locked connection mutex. ;  ; unsigned AddDisplayHandle (bool headless_mode, const std::string &key, std::unique_ptr< RWebDisplayHandle > &handle);  Add display handle and associated key Key is large random string generated when starting new window When client is connected, key should be supplied to correctly identify it. ;  ; unsigned AddEmbedWindow (std::shared_ptr< RWebWindow > window, unsigned connid, int channel);  Add embed window. ;  ; void AddMasterConnection (std::shared_ptr< RWebWindow > window, unsigned connid, int channel);  Add new master connection If there are many connections - only same master is allowed. ;  ; void CheckDataToSend (bool only_once=false);  Check",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:17630,Security,checksum,checksum,17630,"allArg &arg);  Processing of websockets call-backs, invoked from RWebWindowWSHandler Method invoked from http server thread, therefore appropriate mutex must be used on all relevant data. ;  ; void ProvideQueueEntry (unsigned connid, EQueueEntryKind kind, std::string &&arg);  Provide data to user callback User callback must be executed in the window thread. ;  ; std::shared_ptr< WebConn > RemoveConnection (unsigned wsid);  Remove connection with given websocket id. ;  ; void RemoveEmbedWindow (unsigned connid, int channel);  Remove RWebWindow associated with the channelfEmbed. ;  ; void RemoveKey (const std::string &key);  Removes all connections with the key. ;  ; void RemoveMasterConnection (unsigned connid=0);  Remove master connection - if any. ;  ; void SubmitData (unsigned connid, bool txt, std::string &&data, int chid=1);  Internal method to send data. ;  . Static Private Member Functions; static std::string HMAC (const std::string &key, const std::string &sessionKey, const char *msg, int msglen);  Calculate HMAC checksum for provided key and message Key combained from connection key and session key. ;  ; static void SetStartDialogFunc (std::function< bool(const std::shared_ptr< RWebWindow > &, unsigned, const std::string &)>);  Configure func which has to be used for starting dialog. ;  . Private Attributes; std::thread::id fCallbacksThrdId;  ! thread id where callbacks should be invoked ;  ; bool fCallbacksThrdIdSet {false};  ! flag indicating that thread id is assigned ;  ; std::shared_ptr< void > fClearOnClose;  ! entry which is cleared when last connection is closed ;  ; std::string fClientVersion;  ! configured client version, used as prefix in scripts URL ;  ; ConnectionsList_t fConn;  ! list of all accepted connections ;  ; WebWindowConnectCallback_t fConnCallback;  ! callback for connect event ;  ; unsigned fConnCnt {0};  ! counter of new connections to assign ids ;  ; unsigned fConnLimit {1};  ! number of allowed active connections ;  ; std::mutex f",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:20553,Security,authenticat,authentication,20553,"::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchronous operation, default 50s ;  ; std::string fPanelName;  ! panel name which should be shown in the window ;  ; ConnectionsList_t fPendingConn;  ! list of pending connection with pre-assigned keys ;  ; bool fProcessMT {false};  ! if window event processing performed in dedicated thread ;  ; std::string fProtocol;  ! protocol ;  ; int fProtocolCnt {-1};  ! counter for protocol recording ;  ; unsigned fProtocolConnId {0};  ! connection id, which is used for writing protocol ;  ; std::string fProtocolFileName;  ! local file where communication protocol will be written ;  ; std::string fProtocolPrefix;  ! prefix for created files names ;  ; bool fRequireAuthKey {true};  ! defines if authentication key always required when connect to the widget ;  ; bool fSendMT {false};  ! true is special threads should be used for sending data ;  ; bool fUseCurrentDir {false};  ! if window can access local files via currentdir/ path of http server ;  ; bool fUseProcessEvents {false};  ! all window functionality will run through process events ;  ; std::string fUserArgs;  ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ;  ; bool fUseServerThreads {false};  ! indicates that server thread is using, no special window thread ;  ; unsigned fWidth {0};  ; std::thread fWindowThrd;  ! special thread for that window ;  ; std::shared_ptr< RWebWindowWSHandler > fWSHandler;  ! specialize websocket handler for all incoming connections ;  ; int fX {-1};  ; int fY {-1};  ! initial window position, -1 ignored ;  . Static Priv",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:20752,Security,access,access,20752,"::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchronous operation, default 50s ;  ; std::string fPanelName;  ! panel name which should be shown in the window ;  ; ConnectionsList_t fPendingConn;  ! list of pending connection with pre-assigned keys ;  ; bool fProcessMT {false};  ! if window event processing performed in dedicated thread ;  ; std::string fProtocol;  ! protocol ;  ; int fProtocolCnt {-1};  ! counter for protocol recording ;  ; unsigned fProtocolConnId {0};  ! connection id, which is used for writing protocol ;  ; std::string fProtocolFileName;  ! local file where communication protocol will be written ;  ; std::string fProtocolPrefix;  ! prefix for created files names ;  ; bool fRequireAuthKey {true};  ! defines if authentication key always required when connect to the widget ;  ; bool fSendMT {false};  ! true is special threads should be used for sending data ;  ; bool fUseCurrentDir {false};  ! if window can access local files via currentdir/ path of http server ;  ; bool fUseProcessEvents {false};  ! all window functionality will run through process events ;  ; std::string fUserArgs;  ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ;  ; bool fUseServerThreads {false};  ! indicates that server thread is using, no special window thread ;  ; unsigned fWidth {0};  ; std::thread fWindowThrd;  ! special thread for that window ;  ; std::shared_ptr< RWebWindowWSHandler > fWSHandler;  ! specialize websocket handler for all incoming connections ;  ; int fX {-1};  ; int fY {-1};  ! initial window position, -1 ignored ;  . Static Priv",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:20965,Security,access,accessible,20965,"::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchronous operation, default 50s ;  ; std::string fPanelName;  ! panel name which should be shown in the window ;  ; ConnectionsList_t fPendingConn;  ! list of pending connection with pre-assigned keys ;  ; bool fProcessMT {false};  ! if window event processing performed in dedicated thread ;  ; std::string fProtocol;  ! protocol ;  ; int fProtocolCnt {-1};  ! counter for protocol recording ;  ; unsigned fProtocolConnId {0};  ! connection id, which is used for writing protocol ;  ; std::string fProtocolFileName;  ! local file where communication protocol will be written ;  ; std::string fProtocolPrefix;  ! prefix for created files names ;  ; bool fRequireAuthKey {true};  ! defines if authentication key always required when connect to the widget ;  ; bool fSendMT {false};  ! true is special threads should be used for sending data ;  ; bool fUseCurrentDir {false};  ! if window can access local files via currentdir/ path of http server ;  ; bool fUseProcessEvents {false};  ! all window functionality will run through process events ;  ; std::string fUserArgs;  ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ;  ; bool fUseServerThreads {false};  ! indicates that server thread is using, no special window thread ;  ; unsigned fWidth {0};  ; std::thread fWindowThrd;  ! special thread for that window ;  ; std::shared_ptr< RWebWindowWSHandler > fWSHandler;  ! specialize websocket handler for all incoming connections ;  ; int fX {-1};  ; int fY {-1};  ! initial window position, -1 ignored ;  . Static Priv",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:22815,Security,hash,hash,22815,"td::shared_ptr<WebConn> >. private . Definition at line 134 of file RWebWindow.hxx. ◆ timestamp_t. using ROOT::RWebWindow::timestamp_t = std::chrono::time_point<std::chrono::system_clock>. private . Definition at line 60 of file RWebWindow.hxx. Member Enumeration Documentation. ◆ EQueueEntryKind. enum ROOT::RWebWindow::EQueueEntryKind. private . Enumeratorkind_None ; kind_Connect ; kind_Data ; kind_Disconnect . Definition at line 124 of file RWebWindow.hxx. Constructor & Destructor Documentation. ◆ RWebWindow(). RWebWindow::RWebWindow ; (; ). RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ; Definition at line 76 of file RWebWindow.cxx. ◆ ~RWebWindow(). RWebWindow::~RWebWindow ; (; ). RWebWindow destructor Closes all connections and remove window from manager. ; Definition at line 85 of file RWebWindow.cxx. Member Function Documentation. ◆ _CanTrustIn(). bool RWebWindow::_CanTrustIn ; (; std::shared_ptr< WebConn > & ; conn, . const std::string & ; hash, . const std::string & ; ntry, . bool ; remote, . bool ; test_first_time . ). private . Check if provided hash, ntry parameters from the connection request could be accepted. ; Parameters. hash- provided hash value which should match with HMAC hash for generated before connection key ; ntry- connection attempt number provided together with request, must come in increasing order ; remote- boolean flag indicating if request comming from remote (via real http), for local displays like Qt5 or CEF simpler connection rules are applied ; test_first_time- true if hash/ntry tested for the first time, false appears only with websocket when connection accepted by server . Definition at line 513 of file RWebWindow.cxx. ◆ _MakeSendHeader(). std::string RWebWindow::_MakeSendHeader ; (; std::shared_ptr< WebConn > & ; conn, . bool ; txt, . const std::string & ; data, . int ; chid . ). private . Internal method to prepare text part of send data Should be called under locked connection mute",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:22926,Security,hash,hash,22926,"hrono::time_point<std::chrono::system_clock>. private . Definition at line 60 of file RWebWindow.hxx. Member Enumeration Documentation. ◆ EQueueEntryKind. enum ROOT::RWebWindow::EQueueEntryKind. private . Enumeratorkind_None ; kind_Connect ; kind_Data ; kind_Disconnect . Definition at line 124 of file RWebWindow.hxx. Constructor & Destructor Documentation. ◆ RWebWindow(). RWebWindow::RWebWindow ; (; ). RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ; Definition at line 76 of file RWebWindow.cxx. ◆ ~RWebWindow(). RWebWindow::~RWebWindow ; (; ). RWebWindow destructor Closes all connections and remove window from manager. ; Definition at line 85 of file RWebWindow.cxx. Member Function Documentation. ◆ _CanTrustIn(). bool RWebWindow::_CanTrustIn ; (; std::shared_ptr< WebConn > & ; conn, . const std::string & ; hash, . const std::string & ; ntry, . bool ; remote, . bool ; test_first_time . ). private . Check if provided hash, ntry parameters from the connection request could be accepted. ; Parameters. hash- provided hash value which should match with HMAC hash for generated before connection key ; ntry- connection attempt number provided together with request, must come in increasing order ; remote- boolean flag indicating if request comming from remote (via real http), for local displays like Qt5 or CEF simpler connection rules are applied ; test_first_time- true if hash/ntry tested for the first time, false appears only with websocket when connection accepted by server . Definition at line 513 of file RWebWindow.cxx. ◆ _MakeSendHeader(). std::string RWebWindow::_MakeSendHeader ; (; std::shared_ptr< WebConn > & ; conn, . bool ; txt, . const std::string & ; data, . int ; chid . ). private . Internal method to prepare text part of send data Should be called under locked connection mutex. ; Definition at line 1107 of file RWebWindow.cxx. ◆ AddDisplayHandle(). unsigned RWebWindow::AddDisplayHandle ; (; bool ; headless_mode, . co",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:23009,Security,hash,hash,23009,"file RWebWindow.hxx. Constructor & Destructor Documentation. ◆ RWebWindow(). RWebWindow::RWebWindow ; (; ). RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ; Definition at line 76 of file RWebWindow.cxx. ◆ ~RWebWindow(). RWebWindow::~RWebWindow ; (; ). RWebWindow destructor Closes all connections and remove window from manager. ; Definition at line 85 of file RWebWindow.cxx. Member Function Documentation. ◆ _CanTrustIn(). bool RWebWindow::_CanTrustIn ; (; std::shared_ptr< WebConn > & ; conn, . const std::string & ; hash, . const std::string & ; ntry, . bool ; remote, . bool ; test_first_time . ). private . Check if provided hash, ntry parameters from the connection request could be accepted. ; Parameters. hash- provided hash value which should match with HMAC hash for generated before connection key ; ntry- connection attempt number provided together with request, must come in increasing order ; remote- boolean flag indicating if request comming from remote (via real http), for local displays like Qt5 or CEF simpler connection rules are applied ; test_first_time- true if hash/ntry tested for the first time, false appears only with websocket when connection accepted by server . Definition at line 513 of file RWebWindow.cxx. ◆ _MakeSendHeader(). std::string RWebWindow::_MakeSendHeader ; (; std::shared_ptr< WebConn > & ; conn, . bool ; txt, . const std::string & ; data, . int ; chid . ). private . Internal method to prepare text part of send data Should be called under locked connection mutex. ; Definition at line 1107 of file RWebWindow.cxx. ◆ AddDisplayHandle(). unsigned RWebWindow::AddDisplayHandle ; (; bool ; headless_mode, . const std::string & ; key, . std::unique_ptr< RWebDisplayHandle > & ; handle . ). private . Add display handle and associated key Key is large random string generated when starting new window When client is connected, key should be supplied to correctly identify it. ; Definition at line 482 of file ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:23024,Security,hash,hash,23024,"file RWebWindow.hxx. Constructor & Destructor Documentation. ◆ RWebWindow(). RWebWindow::RWebWindow ; (; ). RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ; Definition at line 76 of file RWebWindow.cxx. ◆ ~RWebWindow(). RWebWindow::~RWebWindow ; (; ). RWebWindow destructor Closes all connections and remove window from manager. ; Definition at line 85 of file RWebWindow.cxx. Member Function Documentation. ◆ _CanTrustIn(). bool RWebWindow::_CanTrustIn ; (; std::shared_ptr< WebConn > & ; conn, . const std::string & ; hash, . const std::string & ; ntry, . bool ; remote, . bool ; test_first_time . ). private . Check if provided hash, ntry parameters from the connection request could be accepted. ; Parameters. hash- provided hash value which should match with HMAC hash for generated before connection key ; ntry- connection attempt number provided together with request, must come in increasing order ; remote- boolean flag indicating if request comming from remote (via real http), for local displays like Qt5 or CEF simpler connection rules are applied ; test_first_time- true if hash/ntry tested for the first time, false appears only with websocket when connection accepted by server . Definition at line 513 of file RWebWindow.cxx. ◆ _MakeSendHeader(). std::string RWebWindow::_MakeSendHeader ; (; std::shared_ptr< WebConn > & ; conn, . bool ; txt, . const std::string & ; data, . int ; chid . ). private . Internal method to prepare text part of send data Should be called under locked connection mutex. ; Definition at line 1107 of file RWebWindow.cxx. ◆ AddDisplayHandle(). unsigned RWebWindow::AddDisplayHandle ; (; bool ; headless_mode, . const std::string & ; key, . std::unique_ptr< RWebDisplayHandle > & ; handle . ). private . Add display handle and associated key Key is large random string generated when starting new window When client is connected, key should be supplied to correctly identify it. ; Definition at line 482 of file ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:23064,Security,hash,hash,23064,"file RWebWindow.hxx. Constructor & Destructor Documentation. ◆ RWebWindow(). RWebWindow::RWebWindow ; (; ). RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ; Definition at line 76 of file RWebWindow.cxx. ◆ ~RWebWindow(). RWebWindow::~RWebWindow ; (; ). RWebWindow destructor Closes all connections and remove window from manager. ; Definition at line 85 of file RWebWindow.cxx. Member Function Documentation. ◆ _CanTrustIn(). bool RWebWindow::_CanTrustIn ; (; std::shared_ptr< WebConn > & ; conn, . const std::string & ; hash, . const std::string & ; ntry, . bool ; remote, . bool ; test_first_time . ). private . Check if provided hash, ntry parameters from the connection request could be accepted. ; Parameters. hash- provided hash value which should match with HMAC hash for generated before connection key ; ntry- connection attempt number provided together with request, must come in increasing order ; remote- boolean flag indicating if request comming from remote (via real http), for local displays like Qt5 or CEF simpler connection rules are applied ; test_first_time- true if hash/ntry tested for the first time, false appears only with websocket when connection accepted by server . Definition at line 513 of file RWebWindow.cxx. ◆ _MakeSendHeader(). std::string RWebWindow::_MakeSendHeader ; (; std::shared_ptr< WebConn > & ; conn, . bool ; txt, . const std::string & ; data, . int ; chid . ). private . Internal method to prepare text part of send data Should be called under locked connection mutex. ; Definition at line 1107 of file RWebWindow.cxx. ◆ AddDisplayHandle(). unsigned RWebWindow::AddDisplayHandle ; (; bool ; headless_mode, . const std::string & ; key, . std::unique_ptr< RWebDisplayHandle > & ; handle . ). private . Add display handle and associated key Key is large random string generated when starting new window When client is connected, key should be supplied to correctly identify it. ; Definition at line 482 of file ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:23382,Security,hash,hash,23382,"file RWebWindow.hxx. Constructor & Destructor Documentation. ◆ RWebWindow(). RWebWindow::RWebWindow ; (; ). RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ; Definition at line 76 of file RWebWindow.cxx. ◆ ~RWebWindow(). RWebWindow::~RWebWindow ; (; ). RWebWindow destructor Closes all connections and remove window from manager. ; Definition at line 85 of file RWebWindow.cxx. Member Function Documentation. ◆ _CanTrustIn(). bool RWebWindow::_CanTrustIn ; (; std::shared_ptr< WebConn > & ; conn, . const std::string & ; hash, . const std::string & ; ntry, . bool ; remote, . bool ; test_first_time . ). private . Check if provided hash, ntry parameters from the connection request could be accepted. ; Parameters. hash- provided hash value which should match with HMAC hash for generated before connection key ; ntry- connection attempt number provided together with request, must come in increasing order ; remote- boolean flag indicating if request comming from remote (via real http), for local displays like Qt5 or CEF simpler connection rules are applied ; test_first_time- true if hash/ntry tested for the first time, false appears only with websocket when connection accepted by server . Definition at line 513 of file RWebWindow.cxx. ◆ _MakeSendHeader(). std::string RWebWindow::_MakeSendHeader ; (; std::shared_ptr< WebConn > & ; conn, . bool ; txt, . const std::string & ; data, . int ; chid . ). private . Internal method to prepare text part of send data Should be called under locked connection mutex. ; Definition at line 1107 of file RWebWindow.cxx. ◆ AddDisplayHandle(). unsigned RWebWindow::AddDisplayHandle ; (; bool ; headless_mode, . const std::string & ; key, . std::unique_ptr< RWebDisplayHandle > & ; handle . ). private . Add display handle and associated key Key is large random string generated when starting new window When client is connected, key should be supplied to correctly identify it. ; Definition at line 482 of file ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:32672,Security,access,access,32672,"tManager(). std::shared_ptr< RWebWindowsManager > ROOT::RWebWindow::GetManager ; (; ); const. inline . Returns window manager. ; Definition at line 251 of file RWebWindow.hxx. ◆ GetMasterConnections(). std::vector< RWebWindow::MasterConn > RWebWindow::GetMasterConnections ; (; unsigned ; connid = 0); const. private . Get list of master connections. ; Definition at line 325 of file RWebWindow.cxx. ◆ GetMaxQueueLength(). unsigned ROOT::RWebWindow::GetMaxQueueLength ; (; ); const. inline . Return maximal queue length of data which can be held by window. ; Definition at line 304 of file RWebWindow.hxx. ◆ GetOperationTmout(). float ROOT::RWebWindow::GetOperationTmout ; (; ); const. inline . Returns timeout for synchronous WebWindow operations. ; Definition at line 351 of file RWebWindow.hxx. ◆ GetRelativeAddr() [1/2]. std::string RWebWindow::GetRelativeAddr ; (; const RWebWindow & ; win); const. Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ; Definition at line 1270 of file RWebWindow.cxx. ◆ GetRelativeAddr() [2/2]. std::string RWebWindow::GetRelativeAddr ; (; const std::shared_ptr< RWebWindow > & ; win); const. Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ; Definition at line 1260 of file RWebWindow.cxx. ◆ GetSendQueueLength(). int RWebWindow::GetSendQueueLength ; (; unsigned ; connid); const. Returns send queue length for specified connection. ; Parameters. connidconnection id, 0 - maximal value for all connections is returned If wrong connection id specified, -1 is return . Definition at line 1509 of file RWebWindow.cxx. ◆ GetServer(). THttpServer * RWebWindow::GetServer ; (; ). Return THttpServer instance serving requests to the window. ; Definition at line 181 of file RWebWi",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:33041,Security,access,access,33041,"ne 325 of file RWebWindow.cxx. ◆ GetMaxQueueLength(). unsigned ROOT::RWebWindow::GetMaxQueueLength ; (; ); const. inline . Return maximal queue length of data which can be held by window. ; Definition at line 304 of file RWebWindow.hxx. ◆ GetOperationTmout(). float ROOT::RWebWindow::GetOperationTmout ; (; ); const. inline . Returns timeout for synchronous WebWindow operations. ; Definition at line 351 of file RWebWindow.hxx. ◆ GetRelativeAddr() [1/2]. std::string RWebWindow::GetRelativeAddr ; (; const RWebWindow & ; win); const. Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ; Definition at line 1270 of file RWebWindow.cxx. ◆ GetRelativeAddr() [2/2]. std::string RWebWindow::GetRelativeAddr ; (; const std::shared_ptr< RWebWindow > & ; win); const. Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ; Definition at line 1260 of file RWebWindow.cxx. ◆ GetSendQueueLength(). int RWebWindow::GetSendQueueLength ; (; unsigned ; connid); const. Returns send queue length for specified connection. ; Parameters. connidconnection id, 0 - maximal value for all connections is returned If wrong connection id specified, -1 is return . Definition at line 1509 of file RWebWindow.cxx. ◆ GetServer(). THttpServer * RWebWindow::GetServer ; (; ). Return THttpServer instance serving requests to the window. ; Definition at line 181 of file RWebWindow.cxx. ◆ GetUrl(). std::string RWebWindow::GetUrl ; (; bool ; remote = true). Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ; Parameters. remoteis true, real HTTP server will be started automatically and widget can be ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:36430,Security,checksum,checksum,36430,"1 - default) ; Definition at line 290 of file RWebWindow.hxx. ◆ HasConnection(). bool RWebWindow::HasConnection ; (; unsigned ; connid = 0, . bool ; only_active = true . ); const. returns true if specified connection id exists ; Parameters. connidconnection id (0 - any) ; only_activewhen true only active connection will be checked, otherwise also pending (not yet established) connections are checked . Definition at line 1413 of file RWebWindow.cxx. ◆ HasKey(). bool RWebWindow::HasKey ; (; const std::string & ; key, . bool ; also_newkey = false . ); const. private . Returns true if provided key value already exists (in processes map or in existing connections) In special cases one also can check if key value exists as newkey. ; Definition at line 558 of file RWebWindow.cxx. ◆ HMAC(). std::string RWebWindow::HMAC ; (; const std::string & ; key, . const std::string & ; sessionKey, . const char * ; msg, . int ; msglen . ). staticprivate . Calculate HMAC checksum for provided key and message Key combained from connection key and session key. ; Definition at line 1992 of file RWebWindow.cxx. ◆ InvokeCallbacks(). void RWebWindow::InvokeCallbacks ; (; bool ; force = false). private . Invoke callbacks with existing data Must be called from appropriate thread. ; Definition at line 438 of file RWebWindow.cxx. ◆ IsFileDialogMessage(). bool RWebWindow::IsFileDialogMessage ; (; const std::string & ; msg). static . Check if this could be the message send by client to start new file dialog If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog instance inside existing widget. ; Definition at line 1963 of file RWebWindow.cxx. ◆ IsNativeOnlyConn(). bool ROOT::RWebWindow::IsNativeOnlyConn ; (; ); const. inline . returns true if only native (own-created) connections are allowed ; Definition at line 312 of file RWebWindow.hxx. ◆ IsRequireAuthKey(). bool ROOT::RWebWindow::IsRequireAuthKey ; (; ); const. inline . returns true if authentication string is r",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:37440,Security,authenticat,authentication,37440,"y combained from connection key and session key. ; Definition at line 1992 of file RWebWindow.cxx. ◆ InvokeCallbacks(). void RWebWindow::InvokeCallbacks ; (; bool ; force = false). private . Invoke callbacks with existing data Must be called from appropriate thread. ; Definition at line 438 of file RWebWindow.cxx. ◆ IsFileDialogMessage(). bool RWebWindow::IsFileDialogMessage ; (; const std::string & ; msg). static . Check if this could be the message send by client to start new file dialog If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog instance inside existing widget. ; Definition at line 1963 of file RWebWindow.cxx. ◆ IsNativeOnlyConn(). bool ROOT::RWebWindow::IsNativeOnlyConn ; (; ); const. inline . returns true if only native (own-created) connections are allowed ; Definition at line 312 of file RWebWindow.hxx. ◆ IsRequireAuthKey(). bool ROOT::RWebWindow::IsRequireAuthKey ; (; ); const. inline . returns true if authentication string is required ; Definition at line 320 of file RWebWindow.hxx. ◆ IsShown(). bool ROOT::RWebWindow::IsShown ; (; ); const. inline . Returns true when window was shown at least once. ; Definition at line 369 of file RWebWindow.hxx. ◆ IsUseCurrentDir(). bool ROOT::RWebWindow::IsUseCurrentDir ; (; ); const. inline . returns true if window can access local files via currentdir/ path of http server ; Definition at line 328 of file RWebWindow.hxx. ◆ MakeHeadless(). unsigned RWebWindow::MakeHeadless ; (; bool ; create_new = false). private . Start headless browser for specified window Normally only single instance is used, but many can be created See ROOT::RWebWindowsManager::Show() docu for more info returns (future) connection id (or 0 when fails) ; Definition at line 202 of file RWebWindow.cxx. ◆ NumConnections(). int RWebWindow::NumConnections ; (; bool ; with_pending = false); const. Returns current number of active clients connections. ; Parameters. with_pendingif true, also pending (not yet establ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:37801,Security,access,access,37801,"alogMessage ; (; const std::string & ; msg). static . Check if this could be the message send by client to start new file dialog If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog instance inside existing widget. ; Definition at line 1963 of file RWebWindow.cxx. ◆ IsNativeOnlyConn(). bool ROOT::RWebWindow::IsNativeOnlyConn ; (; ); const. inline . returns true if only native (own-created) connections are allowed ; Definition at line 312 of file RWebWindow.hxx. ◆ IsRequireAuthKey(). bool ROOT::RWebWindow::IsRequireAuthKey ; (; ); const. inline . returns true if authentication string is required ; Definition at line 320 of file RWebWindow.hxx. ◆ IsShown(). bool ROOT::RWebWindow::IsShown ; (; ); const. inline . Returns true when window was shown at least once. ; Definition at line 369 of file RWebWindow.hxx. ◆ IsUseCurrentDir(). bool ROOT::RWebWindow::IsUseCurrentDir ; (; ); const. inline . returns true if window can access local files via currentdir/ path of http server ; Definition at line 328 of file RWebWindow.hxx. ◆ MakeHeadless(). unsigned RWebWindow::MakeHeadless ; (; bool ; create_new = false). private . Start headless browser for specified window Normally only single instance is used, but many can be created See ROOT::RWebWindowsManager::Show() docu for more info returns (future) connection id (or 0 when fails) ; Definition at line 202 of file RWebWindow.cxx. ◆ NumConnections(). int RWebWindow::NumConnections ; (; bool ; with_pending = false); const. Returns current number of active clients connections. ; Parameters. with_pendingif true, also pending (not yet established) connection accounted . Definition at line 1330 of file RWebWindow.cxx. ◆ ProcessBatchHolder(). bool RWebWindow::ProcessBatchHolder ; (; std::shared_ptr< THttpCallArg > & ; arg). private . Process special http request, used to hold headless browser running Such requests should not be replied for the long time Be aware that function called directly from THttp",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:47626,Security,authenticat,authentication,47626,"; (; bool ; on = true). inline . configures that only native (own-created) connections are allowed ; Definition at line 308 of file RWebWindow.hxx. ◆ SetOperationTmout(). void ROOT::RWebWindow::SetOperationTmout ; (; float ; tm = 50.). inline . Set timeout for synchronous WebWindow operations. ; Definition at line 354 of file RWebWindow.hxx. ◆ SetPanelName(). void RWebWindow::SetPanelName ; (; const std::string & ; name). Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ; Definition at line 132 of file RWebWindow.cxx. ◆ SetPosition(). void ROOT::RWebWindow::SetPosition ; (; unsigned ; x, . unsigned ; y . ). inline . Set window position. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 269 of file RWebWindow.hxx. ◆ SetRequireAuthKey(). void ROOT::RWebWindow::SetRequireAuthKey ; (; bool ; on). inline . Configure if authentication key in connection string is required. ; Definition at line 316 of file RWebWindow.hxx. ◆ SetStartDialogFunc(). void RWebWindow::SetStartDialogFunc ; (; std::function< bool(const std::shared_ptr< RWebWindow > &, unsigned, const std::string &)> ; func). staticprivate . Configure func which has to be used for starting dialog. ; Definition at line 1953 of file RWebWindow.cxx. ◆ SetUseCurrentDir(). void ROOT::RWebWindow::SetUseCurrentDir ; (; bool ; on = true). inline . Configure if window can access local files via currentdir/ path of http server. ; Definition at line 324 of file RWebWindow.hxx. ◆ SetUserArgs(). void RWebWindow::SetUserArgs ; (; const std::string & ; args). Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ; Parameters. args- arbitrary JSON data which can be provided to client side . Definition at line 1310 of ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:48135,Security,access,access,48135,"s/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ; Definition at line 132 of file RWebWindow.cxx. ◆ SetPosition(). void ROOT::RWebWindow::SetPosition ; (; unsigned ; x, . unsigned ; y . ). inline . Set window position. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 269 of file RWebWindow.hxx. ◆ SetRequireAuthKey(). void ROOT::RWebWindow::SetRequireAuthKey ; (; bool ; on). inline . Configure if authentication key in connection string is required. ; Definition at line 316 of file RWebWindow.hxx. ◆ SetStartDialogFunc(). void RWebWindow::SetStartDialogFunc ; (; std::function< bool(const std::shared_ptr< RWebWindow > &, unsigned, const std::string &)> ; func). staticprivate . Configure func which has to be used for starting dialog. ; Definition at line 1953 of file RWebWindow.cxx. ◆ SetUseCurrentDir(). void ROOT::RWebWindow::SetUseCurrentDir ; (; bool ; on = true). inline . Configure if window can access local files via currentdir/ path of http server. ; Definition at line 324 of file RWebWindow.hxx. ◆ SetUserArgs(). void RWebWindow::SetUserArgs ; (; const std::string & ; args). Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ; Parameters. args- arbitrary JSON data which can be provided to client side . Definition at line 1310 of file RWebWindow.cxx. ◆ Show(). unsigned RWebWindow::Show ; (; const RWebDisplayArgs & ; args = """"). Show window in specified location. ; See alsoROOT::RWebWindowsManager::Show for more info ; Returns(future) connection id (or 0 when fails) ; Definition at line 191 of file RWebWindow.cxx. ◆ ShowWindow(). unsigned RWebWindow::ShowWindow ; (; std::shared_ptr< RWebWindow > ; window, . const RWebDisplayArgs & ; args = """" . ). static . Static method to show web window Has to be used instead of RWebWindow::",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:48354,Security,access,accessible,48354," ; x, . unsigned ; y . ). inline . Set window position. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 269 of file RWebWindow.hxx. ◆ SetRequireAuthKey(). void ROOT::RWebWindow::SetRequireAuthKey ; (; bool ; on). inline . Configure if authentication key in connection string is required. ; Definition at line 316 of file RWebWindow.hxx. ◆ SetStartDialogFunc(). void RWebWindow::SetStartDialogFunc ; (; std::function< bool(const std::shared_ptr< RWebWindow > &, unsigned, const std::string &)> ; func). staticprivate . Configure func which has to be used for starting dialog. ; Definition at line 1953 of file RWebWindow.cxx. ◆ SetUseCurrentDir(). void ROOT::RWebWindow::SetUseCurrentDir ; (; bool ; on = true). inline . Configure if window can access local files via currentdir/ path of http server. ; Definition at line 324 of file RWebWindow.hxx. ◆ SetUserArgs(). void RWebWindow::SetUserArgs ; (; const std::string & ; args). Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ; Parameters. args- arbitrary JSON data which can be provided to client side . Definition at line 1310 of file RWebWindow.cxx. ◆ Show(). unsigned RWebWindow::Show ; (; const RWebDisplayArgs & ; args = """"). Show window in specified location. ; See alsoROOT::RWebWindowsManager::Show for more info ; Returns(future) connection id (or 0 when fails) ; Definition at line 191 of file RWebWindow.cxx. ◆ ShowWindow(). unsigned RWebWindow::ShowWindow ; (; std::shared_ptr< RWebWindow > ; window, . const RWebDisplayArgs & ; args = """" . ). static . Static method to show web window Has to be used instead of RWebWindow::Show() when window potentially can be embed into other windows Soon RWebWindow::Show() method will be done protected. ; Definition at line 1915 of file RWebWindow.cxx. ◆ StartThread(). void RWebWin",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:48424,Security,inject,injected,48424," CEF or Chromium) ; Definition at line 269 of file RWebWindow.hxx. ◆ SetRequireAuthKey(). void ROOT::RWebWindow::SetRequireAuthKey ; (; bool ; on). inline . Configure if authentication key in connection string is required. ; Definition at line 316 of file RWebWindow.hxx. ◆ SetStartDialogFunc(). void RWebWindow::SetStartDialogFunc ; (; std::function< bool(const std::shared_ptr< RWebWindow > &, unsigned, const std::string &)> ; func). staticprivate . Configure func which has to be used for starting dialog. ; Definition at line 1953 of file RWebWindow.cxx. ◆ SetUseCurrentDir(). void ROOT::RWebWindow::SetUseCurrentDir ; (; bool ; on = true). inline . Configure if window can access local files via currentdir/ path of http server. ; Definition at line 324 of file RWebWindow.hxx. ◆ SetUserArgs(). void RWebWindow::SetUserArgs ; (; const std::string & ; args). Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ; Parameters. args- arbitrary JSON data which can be provided to client side . Definition at line 1310 of file RWebWindow.cxx. ◆ Show(). unsigned RWebWindow::Show ; (; const RWebDisplayArgs & ; args = """"). Show window in specified location. ; See alsoROOT::RWebWindowsManager::Show for more info ; Returns(future) connection id (or 0 when fails) ; Definition at line 191 of file RWebWindow.cxx. ◆ ShowWindow(). unsigned RWebWindow::ShowWindow ; (; std::shared_ptr< RWebWindow > ; window, . const RWebDisplayArgs & ; args = """" . ). static . Static method to show web window Has to be used instead of RWebWindow::Show() when window potentially can be embed into other windows Soon RWebWindow::Show() method will be done protected. ; Definition at line 1915 of file RWebWindow.cxx. ◆ StartThread(). void RWebWindow::StartThread ; (; ). Start special thread which will be used by the window to handle all callbacks One ha",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:49475,Security,access,access,49475,"Window({}) Must be set before RWebWindow::Show() method is called. ; Parameters. args- arbitrary JSON data which can be provided to client side . Definition at line 1310 of file RWebWindow.cxx. ◆ Show(). unsigned RWebWindow::Show ; (; const RWebDisplayArgs & ; args = """"). Show window in specified location. ; See alsoROOT::RWebWindowsManager::Show for more info ; Returns(future) connection id (or 0 when fails) ; Definition at line 191 of file RWebWindow.cxx. ◆ ShowWindow(). unsigned RWebWindow::ShowWindow ; (; std::shared_ptr< RWebWindow > ; window, . const RWebDisplayArgs & ; args = """" . ). static . Static method to show web window Has to be used instead of RWebWindow::Show() when window potentially can be embed into other windows Soon RWebWindow::Show() method will be done protected. ; Definition at line 1915 of file RWebWindow.cxx. ◆ StartThread(). void RWebWindow::StartThread ; (; ). Start special thread which will be used by the window to handle all callbacks One has to be sure, that access to global ROOT structures are minimized and protected with ROOT::EnableThreadSafety(); call. ; Definition at line 1680 of file RWebWindow.cxx. ◆ StopThread(). void RWebWindow::StopThread ; (; ). Stop special thread. ; Definition at line 1702 of file RWebWindow.cxx. ◆ SubmitData(). void RWebWindow::SubmitData ; (; unsigned ; connid, . bool ; txt, . std::string && ; data, . int ; chid = 1 . ). private . Internal method to send data. ; Parameters. connidconnection id, when 0 - data will be send to all connections ; txtis text message that should be sent ; datadata to be std-moved to SubmitData function ; chidchannel id, 1 - normal communication, 0 - internal with highest priority . Definition at line 1529 of file RWebWindow.cxx. ◆ Sync(). void RWebWindow::Sync ; (; ). Special method to process all internal activity when window runs in separate thread. ; Definition at line 1236 of file RWebWindow.cxx. ◆ TerminateROOT(). void RWebWindow::TerminateROOT ; (; ). Terminate ROOT session",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:58696,Security,authenticat,authentication,58696,"in dedicated thread ; Definition at line 144 of file RWebWindow.hxx. ◆ fProtocol. std::string ROOT::RWebWindow::fProtocol. private . ! protocol ; Definition at line 174 of file RWebWindow.hxx. ◆ fProtocolCnt. int ROOT::RWebWindow::fProtocolCnt {-1}. private . ! counter for protocol recording ; Definition at line 171 of file RWebWindow.hxx. ◆ fProtocolConnId. unsigned ROOT::RWebWindow::fProtocolConnId {0}. private . ! connection id, which is used for writing protocol ; Definition at line 172 of file RWebWindow.hxx. ◆ fProtocolFileName. std::string ROOT::RWebWindow::fProtocolFileName. private . ! local file where communication protocol will be written ; Definition at line 170 of file RWebWindow.hxx. ◆ fProtocolPrefix. std::string ROOT::RWebWindow::fProtocolPrefix. private . ! prefix for created files names ; Definition at line 173 of file RWebWindow.hxx. ◆ fRequireAuthKey. bool ROOT::RWebWindow::fRequireAuthKey {true}. private . ! defines if authentication key always required when connect to the widget ; Definition at line 146 of file RWebWindow.hxx. ◆ fSendMT. bool ROOT::RWebWindow::fSendMT {false}. private . ! true is special threads should be used for sending data ; Definition at line 145 of file RWebWindow.hxx. ◆ fUseCurrentDir. bool ROOT::RWebWindow::fUseCurrentDir {false}. private . ! if window can access local files via currentdir/ path of http server ; Definition at line 155 of file RWebWindow.hxx. ◆ fUseProcessEvents. bool ROOT::RWebWindow::fUseProcessEvents {false}. private . ! all window functionality will run through process events ; Definition at line 143 of file RWebWindow.hxx. ◆ fUserArgs. std::string ROOT::RWebWindow::fUserArgs. private . ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ; Definition at line 175 of file RWebWindow.hxx. ◆ fUseServerThreads. bool ROOT::RWebWindow::fUseServerThreads {false}. private . ! indicates that server thread is using, no special window thread ; Definition at line 142 of file RWebWindow.hxx. ◆",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:59066,Security,access,access,59066,"gned ROOT::RWebWindow::fProtocolConnId {0}. private . ! connection id, which is used for writing protocol ; Definition at line 172 of file RWebWindow.hxx. ◆ fProtocolFileName. std::string ROOT::RWebWindow::fProtocolFileName. private . ! local file where communication protocol will be written ; Definition at line 170 of file RWebWindow.hxx. ◆ fProtocolPrefix. std::string ROOT::RWebWindow::fProtocolPrefix. private . ! prefix for created files names ; Definition at line 173 of file RWebWindow.hxx. ◆ fRequireAuthKey. bool ROOT::RWebWindow::fRequireAuthKey {true}. private . ! defines if authentication key always required when connect to the widget ; Definition at line 146 of file RWebWindow.hxx. ◆ fSendMT. bool ROOT::RWebWindow::fSendMT {false}. private . ! true is special threads should be used for sending data ; Definition at line 145 of file RWebWindow.hxx. ◆ fUseCurrentDir. bool ROOT::RWebWindow::fUseCurrentDir {false}. private . ! if window can access local files via currentdir/ path of http server ; Definition at line 155 of file RWebWindow.hxx. ◆ fUseProcessEvents. bool ROOT::RWebWindow::fUseProcessEvents {false}. private . ! all window functionality will run through process events ; Definition at line 143 of file RWebWindow.hxx. ◆ fUserArgs. std::string ROOT::RWebWindow::fUserArgs. private . ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ; Definition at line 175 of file RWebWindow.hxx. ◆ fUseServerThreads. bool ROOT::RWebWindow::fUseServerThreads {false}. private . ! indicates that server thread is using, no special window thread ; Definition at line 142 of file RWebWindow.hxx. ◆ fWidth. unsigned ROOT::RWebWindow::fWidth {0}. private . Definition at line 166 of file RWebWindow.hxx. ◆ fWindowThrd. std::thread ROOT::RWebWindow::fWindowThrd. private . ! special thread for that window ; Definition at line 163 of file RWebWindow.hxx. ◆ fWSHandler. std::shared_ptr<RWebWindowWSHandler> ROOT::RWebWindow::fWSHandler. private . ! specialize websoc",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:59455,Security,access,accessible,59455," ◆ fProtocolPrefix. std::string ROOT::RWebWindow::fProtocolPrefix. private . ! prefix for created files names ; Definition at line 173 of file RWebWindow.hxx. ◆ fRequireAuthKey. bool ROOT::RWebWindow::fRequireAuthKey {true}. private . ! defines if authentication key always required when connect to the widget ; Definition at line 146 of file RWebWindow.hxx. ◆ fSendMT. bool ROOT::RWebWindow::fSendMT {false}. private . ! true is special threads should be used for sending data ; Definition at line 145 of file RWebWindow.hxx. ◆ fUseCurrentDir. bool ROOT::RWebWindow::fUseCurrentDir {false}. private . ! if window can access local files via currentdir/ path of http server ; Definition at line 155 of file RWebWindow.hxx. ◆ fUseProcessEvents. bool ROOT::RWebWindow::fUseProcessEvents {false}. private . ! all window functionality will run through process events ; Definition at line 143 of file RWebWindow.hxx. ◆ fUserArgs. std::string ROOT::RWebWindow::fUserArgs. private . ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ; Definition at line 175 of file RWebWindow.hxx. ◆ fUseServerThreads. bool ROOT::RWebWindow::fUseServerThreads {false}. private . ! indicates that server thread is using, no special window thread ; Definition at line 142 of file RWebWindow.hxx. ◆ fWidth. unsigned ROOT::RWebWindow::fWidth {0}. private . Definition at line 166 of file RWebWindow.hxx. ◆ fWindowThrd. std::thread ROOT::RWebWindow::fWindowThrd. private . ! special thread for that window ; Definition at line 163 of file RWebWindow.hxx. ◆ fWSHandler. std::shared_ptr<RWebWindowWSHandler> ROOT::RWebWindow::fWSHandler. private . ! specialize websocket handler for all incoming connections ; Definition at line 147 of file RWebWindow.hxx. ◆ fX. int ROOT::RWebWindow::fX {-1}. private . Definition at line 167 of file RWebWindow.hxx. ◆ fY. int ROOT::RWebWindow::fY {-1}. private . ! initial window position, -1 ignored ; Definition at line 167 of file RWebWindow.hxx. ◆ gStartDialogFunc. std:",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:23392,Testability,test,tested,23392,"file RWebWindow.hxx. Constructor & Destructor Documentation. ◆ RWebWindow(). RWebWindow::RWebWindow ; (; ). RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ; Definition at line 76 of file RWebWindow.cxx. ◆ ~RWebWindow(). RWebWindow::~RWebWindow ; (; ). RWebWindow destructor Closes all connections and remove window from manager. ; Definition at line 85 of file RWebWindow.cxx. Member Function Documentation. ◆ _CanTrustIn(). bool RWebWindow::_CanTrustIn ; (; std::shared_ptr< WebConn > & ; conn, . const std::string & ; hash, . const std::string & ; ntry, . bool ; remote, . bool ; test_first_time . ). private . Check if provided hash, ntry parameters from the connection request could be accepted. ; Parameters. hash- provided hash value which should match with HMAC hash for generated before connection key ; ntry- connection attempt number provided together with request, must come in increasing order ; remote- boolean flag indicating if request comming from remote (via real http), for local displays like Qt5 or CEF simpler connection rules are applied ; test_first_time- true if hash/ntry tested for the first time, false appears only with websocket when connection accepted by server . Definition at line 513 of file RWebWindow.cxx. ◆ _MakeSendHeader(). std::string RWebWindow::_MakeSendHeader ; (; std::shared_ptr< WebConn > & ; conn, . bool ; txt, . const std::string & ; data, . int ; chid . ). private . Internal method to prepare text part of send data Should be called under locked connection mutex. ; Definition at line 1107 of file RWebWindow.cxx. ◆ AddDisplayHandle(). unsigned RWebWindow::AddDisplayHandle ; (; bool ; headless_mode, . const std::string & ; key, . std::unique_ptr< RWebDisplayHandle > & ; handle . ). private . Add display handle and associated key Key is large random string generated when starting new window When client is connected, key should be supplied to correctly identify it. ; Definition at line 482 of file ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:40064,Testability,test,test,40064,"cks, invoked from RWebWindowWSHandler Method invoked from http server thread, therefore appropriate mutex must be used on all relevant data. ; Definition at line 736 of file RWebWindow.cxx. ◆ ProvideQueueEntry(). void RWebWindow::ProvideQueueEntry ; (; unsigned ; connid, . EQueueEntryKind ; kind, . std::string && ; arg . ). private . Provide data to user callback User callback must be executed in the window thread. ; Definition at line 421 of file RWebWindow.cxx. ◆ RecordData(). void RWebWindow::RecordData ; (; const std::string & ; fname = ""protocol.json"", . const std::string & ; fprefix = """" . ). Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ; JSON file will look like: [""send"", ""msg0.txt"", ""send"", ""msg1.txt"", ""msg2.txt""]; If empty file name is provided, data recording will be disabled Recorded data can be used in JSROOT directly to test client code without running C++ server ; Definition at line 1355 of file RWebWindow.cxx. ◆ RemoveConnection(). std::shared_ptr< RWebWindow::WebConn > RWebWindow::RemoveConnection ; (; unsigned ; wsid). private . Remove connection with given websocket id. ; Definition at line 279 of file RWebWindow.cxx. ◆ RemoveEmbedWindow(). void RWebWindow::RemoveEmbedWindow ; (; unsigned ; connid, . int ; channel . ). private . Remove RWebWindow associated with the channelfEmbed. ; Definition at line 1867 of file RWebWindow.cxx. ◆ RemoveKey(). void RWebWindow::RemoveKey ; (; const std::string & ; key). private . Removes all connections with the key. ; Definition at line 583 of file RWebWindow.cxx. ◆ RemoveMasterConnection(). void RWebWindow::RemoveMasterConnection ; (; unsigned ; connid = 0). private . Remove master connection - if any. ; Definition at line 343 of file RWebWindow.cxx. ◆ Run(). void RWebWindow::Run ; (; double ; tm = 0.). Run window functionality for specified time",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:6873,Usability,clear,cleared,6873,"const std::string &fprefix="""");  Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ;  ; void Run (double tm=0.);  Run window functionality for specified time If no action can be performed - just sleep specified time. ;  ; void Send (unsigned connid, const std::string &data);  Sends data to specified connection. ;  ; void SendBinary (unsigned connid, const void *data, std::size_t len);  Send binary data to specified connection. ;  ; void SendBinary (unsigned connid, std::string &&data);  Send binary data to specified connection. ;  ; void SetCallBacks (WebWindowConnectCallback_t conn, WebWindowDataCallback_t data, WebWindowConnectCallback_t disconn=nullptr);  Set call-backs function for connect, data and disconnect events. ;  ; void SetClearOnClose (const std::shared_ptr< void > &handle=nullptr);  Set handle which is cleared when last active connection is closed Typically can be used to destroy web-based widget at such moment. ;  ; void SetClientVersion (const std::string &vers);  Set client version, used as prefix in scripts URL When changed, web browser will reload all related JS files while full URL will be different Default is empty value - no extra string in URL Version should be string like ""1.2"" or ""ver1.subv2"" and not contain any special symbols. ;  ; void SetConnectCallBack (WebWindowConnectCallback_t func);  Set call-back function for new connection. ;  ; void SetConnLimit (unsigned lmt=0);  Configure maximal number of allowed connections - 0 is unlimited Will not affect already existing connections Default is 1 - the only client is allowed. ;  ; void SetConnToken (const std::string &token="""");  Configures connection token (default none) When specified, in URL of webpage such token should be provided as &token=value parameter, otherwise web window will refuse connection. ;  ; void SetDataCallBac",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:18160,Usability,clear,cleared,18160,"hich has to be used for starting dialog. ;  . Private Attributes; std::thread::id fCallbacksThrdId;  ! thread id where callbacks should be invoked ;  ; bool fCallbacksThrdIdSet {false};  ! flag indicating that thread id is assigned ;  ; std::shared_ptr< void > fClearOnClose;  ! entry which is cleared when last connection is closed ;  ; std::string fClientVersion;  ! configured client version, used as prefix in scripts URL ;  ; ConnectionsList_t fConn;  ! list of all accepted connections ;  ; WebWindowConnectCallback_t fConnCallback;  ! callback for connect event ;  ; unsigned fConnCnt {0};  ! counter of new connections to assign ids ;  ; unsigned fConnLimit {1};  ! number of allowed active connections ;  ; std::mutex fConnMutex;  ! mutex used to protect connection list ;  ; std::string fConnToken;  ! value of ""token"" URL parameter which should be provided for connecting window ;  ; WebWindowDataCallback_t fDataCallback;  ! main callback when data over channel 1 is arrived ;  ; std::string fDefaultPage;  ! HTML page (or file name) returned when window URL is opened ;  ; WebWindowConnectCallback_t fDisconnCallback;  ! callback for disconnect event ;  ; bool fHasWindowThrd {false};  ! indicate if special window thread was started ;  ; unsigned fHeight {0};  ! initial window width and height when displayed, zeros are ignored ;  ; unsigned fId {0};  ! unique identifier ;  ; std::queue< QueueEntry > fInputQueue;  ! input queue for all callbacks ;  ; std::mutex fInputQueueMutex;  ! mutex to protect input queue ;  ; std::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchrono",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:23318,Usability,simpl,simpler,23318,"file RWebWindow.hxx. Constructor & Destructor Documentation. ◆ RWebWindow(). RWebWindow::RWebWindow ; (; ). RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ; Definition at line 76 of file RWebWindow.cxx. ◆ ~RWebWindow(). RWebWindow::~RWebWindow ; (; ). RWebWindow destructor Closes all connections and remove window from manager. ; Definition at line 85 of file RWebWindow.cxx. Member Function Documentation. ◆ _CanTrustIn(). bool RWebWindow::_CanTrustIn ; (; std::shared_ptr< WebConn > & ; conn, . const std::string & ; hash, . const std::string & ; ntry, . bool ; remote, . bool ; test_first_time . ). private . Check if provided hash, ntry parameters from the connection request could be accepted. ; Parameters. hash- provided hash value which should match with HMAC hash for generated before connection key ; ntry- connection attempt number provided together with request, must come in increasing order ; remote- boolean flag indicating if request comming from remote (via real http), for local displays like Qt5 or CEF simpler connection rules are applied ; test_first_time- true if hash/ntry tested for the first time, false appears only with websocket when connection accepted by server . Definition at line 513 of file RWebWindow.cxx. ◆ _MakeSendHeader(). std::string RWebWindow::_MakeSendHeader ; (; std::shared_ptr< WebConn > & ; conn, . bool ; txt, . const std::string & ; data, . int ; chid . ). private . Internal method to prepare text part of send data Should be called under locked connection mutex. ; Definition at line 1107 of file RWebWindow.cxx. ◆ AddDisplayHandle(). unsigned RWebWindow::AddDisplayHandle ; (; bool ; headless_mode, . const std::string & ; key, . std::unique_ptr< RWebDisplayHandle > & ; handle . ). private . Add display handle and associated key Key is large random string generated when starting new window When client is connected, key should be supplied to correctly identify it. ; Definition at line 482 of file ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:42565,Usability,clear,cleared,42565,"fied connection. ; Parameters. connidconnection id, when 0 - data will be send to all connections ; datapointer to binary data ; lennumber of bytes in data . Definition at line 1630 of file RWebWindow.cxx. ◆ SendBinary() [2/2]. void RWebWindow::SendBinary ; (; unsigned ; connid, . std::string && ; data . ). Send binary data to specified connection. ; Parameters. connidconnection id, when 0 - data will be send to all connections ; datadata to be std-moved to SubmitData function . Definition at line 1619 of file RWebWindow.cxx. ◆ SetCallBacks(). void RWebWindow::SetCallBacks ; (; WebWindowConnectCallback_t ; conn, . WebWindowDataCallback_t ; data, . WebWindowConnectCallback_t ; disconn = nullptr . ). Set call-backs function for connect, data and disconnect events. ; Definition at line 1772 of file RWebWindow.cxx. ◆ SetClearOnClose(). void RWebWindow::SetClearOnClose ; (; const std::shared_ptr< void > & ; handle = nullptr). Set handle which is cleared when last active connection is closed Typically can be used to destroy web-based widget at such moment. ; Definition at line 1764 of file RWebWindow.cxx. ◆ SetClientVersion(). void RWebWindow::SetClientVersion ; (; const std::string & ; vers). Set client version, used as prefix in scripts URL When changed, web browser will reload all related JS files while full URL will be different Default is empty value - no extra string in URL Version should be string like ""1.2"" or ""ver1.subv2"" and not contain any special symbols. ; Definition at line 1289 of file RWebWindow.cxx. ◆ SetConnectCallBack(). void RWebWindow::SetConnectCallBack ; (; WebWindowConnectCallback_t ; func). Set call-back function for new connection. ; Definition at line 1743 of file RWebWindow.cxx. ◆ SetConnLimit(). void RWebWindow::SetConnLimit ; (; unsigned ; lmt = 0). Configure maximal number of allowed connections - 0 is unlimited Will not affect already existing connections Default is 1 - the only client is allowed. ; Definition at line 693 of file RWebWindow",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:44485,Usability,simpl,simple,44485," only client is allowed. ; Definition at line 693 of file RWebWindow.cxx. ◆ SetConnToken(). void RWebWindow::SetConnToken ; (; const std::string & ; token = """"). Configures connection token (default none) When specified, in URL of webpage such token should be provided as &token=value parameter, otherwise web window will refuse connection. ; Definition at line 715 of file RWebWindow.cxx. ◆ SetDataCallBack(). void RWebWindow::SetDataCallBack ; (; WebWindowDataCallback_t ; func). Set call-back function for data, received from the clients via websocket. ; Function should have signature like void func(unsigned connid, const std::string &data) First argument identifies connection (unique for each window), second argument is received data; At the moment when callback is assigned, RWebWindow working thread is detected. If called not from main application thread, RWebWindow::Run() function must be regularly called from that thread.; Most simple way to assign call-back - use of c++11 lambdas like: auto win = RWebWindow::Create();; win->SetDefaultPage(""file:./page.htm"");; win->SetDataCallBack(; [](unsigned connid, const std::string &data) {; printf(""Conn:%u data:%s\n"", connid, data.c_str());; }; );; win->Show();; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; winOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t winDefinition TGWin32VirtualXProxy.cxx:186; ROOT::RWebWindow::Createstatic std::shared_ptr< RWebWindow > Create()Create new RWebWindow Using default RWebWindowsManager.Definition RWebWindow.cxx:1883. Definition at line 1733 of file RWebWindow.cxx. ◆ SetDefaultPage(). void ROOT::RWebWi",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:53709,Usability,clear,cleared,53709,"e RWebWindow.cxx. Friends And Related Symbol Documentation. ◆ RFileDialog. friend class RFileDialog. friend . Definition at line 57 of file RWebWindow.hxx. ◆ RWebDisplayHandle. friend class RWebDisplayHandle. friend . Definition at line 56 of file RWebWindow.hxx. ◆ RWebWindowsManager. friend class RWebWindowsManager. friend . Definition at line 54 of file RWebWindow.hxx. ◆ RWebWindowWSHandler. friend class RWebWindowWSHandler. friend . Definition at line 55 of file RWebWindow.hxx. Member Data Documentation. ◆ fCallbacksThrdId. std::thread::id ROOT::RWebWindow::fCallbacksThrdId. private . ! thread id where callbacks should be invoked ; Definition at line 160 of file RWebWindow.hxx. ◆ fCallbacksThrdIdSet. bool ROOT::RWebWindow::fCallbacksThrdIdSet {false}. private . ! flag indicating that thread id is assigned ; Definition at line 161 of file RWebWindow.hxx. ◆ fClearOnClose. std::shared_ptr<void> ROOT::RWebWindow::fClearOnClose. private . ! entry which is cleared when last connection is closed ; Definition at line 176 of file RWebWindow.hxx. ◆ fClientVersion. std::string ROOT::RWebWindow::fClientVersion. private . ! configured client version, used as prefix in scripts URL ; Definition at line 169 of file RWebWindow.hxx. ◆ fConn. ConnectionsList_t ROOT::RWebWindow::fConn. private . ! list of all accepted connections ; Definition at line 150 of file RWebWindow.hxx. ◆ fConnCallback. WebWindowConnectCallback_t ROOT::RWebWindow::fConnCallback. private . ! callback for connect event ; Definition at line 157 of file RWebWindow.hxx. ◆ fConnCnt. unsigned ROOT::RWebWindow::fConnCnt {0}. private . ! counter of new connections to assign ids ; Definition at line 148 of file RWebWindow.hxx. ◆ fConnLimit. unsigned ROOT::RWebWindow::fConnLimit {1}. private . ! number of allowed active connections ; Definition at line 152 of file RWebWindow.hxx. ◆ fConnMutex. std::mutex ROOT::RWebWindow::fConnMutex. mutableprivate . ! mutex used to protect connection list ; Definition at line 151 of fi",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:1256,Availability,avail,available,1256," |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RWebWindowsManager Class ReferenceWeb Display. ; Central instance to create and show web-based windows like Canvas or FitPanel. ; Manager responsible to creating THttpServer instance, which is used for RWebWindow's communication with clients.; Method RWebWindows::Show() used to show window in specified location. ; Definition at line 36 of file RWebWindowsManager.hxx. Public Member Functions;  RWebWindowsManager ();  window manager constructor Required here for correct usage of unique_ptr<THttpServer> ;  ;  ~RWebWindowsManager ();  window manager destructor Required here for correct usage of unique_ptr<THttpServer> ;  ; std::shared_ptr< RWebWindow > CreateWindow ();  Creates new window To show window, RWebWindow::Show() have to be called. ;  ; THttpServer * GetServer () const;  Returns THttpServer instance. ;  ; std::string GetServerAddr () const;  Returns http address of the server, empty string when not available. ;  ; void SetShowCallback (WebWindowShowCallback_t func);  Assign show callback which can catch window showing, used by RBrowser. ;  ; void Terminate ();  Terminate http server and ROOT application. ;  . Static Public Member Functions; static void AssignMainThrd ();  Re-assigns main thread id Normally main thread id recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ;  ; static std::shared_ptr< RWebWindowsManager > & Instance ();  Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ;  ; static bool IsLoopbackMode ();  Returns true if loopback mode used by THttpServer for web widgets. ;  ; static bool IsMainThrd ();  Returns true when called from main process Main process recognized at the m",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:7764,Availability,avail,available,7764,"of file RWebWindowsManager.cxx. Member Function Documentation. ◆ AssignMainThrd(). void RWebWindowsManager::AssignMainThrd ; (; ). static . Re-assigns main thread id Normally main thread id recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 116 of file RWebWindowsManager.cxx. ◆ CreateServer(). bool RWebWindowsManager::CreateServer ; (; bool ; with_http = false). private . Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ; WebGui.HttpPort: 8088; or specify range of http ports, which can be used: WebGui.HttpPortMin: 8800; WebGui.HttpPortMax: 9800; By default range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be available: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to handle requests: WebGui.UnixSocket: /path/to/unix/socket; WebGui.UnixSocketMode: 0700; Typically one used unix sockets together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpServer in timer handler with 10 ms timeout. One may decrease value to improve latency or increase value to minimize CPU load WebGui.HttpTimer: 10; To processing incoming http requests and websockets, THttpServer allocate 10 threads One have to increase this number if more simultaneous connections are expected: Web",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:11515,Availability,avail,available,11515,"Show() have to be called. ; Definition at line 536 of file RWebWindowsManager.cxx. ◆ GenerateKey(). std::string RWebWindowsManager::GenerateKey ; (; int ; keylen = 32). staticprivate . Static method to generate cryptographic key Parameter keylen defines length of cryptographic key in bytes Output string will be hex formatted and includes ""-"" separator after every 4 bytes Example for 16 bytes: ""fca45856-41bee066-ff74cc96-9154d405"". ; Definition at line 178 of file RWebWindowsManager.cxx. ◆ GetLaunchTmout(). float ROOT::RWebWindowsManager::GetLaunchTmout ; (; ); const. inlineprivate . Returns timeout for launching new browser process. ; Definition at line 61 of file RWebWindowsManager.hxx. ◆ GetServer(). THttpServer * ROOT::RWebWindowsManager::GetServer ; (; ); const. inline . Returns THttpServer instance. ; Definition at line 84 of file RWebWindowsManager.hxx. ◆ GetServerAddr(). std::string ROOT::RWebWindowsManager::GetServerAddr ; (; ); const. inline . Returns http address of the server, empty string when not available. ; Definition at line 87 of file RWebWindowsManager.hxx. ◆ GetUrl(). std::string RWebWindowsManager::GetUrl ; (; RWebWindow & ; win, . bool ; remote = false, . std::string * ; produced_key = nullptr . ). private . Provide URL address to access specified window from inside or from remote. ; Definition at line 600 of file RWebWindowsManager.cxx. ◆ InformListener(). bool RWebWindowsManager::InformListener ; (; const std::string & ; msg). private . If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ; Definition at line 227 of file RWebWindowsManager.cxx. ◆ Instance(). std::shared_ptr< RWebWindowsManager > & RWebWindowsManager::Instance ; (; ). static . Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ; Definition at line 78 of file RWebWindowsManager.cxx. ◆ IsLoopbackMode(). bool RWebWindowsManager::IsLoopbackMode ; (; ). static . Returns true if loopback mode used b",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:15460,Availability,avail,available,15460,"um of each packet send to or from server This protects ROOT http server from anauthorized usage. ; Definition at line 167 of file RWebWindowsManager.cxx. ◆ SetUseSessionKey(). void RWebWindowsManager::SetUseSessionKey ; (; bool ; on = true). static . Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ; Definition at line 156 of file RWebWindowsManager.cxx. ◆ ShowWindow(). unsigned RWebWindowsManager::ShowWindow ; (; RWebWindow & ; win, . const RWebDisplayArgs & ; user_args . ). private . Show window in specified location, see Show() method for more details. ; Show web window in specified location.; Parameters. [in,out]winweb window by reference ; user_argsspecifies where and how display web window. As display args one can use string like ""firefox"" or ""chrome"" - these are two main supported web browsers. See RWebDisplayArgs::SetBrowserKind() for all available options. Default value for the browser can be configured when starting root with –web argument like: ""root --web=chrome"". When root started in web server mode ""root --web=server"", no any web browser will be started - just URL will be printout, which can be entered in any running web browser; If allowed, same window can be displayed several times (like for RCanvas or TCanvas); Following parameters can be configured in rootrc file: WebGui.Display: kind of display like chrome or firefox or browser, can be overwritten by --web=value command line argument; WebGui.OnetimeKey: if configured requires unique key every time window is connected (default yes); WebGui.Chrome: full path to Google Chrome executable; WebGui.ChromeBatch: command to start chrome in batch, used for image production, like ""$prog --headless --disable-gpu $geometry $url""; WebGui.ChromeHeadless: command to start chrome in headless mode, like ""fork: --headless --disable-gpu $geometry $url""; WebGui.Chro",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:17607,Availability,error,error,17607,"eadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; WebGui.FirefoxProfile: name of Firefox profile to use; WebGui.FirefoxProfilePath: file path to Firefox profile; WebGui.FirefoxRandomProfile: usage of random Firefox profile -1 never, 0 - only for headless mode (dflt), 1 - always; WebGui.LaunchTmout: time required to start process in seconds (default 30 s); WebGui.OperationTmout: time required to perform WebWindow operation like execute command or update drawings; WebGui.RecordData: if specified enables data recording for each web window 0 - off, 1 - on; WebGui.JsonComp: compression factor for JSON conversion, if not specified - each widget uses own default values; WebGui.ForceHttp: 0 - off (default), 1 - always create real http server to run web window; WebGui.Console: -1 - output only console.error(), 0 - add console.warn(), 1 - add console.log() output; WebGui.ConnCredits: 10 - number of packets which can be send by server or client without acknowledge from receiving side; WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/; WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified; WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3; THttpServer-related parameters documented in CreateServer method ; Definition at line 692 of file RWebWindowsManager.cxx. ◆ Terminate(). void RWebWindowsManager::Terminate ; (; ). Terminate http server and ROOT application. ; Definition at line 851 of file RWebWindowsManager.cxx. ◆ Unregister(). void RWebWindowsManager::Unregister ; (; RWebWindow & ; win). private . Release all references to specified window Called from RWebWindow destructor. ; Definition at line 591 of file RWebWindowsManager.cxx. ◆ WaitFor(). int RWebWindowsManager::WaitFor ; (; RWebWindow & ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:17253,Deployability,update,update,17253,"me in batch, used for image production, like ""$prog --headless --disable-gpu $geometry $url""; WebGui.ChromeHeadless: command to start chrome in headless mode, like ""fork: --headless --disable-gpu $geometry $url""; WebGui.ChromeInteractive: command to start chrome in interactive mode, like ""$prog $geometry --app=\'$url\' &""; WebGui.Firefox: full path to Mozilla Firefox executable; WebGui.FirefoxHeadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; WebGui.FirefoxProfile: name of Firefox profile to use; WebGui.FirefoxProfilePath: file path to Firefox profile; WebGui.FirefoxRandomProfile: usage of random Firefox profile -1 never, 0 - only for headless mode (dflt), 1 - always; WebGui.LaunchTmout: time required to start process in seconds (default 30 s); WebGui.OperationTmout: time required to perform WebWindow operation like execute command or update drawings; WebGui.RecordData: if specified enables data recording for each web window 0 - off, 1 - on; WebGui.JsonComp: compression factor for JSON conversion, if not specified - each widget uses own default values; WebGui.ForceHttp: 0 - off (default), 1 - always create real http server to run web window; WebGui.Console: -1 - output only console.error(), 0 - add console.warn(), 1 - add console.log() output; WebGui.ConnCredits: 10 - number of packets which can be send by server or client without acknowledge from receiving side; WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/; WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified; WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3; THttpServer-related parameters documented in CreateServer method ; Definition at line 692 of file RWebWindowsManager.cxx. ◆ Terminate(). void RWebWindowsManager::Terminat",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:8608,Energy Efficiency,allocate,allocate,8608,"ault range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be available: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to handle requests: WebGui.UnixSocket: /path/to/unix/socket; WebGui.UnixSocketMode: 0700; Typically one used unix sockets together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpServer in timer handler with 10 ms timeout. One may decrease value to improve latency or increase value to minimize CPU load WebGui.HttpTimer: 10; To processing incoming http requests and websockets, THttpServer allocate 10 threads One have to increase this number if more simultaneous connections are expected: WebGui.HttpThrds: 10; One also can configure usage of special thread of processing of http server requests WebGui.HttpThrd: no; Extra threads can be used to send data to different clients via websocket (default no) WebGui.SenderThrds: no; If required, one could change websocket timeouts (default is 10000 ms) WebGui.HttpWSTmout: 10000; By default, THttpServer created in restricted mode which only allows websocket handlers and processes only very few other related http requests. For security reasons such mode should be always enabled. Only if it is really necessary to process all other kinds of HTTP requests, one could specify no for following parameter (default yes): WebGui.WSOnly: yes; In some applications one may need to force longpoll websocket emulations from the beginning, for instance when clients connected via proxys. Although JSROOT should automatically fallback to longpoll engine, one can conf",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:3797,Integrability,message,message,3797,"on key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  ; static void SetUseSessionKey (bool on=true);  Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  . Private Member Functions; bool CreateServer (bool with_http=false);  Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ;  ; float GetLaunchTmout () const;  Returns timeout for launching new browser process. ;  ; std::string GetUrl (RWebWindow &win, bool remote=false, std::string *produced_key=nullptr);  Provide URL address to access specified window from inside or from remote. ;  ; bool InformListener (const std::string &msg);  If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ;  ; bool IsUseHttpThread () const;  Returns true if http server use special thread for requests processing (default off) ;  ; bool IsUseSenderThreads () const;  Returns true if extra threads to send data via websockets will be used (default off) ;  ; unsigned ShowWindow (RWebWindow &win, const RWebDisplayArgs &args);  Show window in specified location, see Show() method for more details. ;  ; void Unregister (RWebWindow &win);  Release all references to specified window Called from RWebWindow destructor. ;  ; int WaitFor (RWebWindow &win, WebWindowWaitFunc_t check, bool timed=false, double tm=-1);  Waits until provided check function or lambdas returns non-zero value Regularly calls WebWindow::Sync() method to let run event loop If call from the main thread, runs system events processing Check function has following signature: int func(double spent_tm) Parameter spent_tm is time in seconds, which already spent ins",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:7935,Integrability,protocol,protocol,7935," loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 116 of file RWebWindowsManager.cxx. ◆ CreateServer(). bool RWebWindowsManager::CreateServer ; (; bool ; with_http = false). private . Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ; WebGui.HttpPort: 8088; or specify range of http ports, which can be used: WebGui.HttpPortMin: 8800; WebGui.HttpPortMax: 9800; By default range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be available: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to handle requests: WebGui.UnixSocket: /path/to/unix/socket; WebGui.UnixSocketMode: 0700; Typically one used unix sockets together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpServer in timer handler with 10 ms timeout. One may decrease value to improve latency or increase value to minimize CPU load WebGui.HttpTimer: 10; To processing incoming http requests and websockets, THttpServer allocate 10 threads One have to increase this number if more simultaneous connections are expected: WebGui.HttpThrds: 10; One also can configure usage of special thread of processing of http server requests WebGui.HttpThrd: no; Extra threads can be used to send data to different clients via websocket (default no) WebGui.SenderThrd",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:12022,Integrability,message,message,12022,"WindowsManager::GetLaunchTmout ; (; ); const. inlineprivate . Returns timeout for launching new browser process. ; Definition at line 61 of file RWebWindowsManager.hxx. ◆ GetServer(). THttpServer * ROOT::RWebWindowsManager::GetServer ; (; ); const. inline . Returns THttpServer instance. ; Definition at line 84 of file RWebWindowsManager.hxx. ◆ GetServerAddr(). std::string ROOT::RWebWindowsManager::GetServerAddr ; (; ); const. inline . Returns http address of the server, empty string when not available. ; Definition at line 87 of file RWebWindowsManager.hxx. ◆ GetUrl(). std::string RWebWindowsManager::GetUrl ; (; RWebWindow & ; win, . bool ; remote = false, . std::string * ; produced_key = nullptr . ). private . Provide URL address to access specified window from inside or from remote. ; Definition at line 600 of file RWebWindowsManager.cxx. ◆ InformListener(). bool RWebWindowsManager::InformListener ; (; const std::string & ; msg). private . If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ; Definition at line 227 of file RWebWindowsManager.cxx. ◆ Instance(). std::shared_ptr< RWebWindowsManager > & RWebWindowsManager::Instance ; (; ). static . Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ; Definition at line 78 of file RWebWindowsManager.cxx. ◆ IsLoopbackMode(). bool RWebWindowsManager::IsLoopbackMode ; (; ). static . Returns true if loopback mode used by THttpServer for web widgets. ; Definition at line 146 of file RWebWindowsManager.cxx. ◆ IsMainThrd(). bool RWebWindowsManager::IsMainThrd ; (; ). static . Returns true when called from main process Main process recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 104 of file RWebWindowsManager.cxx.",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:3329,Modifiability,config,configure,3329,"have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ;  ; static void SetLoopbackMode (bool on=true);  Set loopback mode for THttpServer used for web widgets By default is on. ;  ; static void SetUseConnectionKey (bool on=true);  Enable or disable usage of connection key (default on) If enabled, each connection (and reconnection) to widget requires unique key Connection key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  ; static void SetUseSessionKey (bool on=true);  Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  . Private Member Functions; bool CreateServer (bool with_http=false);  Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ;  ; float GetLaunchTmout () const;  Returns timeout for launching new browser process. ;  ; std::string GetUrl (RWebWindow &win, bool remote=false, std::string *produced_key=nullptr);  Provide URL address to access specified window from inside or from remote. ;  ; bool InformListener (const std::string &msg);  If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ;  ; bool IsUseHttpThread () const;  Returns true if http server use special thread for requests processing (default off) ;  ; bool IsUseSenderThreads () const;  Returns true if extra threads to send data via websockets will be used (default off) ;  ; unsigned ShowWindow (RWebWindow &win, const RWebDisplayArgs &args);  Show window in specified location, see Show() method for more details. ;  ; void Unregister (RWebWindow &win);  Release all references to specified window Called from RWebWindow destructor. ; ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:3773,Modifiability,variab,variable,3773,"on key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  ; static void SetUseSessionKey (bool on=true);  Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  . Private Member Functions; bool CreateServer (bool with_http=false);  Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ;  ; float GetLaunchTmout () const;  Returns timeout for launching new browser process. ;  ; std::string GetUrl (RWebWindow &win, bool remote=false, std::string *produced_key=nullptr);  Provide URL address to access specified window from inside or from remote. ;  ; bool InformListener (const std::string &msg);  If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ;  ; bool IsUseHttpThread () const;  Returns true if http server use special thread for requests processing (default off) ;  ; bool IsUseSenderThreads () const;  Returns true if extra threads to send data via websockets will be used (default off) ;  ; unsigned ShowWindow (RWebWindow &win, const RWebDisplayArgs &args);  Show window in specified location, see Show() method for more details. ;  ; void Unregister (RWebWindow &win);  Release all references to specified window Called from RWebWindow destructor. ;  ; int WaitFor (RWebWindow &win, WebWindowWaitFunc_t check, bool timed=false, double tm=-1);  Waits until provided check function or lambdas returns non-zero value Regularly calls WebWindow::Sync() method to let run event loop If call from the main thread, runs system events processing Check function has following signature: int func(double spent_tm) Parameter spent_tm is time in seconds, which already spent ins",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:3785,Modifiability,config,configured,3785,"on key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  ; static void SetUseSessionKey (bool on=true);  Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  . Private Member Functions; bool CreateServer (bool with_http=false);  Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ;  ; float GetLaunchTmout () const;  Returns timeout for launching new browser process. ;  ; std::string GetUrl (RWebWindow &win, bool remote=false, std::string *produced_key=nullptr);  Provide URL address to access specified window from inside or from remote. ;  ; bool InformListener (const std::string &msg);  If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ;  ; bool IsUseHttpThread () const;  Returns true if http server use special thread for requests processing (default off) ;  ; bool IsUseSenderThreads () const;  Returns true if extra threads to send data via websockets will be used (default off) ;  ; unsigned ShowWindow (RWebWindow &win, const RWebDisplayArgs &args);  Show window in specified location, see Show() method for more details. ;  ; void Unregister (RWebWindow &win);  Release all references to specified window Called from RWebWindow destructor. ;  ; int WaitFor (RWebWindow &win, WebWindowWaitFunc_t check, bool timed=false, double tm=-1);  Waits until provided check function or lambdas returns non-zero value Regularly calls WebWindow::Sync() method to let run event loop If call from the main thread, runs system events processing Check function has following signature: int func(double spent_tm) Parameter spent_tm is time in seconds, which already spent ins",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:7380,Modifiability,config,configure,7380," constructor Required here for correct usage of unique_ptr<THttpServer> ; Definition at line 201 of file RWebWindowsManager.cxx. ◆ ~RWebWindowsManager(). RWebWindowsManager::~RWebWindowsManager ; (; ). window manager destructor Required here for correct usage of unique_ptr<THttpServer> ; Definition at line 215 of file RWebWindowsManager.cxx. Member Function Documentation. ◆ AssignMainThrd(). void RWebWindowsManager::AssignMainThrd ; (; ). static . Re-assigns main thread id Normally main thread id recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 116 of file RWebWindowsManager.cxx. ◆ CreateServer(). bool RWebWindowsManager::CreateServer ; (; bool ; with_http = false). private . Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ; WebGui.HttpPort: 8088; or specify range of http ports, which can be used: WebGui.HttpPortMin: 8800; WebGui.HttpPortMax: 9800; By default range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be available: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to handle requests: WebGui.UnixSocket: /path/to/unix/socket; WebGui.UnixSocketMode: 0700; Typically one used unix sockets together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpSer",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:8743,Modifiability,config,configure,8743,"lable: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to handle requests: WebGui.UnixSocket: /path/to/unix/socket; WebGui.UnixSocketMode: 0700; Typically one used unix sockets together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpServer in timer handler with 10 ms timeout. One may decrease value to improve latency or increase value to minimize CPU load WebGui.HttpTimer: 10; To processing incoming http requests and websockets, THttpServer allocate 10 threads One have to increase this number if more simultaneous connections are expected: WebGui.HttpThrds: 10; One also can configure usage of special thread of processing of http server requests WebGui.HttpThrd: no; Extra threads can be used to send data to different clients via websocket (default no) WebGui.SenderThrds: no; If required, one could change websocket timeouts (default is 10000 ms) WebGui.HttpWSTmout: 10000; By default, THttpServer created in restricted mode which only allows websocket handlers and processes only very few other related http requests. For security reasons such mode should be always enabled. Only if it is really necessary to process all other kinds of HTTP requests, one could specify no for following parameter (default yes): WebGui.WSOnly: yes; In some applications one may need to force longpoll websocket emulations from the beginning, for instance when clients connected via proxys. Although JSROOT should automatically fallback to longpoll engine, one can configure this directly (default no) WebGui.WSLongpoll: no; Following parameter controls browser max-age caching parameter for files (default 3600) Whe",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:9618,Modifiability,config,configure,9618,"erver allocate 10 threads One have to increase this number if more simultaneous connections are expected: WebGui.HttpThrds: 10; One also can configure usage of special thread of processing of http server requests WebGui.HttpThrd: no; Extra threads can be used to send data to different clients via websocket (default no) WebGui.SenderThrds: no; If required, one could change websocket timeouts (default is 10000 ms) WebGui.HttpWSTmout: 10000; By default, THttpServer created in restricted mode which only allows websocket handlers and processes only very few other related http requests. For security reasons such mode should be always enabled. Only if it is really necessary to process all other kinds of HTTP requests, one could specify no for following parameter (default yes): WebGui.WSOnly: yes; In some applications one may need to force longpoll websocket emulations from the beginning, for instance when clients connected via proxys. Although JSROOT should automatically fallback to longpoll engine, one can configure this directly (default no) WebGui.WSLongpoll: no; Following parameter controls browser max-age caching parameter for files (default 3600) When 0 is specified, browser cache will be disabled WebGui.HttpMaxAge: 3600; Also one can provide extra URL options for, see TCivetweb::Create for list of supported options WebGui.HttpExtraArgs: winsymlinks=no; One also can configure usage of FastCGI server for web windows: WebGui.FastCgiPort: 4000; WebGui.FastCgiThreads: 10; To be able start web browser for such windows, one can provide real URL of the web server which will connect with that FastCGI instance: WebGui.FastCgiServer: https://your_apache_server.com/root_cgi_path. Definition at line 351 of file RWebWindowsManager.cxx. ◆ CreateWindow(). std::shared_ptr< RWebWindow > RWebWindowsManager::CreateWindow ; (; ). Creates new window To show window, RWebWindow::Show() have to be called. ; Definition at line 536 of file RWebWindowsManager.cxx. ◆ GenerateKey(). std::string R",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:9990,Modifiability,config,configure,9990,"default is 10000 ms) WebGui.HttpWSTmout: 10000; By default, THttpServer created in restricted mode which only allows websocket handlers and processes only very few other related http requests. For security reasons such mode should be always enabled. Only if it is really necessary to process all other kinds of HTTP requests, one could specify no for following parameter (default yes): WebGui.WSOnly: yes; In some applications one may need to force longpoll websocket emulations from the beginning, for instance when clients connected via proxys. Although JSROOT should automatically fallback to longpoll engine, one can configure this directly (default no) WebGui.WSLongpoll: no; Following parameter controls browser max-age caching parameter for files (default 3600) When 0 is specified, browser cache will be disabled WebGui.HttpMaxAge: 3600; Also one can provide extra URL options for, see TCivetweb::Create for list of supported options WebGui.HttpExtraArgs: winsymlinks=no; One also can configure usage of FastCGI server for web windows: WebGui.FastCgiPort: 4000; WebGui.FastCgiThreads: 10; To be able start web browser for such windows, one can provide real URL of the web server which will connect with that FastCGI instance: WebGui.FastCgiServer: https://your_apache_server.com/root_cgi_path. Definition at line 351 of file RWebWindowsManager.cxx. ◆ CreateWindow(). std::shared_ptr< RWebWindow > RWebWindowsManager::CreateWindow ; (; ). Creates new window To show window, RWebWindow::Show() have to be called. ; Definition at line 536 of file RWebWindowsManager.cxx. ◆ GenerateKey(). std::string RWebWindowsManager::GenerateKey ; (; int ; keylen = 32). staticprivate . Static method to generate cryptographic key Parameter keylen defines length of cryptographic key in bytes Output string will be hex formatted and includes ""-"" separator after every 4 bytes Example for 16 bytes: ""fca45856-41bee066-ff74cc96-9154d405"". ; Definition at line 178 of file RWebWindowsManager.cxx. ◆ GetLaunchTmou",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:11998,Modifiability,variab,variable,11998,"WindowsManager::GetLaunchTmout ; (; ); const. inlineprivate . Returns timeout for launching new browser process. ; Definition at line 61 of file RWebWindowsManager.hxx. ◆ GetServer(). THttpServer * ROOT::RWebWindowsManager::GetServer ; (; ); const. inline . Returns THttpServer instance. ; Definition at line 84 of file RWebWindowsManager.hxx. ◆ GetServerAddr(). std::string ROOT::RWebWindowsManager::GetServerAddr ; (; ); const. inline . Returns http address of the server, empty string when not available. ; Definition at line 87 of file RWebWindowsManager.hxx. ◆ GetUrl(). std::string RWebWindowsManager::GetUrl ; (; RWebWindow & ; win, . bool ; remote = false, . std::string * ; produced_key = nullptr . ). private . Provide URL address to access specified window from inside or from remote. ; Definition at line 600 of file RWebWindowsManager.cxx. ◆ InformListener(). bool RWebWindowsManager::InformListener ; (; const std::string & ; msg). private . If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ; Definition at line 227 of file RWebWindowsManager.cxx. ◆ Instance(). std::shared_ptr< RWebWindowsManager > & RWebWindowsManager::Instance ; (; ). static . Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ; Definition at line 78 of file RWebWindowsManager.cxx. ◆ IsLoopbackMode(). bool RWebWindowsManager::IsLoopbackMode ; (; ). static . Returns true if loopback mode used by THttpServer for web widgets. ; Definition at line 146 of file RWebWindowsManager.cxx. ◆ IsMainThrd(). bool RWebWindowsManager::IsMainThrd ; (; ). static . Returns true when called from main process Main process recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 104 of file RWebWindowsManager.cxx.",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:12010,Modifiability,config,configured,12010,"WindowsManager::GetLaunchTmout ; (; ); const. inlineprivate . Returns timeout for launching new browser process. ; Definition at line 61 of file RWebWindowsManager.hxx. ◆ GetServer(). THttpServer * ROOT::RWebWindowsManager::GetServer ; (; ); const. inline . Returns THttpServer instance. ; Definition at line 84 of file RWebWindowsManager.hxx. ◆ GetServerAddr(). std::string ROOT::RWebWindowsManager::GetServerAddr ; (; ); const. inline . Returns http address of the server, empty string when not available. ; Definition at line 87 of file RWebWindowsManager.hxx. ◆ GetUrl(). std::string RWebWindowsManager::GetUrl ; (; RWebWindow & ; win, . bool ; remote = false, . std::string * ; produced_key = nullptr . ). private . Provide URL address to access specified window from inside or from remote. ; Definition at line 600 of file RWebWindowsManager.cxx. ◆ InformListener(). bool RWebWindowsManager::InformListener ; (; const std::string & ; msg). private . If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ; Definition at line 227 of file RWebWindowsManager.cxx. ◆ Instance(). std::shared_ptr< RWebWindowsManager > & RWebWindowsManager::Instance ; (; ). static . Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ; Definition at line 78 of file RWebWindowsManager.cxx. ◆ IsLoopbackMode(). bool RWebWindowsManager::IsLoopbackMode ; (; ). static . Returns true if loopback mode used by THttpServer for web widgets. ; Definition at line 146 of file RWebWindowsManager.cxx. ◆ IsMainThrd(). bool RWebWindowsManager::IsMainThrd ; (; ). static . Returns true when called from main process Main process recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 104 of file RWebWindowsManager.cxx.",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:15516,Modifiability,config,configured,15516," usage. ; Definition at line 167 of file RWebWindowsManager.cxx. ◆ SetUseSessionKey(). void RWebWindowsManager::SetUseSessionKey ; (; bool ; on = true). static . Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ; Definition at line 156 of file RWebWindowsManager.cxx. ◆ ShowWindow(). unsigned RWebWindowsManager::ShowWindow ; (; RWebWindow & ; win, . const RWebDisplayArgs & ; user_args . ). private . Show window in specified location, see Show() method for more details. ; Show web window in specified location.; Parameters. [in,out]winweb window by reference ; user_argsspecifies where and how display web window. As display args one can use string like ""firefox"" or ""chrome"" - these are two main supported web browsers. See RWebDisplayArgs::SetBrowserKind() for all available options. Default value for the browser can be configured when starting root with –web argument like: ""root --web=chrome"". When root started in web server mode ""root --web=server"", no any web browser will be started - just URL will be printout, which can be entered in any running web browser; If allowed, same window can be displayed several times (like for RCanvas or TCanvas); Following parameters can be configured in rootrc file: WebGui.Display: kind of display like chrome or firefox or browser, can be overwritten by --web=value command line argument; WebGui.OnetimeKey: if configured requires unique key every time window is connected (default yes); WebGui.Chrome: full path to Google Chrome executable; WebGui.ChromeBatch: command to start chrome in batch, used for image production, like ""$prog --headless --disable-gpu $geometry $url""; WebGui.ChromeHeadless: command to start chrome in headless mode, like ""fork: --headless --disable-gpu $geometry $url""; WebGui.ChromeInteractive: command to start chrome in interactive mode, like ""$prog $geometry --app=\",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:15877,Modifiability,config,configured,15877,"enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ; Definition at line 156 of file RWebWindowsManager.cxx. ◆ ShowWindow(). unsigned RWebWindowsManager::ShowWindow ; (; RWebWindow & ; win, . const RWebDisplayArgs & ; user_args . ). private . Show window in specified location, see Show() method for more details. ; Show web window in specified location.; Parameters. [in,out]winweb window by reference ; user_argsspecifies where and how display web window. As display args one can use string like ""firefox"" or ""chrome"" - these are two main supported web browsers. See RWebDisplayArgs::SetBrowserKind() for all available options. Default value for the browser can be configured when starting root with –web argument like: ""root --web=chrome"". When root started in web server mode ""root --web=server"", no any web browser will be started - just URL will be printout, which can be entered in any running web browser; If allowed, same window can be displayed several times (like for RCanvas or TCanvas); Following parameters can be configured in rootrc file: WebGui.Display: kind of display like chrome or firefox or browser, can be overwritten by --web=value command line argument; WebGui.OnetimeKey: if configured requires unique key every time window is connected (default yes); WebGui.Chrome: full path to Google Chrome executable; WebGui.ChromeBatch: command to start chrome in batch, used for image production, like ""$prog --headless --disable-gpu $geometry $url""; WebGui.ChromeHeadless: command to start chrome in headless mode, like ""fork: --headless --disable-gpu $geometry $url""; WebGui.ChromeInteractive: command to start chrome in interactive mode, like ""$prog $geometry --app=\'$url\' &""; WebGui.Firefox: full path to Mozilla Firefox executable; WebGui.FirefoxHeadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; WebGui.Firefo",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:16050,Modifiability,config,configured,16050,"ivate . Show window in specified location, see Show() method for more details. ; Show web window in specified location.; Parameters. [in,out]winweb window by reference ; user_argsspecifies where and how display web window. As display args one can use string like ""firefox"" or ""chrome"" - these are two main supported web browsers. See RWebDisplayArgs::SetBrowserKind() for all available options. Default value for the browser can be configured when starting root with –web argument like: ""root --web=chrome"". When root started in web server mode ""root --web=server"", no any web browser will be started - just URL will be printout, which can be entered in any running web browser; If allowed, same window can be displayed several times (like for RCanvas or TCanvas); Following parameters can be configured in rootrc file: WebGui.Display: kind of display like chrome or firefox or browser, can be overwritten by --web=value command line argument; WebGui.OnetimeKey: if configured requires unique key every time window is connected (default yes); WebGui.Chrome: full path to Google Chrome executable; WebGui.ChromeBatch: command to start chrome in batch, used for image production, like ""$prog --headless --disable-gpu $geometry $url""; WebGui.ChromeHeadless: command to start chrome in headless mode, like ""fork: --headless --disable-gpu $geometry $url""; WebGui.ChromeInteractive: command to start chrome in interactive mode, like ""$prog $geometry --app=\'$url\' &""; WebGui.Firefox: full path to Mozilla Firefox executable; WebGui.FirefoxHeadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; WebGui.FirefoxProfile: name of Firefox profile to use; WebGui.FirefoxProfilePath: file path to Firefox profile; WebGui.FirefoxRandomProfile: usage of random Firefox profile -1 never, 0 - only for headless mode (dflt), 1 - always; We",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:1626,Performance,load,loaded,1626,". ; Definition at line 36 of file RWebWindowsManager.hxx. Public Member Functions;  RWebWindowsManager ();  window manager constructor Required here for correct usage of unique_ptr<THttpServer> ;  ;  ~RWebWindowsManager ();  window manager destructor Required here for correct usage of unique_ptr<THttpServer> ;  ; std::shared_ptr< RWebWindow > CreateWindow ();  Creates new window To show window, RWebWindow::Show() have to be called. ;  ; THttpServer * GetServer () const;  Returns THttpServer instance. ;  ; std::string GetServerAddr () const;  Returns http address of the server, empty string when not available. ;  ; void SetShowCallback (WebWindowShowCallback_t func);  Assign show callback which can catch window showing, used by RBrowser. ;  ; void Terminate ();  Terminate http server and ROOT application. ;  . Static Public Member Functions; static void AssignMainThrd ();  Re-assigns main thread id Normally main thread id recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ;  ; static std::shared_ptr< RWebWindowsManager > & Instance ();  Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ;  ; static bool IsLoopbackMode ();  Returns true if loopback mode used by THttpServer for web widgets. ;  ; static bool IsMainThrd ();  Returns true when called from main process Main process recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ;  ; static void SetLoopbackMode (bool on=true);  Set loopback mode for THttpServer used for web widgets By default is on. ;  ; static void SetUseConnectionKey (bool on=true);  Enable or disable usage ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:2233,Performance,load,loaded,2233,"d SetShowCallback (WebWindowShowCallback_t func);  Assign show callback which can catch window showing, used by RBrowser. ;  ; void Terminate ();  Terminate http server and ROOT application. ;  . Static Public Member Functions; static void AssignMainThrd ();  Re-assigns main thread id Normally main thread id recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ;  ; static std::shared_ptr< RWebWindowsManager > & Instance ();  Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ;  ; static bool IsLoopbackMode ();  Returns true if loopback mode used by THttpServer for web widgets. ;  ; static bool IsMainThrd ();  Returns true when called from main process Main process recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ;  ; static void SetLoopbackMode (bool on=true);  Set loopback mode for THttpServer used for web widgets By default is on. ;  ; static void SetUseConnectionKey (bool on=true);  Enable or disable usage of connection key (default on) If enabled, each connection (and reconnection) to widget requires unique key Connection key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  ; static void SetUseSessionKey (bool on=true);  Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  . Private Member Functions; bool CreateServer (bool with_http=false);  Creates http server, if r",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:6941,Performance,load,loaded,6941,"or THttpServer ;  ; bool fUseSenderThreads {false};  ! use extra threads for sending data from RWebWindow to clients ;  ; bool fUseSessionKey {false};  ! is session key has to be used for data signing ;  . Friends; class RWebWindow;  . #include <ROOT/RWebWindowsManager.hxx>; Constructor & Destructor Documentation. ◆ RWebWindowsManager(). RWebWindowsManager::RWebWindowsManager ; (; ). window manager constructor Required here for correct usage of unique_ptr<THttpServer> ; Definition at line 201 of file RWebWindowsManager.cxx. ◆ ~RWebWindowsManager(). RWebWindowsManager::~RWebWindowsManager ; (; ). window manager destructor Required here for correct usage of unique_ptr<THttpServer> ; Definition at line 215 of file RWebWindowsManager.cxx. Member Function Documentation. ◆ AssignMainThrd(). void RWebWindowsManager::AssignMainThrd ; (; ). static . Re-assigns main thread id Normally main thread id recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 116 of file RWebWindowsManager.cxx. ◆ CreateServer(). bool RWebWindowsManager::CreateServer ; (; bool ; with_http = false). private . Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ; WebGui.HttpPort: 8088; or specify range of http ports, which can be used: WebGui.HttpPortMin: 8800; WebGui.HttpPortMax: 9800; By default range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be available: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHtt",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:8474,Performance,latency,latency,8474,"le: ; WebGui.HttpPort: 8088; or specify range of http ports, which can be used: WebGui.HttpPortMin: 8800; WebGui.HttpPortMax: 9800; By default range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be available: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to handle requests: WebGui.UnixSocket: /path/to/unix/socket; WebGui.UnixSocketMode: 0700; Typically one used unix sockets together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpServer in timer handler with 10 ms timeout. One may decrease value to improve latency or increase value to minimize CPU load WebGui.HttpTimer: 10; To processing incoming http requests and websockets, THttpServer allocate 10 threads One have to increase this number if more simultaneous connections are expected: WebGui.HttpThrds: 10; One also can configure usage of special thread of processing of http server requests WebGui.HttpThrd: no; Extra threads can be used to send data to different clients via websocket (default no) WebGui.SenderThrds: no; If required, one could change websocket timeouts (default is 10000 ms) WebGui.HttpWSTmout: 10000; By default, THttpServer created in restricted mode which only allows websocket handlers and processes only very few other related http requests. For security reasons such mode should be always enabled. Only if it is really necessary to process all other kinds of HTTP requests, one could specify no for following parameter (default yes): WebGui.WSOnly: yes; In some applications one may need to force longpoll websocket emulations from the",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:8516,Performance,load,load,8516,"le: ; WebGui.HttpPort: 8088; or specify range of http ports, which can be used: WebGui.HttpPortMin: 8800; WebGui.HttpPortMax: 9800; By default range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be available: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to handle requests: WebGui.UnixSocket: /path/to/unix/socket; WebGui.UnixSocketMode: 0700; Typically one used unix sockets together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpServer in timer handler with 10 ms timeout. One may decrease value to improve latency or increase value to minimize CPU load WebGui.HttpTimer: 10; To processing incoming http requests and websockets, THttpServer allocate 10 threads One have to increase this number if more simultaneous connections are expected: WebGui.HttpThrds: 10; One also can configure usage of special thread of processing of http server requests WebGui.HttpThrd: no; Extra threads can be used to send data to different clients via websocket (default no) WebGui.SenderThrds: no; If required, one could change websocket timeouts (default is 10000 ms) WebGui.HttpWSTmout: 10000; By default, THttpServer created in restricted mode which only allows websocket handlers and processes only very few other related http requests. For security reasons such mode should be always enabled. Only if it is really necessary to process all other kinds of HTTP requests, one could specify no for following parameter (default yes): WebGui.WSOnly: yes; In some applications one may need to force longpoll websocket emulations from the",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:9795,Performance,cache,cache,9795,"configure usage of special thread of processing of http server requests WebGui.HttpThrd: no; Extra threads can be used to send data to different clients via websocket (default no) WebGui.SenderThrds: no; If required, one could change websocket timeouts (default is 10000 ms) WebGui.HttpWSTmout: 10000; By default, THttpServer created in restricted mode which only allows websocket handlers and processes only very few other related http requests. For security reasons such mode should be always enabled. Only if it is really necessary to process all other kinds of HTTP requests, one could specify no for following parameter (default yes): WebGui.WSOnly: yes; In some applications one may need to force longpoll websocket emulations from the beginning, for instance when clients connected via proxys. Although JSROOT should automatically fallback to longpoll engine, one can configure this directly (default no) WebGui.WSLongpoll: no; Following parameter controls browser max-age caching parameter for files (default 3600) When 0 is specified, browser cache will be disabled WebGui.HttpMaxAge: 3600; Also one can provide extra URL options for, see TCivetweb::Create for list of supported options WebGui.HttpExtraArgs: winsymlinks=no; One also can configure usage of FastCGI server for web windows: WebGui.FastCgiPort: 4000; WebGui.FastCgiThreads: 10; To be able start web browser for such windows, one can provide real URL of the web server which will connect with that FastCGI instance: WebGui.FastCgiServer: https://your_apache_server.com/root_cgi_path. Definition at line 351 of file RWebWindowsManager.cxx. ◆ CreateWindow(). std::shared_ptr< RWebWindow > RWebWindowsManager::CreateWindow ; (; ). Creates new window To show window, RWebWindow::Show() have to be called. ; Definition at line 536 of file RWebWindowsManager.cxx. ◆ GenerateKey(). std::string RWebWindowsManager::GenerateKey ; (; int ; keylen = 32). staticprivate . Static method to generate cryptographic key Parameter keylen defines ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:12745,Performance,load,loaded,12745,"m remote. ; Definition at line 600 of file RWebWindowsManager.cxx. ◆ InformListener(). bool RWebWindowsManager::InformListener ; (; const std::string & ; msg). private . If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ; Definition at line 227 of file RWebWindowsManager.cxx. ◆ Instance(). std::shared_ptr< RWebWindowsManager > & RWebWindowsManager::Instance ; (; ). static . Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ; Definition at line 78 of file RWebWindowsManager.cxx. ◆ IsLoopbackMode(). bool RWebWindowsManager::IsLoopbackMode ; (; ). static . Returns true if loopback mode used by THttpServer for web widgets. ; Definition at line 146 of file RWebWindowsManager.cxx. ◆ IsMainThrd(). bool RWebWindowsManager::IsMainThrd ; (; ). static . Returns true when called from main process Main process recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 104 of file RWebWindowsManager.cxx. ◆ IsUseHttpThread(). bool ROOT::RWebWindowsManager::IsUseHttpThread ; (; ); const. inlineprivate . Returns true if http server use special thread for requests processing (default off) ; Definition at line 55 of file RWebWindowsManager.hxx. ◆ IsUseSenderThreads(). bool ROOT::RWebWindowsManager::IsUseSenderThreads ; (; ); const. inlineprivate . Returns true if extra threads to send data via websockets will be used (default off) ; Definition at line 58 of file RWebWindowsManager.hxx. ◆ SetLoopbackMode(). void RWebWindowsManager::SetLoopbackMode ; (; bool ; on = true). static . Set loopback mode for THttpServer used for web widgets By default is on. ; Only local communication via localhost address is possible Disable it only if really necessary - it may open unauthorized access ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:17201,Performance,perform,perform,17201,"me in batch, used for image production, like ""$prog --headless --disable-gpu $geometry $url""; WebGui.ChromeHeadless: command to start chrome in headless mode, like ""fork: --headless --disable-gpu $geometry $url""; WebGui.ChromeInteractive: command to start chrome in interactive mode, like ""$prog $geometry --app=\'$url\' &""; WebGui.Firefox: full path to Mozilla Firefox executable; WebGui.FirefoxHeadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; WebGui.FirefoxProfile: name of Firefox profile to use; WebGui.FirefoxProfilePath: file path to Firefox profile; WebGui.FirefoxRandomProfile: usage of random Firefox profile -1 never, 0 - only for headless mode (dflt), 1 - always; WebGui.LaunchTmout: time required to start process in seconds (default 30 s); WebGui.OperationTmout: time required to perform WebWindow operation like execute command or update drawings; WebGui.RecordData: if specified enables data recording for each web window 0 - off, 1 - on; WebGui.JsonComp: compression factor for JSON conversion, if not specified - each widget uses own default values; WebGui.ForceHttp: 0 - off (default), 1 - always create real http server to run web window; WebGui.Console: -1 - output only console.error(), 0 - add console.warn(), 1 - add console.log() output; WebGui.ConnCredits: 10 - number of packets which can be send by server or client without acknowledge from receiving side; WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/; WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified; WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3; THttpServer-related parameters documented in CreateServer method ; Definition at line 692 of file RWebWindowsManager.cxx. ◆ Terminate(). void RWebWindowsManager::Terminat",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:17917,Performance,load,loaded,17917,"refoxProfilePath: file path to Firefox profile; WebGui.FirefoxRandomProfile: usage of random Firefox profile -1 never, 0 - only for headless mode (dflt), 1 - always; WebGui.LaunchTmout: time required to start process in seconds (default 30 s); WebGui.OperationTmout: time required to perform WebWindow operation like execute command or update drawings; WebGui.RecordData: if specified enables data recording for each web window 0 - off, 1 - on; WebGui.JsonComp: compression factor for JSON conversion, if not specified - each widget uses own default values; WebGui.ForceHttp: 0 - off (default), 1 - always create real http server to run web window; WebGui.Console: -1 - output only console.error(), 0 - add console.warn(), 1 - add console.log() output; WebGui.ConnCredits: 10 - number of packets which can be send by server or client without acknowledge from receiving side; WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/; WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified; WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3; THttpServer-related parameters documented in CreateServer method ; Definition at line 692 of file RWebWindowsManager.cxx. ◆ Terminate(). void RWebWindowsManager::Terminate ; (; ). Terminate http server and ROOT application. ; Definition at line 851 of file RWebWindowsManager.cxx. ◆ Unregister(). void RWebWindowsManager::Unregister ; (; RWebWindow & ; win). private . Release all references to specified window Called from RWebWindow destructor. ; Definition at line 591 of file RWebWindowsManager.cxx. ◆ WaitFor(). int RWebWindowsManager::WaitFor ; (; RWebWindow & ; win, . WebWindowWaitFunc_t ; check, . bool ; timed = false, . double ; timelimit = -1 . ). private . Waits until provided check function or lambdas returns non-zero value Regularly calls WebWindow::Sync() method to let run event loop If call from the main thread, runs system events processing C",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:3481,Safety,timeout,timeout,3481,"have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ;  ; static void SetLoopbackMode (bool on=true);  Set loopback mode for THttpServer used for web widgets By default is on. ;  ; static void SetUseConnectionKey (bool on=true);  Enable or disable usage of connection key (default on) If enabled, each connection (and reconnection) to widget requires unique key Connection key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  ; static void SetUseSessionKey (bool on=true);  Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  . Private Member Functions; bool CreateServer (bool with_http=false);  Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ;  ; float GetLaunchTmout () const;  Returns timeout for launching new browser process. ;  ; std::string GetUrl (RWebWindow &win, bool remote=false, std::string *produced_key=nullptr);  Provide URL address to access specified window from inside or from remote. ;  ; bool InformListener (const std::string &msg);  If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ;  ; bool IsUseHttpThread () const;  Returns true if http server use special thread for requests processing (default off) ;  ; bool IsUseSenderThreads () const;  Returns true if extra threads to send data via websockets will be used (default off) ;  ; unsigned ShowWindow (RWebWindow &win, const RWebDisplayArgs &args);  Show window in specified location, see Show() method for more details. ;  ; void Unregister (RWebWindow &win);  Release all references to specified window Called from RWebWindow destructor. ; ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:5527,Safety,timeout,timeout,5527,"unctions; static std::string GenerateKey (int keylen=32);  Static method to generate cryptographic key Parameter keylen defines length of cryptographic key in bytes Output string will be hex formatted and includes ""-"" separator after every 4 bytes Example for 16 bytes: ""fca45856-41bee066-ff74cc96-9154d405"". ;  . Private Attributes; std::string fAddr;  ! HTTP address of the server ;  ; std::unique_ptr< TExec > fAssgnExec;  ! special exec to assign thread id via ProcessEvents ;  ; bool fExternalProcessEvents {false};  ! indicate that there are external process events engine ;  ; unsigned fIdCnt {0};  ! counter for identifiers ;  ; float fLaunchTmout {30.};  ! timeout in seconds to start browser process, default 30s ;  ; std::recursive_mutex fMutex;  ! main mutex, used for window creations ;  ; std::unique_ptr< THttpServer > fServer;  ! central communication with the all used displays ;  ; std::string fSessionKey;  ! secret session key used on client to code connections keys ;  ; WebWindowShowCallback_t fShowCallback;  ! function called for each RWebWindow::Show call ;  ; bool fUseHttpThrd {false};  ! use special thread for THttpServer ;  ; bool fUseSenderThreads {false};  ! use extra threads for sending data from RWebWindow to clients ;  ; bool fUseSessionKey {false};  ! is session key has to be used for data signing ;  . Friends; class RWebWindow;  . #include <ROOT/RWebWindowsManager.hxx>; Constructor & Destructor Documentation. ◆ RWebWindowsManager(). RWebWindowsManager::RWebWindowsManager ; (; ). window manager constructor Required here for correct usage of unique_ptr<THttpServer> ; Definition at line 201 of file RWebWindowsManager.cxx. ◆ ~RWebWindowsManager(). RWebWindowsManager::~RWebWindowsManager ; (; ). window manager destructor Required here for correct usage of unique_ptr<THttpServer> ; Definition at line 215 of file RWebWindowsManager.cxx. Member Function Documentation. ◆ AssignMainThrd(). void RWebWindowsManager::AssignMainThrd ; (; ). static . Re-assigns m",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:8431,Safety,timeout,timeout,8431,"onfigure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ; WebGui.HttpPort: 8088; or specify range of http ports, which can be used: WebGui.HttpPortMin: 8800; WebGui.HttpPortMax: 9800; By default range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be available: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to handle requests: WebGui.UnixSocket: /path/to/unix/socket; WebGui.UnixSocketMode: 0700; Typically one used unix sockets together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpServer in timer handler with 10 ms timeout. One may decrease value to improve latency or increase value to minimize CPU load WebGui.HttpTimer: 10; To processing incoming http requests and websockets, THttpServer allocate 10 threads One have to increase this number if more simultaneous connections are expected: WebGui.HttpThrds: 10; One also can configure usage of special thread of processing of http server requests WebGui.HttpThrd: no; Extra threads can be used to send data to different clients via websocket (default no) WebGui.SenderThrds: no; If required, one could change websocket timeouts (default is 10000 ms) WebGui.HttpWSTmout: 10000; By default, THttpServer created in restricted mode which only allows websocket handlers and processes only very few other related http requests. For security reasons such mode should be always enabled. Only if it is really necessary to process all other kinds of HTTP requests, one could specify no for following parameter (default yes):",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:8987,Safety,timeout,timeouts,8987,"ecified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to handle requests: WebGui.UnixSocket: /path/to/unix/socket; WebGui.UnixSocketMode: 0700; Typically one used unix sockets together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpServer in timer handler with 10 ms timeout. One may decrease value to improve latency or increase value to minimize CPU load WebGui.HttpTimer: 10; To processing incoming http requests and websockets, THttpServer allocate 10 threads One have to increase this number if more simultaneous connections are expected: WebGui.HttpThrds: 10; One also can configure usage of special thread of processing of http server requests WebGui.HttpThrd: no; Extra threads can be used to send data to different clients via websocket (default no) WebGui.SenderThrds: no; If required, one could change websocket timeouts (default is 10000 ms) WebGui.HttpWSTmout: 10000; By default, THttpServer created in restricted mode which only allows websocket handlers and processes only very few other related http requests. For security reasons such mode should be always enabled. Only if it is really necessary to process all other kinds of HTTP requests, one could specify no for following parameter (default yes): WebGui.WSOnly: yes; In some applications one may need to force longpoll websocket emulations from the beginning, for instance when clients connected via proxys. Although JSROOT should automatically fallback to longpoll engine, one can configure this directly (default no) WebGui.WSLongpoll: no; Following parameter controls browser max-age caching parameter for files (default 3600) When 0 is specified, browser cache will be disabled WebGui.HttpMaxAge: 3600; Also one can provide extra URL options for, see TCivetweb::Create for list of supported options WebGui.HttpExtraArgs: winsymlinks=no; O",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:11088,Safety,timeout,timeout,11088," start web browser for such windows, one can provide real URL of the web server which will connect with that FastCGI instance: WebGui.FastCgiServer: https://your_apache_server.com/root_cgi_path. Definition at line 351 of file RWebWindowsManager.cxx. ◆ CreateWindow(). std::shared_ptr< RWebWindow > RWebWindowsManager::CreateWindow ; (; ). Creates new window To show window, RWebWindow::Show() have to be called. ; Definition at line 536 of file RWebWindowsManager.cxx. ◆ GenerateKey(). std::string RWebWindowsManager::GenerateKey ; (; int ; keylen = 32). staticprivate . Static method to generate cryptographic key Parameter keylen defines length of cryptographic key in bytes Output string will be hex formatted and includes ""-"" separator after every 4 bytes Example for 16 bytes: ""fca45856-41bee066-ff74cc96-9154d405"". ; Definition at line 178 of file RWebWindowsManager.cxx. ◆ GetLaunchTmout(). float ROOT::RWebWindowsManager::GetLaunchTmout ; (; ); const. inlineprivate . Returns timeout for launching new browser process. ; Definition at line 61 of file RWebWindowsManager.hxx. ◆ GetServer(). THttpServer * ROOT::RWebWindowsManager::GetServer ; (; ); const. inline . Returns THttpServer instance. ; Definition at line 84 of file RWebWindowsManager.hxx. ◆ GetServerAddr(). std::string ROOT::RWebWindowsManager::GetServerAddr ; (; ); const. inline . Returns http address of the server, empty string when not available. ; Definition at line 87 of file RWebWindowsManager.hxx. ◆ GetUrl(). std::string RWebWindowsManager::GetUrl ; (; RWebWindow & ; win, . bool ; remote = false, . std::string * ; produced_key = nullptr . ). private . Provide URL address to access specified window from inside or from remote. ; Definition at line 600 of file RWebWindowsManager.cxx. ◆ InformListener(). bool RWebWindowsManager::InformListener ; (; const std::string & ; msg). private . If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ; Definition at line 227 of file RWebWind",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:20291,Safety,timeout,timeout,20291," And Related Symbol Documentation. ◆ RWebWindow. friend class RWebWindow. friend . Definition at line 38 of file RWebWindowsManager.hxx. Member Data Documentation. ◆ fAddr. std::string ROOT::RWebWindowsManager::fAddr. private . ! HTTP address of the server ; Definition at line 42 of file RWebWindowsManager.hxx. ◆ fAssgnExec. std::unique_ptr<TExec> ROOT::RWebWindowsManager::fAssgnExec. private . ! special exec to assign thread id via ProcessEvents ; Definition at line 51 of file RWebWindowsManager.hxx. ◆ fExternalProcessEvents. bool ROOT::RWebWindowsManager::fExternalProcessEvents {false}. private . ! indicate that there are external process events engine ; Definition at line 50 of file RWebWindowsManager.hxx. ◆ fIdCnt. unsigned ROOT::RWebWindowsManager::fIdCnt {0}. private . ! counter for identifiers ; Definition at line 46 of file RWebWindowsManager.hxx. ◆ fLaunchTmout. float ROOT::RWebWindowsManager::fLaunchTmout {30.}. private . ! timeout in seconds to start browser process, default 30s ; Definition at line 49 of file RWebWindowsManager.hxx. ◆ fMutex. std::recursive_mutex ROOT::RWebWindowsManager::fMutex. private . ! main mutex, used for window creations ; Definition at line 45 of file RWebWindowsManager.hxx. ◆ fServer. std::unique_ptr<THttpServer> ROOT::RWebWindowsManager::fServer. private . ! central communication with the all used displays ; Definition at line 41 of file RWebWindowsManager.hxx. ◆ fSessionKey. std::string ROOT::RWebWindowsManager::fSessionKey. private . ! secret session key used on client to code connections keys ; Definition at line 43 of file RWebWindowsManager.hxx. ◆ fShowCallback. WebWindowShowCallback_t ROOT::RWebWindowsManager::fShowCallback. private . ! function called for each RWebWindow::Show call ; Definition at line 52 of file RWebWindowsManager.hxx. ◆ fUseHttpThrd. bool ROOT::RWebWindowsManager::fUseHttpThrd {false}. private . ! use special thread for THttpServer ; Definition at line 47 of file RWebWindowsManager.hxx. ◆ fUseSenderThr",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:2818,Security,hash,hash,2818,"ave to call this method to let RWebWindowsManager correctly recognize such situation. ;  ; static std::shared_ptr< RWebWindowsManager > & Instance ();  Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ;  ; static bool IsLoopbackMode ();  Returns true if loopback mode used by THttpServer for web widgets. ;  ; static bool IsMainThrd ();  Returns true when called from main process Main process recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ;  ; static void SetLoopbackMode (bool on=true);  Set loopback mode for THttpServer used for web widgets By default is on. ;  ; static void SetUseConnectionKey (bool on=true);  Enable or disable usage of connection key (default on) If enabled, each connection (and reconnection) to widget requires unique key Connection key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  ; static void SetUseSessionKey (bool on=true);  Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  . Private Member Functions; bool CreateServer (bool with_http=false);  Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ;  ; float GetLaunchTmout () const;  Returns timeout for launching new browser process. ;  ; std::string GetUrl (RWebWindow &win, bool remote=false, std::string *produced_key=nullptr);  Provide URL address to access specified window from inside or from remote. ;  ; bool InformListener (const std::string &msg)",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:3074,Security,hash,hash,3074," if loopback mode used by THttpServer for web widgets. ;  ; static bool IsMainThrd ();  Returns true when called from main process Main process recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ;  ; static void SetLoopbackMode (bool on=true);  Set loopback mode for THttpServer used for web widgets By default is on. ;  ; static void SetUseConnectionKey (bool on=true);  Enable or disable usage of connection key (default on) If enabled, each connection (and reconnection) to widget requires unique key Connection key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  ; static void SetUseSessionKey (bool on=true);  Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  . Private Member Functions; bool CreateServer (bool with_http=false);  Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ;  ; float GetLaunchTmout () const;  Returns timeout for launching new browser process. ;  ; std::string GetUrl (RWebWindow &win, bool remote=false, std::string *produced_key=nullptr);  Provide URL address to access specified window from inside or from remote. ;  ; bool InformListener (const std::string &msg);  If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ;  ; bool IsUseHttpThread () const;  Returns true if http server use special thread for requests processing (default off) ;  ; bool IsUseSenderThreads () const;  Returns true if extra threads to send data via ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:3645,Security,access,access,3645," (bool on=true);  Enable or disable usage of connection key (default on) If enabled, each connection (and reconnection) to widget requires unique key Connection key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  ; static void SetUseSessionKey (bool on=true);  Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ;  . Private Member Functions; bool CreateServer (bool with_http=false);  Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ;  ; float GetLaunchTmout () const;  Returns timeout for launching new browser process. ;  ; std::string GetUrl (RWebWindow &win, bool remote=false, std::string *produced_key=nullptr);  Provide URL address to access specified window from inside or from remote. ;  ; bool InformListener (const std::string &msg);  If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ;  ; bool IsUseHttpThread () const;  Returns true if http server use special thread for requests processing (default off) ;  ; bool IsUseSenderThreads () const;  Returns true if extra threads to send data via websockets will be used (default off) ;  ; unsigned ShowWindow (RWebWindow &win, const RWebDisplayArgs &args);  Show window in specified location, see Show() method for more details. ;  ; void Unregister (RWebWindow &win);  Release all references to specified window Called from RWebWindow destructor. ;  ; int WaitFor (RWebWindow &win, WebWindowWaitFunc_t check, bool timed=false, double tm=-1);  Waits until provided check function or lambdas returns non-zero value Regularly calls WebWindow::Sync() method to let run event loop If call from the main thread, r",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:7927,Security,secur,secured,7927," loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 116 of file RWebWindowsManager.cxx. ◆ CreateServer(). bool RWebWindowsManager::CreateServer ; (; bool ; with_http = false). private . Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ; WebGui.HttpPort: 8088; or specify range of http ports, which can be used: WebGui.HttpPortMin: 8800; WebGui.HttpPortMax: 9800; By default range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be available: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to handle requests: WebGui.UnixSocket: /path/to/unix/socket; WebGui.UnixSocketMode: 0700; Typically one used unix sockets together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpServer in timer handler with 10 ms timeout. One may decrease value to improve latency or increase value to minimize CPU load WebGui.HttpTimer: 10; To processing incoming http requests and websockets, THttpServer allocate 10 threads One have to increase this number if more simultaneous connections are expected: WebGui.HttpThrds: 10; One also can configure usage of special thread of processing of http server requests WebGui.HttpThrd: no; Extra threads can be used to send data to different clients via websocket (default no) WebGui.SenderThrd",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:9194,Security,secur,security,9194,"together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpServer in timer handler with 10 ms timeout. One may decrease value to improve latency or increase value to minimize CPU load WebGui.HttpTimer: 10; To processing incoming http requests and websockets, THttpServer allocate 10 threads One have to increase this number if more simultaneous connections are expected: WebGui.HttpThrds: 10; One also can configure usage of special thread of processing of http server requests WebGui.HttpThrd: no; Extra threads can be used to send data to different clients via websocket (default no) WebGui.SenderThrds: no; If required, one could change websocket timeouts (default is 10000 ms) WebGui.HttpWSTmout: 10000; By default, THttpServer created in restricted mode which only allows websocket handlers and processes only very few other related http requests. For security reasons such mode should be always enabled. Only if it is really necessary to process all other kinds of HTTP requests, one could specify no for following parameter (default yes): WebGui.WSOnly: yes; In some applications one may need to force longpoll websocket emulations from the beginning, for instance when clients connected via proxys. Although JSROOT should automatically fallback to longpoll engine, one can configure this directly (default no) WebGui.WSLongpoll: no; Following parameter controls browser max-age caching parameter for files (default 3600) When 0 is specified, browser cache will be disabled WebGui.HttpMaxAge: 3600; Also one can provide extra URL options for, see TCivetweb::Create for list of supported options WebGui.HttpExtraArgs: winsymlinks=no; One also can configure usage of FastCGI server for web windows: WebGui.FastCgiPort: 4000; WebGui.FastCgiThreads: 10; To be able start web browser for such windows, one can provide real URL of the web server which will connect with that FastC",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:11762,Security,access,access,11762,"bytes Output string will be hex formatted and includes ""-"" separator after every 4 bytes Example for 16 bytes: ""fca45856-41bee066-ff74cc96-9154d405"". ; Definition at line 178 of file RWebWindowsManager.cxx. ◆ GetLaunchTmout(). float ROOT::RWebWindowsManager::GetLaunchTmout ; (; ); const. inlineprivate . Returns timeout for launching new browser process. ; Definition at line 61 of file RWebWindowsManager.hxx. ◆ GetServer(). THttpServer * ROOT::RWebWindowsManager::GetServer ; (; ); const. inline . Returns THttpServer instance. ; Definition at line 84 of file RWebWindowsManager.hxx. ◆ GetServerAddr(). std::string ROOT::RWebWindowsManager::GetServerAddr ; (; ); const. inline . Returns http address of the server, empty string when not available. ; Definition at line 87 of file RWebWindowsManager.hxx. ◆ GetUrl(). std::string RWebWindowsManager::GetUrl ; (; RWebWindow & ; win, . bool ; remote = false, . std::string * ; produced_key = nullptr . ). private . Provide URL address to access specified window from inside or from remote. ; Definition at line 600 of file RWebWindowsManager.cxx. ◆ InformListener(). bool RWebWindowsManager::InformListener ; (; const std::string & ; msg). private . If ROOT_LISTENER_SOCKET variable is configured, message will be sent to that unix socket. ; Definition at line 227 of file RWebWindowsManager.cxx. ◆ Instance(). std::shared_ptr< RWebWindowsManager > & RWebWindowsManager::Instance ; (; ). static . Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ; Definition at line 78 of file RWebWindowsManager.cxx. ◆ IsLoopbackMode(). bool RWebWindowsManager::IsLoopbackMode ; (; ). static . Returns true if loopback mode used by THttpServer for web widgets. ; Definition at line 146 of file RWebWindowsManager.cxx. ◆ IsMainThrd(). bool RWebWindowsManager::IsMainThrd ; (; ). static . Returns true when called from main process Main process recognized at the moment when library is loaded It supposed to be a thre",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:13797,Security,access,access,13797,"gApplication->Run() will be called If application runs in separate thread, one have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 104 of file RWebWindowsManager.cxx. ◆ IsUseHttpThread(). bool ROOT::RWebWindowsManager::IsUseHttpThread ; (; ); const. inlineprivate . Returns true if http server use special thread for requests processing (default off) ; Definition at line 55 of file RWebWindowsManager.hxx. ◆ IsUseSenderThreads(). bool ROOT::RWebWindowsManager::IsUseSenderThreads ; (; ); const. inlineprivate . Returns true if extra threads to send data via websockets will be used (default off) ; Definition at line 58 of file RWebWindowsManager.hxx. ◆ SetLoopbackMode(). void RWebWindowsManager::SetLoopbackMode ; (; bool ; on = true). static . Set loopback mode for THttpServer used for web widgets By default is on. ; Only local communication via localhost address is possible Disable it only if really necessary - it may open unauthorized access to your application from external nodes!! ; Definition at line 128 of file RWebWindowsManager.cxx. ◆ SetShowCallback(). void ROOT::RWebWindowsManager::SetShowCallback ; (; WebWindowShowCallback_t ; func). inline . Assign show callback which can catch window showing, used by RBrowser. ; Definition at line 90 of file RWebWindowsManager.hxx. ◆ SetUseConnectionKey(). void RWebWindowsManager::SetUseConnectionKey ; (; bool ; on = true). static . Enable or disable usage of connection key (default on) If enabled, each connection (and reconnection) to widget requires unique key Connection key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ; Definition at line 167 of file RWebWindowsManager.cxx. ◆ SetUseSessionKey(). void RWebWindowsManager::SetUseSessionKey ; (; bool ; on = true). static . Enable or disable usage of session key (default on) If enabled, secrete session key used ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:14439,Security,hash,hash,14439,"to send data via websockets will be used (default off) ; Definition at line 58 of file RWebWindowsManager.hxx. ◆ SetLoopbackMode(). void RWebWindowsManager::SetLoopbackMode ; (; bool ; on = true). static . Set loopback mode for THttpServer used for web widgets By default is on. ; Only local communication via localhost address is possible Disable it only if really necessary - it may open unauthorized access to your application from external nodes!! ; Definition at line 128 of file RWebWindowsManager.cxx. ◆ SetShowCallback(). void ROOT::RWebWindowsManager::SetShowCallback ; (; WebWindowShowCallback_t ; func). inline . Assign show callback which can catch window showing, used by RBrowser. ; Definition at line 90 of file RWebWindowsManager.hxx. ◆ SetUseConnectionKey(). void RWebWindowsManager::SetUseConnectionKey ; (; bool ; on = true). static . Enable or disable usage of connection key (default on) If enabled, each connection (and reconnection) to widget requires unique key Connection key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ; Definition at line 167 of file RWebWindowsManager.cxx. ◆ SetUseSessionKey(). void RWebWindowsManager::SetUseSessionKey ; (; bool ; on = true). static . Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ; Definition at line 156 of file RWebWindowsManager.cxx. ◆ ShowWindow(). unsigned RWebWindowsManager::ShowWindow ; (; RWebWindow & ; win, . const RWebDisplayArgs & ; user_args . ). private . Show window in specified location, see Show() method for more details. ; Show web window in specified location.; Parameters. [in,out]winweb window by reference ; user_argsspecifies where and how display web window. As display args one can use string like ""firefox"" or ""chrome"" - these are two main supp",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:14798,Security,hash,hash,14798,"access to your application from external nodes!! ; Definition at line 128 of file RWebWindowsManager.cxx. ◆ SetShowCallback(). void ROOT::RWebWindowsManager::SetShowCallback ; (; WebWindowShowCallback_t ; func). inline . Assign show callback which can catch window showing, used by RBrowser. ; Definition at line 90 of file RWebWindowsManager.hxx. ◆ SetUseConnectionKey(). void RWebWindowsManager::SetUseConnectionKey ; (; bool ; on = true). static . Enable or disable usage of connection key (default on) If enabled, each connection (and reconnection) to widget requires unique key Connection key used together with session key to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ; Definition at line 167 of file RWebWindowsManager.cxx. ◆ SetUseSessionKey(). void RWebWindowsManager::SetUseSessionKey ; (; bool ; on = true). static . Enable or disable usage of session key (default on) If enabled, secrete session key used to calculate hash sum of each packet send to or from server This protects ROOT http server from anauthorized usage. ; Definition at line 156 of file RWebWindowsManager.cxx. ◆ ShowWindow(). unsigned RWebWindowsManager::ShowWindow ; (; RWebWindow & ; win, . const RWebDisplayArgs & ; user_args . ). private . Show window in specified location, see Show() method for more details. ; Show web window in specified location.; Parameters. [in,out]winweb window by reference ; user_argsspecifies where and how display web window. As display args one can use string like ""firefox"" or ""chrome"" - these are two main supported web browsers. See RWebDisplayArgs::SetBrowserKind() for all available options. Default value for the browser can be configured when starting root with –web argument like: ""root --web=chrome"". When root started in web server mode ""root --web=server"", no any web browser will be started - just URL will be printout, which can be entered in any running web browser; If allowed, same window can be disp",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:17656,Testability,log,log,17656,"ode, like ""fork:--headless --private-window --no-remote $profile $url""; WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; WebGui.FirefoxProfile: name of Firefox profile to use; WebGui.FirefoxProfilePath: file path to Firefox profile; WebGui.FirefoxRandomProfile: usage of random Firefox profile -1 never, 0 - only for headless mode (dflt), 1 - always; WebGui.LaunchTmout: time required to start process in seconds (default 30 s); WebGui.OperationTmout: time required to perform WebWindow operation like execute command or update drawings; WebGui.RecordData: if specified enables data recording for each web window 0 - off, 1 - on; WebGui.JsonComp: compression factor for JSON conversion, if not specified - each widget uses own default values; WebGui.ForceHttp: 0 - off (default), 1 - always create real http server to run web window; WebGui.Console: -1 - output only console.error(), 0 - add console.warn(), 1 - add console.log() output; WebGui.ConnCredits: 10 - number of packets which can be send by server or client without acknowledge from receiving side; WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/; WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified; WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3; THttpServer-related parameters documented in CreateServer method ; Definition at line 692 of file RWebWindowsManager.cxx. ◆ Terminate(). void RWebWindowsManager::Terminate ; (; ). Terminate http server and ROOT application. ; Definition at line 851 of file RWebWindowsManager.cxx. ◆ Unregister(). void RWebWindowsManager::Unregister ; (; RWebWindow & ; win). private . Release all references to specified window Called from RWebWindow destructor. ; Definition at line 591 of file RWebWindowsManager.cxx. ◆ WaitFor(). int RWebWindowsManager::WaitFor ; (; RWebWindow & ; win, . WebWindowWaitFunc_t ; check, . bool ; ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowsManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:6128,Availability,error,error,6128,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:6217,Availability,error,error,6217,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:6372,Availability,error,error,6372,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:6669,Availability,error,error,6669,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:10753,Availability,error,error,10753,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static int GetBoolEnv (const std::string &name, int dfl=-1);  Parse boolean gEnv variable which should be ""yes"" or ""no"". ;  ;  Static Public Member Functions inherited from THttpWSHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ;",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:14341,Deployability,patch,patches,14341,"har *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/gui/webdisplay/src/RWebWindowWSHandler.hxx>. Inheritance diagram for ROOT::RWebWindowWSHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RWebWindowWSHandler(). ROOT::RWebWindowWSHandler::RWebWindowWSHandler ; (; RWebWindow & ; wind, . const char * ; name . ). inline . constructor ; Definition at line 126 of file RWebWindowWSHandler.hxx. ◆ ~RWebWindowWSHandler(). ROOT::RWebWindowWSHandler::~RWebWindowWSHandler ; (; ). overridedefault . Member Function Documentation. ◆ AllowMTProcess(). Bool_t ROOT::RWebWindowWSHandler::AllowMTProcess ; (; ); const. inlineoverridevirtual . Allow processing of WS actions in arbitrary thread. ; Reimplemented from THttpWSHandler.; Definition at line 149 of file RWebWindowWSHandler.hxx. ◆ AllowMTSend(). Bool_t ROOT::RWebWindowWSHandler::AllowMTSend ; (; ); const. inlineoverridevirtual . Allows usage of special threads for send operatio",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:338,Integrability,wrap,wrapper,338,". ROOT: ROOT::RWebWindowWSHandler Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; List of all members ; ROOT::RWebWindowWSHandler Class Reference. ; just wrapper to deliver websockets call-backs to the RWebWindow class ; Definition at line 30 of file RWebWindowWSHandler.hxx. Public Member Functions;  RWebWindowWSHandler (RWebWindow &wind, const char *name);  constructor ;  ;  ~RWebWindowWSHandler () override=default;  ; Bool_t AllowMTProcess () const override;  Allow processing of WS actions in arbitrary thread. ;  ; Bool_t AllowMTSend () const override;  Allows usage of special threads for send operations. ;  ; Bool_t CanServeFiles () const override;  returns true when window allowed to serve files relative to default page ;  ; void CompleteWSSend (UInt_t wsid) override;  React on completion of multi-threaded send operation. ;  ; TString GetDefaultPageContent () override;  returns content of default web-page THttpWSHandler interface ;  ; Bool_t ProcessWS (THttpCallArg *arg) override;  Process websocket request - called from THttpServer thread THttpWSHandler interface. ;  ;  Public Member Functions inherited from THttpWSHandler; virtual ~THttpWSHandler ();  destructor Make sure that all sending threads are stopped correctly ;  ; void CloseWS (UInt_t wsid);  Close connection with given websocket id. ;  ; Int_t GetNumWS ();  Returns current number of websocket connections. ;  ; UInt_t GetWS (Int_t num=0);  Return websocket id with given sequential number Number of websockets returned with GetNumWS() method. ;  ; Bool_t HasWS (UInt_t wsid);  Return kTRUE if websocket with given ID exists. ;  ; TClass * IsA () const override;  ; Bool_t IsDisabled () const;  Returns true when processing of websockets is disabled, set shortly before handler need to be destroyed. ;  ; Bool_t IsSyncMode () cons",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:1122,Integrability,interface,interface,1122,"mbers |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; List of all members ; ROOT::RWebWindowWSHandler Class Reference. ; just wrapper to deliver websockets call-backs to the RWebWindow class ; Definition at line 30 of file RWebWindowWSHandler.hxx. Public Member Functions;  RWebWindowWSHandler (RWebWindow &wind, const char *name);  constructor ;  ;  ~RWebWindowWSHandler () override=default;  ; Bool_t AllowMTProcess () const override;  Allow processing of WS actions in arbitrary thread. ;  ; Bool_t AllowMTSend () const override;  Allows usage of special threads for send operations. ;  ; Bool_t CanServeFiles () const override;  returns true when window allowed to serve files relative to default page ;  ; void CompleteWSSend (UInt_t wsid) override;  React on completion of multi-threaded send operation. ;  ; TString GetDefaultPageContent () override;  returns content of default web-page THttpWSHandler interface ;  ; Bool_t ProcessWS (THttpCallArg *arg) override;  Process websocket request - called from THttpServer thread THttpWSHandler interface. ;  ;  Public Member Functions inherited from THttpWSHandler; virtual ~THttpWSHandler ();  destructor Make sure that all sending threads are stopped correctly ;  ; void CloseWS (UInt_t wsid);  Close connection with given websocket id. ;  ; Int_t GetNumWS ();  Returns current number of websocket connections. ;  ; UInt_t GetWS (Int_t num=0);  Return websocket id with given sequential number Number of websockets returned with GetNumWS() method. ;  ; Bool_t HasWS (UInt_t wsid);  Return kTRUE if websocket with given ID exists. ;  ; TClass * IsA () const override;  ; Bool_t IsDisabled () const;  Returns true when processing of websockets is disabled, set shortly before handler need to be destroyed. ;  ; Bool_t IsSyncMode () const;  Returns processing mode of WS handler If sync mode is TRUE (default), all event processing and data sending performed in main thread All sen",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:1259,Integrability,interface,interface,1259,"mbers |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; List of all members ; ROOT::RWebWindowWSHandler Class Reference. ; just wrapper to deliver websockets call-backs to the RWebWindow class ; Definition at line 30 of file RWebWindowWSHandler.hxx. Public Member Functions;  RWebWindowWSHandler (RWebWindow &wind, const char *name);  constructor ;  ;  ~RWebWindowWSHandler () override=default;  ; Bool_t AllowMTProcess () const override;  Allow processing of WS actions in arbitrary thread. ;  ; Bool_t AllowMTSend () const override;  Allows usage of special threads for send operations. ;  ; Bool_t CanServeFiles () const override;  returns true when window allowed to serve files relative to default page ;  ; void CompleteWSSend (UInt_t wsid) override;  React on completion of multi-threaded send operation. ;  ; TString GetDefaultPageContent () override;  returns content of default web-page THttpWSHandler interface ;  ; Bool_t ProcessWS (THttpCallArg *arg) override;  Process websocket request - called from THttpServer thread THttpWSHandler interface. ;  ;  Public Member Functions inherited from THttpWSHandler; virtual ~THttpWSHandler ();  destructor Make sure that all sending threads are stopped correctly ;  ; void CloseWS (UInt_t wsid);  Close connection with given websocket id. ;  ; Int_t GetNumWS ();  Returns current number of websocket connections. ;  ; UInt_t GetWS (Int_t num=0);  Return websocket id with given sequential number Number of websockets returned with GetNumWS() method. ;  ; Bool_t HasWS (UInt_t wsid);  Return kTRUE if websocket with given ID exists. ;  ; TClass * IsA () const override;  ; Bool_t IsDisabled () const;  Returns true when processing of websockets is disabled, set shortly before handler need to be destroyed. ;  ; Bool_t IsSyncMode () const;  Returns processing mode of WS handler If sync mode is TRUE (default), all event processing and data sending performed in main thread All sen",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:6134,Integrability,message,message,6134,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:6675,Integrability,message,message,6675,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:7665,Integrability,message,message,7665,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:10759,Integrability,message,message,10759,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static int GetBoolEnv (const std::string &name, int dfl=-1);  Parse boolean gEnv variable which should be ""yes"" or ""no"". ;  ;  Static Public Member Functions inherited from THttpWSHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ;",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:11132,Integrability,message,message,11132," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static int GetBoolEnv (const std::string &name, int dfl=-1);  Parse boolean gEnv variable which should be ""yes"" or ""no"". ;  ;  Static Public Member Functions inherited from THttpWSHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; s",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:16735,Integrability,interface,interface,16735,"owWSHandler::CompleteWSSend ; (; UInt_t ; wsid). inlineoverridevirtual . React on completion of multi-threaded send operation. ; Reimplemented from THttpWSHandler.; Definition at line 155 of file RWebWindowWSHandler.hxx. ◆ GetBoolEnv(). int RWebWindowWSHandler::GetBoolEnv ; (; const std::string & ; name, . int ; dflt = -1 . ). static . Parse boolean gEnv variable which should be ""yes"" or ""no"". ; Returns1 for true or 0 for false Returns; Parameters. dfltif result is not defined ; namename of the env variable . Definition at line 47 of file RWebWindowsManager.cxx. ◆ GetCodeVersion(). std::string ROOT::RWebWindowWSHandler::GetCodeVersion ; (; ). inlineoverrideprotectedvirtual . Method generate extra suffix for all kinds of loaded code. ; Reimplemented from THttpWSHandler.; Definition at line 38 of file RWebWindowWSHandler.hxx. ◆ GetDefaultPageContent(). TString ROOT::RWebWindowWSHandler::GetDefaultPageContent ; (; ). inlineoverridevirtual . returns content of default web-page THttpWSHandler interface ; Reimplemented from THttpWSHandler.; Definition at line 135 of file RWebWindowWSHandler.hxx. ◆ ProcessBatchHolder(). Bool_t ROOT::RWebWindowWSHandler::ProcessBatchHolder ; (; std::shared_ptr< THttpCallArg > & ; ). inlineoverrideprotectedvirtual . Method used to accept or reject root_batch_holder.js request. ; Reimplemented from THttpWSHandler.; Definition at line 33 of file RWebWindowWSHandler.hxx. ◆ ProcessWS(). Bool_t ROOT::RWebWindowWSHandler::ProcessWS ; (; THttpCallArg * ; arg). inlineoverridevirtual . Process websocket request - called from THttpServer thread THttpWSHandler interface. ; Implements THttpWSHandler.; Definition at line 142 of file RWebWindowWSHandler.hxx. ◆ VerifyDefaultPageContent(). void ROOT::RWebWindowWSHandler::VerifyDefaultPageContent ; (; std::shared_ptr< THttpCallArg > & ; arg). inlineoverrideprotectedvirtual . Method called when default page content is prepared for use By default no-cache header is provided. ; Reimplemented from THttpWSHandler",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:17333,Integrability,interface,interface,17333,rns; Parameters. dfltif result is not defined ; namename of the env variable . Definition at line 47 of file RWebWindowsManager.cxx. ◆ GetCodeVersion(). std::string ROOT::RWebWindowWSHandler::GetCodeVersion ; (; ). inlineoverrideprotectedvirtual . Method generate extra suffix for all kinds of loaded code. ; Reimplemented from THttpWSHandler.; Definition at line 38 of file RWebWindowWSHandler.hxx. ◆ GetDefaultPageContent(). TString ROOT::RWebWindowWSHandler::GetDefaultPageContent ; (; ). inlineoverridevirtual . returns content of default web-page THttpWSHandler interface ; Reimplemented from THttpWSHandler.; Definition at line 135 of file RWebWindowWSHandler.hxx. ◆ ProcessBatchHolder(). Bool_t ROOT::RWebWindowWSHandler::ProcessBatchHolder ; (; std::shared_ptr< THttpCallArg > & ; ). inlineoverrideprotectedvirtual . Method used to accept or reject root_batch_holder.js request. ; Reimplemented from THttpWSHandler.; Definition at line 33 of file RWebWindowWSHandler.hxx. ◆ ProcessWS(). Bool_t ROOT::RWebWindowWSHandler::ProcessWS ; (; THttpCallArg * ; arg). inlineoverridevirtual . Process websocket request - called from THttpServer thread THttpWSHandler interface. ; Implements THttpWSHandler.; Definition at line 142 of file RWebWindowWSHandler.hxx. ◆ VerifyDefaultPageContent(). void ROOT::RWebWindowWSHandler::VerifyDefaultPageContent ; (; std::shared_ptr< THttpCallArg > & ; arg). inlineoverrideprotectedvirtual . Method called when default page content is prepared for use By default no-cache header is provided. ; Reimplemented from THttpWSHandler.; Definition at line 41 of file RWebWindowWSHandler.hxx. Member Data Documentation. ◆ fWindow. RWebWindow& ROOT::RWebWindowWSHandler::fWindow. ! window reference ; Definition at line 123 of file RWebWindowWSHandler.hxx. gui/webdisplay/src/RWebWindowWSHandler.hxx; gui/webdisplay/src/RWebWindowsManager.cxx. ROOTRWebWindowWSHandler. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:1300,Modifiability,inherit,inherited,1300,"RWebWindow class ; Definition at line 30 of file RWebWindowWSHandler.hxx. Public Member Functions;  RWebWindowWSHandler (RWebWindow &wind, const char *name);  constructor ;  ;  ~RWebWindowWSHandler () override=default;  ; Bool_t AllowMTProcess () const override;  Allow processing of WS actions in arbitrary thread. ;  ; Bool_t AllowMTSend () const override;  Allows usage of special threads for send operations. ;  ; Bool_t CanServeFiles () const override;  returns true when window allowed to serve files relative to default page ;  ; void CompleteWSSend (UInt_t wsid) override;  React on completion of multi-threaded send operation. ;  ; TString GetDefaultPageContent () override;  returns content of default web-page THttpWSHandler interface ;  ; Bool_t ProcessWS (THttpCallArg *arg) override;  Process websocket request - called from THttpServer thread THttpWSHandler interface. ;  ;  Public Member Functions inherited from THttpWSHandler; virtual ~THttpWSHandler ();  destructor Make sure that all sending threads are stopped correctly ;  ; void CloseWS (UInt_t wsid);  Close connection with given websocket id. ;  ; Int_t GetNumWS ();  Returns current number of websocket connections. ;  ; UInt_t GetWS (Int_t num=0);  Return websocket id with given sequential number Number of websockets returned with GetNumWS() method. ;  ; Bool_t HasWS (UInt_t wsid);  Return kTRUE if websocket with given ID exists. ;  ; TClass * IsA () const override;  ; Bool_t IsDisabled () const;  Returns true when processing of websockets is disabled, set shortly before handler need to be destroyed. ;  ; Bool_t IsSyncMode () const;  Returns processing mode of WS handler If sync mode is TRUE (default), all event processing and data sending performed in main thread All send functions are blocking and must be performed from main thread If sync mode is false, WS handler can be used from different threads and starts its own sending threads. ;  ; Int_t SendCharStarWS (UInt_t wsid, const char *str);  Send string v",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:2931,Modifiability,inherit,inherited,2931,"ed to be destroyed. ;  ; Bool_t IsSyncMode () const;  Returns processing mode of WS handler If sync mode is TRUE (default), all event processing and data sending performed in main thread All send functions are blocking and must be performed from main thread If sync mode is false, WS handler can be used from different threads and starts its own sending threads. ;  ; Int_t SendCharStarWS (UInt_t wsid, const char *str);  Send string via given websocket id. ;  ; Int_t SendHeaderWS (UInt_t wsid, const char *hdr, const void *buf, int len);  Send binary data with text header via given websocket id. ;  ; Int_t SendWS (UInt_t wsid, const void *buf, int len);  Send binary data via given websocket id. ;  ; void SetDisabled ();  Disable all processing of websockets, normally called shortly before destructor. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:4671,Modifiability,inherit,inherited,4671,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:5764,Modifiability,inherit,inheritance,5764,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:7763,Modifiability,inherit,inherits,7763,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:7880,Modifiability,inherit,inherits,7880,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:11527,Modifiability,variab,variable,11527,");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static int GetBoolEnv (const std::string &name, int dfl=-1);  Parse boolean gEnv variable which should be ""yes"" or ""no"". ;  ;  Static Public Member Functions inherited from THttpWSHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of object",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:11604,Modifiability,inherit,inherited,11604,"ngs in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static int GetBoolEnv (const std::string &name, int dfl=-1);  Parse boolean gEnv variable which should be ""yes"" or ""no"". ;  ;  Static Public Member Functions inherited from THttpWSHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; RWebWindow & fWindow;  ! window reference ;  . Protected Member Functions; std::string GetCodeVersion () override;  Method generate extra suffix for all kinds of loaded code. ;  ; Bool_t ProcessBatchHolder (std::shared_ptr< THttpCallArg > &arg) override;  Method used to accept or reject root_batch_holder.js request. ;  ; void VerifyDefaultPageContent (std::shared_ptr< THttpCallArg",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:11822,Modifiability,inherit,inherited,11822,"ngs in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static int GetBoolEnv (const std::string &name, int dfl=-1);  Parse boolean gEnv variable which should be ""yes"" or ""no"". ;  ;  Static Public Member Functions inherited from THttpWSHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; RWebWindow & fWindow;  ! window reference ;  . Protected Member Functions; std::string GetCodeVersion () override;  Method generate extra suffix for all kinds of loaded code. ;  ; Bool_t ProcessBatchHolder (std::shared_ptr< THttpCallArg > &arg) override;  Method used to accept or reject root_batch_holder.js request. ;  ; void VerifyDefaultPageContent (std::shared_ptr< THttpCallArg",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:12032,Modifiability,inherit,inherited,12032,"ngs in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static int GetBoolEnv (const std::string &name, int dfl=-1);  Parse boolean gEnv variable which should be ""yes"" or ""no"". ;  ;  Static Public Member Functions inherited from THttpWSHandler; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; RWebWindow & fWindow;  ! window reference ;  . Protected Member Functions; std::string GetCodeVersion () override;  Method generate extra suffix for all kinds of loaded code. ;  ; Bool_t ProcessBatchHolder (std::shared_ptr< THttpCallArg > &arg) override;  Method used to accept or reject root_batch_holder.js request. ;  ; void VerifyDefaultPageContent (std::shared_ptr< THttpCallArg",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:13073,Modifiability,inherit,inherited,13073,"tic Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; RWebWindow & fWindow;  ! window reference ;  . Protected Member Functions; std::string GetCodeVersion () override;  Method generate extra suffix for all kinds of loaded code. ;  ; Bool_t ProcessBatchHolder (std::shared_ptr< THttpCallArg > &arg) override;  Method used to accept or reject root_batch_holder.js request. ;  ; void VerifyDefaultPageContent (std::shared_ptr< THttpCallArg > &arg) override;  Method called when default page content is prepared for use By default no-cache header is provided. ;  ;  Protected Member Functions inherited from THttpWSHandler;  THttpWSHandler (const char *name, const char *title, Bool_t syncmode=kTRUE);  normal constructor ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNa",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:13235,Modifiability,inherit,inherited,13235,"tic Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; RWebWindow & fWindow;  ! window reference ;  . Protected Member Functions; std::string GetCodeVersion () override;  Method generate extra suffix for all kinds of loaded code. ;  ; Bool_t ProcessBatchHolder (std::shared_ptr< THttpCallArg > &arg) override;  Method used to accept or reject root_batch_holder.js request. ;  ; void VerifyDefaultPageContent (std::shared_ptr< THttpCallArg > &arg) override;  Method called when default page content is prepared for use By default no-cache header is provided. ;  ;  Protected Member Functions inherited from THttpWSHandler;  THttpWSHandler (const char *name, const char *title, Bool_t syncmode=kTRUE);  normal constructor ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNa",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:13462,Modifiability,inherit,inherited,13462," Attributes; RWebWindow & fWindow;  ! window reference ;  . Protected Member Functions; std::string GetCodeVersion () override;  Method generate extra suffix for all kinds of loaded code. ;  ; Bool_t ProcessBatchHolder (std::shared_ptr< THttpCallArg > &arg) override;  Method used to accept or reject root_batch_holder.js request. ;  ; void VerifyDefaultPageContent (std::shared_ptr< THttpCallArg > &arg) override;  Method called when default page content is prepared for use By default no-cache header is provided. ;  ;  Protected Member Functions inherited from THttpWSHandler;  THttpWSHandler (const char *name, const char *title, Bool_t syncmode=kTRUE);  normal constructor ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/gui/webdisplay/src/RWebWindowWSHandler.hxx>. Inheritance diagram for ROOT::RWebWindowWSHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera ins",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:14103,Modifiability,inherit,inherited,14103,"ncmode=kTRUE);  normal constructor ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/gui/webdisplay/src/RWebWindowWSHandler.hxx>. Inheritance diagram for ROOT::RWebWindowWSHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RWebWindowWSHandler(). ROOT::RWebWindowWSHandler::RWebWindowWSHandler ; (; RWebWindow & ; wind, . const char * ; name . ). inline . constructor ; Definition at line 126 of file RWebWindowWSHandler.hxx. ◆ ~RWebWindowWSHandler(). ROOT::RWebWindowWSHandler::~RWebWindowWSHandler ; (; ). overridedefault . Member Function Documentation. ◆ AllowMTProcess(). Bool_t ROOT::RWebWindowWSHandler::AllowMTProcess ; (; ); const. inlineoverridevirtual . Allow processing of WS actions in arbitrary thread. ; Reimplemented from THttpWSHandler.; Definition at line 149 of file RWebWindowWSHandler.h",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:14196,Modifiability,inherit,inherited,14196,"ncmode=kTRUE);  normal constructor ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/gui/webdisplay/src/RWebWindowWSHandler.hxx>. Inheritance diagram for ROOT::RWebWindowWSHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RWebWindowWSHandler(). ROOT::RWebWindowWSHandler::RWebWindowWSHandler ; (; RWebWindow & ; wind, . const char * ; name . ). inline . constructor ; Definition at line 126 of file RWebWindowWSHandler.hxx. ◆ ~RWebWindowWSHandler(). ROOT::RWebWindowWSHandler::~RWebWindowWSHandler ; (; ). overridedefault . Member Function Documentation. ◆ AllowMTProcess(). Bool_t ROOT::RWebWindowWSHandler::AllowMTProcess ; (; ); const. inlineoverridevirtual . Allow processing of WS actions in arbitrary thread. ; Reimplemented from THttpWSHandler.; Definition at line 149 of file RWebWindowWSHandler.h",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:16089,Modifiability,variab,variable,16089,"THttpWSHandler.; Definition at line 149 of file RWebWindowWSHandler.hxx. ◆ AllowMTSend(). Bool_t ROOT::RWebWindowWSHandler::AllowMTSend ; (; ); const. inlineoverridevirtual . Allows usage of special threads for send operations. ; Reimplemented from THttpWSHandler.; Definition at line 152 of file RWebWindowWSHandler.hxx. ◆ CanServeFiles(). Bool_t ROOT::RWebWindowWSHandler::CanServeFiles ; (; ); const. inlineoverridevirtual . returns true when window allowed to serve files relative to default page ; Reimplemented from THttpWSHandler.; Definition at line 138 of file RWebWindowWSHandler.hxx. ◆ CompleteWSSend(). void ROOT::RWebWindowWSHandler::CompleteWSSend ; (; UInt_t ; wsid). inlineoverridevirtual . React on completion of multi-threaded send operation. ; Reimplemented from THttpWSHandler.; Definition at line 155 of file RWebWindowWSHandler.hxx. ◆ GetBoolEnv(). int RWebWindowWSHandler::GetBoolEnv ; (; const std::string & ; name, . int ; dflt = -1 . ). static . Parse boolean gEnv variable which should be ""yes"" or ""no"". ; Returns1 for true or 0 for false Returns; Parameters. dfltif result is not defined ; namename of the env variable . Definition at line 47 of file RWebWindowsManager.cxx. ◆ GetCodeVersion(). std::string ROOT::RWebWindowWSHandler::GetCodeVersion ; (; ). inlineoverrideprotectedvirtual . Method generate extra suffix for all kinds of loaded code. ; Reimplemented from THttpWSHandler.; Definition at line 38 of file RWebWindowWSHandler.hxx. ◆ GetDefaultPageContent(). TString ROOT::RWebWindowWSHandler::GetDefaultPageContent ; (; ). inlineoverridevirtual . returns content of default web-page THttpWSHandler interface ; Reimplemented from THttpWSHandler.; Definition at line 135 of file RWebWindowWSHandler.hxx. ◆ ProcessBatchHolder(). Bool_t ROOT::RWebWindowWSHandler::ProcessBatchHolder ; (; std::shared_ptr< THttpCallArg > & ; ). inlineoverrideprotectedvirtual . Method used to accept or reject root_batch_holder.js request. ; Reimplemented from THttpWSHandler.; Defini",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:16236,Modifiability,variab,variable,16236,"ndler::AllowMTSend ; (; ); const. inlineoverridevirtual . Allows usage of special threads for send operations. ; Reimplemented from THttpWSHandler.; Definition at line 152 of file RWebWindowWSHandler.hxx. ◆ CanServeFiles(). Bool_t ROOT::RWebWindowWSHandler::CanServeFiles ; (; ); const. inlineoverridevirtual . returns true when window allowed to serve files relative to default page ; Reimplemented from THttpWSHandler.; Definition at line 138 of file RWebWindowWSHandler.hxx. ◆ CompleteWSSend(). void ROOT::RWebWindowWSHandler::CompleteWSSend ; (; UInt_t ; wsid). inlineoverridevirtual . React on completion of multi-threaded send operation. ; Reimplemented from THttpWSHandler.; Definition at line 155 of file RWebWindowWSHandler.hxx. ◆ GetBoolEnv(). int RWebWindowWSHandler::GetBoolEnv ; (; const std::string & ; name, . int ; dflt = -1 . ). static . Parse boolean gEnv variable which should be ""yes"" or ""no"". ; Returns1 for true or 0 for false Returns; Parameters. dfltif result is not defined ; namename of the env variable . Definition at line 47 of file RWebWindowsManager.cxx. ◆ GetCodeVersion(). std::string ROOT::RWebWindowWSHandler::GetCodeVersion ; (; ). inlineoverrideprotectedvirtual . Method generate extra suffix for all kinds of loaded code. ; Reimplemented from THttpWSHandler.; Definition at line 38 of file RWebWindowWSHandler.hxx. ◆ GetDefaultPageContent(). TString ROOT::RWebWindowWSHandler::GetDefaultPageContent ; (; ). inlineoverridevirtual . returns content of default web-page THttpWSHandler interface ; Reimplemented from THttpWSHandler.; Definition at line 135 of file RWebWindowWSHandler.hxx. ◆ ProcessBatchHolder(). Bool_t ROOT::RWebWindowWSHandler::ProcessBatchHolder ; (; std::shared_ptr< THttpCallArg > & ; ). inlineoverrideprotectedvirtual . Method used to accept or reject root_batch_holder.js request. ; Reimplemented from THttpWSHandler.; Definition at line 33 of file RWebWindowWSHandler.hxx. ◆ ProcessWS(). Bool_t ROOT::RWebWindowWSHandler::ProcessWS ; (; THt",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:991,Performance,multi-thread,multi-threaded,991,". ROOT: ROOT::RWebWindowWSHandler Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; List of all members ; ROOT::RWebWindowWSHandler Class Reference. ; just wrapper to deliver websockets call-backs to the RWebWindow class ; Definition at line 30 of file RWebWindowWSHandler.hxx. Public Member Functions;  RWebWindowWSHandler (RWebWindow &wind, const char *name);  constructor ;  ;  ~RWebWindowWSHandler () override=default;  ; Bool_t AllowMTProcess () const override;  Allow processing of WS actions in arbitrary thread. ;  ; Bool_t AllowMTSend () const override;  Allows usage of special threads for send operations. ;  ; Bool_t CanServeFiles () const override;  returns true when window allowed to serve files relative to default page ;  ; void CompleteWSSend (UInt_t wsid) override;  React on completion of multi-threaded send operation. ;  ; TString GetDefaultPageContent () override;  returns content of default web-page THttpWSHandler interface ;  ; Bool_t ProcessWS (THttpCallArg *arg) override;  Process websocket request - called from THttpServer thread THttpWSHandler interface. ;  ;  Public Member Functions inherited from THttpWSHandler; virtual ~THttpWSHandler ();  destructor Make sure that all sending threads are stopped correctly ;  ; void CloseWS (UInt_t wsid);  Close connection with given websocket id. ;  ; Int_t GetNumWS ();  Returns current number of websocket connections. ;  ; UInt_t GetWS (Int_t num=0);  Return websocket id with given sequential number Number of websockets returned with GetNumWS() method. ;  ; Bool_t HasWS (UInt_t wsid);  Return kTRUE if websocket with given ID exists. ;  ; TClass * IsA () const override;  ; Bool_t IsDisabled () const;  Returns true when processing of websockets is disabled, set shortly before handler need to be destroyed. ;  ; Bool_t IsSyncMode () cons",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:2113,Performance,perform,performed,2113,"_t ProcessWS (THttpCallArg *arg) override;  Process websocket request - called from THttpServer thread THttpWSHandler interface. ;  ;  Public Member Functions inherited from THttpWSHandler; virtual ~THttpWSHandler ();  destructor Make sure that all sending threads are stopped correctly ;  ; void CloseWS (UInt_t wsid);  Close connection with given websocket id. ;  ; Int_t GetNumWS ();  Returns current number of websocket connections. ;  ; UInt_t GetWS (Int_t num=0);  Return websocket id with given sequential number Number of websockets returned with GetNumWS() method. ;  ; Bool_t HasWS (UInt_t wsid);  Return kTRUE if websocket with given ID exists. ;  ; TClass * IsA () const override;  ; Bool_t IsDisabled () const;  Returns true when processing of websockets is disabled, set shortly before handler need to be destroyed. ;  ; Bool_t IsSyncMode () const;  Returns processing mode of WS handler If sync mode is TRUE (default), all event processing and data sending performed in main thread All send functions are blocking and must be performed from main thread If sync mode is false, WS handler can be used from different threads and starts its own sending threads. ;  ; Int_t SendCharStarWS (UInt_t wsid, const char *str);  Send string via given websocket id. ;  ; Int_t SendHeaderWS (UInt_t wsid, const char *hdr, const void *buf, int len);  Send binary data with text header via given websocket id. ;  ; Int_t SendWS (UInt_t wsid, const void *buf, int len);  Send binary data via given websocket id. ;  ; void SetDisabled ();  Disable all processing of websockets, normally called shortly before destructor. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNa",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:2182,Performance,perform,performed,2182,"_t ProcessWS (THttpCallArg *arg) override;  Process websocket request - called from THttpServer thread THttpWSHandler interface. ;  ;  Public Member Functions inherited from THttpWSHandler; virtual ~THttpWSHandler ();  destructor Make sure that all sending threads are stopped correctly ;  ; void CloseWS (UInt_t wsid);  Close connection with given websocket id. ;  ; Int_t GetNumWS ();  Returns current number of websocket connections. ;  ; UInt_t GetWS (Int_t num=0);  Return websocket id with given sequential number Number of websockets returned with GetNumWS() method. ;  ; Bool_t HasWS (UInt_t wsid);  Return kTRUE if websocket with given ID exists. ;  ; TClass * IsA () const override;  ; Bool_t IsDisabled () const;  Returns true when processing of websockets is disabled, set shortly before handler need to be destroyed. ;  ; Bool_t IsSyncMode () const;  Returns processing mode of WS handler If sync mode is TRUE (default), all event processing and data sending performed in main thread All send functions are blocking and must be performed from main thread If sync mode is false, WS handler can be used from different threads and starts its own sending threads. ;  ; Int_t SendCharStarWS (UInt_t wsid, const char *str);  Send string via given websocket id. ;  ; Int_t SendHeaderWS (UInt_t wsid, const char *hdr, const void *buf, int len);  Send binary data with text header via given websocket id. ;  ; Int_t SendWS (UInt_t wsid, const void *buf, int len);  Send binary data via given websocket id. ;  ; void SetDisabled ();  Disable all processing of websockets, normally called shortly before destructor. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNa",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:12699,Performance,load,loaded,12699,"s * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; RWebWindow & fWindow;  ! window reference ;  . Protected Member Functions; std::string GetCodeVersion () override;  Method generate extra suffix for all kinds of loaded code. ;  ; Bool_t ProcessBatchHolder (std::shared_ptr< THttpCallArg > &arg) override;  Method used to accept or reject root_batch_holder.js request. ;  ; void VerifyDefaultPageContent (std::shared_ptr< THttpCallArg > &arg) override;  Method called when default page content is prepared for use By default no-cache header is provided. ;  ;  Protected Member Functions inherited from THttpWSHandler;  THttpWSHandler (const char *name, const char *title, Bool_t syncmode=kTRUE);  normal constructor ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { ",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:13014,Performance,cache,cache,13014,"ersion ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; RWebWindow & fWindow;  ! window reference ;  . Protected Member Functions; std::string GetCodeVersion () override;  Method generate extra suffix for all kinds of loaded code. ;  ; Bool_t ProcessBatchHolder (std::shared_ptr< THttpCallArg > &arg) override;  Method used to accept or reject root_batch_holder.js request. ;  ; void VerifyDefaultPageContent (std::shared_ptr< THttpCallArg > &arg) override;  Method called when default page content is prepared for use By default no-cache header is provided. ;  ;  Protected Member Functions inherited from THttpWSHandler;  THttpWSHandler (const char *name, const char *title, Bool_t syncmode=kTRUE);  normal constructor ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasU",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:15828,Performance,multi-thread,multi-threaded,15828,"andler::~RWebWindowWSHandler ; (; ). overridedefault . Member Function Documentation. ◆ AllowMTProcess(). Bool_t ROOT::RWebWindowWSHandler::AllowMTProcess ; (; ); const. inlineoverridevirtual . Allow processing of WS actions in arbitrary thread. ; Reimplemented from THttpWSHandler.; Definition at line 149 of file RWebWindowWSHandler.hxx. ◆ AllowMTSend(). Bool_t ROOT::RWebWindowWSHandler::AllowMTSend ; (; ); const. inlineoverridevirtual . Allows usage of special threads for send operations. ; Reimplemented from THttpWSHandler.; Definition at line 152 of file RWebWindowWSHandler.hxx. ◆ CanServeFiles(). Bool_t ROOT::RWebWindowWSHandler::CanServeFiles ; (; ); const. inlineoverridevirtual . returns true when window allowed to serve files relative to default page ; Reimplemented from THttpWSHandler.; Definition at line 138 of file RWebWindowWSHandler.hxx. ◆ CompleteWSSend(). void ROOT::RWebWindowWSHandler::CompleteWSSend ; (; UInt_t ; wsid). inlineoverridevirtual . React on completion of multi-threaded send operation. ; Reimplemented from THttpWSHandler.; Definition at line 155 of file RWebWindowWSHandler.hxx. ◆ GetBoolEnv(). int RWebWindowWSHandler::GetBoolEnv ; (; const std::string & ; name, . int ; dflt = -1 . ). static . Parse boolean gEnv variable which should be ""yes"" or ""no"". ; Returns1 for true or 0 for false Returns; Parameters. dfltif result is not defined ; namename of the env variable . Definition at line 47 of file RWebWindowsManager.cxx. ◆ GetCodeVersion(). std::string ROOT::RWebWindowWSHandler::GetCodeVersion ; (; ). inlineoverrideprotectedvirtual . Method generate extra suffix for all kinds of loaded code. ; Reimplemented from THttpWSHandler.; Definition at line 38 of file RWebWindowWSHandler.hxx. ◆ GetDefaultPageContent(). TString ROOT::RWebWindowWSHandler::GetDefaultPageContent ; (; ). inlineoverridevirtual . returns content of default web-page THttpWSHandler interface ; Reimplemented from THttpWSHandler.; Definition at line 135 of file RWebWindowWSHandl",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:16462,Performance,load,loaded,16462,"t ROOT::RWebWindowWSHandler::CanServeFiles ; (; ); const. inlineoverridevirtual . returns true when window allowed to serve files relative to default page ; Reimplemented from THttpWSHandler.; Definition at line 138 of file RWebWindowWSHandler.hxx. ◆ CompleteWSSend(). void ROOT::RWebWindowWSHandler::CompleteWSSend ; (; UInt_t ; wsid). inlineoverridevirtual . React on completion of multi-threaded send operation. ; Reimplemented from THttpWSHandler.; Definition at line 155 of file RWebWindowWSHandler.hxx. ◆ GetBoolEnv(). int RWebWindowWSHandler::GetBoolEnv ; (; const std::string & ; name, . int ; dflt = -1 . ). static . Parse boolean gEnv variable which should be ""yes"" or ""no"". ; Returns1 for true or 0 for false Returns; Parameters. dfltif result is not defined ; namename of the env variable . Definition at line 47 of file RWebWindowsManager.cxx. ◆ GetCodeVersion(). std::string ROOT::RWebWindowWSHandler::GetCodeVersion ; (; ). inlineoverrideprotectedvirtual . Method generate extra suffix for all kinds of loaded code. ; Reimplemented from THttpWSHandler.; Definition at line 38 of file RWebWindowWSHandler.hxx. ◆ GetDefaultPageContent(). TString ROOT::RWebWindowWSHandler::GetDefaultPageContent ; (; ). inlineoverridevirtual . returns content of default web-page THttpWSHandler interface ; Reimplemented from THttpWSHandler.; Definition at line 135 of file RWebWindowWSHandler.hxx. ◆ ProcessBatchHolder(). Bool_t ROOT::RWebWindowWSHandler::ProcessBatchHolder ; (; std::shared_ptr< THttpCallArg > & ; ). inlineoverrideprotectedvirtual . Method used to accept or reject root_batch_holder.js request. ; Reimplemented from THttpWSHandler.; Definition at line 33 of file RWebWindowWSHandler.hxx. ◆ ProcessWS(). Bool_t ROOT::RWebWindowWSHandler::ProcessWS ; (; THttpCallArg * ; arg). inlineoverridevirtual . Process websocket request - called from THttpServer thread THttpWSHandler interface. ; Implements THttpWSHandler.; Definition at line 142 of file RWebWindowWSHandler.hxx. ◆ VerifyDefault",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:17671,Performance,cache,cache,17671,rns; Parameters. dfltif result is not defined ; namename of the env variable . Definition at line 47 of file RWebWindowsManager.cxx. ◆ GetCodeVersion(). std::string ROOT::RWebWindowWSHandler::GetCodeVersion ; (; ). inlineoverrideprotectedvirtual . Method generate extra suffix for all kinds of loaded code. ; Reimplemented from THttpWSHandler.; Definition at line 38 of file RWebWindowWSHandler.hxx. ◆ GetDefaultPageContent(). TString ROOT::RWebWindowWSHandler::GetDefaultPageContent ; (; ). inlineoverridevirtual . returns content of default web-page THttpWSHandler interface ; Reimplemented from THttpWSHandler.; Definition at line 135 of file RWebWindowWSHandler.hxx. ◆ ProcessBatchHolder(). Bool_t ROOT::RWebWindowWSHandler::ProcessBatchHolder ; (; std::shared_ptr< THttpCallArg > & ; ). inlineoverrideprotectedvirtual . Method used to accept or reject root_batch_holder.js request. ; Reimplemented from THttpWSHandler.; Definition at line 33 of file RWebWindowWSHandler.hxx. ◆ ProcessWS(). Bool_t ROOT::RWebWindowWSHandler::ProcessWS ; (; THttpCallArg * ; arg). inlineoverridevirtual . Process websocket request - called from THttpServer thread THttpWSHandler interface. ; Implements THttpWSHandler.; Definition at line 142 of file RWebWindowWSHandler.hxx. ◆ VerifyDefaultPageContent(). void ROOT::RWebWindowWSHandler::VerifyDefaultPageContent ; (; std::shared_ptr< THttpCallArg > & ; arg). inlineoverrideprotectedvirtual . Method called when default page content is prepared for use By default no-cache header is provided. ; Reimplemented from THttpWSHandler.; Definition at line 41 of file RWebWindowWSHandler.hxx. Member Data Documentation. ◆ fWindow. RWebWindow& ROOT::RWebWindowWSHandler::fWindow. ! window reference ; Definition at line 123 of file RWebWindowWSHandler.hxx. gui/webdisplay/src/RWebWindowWSHandler.hxx; gui/webdisplay/src/RWebWindowsManager.cxx. ROOTRWebWindowWSHandler. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:3799,Security,hash,hash,3799," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/v632/classROOT_1_1RWebWindowWSHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html
https://root.cern/doc/v632/classROOT_1_1TBufferMerger.html:645,Performance,queue,queue,645,". ROOT: ROOT::TBufferMerger Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TBufferMerger Class ReferenceInput/Output Library. ; TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. ; Its purpose is similar to TParallelMergingFile, but instead of using processes that connect to a network socket, TBufferMerger uses threads that each write to a TBufferMergerFile, which in turn push data into a queue managed by the TBufferMerger. ; Definition at line 41 of file TBufferMerger.hxx. Public Member Functions;  TBufferMerger (const char *name, Option_t *option=""RECREATE"", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Constructor. ;  ;  TBufferMerger (std::unique_ptr< TFile > output);  Constructor. ;  ; virtual ~TBufferMerger ();  Destructor. ;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") size_t GetAutoSave() const;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") size_t GetBuffered() const;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") size_t GetQueueSize() const;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") void SetAutoSave(size_t);  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") void SetCompressTemporaryKeys(Bool_t;  ; std::shared_ptr< TBufferMergerFile > GetFile ();  Returns a TBufferMergerFile to which data can be written. ;  ; const char * GetMergeOptions ();  Returns the current merge options. ;  ; Bool_t GetNotrees () const;  Returns whether the file has been marked as not containing any TTree objects and thus that steps that are specific to TTree can be skipped",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMerger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMerger.html
https://root.cern/doc/v632/classROOT_1_1TBufferMerger.html:5353,Performance,race condition,race condition,5353,"_LATER() [3/5]. ROOT::TBufferMerger::_R__DEPRECATED_LATER ; (; ""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"" ; ); const. inline . Definition at line 71 of file TBufferMerger.hxx. ◆ _R__DEPRECATED_LATER() [4/5]. ROOT::TBufferMerger::_R__DEPRECATED_LATER ; (; ""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"" ; ). inline . Definition at line 83 of file TBufferMerger.hxx. ◆ _R__DEPRECATED_LATER() [5/5]. ROOT::TBufferMerger::_R__DEPRECATED_LATER ; (; ""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"" ; ). ◆ GetFile(). std::shared_ptr< TBufferMergerFile > ROOT::TBufferMerger::GetFile ; (; ). Returns a TBufferMergerFile to which data can be written. ; At the end, all TBufferMergerFiles get merged into the output file. The user is responsible to ""cd"" into the file to associate objects such as histograms or trees to it.; After the creation of this file, the user must reset the kMustCleanup bit on any objects attached to it and take care of their deletion, as there is a possibility that a race condition will happen that causes a crash if ROOT manages these objects. ; Definition at line 56 of file TBufferMerger.cxx. ◆ GetMergeOptions(). const char * ROOT::TBufferMerger::GetMergeOptions ; (; ). Returns the current merge options. ; Definition at line 65 of file TBufferMerger.cxx. ◆ GetNotrees(). Bool_t ROOT::TBufferMerger::GetNotrees ; (; ); const. inline . Returns whether the file has been marked as not containing any TTree objects and thus that steps that are specific to TTree can be skipped. ; Definition at line 102 of file TBufferMerger.hxx. ◆ Init(). void ROOT::TBufferMerger::Init ; (; std::unique_ptr< TFile > ; output). private . Definition at line 36 of file TBufferMerger.cxx. ◆ Merge(). void ROOT::TBufferMerger::Merge ; (; ROOT::TBufferMergerFile * ; memfile). private . Definition at line 76 of file TBufferMerger.cxx. ◆ operator=(). TBufferMerger & ROOT::TBufferMerger::operator= ; (; const TBufferMerger & ; ). private ",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMerger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMerger.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:2788,Availability,alive,alive,2788,"eCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. ;  ;  TMemFile (const char *name, std::unique_ptr< TBufferFile > buffer);  Constructor to create a read-only TMemFile using an std::unique_ptr<TBufferFile> ;  ;  TMemFile (const TMemFile &orig);  Copying the content of the TMemFile into another TMemFile. ;  ;  ~TMemFile () override;  Close and clean-up file. ;  ; virtual void CopyTo (TBuffer &tobuf) const;  Copy the binary representation of the TMemFile into the TBuffer tobuf. ;  ; virtual Long64_t CopyTo (void *to, Long64_t maxsize) const;  Copy the binary representation of the TMemFile into the memory area starting at 'to' and of length at most 'maxsize' returns the number of bytes actually copied. ;  ; Long64_t GetSize () const override;  Return the current size of the memory file. ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print all objects in the file. ;  ; void ResetAfterMerge (TFileMergeInfo *) override;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; void ResetErrno () const override;  Simply calls TSystem::ResetErrno(). ;  ; void Streamer (TBuffer &) override;  Stream a TFile object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TFile;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Opens or creates a local ROOT file. ;  ;  ~TFile () override;  File destructor. ;  ; void Close (Option_t *option="""") override;  Close a file. ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; virtual Bool_t Cp (const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy this file to the dst URL. ;  ; virtual TKey * CreateKey (TDirectory *mother, const TObject *obj, const char *name, Int_t bufsize);  Creates key for object and conver",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:7944,Availability,recover,recover,7944,"ption_t *opt);  List the contents of a file sequentially. ;  ; virtual Bool_t Matches (const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtua",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:21157,Availability,error,error,21157," *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer)",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:21246,Availability,error,error,21246,"ave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:21401,Availability,error,error,21401,"hether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, ",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:21698,Availability,error,error,21698,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ; ",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:25191,Availability,error,error,25191," operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMemFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFile; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults:",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:34247,Availability,alive,alive,34247,"enced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TMemFile; enum class  EMode { kCreate; , kRecreate; , kUpdate; , kRead; };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMemFile; Bool_t IsExternalData () const;  ; Long64_t MemRead (Int_t fd, void *buf, Long64_t len) const;  ; bool NeedsExistingFile (EMode mode) const;  ; bool NeedsToWrite (EMode mode) const;  ; TMemFile & operator= (const TMemFile &)=delete;  ; EMode ParseOption (Option_t *option);  Parse option strings and set fOption. ;  ; void ResetObjects (TDirectoryFile *, TFileMergeInfo *) const;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; Int_t SysClose (Int_t fd) override;  Close the mem file. ;  ; Int_t SysOpen (const char *pathname, Int_t flags, UInt_t mode) override;  Open a file in 'MemFile'. ;  ; Int_t SysRead (Int_t fd, void *buf, Int_t len) override;  Read specified number of bytes from current offset into the buffer. ;  ; Int_t SysReadImpl (Int_t fd, void *buf, Long64_t len);  Read specified number of bytes from current offset into the buffer. ;  ; Long64_t SysSeek (Int_t fd, Long64_t offset, Int_t whence) override;  Seek to a specified position in the file. ;  ; Int_t SysStat (Int_t fd, Long_t *id, Long64_t *size, Long_t *flags, Long_t *modtime) override;  Perform a stat on the file; see TFile::SysStat(). ;  ; Int_t SysSync (Int_t fd) override;  Sync remaining data to disk. ;  ; Int_t SysWrite (Int_t fd, const void *buf, Int_t len) override;  Write a buffer into the file. ;  ; Int_t SysWriteImpl (Int_t fd, const void *buf, Long64_",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:21163,Integrability,message,message,21163," *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer)",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:21704,Integrability,message,message,21704,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ; ",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:22452,Integrability,message,message,22452,"ct with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be o",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:25197,Integrability,message,message,25197," operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMemFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFile; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults:",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:25570,Integrability,message,message,25570," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMemFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFile; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Submit an asynchronous open request. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Cp (const char *src, const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy file from src to dst URL. ;  ; static TFile *& CurrentFi",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:27976,Integrability,protocol,protocol,27976,"const char * GetCacheFileDir ();  Get the directory where to locally stage/cache remote files. ;  ; static const TUrl * GetEndpointUrl (const char *name);  Get final URL for file being opened asynchronously. ;  ; static Long64_t GetFileBytesRead ();  Static function returning the total number of bytes read from all files. ;  ; static Long64_t GetFileBytesWritten ();  Static function returning the total number of bytes written to all files. ;  ; static Long64_t GetFileCounter ();  ; static Int_t GetFileReadCalls ();  Static function returning the total number of read calls from all files. ;  ; static Bool_t GetOnlyStaged ();  Returns staged only flag. ;  ; static UInt_t GetOpenTimeout ();  Returns open timeout (in ms). ;  ; static Int_t GetReadaheadSize ();  Static function returning the readahead buffer size. ;  ; static Bool_t GetReadStreamerInfo ();  If the streamerinfos are to be read at file opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void ",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:1023,Modifiability,inherit,inherited,1023,"st of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::TBufferMergerFile Class ReferenceInput/Output Library. ; A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. ; The TBufferMerger merges all data into the output file on disk. ; Definition at line 143 of file TBufferMerger.hxx. Public Member Functions;  ~TBufferMergerFile () override;  Destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Write (const char *name=nullptr, Int_t opt=0, Int_t bufsize=0) override;  Write data into a TBufferFile and append it to TBufferMerger. ;  ;  Public Member Functions inherited from TMemFile;  TMemFile (const char *name, char *buffer, Long64_t size, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. See the TFile constructor for details. Copy data from buffer. ;  ;  TMemFile (const char *name, const ZeroCopyView_t &datarange);  Constructor to create a TMemFile re-using external C-Style storage. ;  ;  TMemFile (const char *name, ExternalDataPtr_t data);  Constructor to create a TMemFile re-using external storage. ;  ;  TMemFile (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. ;  ;  TMemFile (const char *name, std::unique_ptr< TBufferFile > buffer);  Constructor to create a read-only TMemFile using an std::unique_ptr<TBufferFile> ;  ;  TMemFile (const TMemFile &orig);  Copying the content of the TMemFile into another TMemFile. ;  ;  ~TMemFile () override;  Close and clean-up file. ;  ; virtual void CopyTo (TBuff",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:3032,Modifiability,inherit,inherited,3032," TMemFile into another TMemFile. ;  ;  ~TMemFile () override;  Close and clean-up file. ;  ; virtual void CopyTo (TBuffer &tobuf) const;  Copy the binary representation of the TMemFile into the TBuffer tobuf. ;  ; virtual Long64_t CopyTo (void *to, Long64_t maxsize) const;  Copy the binary representation of the TMemFile into the memory area starting at 'to' and of length at most 'maxsize' returns the number of bytes actually copied. ;  ; Long64_t GetSize () const override;  Return the current size of the memory file. ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print all objects in the file. ;  ; void ResetAfterMerge (TFileMergeInfo *) override;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; void ResetErrno () const override;  Simply calls TSystem::ResetErrno(). ;  ; void Streamer (TBuffer &) override;  Stream a TFile object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TFile;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Opens or creates a local ROOT file. ;  ;  ~TFile () override;  File destructor. ;  ; void Close (Option_t *option="""") override;  Close a file. ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; virtual Bool_t Cp (const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy this file to the dst URL. ;  ; virtual TKey * CreateKey (TDirectory *mother, const TObject *obj, const char *name, Int_t bufsize);  Creates key for object and converts data to buffer. ;  ; virtual TKey * CreateKey (TDirectory *mother, const void *obj, const TClass *cl, const char *name, Int_t bufsize);  Creates key for object and converts data to buffer. ;  ; void Delete (const char *namecycle="""") override;  Delete object namecycle. ;  ; void Draw (O",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:10386,Modifiability,inherit,inherited,10386,"amerNVirtual_b);  ; void SumBuffer (Int_t bufsize);  Increment statistics for buffer sizes of objects in this file. ;  ; Int_t Write (const char *name=nullptr, Int_t opt=0, Int_t bufsiz=0) const override;  One can not save a const TDirectory object. ;  ; Int_t Write (const char *name=nullptr, Int_t opt=0, Int_t bufsiz=0) override;  Write memory objects to this file. ;  ; virtual Bool_t WriteBuffer (const char *buf, Int_t len);  Write a buffer to the file. ;  ; virtual void WriteFree ();  Write FREE linked list on the file. ;  ; virtual void WriteHeader ();  Write File Header. ;  ; virtual UShort_t WriteProcessID (TProcessID *pid);  Check if the ProcessID pidd is already in the file, if not, add it and return the index number in the local file list. ;  ; virtual void WriteStreamerInfo ();  Write the list of TStreamerInfo as a single object in this file The class Streamer description for all classes written to this file is saved. ;  ;  Public Member Functions inherited from TDirectoryFile;  TDirectoryFile ();  Default TDirectoryFile constructor. ;  ;  TDirectoryFile (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new TDirectoryFile. ;  ;  ~TDirectoryFile () override;  Destructor. ;  ; void Add (TObject *obj, Bool_t replace=kFALSE) override;  ; void Append (TObject *obj, Bool_t replace=kFALSE) override;  Append object to this directory. ;  ; Int_t AppendKey (TKey *key) override;  Insert key in the linked list of keys of this directory. ;  ; void Browse (TBrowser *b) override;  Browse the content of the directory. ;  ; void Build (TFile *motherFile=nullptr, TDirectory *motherDir=nullptr) override;  ; Bool_t cd () override;  Change current directory to ""this"" directory. ;  ; Bool_t cd (const char *path) override;  Change current directory the directory described by the path if given one. ;  ; TObject * CloneObject (const TObject *obj, Bool_t autoadd=kTRUE) override;  Make a clone of an object using the Streamer facilit",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:16021,Modifiability,inherit,inherited,16021,"d in the dictionary of the parent class and store the corresponding exec number into fBits. ;  ; void SetWritable (Bool_t writable=kTRUE) override;  Set the new value of fWritable recursively. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteDirHeader () override;  Overwrite the Directory header record. ;  ; void WriteKeys () override;  Write Keys linked list on the file. ;  ; Int_t WriteObjectAny (const void *obj, const char *classname, const char *name, Option_t *option="""", Int_t bufsize=0) override;  Write object from pointer of class classname in this directory. ;  ; Int_t WriteObjectAny (const void *obj, const TClass *cl, const char *name, Option_t *option="""", Int_t bufsize=0) override;  Write object of class with dictionary cl in this directory. ;  ; Int_t WriteTObject (const TObject *obj, const char *name=nullptr, Option_t *option="""", Int_t bufsize=0) override;  Write object obj to this directory. ;  ;  Public Member Functions inherited from TDirectory;  TDirectory ();  Directory default constructor. ;  ;  TDirectory (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new Directory. ;  ; virtual ~TDirectory ();  Destructor. ;  ; void Clear (Option_t *option="""") override;  Delete all objects from a Directory list. ;  ; virtual void DeleteAll (Option_t *option="""");  Delete all objects from memory. ;  ; TObject * FindObject (const char *name) const override;  Find object by name in the list of memory objects. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object in the list of memory objects. ;  ; template<class T > ; T * Get (const char *namecycle);  See documentation of TDirectoryFile::Get(const char *namecycle) ;  ; virtual TList * GetList () const;  ; TObject * GetMother () const;  ; TDirectory * GetMotherDir () const;  ; template<class T > ; void GetObject (const char *namecycle, T *&ptr);  Get an object with proper type checking. ;  ; virtual const char * G",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:18455,Modifiability,inherit,inherited,18455,"ecursively remove object from a Directory. ;  ; virtual TObject * Remove (TObject *);  Remove an object from the in-memory list. ;  ; virtual void SetMother (TObject *mother);  ; void SetName (const char *newname) override;  Set the name for directory If the directory name is changed after the directory was written once, ROOT currently would NOT change the name of correspondent key in the mother directory. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; template<typename T > ; std::enable_if_t<!std::is_base_of< TObject, T >::value, Int_t > WriteObject (const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0);  Write an object with proper type checking. ;  ; template<typename T > ; std::enable_if_t< std::is_base_of< TObject, T >::value, Int_t > WriteObject (const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0);  Write an object with proper type checking. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:19955,Modifiability,inherit,inherited,19955," *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:20793,Modifiability,inherit,inheritance,20793,"amer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics sys",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:22550,Modifiability,inherit,inherits,22550,"Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op).",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:22667,Modifiability,inherit,inherits,22667,"nst char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void Obsolete (const char *method, const char *asOfVers, const char *removedFromVers) const;  Use this method ",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:25803,Modifiability,inherit,inherited,25803,"n="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMemFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFile; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Submit an asynchronous open request. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Cp (const char *src, const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy file from src to dst URL. ;  ; static TFile *& CurrentFile ();  Return the current ROOT file if any. ;  ; static const char * DeclFileName ();  ; static EAsyncOpenStatus GetAsyncOpenStatus (const char *name);  Get status of the async open request related to 'name'. ;  ; static EAsyncOpenStatus GetAsyncOpenStatus (TFileOpenHandle *handle);  Get status of the async open request related to 'handle'. ;  ; static const",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:26015,Modifiability,inherit,inherited,26015,"n="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMemFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFile; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Submit an asynchronous open request. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Cp (const char *src, const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy file from src to dst URL. ;  ; static TFile *& CurrentFile ();  Return the current ROOT file if any. ;  ; static const char * DeclFileName ();  ; static EAsyncOpenStatus GetAsyncOpenStatus (const char *name);  Get status of the async open request related to 'name'. ;  ; static EAsyncOpenStatus GetAsyncOpenStatus (TFileOpenHandle *handle);  Get status of the async open request related to 'handle'. ;  ; static const",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:29248,Modifiability,inherit,inherited,29248,"l_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:29466,Modifiability,inherit,inherited,29466,"l_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:30299,Modifiability,inherit,inherited,30299,"AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TBufferMergerFile ();  TBufferMergerFile has no default constructor. ;  ;  TBufferMergerFile (const TBufferMergerFile &);  TBufferMergerFile has no copy constructor. ;  ;  TBufferMergerFile (TBufferMerger &m);  Constructor. ;  ; TBufferMergerFile & operator= (const TBufferMergerFile &);  TBufferMergerFile has no copy operator. ;  . Private Attributes; TBufferMerger & fMerger;  . Friends; class TBufferMerger;  . Additional Inherited Members;  Public Types inherited from TMemFile; ",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:30509,Modifiability,inherit,inherited,30509,"AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TBufferMergerFile ();  TBufferMergerFile has no default constructor. ;  ;  TBufferMergerFile (const TBufferMergerFile &);  TBufferMergerFile has no copy constructor. ;  ;  TBufferMergerFile (TBufferMerger &m);  Constructor. ;  ; TBufferMergerFile & operator= (const TBufferMergerFile &);  TBufferMergerFile has no copy operator. ;  . Private Attributes; TBufferMerger & fMerger;  . Friends; class TBufferMerger;  . Additional Inherited Members;  Public Types inherited from TMemFile; ",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:31481,Modifiability,inherit,inherited,31481,"ersion_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TBufferMergerFile ();  TBufferMergerFile has no default constructor. ;  ;  TBufferMergerFile (const TBufferMergerFile &);  TBufferMergerFile has no copy constructor. ;  ;  TBufferMergerFile (TBufferMerger &m);  Constructor. ;  ; TBufferMergerFile & operator= (const TBufferMergerFile &);  TBufferMergerFile has no copy operator. ;  . Private Attributes; TBufferMerger & fMerger;  . Friends; class TBufferMerger;  . Additional Inherited Members;  Public Types inherited from TMemFile; using ExternalDataPtr_t = std::shared_ptr< const std::vector< char > >;  ;  Public Types inherited from TFile; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:31595,Modifiability,inherit,inherited,31595,"ersion_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TBufferMergerFile ();  TBufferMergerFile has no default constructor. ;  ;  TBufferMergerFile (const TBufferMergerFile &);  TBufferMergerFile has no copy constructor. ;  ;  TBufferMergerFile (TBufferMerger &m);  Constructor. ;  ; TBufferMergerFile & operator= (const TBufferMergerFile &);  TBufferMergerFile has no copy operator. ;  . Private Attributes; TBufferMerger & fMerger;  . Friends; class TBufferMerger;  . Additional Inherited Members;  Public Types inherited from TMemFile; using ExternalDataPtr_t = std::shared_ptr< const std::vector< char > >;  ;  Public Types inherited from TFile; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:32619,Modifiability,inherit,inherited,32619,"AOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TMemFile; enum class  EMode { kCreate; , kRecreate; , kUpdate; , kRead; };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:32725,Modifiability,inherit,inherited,32725,"AOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TMemFile; enum class  EMode { kCreate; , kRecreate; , kUpdate; , kRead; };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:33366,Modifiability,inherit,inherited,33366,"( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TMemFile; enum class  EMode { kCreate; , kRecreate; , kUpdate; , kRead; };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMemFile; Bool_t IsExternalData () const;  ; Long64_t MemRead (Int_t fd, void *buf, Long64_t len) const;  ; bool NeedsExistingFile (EMode mode) const;  ; bool NeedsToWrite (EMode mode) const;  ; TMemFile & operator= (const TMemFile &)=delete;  ; EMode ParseOption (Option_t *option);  Parse option strings and set fOption. ;  ; void ResetObjects (TDirectoryFile *, TFileMergeInfo *) const;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; Int_t SysClose (Int_t fd) override;  Close the mem file. ;  ; Int_t SysOpen (const char *pathname, Int_t flags, UInt_t mode) override;  Open a file in 'MemFile'. ;  ; Int_t SysRead (Int_t fd, void *buf, Int_t len) override;  Read spec",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:33476,Modifiability,inherit,inherited,33476,"( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TMemFile; enum class  EMode { kCreate; , kRecreate; , kUpdate; , kRead; };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMemFile; Bool_t IsExternalData () const;  ; Long64_t MemRead (Int_t fd, void *buf, Long64_t len) const;  ; bool NeedsExistingFile (EMode mode) const;  ; bool NeedsToWrite (EMode mode) const;  ; TMemFile & operator= (const TMemFile &)=delete;  ; EMode ParseOption (Option_t *option);  Parse option strings and set fOption. ;  ; void ResetObjects (TDirectoryFile *, TFileMergeInfo *) const;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; Int_t SysClose (Int_t fd) override;  Close the mem file. ;  ; Int_t SysOpen (const char *pathname, Int_t flags, UInt_t mode) override;  Open a file in 'MemFile'. ;  ; Int_t SysRead (Int_t fd, void *buf, Int_t len) override;  Read spec",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:33667,Modifiability,inherit,inherited,33667,"kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TMemFile; enum class  EMode { kCreate; , kRecreate; , kUpdate; , kRead; };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMemFile; Bool_t IsExternalData () const;  ; Long64_t MemRead (Int_t fd, void *buf, Long64_t len) const;  ; bool NeedsExistingFile (EMode mode) const;  ; bool NeedsToWrite (EMode mode) const;  ; TMemFile & operator= (const TMemFile &)=delete;  ; EMode ParseOption (Option_t *option);  Parse option strings and set fOption. ;  ; void ResetObjects (TDirectoryFile *, TFileMergeInfo *) const;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; Int_t SysClose (Int_t fd) override;  Close the mem file. ;  ; Int_t SysOpen (const char *pathname, Int_t flags, UInt_t mode) override;  Open a file in 'MemFile'. ;  ; Int_t SysRead (Int_t fd, void *buf, Int_t len) override;  Read specified number of bytes from current offset into the buffer. ;  ; Int_t SysReadImpl (Int_t fd, void *buf, Long64_t len);  Read specified number of bytes from current offset into the buffer. ;  ; Long64_t SysSeek (Int_t fd, Long64_t offset, Int_t whence) override;  Seek to a specified position in the file. ;  ; Int_t SysStat (Int_t fd, Long_t *id, Long64_t *size, Long_t *flags, Lon",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:33766,Modifiability,inherit,inherited,33766,"kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TMemFile; enum class  EMode { kCreate; , kRecreate; , kUpdate; , kRead; };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMemFile; Bool_t IsExternalData () const;  ; Long64_t MemRead (Int_t fd, void *buf, Long64_t len) const;  ; bool NeedsExistingFile (EMode mode) const;  ; bool NeedsToWrite (EMode mode) const;  ; TMemFile & operator= (const TMemFile &)=delete;  ; EMode ParseOption (Option_t *option);  Parse option strings and set fOption. ;  ; void ResetObjects (TDirectoryFile *, TFileMergeInfo *) const;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; Int_t SysClose (Int_t fd) override;  Close the mem file. ;  ; Int_t SysOpen (const char *pathname, Int_t flags, UInt_t mode) override;  Open a file in 'MemFile'. ;  ; Int_t SysRead (Int_t fd, void *buf, Int_t len) override;  Read specified number of bytes from current offset into the buffer. ;  ; Int_t SysReadImpl (Int_t fd, void *buf, Long64_t len);  Read specified number of bytes from current offset into the buffer. ;  ; Long64_t SysSeek (Int_t fd, Long64_t offset, Int_t whence) override;  Seek to a specified position in the file. ;  ; Int_t SysStat (Int_t fd, Long_t *id, Long64_t *size, Long_t *flags, Lon",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:35250,Modifiability,inherit,inherited,35250,"s, UInt_t mode) override;  Open a file in 'MemFile'. ;  ; Int_t SysRead (Int_t fd, void *buf, Int_t len) override;  Read specified number of bytes from current offset into the buffer. ;  ; Int_t SysReadImpl (Int_t fd, void *buf, Long64_t len);  Read specified number of bytes from current offset into the buffer. ;  ; Long64_t SysSeek (Int_t fd, Long64_t offset, Int_t whence) override;  Seek to a specified position in the file. ;  ; Int_t SysStat (Int_t fd, Long_t *id, Long64_t *size, Long_t *flags, Long_t *modtime) override;  Perform a stat on the file; see TFile::SysStat(). ;  ; Int_t SysSync (Int_t fd) override;  Sync remaining data to disk. ;  ; Int_t SysWrite (Int_t fd, const void *buf, Int_t len) override;  Write a buffer into the file. ;  ; Int_t SysWriteImpl (Int_t fd, const void *buf, Long64_t len);  Write a buffer into the file. ;  ;  Protected Member Functions inherited from TFile; virtual Long64_t DirCreateEntry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; virtual void Init (Bool_t create);  Initialize a TFile object. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ;  ; Int_t MakeProjectParProofInf (const char *packname, const char *proofinfdir);  Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCache (char *buf, Int_t len);  Read buffer via cache. ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise direc",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:36252,Modifiability,inherit,inherited,36252,"ry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; virtual void Init (Bool_t create);  Initialize a TFile object. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ;  ; Int_t MakeProjectParProofInf (const char *packname, const char *proofinfdir);  Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCache (char *buf, Int_t len);  Read buffer via cache. ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.) ;  ; void InitDirectoryFile (TClass *cl=nullptr);  Initialize the key associated with this directory (and the related data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TContext *ctxt);  Register a TContext pointing to this TDirectory object. ;  ; void RegisterGDirectory (SharedGDirectory_t &ptr); ",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:36642,Modifiability,inherit,inherited,36642,"l void Init (Bool_t create);  Initialize a TFile object. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ;  ; Int_t MakeProjectParProofInf (const char *packname, const char *proofinfdir);  Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCache (char *buf, Int_t len);  Read buffer via cache. ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.) ;  ; void InitDirectoryFile (TClass *cl=nullptr);  Initialize the key associated with this directory (and the related data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TContext *ctxt);  Register a TContext pointing to this TDirectory object. ;  ; void RegisterGDirectory (SharedGDirectory_t &ptr);  Register a std::atomic<TDirectory*> that will soon be pointing to this TDirectory object. ;  ; void UnregisterContext (TContext *ctxt);  UnRegister a TContext pointing to this TDirectory object. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ; ",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:37531,Modifiability,inherit,inherited,37531,"ted data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TContext *ctxt);  Register a TContext pointing to this TDirectory object. ;  ; void RegisterGDirectory (SharedGDirectory_t &ptr);  Register a std::atomic<TDirectory*> that will soon be pointing to this TDirectory object. ;  ; void UnregisterContext (TContext *ctxt);  UnRegister a TContext pointing to this TDirectory object. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TDirectory; static Bool_t Cd1 (const char *path);  Change current directory to ""path"". ;  ; static SharedGDirectory_t & GetSharedLocalCurrentDirectory ();  Return the (address of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_flag for its lock. ;  ;  Protected Attributes inherited from TMemFile; TMemBlock fBlockList;  Collection of memory blocks of size fgDefaultBlockSize. ;  ; Long64_t fBlockOffset {0};  Seek offset within the block. ;  ; TMemBlock * fBlockSeek {nullptr};  Pointer to the block we seeked to. ;  ; Long64_t fDefaultBlockSize = fgDefaultBlockSize;  ; ExternalDataPtr_t fExternalData;  shared file data / content ;  ; Bool_t fIsOwnedByROOT {kFALSE};  if this is a C-style memory region ;  ; Long64_t fSize {0};  Total file size (sum of the size of the chunk",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:37749,Modifiability,inherit,inherited,37749,"ctory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TContext *ctxt);  Register a TContext pointing to this TDirectory object. ;  ; void RegisterGDirectory (SharedGDirectory_t &ptr);  Register a std::atomic<TDirectory*> that will soon be pointing to this TDirectory object. ;  ; void UnregisterContext (TContext *ctxt);  UnRegister a TContext pointing to this TDirectory object. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TDirectory; static Bool_t Cd1 (const char *path);  Change current directory to ""path"". ;  ; static SharedGDirectory_t & GetSharedLocalCurrentDirectory ();  Return the (address of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_flag for its lock. ;  ;  Protected Attributes inherited from TMemFile; TMemBlock fBlockList;  Collection of memory blocks of size fgDefaultBlockSize. ;  ; Long64_t fBlockOffset {0};  Seek offset within the block. ;  ; TMemBlock * fBlockSeek {nullptr};  Pointer to the block we seeked to. ;  ; Long64_t fDefaultBlockSize = fgDefaultBlockSize;  ; ExternalDataPtr_t fExternalData;  shared file data / content ;  ; Bool_t fIsOwnedByROOT {kFALSE};  if this is a C-style memory region ;  ; Long64_t fSize {0};  Total file size (sum of the size of the chunks) ;  ; Long64_t fSysOffset {0};  Seek offset in file. ;  ;  Protected Attributes inherited from TFile; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:38087,Modifiability,inherit,inherited,38087," TDirectory &)=delete;  ; void RegisterContext (TContext *ctxt);  Register a TContext pointing to this TDirectory object. ;  ; void RegisterGDirectory (SharedGDirectory_t &ptr);  Register a std::atomic<TDirectory*> that will soon be pointing to this TDirectory object. ;  ; void UnregisterContext (TContext *ctxt);  UnRegister a TContext pointing to this TDirectory object. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TDirectory; static Bool_t Cd1 (const char *path);  Change current directory to ""path"". ;  ; static SharedGDirectory_t & GetSharedLocalCurrentDirectory ();  Return the (address of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_flag for its lock. ;  ;  Protected Attributes inherited from TMemFile; TMemBlock fBlockList;  Collection of memory blocks of size fgDefaultBlockSize. ;  ; Long64_t fBlockOffset {0};  Seek offset within the block. ;  ; TMemBlock * fBlockSeek {nullptr};  Pointer to the block we seeked to. ;  ; Long64_t fDefaultBlockSize = fgDefaultBlockSize;  ; ExternalDataPtr_t fExternalData;  shared file data / content ;  ; Bool_t fIsOwnedByROOT {kFALSE};  if this is a C-style memory region ;  ; Long64_t fSize {0};  Total file size (sum of the size of the chunks) ;  ; Long64_t fSysOffset {0};  Seek offset in file. ;  ;  Protected Attributes inherited from TFile; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this file ;  ; Long64_t fArchiveOffset {0};  !Offset at which file starts in archive ;  ; TFileOpenHandle * fAsyncHandle {nullptr};  !For proper automatic cleanup ;  ; EAsyncOpenStatus fAsyncOpenStatus {kAOSNotAsync};  !Status of an asynchronous open request ;  ; Long64_t fBEGIN {0};  First used byte in file. ;  ; Long64_t fBytesRead {0};  Number of bytes rea",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:38673,Modifiability,inherit,inherited,38673,tic SharedGDirectory_t & GetSharedLocalCurrentDirectory ();  Return the (address of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_flag for its lock. ;  ;  Protected Attributes inherited from TMemFile; TMemBlock fBlockList;  Collection of memory blocks of size fgDefaultBlockSize. ;  ; Long64_t fBlockOffset {0};  Seek offset within the block. ;  ; TMemBlock * fBlockSeek {nullptr};  Pointer to the block we seeked to. ;  ; Long64_t fDefaultBlockSize = fgDefaultBlockSize;  ; ExternalDataPtr_t fExternalData;  shared file data / content ;  ; Bool_t fIsOwnedByROOT {kFALSE};  if this is a C-style memory region ;  ; Long64_t fSize {0};  Total file size (sum of the size of the chunks) ;  ; Long64_t fSysOffset {0};  Seek offset in file. ;  ;  Protected Attributes inherited from TFile; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this file ;  ; Long64_t fArchiveOffset {0};  !Offset at which file starts in archive ;  ; TFileOpenHandle * fAsyncHandle {nullptr};  !For proper automatic cleanup ;  ; EAsyncOpenStatus fAsyncOpenStatus {kAOSNotAsync};  !Status of an asynchronous open request ;  ; Long64_t fBEGIN {0};  First used byte in file. ;  ; Long64_t fBytesRead {0};  Number of bytes read from this file. ;  ; Long64_t fBytesReadExtra {0};  Number of extra bytes (overhead) read by the readahead buffer. ;  ; Long64_t fBytesWrite {0};  Number of bytes written to this file. ;  ; TFileCacheRead * fCacheRead {nullptr};  !Pointer to the read cache (if any) ;  ; TMap * fCacheReadMap {nullptr};  !Pointer to the read cache (if any) ;  ; TFileCacheWrite * fCacheWrite {nullptr};  !Pointer to the write cache (if any) ;  ; TArrayC * fClassIndex {nullptr};  !Index of TStreamerInfo classes written to this file ;  ; Int_t fCompress {0};  Compression level and algorithm. ;  ; Int_t fD {-1};  File descriptor. ;  ; Long64_t fEND {0};  Last used byte in file. ;  ; TList * fFree {nullptr};  Free segments linked list table. ;  ; b,MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:41711,Modifiability,inherit,inherited,41711,;  !Seek offset cache ;  ; TList * fOpenPhases {nullptr};  !Time info about open phases ;  ; TString fOption;  File options. ;  ; TObjArray * fProcessIDs {nullptr};  !Array of pointers to TProcessIDs ;  ; Int_t fReadCalls {0};  Number of read calls ( not counting the cache calls ) ;  ; TString fRealName;  Effective real file name (not original url) ;  ; Long64_t fSeekFree {0};  Location on disk of free segments structure. ;  ; Long64_t fSeekInfo {0};  Location on disk of StreamerInfo record. ;  ; Double_t fSum2Buffer {0};  Sum of squares of buffer sizes of objects written so far. ;  ; Double_t fSumBuffer {0};  Sum of buffer sizes of objects written so far. ;  ; Char_t fUnits {0};  Number of bytes for file pointers. ;  ; TUrl fUrl;  !URL of file ;  ; Int_t fVersion {0};  File format version. ;  ; std::mutex fWriteMutex;  !Lock for writing baskets / keys into the file. ;  ; Int_t fWritten {0};  Number of objects written so far. ;  ;  Protected Attributes inherited from TDirectoryFile; Int_t fBufferSize {0};  Default buffer size to create new TKeys. ;  ; TDatime fDatimeC;  Date and time when directory is created. ;  ; TDatime fDatimeM;  Date and time of last modification. ;  ; TFile * fFile {nullptr};  Pointer to current file in memory. ;  ; TList * fKeys {nullptr};  Pointer to keys list in memory. ;  ; Bool_t fModified {kFALSE};  True if directory has been modified. ;  ; Int_t fNbytesKeys {0};  Number of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vect,MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:42547,Modifiability,inherit,inherited,42547,Lock for writing baskets / keys into the file. ;  ; Int_t fWritten {0};  Number of objects written so far. ;  ;  Protected Attributes inherited from TDirectoryFile; Int_t fBufferSize {0};  Default buffer size to create new TKeys. ;  ; TDatime fDatimeC;  Date and time when directory is created. ;  ; TDatime fDatimeM;  Date and time of last modification. ;  ; TFile * fFile {nullptr};  Pointer to current file in memory. ;  ; TList * fKeys {nullptr};  Pointer to keys list in memory. ;  ; Bool_t fModified {kFALSE};  True if directory has been modified. ;  ; Int_t fNbytesKeys {0};  Number of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from TMemFile; static constexpr Long64_t fgDefaultBlockSize = 2 * 1024 * 1024;  ;  Static Protected Attributes inherited from TFile; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCac,MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:43003,Modifiability,inherit,inherited,43003,"of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from TMemFile; static constexpr Long64_t fgDefaultBlockSize = 2 * 1024 * 1024;  ;  Static Protected Attributes inherited from TFile; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 2560",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:43092,Modifiability,inherit,inherited,43092,"of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from TMemFile; static constexpr Long64_t fgDefaultBlockSize = 2 * 1024 * 1024;  ;  Static Protected Attributes inherited from TFile; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 2560",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:43213,Modifiability,inherit,inherited,43213,"of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from TMemFile; static constexpr Long64_t fgDefaultBlockSize = 2 * 1024 * 1024;  ;  Static Protected Attributes inherited from TFile; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 2560",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:44542,Modifiability,inherit,inherited,44542,"bjects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 256000;  Readahead buffer size. ;  ; static std::atomic< Int_t > fgReadCalls {0};  Number of bytes read from all TFile objects. ;  ; static Bool_t fgReadInfo = kTRUE;  if true (default) ReadStreamerInfo is called when opening a file ;  ; static ROOT::Internal::RConcurrentHashColl fgTsSIHashes;  !TS Set of hashes built from read streamer infos ;  ;  Static Protected Attributes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't support = ATOMIC_FLAG_INIT;. ;  . #include <ROOT/TBufferMerger.hxx>. Inheritance diagram for ROOT::TBufferMergerFile:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TBufferMergerFile() [1/3]. ROOT::TBufferMergerFile::TBufferMergerFile ; (; TBufferMerger & ; m). private . Constructor. ; Can only be called by TBufferMerger. Parameters. mMerger this file is attached to. . Definition at line 18 of file TBufferMergerFile.cxx. ◆ TBufferMergerFile() [2/3]. ROOT::TBufferMergerFile::TBufferMergerFile ; (; ). private . TBufferMergerFile has no default constructor. . ◆ TBufferMergerFile() [3/3]. ROOT::TBufferMergerFile::TBufferMergerFile ; (; const TBufferMergerFile & ; ). private . TBufferMergerFile has no copy constructor. . ◆ ~TBufferMergerFile(). ROOT::T",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:473,Performance,queue,queue,473,". ROOT: ROOT::TBufferMergerFile Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::TBufferMergerFile Class ReferenceInput/Output Library. ; A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. ; The TBufferMerger merges all data into the output file on disk. ; Definition at line 143 of file TBufferMerger.hxx. Public Member Functions;  ~TBufferMergerFile () override;  Destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Write (const char *name=nullptr, Int_t opt=0, Int_t bufsize=0) override;  Write data into a TBufferFile and append it to TBufferMerger. ;  ;  Public Member Functions inherited from TMemFile;  TMemFile (const char *name, char *buffer, Long64_t size, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. See the TFile constructor for details. Copy data from buffer. ;  ;  TMemFile (const char *name, const ZeroCopyView_t &datarange);  Constructor to create a TMemFile re-using external C-Style storage. ;  ;  TMemFile (const char *name, ExternalDataPtr_t data);  Constructor to create a TMemFile re-using external storage. ;  ;  TMemFile (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. ;  ;  TMemFile (const char *name, std::unique_ptr< TBufferFile > buffer);  Constructor to create a read-only TMemFile using an std::unique_ptr<TBufferFile> ;  ;  TMemFile (const TMemFile &orig);  Copying the co",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:4901,Performance,cache,cache,4901,"Int_t bufsize);  Creates key for object and converts data to buffer. ;  ; void Delete (const char *namecycle="""") override;  Delete object namecycle. ;  ; void Draw (Option_t *option="""") override;  Fill Graphics Structure and Paint. ;  ; virtual void DrawMap (const char *keys=""*"", Option_t *option="""");  Draw map of objects in this file. ;  ; void FillBuffer (char *&buffer) override;  Encode file output buffer. ;  ; virtual void Flush ();  Synchronize a file's in-memory and on-disk states. ;  ; TArchiveFile * GetArchive () const;  ; Long64_t GetArchiveOffset () const;  ; Int_t GetBestBuffer () const;  Return the best buffer size of objects on this file. ;  ; virtual Long64_t GetBytesRead () const;  ; virtual Long64_t GetBytesReadExtra () const;  ; virtual Int_t GetBytesToPrefetch () const;  Max number of bytes to prefetch. ;  ; virtual Long64_t GetBytesWritten () const;  Return the total number of bytes written so far to the file. ;  ; TFileCacheRead * GetCacheRead (const TObject *tree=nullptr) const;  Return a pointer to the current read cache. ;  ; TFileCacheWrite * GetCacheWrite () const;  Return a pointer to the current write cache. ;  ; TArrayC * GetClassIndex () const;  ; Int_t GetCompressionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbyt",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:4994,Performance,cache,cache,4994,"cle="""") override;  Delete object namecycle. ;  ; void Draw (Option_t *option="""") override;  Fill Graphics Structure and Paint. ;  ; virtual void DrawMap (const char *keys=""*"", Option_t *option="""");  Draw map of objects in this file. ;  ; void FillBuffer (char *&buffer) override;  Encode file output buffer. ;  ; virtual void Flush ();  Synchronize a file's in-memory and on-disk states. ;  ; TArchiveFile * GetArchive () const;  ; Long64_t GetArchiveOffset () const;  ; Int_t GetBestBuffer () const;  Return the best buffer size of objects on this file. ;  ; virtual Long64_t GetBytesRead () const;  ; virtual Long64_t GetBytesReadExtra () const;  ; virtual Int_t GetBytesToPrefetch () const;  Max number of bytes to prefetch. ;  ; virtual Long64_t GetBytesWritten () const;  Return the total number of bytes written so far to the file. ;  ; TFileCacheRead * GetCacheRead (const TObject *tree=nullptr) const;  Return a pointer to the current read cache. ;  ; TFileCacheWrite * GetCacheWrite () const;  Return a pointer to the current write cache. ;  ; TArrayC * GetClassIndex () const;  ; Int_t GetCompressionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Lo",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:6123,Performance,cache,cached,6123,"ssionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; virtual Long64_t GetSeekFree () const;  ; virtual Long64_t GetSeekInfo () const;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos used in this file. ;  ; virtual TList * GetStreamerInfoList () final;  Read the list of TStreamerInfo objects written to this file. ;  ; Int_t GetVersion () const;  ; virtual void IncrementProcessIDs ();  ; virtual Bool_t IsArchive () const;  ; Bool_t IsBinary () const;  ; virtual Bool_t IsOpen () const;  Returns kTRUE in case file is open and kFALSE if file is not open. ;  ; Bool_t IsRaw () const;  ; void ls (Option_t *option="""") const override;  List file contents. ;  ; virtual void MakeFree (Long64_t first, Long64_t last);  Mark unused bytes on the file. ;  ; virtual void MakeProject (const char *dirname, const char *classes=""*"", Option_t *option=""new"");  Generate source code necessary to access the objects stored in the file. ;  ; virtual void Map ();  ; virtual void Map (Option_t *opt);  List the contents of a file sequentially. ;  ; virtual Bool_t Matches (const char *name);  Return kTRU",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:8259,Performance,cache,cache,8259,"ad a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Long64_t last);  ; virtual void SetOffset (Long64_t offset, ERelativeTo pos=kBeg);  Set position from where to start reading. ;  ; virtual void SetOption (Option_t *option="">"");  ; virtual void SetReadCalls (Int_t readcalls=0);  ; virtual void ShowStreamerInfo ();  Show the StreamerInfo of all classes written to this file. ; ",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:8350,Performance,cache,cache,8350,"ad a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Long64_t last);  ; virtual void SetOffset (Long64_t offset, ERelativeTo pos=kBeg);  Set position from where to start reading. ;  ; virtual void SetOption (Option_t *option="">"");  ; virtual void SetReadCalls (Int_t readcalls=0);  ; virtual void ShowStreamerInfo ();  Show the StreamerInfo of all classes written to this file. ; ",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:8407,Performance,cache,cache,8407," file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Long64_t last);  ; virtual void SetOffset (Long64_t offset, ERelativeTo pos=kBeg);  Set position from where to start reading. ;  ; virtual void SetOption (Option_t *option="">"");  ; virtual void SetReadCalls (Int_t readcalls=0);  ; virtual void ShowStreamerInfo ();  Show the StreamerInfo of all classes written to this file. ;  ; Int_t Sizeof () const override;  Return the size in bytes of the file header. ;  ; void StreamerNVirtual (TBuffer &Cl",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:8443,Performance,cache,cache,8443," file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Long64_t last);  ; virtual void SetOffset (Long64_t offset, ERelativeTo pos=kBeg);  Set position from where to start reading. ;  ; virtual void SetOption (Option_t *option="">"");  ; virtual void SetReadCalls (Int_t readcalls=0);  ; virtual void ShowStreamerInfo ();  Show the StreamerInfo of all classes written to this file. ;  ; Int_t Sizeof () const override;  Return the size in bytes of the file header. ;  ; void StreamerNVirtual (TBuffer &Cl",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:13249,Performance,perform,performed,13249,"ject with name. ;  ; template<class T > ; T * Get (const char *namecycle);  See documentation of TDirectoryFile::Get(const char *namecycle) ;  ; TObject * Get (const char *namecycle) override;  Return pointer to object identified by namecycle. ;  ; Int_t GetBufferSize () const override;  Return the buffer size to create new TKeys. ;  ; const TDatime & GetCreationDate () const;  ; TDirectory * GetDirectory (const char *apath, Bool_t printError=false, const char *funcname=""GetDirectory"") override;  Find a directory named ""apath"". ;  ; TFile * GetFile () const override;  ; TKey * GetKey (const char *name, Short_t cycle=9999) const override;  Return pointer to key with name,cycle. ;  ; TList * GetListOfKeys () const override;  ; const TDatime & GetModificationDate () const;  ; Int_t GetNbytesKeys () const override;  ; Int_t GetNkeys () const override;  ; void * GetObjectChecked (const char *namecycle, const char *classname) override;  See documentation of TDirectoryFile::GetObjectCheck(const char *namecycle, const TClass *cl) ;  ; void * GetObjectChecked (const char *namecycle, const TClass *cl) override;  Return pointer to object identified by namecycle if and only if the actual object is a type suitable to be stored as a pointer to a ""expectedClass"" If expectedClass is null, no check is performed. ;  ; void * GetObjectUnchecked (const char *namecycle) override;  Return pointer to object identified by namecycle. ;  ; Long64_t GetSeekDir () const override;  ; Long64_t GetSeekKeys () const override;  ; Long64_t GetSeekParent () const override;  ; Bool_t IsModified () const override;  ; Bool_t IsWritable () const override;  ; TDirectory * mkdir (const char *name, const char *title="""", Bool_t returnExistingDirectory=kFALSE) override;  Create a sub-directory ""a"" or a hierarchy of sub-directories ""a/b/c/..."". ;  ; TFile * OpenFile (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t neto",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:26993,Performance,cache,cache,26993,"ar * DeclFileName ();  ;  Static Public Member Functions inherited from TFile; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Submit an asynchronous open request. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Cp (const char *src, const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy file from src to dst URL. ;  ; static TFile *& CurrentFile ();  Return the current ROOT file if any. ;  ; static const char * DeclFileName ();  ; static EAsyncOpenStatus GetAsyncOpenStatus (const char *name);  Get status of the async open request related to 'name'. ;  ; static EAsyncOpenStatus GetAsyncOpenStatus (TFileOpenHandle *handle);  Get status of the async open request related to 'handle'. ;  ; static const char * GetCacheFileDir ();  Get the directory where to locally stage/cache remote files. ;  ; static const TUrl * GetEndpointUrl (const char *name);  Get final URL for file being opened asynchronously. ;  ; static Long64_t GetFileBytesRead ();  Static function returning the total number of bytes read from all files. ;  ; static Long64_t GetFileBytesWritten ();  Static function returning the total number of bytes written to all files. ;  ; static Long64_t GetFileCounter ();  ; static Int_t GetFileReadCalls ();  Static function returning the total number of read calls from all files. ;  ; static Bool_t GetOnlyStaged ();  Returns staged only flag. ;  ; static UInt_t GetOpenTimeout ();  Returns open timeout (in ms). ;  ; static Int_t GetReadaheadSize ();  Static function returning the readahead buffer size. ;  ; static Bool_t GetReadStreamerInfo ();  If the streamerinfos are to be read at file opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:28408,Performance,cache,cacheDir,28408,"nction returning the total number of read calls from all files. ;  ; static Bool_t GetOnlyStaged ();  Returns staged only flag. ;  ; static UInt_t GetOpenTimeout ();  Returns open timeout (in ms). ;  ; static Int_t GetReadaheadSize ();  Static function returning the readahead buffer size. ;  ; static Bool_t GetReadStreamerInfo ();  If the streamerinfos are to be read at file opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public M",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:28526,Performance,cache,cache,28526,"nction returning the total number of read calls from all files. ;  ; static Bool_t GetOnlyStaged ();  Returns staged only flag. ;  ; static UInt_t GetOpenTimeout ();  Returns open timeout (in ms). ;  ; static Int_t GetReadaheadSize ();  Static function returning the readahead buffer size. ;  ; static Bool_t GetReadStreamerInfo ();  If the streamerinfos are to be read at file opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public M",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:29184,Performance,cache,cache,29184,"=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecy",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:35504,Performance,cache,cache,35504,"s, UInt_t mode) override;  Open a file in 'MemFile'. ;  ; Int_t SysRead (Int_t fd, void *buf, Int_t len) override;  Read specified number of bytes from current offset into the buffer. ;  ; Int_t SysReadImpl (Int_t fd, void *buf, Long64_t len);  Read specified number of bytes from current offset into the buffer. ;  ; Long64_t SysSeek (Int_t fd, Long64_t offset, Int_t whence) override;  Seek to a specified position in the file. ;  ; Int_t SysStat (Int_t fd, Long_t *id, Long64_t *size, Long_t *flags, Long_t *modtime) override;  Perform a stat on the file; see TFile::SysStat(). ;  ; Int_t SysSync (Int_t fd) override;  Sync remaining data to disk. ;  ; Int_t SysWrite (Int_t fd, const void *buf, Int_t len) override;  Write a buffer into the file. ;  ; Int_t SysWriteImpl (Int_t fd, const void *buf, Long64_t len);  Write a buffer into the file. ;  ;  Protected Member Functions inherited from TFile; virtual Long64_t DirCreateEntry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; virtual void Init (Bool_t create);  Initialize a TFile object. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ;  ; Int_t MakeProjectParProofInf (const char *packname, const char *proofinfdir);  Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCache (char *buf, Int_t len);  Read buffer via cache. ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise direc",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:36126,Performance,cache,cache,36126,"e a buffer into the file. ;  ; Int_t SysWriteImpl (Int_t fd, const void *buf, Long64_t len);  Write a buffer into the file. ;  ;  Protected Member Functions inherited from TFile; virtual Long64_t DirCreateEntry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; virtual void Init (Bool_t create);  Initialize a TFile object. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ;  ; Int_t MakeProjectParProofInf (const char *packname, const char *proofinfdir);  Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCache (char *buf, Int_t len);  Read buffer via cache. ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.) ;  ; void InitDirectoryFile (TClass *cl=nullptr);  Initialize the key associated with this directory (and the related data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for direct",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:36212,Performance,cache,cache,36212,"64_t len);  Write a buffer into the file. ;  ;  Protected Member Functions inherited from TFile; virtual Long64_t DirCreateEntry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; virtual void Init (Bool_t create);  Initialize a TFile object. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ;  ; Int_t MakeProjectParProofInf (const char *packname, const char *proofinfdir);  Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCache (char *buf, Int_t len);  Read buffer via cache. ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.) ;  ; void InitDirectoryFile (TClass *cl=nullptr);  Initialize the key associated with this directory (and the related data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TCo",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:39378,Performance,cache,cache,39378,"memory region ;  ; Long64_t fSize {0};  Total file size (sum of the size of the chunks) ;  ; Long64_t fSysOffset {0};  Seek offset in file. ;  ;  Protected Attributes inherited from TFile; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this file ;  ; Long64_t fArchiveOffset {0};  !Offset at which file starts in archive ;  ; TFileOpenHandle * fAsyncHandle {nullptr};  !For proper automatic cleanup ;  ; EAsyncOpenStatus fAsyncOpenStatus {kAOSNotAsync};  !Status of an asynchronous open request ;  ; Long64_t fBEGIN {0};  First used byte in file. ;  ; Long64_t fBytesRead {0};  Number of bytes read from this file. ;  ; Long64_t fBytesReadExtra {0};  Number of extra bytes (overhead) read by the readahead buffer. ;  ; Long64_t fBytesWrite {0};  Number of bytes written to this file. ;  ; TFileCacheRead * fCacheRead {nullptr};  !Pointer to the read cache (if any) ;  ; TMap * fCacheReadMap {nullptr};  !Pointer to the read cache (if any) ;  ; TFileCacheWrite * fCacheWrite {nullptr};  !Pointer to the write cache (if any) ;  ; TArrayC * fClassIndex {nullptr};  !Index of TStreamerInfo classes written to this file ;  ; Int_t fCompress {0};  Compression level and algorithm. ;  ; Int_t fD {-1};  File descriptor. ;  ; Long64_t fEND {0};  Last used byte in file. ;  ; TList * fFree {nullptr};  Free segments linked list table. ;  ; bool fGlobalRegistration = true;  ! if true, bypass use of global lists ;  ; TList * fInfoCache {nullptr};  !Cached list of the streamer infos in this file ;  ; Bool_t fInitDone {kFALSE};  !True if the file has been initialized ;  ; Bool_t fIsArchive {kFALSE};  !True if this is a pure archive file ;  ; Bool_t fIsPcmFile {kFALSE};  !True if the file is a ROOT pcm file. ;  ; Bool_t fIsRootFile {kTRUE};  !True is this is a ROOT file, raw file otherwise ;  ; Bool_t fMustFlush {kTRUE};  !True if the file buffers must be flushed ;  ; Int_t fNbytesFree {0};  Number of bytes for free segments structure. ;  ; Int_t fNbytesInfo {0};  Number of bytes ",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:39452,Performance,cache,cache,39452,"memory region ;  ; Long64_t fSize {0};  Total file size (sum of the size of the chunks) ;  ; Long64_t fSysOffset {0};  Seek offset in file. ;  ;  Protected Attributes inherited from TFile; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this file ;  ; Long64_t fArchiveOffset {0};  !Offset at which file starts in archive ;  ; TFileOpenHandle * fAsyncHandle {nullptr};  !For proper automatic cleanup ;  ; EAsyncOpenStatus fAsyncOpenStatus {kAOSNotAsync};  !Status of an asynchronous open request ;  ; Long64_t fBEGIN {0};  First used byte in file. ;  ; Long64_t fBytesRead {0};  Number of bytes read from this file. ;  ; Long64_t fBytesReadExtra {0};  Number of extra bytes (overhead) read by the readahead buffer. ;  ; Long64_t fBytesWrite {0};  Number of bytes written to this file. ;  ; TFileCacheRead * fCacheRead {nullptr};  !Pointer to the read cache (if any) ;  ; TMap * fCacheReadMap {nullptr};  !Pointer to the read cache (if any) ;  ; TFileCacheWrite * fCacheWrite {nullptr};  !Pointer to the write cache (if any) ;  ; TArrayC * fClassIndex {nullptr};  !Index of TStreamerInfo classes written to this file ;  ; Int_t fCompress {0};  Compression level and algorithm. ;  ; Int_t fD {-1};  File descriptor. ;  ; Long64_t fEND {0};  Last used byte in file. ;  ; TList * fFree {nullptr};  Free segments linked list table. ;  ; bool fGlobalRegistration = true;  ! if true, bypass use of global lists ;  ; TList * fInfoCache {nullptr};  !Cached list of the streamer infos in this file ;  ; Bool_t fInitDone {kFALSE};  !True if the file has been initialized ;  ; Bool_t fIsArchive {kFALSE};  !True if this is a pure archive file ;  ; Bool_t fIsPcmFile {kFALSE};  !True if the file is a ROOT pcm file. ;  ; Bool_t fIsRootFile {kTRUE};  !True is this is a ROOT file, raw file otherwise ;  ; Bool_t fMustFlush {kTRUE};  !True if the file buffers must be flushed ;  ; Int_t fNbytesFree {0};  Number of bytes for free segments structure. ;  ; Int_t fNbytesInfo {0};  Number of bytes ",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:39536,Performance,cache,cache,39536,"memory region ;  ; Long64_t fSize {0};  Total file size (sum of the size of the chunks) ;  ; Long64_t fSysOffset {0};  Seek offset in file. ;  ;  Protected Attributes inherited from TFile; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this file ;  ; Long64_t fArchiveOffset {0};  !Offset at which file starts in archive ;  ; TFileOpenHandle * fAsyncHandle {nullptr};  !For proper automatic cleanup ;  ; EAsyncOpenStatus fAsyncOpenStatus {kAOSNotAsync};  !Status of an asynchronous open request ;  ; Long64_t fBEGIN {0};  First used byte in file. ;  ; Long64_t fBytesRead {0};  Number of bytes read from this file. ;  ; Long64_t fBytesReadExtra {0};  Number of extra bytes (overhead) read by the readahead buffer. ;  ; Long64_t fBytesWrite {0};  Number of bytes written to this file. ;  ; TFileCacheRead * fCacheRead {nullptr};  !Pointer to the read cache (if any) ;  ; TMap * fCacheReadMap {nullptr};  !Pointer to the read cache (if any) ;  ; TFileCacheWrite * fCacheWrite {nullptr};  !Pointer to the write cache (if any) ;  ; TArrayC * fClassIndex {nullptr};  !Index of TStreamerInfo classes written to this file ;  ; Int_t fCompress {0};  Compression level and algorithm. ;  ; Int_t fD {-1};  File descriptor. ;  ; Long64_t fEND {0};  Last used byte in file. ;  ; TList * fFree {nullptr};  Free segments linked list table. ;  ; bool fGlobalRegistration = true;  ! if true, bypass use of global lists ;  ; TList * fInfoCache {nullptr};  !Cached list of the streamer infos in this file ;  ; Bool_t fInitDone {kFALSE};  !True if the file has been initialized ;  ; Bool_t fIsArchive {kFALSE};  !True if this is a pure archive file ;  ; Bool_t fIsPcmFile {kFALSE};  !True if the file is a ROOT pcm file. ;  ; Bool_t fIsRootFile {kTRUE};  !True is this is a ROOT file, raw file otherwise ;  ; Bool_t fMustFlush {kTRUE};  !True if the file buffers must be flushed ;  ; Int_t fNbytesFree {0};  Number of bytes for free segments structure. ;  ; Int_t fNbytesInfo {0};  Number of bytes ",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:40760,Performance,cache,cache,40760,"; TList * fFree {nullptr};  Free segments linked list table. ;  ; bool fGlobalRegistration = true;  ! if true, bypass use of global lists ;  ; TList * fInfoCache {nullptr};  !Cached list of the streamer infos in this file ;  ; Bool_t fInitDone {kFALSE};  !True if the file has been initialized ;  ; Bool_t fIsArchive {kFALSE};  !True if this is a pure archive file ;  ; Bool_t fIsPcmFile {kFALSE};  !True if the file is a ROOT pcm file. ;  ; Bool_t fIsRootFile {kTRUE};  !True is this is a ROOT file, raw file otherwise ;  ; Bool_t fMustFlush {kTRUE};  !True if the file buffers must be flushed ;  ; Int_t fNbytesFree {0};  Number of bytes for free segments structure. ;  ; Int_t fNbytesInfo {0};  Number of bytes for StreamerInfo record. ;  ; Bool_t fNoAnchorInName {kFALSE};  !True if we don't want to force the anchor to be appended to the file name ;  ; Int_t fNProcessIDs {0};  Number of TProcessID written to this file. ;  ; Long64_t fOffset {0};  !Seek offset cache ;  ; TList * fOpenPhases {nullptr};  !Time info about open phases ;  ; TString fOption;  File options. ;  ; TObjArray * fProcessIDs {nullptr};  !Array of pointers to TProcessIDs ;  ; Int_t fReadCalls {0};  Number of read calls ( not counting the cache calls ) ;  ; TString fRealName;  Effective real file name (not original url) ;  ; Long64_t fSeekFree {0};  Location on disk of free segments structure. ;  ; Long64_t fSeekInfo {0};  Location on disk of StreamerInfo record. ;  ; Double_t fSum2Buffer {0};  Sum of squares of buffer sizes of objects written so far. ;  ; Double_t fSumBuffer {0};  Sum of buffer sizes of objects written so far. ;  ; Char_t fUnits {0};  Number of bytes for file pointers. ;  ; TUrl fUrl;  !URL of file ;  ; Int_t fVersion {0};  File format version. ;  ; std::mutex fWriteMutex;  !Lock for writing baskets / keys into the file. ;  ; Int_t fWritten {0};  Number of objects written so far. ;  ;  Protected Attributes inherited from TDirectoryFile; Int_t fBufferSize {0};  Default buffer size to crea",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:41012,Performance,cache,cache,41012,"; Bool_t fInitDone {kFALSE};  !True if the file has been initialized ;  ; Bool_t fIsArchive {kFALSE};  !True if this is a pure archive file ;  ; Bool_t fIsPcmFile {kFALSE};  !True if the file is a ROOT pcm file. ;  ; Bool_t fIsRootFile {kTRUE};  !True is this is a ROOT file, raw file otherwise ;  ; Bool_t fMustFlush {kTRUE};  !True if the file buffers must be flushed ;  ; Int_t fNbytesFree {0};  Number of bytes for free segments structure. ;  ; Int_t fNbytesInfo {0};  Number of bytes for StreamerInfo record. ;  ; Bool_t fNoAnchorInName {kFALSE};  !True if we don't want to force the anchor to be appended to the file name ;  ; Int_t fNProcessIDs {0};  Number of TProcessID written to this file. ;  ; Long64_t fOffset {0};  !Seek offset cache ;  ; TList * fOpenPhases {nullptr};  !Time info about open phases ;  ; TString fOption;  File options. ;  ; TObjArray * fProcessIDs {nullptr};  !Array of pointers to TProcessIDs ;  ; Int_t fReadCalls {0};  Number of read calls ( not counting the cache calls ) ;  ; TString fRealName;  Effective real file name (not original url) ;  ; Long64_t fSeekFree {0};  Location on disk of free segments structure. ;  ; Long64_t fSeekInfo {0};  Location on disk of StreamerInfo record. ;  ; Double_t fSum2Buffer {0};  Sum of squares of buffer sizes of objects written so far. ;  ; Double_t fSumBuffer {0};  Sum of buffer sizes of objects written so far. ;  ; Char_t fUnits {0};  Number of bytes for file pointers. ;  ; TUrl fUrl;  !URL of file ;  ; Int_t fVersion {0};  File format version. ;  ; std::mutex fWriteMutex;  !Lock for writing baskets / keys into the file. ;  ; Int_t fWritten {0};  Number of objects written so far. ;  ;  Protected Attributes inherited from TDirectoryFile; Int_t fBufferSize {0};  Default buffer size to create new TKeys. ;  ; TDatime fDatimeC;  Date and time when directory is created. ;  ; TDatime fDatimeM;  Date and time of last modification. ;  ; TFile * fFile {nullptr};  Pointer to current file in memory. ;  ; TList * fKeys {n",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:43647,Performance,cache,cache,43647,"ath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from TMemFile; static constexpr Long64_t fgDefaultBlockSize = 2 * 1024 * 1024;  ;  Static Protected Attributes inherited from TFile; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 256000;  Readahead buffer size. ;  ; static std::atomic< Int_t > fgReadCalls {0};  Number of bytes read from all TFile objects. ;  ; static Bool_t fgReadInfo = kTRUE;  if true (default) ReadStreamerInfo is called when opening a file ;  ; static ROOT::Internal::RConcurrentHashColl fgTsSIHashes;  !TS Set of hashes built from read streamer infos ;  ;  Static Protected Attributes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't ",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:43677,Performance,cache,cached,43677,"ath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from TMemFile; static constexpr Long64_t fgDefaultBlockSize = 2 * 1024 * 1024;  ;  Static Protected Attributes inherited from TFile; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 256000;  Readahead buffer size. ;  ; static std::atomic< Int_t > fgReadCalls {0};  Number of bytes read from all TFile objects. ;  ; static Bool_t fgReadInfo = kTRUE;  if true (default) ReadStreamerInfo is called when opening a file ;  ; static ROOT::Internal::RConcurrentHashColl fgTsSIHashes;  !TS Set of hashes built from read streamer infos ;  ;  Static Protected Attributes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't ",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:7944,Safety,recover,recover,7944,"ption_t *opt);  List the contents of a file sequentially. ;  ; virtual Bool_t Matches (const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtua",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:27629,Safety,timeout,timeout,27629,"; static const char * DeclFileName ();  ; static EAsyncOpenStatus GetAsyncOpenStatus (const char *name);  Get status of the async open request related to 'name'. ;  ; static EAsyncOpenStatus GetAsyncOpenStatus (TFileOpenHandle *handle);  Get status of the async open request related to 'handle'. ;  ; static const char * GetCacheFileDir ();  Get the directory where to locally stage/cache remote files. ;  ; static const TUrl * GetEndpointUrl (const char *name);  Get final URL for file being opened asynchronously. ;  ; static Long64_t GetFileBytesRead ();  Static function returning the total number of bytes read from all files. ;  ; static Long64_t GetFileBytesWritten ();  Static function returning the total number of bytes written to all files. ;  ; static Long64_t GetFileCounter ();  ; static Int_t GetFileReadCalls ();  Static function returning the total number of read calls from all files. ;  ; static Bool_t GetOnlyStaged ();  Returns staged only flag. ;  ; static UInt_t GetOpenTimeout ();  Returns open timeout (in ms). ;  ; static Int_t GetReadaheadSize ();  Static function returning the readahead buffer size. ;  ; static Bool_t GetReadStreamerInfo ();  If the streamerinfos are to be read at file opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static v",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:28826,Safety,timeout,timeout,28826,"e opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; s",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:28847,Safety,timeout,timeout,28847,"e opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; s",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:28886,Safety,timeout,timeout,28886," Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:32136,Safety,timeout,timeout,32136,"ferMergerFile (const TBufferMergerFile &);  TBufferMergerFile has no copy constructor. ;  ;  TBufferMergerFile (TBufferMerger &m);  Constructor. ;  ; TBufferMergerFile & operator= (const TBufferMergerFile &);  TBufferMergerFile has no copy operator. ;  . Private Attributes; TBufferMerger & fMerger;  . Friends; class TBufferMerger;  . Additional Inherited Members;  Public Types inherited from TMemFile; using ExternalDataPtr_t = std::shared_ptr< const std::vector< char > >;  ;  Public Types inherited from TFile; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ; ",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:6853,Security,access,access,6853,"f, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; virtual Long64_t GetSeekFree () const;  ; virtual Long64_t GetSeekInfo () const;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos used in this file. ;  ; virtual TList * GetStreamerInfoList () final;  Read the list of TStreamerInfo objects written to this file. ;  ; Int_t GetVersion () const;  ; virtual void IncrementProcessIDs ();  ; virtual Bool_t IsArchive () const;  ; Bool_t IsBinary () const;  ; virtual Bool_t IsOpen () const;  Returns kTRUE in case file is open and kFALSE if file is not open. ;  ; Bool_t IsRaw () const;  ; void ls (Option_t *option="""") const override;  List file contents. ;  ; virtual void MakeFree (Long64_t first, Long64_t last);  Mark unused bytes on the file. ;  ; virtual void MakeProject (const char *dirname, const char *classes=""*"", Option_t *option=""new"");  Generate source code necessary to access the objects stored in the file. ;  ; virtual void Map ();  ; virtual void Map (Option_t *opt);  List the contents of a file sequentially. ;  ; virtual Bool_t Matches (const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:8058,Security,access,access,8058," (const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Long64_t last);  ; virtual void SetOffset (Long64_t offset, ERelativeT",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:19242,Security,hash,hash,19242," std::enable_if_t< std::is_base_of< TObject, T >::value, Int_t > WriteObject (const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0);  Write an object with proper type checking. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you ",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:44470,Security,hash,hashes,44470,"bjects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 256000;  Readahead buffer size. ;  ; static std::atomic< Int_t > fgReadCalls {0};  Number of bytes read from all TFile objects. ;  ; static Bool_t fgReadInfo = kTRUE;  if true (default) ReadStreamerInfo is called when opening a file ;  ; static ROOT::Internal::RConcurrentHashColl fgTsSIHashes;  !TS Set of hashes built from read streamer infos ;  ;  Static Protected Attributes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't support = ATOMIC_FLAG_INIT;. ;  . #include <ROOT/TBufferMerger.hxx>. Inheritance diagram for ROOT::TBufferMergerFile:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TBufferMergerFile() [1/3]. ROOT::TBufferMergerFile::TBufferMergerFile ; (; TBufferMerger & ; m). private . Constructor. ; Can only be called by TBufferMerger. Parameters. mMerger this file is attached to. . Definition at line 18 of file TBufferMergerFile.cxx. ◆ TBufferMergerFile() [2/3]. ROOT::TBufferMergerFile::TBufferMergerFile ; (; ). private . TBufferMergerFile has no default constructor. . ◆ TBufferMergerFile() [3/3]. ROOT::TBufferMergerFile::TBufferMergerFile ; (; const TBufferMergerFile & ; ). private . TBufferMergerFile has no copy constructor. . ◆ ~TBufferMergerFile(). ROOT::T",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:5894,Testability,log,logical,5894,"es to prefetch. ;  ; virtual Long64_t GetBytesWritten () const;  Return the total number of bytes written so far to the file. ;  ; TFileCacheRead * GetCacheRead (const TObject *tree=nullptr) const;  Return a pointer to the current read cache. ;  ; TFileCacheWrite * GetCacheWrite () const;  Return a pointer to the current write cache. ;  ; TArrayC * GetClassIndex () const;  ; Int_t GetCompressionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; virtual Long64_t GetSeekFree () const;  ; virtual Long64_t GetSeekInfo () const;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos used in this file. ;  ; virtual TList * GetStreamerInfoList () final;  Read the list of TStreamerInfo objects written to this file. ;  ; Int_t GetVersion () const;  ; virtual void IncrementProcessIDs ();  ; virtual Bool_t IsArchive () const;  ; Bool_t IsBinary () const;  ; virtual Bool_t IsOpen () const;  Returns kTRUE in case file is open and kFALSE if file is not open. ;  ; Bool_t IsRaw () const;  ; void ls (Option_t *option="""") const override;  List file contents. ;  ; virtual void MakeFree (Long64_t first",MatchSource.WIKI,doc/v632/classROOT_1_1TBufferMergerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html
https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html:973,Availability,avail,available,973,". ROOT: ROOT::TExecutorCRTP< SubC > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Types |; Private Member Functions |; List of all members ; ROOT::TExecutorCRTP< SubC > Class Template Reference. ; template<class SubC>; class ROOT::TExecutorCRTP< SubC >This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. . ROOT::TExecutorCRTP<SubC>::Map; The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. The Map function forwards the call to MapImpl, to be implemented by the child classes.; For either signature, func is executed as many times as needed by a pool of n workers, where n typically defaults to the number of available cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included. ROOT::TExecutorCRTP derived classes never delete what they return, they simply forget it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. The ordering of the elements corresponds to the ordering of the arguments. RO",MatchSource.WIKI,doc/v632/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html:394,Integrability,interface,interface,394,". ROOT: ROOT::TExecutorCRTP< SubC > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Types |; Private Member Functions |; List of all members ; ROOT::TExecutorCRTP< SubC > Class Template Reference. ; template<class SubC>; class ROOT::TExecutorCRTP< SubC >This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. . ROOT::TExecutorCRTP<SubC>::Map; The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. The Map function forwards the call to MapImpl, to be implemented by the child classes.; For either signature, func is executed as many times as needed by a pool of n workers, where n typically defaults to the number of available cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included. ROOT::TExecutorCRTP derived classes never delete what they return, they simply forget it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. The ordering of the elements corresponds to the ordering of the arguments. RO",MatchSource.WIKI,doc/v632/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html:1755,Integrability,wrap,wrapped,1755," the collection of arguments args. The Map function forwards the call to MapImpl, to be implemented by the child classes.; For either signature, func is executed as many times as needed by a pool of n workers, where n typically defaults to the number of available cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included. ROOT::TExecutorCRTP derived classes never delete what they return, they simply forget it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. The ordering of the elements corresponds to the ordering of the arguments. ROOT::TExecutorCRTP<SubC>::Reduce; These set of methods combine all elements from a std::vector into a single value. Parameters. redfunca callable object, such as a lambda expression, an std::function, a functor object or a function that takes an std::vector and combines all its elements into a single result. [args]a standard vector. ROOT::TExecutorCRTP<SubC>::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. This function should be independent of the size of the vector returned by Map due to optimization of the number of ch",MatchSource.WIKI,doc/v632/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html:3814,Integrability,interface,interface,3814,"auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::TProcessExecutor pool; auto tenOnes = pool.Map([]() { return 1; }, 10); auto ten = Reduce([](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }, tenOnes); ; Create 10 histograms and merge them into one; root[] ROOT::TThreadExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TExecutorCRTP::ReduceT * Reduce(const std::vector< T * > &mergeObjs)""Reduce"" an std::vector into a single object by using the object's Merge method.Definition TExecutorCRTP.hxx:347; ROOT::TProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel,...Definition TProcessExecutor.hxx:37; ROOT::TProcessExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TProcessExecutor.hxx:262; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TThreadExecutor.hxx:482; v@ vDefinition rootcling_impl.cxx:3687; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. Definition at line 103 of file TExecutorCRTP.hxx. Public Member Functions;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; t",MatchSource.WIKI,doc/v632/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html:4208,Integrability,interface,interface,4208,"cutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TExecutorCRTP::ReduceT * Reduce(const std::vector< T * > &mergeObjs)""Reduce"" an std::vector into a single object by using the object's Merge method.Definition TExecutorCRTP.hxx:347; ROOT::TProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel,...Definition TProcessExecutor.hxx:37; ROOT::TProcessExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TProcessExecutor.hxx:262; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TThreadExecutor.hxx:482; v@ vDefinition rootcling_impl.cxx:3687; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. Definition at line 103 of file TExecutorCRTP.hxx. Public Member Functions;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; template<class F , class INTEGER , class Cond = validMapReturnCond<F, INTEGER>> ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER >",MatchSource.WIKI,doc/v632/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html:13669,Integrability,wrap,wrapping,13669,"11 of file TExecutorCRTP.hxx. ◆ Map() [4/5]. template<class SubC > . template<class F , class T , class Cond > . auto ROOT::TExecutorCRTP< SubC >::Map ; (; F ; func, . std::vector< T > & ; args . ); -> std::vector<InvokeResult_t<F, T>>. Execute a function over the elements of a vector. ; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsVector of elements passed as an argument to func. . ReturnsA vector with the results of the function calls. ; Definition at line 226 of file TExecutorCRTP.hxx. ◆ Map() [5/5]. template<class SubC > . template<class F , class Cond > . auto ROOT::TExecutorCRTP< SubC >::Map ; (; F ; func, . unsigned ; nTimes . ); -> std::vector<InvokeResult_t<F>>. Execute a function without arguments several times. ; Parameters. funcFunction to be executed. ; nTimesNumber of times function should be called. . ReturnsA vector with the results of the function calls. Functions that take arguments can be executed (with fixed arguments) by wrapping them in a lambda or with std::bind. ; Definition at line 185 of file TExecutorCRTP.hxx. ◆ MapImpl() [1/4]. template<class SubC > . template<class F , class T , class Cond = validMapReturnCond<F, T>> . auto ROOT::TExecutorCRTP< SubC >::MapImpl ; (; F ; func, . const std::vector< T > & ; args . ); -> std::vector< InvokeResult_t< F, T > >=delete. privatedelete . Implementation of the Map method, left to the derived classes. . ◆ MapImpl() [2/4]. template<class SubC > . template<class F , class INTEGER , class Cond = validMapReturnCond<F, INTEGER>> . auto ROOT::TExecutorCRTP< SubC >::MapImpl ; (; F ; func, . ROOT::TSeq< INTEGER > ; args . ); -> std::vector< InvokeResult_t< F, INTEGER > >=delete. privatedelete . Implementation of the Map method, left to the derived classes. . ◆ MapImpl() [3/4]. template<class SubC > . template<class F , class T , class Cond = validMapReturnCond<F, T>> . auto ROOT::TExecutorCRTP< SubC >::MapImpl ; (; F ; func, . std::vector< T > & ; arg",MatchSource.WIKI,doc/v632/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html:6063,Modifiability,inherit,inheriting,6063,"e vector. ;  ; template<class F , class INTEGER , class Cond = validMapReturnCond<F, INTEGER>> ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes. ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto Map (F func, std::initializer_list< T > args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an initializer_list. ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto Map (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector. ;  ; template<class F , class Cond = validMapReturnCond<F>> ; auto Map (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times. ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; T * MapReduce (F func, const std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce). ;  ; template<class F , class T , class R , class Cond = validMapReturnCond<F, T>> ; auto MapReduce (F func, const std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ;  ; template<class F , class INTEGER , class R , class Cond = validMapReturnCond<F, INTEGER>> ; auto MapReduce (F func, ROOT::TSeq< INTEGER > args, R redfunc) -> InvokeResult_t< F, INTEGER >;  Execute a function over a sequence of indexes (Map) and accumulate the results into a single value (Reduce). ;  ; template<class F , class T , class R , class Cond = validMapReturnCond<F, T>> ; auto MapReduce (F func, std::initializer_list< T > args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an initializer_list (Map) and accumulate ",MatchSource.WIKI,doc/v632/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html:7232,Modifiability,inherit,inheriting,7232,", class R , class Cond = validMapReturnCond<F, T>> ; auto MapReduce (F func, const std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ;  ; template<class F , class INTEGER , class R , class Cond = validMapReturnCond<F, INTEGER>> ; auto MapReduce (F func, ROOT::TSeq< INTEGER > args, R redfunc) -> InvokeResult_t< F, INTEGER >;  Execute a function over a sequence of indexes (Map) and accumulate the results into a single value (Reduce). ;  ; template<class F , class T , class R , class Cond = validMapReturnCond<F, T>> ; auto MapReduce (F func, std::initializer_list< T > args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce). ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; T * MapReduce (F func, std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of a vector (Map) and merge the objects into a single one (Reduce). ;  ; template<class F , class T , class R , class Cond = validMapReturnCond<F, T>> ; auto MapReduce (F func, std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ;  ; template<class F , class R , class Cond = validMapReturnCond<F>> ; auto MapReduce (F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >;  Execute a function without arguments several times (Map) and accumulate the results into a single value (Reduce). ;  ; TExecutorCRTP & operator= (const TExecutorCRTP &)=delete;  ; template<class T > ; T * Reduce (const std::vector< T * > &mergeObjs);  ""Reduce"" an std::vector into a single object by using the object's Merge method. ;  ; template<class T , class R > ; auto Reduce (const std::vector< T > &objs, R redfunc) -> decltype(redfun",MatchSource.WIKI,doc/v632/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html:15325,Modifiability,inherit,inheriting,15325,"F, INTEGER > >=delete. privatedelete . Implementation of the Map method, left to the derived classes. . ◆ MapImpl() [3/4]. template<class SubC > . template<class F , class T , class Cond = validMapReturnCond<F, T>> . auto ROOT::TExecutorCRTP< SubC >::MapImpl ; (; F ; func, . std::vector< T > & ; args . ); -> std::vector< InvokeResult_t< F, T > >=delete. privatedelete . Implementation of the Map method, left to the derived classes. . ◆ MapImpl() [4/4]. template<class SubC > . template<class F , class Cond = validMapReturnCond<F>> . auto ROOT::TExecutorCRTP< SubC >::MapImpl ; (; F ; func, . unsigned ; nTimes . ); -> std::vector< InvokeResult_t< F > >=delete. privatedelete . Implementation of the Map method, left to the derived classes. . ◆ MapReduce() [1/7]. template<class SubC > . template<class F , class T , class Cond > . T * ROOT::TExecutorCRTP< SubC >::MapReduce ; (; F ; func, . const std::vector< T * > & ; args . ). Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce). ; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsImmutable vector of elements passed as an argument to func. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 336 of file TExecutorCRTP.hxx. ◆ MapReduce() [2/7]. template<class SubC > . template<class F , class T , class R , class Cond > . auto ROOT::TExecutorCRTP< SubC >::MapReduce ; (; F ; func, . const std::vector< T > & ; args, . R ; redfunc . ); -> InvokeResult_t<F, T>. Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsImmutable vector of elements passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func. Must return th",MatchSource.WIKI,doc/v632/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html:18318,Modifiability,inherit,inheriting,18318,"class SubC > . template<class F , class T , class R , class Cond > . auto ROOT::TExecutorCRTP< SubC >::MapReduce ; (; F ; func, . std::initializer_list< T > ; args, . R ; redfunc . ); -> InvokeResult_t<F, T>. Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce). ; Parameters. funcFunction to be executed on the elements of the initializer_list passed as second parameter. ; argsinitializer_list for a vector to apply func on. ; redfuncReduction function to combine the results of the calls to func. Must return the same type as func. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 283 of file TExecutorCRTP.hxx. ◆ MapReduce() [5/7]. template<class SubC > . template<class F , class T , class Cond > . T * ROOT::TExecutorCRTP< SubC >::MapReduce ; (; F ; func, . std::vector< T * > & ; args . ). Execute a function over the TObject-inheriting elements of a vector (Map) and merge the objects into a single one (Reduce). ; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsVector of elements passed as an argument to func. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 324 of file TExecutorCRTP.hxx. ◆ MapReduce() [6/7]. template<class SubC > . template<class F , class T , class R , class Cond > . auto ROOT::TExecutorCRTP< SubC >::MapReduce ; (; F ; func, . std::vector< T > & ; args, . R ; redfunc . ); -> InvokeResult_t<F, T>. Execute a function over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsVector of elements passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func. Must return the same type as func. . ReturnsA value resu",MatchSource.WIKI,doc/v632/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html:2688,Performance,optimiz,optimization,2688,"ed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. The ordering of the elements corresponds to the ordering of the arguments. ROOT::TExecutorCRTP<SubC>::Reduce; These set of methods combine all elements from a std::vector into a single value. Parameters. redfunca callable object, such as a lambda expression, an std::function, a functor object or a function that takes an std::vector and combines all its elements into a single result. [args]a standard vector. ROOT::TExecutorCRTP<SubC>::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. This function should be independent of the size of the vector returned by Map due to optimization of the number of chunks.; Examples:; Generate 1 ten times and sum those tens; root[] ROOT::TProcessExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::TProcessExecutor pool; auto tenOnes = pool.Map([]() { return 1; }, 10); auto ten = Reduce([](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }, tenOnes); ; Create 10 histograms and merge them into one; root[] ROOT::TThreadExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TExecutorCRTP::ReduceT * Reduce(const std::vector< T * > &mergeObjs)""Reduce"" an std",MatchSource.WIKI,doc/v632/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html:1264,Usability,simpl,simply,1264,"|; List of all members ; ROOT::TExecutorCRTP< SubC > Class Template Reference. ; template<class SubC>; class ROOT::TExecutorCRTP< SubC >This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. . ROOT::TExecutorCRTP<SubC>::Map; The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. The Map function forwards the call to MapImpl, to be implemented by the child classes.; For either signature, func is executed as many times as needed by a pool of n workers, where n typically defaults to the number of available cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included. ROOT::TExecutorCRTP derived classes never delete what they return, they simply forget it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. The ordering of the elements corresponds to the ordering of the arguments. ROOT::TExecutorCRTP<SubC>::Reduce; These set of methods combine all elements from a std::vector into a single value. Parameters. redfunca callable object, such as a lambda expression, an std::function, a functor object or a function that",MatchSource.WIKI,doc/v632/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html:3807,Usability,simpl,simple,3807,"auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::TProcessExecutor pool; auto tenOnes = pool.Map([]() { return 1; }, 10); auto ten = Reduce([](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }, tenOnes); ; Create 10 histograms and merge them into one; root[] ROOT::TThreadExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TExecutorCRTP::ReduceT * Reduce(const std::vector< T * > &mergeObjs)""Reduce"" an std::vector into a single object by using the object's Merge method.Definition TExecutorCRTP.hxx:347; ROOT::TProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel,...Definition TProcessExecutor.hxx:37; ROOT::TProcessExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TProcessExecutor.hxx:262; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TThreadExecutor.hxx:482; v@ vDefinition rootcling_impl.cxx:3687; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. Definition at line 103 of file TExecutorCRTP.hxx. Public Member Functions;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; t",MatchSource.WIKI,doc/v632/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html:4201,Usability,simpl,simple,4201,"cutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TExecutorCRTP::ReduceT * Reduce(const std::vector< T * > &mergeObjs)""Reduce"" an std::vector into a single object by using the object's Merge method.Definition TExecutorCRTP.hxx:347; ROOT::TProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel,...Definition TProcessExecutor.hxx:37; ROOT::TProcessExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TProcessExecutor.hxx:262; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TThreadExecutor.hxx:482; v@ vDefinition rootcling_impl.cxx:3687; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. Definition at line 103 of file TExecutorCRTP.hxx. Public Member Functions;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; template<class F , class INTEGER , class Cond = validMapReturnCond<F, INTEGER>> ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER >",MatchSource.WIKI,doc/v632/classROOT_1_1TExecutorCRTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html
https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:5117,Availability,error,error,5117," Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 69 of file TIOFeatures.cxx. ◆ GetFeatures(). UChar_t TIOFeatures::GetFeatures ; (; ); const. private . Definition at line 250 of file TIOFeatures.cxx. ◆ Print(). void TIOFeatures::Print ; (; ); const. Print a human-readable representation of the TIOFeatures to stdout. ; Prints a string with the names of all enabled IO features. ; Definition at line 197 of file TIOFeatures.cxx. ◆ Set() [1/4]. bool TIOFeatures::Set ; (; const std::string & ; value). Given a IO feature string, set the corresponding feature. ; Parameters. [in]valueFeature name to test. This allows one to set a feature given a specific string from the TBasket::EIOBits enum.; NOTE this function is quite slow and users are strongly encouraged to use the type-safe Set version instead. This has been added for better CLI interfaces.; Returns true only if a new feature was set; otherwise emits an error message and returns false. ; Definition at line 172 of file TIOFeatures.cxx. ◆ Set() [2/4]. bool TIOFeatures::Set ; (; EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 139 of file TIOFeatures.cxx. ◆ Set() [3/4]. bool TIOFeatures::Set ; (; Experimental::EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 125 of file TIOFeatures.cxx. ◆ Set() [4/4]. void ROOT::TIOFeatur",MatchSource.WIKI,doc/v632/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html
https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:3412,Integrability,message,message,3412,iven feature is set. ;  ; bool Test (Experimental::EIOUnsupportedFeatures bits) const;  . Static Public Attributes; static constexpr int kIOFeatureCount = 1;  . Private Member Functions;  TIOFeatures (UChar_t IOBits);  ; UChar_t GetFeatures () const;  ; void Set (UChar_t newBits);  . Private Attributes; UChar_t fIOBits {0};  . Friends; class ::TBasket;  ; class ::TBranch;  ; class ::TTree;  . #include <ROOT/TIOFeatures.hxx>; Constructor & Destructor Documentation. ◆ TIOFeatures() [1/2]. ROOT::TIOFeatures::TIOFeatures ; (; ). inline . Definition at line 75 of file TIOFeatures.hxx. ◆ TIOFeatures() [2/2]. ROOT::TIOFeatures::TIOFeatures ; (; UChar_t ; IOBits). inlineprivate . Definition at line 96 of file TIOFeatures.hxx. Member Function Documentation. ◆ Clear() [1/3]. void TIOFeatures::Clear ; (; EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 80 of file TIOFeatures.cxx. ◆ Clear() [2/3]. void TIOFeatures::Clear ; (; Experimental::EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 58 of file TIOFeatures.cxx. ◆ Clear() [3/3]. void TIOFeatures::Clear ; (; Experimental::EIOUnsupportedFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 69 of file TIOFeatures.cxx. ◆ GetFeatures(). UChar_t TIOFeatures::GetFeatures ; (; ); const. private . Definition at line 250 of file TIOFeatures.cxx. ◆ Print(). ,MatchSource.WIKI,doc/v632/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html
https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:3782,Integrability,message,message,3782,"nch;  ; class ::TTree;  . #include <ROOT/TIOFeatures.hxx>; Constructor & Destructor Documentation. ◆ TIOFeatures() [1/2]. ROOT::TIOFeatures::TIOFeatures ; (; ). inline . Definition at line 75 of file TIOFeatures.hxx. ◆ TIOFeatures() [2/2]. ROOT::TIOFeatures::TIOFeatures ; (; UChar_t ; IOBits). inlineprivate . Definition at line 96 of file TIOFeatures.hxx. Member Function Documentation. ◆ Clear() [1/3]. void TIOFeatures::Clear ; (; EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 80 of file TIOFeatures.cxx. ◆ Clear() [2/3]. void TIOFeatures::Clear ; (; Experimental::EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 58 of file TIOFeatures.cxx. ◆ Clear() [3/3]. void TIOFeatures::Clear ; (; Experimental::EIOUnsupportedFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 69 of file TIOFeatures.cxx. ◆ GetFeatures(). UChar_t TIOFeatures::GetFeatures ; (; ); const. private . Definition at line 250 of file TIOFeatures.cxx. ◆ Print(). void TIOFeatures::Print ; (; ); const. Print a human-readable representation of the TIOFeatures to stdout. ; Prints a string with the names of all enabled IO features. ; Definition at line 197 of file TIOFeatures.cxx. ◆ Set() [1/4]. bool TIOFeatures::Set ; (; const std::string & ; value). Given a IO feature string, set the corresponding feature. ; Parameters. [in]valu",MatchSource.WIKI,doc/v632/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html
https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:4163,Integrability,message,message,4163,"tation. ◆ Clear() [1/3]. void TIOFeatures::Clear ; (; EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 80 of file TIOFeatures.cxx. ◆ Clear() [2/3]. void TIOFeatures::Clear ; (; Experimental::EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 58 of file TIOFeatures.cxx. ◆ Clear() [3/3]. void TIOFeatures::Clear ; (; Experimental::EIOUnsupportedFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 69 of file TIOFeatures.cxx. ◆ GetFeatures(). UChar_t TIOFeatures::GetFeatures ; (; ); const. private . Definition at line 250 of file TIOFeatures.cxx. ◆ Print(). void TIOFeatures::Print ; (; ); const. Print a human-readable representation of the TIOFeatures to stdout. ; Prints a string with the names of all enabled IO features. ; Definition at line 197 of file TIOFeatures.cxx. ◆ Set() [1/4]. bool TIOFeatures::Set ; (; const std::string & ; value). Given a IO feature string, set the corresponding feature. ; Parameters. [in]valueFeature name to test. This allows one to set a feature given a specific string from the TBasket::EIOBits enum.; NOTE this function is quite slow and users are strongly encouraged to use the type-safe Set version instead. This has been added for better CLI interfaces.; Returns true only if a new feature was set; otherwise emits an error message and returns false. ; Definition at",MatchSource.WIKI,doc/v632/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html
https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:5041,Integrability,interface,interfaces,5041,"m this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 69 of file TIOFeatures.cxx. ◆ GetFeatures(). UChar_t TIOFeatures::GetFeatures ; (; ); const. private . Definition at line 250 of file TIOFeatures.cxx. ◆ Print(). void TIOFeatures::Print ; (; ); const. Print a human-readable representation of the TIOFeatures to stdout. ; Prints a string with the names of all enabled IO features. ; Definition at line 197 of file TIOFeatures.cxx. ◆ Set() [1/4]. bool TIOFeatures::Set ; (; const std::string & ; value). Given a IO feature string, set the corresponding feature. ; Parameters. [in]valueFeature name to test. This allows one to set a feature given a specific string from the TBasket::EIOBits enum.; NOTE this function is quite slow and users are strongly encouraged to use the type-safe Set version instead. This has been added for better CLI interfaces.; Returns true only if a new feature was set; otherwise emits an error message and returns false. ; Definition at line 172 of file TIOFeatures.cxx. ◆ Set() [2/4]. bool TIOFeatures::Set ; (; EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 139 of file TIOFeatures.cxx. ◆ Set() [3/4]. bool TIOFeatures::Set ; (; Experimental::EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition ",MatchSource.WIKI,doc/v632/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html
https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:5123,Integrability,message,message,5123," Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 69 of file TIOFeatures.cxx. ◆ GetFeatures(). UChar_t TIOFeatures::GetFeatures ; (; ); const. private . Definition at line 250 of file TIOFeatures.cxx. ◆ Print(). void TIOFeatures::Print ; (; ); const. Print a human-readable representation of the TIOFeatures to stdout. ; Prints a string with the names of all enabled IO features. ; Definition at line 197 of file TIOFeatures.cxx. ◆ Set() [1/4]. bool TIOFeatures::Set ; (; const std::string & ; value). Given a IO feature string, set the corresponding feature. ; Parameters. [in]valueFeature name to test. This allows one to set a feature given a specific string from the TBasket::EIOBits enum.; NOTE this function is quite slow and users are strongly encouraged to use the type-safe Set version instead. This has been added for better CLI interfaces.; Returns true only if a new feature was set; otherwise emits an error message and returns false. ; Definition at line 172 of file TIOFeatures.cxx. ◆ Set() [2/4]. bool TIOFeatures::Set ; (; EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 139 of file TIOFeatures.cxx. ◆ Set() [3/4]. bool TIOFeatures::Set ; (; Experimental::EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 125 of file TIOFeatures.cxx. ◆ Set() [4/4]. void ROOT::TIOFeatur",MatchSource.WIKI,doc/v632/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html
https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:5413,Integrability,message,message,5413,"d TIOFeatures::Print ; (; ); const. Print a human-readable representation of the TIOFeatures to stdout. ; Prints a string with the names of all enabled IO features. ; Definition at line 197 of file TIOFeatures.cxx. ◆ Set() [1/4]. bool TIOFeatures::Set ; (; const std::string & ; value). Given a IO feature string, set the corresponding feature. ; Parameters. [in]valueFeature name to test. This allows one to set a feature given a specific string from the TBasket::EIOBits enum.; NOTE this function is quite slow and users are strongly encouraged to use the type-safe Set version instead. This has been added for better CLI interfaces.; Returns true only if a new feature was set; otherwise emits an error message and returns false. ; Definition at line 172 of file TIOFeatures.cxx. ◆ Set() [2/4]. bool TIOFeatures::Set ; (; EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 139 of file TIOFeatures.cxx. ◆ Set() [3/4]. bool TIOFeatures::Set ; (; Experimental::EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 125 of file TIOFeatures.cxx. ◆ Set() [4/4]. void ROOT::TIOFeatures::Set ; (; UChar_t ; newBits). inlineprivate . Definition at line 98 of file TIOFeatures.hxx. ◆ Test() [1/3]. bool TIOFeatures::Test ; (; EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this",MatchSource.WIKI,doc/v632/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html
https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:5853,Integrability,message,message,5853,"string from the TBasket::EIOBits enum.; NOTE this function is quite slow and users are strongly encouraged to use the type-safe Set version instead. This has been added for better CLI interfaces.; Returns true only if a new feature was set; otherwise emits an error message and returns false. ; Definition at line 172 of file TIOFeatures.cxx. ◆ Set() [2/4]. bool TIOFeatures::Set ; (; EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 139 of file TIOFeatures.cxx. ◆ Set() [3/4]. bool TIOFeatures::Set ; (; Experimental::EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 125 of file TIOFeatures.cxx. ◆ Set() [4/4]. void ROOT::TIOFeatures::Set ; (; UChar_t ; newBits). inlineprivate . Definition at line 98 of file TIOFeatures.hxx. ◆ Test() [1/3]. bool TIOFeatures::Test ; (; EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this object and supported by this version of ROOT. ; Definition at line 239 of file TIOFeatures.cxx. ◆ Test() [2/3]. bool TIOFeatures::Test ; (; Experimental::EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this object and supported by this version of ROOT. ; Definition at line 228 of file TIOFeatures.cxx. ◆ Test() [3",MatchSource.WIKI,doc/v632/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html
https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:4980,Safety,safe,safe,4980,"imental::EIOUnsupportedFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 69 of file TIOFeatures.cxx. ◆ GetFeatures(). UChar_t TIOFeatures::GetFeatures ; (; ); const. private . Definition at line 250 of file TIOFeatures.cxx. ◆ Print(). void TIOFeatures::Print ; (; ); const. Print a human-readable representation of the TIOFeatures to stdout. ; Prints a string with the names of all enabled IO features. ; Definition at line 197 of file TIOFeatures.cxx. ◆ Set() [1/4]. bool TIOFeatures::Set ; (; const std::string & ; value). Given a IO feature string, set the corresponding feature. ; Parameters. [in]valueFeature name to test. This allows one to set a feature given a specific string from the TBasket::EIOBits enum.; NOTE this function is quite slow and users are strongly encouraged to use the type-safe Set version instead. This has been added for better CLI interfaces.; Returns true only if a new feature was set; otherwise emits an error message and returns false. ; Definition at line 172 of file TIOFeatures.cxx. ◆ Set() [2/4]. bool TIOFeatures::Set ; (; EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 139 of file TIOFeatures.cxx. ◆ Set() [3/4]. bool TIOFeatures::Set ; (; Experimental::EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported ",MatchSource.WIKI,doc/v632/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html
https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:459,Security,access,access,459,". ROOT: ROOT::TIOFeatures Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::TIOFeatures Class ReferenceTree Library. ; TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. ; This class allows access to experimental and non-default features.; When one of these features are activated, forward compatibility breaks may occur. That is, older versions of ROOT may not be able to read files written by this version of ROOT that have enabled these non-default features.; To utilize TIOFeatures, create the object, set the desired feature flags, then attach it to a TTree. All subsequently created branches (and their baskets) will be serialized using those particular features.; Example usage: ROOT::TIOFeatures features;; features.Set(ROOT::Experimental::EIOFeatures::kGenerateOffsetMap);; ttree_ref.SetIOFeatures(features);; ROOT::TIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TT...Definition TIOFeatures.hxx:69; ROOT::TIOFeatures::Setbool Set(EIOFeatures bits)Set a specific IO feature.Definition TIOFeatures.cxx:139; ROOT::Experimental::EIOFeatures::kGenerateOffsetMap@ kGenerateOffsetMap; The method TTree::SetIOFeatures creates a copy of the feature set; subsequent changes to the TIOFeatures object do not propagate to the TTree. ; Definition at line 69 of file TIOFeatures.hxx. Public Member Functions;  TIOFeatures ();  ; void Clear (EIOFeatures bits);  Clear a specific IO feature from this set. ;  ; void Clear (Experimental::EIOFeatures bits);  Clear a specific IO feature from this set. ;  ; void Clear (Experimental::EIOUnsupportedFeatures bits);  Clear a specific IO feature from this set. ;  ; void Print () const;  Print a human-readable representation of the",MatchSource.WIKI,doc/v632/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html
https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:4801,Testability,test,test,4801,"if the IO feature is not supported by this version of ROOT. ; Definition at line 58 of file TIOFeatures.cxx. ◆ Clear() [3/3]. void TIOFeatures::Clear ; (; Experimental::EIOUnsupportedFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 69 of file TIOFeatures.cxx. ◆ GetFeatures(). UChar_t TIOFeatures::GetFeatures ; (; ); const. private . Definition at line 250 of file TIOFeatures.cxx. ◆ Print(). void TIOFeatures::Print ; (; ); const. Print a human-readable representation of the TIOFeatures to stdout. ; Prints a string with the names of all enabled IO features. ; Definition at line 197 of file TIOFeatures.cxx. ◆ Set() [1/4]. bool TIOFeatures::Set ; (; const std::string & ; value). Given a IO feature string, set the corresponding feature. ; Parameters. [in]valueFeature name to test. This allows one to set a feature given a specific string from the TBasket::EIOBits enum.; NOTE this function is quite slow and users are strongly encouraged to use the type-safe Set version instead. This has been added for better CLI interfaces.; Returns true only if a new feature was set; otherwise emits an error message and returns false. ; Definition at line 172 of file TIOFeatures.cxx. ◆ Set() [2/4]. bool TIOFeatures::Set ; (; EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 139 of file TIOFeatures.cxx. ◆ Set() [3/4]. bool TIOFeatures::Set ; (; Experimental::EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to ena",MatchSource.WIKI,doc/v632/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html
https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:6366,Testability,test,test,6366,"nable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 139 of file TIOFeatures.cxx. ◆ Set() [3/4]. bool TIOFeatures::Set ; (; Experimental::EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 125 of file TIOFeatures.cxx. ◆ Set() [4/4]. void ROOT::TIOFeatures::Set ; (; UChar_t ; newBits). inlineprivate . Definition at line 98 of file TIOFeatures.hxx. ◆ Test() [1/3]. bool TIOFeatures::Test ; (; EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this object and supported by this version of ROOT. ; Definition at line 239 of file TIOFeatures.cxx. ◆ Test() [2/3]. bool TIOFeatures::Test ; (; Experimental::EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this object and supported by this version of ROOT. ; Definition at line 228 of file TIOFeatures.cxx. ◆ Test() [3/3]. bool ROOT::TIOFeatures::Test ; (; Experimental::EIOUnsupportedFeatures ; bits); const. Friends And Related Symbol Documentation. ◆ ::TBasket. friend class ::TBasket. friend . Definition at line 72 of file TIOFeatures.hxx. ◆ ::TBranch. friend class ::TBranch. friend . Definition at line 71 of file TIOFeatures.hxx. ◆ ::TTree. friend class ::TTree. friend . Definition at line 70 of file TIOFeatures.hxx. Member Data Documentation. ◆ fIOBits. UChar_t ROOT::TIOFeatures::fIOBits {0}. priv",MatchSource.WIKI,doc/v632/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html
https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:6698,Testability,test,test,6698,":EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 125 of file TIOFeatures.cxx. ◆ Set() [4/4]. void ROOT::TIOFeatures::Set ; (; UChar_t ; newBits). inlineprivate . Definition at line 98 of file TIOFeatures.hxx. ◆ Test() [1/3]. bool TIOFeatures::Test ; (; EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this object and supported by this version of ROOT. ; Definition at line 239 of file TIOFeatures.cxx. ◆ Test() [2/3]. bool TIOFeatures::Test ; (; Experimental::EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this object and supported by this version of ROOT. ; Definition at line 228 of file TIOFeatures.cxx. ◆ Test() [3/3]. bool ROOT::TIOFeatures::Test ; (; Experimental::EIOUnsupportedFeatures ; bits); const. Friends And Related Symbol Documentation. ◆ ::TBasket. friend class ::TBasket. friend . Definition at line 72 of file TIOFeatures.hxx. ◆ ::TBranch. friend class ::TBranch. friend . Definition at line 71 of file TIOFeatures.hxx. ◆ ::TTree. friend class ::TTree. friend . Definition at line 70 of file TIOFeatures.hxx. Member Data Documentation. ◆ fIOBits. UChar_t ROOT::TIOFeatures::fIOBits {0}. private . Definition at line 100 of file TIOFeatures.hxx. ◆ kIOFeatureCount. constexpr int ROOT::TIOFeatures::kIOFeatureCount = 1. staticconstexpr . Definition at line 89 of file TIOFeatures.hxx. Libraries for ROOT::TIOFeatures:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/ROOT/TIO",MatchSource.WIKI,doc/v632/classROOT_1_1TIOFeatures.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html
https://root.cern/doc/v632/classROOT_1_1TModuleGenerator.html:4286,Deployability,patch,patches,4286,"ng &fwdDeclnArgsToKeepString, const std::string &payloadCodeWrapped, const std::string &headersClassesMapString, const std::string &extraIncludes, bool hasCxxModule) const;  ; std::ostream & WriteStringPairVec (const StringPairVec_t &vecP, std::ostream &out) const;  ; std::ostream & WriteStringVec (const std::vector< std::string > &vec, std::ostream &out) const;  ; std::ostream & WriteUndefinesArray (std::ostream &out) const;  . Private Attributes; clang::CompilerInstance * fCI;  ; StringPairVec_t fCompD;  ; std::vector< std::string > fCompI;  ; std::vector< std::string > fCompU;  ; std::string fContentName;  ; std::string fDemangledDictionaryName;  ; std::string fDictionaryName;  ; int fErrorCount;  ; std::vector< std::string > fHeaders;  ; bool fInlineInputHeaders;  ; bool fIsInPCH;  ; bool fIsPCH;  ; std::string fLinkDefFile;  ; std::string fModuleDirName;  ; std::string fModuleFileName;  ; std::string fUmbrellaName;  . #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/core/dictgen/res/TModuleGenerator.h>; Member Typedef Documentation. ◆ StringPairVec_t. typedef std::vector<std::pair<std::string, std::string> > ROOT::TModuleGenerator::StringPairVec_t. private . Definition at line 144 of file TModuleGenerator.h. Member Enumeration Documentation. ◆ ESourceFileKind. enum ROOT::TModuleGenerator::ESourceFileKind. EnumeratorkSFKNotC ; kSFKHeader ; kSFKSource ; kSFKLinkdef . Definition at line 38 of file TModuleGenerator.h. Constructor & Destructor Documentation. ◆ TModuleGenerator(). TModuleGenerator::TModuleGenerator ; (; clang::CompilerInstance * ; CI, . bool ; inlineHeader, . const std::string & ; shLibFileName, . bool ; isInPCH . ). Definition at line 45 of file TModuleGenerator.cxx. ◆ ~TModuleGenerator(). TModuleGenerator::~TModuleGenerator ; (; ). Definition at line 91 of file TModuleGenerator.cxx. Member Function Documentation. ◆ ConvertToCppString(). void ROOT::TModuleGenerator::ConvertToCppString ; (; std::string & ; ",MatchSource.WIKI,doc/v632/classROOT_1_1TModuleGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TModuleGenerator.html
https://root.cern/doc/v632/classROOT_1_1TModuleGenerator.html:1367,Modifiability,variab,variables,1367,"nition at line 36 of file TModuleGenerator.h. Public Types; enum  ESourceFileKind { kSFKNotC; , kSFKHeader; , kSFKSource; , kSFKLinkdef; };  . Public Member Functions;  TModuleGenerator (clang::CompilerInstance *CI, bool inlineHeader, const std::string &shLibFileName, bool isInPCH);  ;  ~TModuleGenerator ();  ; const std::string & GetContentName () const;  ; const std::string & GetDemangledDictionaryName () const;  ; const std::string & GetDictionaryName () const;  ; int GetErrorCount () const;  ; const std::vector< std::string > & GetHeaders () const;  ; const std::vector< std::string > & GetIncludePaths () const;  ; const std::string & GetModuleDirName () const;  ; const std::string & GetModuleFileName () const;  ; const std::string & GetUmbrellaName () const;  ; bool IsPCH () const;  ; void ParseArgs (const std::vector< std::string > &args);  Parse -I -D -U headers.h SomethingLinkdef.h. ;  ; void WriteContentHeader (std::ostream &out) const;  Write a header file describing the content of this module through a series of variables inside the namespace ROOT::Dict::[DictionaryName]. ;  ; std::ostream & WritePPDefines (std::ostream &out) const;  Write #ifndef FOO # define FOO=bar #endif ;  ; std::ostream & WritePPUndefines (std::ostream &out) const;  Write #ifdef FOO # undef FOO #endif ;  ; void WriteRegistrationSource (std::ostream &out, const std::string &fwdDeclnArgsToKeepString, const std::string &headersClassesMapString, const std::string &fwdDeclsString, const std::string &extraIncludes, bool hasCxxModule) const;  ; void WriteUmbrellaHeader (std::ostream &out) const;  Write a header file pulling in the content of this module through a series of #defined, #undefs and #includes. ;  . Private Types; typedef std::vector< std::pair< std::string, std::string > > StringPairVec_t;  . Private Member Functions; void ConvertToCppString (std::string &text) const;  ; bool FindHeader (const std::string &hdrName, std::string &hdrFullPath) const;  Return true if the header is f",MatchSource.WIKI,doc/v632/classROOT_1_1TModuleGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TModuleGenerator.html
https://root.cern/doc/v632/classROOT_1_1TModuleGenerator.html:2392,Modifiability,variab,variable,2392,") const;  Write a header file describing the content of this module through a series of variables inside the namespace ROOT::Dict::[DictionaryName]. ;  ; std::ostream & WritePPDefines (std::ostream &out) const;  Write #ifndef FOO # define FOO=bar #endif ;  ; std::ostream & WritePPUndefines (std::ostream &out) const;  Write #ifdef FOO # undef FOO #endif ;  ; void WriteRegistrationSource (std::ostream &out, const std::string &fwdDeclnArgsToKeepString, const std::string &headersClassesMapString, const std::string &fwdDeclsString, const std::string &extraIncludes, bool hasCxxModule) const;  ; void WriteUmbrellaHeader (std::ostream &out) const;  Write a header file pulling in the content of this module through a series of #defined, #undefs and #includes. ;  . Private Types; typedef std::vector< std::pair< std::string, std::string > > StringPairVec_t;  . Private Member Functions; void ConvertToCppString (std::string &text) const;  ; bool FindHeader (const std::string &hdrName, std::string &hdrFullPath) const;  Return true if the header is found in the include paths in this case also fill the full path variable with the full path. ;  ; ESourceFileKind GetSourceFileKind (const char *filename) const;  Check whether the file's extension is compatible with C or C++. ;  ; std::ostream & WriteDefinesArray (std::ostream &out) const;  ; std::ostream & WriteHeaderArray (std::ostream &out) const;  ; std::ostream & WriteIncludePathArray (std::ostream &out) const;  ; std::ostream & WritePPCode (std::ostream &out) const;  ; std::ostream & WritePPIncludes (std::ostream &out) const;  Write #include ""header1.h"" #include ""header2.h"" or, if inlining of headers is requested, dump the content of the files. ;  ; void WriteRegistrationSourceImpl (std::ostream &out, const std::string &dictName, const std::string &demangledDictName, const std::vector< std::string > &headerArray, const std::vector< std::string > &includePathArray, const std::string &fwdDeclStringRAW, const std::string &fwdDeclnArgs",MatchSource.WIKI,doc/v632/classROOT_1_1TModuleGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TModuleGenerator.html
https://root.cern/doc/v632/classROOT_1_1TModuleGenerator.html:5519,Modifiability,variab,variable,5519,"e . Definition at line 144 of file TModuleGenerator.h. Member Enumeration Documentation. ◆ ESourceFileKind. enum ROOT::TModuleGenerator::ESourceFileKind. EnumeratorkSFKNotC ; kSFKHeader ; kSFKSource ; kSFKLinkdef . Definition at line 38 of file TModuleGenerator.h. Constructor & Destructor Documentation. ◆ TModuleGenerator(). TModuleGenerator::TModuleGenerator ; (; clang::CompilerInstance * ; CI, . bool ; inlineHeader, . const std::string & ; shLibFileName, . bool ; isInPCH . ). Definition at line 45 of file TModuleGenerator.cxx. ◆ ~TModuleGenerator(). TModuleGenerator::~TModuleGenerator ; (; ). Definition at line 91 of file TModuleGenerator.cxx. Member Function Documentation. ◆ ConvertToCppString(). void ROOT::TModuleGenerator::ConvertToCppString ; (; std::string & ; text); const. private . ◆ FindHeader(). bool TModuleGenerator::FindHeader ; (; const std::string & ; hdrName, . std::string & ; hdrFullPath . ); const. private . Return true if the header is found in the include paths in this case also fill the full path variable with the full path. ; Definition at line 567 of file TModuleGenerator.cxx. ◆ GetContentName(). const std::string & ROOT::TModuleGenerator::GetContentName ; (; ); const. inline . Definition at line 79 of file TModuleGenerator.h. ◆ GetDemangledDictionaryName(). const std::string & ROOT::TModuleGenerator::GetDemangledDictionaryName ; (; ); const. inline . Definition at line 61 of file TModuleGenerator.h. ◆ GetDictionaryName(). const std::string & ROOT::TModuleGenerator::GetDictionaryName ; (; ); const. inline . Definition at line 57 of file TModuleGenerator.h. ◆ GetErrorCount(). int ROOT::TModuleGenerator::GetErrorCount ; (; ); const. inline . Definition at line 72 of file TModuleGenerator.h. ◆ GetHeaders(). const std::vector< std::string > & ROOT::TModuleGenerator::GetHeaders ; (; ); const. inline . Definition at line 83 of file TModuleGenerator.h. ◆ GetIncludePaths(). const std::vector< std::string > & ROOT::TModuleGenerator::GetIncludePaths ; (",MatchSource.WIKI,doc/v632/classROOT_1_1TModuleGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TModuleGenerator.html
https://root.cern/doc/v632/classROOT_1_1TModuleGenerator.html:7837,Modifiability,variab,variables,7837,"nition at line 65 of file TModuleGenerator.h. ◆ GetSourceFileKind(). TModuleGenerator::ESourceFileKind TModuleGenerator::GetSourceFileKind ; (; const char * ; filename); const. private . Check whether the file's extension is compatible with C or C++. ; Return whether source, header, Linkdef or nothing. ; Definition at line 102 of file TModuleGenerator.cxx. ◆ GetUmbrellaName(). const std::string & ROOT::TModuleGenerator::GetUmbrellaName ; (; ); const. inline . Definition at line 76 of file TModuleGenerator.h. ◆ IsPCH(). bool ROOT::TModuleGenerator::IsPCH ; (; ); const. inline . Definition at line 52 of file TModuleGenerator.h. ◆ ParseArgs(). void TModuleGenerator::ParseArgs ; (; const std::vector< std::string > & ; args). Parse -I -D -U headers.h SomethingLinkdef.h. ; Definition at line 180 of file TModuleGenerator.cxx. ◆ WriteContentHeader(). void TModuleGenerator::WriteContentHeader ; (; std::ostream & ; out); const. Write a header file describing the content of this module through a series of variables inside the namespace ROOT::Dict::[DictionaryName]. ; Each variable is an array of string literals, with a const char* of 0 being the last element, e.g. ROOT::Dict::_DictName::arrIncludes[] = { ""A.h"", ""B.h"", 0 }; ; Definition at line 543 of file TModuleGenerator.cxx. ◆ WriteDefinesArray(). std::ostream & ROOT::TModuleGenerator::WriteDefinesArray ; (; std::ostream & ; out); const. inlineprivate . Definition at line 133 of file TModuleGenerator.h. ◆ WriteHeaderArray(). std::ostream & ROOT::TModuleGenerator::WriteHeaderArray ; (; std::ostream & ; out); const. inlineprivate . Definition at line 125 of file TModuleGenerator.h. ◆ WriteIncludePathArray(). std::ostream & ROOT::TModuleGenerator::WriteIncludePathArray ; (; std::ostream & ; out); const. inlineprivate . Definition at line 129 of file TModuleGenerator.h. ◆ WritePPCode(). std::ostream & ROOT::TModuleGenerator::WritePPCode ; (; std::ostream & ; out); const. inlineprivate . Definition at line 117 of file TModuleGener",MatchSource.WIKI,doc/v632/classROOT_1_1TModuleGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TModuleGenerator.html
https://root.cern/doc/v632/classROOT_1_1TModuleGenerator.html:7905,Modifiability,variab,variable,7905,"::GetSourceFileKind ; (; const char * ; filename); const. private . Check whether the file's extension is compatible with C or C++. ; Return whether source, header, Linkdef or nothing. ; Definition at line 102 of file TModuleGenerator.cxx. ◆ GetUmbrellaName(). const std::string & ROOT::TModuleGenerator::GetUmbrellaName ; (; ); const. inline . Definition at line 76 of file TModuleGenerator.h. ◆ IsPCH(). bool ROOT::TModuleGenerator::IsPCH ; (; ); const. inline . Definition at line 52 of file TModuleGenerator.h. ◆ ParseArgs(). void TModuleGenerator::ParseArgs ; (; const std::vector< std::string > & ; args). Parse -I -D -U headers.h SomethingLinkdef.h. ; Definition at line 180 of file TModuleGenerator.cxx. ◆ WriteContentHeader(). void TModuleGenerator::WriteContentHeader ; (; std::ostream & ; out); const. Write a header file describing the content of this module through a series of variables inside the namespace ROOT::Dict::[DictionaryName]. ; Each variable is an array of string literals, with a const char* of 0 being the last element, e.g. ROOT::Dict::_DictName::arrIncludes[] = { ""A.h"", ""B.h"", 0 }; ; Definition at line 543 of file TModuleGenerator.cxx. ◆ WriteDefinesArray(). std::ostream & ROOT::TModuleGenerator::WriteDefinesArray ; (; std::ostream & ; out); const. inlineprivate . Definition at line 133 of file TModuleGenerator.h. ◆ WriteHeaderArray(). std::ostream & ROOT::TModuleGenerator::WriteHeaderArray ; (; std::ostream & ; out); const. inlineprivate . Definition at line 125 of file TModuleGenerator.h. ◆ WriteIncludePathArray(). std::ostream & ROOT::TModuleGenerator::WriteIncludePathArray ; (; std::ostream & ; out); const. inlineprivate . Definition at line 129 of file TModuleGenerator.h. ◆ WritePPCode(). std::ostream & ROOT::TModuleGenerator::WritePPCode ; (; std::ostream & ; out); const. inlineprivate . Definition at line 117 of file TModuleGenerator.h. ◆ WritePPDefines(). std::ostream & TModuleGenerator::WritePPDefines ; (; std::ostream & ; out); const. Write #i",MatchSource.WIKI,doc/v632/classROOT_1_1TModuleGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TModuleGenerator.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:11007,Energy Efficiency,monitor,monitor,11007," unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nMessages=0);  Send a message with the specified code to at most nMessages workers. ;  ; void DeActivate (TSocket *s);  DeActivate a certain socket. ;  ; bool Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers () const;  ; void HandleMPCode (MPCodeBufPair &msg, TSocket *sender);  Handle messages containing an EMPCode. ;  ; TMPClient & operator= (const TMPClient &)=delete;  ; void ReapWorkers ();  Wait on worker processes and remove their pids from fWorkerPids. ;  ; void Remove (TSocket *s);  Remove a certain socket from the monitor. ;  ; void SetNWorkers (unsigned n);  Set the number of workers that will be spawned by the next call to Fork() ;  . Private Attributes; unsigned fNProcessed;  number of arguments already passed to the workers ;  ; unsigned fNToProcess;  total number of arguments to pass to the workers ;  ; ETask fTaskType = ETask::kNoTask;  the kind of task that is being executed, if any ;  ; friend TExecutorCRTP;  . Additional Inherited Members;  Protected Types inherited from ROOT::TExecutorCRTP< TProcessExecutor >; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  ; using validMapReturnCond = std::enable_if_t<!std::is_reference< InvokeResult_t< F, T... > >::value &&!std::is_void< InvokeResult_t< F, T... > >::value >;  type definition used in templated functions for not allowing mapping functions that return references or void. ;  . #include <ROOT/TProcessExecutor.hxx>. Inheritance diagram for ROOT::TProcessExecutor:. This browser is not abl",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:358,Integrability,interface,interface,358,". ROOT: ROOT::TProcessExecutor Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TProcessExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. . ROOT::TProcessExecutor::Map; This class inherits its interfaces from ROOT::TExecutor; . The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TProcessExecutor never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TProcessExecutor::Map is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Map will outrun the benefits of parallel execution on most machines.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda o",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:522,Integrability,interface,interfaces,522,". ROOT: ROOT::TProcessExecutor Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TProcessExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. . ROOT::TProcessExecutor::Map; This class inherits its interfaces from ROOT::TExecutor; . The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TProcessExecutor never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TProcessExecutor::Map is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Map will outrun the benefits of parallel execution on most machines.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda o",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:1980,Integrability,wrap,wrapped,1980,"It typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TProcessExecutor never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TProcessExecutor::Map is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Map will outrun the benefits of parallel execution on most machines.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Note: the user should take care of initializing random seeds differently in each process (e.g. using the process id in the seed). Otherwise several parallel executions might generate the same sequence of pseudo-random numbers.; Return value:; An std::vector. The elements in the container will be the objects returned by func.; Examples:; root[] ROOT::TProcessExecutor pool; auto hists = pool.Map(CreateHisto, 10);; root[] ROOT::TProcessExecutor pool(2); auto squares = pool.Map([](int a) { return a*a; }, {1,2,3});; a#define a(i)Definition RSha256.hxx:99; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel,...Definition TProcessExecutor.hxx:37. ROOT::",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:2838,Integrability,interface,interface,2838," . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Note: the user should take care of initializing random seeds differently in each process (e.g. using the process id in the seed). Otherwise several parallel executions might generate the same sequence of pseudo-random numbers.; Return value:; An std::vector. The elements in the container will be the objects returned by func.; Examples:; root[] ROOT::TProcessExecutor pool; auto hists = pool.Map(CreateHisto, 10);; root[] ROOT::TProcessExecutor pool(2); auto squares = pool.Map([](int a) { return a*a; }, {1,2,3});; a#define a(i)Definition RSha256.hxx:99; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel,...Definition TProcessExecutor.hxx:37. ROOT::TProcessExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object.; Examples:; root[] ROOT::TProcessExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::TProcessExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TProcessExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TProcessExecutor.hxx:262; v@ vDef",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:8196,Integrability,message,messages,8196,"tion over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >;  Execute a function without arguments several times (Map) and accumulate the results into a single value (Reduce). ;  ; TExecutorCRTP & operator= (const TExecutorCRTP &)=delete;  ; T * Reduce (const std::vector< T * > &mergeObjs);  ""Reduce"" an std::vector into a single object by using the object's Merge method. ;  ; auto Reduce (const std::vector< T > &objs, R redfunc) -> decltype(redfunc(objs));  ""Reduce"" an std::vector into a single object by passing a function as the second argument defining the reduction operation. ;  . Private Types; enum class  ETask : unsigned char { ;   kNoTask; , kMap; , kMapWithArg; , kMapRed; , ;   kMapRedWithArg. };  A collection of the types of tasks that TProcessExecutor can execute. More...;  . Private Member Functions; template<class T > ; void Collect (std::vector< T > &reslist);  Listen for messages sent by the workers and call the appropriate handler function. ;  ; template<class T > ; void HandlePoolCode (MPCodeBufPair &msg, TSocket *sender, std::vector< T > &reslist);  Handle message and reply to the worker. ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto MapImpl (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector in parallel Implementation of the Map method. ;  ; template<class F , class INTEGER , class Cond = validMapReturnCond<F, INTEGER>> ; auto MapImpl (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes in parallel. ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto MapImpl (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector in parallel Implementation",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:8388,Integrability,message,message,8388,"eResult_t< F >;  Execute a function without arguments several times (Map) and accumulate the results into a single value (Reduce). ;  ; TExecutorCRTP & operator= (const TExecutorCRTP &)=delete;  ; T * Reduce (const std::vector< T * > &mergeObjs);  ""Reduce"" an std::vector into a single object by using the object's Merge method. ;  ; auto Reduce (const std::vector< T > &objs, R redfunc) -> decltype(redfunc(objs));  ""Reduce"" an std::vector into a single object by passing a function as the second argument defining the reduction operation. ;  . Private Types; enum class  ETask : unsigned char { ;   kNoTask; , kMap; , kMapWithArg; , kMapRed; , ;   kMapRedWithArg. };  A collection of the types of tasks that TProcessExecutor can execute. More...;  . Private Member Functions; template<class T > ; void Collect (std::vector< T > &reslist);  Listen for messages sent by the workers and call the appropriate handler function. ;  ; template<class T > ; void HandlePoolCode (MPCodeBufPair &msg, TSocket *sender, std::vector< T > &reslist);  Handle message and reply to the worker. ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto MapImpl (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector in parallel Implementation of the Map method. ;  ; template<class F , class INTEGER , class Cond = validMapReturnCond<F, INTEGER>> ; auto MapImpl (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes in parallel. ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto MapImpl (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector in parallel Implementation of the Map method. ;  ; template<class F , class Cond = validMapReturnCond<F>> ; auto MapImpl (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Ex",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:9905,Integrability,message,message,9905," >;  Execute a function over a sequence of indexes in parallel. ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto MapImpl (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector in parallel Implementation of the Map method. ;  ; template<class F , class Cond = validMapReturnCond<F>> ; auto MapImpl (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times in parallel. ;  ; void ReplyToFuncResult (TSocket *s);  Reply to a worker who just sent a result. ;  ; void ReplyToIdle (TSocket *s);  Reply to a worker who is idle. ;  ; void Reset ();  Reset TProcessExecutor's state. ;  ;  Private Member Functions inherited from TMPClient;  TMPClient (const TMPClient &)=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nMessages=0);  Send a message with the specified code to at most nMessages workers. ;  ; void DeActivate (TSocket *s);  DeActivate a certain socket. ;  ; bool Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers () const;  ; void HandleMPCode (MPCodeBufPair &msg, TSocket *sender);  Handle messages containing an EMPCode. ;  ; TMPClient & operator= (const TMPClient &)=delete;  ; void ReapWorkers ();  W",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:10057,Integrability,message,message,10057,"l (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector in parallel Implementation of the Map method. ;  ; template<class F , class Cond = validMapReturnCond<F>> ; auto MapImpl (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times in parallel. ;  ; void ReplyToFuncResult (TSocket *s);  Reply to a worker who just sent a result. ;  ; void ReplyToIdle (TSocket *s);  Reply to a worker who is idle. ;  ; void Reset ();  Reset TProcessExecutor's state. ;  ;  Private Member Functions inherited from TMPClient;  TMPClient (const TMPClient &)=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nMessages=0);  Send a message with the specified code to at most nMessages workers. ;  ; void DeActivate (TSocket *s);  DeActivate a certain socket. ;  ; bool Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers () const;  ; void HandleMPCode (MPCodeBufPair &msg, TSocket *sender);  Handle messages containing an EMPCode. ;  ; TMPClient & operator= (const TMPClient &)=delete;  ; void ReapWorkers ();  Wait on worker processes and remove their pids from fWorkerPids. ;  ; void Remove (TSocket *s);  Remove a certain socket from the monitor. ;  ; void Se",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:10204,Integrability,message,message,10204," ;  ; template<class F , class Cond = validMapReturnCond<F>> ; auto MapImpl (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times in parallel. ;  ; void ReplyToFuncResult (TSocket *s);  Reply to a worker who just sent a result. ;  ; void ReplyToIdle (TSocket *s);  Reply to a worker who is idle. ;  ; void Reset ();  Reset TProcessExecutor's state. ;  ;  Private Member Functions inherited from TMPClient;  TMPClient (const TMPClient &)=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nMessages=0);  Send a message with the specified code to at most nMessages workers. ;  ; void DeActivate (TSocket *s);  DeActivate a certain socket. ;  ; bool Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers () const;  ; void HandleMPCode (MPCodeBufPair &msg, TSocket *sender);  Handle messages containing an EMPCode. ;  ; TMPClient & operator= (const TMPClient &)=delete;  ; void ReapWorkers ();  Wait on worker processes and remove their pids from fWorkerPids. ;  ; void Remove (TSocket *s);  Remove a certain socket from the monitor. ;  ; void SetNWorkers (unsigned n);  Set the number of workers that will be spawned by the next call to Fork() ;  . Private Attributes; unsigned fNProcessed;  number of arguments alrea",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:10368,Integrability,message,message,10368,"ithout arguments several times in parallel. ;  ; void ReplyToFuncResult (TSocket *s);  Reply to a worker who just sent a result. ;  ; void ReplyToIdle (TSocket *s);  Reply to a worker who is idle. ;  ; void Reset ();  Reset TProcessExecutor's state. ;  ;  Private Member Functions inherited from TMPClient;  TMPClient (const TMPClient &)=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nMessages=0);  Send a message with the specified code to at most nMessages workers. ;  ; void DeActivate (TSocket *s);  DeActivate a certain socket. ;  ; bool Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers () const;  ; void HandleMPCode (MPCodeBufPair &msg, TSocket *sender);  Handle messages containing an EMPCode. ;  ; TMPClient & operator= (const TMPClient &)=delete;  ; void ReapWorkers ();  Wait on worker processes and remove their pids from fWorkerPids. ;  ; void Remove (TSocket *s);  Remove a certain socket from the monitor. ;  ; void SetNWorkers (unsigned n);  Set the number of workers that will be spawned by the next call to Fork() ;  . Private Attributes; unsigned fNProcessed;  number of arguments already passed to the workers ;  ; unsigned fNToProcess;  total number of arguments to pass to the workers ;  ; ETask fTaskType = ETask::kNoTask;  the kind of task that",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:10765,Integrability,message,messages,10765,")=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nMessages=0);  Send a message with the specified code to at most nMessages workers. ;  ; void DeActivate (TSocket *s);  DeActivate a certain socket. ;  ; bool Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers () const;  ; void HandleMPCode (MPCodeBufPair &msg, TSocket *sender);  Handle messages containing an EMPCode. ;  ; TMPClient & operator= (const TMPClient &)=delete;  ; void ReapWorkers ();  Wait on worker processes and remove their pids from fWorkerPids. ;  ; void Remove (TSocket *s);  Remove a certain socket from the monitor. ;  ; void SetNWorkers (unsigned n);  Set the number of workers that will be spawned by the next call to Fork() ;  . Private Attributes; unsigned fNProcessed;  number of arguments already passed to the workers ;  ; unsigned fNToProcess;  total number of arguments to pass to the workers ;  ; ETask fTaskType = ETask::kNoTask;  the kind of task that is being executed, if any ;  ; friend TExecutorCRTP;  . Additional Inherited Members;  Protected Types inherited from ROOT::TExecutorCRTP< TProcessExecutor >; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  ; using validMapReturnCond = std::enable_if_t<!std::is_reference< InvokeResult_t< F, T... > >::value &&!",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:12307,Integrability,message,messages,12307," ETask fTaskType = ETask::kNoTask;  the kind of task that is being executed, if any ;  ; friend TExecutorCRTP;  . Additional Inherited Members;  Protected Types inherited from ROOT::TExecutorCRTP< TProcessExecutor >; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  ; using validMapReturnCond = std::enable_if_t<!std::is_reference< InvokeResult_t< F, T... > >::value &&!std::is_void< InvokeResult_t< F, T... > >::value >;  type definition used in templated functions for not allowing mapping functions that return references or void. ;  . #include <ROOT/TProcessExecutor.hxx>. Inheritance diagram for ROOT::TProcessExecutor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ETask. enum class ROOT::TProcessExecutor::ETask : unsigned char. strongprivate . A collection of the types of tasks that TProcessExecutor can execute. ; It is used to interpret in the right way and properly reply to the messages received (see, for example, TProcessExecutor::HandleInput) . EnumeratorkNoTask no task is being executed . kMap a Map method with no arguments is being executed . kMapWithArg a Map method with arguments is being executed . kMapRed a MapReduce method with no arguments is being executed . kMapRedWithArg a MapReduce method with arguments is being executed . Definition at line 99 of file TProcessExecutor.hxx. Constructor & Destructor Documentation. ◆ TProcessExecutor() [1/2]. ROOT::TProcessExecutor::TProcessExecutor ; (; unsigned ; nWorkers = 0). explicit . Class constructor. ; Parameters. nWorkersNumber of times this ROOT session will be forked, i.e. the number of workers that will be spawned. . Definition at line 90 of file TProcessExecutor.cxx. ◆ ~TProcessExecutor(). ROOT::TProcessExecutor::~TProcessExecutor ; (; ). default . ◆ TProcessExecutor() [2/2]. ROOT::TProcessExecutor::TProcessExecutor ; (; const TProcessExecutor & ; ). delete . Member Function Documentation. ◆ Collect(",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:13425,Integrability,message,messages,13425,"ents is being executed . kMapWithArg a Map method with arguments is being executed . kMapRed a MapReduce method with no arguments is being executed . kMapRedWithArg a MapReduce method with arguments is being executed . Definition at line 99 of file TProcessExecutor.hxx. Constructor & Destructor Documentation. ◆ TProcessExecutor() [1/2]. ROOT::TProcessExecutor::TProcessExecutor ; (; unsigned ; nWorkers = 0). explicit . Class constructor. ; Parameters. nWorkersNumber of times this ROOT session will be forked, i.e. the number of workers that will be spawned. . Definition at line 90 of file TProcessExecutor.cxx. ◆ ~TProcessExecutor(). ROOT::TProcessExecutor::~TProcessExecutor ; (; ). default . ◆ TProcessExecutor() [2/2]. ROOT::TProcessExecutor::TProcessExecutor ; (; const TProcessExecutor & ; ). delete . Member Function Documentation. ◆ Collect(). template<class T > . void ROOT::TProcessExecutor::Collect ; (; std::vector< T > & ; reslist). private . Listen for messages sent by the workers and call the appropriate handler function. ; TProcessExecutor::HandlePoolCode is called on messages with a code < 1000 and TMPClient::HandleMPCode is called on messages with a code >= 1000. ; Definition at line 412 of file TProcessExecutor.hxx. ◆ GetPoolSize(). unsigned ROOT::TProcessExecutor::GetPoolSize ; (; ); const. inline . Return the number of pooled parallel workers. ; ReturnsThe number of workers in the pool. ; Definition at line 72 of file TProcessExecutor.hxx. ◆ HandlePoolCode(). template<class T > . void ROOT::TProcessExecutor::HandlePoolCode ; (; MPCodeBufPair & ; msg, . TSocket * ; sender, . std::vector< T > & ; reslist . ). private . Handle message and reply to the worker. ; Definition at line 383 of file TProcessExecutor.hxx. ◆ MapImpl() [1/4]. template<class F , class T , class Cond > . auto ROOT::TProcessExecutor::MapImpl ; (; F ; func, . const std::vector< T > & ; args . ); -> std::vector<InvokeResult_t<F, T>>. private . Execute a function over the elements of an immut",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:13545,Integrability,message,messages,13545,"h no arguments is being executed . kMapRedWithArg a MapReduce method with arguments is being executed . Definition at line 99 of file TProcessExecutor.hxx. Constructor & Destructor Documentation. ◆ TProcessExecutor() [1/2]. ROOT::TProcessExecutor::TProcessExecutor ; (; unsigned ; nWorkers = 0). explicit . Class constructor. ; Parameters. nWorkersNumber of times this ROOT session will be forked, i.e. the number of workers that will be spawned. . Definition at line 90 of file TProcessExecutor.cxx. ◆ ~TProcessExecutor(). ROOT::TProcessExecutor::~TProcessExecutor ; (; ). default . ◆ TProcessExecutor() [2/2]. ROOT::TProcessExecutor::TProcessExecutor ; (; const TProcessExecutor & ; ). delete . Member Function Documentation. ◆ Collect(). template<class T > . void ROOT::TProcessExecutor::Collect ; (; std::vector< T > & ; reslist). private . Listen for messages sent by the workers and call the appropriate handler function. ; TProcessExecutor::HandlePoolCode is called on messages with a code < 1000 and TMPClient::HandleMPCode is called on messages with a code >= 1000. ; Definition at line 412 of file TProcessExecutor.hxx. ◆ GetPoolSize(). unsigned ROOT::TProcessExecutor::GetPoolSize ; (; ); const. inline . Return the number of pooled parallel workers. ; ReturnsThe number of workers in the pool. ; Definition at line 72 of file TProcessExecutor.hxx. ◆ HandlePoolCode(). template<class T > . void ROOT::TProcessExecutor::HandlePoolCode ; (; MPCodeBufPair & ; msg, . TSocket * ; sender, . std::vector< T > & ; reslist . ). private . Handle message and reply to the worker. ; Definition at line 383 of file TProcessExecutor.hxx. ◆ MapImpl() [1/4]. template<class F , class T , class Cond > . auto ROOT::TProcessExecutor::MapImpl ; (; F ; func, . const std::vector< T > & ; args . ); -> std::vector<InvokeResult_t<F, T>>. private . Execute a function over the elements of an immutable vector in parallel Implementation of the Map method. ; Parameters. funcFunction to be executed on the elements",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:13614,Integrability,message,messages,13614,"h no arguments is being executed . kMapRedWithArg a MapReduce method with arguments is being executed . Definition at line 99 of file TProcessExecutor.hxx. Constructor & Destructor Documentation. ◆ TProcessExecutor() [1/2]. ROOT::TProcessExecutor::TProcessExecutor ; (; unsigned ; nWorkers = 0). explicit . Class constructor. ; Parameters. nWorkersNumber of times this ROOT session will be forked, i.e. the number of workers that will be spawned. . Definition at line 90 of file TProcessExecutor.cxx. ◆ ~TProcessExecutor(). ROOT::TProcessExecutor::~TProcessExecutor ; (; ). default . ◆ TProcessExecutor() [2/2]. ROOT::TProcessExecutor::TProcessExecutor ; (; const TProcessExecutor & ; ). delete . Member Function Documentation. ◆ Collect(). template<class T > . void ROOT::TProcessExecutor::Collect ; (; std::vector< T > & ; reslist). private . Listen for messages sent by the workers and call the appropriate handler function. ; TProcessExecutor::HandlePoolCode is called on messages with a code < 1000 and TMPClient::HandleMPCode is called on messages with a code >= 1000. ; Definition at line 412 of file TProcessExecutor.hxx. ◆ GetPoolSize(). unsigned ROOT::TProcessExecutor::GetPoolSize ; (; ); const. inline . Return the number of pooled parallel workers. ; ReturnsThe number of workers in the pool. ; Definition at line 72 of file TProcessExecutor.hxx. ◆ HandlePoolCode(). template<class T > . void ROOT::TProcessExecutor::HandlePoolCode ; (; MPCodeBufPair & ; msg, . TSocket * ; sender, . std::vector< T > & ; reslist . ). private . Handle message and reply to the worker. ; Definition at line 383 of file TProcessExecutor.hxx. ◆ MapImpl() [1/4]. template<class F , class T , class Cond > . auto ROOT::TProcessExecutor::MapImpl ; (; F ; func, . const std::vector< T > & ; args . ); -> std::vector<InvokeResult_t<F, T>>. private . Execute a function over the elements of an immutable vector in parallel Implementation of the Map method. ; Parameters. funcFunction to be executed on the elements",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:14117,Integrability,message,message,14117,"cutor ; (; ). default . ◆ TProcessExecutor() [2/2]. ROOT::TProcessExecutor::TProcessExecutor ; (; const TProcessExecutor & ; ). delete . Member Function Documentation. ◆ Collect(). template<class T > . void ROOT::TProcessExecutor::Collect ; (; std::vector< T > & ; reslist). private . Listen for messages sent by the workers and call the appropriate handler function. ; TProcessExecutor::HandlePoolCode is called on messages with a code < 1000 and TMPClient::HandleMPCode is called on messages with a code >= 1000. ; Definition at line 412 of file TProcessExecutor.hxx. ◆ GetPoolSize(). unsigned ROOT::TProcessExecutor::GetPoolSize ; (; ); const. inline . Return the number of pooled parallel workers. ; ReturnsThe number of workers in the pool. ; Definition at line 72 of file TProcessExecutor.hxx. ◆ HandlePoolCode(). template<class T > . void ROOT::TProcessExecutor::HandlePoolCode ; (; MPCodeBufPair & ; msg, . TSocket * ; sender, . std::vector< T > & ; reslist . ). private . Handle message and reply to the worker. ; Definition at line 383 of file TProcessExecutor.hxx. ◆ MapImpl() [1/4]. template<class F , class T , class Cond > . auto ROOT::TProcessExecutor::MapImpl ; (; F ; func, . const std::vector< T > & ; args . ); -> std::vector<InvokeResult_t<F, T>>. private . Execute a function over the elements of an immutable vector in parallel Implementation of the Map method. ; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsVector of elements passed as an argument to func. . ReturnsA vector with the results of the function calls. ; Definition at line 205 of file TProcessExecutor.hxx. ◆ MapImpl() [2/4]. template<class F , class INTEGER , class Cond > . auto ROOT::TProcessExecutor::MapImpl ; (; F ; func, . ROOT::TSeq< INTEGER > ; args . ); -> std::vector<InvokeResult_t<F, INTEGER>>. private . Execute a function over a sequence of indexes in parallel. ; Implementation of the Map method.; Parameters. funcFunction to be executed.",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:16425,Integrability,wrap,wrapping,16425," T , class Cond > . auto ROOT::TProcessExecutor::MapImpl ; (; F ; func, . std::vector< T > & ; args . ); -> std::vector<InvokeResult_t<F, T>>. private . Execute a function over the elements of a vector in parallel Implementation of the Map method. ; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsVector of elements passed as an argument to func. . ReturnsA vector with the results of the function calls. ; Definition at line 160 of file TProcessExecutor.hxx. ◆ MapImpl() [4/4]. template<class F , class Cond > . auto ROOT::TProcessExecutor::MapImpl ; (; F ; func, . unsigned ; nTimes . ); -> std::vector<InvokeResult_t<F>>. private . Execute a function without arguments several times in parallel. ; Implementation of the Map method.; Parameters. funcFunction to be executed. ; nTimesNumber of times function should be called. . ReturnsA vector with the results of the function calls. Functions that take arguments can be executed (with fixed arguments) by wrapping them in a lambda or with std::bind. ; Definition at line 119 of file TProcessExecutor.hxx. ◆ MapReduce() [1/3]. template<class F , class T , class R , class Cond > . auto ROOT::TProcessExecutor::MapReduce ; (; F ; func, . const std::vector< T > & ; args, . R ; redfunc . ); -> InvokeResult_t<F, T>. Execute a function in parallel over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results.; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed assecond argument as a parameter. ; argsImmutable vector, whose elements are passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func into partial ",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:509,Modifiability,inherit,inherits,509,". ROOT: ROOT::TProcessExecutor Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TProcessExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. . ROOT::TProcessExecutor::Map; This class inherits its interfaces from ROOT::TExecutor; . The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TProcessExecutor never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TProcessExecutor::Map is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Map will outrun the benefits of parallel execution on most machines.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda o",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:5174,Modifiability,inherit,inherited,5174,"turnCond<F, T>> ; auto MapReduce (F func, const std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function in parallel over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ;  ; template<class F , class T , class R , class Cond = validMapReturnCond<F, T>> ; auto MapReduce (F func, std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function in parallel over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ;  ; template<class F , class R , class Cond = validMapReturnCond<F>> ; auto MapReduce (F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >;  Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce). ;  ; TProcessExecutor & operator= (const TProcessExecutor &)=delete;  ; void SetNWorkers (unsigned n);  ;  Public Member Functions inherited from ROOT::TExecutorCRTP< TProcessExecutor >;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes. ;  ; auto Map (F func, std::initializer_list< T > args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an initializer_list. ;  ; auto Map (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector. ;  ; auto Map (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times. ;  ; T * MapReduce (F func, const std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapR",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:6139,Modifiability,inherit,inheriting,6139,"ned n);  ;  Public Member Functions inherited from ROOT::TExecutorCRTP< TProcessExecutor >;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes. ;  ; auto Map (F func, std::initializer_list< T > args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an initializer_list. ;  ; auto Map (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector. ;  ; auto Map (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times. ;  ; T * MapReduce (F func, const std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, const std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, ROOT::TSeq< INTEGER > args, R redfunc) -> InvokeResult_t< F, INTEGER >;  Execute a function over a sequence of indexes (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, std::initializer_list< T > args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce). ;  ; T * MapReduce (F func, std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of a vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, std::vector< T > &args, R redfunc) -",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:6986,Modifiability,inherit,inheriting,6986,"> >;  Execute a function without arguments several times. ;  ; T * MapReduce (F func, const std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, const std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, ROOT::TSeq< INTEGER > args, R redfunc) -> InvokeResult_t< F, INTEGER >;  Execute a function over a sequence of indexes (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, std::initializer_list< T > args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce). ;  ; T * MapReduce (F func, std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of a vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >;  Execute a function without arguments several times (Map) and accumulate the results into a single value (Reduce). ;  ; TExecutorCRTP & operator= (const TExecutorCRTP &)=delete;  ; T * Reduce (const std::vector< T * > &mergeObjs);  ""Reduce"" an std::vector into a single object by using the object's Merge method. ;  ; auto Reduce (const std::vector< T > &objs, R redfunc) -> decltype(redfunc(objs));  ""Reduce"" an std::vector into a single object by passing a function as the second argument defining the reduction operation. ;  . Private Types; enum class  ETask : unsigned char { ;   kNoTask; , kMap; , kMapWithArg; , kMapR",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:9643,Modifiability,inherit,inherited,9643,"p method. ;  ; template<class F , class INTEGER , class Cond = validMapReturnCond<F, INTEGER>> ; auto MapImpl (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes in parallel. ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto MapImpl (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector in parallel Implementation of the Map method. ;  ; template<class F , class Cond = validMapReturnCond<F>> ; auto MapImpl (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times in parallel. ;  ; void ReplyToFuncResult (TSocket *s);  Reply to a worker who just sent a result. ;  ; void ReplyToIdle (TSocket *s);  Reply to a worker who is idle. ;  ; void Reset ();  Reset TProcessExecutor's state. ;  ;  Private Member Functions inherited from TMPClient;  TMPClient (const TMPClient &)=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nMessages=0);  Send a message with the specified code to at most nMessages workers. ;  ; void DeActivate (TSocket *s);  DeActivate a certain socket. ;  ; bool Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers (",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:11467,Modifiability,inherit,inherited,11467,"l Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers () const;  ; void HandleMPCode (MPCodeBufPair &msg, TSocket *sender);  Handle messages containing an EMPCode. ;  ; TMPClient & operator= (const TMPClient &)=delete;  ; void ReapWorkers ();  Wait on worker processes and remove their pids from fWorkerPids. ;  ; void Remove (TSocket *s);  Remove a certain socket from the monitor. ;  ; void SetNWorkers (unsigned n);  Set the number of workers that will be spawned by the next call to Fork() ;  . Private Attributes; unsigned fNProcessed;  number of arguments already passed to the workers ;  ; unsigned fNToProcess;  total number of arguments to pass to the workers ;  ; ETask fTaskType = ETask::kNoTask;  the kind of task that is being executed, if any ;  ; friend TExecutorCRTP;  . Additional Inherited Members;  Protected Types inherited from ROOT::TExecutorCRTP< TProcessExecutor >; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  ; using validMapReturnCond = std::enable_if_t<!std::is_reference< InvokeResult_t< F, T... > >::value &&!std::is_void< InvokeResult_t< F, T... > >::value >;  type definition used in templated functions for not allowing mapping functions that return references or void. ;  . #include <ROOT/TProcessExecutor.hxx>. Inheritance diagram for ROOT::TProcessExecutor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ETask. enum class ROOT::TProcessExecutor::ETask : unsigned char. strongprivate . A collection of the types of tasks that TProcessExecutor can execute. ; It is used to interpret in the right way and properly reply to the messages received (see, for example, TProcessExecutor::HandleInput) . EnumeratorkNoTask no task is being executed . kMap a Map method with no arguments is being executed . kMapWithArg a Map method ",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:17093,Performance,perform,performs,17093,">>. private . Execute a function without arguments several times in parallel. ; Implementation of the Map method.; Parameters. funcFunction to be executed. ; nTimesNumber of times function should be called. . ReturnsA vector with the results of the function calls. Functions that take arguments can be executed (with fixed arguments) by wrapping them in a lambda or with std::bind. ; Definition at line 119 of file TProcessExecutor.hxx. ◆ MapReduce() [1/3]. template<class F , class T , class R , class Cond > . auto ROOT::TProcessExecutor::MapReduce ; (; F ; func, . const std::vector< T > & ; args, . R ; redfunc . ); -> InvokeResult_t<F, T>. Execute a function in parallel over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results.; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed assecond argument as a parameter. ; argsImmutable vector, whose elements are passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 344 of file TProcessExecutor.hxx. ◆ MapReduce() [2/3]. template<class F , class T , class R , class Cond > . auto ROOT::TProcessExecutor::MapReduce ; (; F ; func, . std::vector< T > & ; args, . R ; redfunc . ); -> InvokeResult_t<F, T>. Execute a function in parallel over the elements of a vector (Map) and accumulate the results into ",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:18338,Performance,perform,performs,18338,"ncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 344 of file TProcessExecutor.hxx. ◆ MapReduce() [2/3]. template<class F , class T , class R , class Cond > . auto ROOT::TProcessExecutor::MapReduce ; (; F ; func, . std::vector< T > & ; args, . R ; redfunc . ); -> InvokeResult_t<F, T>. Execute a function in parallel over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results.; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed assecond argument as a parameter. ; argsVector of elements passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 302 of file TProcessExecutor.hxx. ◆ MapReduce() [3/3]. template<class F , class R , class Cond > . auto ROOT::TProcessExecutor::MapReduce ; (; F ; func, . unsigned ; nTimes, . R ; redfunc . ); -> InvokeResult_t<F>. Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce). ; Parameters. funcFunction to be exec",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:351,Usability,simpl,simple,351,". ROOT: ROOT::TProcessExecutor Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TProcessExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. . ROOT::TProcessExecutor::Map; This class inherits its interfaces from ROOT::TExecutor; . The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TProcessExecutor never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TProcessExecutor::Map is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Map will outrun the benefits of parallel execution on most machines.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda o",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:1249,Usability,simpl,simply,1249,"ber Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TProcessExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. . ROOT::TProcessExecutor::Map; This class inherits its interfaces from ROOT::TExecutor; . The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TProcessExecutor never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TProcessExecutor::Map is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Map will outrun the benefits of parallel execution on most machines.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Note: the user should take care of initializing random seeds differently in each process (e.g. using the process",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:2831,Usability,simpl,simple,2831," . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Note: the user should take care of initializing random seeds differently in each process (e.g. using the process id in the seed). Otherwise several parallel executions might generate the same sequence of pseudo-random numbers.; Return value:; An std::vector. The elements in the container will be the objects returned by func.; Examples:; root[] ROOT::TProcessExecutor pool; auto hists = pool.Map(CreateHisto, 10);; root[] ROOT::TProcessExecutor pool(2); auto squares = pool.Map([](int a) { return a*a; }, {1,2,3});; a#define a(i)Definition RSha256.hxx:99; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel,...Definition TProcessExecutor.hxx:37. ROOT::TProcessExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object.; Examples:; root[] ROOT::TProcessExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::TProcessExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TProcessExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TProcessExecutor.hxx:262; v@ vDef",MatchSource.WIKI,doc/v632/classROOT_1_1TProcessExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html
https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html:3624,Availability,error,error,3624,"k< MutexT, RecurseCountsT >::StateDelta = TVirtualRWMutex::StateDelta. Definition at line 300 of file TReentrantRWLock.hxx. Constructor & Destructor Documentation. ◆ TReentrantRWLock(). template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::TReentrantRWLock ; (; ). inline . Regular constructor. ; Definition at line 304 of file TReentrantRWLock.hxx. Member Function Documentation. ◆ Apply(). template<typename MutexT , typename RecurseCountsT > . void TReentrantRWLock::Apply ; (; std::unique_ptr< StateDelta > && ; delta). Re-apply a delta. ; Definition at line 358 of file TReentrantRWLock.cxx. ◆ AssertReadCountLocIsFromCurrentThread(). template<typename MutexT , typename RecurseCountsT > . void TReentrantRWLock::AssertReadCountLocIsFromCurrentThread ; (; const size_t * ; presumedLocalReadersCount). private . Assert that presumedLocalReadersCount really matches the local read count. ; Print an error message if not. ; Definition at line 394 of file TReentrantRWLock.cxx. ◆ GetStateBefore(). template<typename MutexT , typename RecurseCountsT > . std::unique_ptr< TVirtualRWMutex::State > TReentrantRWLock::GetStateBefore. Get the lock state before the most recent write lock was taken. ; Definition at line 260 of file TReentrantRWLock.cxx. ◆ ReadLock(). template<typename MutexT , typename RecurseCountsT > . TVirtualRWMutex::Hint_t * TReentrantRWLock::ReadLock. Acquire the lock in read mode. ; Definition at line 70 of file TReentrantRWLock.cxx. ◆ ReadUnLock(). template<typename MutexT , typename RecurseCountsT > . void TReentrantRWLock::ReadUnLock ; (; TVirtualRWMutex::Hint_t * ; hint). Release the lock in read mode. ; Definition at line 137 of file TReentrantRWLock.cxx. ◆ Rewind(). template<typename MutexT , typename RecurseCountsT > . std::unique_ptr< TVirtualRWMutex::StateDelta > TReentrantRWLock::Rewind ; (; const State & ; earlierState). Rewind to an earlier mutex state, returning ",MatchSource.WIKI,doc/v632/classROOT_1_1TReentrantRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html
https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html:2164,Deployability,patch,patches,2164," Rewind (const State &earlierState);  Rewind to an earlier mutex state, returning the delta. ;  ; TVirtualRWMutex::Hint_t * WriteLock ();  Acquire the lock in write mode. ;  ; void WriteUnLock (TVirtualRWMutex::Hint_t *);  Release the lock in write mode. ;  . Private Member Functions; void AssertReadCountLocIsFromCurrentThread (const size_t *presumedLocalReadersCount);  Assert that presumedLocalReadersCount really matches the local read count. ;  . Private Attributes; std::condition_variable_any fCond;  ! RWlock internal condition variable ;  ; MutexT fMutex;  ! RWlock internal mutex ;  ; std::atomic< int > fReaderReservation;  ! A reader wants access ;  ; std::atomic< int > fReaders;  ! Number of readers ;  ; RecurseCountsT fRecurseCounts;  ! Trackers for re-entry in the lock by the same thread. ;  ; std::atomic< bool > fWriter;  ! Is there a writer? ;  ; std::atomic< int > fWriterReservation;  ! A writer wants access ;  . #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/core/thread/src/TReentrantRWLock.hxx>; Member Typedef Documentation. ◆ State. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . using ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::State = TVirtualRWMutex::State. Definition at line 299 of file TReentrantRWLock.hxx. ◆ StateDelta. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . using ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::StateDelta = TVirtualRWMutex::StateDelta. Definition at line 300 of file TReentrantRWLock.hxx. Constructor & Destructor Documentation. ◆ TReentrantRWLock(). template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::TReentrantRWLock ; (; ). inline . Regular constructor. ; Definition at line 304 of file TReentrantRWLock.hxx. Member Function Documentation. ◆ Apply(). template<typename MutexT , t",MatchSource.WIKI,doc/v632/classROOT_1_1TReentrantRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html
https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html:3630,Integrability,message,message,3630,"k< MutexT, RecurseCountsT >::StateDelta = TVirtualRWMutex::StateDelta. Definition at line 300 of file TReentrantRWLock.hxx. Constructor & Destructor Documentation. ◆ TReentrantRWLock(). template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::TReentrantRWLock ; (; ). inline . Regular constructor. ; Definition at line 304 of file TReentrantRWLock.hxx. Member Function Documentation. ◆ Apply(). template<typename MutexT , typename RecurseCountsT > . void TReentrantRWLock::Apply ; (; std::unique_ptr< StateDelta > && ; delta). Re-apply a delta. ; Definition at line 358 of file TReentrantRWLock.cxx. ◆ AssertReadCountLocIsFromCurrentThread(). template<typename MutexT , typename RecurseCountsT > . void TReentrantRWLock::AssertReadCountLocIsFromCurrentThread ; (; const size_t * ; presumedLocalReadersCount). private . Assert that presumedLocalReadersCount really matches the local read count. ; Print an error message if not. ; Definition at line 394 of file TReentrantRWLock.cxx. ◆ GetStateBefore(). template<typename MutexT , typename RecurseCountsT > . std::unique_ptr< TVirtualRWMutex::State > TReentrantRWLock::GetStateBefore. Get the lock state before the most recent write lock was taken. ; Definition at line 260 of file TReentrantRWLock.cxx. ◆ ReadLock(). template<typename MutexT , typename RecurseCountsT > . TVirtualRWMutex::Hint_t * TReentrantRWLock::ReadLock. Acquire the lock in read mode. ; Definition at line 70 of file TReentrantRWLock.cxx. ◆ ReadUnLock(). template<typename MutexT , typename RecurseCountsT > . void TReentrantRWLock::ReadUnLock ; (; TVirtualRWMutex::Hint_t * ; hint). Release the lock in read mode. ; Definition at line 137 of file TReentrantRWLock.cxx. ◆ Rewind(). template<typename MutexT , typename RecurseCountsT > . std::unique_ptr< TVirtualRWMutex::StateDelta > TReentrantRWLock::Rewind ; (; const State & ; earlierState). Rewind to an earlier mutex state, returning ",MatchSource.WIKI,doc/v632/classROOT_1_1TReentrantRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html
https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html:1678,Modifiability,variab,variable,1678,"pply (std::unique_ptr< StateDelta > &&delta);  Re-apply a delta. ;  ; std::unique_ptr< State > GetStateBefore ();  Get the lock state before the most recent write lock was taken. ;  ; TVirtualRWMutex::Hint_t * ReadLock ();  Acquire the lock in read mode. ;  ; void ReadUnLock (TVirtualRWMutex::Hint_t *);  Release the lock in read mode. ;  ; std::unique_ptr< StateDelta > Rewind (const State &earlierState);  Rewind to an earlier mutex state, returning the delta. ;  ; TVirtualRWMutex::Hint_t * WriteLock ();  Acquire the lock in write mode. ;  ; void WriteUnLock (TVirtualRWMutex::Hint_t *);  Release the lock in write mode. ;  . Private Member Functions; void AssertReadCountLocIsFromCurrentThread (const size_t *presumedLocalReadersCount);  Assert that presumedLocalReadersCount really matches the local read count. ;  . Private Attributes; std::condition_variable_any fCond;  ! RWlock internal condition variable ;  ; MutexT fMutex;  ! RWlock internal mutex ;  ; std::atomic< int > fReaderReservation;  ! A reader wants access ;  ; std::atomic< int > fReaders;  ! Number of readers ;  ; RecurseCountsT fRecurseCounts;  ! Trackers for re-entry in the lock by the same thread. ;  ; std::atomic< bool > fWriter;  ! Is there a writer? ;  ; std::atomic< int > fWriterReservation;  ! A writer wants access ;  . #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/core/thread/src/TReentrantRWLock.hxx>; Member Typedef Documentation. ◆ State. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . using ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::State = TVirtualRWMutex::State. Definition at line 299 of file TReentrantRWLock.hxx. ◆ StateDelta. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . using ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::StateDelta = TVirtualRWMutex::StateDelta. Definition at line 300 of file TReentrantRWLock.hxx. Constructor & Destr",MatchSource.WIKI,doc/v632/classROOT_1_1TReentrantRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html
https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html:5394,Modifiability,variab,variable,5394," ◆ Rewind(). template<typename MutexT , typename RecurseCountsT > . std::unique_ptr< TVirtualRWMutex::StateDelta > TReentrantRWLock::Rewind ; (; const State & ; earlierState). Rewind to an earlier mutex state, returning the delta. ; Definition at line 300 of file TReentrantRWLock.cxx. ◆ WriteLock(). template<typename MutexT , typename RecurseCountsT > . TVirtualRWMutex::Hint_t * TReentrantRWLock::WriteLock. Acquire the lock in write mode. ; Definition at line 169 of file TReentrantRWLock.cxx. ◆ WriteUnLock(). template<typename MutexT , typename RecurseCountsT > . void TReentrantRWLock::WriteUnLock ; (; TVirtualRWMutex::Hint_t * ; ). Release the lock in write mode. ; Definition at line 217 of file TReentrantRWLock.cxx. Member Data Documentation. ◆ fCond. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::condition_variable_any ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fCond. private . ! RWlock internal condition variable ; Definition at line 287 of file TReentrantRWLock.hxx. ◆ fMutex. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . MutexT ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fMutex. private . ! RWlock internal mutex ; Definition at line 286 of file TReentrantRWLock.hxx. ◆ fReaderReservation. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<int> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fReaderReservation. private . ! A reader wants access ; Definition at line 283 of file TReentrantRWLock.hxx. ◆ fReaders. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<int> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fReaders. private . ! Number of readers ; Definition at line 282 of file TReentrantRWLock.hxx. ◆ fRecurseCounts. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . Recur",MatchSource.WIKI,doc/v632/classROOT_1_1TReentrantRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html
